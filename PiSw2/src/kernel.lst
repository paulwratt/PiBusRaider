
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <SET_BIT15+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea008254 	b	289b8 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd945 	sub	sp, sp, #1130496	; 0x114000
    8070:	e24ddeb2 	sub	sp, sp, #2848	; 0xb20
    8074:	e24dd008 	sub	sp, sp, #8
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00000f 	bl	80c0 <CKernel::CKernel()>
    8080:	e1a0000d 	mov	r0, sp
    8084:	eb0000a3 	bl	8318 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a000004 	beq	80a4 <main+0x3c>
    8090:	e1a0000d 	mov	r0, sp
    8094:	eb0000e7 	bl	8438 <CKernel::Run()>
    8098:	e2404002 	sub	r4, r0, #2
    809c:	e16f4f14 	clz	r4, r4
    80a0:	e1a042a4 	lsr	r4, r4, #5
    80a4:	e1a0000d 	mov	r0, sp
    80a8:	eb000072 	bl	8278 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28dd945 	add	sp, sp, #1130496	; 0x114000
    80b4:	e28ddeb2 	add	sp, sp, #2848	; 0xb20
    80b8:	e28dd008 	add	sp, sp, #8
    80bc:	e8bd8010 	pop	{r4, pc}

000080c0 <CKernel::CKernel()>:
    80c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80c4:	e1a04000 	mov	r4, r0
    80c8:	e24dd010 	sub	sp, sp, #16
    80cc:	eb00d869 	bl	3e278 <Display::Display()>
    80d0:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    80d4:	e3a01001 	mov	r1, #1
    80d8:	eb008c52 	bl	2b228 <CMemorySystem::CMemorySystem(bool)>
    80dc:	e2848d42 	add	r8, r4, #4224	; 0x1080
    80e0:	e2840d41 	add	r0, r4, #4160	; 0x1040
    80e4:	e3a01000 	mov	r1, #0
    80e8:	e2888008 	add	r8, r8, #8
    80ec:	e280003c 	add	r0, r0, #60	; 0x3c
    80f0:	eb006f97 	bl	23f54 <CActLED::CActLED(bool)>
    80f4:	e2846d63 	add	r6, r4, #6336	; 0x18c0
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb0076c5 	bl	25c18 <CKernelOptions::CKernelOptions()>
    8100:	e2860024 	add	r0, r6, #36	; 0x24
    8104:	eb0071e3 	bl	24898 <CDeviceNameService::CDeviceNameService()>
    8108:	e2865030 	add	r5, r6, #48	; 0x30
    810c:	e286002c 	add	r0, r6, #44	; 0x2c
    8110:	eb008b4a 	bl	2ae40 <CExceptionHandler::CExceptionHandler()>
    8114:	e1a00005 	mov	r0, r5
    8118:	eb008d8f 	bl	2b75c <CInterruptSystem::CInterruptSystem()>
    811c:	e3a03000 	mov	r3, #0
    8120:	e2847c1b 	add	r7, r4, #6912	; 0x1b00
    8124:	e2877030 	add	r7, r7, #48	; 0x30
    8128:	e284ac6a 	add	sl, r4, #27136	; 0x6a00
    812c:	e1a02003 	mov	r2, r3
    8130:	e28a9060 	add	r9, sl, #96	; 0x60
    8134:	e1a01005 	mov	r1, r5
    8138:	e1a00007 	mov	r0, r7
    813c:	e1a06003 	mov	r6, r3
    8140:	eb0091f8 	bl	2c928 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8144:	e1a01005 	mov	r1, r5
    8148:	e1a00009 	mov	r0, r9
    814c:	eb00825b 	bl	28ac0 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00008 	mov	r0, r8
    8154:	eb00767b 	bl	25b48 <CKernelOptions::GetLogLevel() const>
    8158:	e1a02009 	mov	r2, r9
    815c:	e1a01000 	mov	r1, r0
    8160:	e28a009c 	add	r0, sl, #156	; 0x9c
    8164:	eb0077c1 	bl	26070 <CLogger::CLogger(unsigned int, CTimer*)>
    8168:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    816c:	e1a02009 	mov	r2, r9
    8170:	e1a01005 	mov	r1, r5
    8174:	e2800094 	add	r0, r0, #148	; 0x94
    8178:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    817c:	eb000392 	bl	8fcc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8180:	e2850018 	add	r0, r5, #24
    8184:	eb006da6 	bl	23824 <CScheduler::CScheduler()>
    8188:	e59fc0d0 	ldr	ip, [pc, #208]	; 8260 <CKernel::CKernel()+0x1a0>
    818c:	e1a03006 	mov	r3, r6
    8190:	e58dc004 	str	ip, [sp, #4]
    8194:	e58d6008 	str	r6, [sp, #8]
    8198:	e58d6000 	str	r6, [sp]
    819c:	e1a02006 	mov	r2, r6
    81a0:	e1a01006 	mov	r1, r6
    81a4:	e285007c 	add	r0, r5, #124	; 0x7c
    81a8:	e2845c6d 	add	r5, r4, #27904	; 0x6d00
    81ac:	eb004346 	bl	18ecc <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81b0:	e28550a8 	add	r5, r5, #168	; 0xa8
    81b4:	e1a02006 	mov	r2, r6
    81b8:	e2846ce5 	add	r6, r4, #58624	; 0xe500
    81bc:	e1a01007 	mov	r1, r7
    81c0:	e28660bc 	add	r6, r6, #188	; 0xbc
    81c4:	e1a00005 	mov	r0, r5
    81c8:	e2849b3a 	add	r9, r4, #59392	; 0xe800
    81cc:	e59f7090 	ldr	r7, [pc, #144]	; 8264 <CKernel::CKernel()+0x1a4>
    81d0:	eb009e6f 	bl	2fb94 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>
    81d4:	e289903c 	add	r9, r9, #60	; 0x3c
    81d8:	e1a00006 	mov	r0, r6
    81dc:	eb00a234 	bl	30ab4 <BusAccess::BusAccess()>
    81e0:	e0847007 	add	r7, r4, r7
    81e4:	e1a00009 	mov	r0, r9
    81e8:	eb00aeb8 	bl	33cd0 <TargetProgrammer::TargetProgrammer()>
    81ec:	e1a02006 	mov	r2, r6
    81f0:	e1a01005 	mov	r1, r5
    81f4:	e1a00007 	mov	r0, r7
    81f8:	eb00af57 	bl	33f5c <HwManager::HwManager(CommandHandler&, BusAccess&)>
    81fc:	e59f8064 	ldr	r8, [pc, #100]	; 8268 <CKernel::CKernel()+0x1a8>
    8200:	e59f0064 	ldr	r0, [pc, #100]	; 826c <CKernel::CKernel()+0x1ac>
    8204:	e1a03006 	mov	r3, r6
    8208:	e1a02007 	mov	r2, r7
    820c:	e1a01005 	mov	r1, r5
    8210:	e0848008 	add	r8, r4, r8
    8214:	e0840000 	add	r0, r4, r0
    8218:	eb00b74a 	bl	35f48 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>
    821c:	e1a03007 	mov	r3, r7
    8220:	e1a02005 	mov	r2, r5
    8224:	e1a01004 	mov	r1, r4
    8228:	e88d0240 	stm	sp, {r6, r9}
    822c:	e1a00008 	mov	r0, r8
    8230:	eb00bdb3 	bl	37904 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>
    8234:	e59f0034 	ldr	r0, [pc, #52]	; 8270 <CKernel::CKernel()+0x1b0>
    8238:	e1a03008 	mov	r3, r8
    823c:	e1a02005 	mov	r2, r5
    8240:	e1a01004 	mov	r1, r4
    8244:	e0840000 	add	r0, r4, r0
    8248:	eb0000af 	bl	850c <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>
    824c:	e1a00004 	mov	r0, r4
    8250:	e59f301c 	ldr	r3, [pc, #28]	; 8274 <CKernel::CKernel()+0x1b4>
    8254:	e5834000 	str	r4, [r3]
    8258:	e28dd010 	add	sp, sp, #16
    825c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8260:	00040644 	.word	0x00040644
    8264:	0010e92c 	.word	0x0010e92c
    8268:	0010ee60 	.word	0x0010ee60
    826c:	0010e96c 	.word	0x0010e96c
    8270:	001115f0 	.word	0x001115f0
    8274:	00050120 	.word	0x00050120

00008278 <CKernel::~CKernel()>:
    8278:	e92d4070 	push	{r4, r5, r6, lr}
    827c:	e1a04000 	mov	r4, r0
    8280:	e2800c6d 	add	r0, r0, #27904	; 0x6d00
    8284:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    8288:	e28000a8 	add	r0, r0, #168	; 0xa8
    828c:	eb009e64 	bl	2fc24 <CommsManager::~CommsManager()>
    8290:	e285007c 	add	r0, r5, #124	; 0x7c
    8294:	eb0043d6 	bl	191f4 <CNetSubSystem::~CNetSubSystem()>
    8298:	e2850018 	add	r0, r5, #24
    829c:	eb006d7c 	bl	23894 <CScheduler::~CScheduler()>
    82a0:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82a4:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    82a8:	e2800094 	add	r0, r0, #148	; 0x94
    82ac:	eb000bfc 	bl	b2a4 <CDWHCIDevice::~CDWHCIDevice()>
    82b0:	e285009c 	add	r0, r5, #156	; 0x9c
    82b4:	eb007783 	bl	260c8 <CLogger::~CLogger()>
    82b8:	e2850060 	add	r0, r5, #96	; 0x60
    82bc:	eb008220 	bl	28b44 <CTimer::~CTimer()>
    82c0:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    82c4:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    82c8:	e2800030 	add	r0, r0, #48	; 0x30
    82cc:	eb009219 	bl	2cb38 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    82d0:	e2850030 	add	r0, r5, #48	; 0x30
    82d4:	eb008d2e 	bl	2b794 <CInterruptSystem::~CInterruptSystem()>
    82d8:	e285002c 	add	r0, r5, #44	; 0x2c
    82dc:	eb008afa 	bl	2aecc <CExceptionHandler::~CExceptionHandler()>
    82e0:	e2850024 	add	r0, r5, #36	; 0x24
    82e4:	eb00717c 	bl	248dc <CDeviceNameService::~CDeviceNameService()>
    82e8:	e2840d42 	add	r0, r4, #4224	; 0x1080
    82ec:	e2800008 	add	r0, r0, #8
    82f0:	eb007608 	bl	25b18 <CKernelOptions::~CKernelOptions()>
    82f4:	e2840d41 	add	r0, r4, #4160	; 0x1040
    82f8:	e280003c 	add	r0, r0, #60	; 0x3c
    82fc:	eb006f3a 	bl	23fec <CActLED::~CActLED()>
    8300:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    8304:	eb008c14 	bl	2b35c <CMemorySystem::~CMemorySystem()>
    8308:	e1a00004 	mov	r0, r4
    830c:	eb00d74f 	bl	3e050 <Display::~Display()>
    8310:	e1a00004 	mov	r0, r4
    8314:	e8bd8070 	pop	{r4, r5, r6, pc}

00008318 <CKernel::Initialize()>:
    8318:	e92d4070 	push	{r4, r5, r6, lr}
    831c:	e2805d63 	add	r5, r0, #6336	; 0x18c0
    8320:	e1a04000 	mov	r4, r0
    8324:	e2850030 	add	r0, r5, #48	; 0x30
    8328:	eb008d28 	bl	2b7d0 <CInterruptSystem::Initialize()>
    832c:	e3500000 	cmp	r0, #0
    8330:	1a000002 	bne	8340 <CKernel::Initialize()+0x28>
    8334:	e3a05000 	mov	r5, #0
    8338:	e1a00005 	mov	r0, r5
    833c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8340:	e1a00004 	mov	r0, r4
    8344:	eb00d7d7 	bl	3e2a8 <Display::init()>
    8348:	e3500000 	cmp	r0, #0
    834c:	0afffff8 	beq	8334 <CKernel::Initialize()+0x1c>
    8350:	e2840d42 	add	r0, r4, #4224	; 0x1080
    8354:	e2800008 	add	r0, r0, #8
    8358:	eb0075f7 	bl	25b3c <CKernelOptions::GetLogDevice() const>
    835c:	e3a02000 	mov	r2, #0
    8360:	e1a01000 	mov	r1, r0
    8364:	e2850024 	add	r0, r5, #36	; 0x24
    8368:	eb0071ed 	bl	24b24 <CDeviceNameService::GetDevice(char const*, bool)>
    836c:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    8370:	e3500000 	cmp	r0, #0
    8374:	11a01000 	movne	r1, r0
    8378:	01a01004 	moveq	r1, r4
    837c:	e285009c 	add	r0, r5, #156	; 0x9c
    8380:	eb00776d 	bl	2613c <CLogger::Initialize(CDevice*)>
    8384:	e3500000 	cmp	r0, #0
    8388:	0affffe9 	beq	8334 <CKernel::Initialize()+0x1c>
    838c:	e59f3090 	ldr	r3, [pc, #144]	; 8424 <CKernel::Initialize()+0x10c>
    8390:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    8394:	e1a02003 	mov	r2, r3
    8398:	e2800030 	add	r0, r0, #48	; 0x30
    839c:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    83a0:	eb00924d 	bl	2ccdc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    83a4:	e3500000 	cmp	r0, #0
    83a8:	0affffe1 	beq	8334 <CKernel::Initialize()+0x1c>
    83ac:	e2850060 	add	r0, r5, #96	; 0x60
    83b0:	eb00848d 	bl	295ec <CTimer::Initialize()>
    83b4:	e3500000 	cmp	r0, #0
    83b8:	0affffdd 	beq	8334 <CKernel::Initialize()+0x1c>
    83bc:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    83c0:	e2800094 	add	r0, r0, #148	; 0x94
    83c4:	eb000c1b 	bl	b438 <CDWHCIDevice::Initialize()>
    83c8:	e3500000 	cmp	r0, #0
    83cc:	0affffd8 	beq	8334 <CKernel::Initialize()+0x1c>
    83d0:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    83d4:	e28000a8 	add	r0, r0, #168	; 0xa8
    83d8:	eb009e16 	bl	2fc38 <CommsManager::setup()>
    83dc:	e1a05000 	mov	r5, r0
    83e0:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    83e4:	e28000bc 	add	r0, r0, #188	; 0xbc
    83e8:	eb00a1e6 	bl	30b88 <BusAccess::init()>
    83ec:	e59f0034 	ldr	r0, [pc, #52]	; 8428 <CKernel::Initialize()+0x110>
    83f0:	e0840000 	add	r0, r4, r0
    83f4:	eb00aee7 	bl	33f98 <HwManager::init()>
    83f8:	e59f002c 	ldr	r0, [pc, #44]	; 842c <CKernel::Initialize()+0x114>
    83fc:	e0840000 	add	r0, r4, r0
    8400:	eb00b6e3 	bl	35f94 <BusControlAPI::init()>
    8404:	e59f0024 	ldr	r0, [pc, #36]	; 8430 <CKernel::Initialize()+0x118>
    8408:	e0840000 	add	r0, r4, r0
    840c:	eb00bd5e 	bl	3798c <McManager::init()>
    8410:	e59f001c 	ldr	r0, [pc, #28]	; 8434 <CKernel::Initialize()+0x11c>
    8414:	e0840000 	add	r0, r4, r0
    8418:	eb00005a 	bl	8588 <BusRaiderApp::init()>
    841c:	e1a00005 	mov	r0, r5
    8420:	e8bd8070 	pop	{r4, r5, r6, pc}
    8424:	000f4240 	.word	0x000f4240
    8428:	0010e92c 	.word	0x0010e92c
    842c:	0010e96c 	.word	0x0010e96c
    8430:	0010ee60 	.word	0x0010ee60
    8434:	001115f0 	.word	0x001115f0

00008438 <CKernel::Run()>:
    8438:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    843c:	e1a04000 	mov	r4, r0
    8440:	e2808c6a 	add	r8, r0, #27136	; 0x6a00
    8444:	e288809c 	add	r8, r8, #156	; 0x9c
    8448:	e59f70a0 	ldr	r7, [pc, #160]	; 84f0 <CKernel::Run()+0xb8>
    844c:	e59f60a0 	ldr	r6, [pc, #160]	; 84f4 <CKernel::Run()+0xbc>
    8450:	e59f50a0 	ldr	r5, [pc, #160]	; 84f8 <CKernel::Run()+0xc0>
    8454:	e1a00008 	mov	r0, r8
    8458:	e59f309c 	ldr	r3, [pc, #156]	; 84fc <CKernel::Run()+0xc4>
    845c:	e3a02003 	mov	r2, #3
    8460:	e59f1098 	ldr	r1, [pc, #152]	; 8500 <CKernel::Run()+0xc8>
    8464:	eb007746 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8468:	e0847007 	add	r7, r4, r7
    846c:	e0846006 	add	r6, r4, r6
    8470:	e0845005 	add	r5, r4, r5
    8474:	ea00000f 	b	84b8 <CKernel::Run()+0x80>
    8478:	eb0094db 	bl	2d7ec <micros>
    847c:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8480:	e28000a8 	add	r0, r0, #168	; 0xa8
    8484:	eb009e33 	bl	2fd58 <CommsManager::service()>
    8488:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    848c:	e28000bc 	add	r0, r0, #188	; 0xbc
    8490:	eb00a532 	bl	31960 <BusAccess::service()>
    8494:	e1a00007 	mov	r0, r7
    8498:	eb00aef9 	bl	34084 <HwManager::service()>
    849c:	e1a00006 	mov	r0, r6
    84a0:	eb00b8f7 	bl	36884 <BusControlAPI::service()>
    84a4:	e1a00005 	mov	r0, r5
    84a8:	eb00bd7f 	bl	37aac <McManager::service()>
    84ac:	e59f0050 	ldr	r0, [pc, #80]	; 8504 <CKernel::Run()+0xcc>
    84b0:	e0840000 	add	r0, r4, r0
    84b4:	eb00019a 	bl	8b24 <BusRaiderApp::service()>
    84b8:	eb00882a 	bl	2a568 <IsChainBootEnabled>
    84bc:	e3500000 	cmp	r0, #0
    84c0:	0affffec 	beq	8478 <CKernel::Run()+0x40>
    84c4:	e1a00008 	mov	r0, r8
    84c8:	e59f3038 	ldr	r3, [pc, #56]	; 8508 <CKernel::Run()+0xd0>
    84cc:	e3a02003 	mov	r2, #3
    84d0:	e59f1028 	ldr	r1, [pc, #40]	; 8500 <CKernel::Run()+0xc8>
    84d4:	eb00772a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84d8:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    84dc:	e2800018 	add	r0, r0, #24
    84e0:	e3a01001 	mov	r1, #1
    84e4:	eb006e0e 	bl	23d24 <CScheduler::Sleep(unsigned int)>
    84e8:	e3a00002 	mov	r0, #2
    84ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84f0:	0010e92c 	.word	0x0010e92c
    84f4:	0010e96c 	.word	0x0010e96c
    84f8:	0010ee60 	.word	0x0010ee60
    84fc:	00040650 	.word	0x00040650
    8500:	0004063c 	.word	0x0004063c
    8504:	001115f0 	.word	0x001115f0
    8508:	00040674 	.word	0x00040674

0000850c <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>:
    850c:	e3a0c000 	mov	ip, #0
    8510:	e92d4030 	push	{r4, r5, lr}
    8514:	e3a04064 	mov	r4, #100	; 0x64
    8518:	e59f5064 	ldr	r5, [pc, #100]	; 8584 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)+0x78>
    851c:	e5801078 	str	r1, [r0, #120]	; 0x78
    8520:	e2801a03 	add	r1, r0, #12288	; 0x3000
    8524:	e580207c 	str	r2, [r0, #124]	; 0x7c
    8528:	e5803080 	str	r3, [r0, #128]	; 0x80
    852c:	e5c0c008 	strb	ip, [r0, #8]
    8530:	e580c070 	str	ip, [r0, #112]	; 0x70
    8534:	e5850000 	str	r0, [r5]
    8538:	e581c528 	str	ip, [r1, #1320]	; 0x528
    853c:	e5c1c534 	strb	ip, [r1, #1332]	; 0x534
    8540:	e581c52c 	str	ip, [r1, #1324]	; 0x52c
    8544:	e5814530 	str	r4, [r1, #1328]	; 0x530
    8548:	e1a0e000 	mov	lr, r0
    854c:	e580c004 	str	ip, [r0, #4]
    8550:	e580c074 	str	ip, [r0, #116]	; 0x74
    8554:	e5c0c084 	strb	ip, [r0, #132]	; 0x84
    8558:	e5c0c000 	strb	ip, [r0]
    855c:	e5c0c854 	strb	ip, [r0, #2132]	; 0x854
    8560:	e5c0c872 	strb	ip, [r0, #2162]	; 0x872
    8564:	e5c0c890 	strb	ip, [r0, #2192]	; 0x890
    8568:	e5c0c8f4 	strb	ip, [r0, #2292]	; 0x8f4
    856c:	e5c0c958 	strb	ip, [r0, #2392]	; 0x958
    8570:	e580c95c 	str	ip, [r0, #2396]	; 0x95c
    8574:	e5c0c960 	strb	ip, [r0, #2400]	; 0x960
    8578:	e581c070 	str	ip, [r1, #112]	; 0x70
    857c:	e581c074 	str	ip, [r1, #116]	; 0x74
    8580:	e8bd8030 	pop	{r4, r5, pc}
    8584:	00050124 	.word	0x00050124

00008588 <BusRaiderApp::init()>:
    8588:	e1a01000 	mov	r1, r0
    858c:	e3a03000 	mov	r3, #0
    8590:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8594:	e2812a03 	add	r2, r1, #12288	; 0x3000
    8598:	e24dd00c 	sub	sp, sp, #12
    859c:	e590007c 	ldr	r0, [r0, #124]	; 0x7c
    85a0:	e5813004 	str	r3, [r1, #4]
    85a4:	e5c13008 	strb	r3, [r1, #8]
    85a8:	e5813070 	str	r3, [r1, #112]	; 0x70
    85ac:	e5813074 	str	r3, [r1, #116]	; 0x74
    85b0:	e5c13084 	strb	r3, [r1, #132]	; 0x84
    85b4:	e5c13000 	strb	r3, [r1]
    85b8:	e5c13854 	strb	r3, [r1, #2132]	; 0x854
    85bc:	e5c13872 	strb	r3, [r1, #2162]	; 0x872
    85c0:	e5c13890 	strb	r3, [r1, #2192]	; 0x890
    85c4:	e5c138f4 	strb	r3, [r1, #2292]	; 0x8f4
    85c8:	e5c13958 	strb	r3, [r1, #2392]	; 0x958
    85cc:	e581395c 	str	r3, [r1, #2396]	; 0x95c
    85d0:	e5c13960 	strb	r3, [r1, #2400]	; 0x960
    85d4:	e58d3004 	str	r3, [sp, #4]
    85d8:	e5823070 	str	r3, [r2, #112]	; 0x70
    85dc:	e5823074 	str	r3, [r2, #116]	; 0x74
    85e0:	e58d3000 	str	r3, [sp]
    85e4:	e3a02001 	mov	r2, #1
    85e8:	e59f3008 	ldr	r3, [pc, #8]	; 85f8 <BusRaiderApp::init()+0x70>
    85ec:	eb0098a9 	bl	2e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    85f0:	e28dd00c 	add	sp, sp, #12
    85f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    85f8:	00008f00 	.word	0x00008f00

000085fc <BusRaiderApp::clear()>:
    85fc:	e3a03000 	mov	r3, #0
    8600:	e2802a03 	add	r2, r0, #12288	; 0x3000
    8604:	e5803004 	str	r3, [r0, #4]
    8608:	e5c03008 	strb	r3, [r0, #8]
    860c:	e5803070 	str	r3, [r0, #112]	; 0x70
    8610:	e5803074 	str	r3, [r0, #116]	; 0x74
    8614:	e5c03084 	strb	r3, [r0, #132]	; 0x84
    8618:	e5c03000 	strb	r3, [r0]
    861c:	e5c03854 	strb	r3, [r0, #2132]	; 0x854
    8620:	e5c03872 	strb	r3, [r0, #2162]	; 0x872
    8624:	e5c03890 	strb	r3, [r0, #2192]	; 0x890
    8628:	e5c038f4 	strb	r3, [r0, #2292]	; 0x8f4
    862c:	e5c03958 	strb	r3, [r0, #2392]	; 0x958
    8630:	e580395c 	str	r3, [r0, #2396]	; 0x95c
    8634:	e5c03960 	strb	r3, [r0, #2400]	; 0x960
    8638:	e5823070 	str	r3, [r2, #112]	; 0x70
    863c:	e5823074 	str	r3, [r2, #116]	; 0x74
    8640:	e12fff1e 	bx	lr

00008644 <BusRaiderApp::initUSB()>:
    8644:	e12fff1e 	bx	lr

00008648 <BusRaiderApp::statusDisplayUpdate()>:
    8648:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    864c:	e1a06000 	mov	r6, r0
    8650:	e5903080 	ldr	r3, [r0, #128]	; 0x80
    8654:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
    8658:	e593400c 	ldr	r4, [r3, #12]
    865c:	e590507c 	ldr	r5, [r0, #124]	; 0x7c
    8660:	eb009461 	bl	2d7ec <micros>
    8664:	e5961004 	ldr	r1, [r6, #4]
    8668:	e59f244c 	ldr	r2, [pc, #1100]	; 8abc <BusRaiderApp::statusDisplayUpdate()+0x474>
    866c:	eb00947c 	bl	2d864 <isTimeout>
    8670:	e3500000 	cmp	r0, #0
    8674:	1a000001 	bne	8680 <BusRaiderApp::statusDisplayUpdate()+0x38>
    8678:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    867c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8680:	eb009459 	bl	2d7ec <micros>
    8684:	e3a02000 	mov	r2, #0
    8688:	e59f7430 	ldr	r7, [pc, #1072]	; 8ac0 <BusRaiderApp::statusDisplayUpdate()+0x478>
    868c:	e1a01002 	mov	r1, r2
    8690:	e5973000 	ldr	r3, [r7]
    8694:	e5860004 	str	r0, [r6, #4]
    8698:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    869c:	eb00d751 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    86a0:	e5973004 	ldr	r3, [r7, #4]
    86a4:	e3a02000 	mov	r2, #0
    86a8:	e3a01001 	mov	r1, #1
    86ac:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    86b0:	e2867e8f 	add	r7, r6, #2288	; 0x8f0
    86b4:	eb00d74b 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    86b8:	e2877004 	add	r7, r7, #4
    86bc:	e3a02032 	mov	r2, #50	; 0x32
    86c0:	e59f13fc 	ldr	r1, [pc, #1020]	; 8ac4 <BusRaiderApp::statusDisplayUpdate()+0x47c>
    86c4:	e28d005c 	add	r0, sp, #92	; 0x5c
    86c8:	eb009482 	bl	2d8d8 <strlcpy>
    86cc:	e1a00007 	mov	r0, r7
    86d0:	eb008499 	bl	2993c <strlen>
    86d4:	e3500000 	cmp	r0, #0
    86d8:	0a0000ab 	beq	898c <BusRaiderApp::statusDisplayUpdate()+0x344>
    86dc:	e1a01007 	mov	r1, r7
    86e0:	e3a02032 	mov	r2, #50	; 0x32
    86e4:	e28d005c 	add	r0, sp, #92	; 0x5c
    86e8:	eb009496 	bl	2d948 <strlcat>
    86ec:	e5942000 	ldr	r2, [r4]
    86f0:	e59f13d0 	ldr	r1, [pc, #976]	; 8ac8 <BusRaiderApp::statusDisplayUpdate()+0x480>
    86f4:	e1a03fc2 	asr	r3, r2, #31
    86f8:	e0c10291 	smull	r0, r1, r1, r2
    86fc:	e0633141 	rsb	r3, r3, r1, asr #2
    8700:	e0831103 	add	r1, r3, r3, lsl #2
    8704:	e0422081 	sub	r2, r2, r1, lsl #1
    8708:	e58d2000 	str	r2, [sp]
    870c:	e3a0100a 	mov	r1, #10
    8710:	e59f23b4 	ldr	r2, [pc, #948]	; 8acc <BusRaiderApp::statusDisplayUpdate()+0x484>
    8714:	e28d0090 	add	r0, sp, #144	; 0x90
    8718:	eb0094e5 	bl	2dab4 <snprintf>
    871c:	e28d1090 	add	r1, sp, #144	; 0x90
    8720:	e3a02032 	mov	r2, #50	; 0x32
    8724:	e28d005c 	add	r0, sp, #92	; 0x5c
    8728:	eb009486 	bl	2d948 <strlcat>
    872c:	e3a02032 	mov	r2, #50	; 0x32
    8730:	e59f1398 	ldr	r1, [pc, #920]	; 8ad0 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8734:	e28d005c 	add	r0, sp, #92	; 0x5c
    8738:	eb009482 	bl	2d948 <strlcat>
    873c:	e28d305c 	add	r3, sp, #92	; 0x5c
    8740:	e3a02000 	mov	r2, #0
    8744:	e3a01002 	mov	r1, #2
    8748:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    874c:	eb00d725 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    8750:	e3a02000 	mov	r2, #0
    8754:	e5d63872 	ldrb	r3, [r6, #2162]	; 0x872
    8758:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    875c:	e3530043 	cmp	r3, #67	; 0x43
    8760:	e3a02032 	mov	r2, #50	; 0x32
    8764:	1a0000be 	bne	8a64 <BusRaiderApp::statusDisplayUpdate()+0x41c>
    8768:	e59f1364 	ldr	r1, [pc, #868]	; 8ad4 <BusRaiderApp::statusDisplayUpdate()+0x48c>
    876c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8770:	eb009458 	bl	2d8d8 <strlcpy>
    8774:	e5d63958 	ldrb	r3, [r6, #2392]	; 0x958
    8778:	e3530000 	cmp	r3, #0
    877c:	1a0000c6 	bne	8a9c <BusRaiderApp::statusDisplayUpdate()+0x454>
    8780:	e3a02032 	mov	r2, #50	; 0x32
    8784:	e59f1344 	ldr	r1, [pc, #836]	; 8ad0 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8788:	e28d005c 	add	r0, sp, #92	; 0x5c
    878c:	eb00946d 	bl	2d948 <strlcat>
    8790:	e28d305c 	add	r3, sp, #92	; 0x5c
    8794:	e3a02000 	mov	r2, #0
    8798:	e3a01003 	mov	r1, #3
    879c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87a0:	eb00d710 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    87a4:	e3a02032 	mov	r2, #50	; 0x32
    87a8:	e59f1328 	ldr	r1, [pc, #808]	; 8ad8 <BusRaiderApp::statusDisplayUpdate()+0x490>
    87ac:	e28d005c 	add	r0, sp, #92	; 0x5c
    87b0:	eb009448 	bl	2d8d8 <strlcpy>
    87b4:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    87b8:	eb00bcf6 	bl	37b98 <McManager::getMachineName()>
    87bc:	e3a02032 	mov	r2, #50	; 0x32
    87c0:	e1a01000 	mov	r1, r0
    87c4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87c8:	eb00945e 	bl	2d948 <strlcat>
    87cc:	e3a02028 	mov	r2, #40	; 0x28
    87d0:	e59f1304 	ldr	r1, [pc, #772]	; 8adc <BusRaiderApp::statusDisplayUpdate()+0x494>
    87d4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87d8:	eb00945a 	bl	2d948 <strlcat>
    87dc:	e3a02000 	mov	r2, #0
    87e0:	e28d305c 	add	r3, sp, #92	; 0x5c
    87e4:	e3a01004 	mov	r1, #4
    87e8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87ec:	eb00d6fd 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    87f0:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    87f4:	eb00bd53 	bl	37d48 <McManager::getMachineClock()>
    87f8:	e59f12e0 	ldr	r1, [pc, #736]	; 8ae0 <BusRaiderApp::statusDisplayUpdate()+0x498>
    87fc:	e1a03fc0 	asr	r3, r0, #31
    8800:	e0c12091 	smull	r2, r1, r1, r0
    8804:	e59f22d8 	ldr	r2, [pc, #728]	; 8ae4 <BusRaiderApp::statusDisplayUpdate()+0x49c>
    8808:	e0633941 	rsb	r3, r3, r1, asr #18
    880c:	e0200392 	mla	r0, r2, r3, r0
    8810:	e59f12d0 	ldr	r1, [pc, #720]	; 8ae8 <BusRaiderApp::statusDisplayUpdate()+0x4a0>
    8814:	e1a02fc0 	asr	r2, r0, #31
    8818:	e0c01091 	smull	r1, r0, r1, r0
    881c:	e0620340 	rsb	r0, r2, r0, asr #6
    8820:	e3500063 	cmp	r0, #99	; 0x63
    8824:	ca00008b 	bgt	8a58 <BusRaiderApp::statusDisplayUpdate()+0x410>
    8828:	e59f22bc 	ldr	r2, [pc, #700]	; 8aec <BusRaiderApp::statusDisplayUpdate()+0x4a4>
    882c:	e3500009 	cmp	r0, #9
    8830:	d1a01002 	movle	r1, r2
    8834:	ca00009e 	bgt	8ab4 <BusRaiderApp::statusDisplayUpdate()+0x46c>
    8838:	e58d0008 	str	r0, [sp, #8]
    883c:	e58d1004 	str	r1, [sp, #4]
    8840:	e58d2000 	str	r2, [sp]
    8844:	e3a01032 	mov	r1, #50	; 0x32
    8848:	e59f22a0 	ldr	r2, [pc, #672]	; 8af0 <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    884c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8850:	eb009497 	bl	2dab4 <snprintf>
    8854:	e3a02032 	mov	r2, #50	; 0x32
    8858:	e59f1294 	ldr	r1, [pc, #660]	; 8af4 <BusRaiderApp::statusDisplayUpdate()+0x4ac>
    885c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8860:	eb009438 	bl	2d948 <strlcat>
    8864:	e28d305c 	add	r3, sp, #92	; 0x5c
    8868:	e3a02000 	mov	r2, #0
    886c:	e3a01005 	mov	r1, #5
    8870:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8874:	eb00d6db 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    8878:	e3a03000 	mov	r3, #0
    887c:	e3a02032 	mov	r2, #50	; 0x32
    8880:	e59f1270 	ldr	r1, [pc, #624]	; 8af8 <BusRaiderApp::statusDisplayUpdate()+0x4b0>
    8884:	e28d005c 	add	r0, sp, #92	; 0x5c
    8888:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    888c:	eb009411 	bl	2d8d8 <strlcpy>
    8890:	e1a00004 	mov	r0, r4
    8894:	eb00a4a6 	bl	31b34 <BusAccess::isUnderControl()>
    8898:	e3500000 	cmp	r0, #0
    889c:	1a000079 	bne	8a88 <BusRaiderApp::statusDisplayUpdate()+0x440>
    88a0:	e28d305c 	add	r3, sp, #92	; 0x5c
    88a4:	e3a02000 	mov	r2, #0
    88a8:	e3a01006 	mov	r1, #6
    88ac:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    88b0:	eb00d6cc 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    88b4:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    88b8:	eb00be18 	bl	38120 <McManager::getDisplayRefreshRate()>
    88bc:	e1a04000 	mov	r4, r0
    88c0:	e5d61000 	ldrb	r1, [r6]
    88c4:	e59f3230 	ldr	r3, [pc, #560]	; 8afc <BusRaiderApp::statusDisplayUpdate()+0x4b4>
    88c8:	e59f2230 	ldr	r2, [pc, #560]	; 8b00 <BusRaiderApp::statusDisplayUpdate()+0x4b8>
    88cc:	e3510000 	cmp	r1, #0
    88d0:	11a01002 	movne	r1, r2
    88d4:	01a01003 	moveq	r1, r3
    88d8:	e3a02028 	mov	r2, #40	; 0x28
    88dc:	e28d0030 	add	r0, sp, #48	; 0x30
    88e0:	eb0093fc 	bl	2d8d8 <strlcpy>
    88e4:	e5d63000 	ldrb	r3, [r6]
    88e8:	e3a02028 	mov	r2, #40	; 0x28
    88ec:	e2233001 	eor	r3, r3, #1
    88f0:	e5c63000 	strb	r3, [r6]
    88f4:	e59f1208 	ldr	r1, [pc, #520]	; 8b04 <BusRaiderApp::statusDisplayUpdate()+0x4bc>
    88f8:	e28d0030 	add	r0, sp, #48	; 0x30
    88fc:	eb009411 	bl	2d948 <strlcat>
    8900:	e1a00004 	mov	r0, r4
    8904:	e3a04000 	mov	r4, #0
    8908:	e3a0300a 	mov	r3, #10
    890c:	e28d101c 	add	r1, sp, #28
    8910:	e3a02028 	mov	r2, #40	; 0x28
    8914:	eb0095c0 	bl	2e01c <rditoa>
    8918:	e28d101c 	add	r1, sp, #28
    891c:	e3a02028 	mov	r2, #40	; 0x28
    8920:	e28d0030 	add	r0, sp, #48	; 0x30
    8924:	eb009407 	bl	2d948 <strlcat>
    8928:	e3a02028 	mov	r2, #40	; 0x28
    892c:	e59f11d4 	ldr	r1, [pc, #468]	; 8b08 <BusRaiderApp::statusDisplayUpdate()+0x4c0>
    8930:	e28d0030 	add	r0, sp, #48	; 0x30
    8934:	eb009403 	bl	2d948 <strlcat>
    8938:	e28d3030 	add	r3, sp, #48	; 0x30
    893c:	e3a02000 	mov	r2, #0
    8940:	e3a01007 	mov	r1, #7
    8944:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8948:	eb00d6a6 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    894c:	e28d20d0 	add	r2, sp, #208	; 0xd0
    8950:	e52240b8 	str	r4, [r2, #-184]!	; 0xffffff48
    8954:	e1a00005 	mov	r0, r5
    8958:	e28d1014 	add	r1, sp, #20
    895c:	e58d4014 	str	r4, [sp, #20]
    8960:	eb0098d6 	bl	2ecc0 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8964:	e3500000 	cmp	r0, #0
    8968:	058d0014 	streq	r0, [sp, #20]
    896c:	1a000010 	bne	89b4 <BusRaiderApp::statusDisplayUpdate()+0x36c>
    8970:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8974:	e59f3190 	ldr	r3, [pc, #400]	; 8b0c <BusRaiderApp::statusDisplayUpdate()+0x4c4>
    8978:	e3a02001 	mov	r2, #1
    897c:	e3a0100a 	mov	r1, #10
    8980:	eb00d698 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    8984:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8988:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    898c:	e3a02032 	mov	r2, #50	; 0x32
    8990:	e59f1178 	ldr	r1, [pc, #376]	; 8b10 <BusRaiderApp::statusDisplayUpdate()+0x4c8>
    8994:	e28d005c 	add	r0, sp, #92	; 0x5c
    8998:	eb0093ea 	bl	2d948 <strlcat>
    899c:	e28d305c 	add	r3, sp, #92	; 0x5c
    89a0:	e3a02001 	mov	r2, #1
    89a4:	e3a01002 	mov	r1, #2
    89a8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    89ac:	eb00d68d 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    89b0:	eaffff66 	b	8750 <BusRaiderApp::statusDisplayUpdate()+0x108>
    89b4:	e59d1014 	ldr	r1, [sp, #20]
    89b8:	e3510000 	cmp	r1, #0
    89bc:	0affffeb 	beq	8970 <BusRaiderApp::statusDisplayUpdate()+0x328>
    89c0:	e59d0018 	ldr	r0, [sp, #24]
    89c4:	e0800100 	add	r0, r0, r0, lsl #2
    89c8:	e1a00180 	lsl	r0, r0, #3
    89cc:	eb00dbf3 	bl	3f9a0 <__aeabi_uidiv>
    89d0:	e2505000 	subs	r5, r0, #0
    89d4:	daffffe5 	ble	8970 <BusRaiderApp::statusDisplayUpdate()+0x328>
    89d8:	e3a0203c 	mov	r2, #60	; 0x3c
    89dc:	e59f1130 	ldr	r1, [pc, #304]	; 8b14 <BusRaiderApp::statusDisplayUpdate()+0x4cc>
    89e0:	e28d0090 	add	r0, sp, #144	; 0x90
    89e4:	eb0093bb 	bl	2d8d8 <strlcpy>
    89e8:	e28d0090 	add	r0, sp, #144	; 0x90
    89ec:	eb0083d2 	bl	2993c <strlen>
    89f0:	e28d1090 	add	r1, sp, #144	; 0x90
    89f4:	e2402001 	sub	r2, r0, #1
    89f8:	e0812002 	add	r2, r1, r2
    89fc:	e1a03004 	mov	r3, r4
    8a00:	e3a01023 	mov	r1, #35	; 0x23
    8a04:	ea000002 	b	8a14 <BusRaiderApp::statusDisplayUpdate()+0x3cc>
    8a08:	e1550003 	cmp	r5, r3
    8a0c:	c3a01023 	movgt	r1, #35	; 0x23
    8a10:	d3a01020 	movle	r1, #32
    8a14:	e2833001 	add	r3, r3, #1
    8a18:	e3530028 	cmp	r3, #40	; 0x28
    8a1c:	e5e21001 	strb	r1, [r2, #1]!
    8a20:	1afffff8 	bne	8a08 <BusRaiderApp::statusDisplayUpdate()+0x3c0>
    8a24:	e3a0e000 	mov	lr, #0
    8a28:	e3a0405d 	mov	r4, #93	; 0x5d
    8a2c:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8a30:	e083c000 	add	ip, r3, r0
    8a34:	e3a02001 	mov	r2, #1
    8a38:	e28d3090 	add	r3, sp, #144	; 0x90
    8a3c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a40:	e3a0100a 	mov	r1, #10
    8a44:	e54c4018 	strb	r4, [ip, #-24]	; 0xffffffe8
    8a48:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8a4c:	eb00d665 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    8a50:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8a54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8a58:	e59f20b8 	ldr	r2, [pc, #184]	; 8b18 <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8a5c:	e1a01002 	mov	r1, r2
    8a60:	eaffff74 	b	8838 <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8a64:	e59f10b0 	ldr	r1, [pc, #176]	; 8b1c <BusRaiderApp::statusDisplayUpdate()+0x4d4>
    8a68:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a6c:	eb009399 	bl	2d8d8 <strlcpy>
    8a70:	e28d305c 	add	r3, sp, #92	; 0x5c
    8a74:	e3a02001 	mov	r2, #1
    8a78:	e3a01003 	mov	r1, #3
    8a7c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a80:	eb00d658 	bl	3e3e8 <Display::statusPut(int, int, char const*)>
    8a84:	eaffff46 	b	87a4 <BusRaiderApp::statusDisplayUpdate()+0x15c>
    8a88:	e3a02032 	mov	r2, #50	; 0x32
    8a8c:	e59f108c 	ldr	r1, [pc, #140]	; 8b20 <BusRaiderApp::statusDisplayUpdate()+0x4d8>
    8a90:	e28d005c 	add	r0, sp, #92	; 0x5c
    8a94:	eb0093ab 	bl	2d948 <strlcat>
    8a98:	eaffff80 	b	88a0 <BusRaiderApp::statusDisplayUpdate()+0x258>
    8a9c:	e2861e85 	add	r1, r6, #2128	; 0x850
    8aa0:	e2811004 	add	r1, r1, #4
    8aa4:	e3a02032 	mov	r2, #50	; 0x32
    8aa8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8aac:	eb0093a5 	bl	2d948 <strlcat>
    8ab0:	eaffff32 	b	8780 <BusRaiderApp::statusDisplayUpdate()+0x138>
    8ab4:	e59f105c 	ldr	r1, [pc, #92]	; 8b18 <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8ab8:	eaffff5e 	b	8838 <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8abc:	000f4240 	.word	0x000f4240
    8ac0:	00049978 	.word	0x00049978
    8ac4:	0004068c 	.word	0x0004068c
    8ac8:	66666667 	.word	0x66666667
    8acc:	000406b4 	.word	0x000406b4
    8ad0:	000406c4 	.word	0x000406c4
    8ad4:	000406d0 	.word	0x000406d0
    8ad8:	000406f4 	.word	0x000406f4
    8adc:	000406fc 	.word	0x000406fc
    8ae0:	431bde83 	.word	0x431bde83
    8ae4:	fff0bdc0 	.word	0xfff0bdc0
    8ae8:	10624dd3 	.word	0x10624dd3
    8aec:	000414b4 	.word	0x000414b4
    8af0:	00040714 	.word	0x00040714
    8af4:	000406c8 	.word	0x000406c8
    8af8:	00040728 	.word	0x00040728
    8afc:	00040688 	.word	0x00040688
    8b00:	00040684 	.word	0x00040684
    8b04:	00040740 	.word	0x00040740
    8b08:	0004074c 	.word	0x0004074c
    8b0c:	00040764 	.word	0x00040764
    8b10:	0004069c 	.word	0x0004069c
    8b14:	00040758 	.word	0x00040758
    8b18:	00049280 	.word	0x00049280
    8b1c:	000406dc 	.word	0x000406dc
    8b20:	00040730 	.word	0x00040730

00008b24 <BusRaiderApp::service()>:
    8b24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8b28:	e1a05000 	mov	r5, r0
    8b2c:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    8b30:	e24dd00c 	sub	sp, sp, #12
    8b34:	e590607c 	ldr	r6, [r0, #124]	; 0x7c
    8b38:	eb00932b 	bl	2d7ec <micros>
    8b3c:	e5951074 	ldr	r1, [r5, #116]	; 0x74
    8b40:	e59f216c 	ldr	r2, [pc, #364]	; 8cb4 <BusRaiderApp::service()+0x190>
    8b44:	eb009346 	bl	2d864 <isTimeout>
    8b48:	e3500000 	cmp	r0, #0
    8b4c:	0a000005 	beq	8b68 <BusRaiderApp::service()+0x44>
    8b50:	e59f3160 	ldr	r3, [pc, #352]	; 8cb8 <BusRaiderApp::service()+0x194>
    8b54:	e5933000 	ldr	r3, [r3]
    8b58:	e2833a05 	add	r3, r3, #20480	; 0x5000
    8b5c:	e5934860 	ldr	r4, [r3, #2144]	; 0x860
    8b60:	e3540000 	cmp	r4, #0
    8b64:	0a000033 	beq	8c38 <BusRaiderApp::service()+0x114>
    8b68:	eb00931f 	bl	2d7ec <micros>
    8b6c:	e59f2148 	ldr	r2, [pc, #328]	; 8cbc <BusRaiderApp::service()+0x198>
    8b70:	e595195c 	ldr	r1, [r5, #2396]	; 0x95c
    8b74:	eb00933a 	bl	2d864 <isTimeout>
    8b78:	e3500000 	cmp	r0, #0
    8b7c:	0a000007 	beq	8ba0 <BusRaiderApp::service()+0x7c>
    8b80:	e59f3130 	ldr	r3, [pc, #304]	; 8cb8 <BusRaiderApp::service()+0x194>
    8b84:	e5933000 	ldr	r3, [r3]
    8b88:	e2833a05 	add	r3, r3, #20480	; 0x5000
    8b8c:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    8b90:	e3530000 	cmp	r3, #0
    8b94:	0a000036 	beq	8c74 <BusRaiderApp::service()+0x150>
    8b98:	eb009313 	bl	2d7ec <micros>
    8b9c:	e585095c 	str	r0, [r5, #2396]	; 0x95c
    8ba0:	e2854a03 	add	r4, r5, #12288	; 0x3000
    8ba4:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    8ba8:	e3530000 	cmp	r3, #0
    8bac:	0a000015 	beq	8c08 <BusRaiderApp::service()+0xe4>
    8bb0:	e1a00005 	mov	r0, r5
    8bb4:	ebfffea3 	bl	8648 <BusRaiderApp::statusDisplayUpdate()>
    8bb8:	e5d43534 	ldrb	r3, [r4, #1332]	; 0x534
    8bbc:	e3530000 	cmp	r3, #0
    8bc0:	1a00000d 	bne	8bfc <BusRaiderApp::service()+0xd8>
    8bc4:	e5941528 	ldr	r1, [r4, #1320]	; 0x528
    8bc8:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    8bcc:	e1510002 	cmp	r1, r2
    8bd0:	0a000009 	beq	8bfc <BusRaiderApp::service()+0xd8>
    8bd4:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    8bd8:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    8bdc:	e5941530 	ldr	r1, [r4, #1328]	; 0x530
    8be0:	e2822001 	add	r2, r2, #1
    8be4:	e584252c 	str	r2, [r4, #1324]	; 0x52c
    8be8:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    8bec:	e1520001 	cmp	r2, r1
    8bf0:	2584352c 	strcs	r3, [r4, #1324]	; 0x52c
    8bf4:	e3a03000 	mov	r3, #0
    8bf8:	e5c43534 	strb	r3, [r4, #1332]	; 0x534
    8bfc:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    8c00:	e28dd00c 	add	sp, sp, #12
    8c04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8c08:	eb0092f7 	bl	2d7ec <micros>
    8c0c:	e59f20a8 	ldr	r2, [pc, #168]	; 8cbc <BusRaiderApp::service()+0x198>
    8c10:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    8c14:	eb009312 	bl	2d864 <isTimeout>
    8c18:	e3500000 	cmp	r0, #0
    8c1c:	0affffe3 	beq	8bb0 <BusRaiderApp::service()+0x8c>
    8c20:	e1a00006 	mov	r0, r6
    8c24:	e59f1094 	ldr	r1, [pc, #148]	; 8cc0 <BusRaiderApp::service()+0x19c>
    8c28:	eb00992f 	bl	2f0ec <CommandHandler::sendAPIReq(char const*)>
    8c2c:	eb0092ee 	bl	2d7ec <micros>
    8c30:	e5840074 	str	r0, [r4, #116]	; 0x74
    8c34:	eaffffdd 	b	8bb0 <BusRaiderApp::service()+0x8c>
    8c38:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    8c3c:	eb00bbdf 	bl	37bc0 <McManager::getMachineJSON()>
    8c40:	e2857084 	add	r7, r5, #132	; 0x84
    8c44:	e1a01000 	mov	r1, r0
    8c48:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    8c4c:	e28d0008 	add	r0, sp, #8
    8c50:	eb009320 	bl	2d8d8 <strlcpy>
    8c54:	e28d0008 	add	r0, sp, #8
    8c58:	e1a01007 	mov	r1, r7
    8c5c:	eb008340 	bl	29964 <strcmp>
    8c60:	e3500000 	cmp	r0, #0
    8c64:	1a000006 	bne	8c84 <BusRaiderApp::service()+0x160>
    8c68:	eb0092df 	bl	2d7ec <micros>
    8c6c:	e5850074 	str	r0, [r5, #116]	; 0x74
    8c70:	eaffffbc 	b	8b68 <BusRaiderApp::service()+0x44>
    8c74:	e59f1048 	ldr	r1, [pc, #72]	; 8cc4 <BusRaiderApp::service()+0x1a0>
    8c78:	e1a00006 	mov	r0, r6
    8c7c:	eb00991a 	bl	2f0ec <CommandHandler::sendAPIReq(char const*)>
    8c80:	eaffffc4 	b	8b98 <BusRaiderApp::service()+0x74>
    8c84:	e28d1008 	add	r1, sp, #8
    8c88:	e1a00007 	mov	r0, r7
    8c8c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    8c90:	eb009310 	bl	2d8d8 <strlcpy>
    8c94:	e58d4004 	str	r4, [sp, #4]
    8c98:	e58d4000 	str	r4, [sp]
    8c9c:	e1a03004 	mov	r3, r4
    8ca0:	e28d2008 	add	r2, sp, #8
    8ca4:	e59f101c 	ldr	r1, [pc, #28]	; 8cc8 <BusRaiderApp::service()+0x1a4>
    8ca8:	e1a00006 	mov	r0, r6
    8cac:	eb00984d 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    8cb0:	eaffffec 	b	8c68 <BusRaiderApp::service()+0x144>
    8cb4:	000f4240 	.word	0x000f4240
    8cb8:	0005022c 	.word	0x0005022c
    8cbc:	004c4b40 	.word	0x004c4b40
    8cc0:	000407b8 	.word	0x000407b8
    8cc4:	000407a8 	.word	0x000407a8
    8cc8:	00040798 	.word	0x00040798

00008ccc <BusRaiderApp::addUSBKeypressToBufferStatic(unsigned char, unsigned char const*)>:
    8ccc:	e12fff1e 	bx	lr

00008cd0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8cd0:	e12fff1e 	bx	lr

00008cd4 <BusRaiderApp::getPiStatus(char*, int)>:
    8cd4:	e92d4070 	push	{r4, r5, r6, lr}
    8cd8:	e1a04001 	mov	r4, r1
    8cdc:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    8ce0:	e1a05002 	mov	r5, r2
    8ce4:	eb00bbb5 	bl	37bc0 <McManager::getMachineJSON()>
    8ce8:	e3540000 	cmp	r4, #0
    8cec:	08bd8070 	popeq	{r4, r5, r6, pc}
    8cf0:	e1a02005 	mov	r2, r5
    8cf4:	e1a01000 	mov	r1, r0
    8cf8:	e1a00004 	mov	r0, r4
    8cfc:	e8bd4070 	pop	{r4, r5, r6, lr}
    8d00:	ea0092f4 	b	2d8d8 <strlcpy>

00008d04 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    8d04:	e92d4030 	push	{r4, r5, lr}
    8d08:	e24dde45 	sub	sp, sp, #1104	; 0x450
    8d0c:	e24dd00c 	sub	sp, sp, #12
    8d10:	e1a04000 	mov	r4, r0
    8d14:	e1a05001 	mov	r5, r1
    8d18:	eb0092b3 	bl	2d7ec <micros>
    8d1c:	e584095c 	str	r0, [r4, #2396]	; 0x95c
    8d20:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    8d24:	eb0092b8 	bl	2d80c <microsDelay>
    8d28:	e1a01005 	mov	r1, r5
    8d2c:	e2845e85 	add	r5, r4, #2128	; 0x850
    8d30:	e28d2070 	add	r2, sp, #112	; 0x70
    8d34:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8d38:	e2855004 	add	r5, r5, #4
    8d3c:	e59f00c8 	ldr	r0, [pc, #200]	; 8e0c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x108>
    8d40:	eb00939a 	bl	2dbb0 <jsonGetValueForKey>
    8d44:	e1a02005 	mov	r2, r5
    8d48:	e3a0301e 	mov	r3, #30
    8d4c:	e28d1070 	add	r1, sp, #112	; 0x70
    8d50:	e59f00b8 	ldr	r0, [pc, #184]	; 8e10 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x10c>
    8d54:	eb009395 	bl	2dbb0 <jsonGetValueForKey>
    8d58:	e59f10b4 	ldr	r1, [pc, #180]	; 8e14 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x110>
    8d5c:	e1a00005 	mov	r0, r5
    8d60:	eb0082ff 	bl	29964 <strcmp>
    8d64:	e2900000 	adds	r0, r0, #0
    8d68:	13a00001 	movne	r0, #1
    8d6c:	e2842e87 	add	r2, r4, #2160	; 0x870
    8d70:	e5c40958 	strb	r0, [r4, #2392]	; 0x958
    8d74:	e2822002 	add	r2, r2, #2
    8d78:	e28d1070 	add	r1, sp, #112	; 0x70
    8d7c:	e3a0301e 	mov	r3, #30
    8d80:	e59f0090 	ldr	r0, [pc, #144]	; 8e18 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x114>
    8d84:	eb009389 	bl	2dbb0 <jsonGetValueForKey>
    8d88:	e2842e89 	add	r2, r4, #2192	; 0x890
    8d8c:	e28d1070 	add	r1, sp, #112	; 0x70
    8d90:	e3a03064 	mov	r3, #100	; 0x64
    8d94:	e59f0080 	ldr	r0, [pc, #128]	; 8e1c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x118>
    8d98:	eb009384 	bl	2dbb0 <jsonGetValueForKey>
    8d9c:	e2842e8f 	add	r2, r4, #2288	; 0x8f0
    8da0:	e2822004 	add	r2, r2, #4
    8da4:	e28d1070 	add	r1, sp, #112	; 0x70
    8da8:	e3a03064 	mov	r3, #100	; 0x64
    8dac:	e59f006c 	ldr	r0, [pc, #108]	; 8e20 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x11c>
    8db0:	eb00937e 	bl	2dbb0 <jsonGetValueForKey>
    8db4:	e3a0c000 	mov	ip, #0
    8db8:	e28d300c 	add	r3, sp, #12
    8dbc:	e1a02003 	mov	r2, r3
    8dc0:	e58d3004 	str	r3, [sp, #4]
    8dc4:	e28d1070 	add	r1, sp, #112	; 0x70
    8dc8:	e3a03064 	mov	r3, #100	; 0x64
    8dcc:	e59f0050 	ldr	r0, [pc, #80]	; 8e24 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x120>
    8dd0:	e5cdc00c 	strb	ip, [sp, #12]
    8dd4:	eb009375 	bl	2dbb0 <jsonGetValueForKey>
    8dd8:	e59d0004 	ldr	r0, [sp, #4]
    8ddc:	eb0082d6 	bl	2993c <strlen>
    8de0:	e3500000 	cmp	r0, #0
    8de4:	03a00014 	moveq	r0, #20
    8de8:	0a000001 	beq	8df4 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xf0>
    8dec:	e59d0004 	ldr	r0, [sp, #4]
    8df0:	eb0084f2 	bl	2a1c0 <atoi>
    8df4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8df8:	e593300c 	ldr	r3, [r3, #12]
    8dfc:	e5830000 	str	r0, [r3]
    8e00:	e28dde45 	add	sp, sp, #1104	; 0x450
    8e04:	e28dd00c 	add	sp, sp, #12
    8e08:	e8bd8030 	pop	{r4, r5, pc}
    8e0c:	000407c4 	.word	0x000407c4
    8e10:	000407d0 	.word	0x000407d0
    8e14:	000407d8 	.word	0x000407d8
    8e18:	000407e0 	.word	0x000407e0
    8e1c:	000407ec 	.word	0x000407ec
    8e20:	000407f4 	.word	0x000407f4
    8e24:	000407fc 	.word	0x000407fc

00008e28 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    8e28:	e92d4070 	push	{r4, r5, r6, lr}
    8e2c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    8e30:	e1a05000 	mov	r5, r0
    8e34:	e28d2004 	add	r2, sp, #4
    8e38:	e3a030c8 	mov	r3, #200	; 0xc8
    8e3c:	e59f00ac 	ldr	r0, [pc, #172]	; 8ef0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8>
    8e40:	e1a06001 	mov	r6, r1
    8e44:	eb009359 	bl	2dbb0 <jsonGetValueForKey>
    8e48:	e2504000 	subs	r4, r0, #0
    8e4c:	1a000003 	bne	8e60 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    8e50:	e3a04000 	mov	r4, #0
    8e54:	e1a00004 	mov	r0, r4
    8e58:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    8e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e60:	e3a03000 	mov	r3, #0
    8e64:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    8e68:	e59f1084 	ldr	r1, [pc, #132]	; 8ef4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
    8e6c:	e5c23000 	strb	r3, [r2]
    8e70:	e28d0004 	add	r0, sp, #4
    8e74:	eb0082d5 	bl	299d0 <strcasecmp>
    8e78:	e3500000 	cmp	r0, #0
    8e7c:	0a000014 	beq	8ed4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xac>
    8e80:	e59f1070 	ldr	r1, [pc, #112]	; 8ef8 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
    8e84:	e28d0004 	add	r0, sp, #4
    8e88:	eb0082d0 	bl	299d0 <strcasecmp>
    8e8c:	e3500000 	cmp	r0, #0
    8e90:	0a00000b 	beq	8ec4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c>
    8e94:	e28d0004 	add	r0, sp, #4
    8e98:	e59f105c 	ldr	r1, [pc, #92]	; 8efc <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4>
    8e9c:	eb0082cb 	bl	299d0 <strcasecmp>
    8ea0:	e3500000 	cmp	r0, #0
    8ea4:	1affffe9 	bne	8e50 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    8ea8:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    8eac:	e1a01006 	mov	r1, r6
    8eb0:	eb00bbb4 	bl	37d88 <McManager::setupMachine(char const*)>
    8eb4:	e3a03001 	mov	r3, #1
    8eb8:	e2855a03 	add	r5, r5, #12288	; 0x3000
    8ebc:	e5853070 	str	r3, [r5, #112]	; 0x70
    8ec0:	eaffffe3 	b	8e54 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    8ec4:	e1a01006 	mov	r1, r6
    8ec8:	e1a00005 	mov	r0, r5
    8ecc:	ebffff8c 	bl	8d04 <BusRaiderApp::storeESP32StatusInfo(char const*)>
    8ed0:	eaffffdf 	b	8e54 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    8ed4:	e1a00005 	mov	r0, r5
    8ed8:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    8edc:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    8ee0:	ebffff7b 	bl	8cd4 <BusRaiderApp::getPiStatus(char*, int)>
    8ee4:	e1a00004 	mov	r0, r4
    8ee8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    8eec:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ef0:	00040804 	.word	0x00040804
    8ef4:	0004080c 	.word	0x0004080c
    8ef8:	00040818 	.word	0x00040818
    8efc:	0004082c 	.word	0x0004082c

00008f00 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    8f00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8f04:	e99d5000 	ldmib	sp, {ip, lr}
    8f08:	e3500000 	cmp	r0, #0
    8f0c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    8f10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8f14:	eaffffc3 	b	8e28 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00008f18 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    8f18:	e3520000 	cmp	r2, #0
    8f1c:	e92d4010 	push	{r4, lr}
    8f20:	0a000005 	beq	8f3c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    8f24:	e351000f 	cmp	r1, #15
    8f28:	8a000007 	bhi	8f4c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    8f2c:	e3a03000 	mov	r3, #0
    8f30:	e0822001 	add	r2, r2, r1
    8f34:	e5c2305c 	strb	r3, [r2, #92]	; 0x5c
    8f38:	e8bd8010 	pop	{r4, pc}
    8f3c:	e59f2018 	ldr	r2, [pc, #24]	; 8f5c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    8f40:	e59f1018 	ldr	r1, [pc, #24]	; 8f60 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    8f44:	e59f0018 	ldr	r0, [pc, #24]	; 8f64 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    8f48:	eb006c5d 	bl	240c4 <assertion_failed>
    8f4c:	e59f2014 	ldr	r2, [pc, #20]	; 8f68 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    8f50:	e59f1008 	ldr	r1, [pc, #8]	; 8f60 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    8f54:	e59f0010 	ldr	r0, [pc, #16]	; 8f6c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    8f58:	eb006c59 	bl	240c4 <assertion_failed>
    8f5c:	000002ab 	.word	0x000002ab
    8f60:	000408b0 	.word	0x000408b0
    8f64:	000408c0 	.word	0x000408c0
    8f68:	000002ae 	.word	0x000002ae
    8f6c:	000408cc 	.word	0x000408cc

00008f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>:
    8f70:	e92d4030 	push	{r4, r5, lr}
    8f74:	e24dd01c 	sub	sp, sp, #28
    8f78:	e1a05000 	mov	r5, r0
    8f7c:	e28d000c 	add	r0, sp, #12
    8f80:	eb000c3e 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8f84:	e3a03000 	mov	r3, #0
    8f88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8f8c:	eb00753f 	bl	26490 <CLogger::Get()>
    8f90:	e1a04000 	mov	r4, r0
    8f94:	e28d000c 	add	r0, sp, #12
    8f98:	eb000c41 	bl	c0a4 <CDWHCIRegister::Read()>
    8f9c:	e59f3020 	ldr	r3, [pc, #32]	; 8fc4 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x54>
    8fa0:	e88d0021 	stm	sp, {r0, r5}
    8fa4:	e3a02004 	mov	r2, #4
    8fa8:	e1a00004 	mov	r0, r4
    8fac:	e59f1014 	ldr	r1, [pc, #20]	; 8fc8 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x58>
    8fb0:	eb007473 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8fb4:	e28d000c 	add	r0, sp, #12
    8fb8:	eb000c38 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    8fbc:	e28dd01c 	add	sp, sp, #28
    8fc0:	e8bd8030 	pop	{r4, r5, pc}
    8fc4:	000408ec 	.word	0x000408ec
    8fc8:	0004088c 	.word	0x0004088c

00008fcc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    8fcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8fd0:	e1a04000 	mov	r4, r0
    8fd4:	e3a05000 	mov	r5, #0
    8fd8:	e1a07001 	mov	r7, r1
    8fdc:	e1a06002 	mov	r6, r2
    8fe0:	eb002336 	bl	11cc0 <CUSBHostController::CUSBHostController()>
    8fe4:	e3a03001 	mov	r3, #1
    8fe8:	e59f00a8 	ldr	r0, [pc, #168]	; 9098 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    8fec:	e5845010 	str	r5, [r4, #16]
    8ff0:	e5840000 	str	r0, [r4]
    8ff4:	e5843014 	str	r3, [r4, #20]
    8ff8:	e5843058 	str	r3, [r4, #88]	; 0x58
    8ffc:	e5847004 	str	r7, [r4, #4]
    9000:	e5846008 	str	r6, [r4, #8]
    9004:	e584500c 	str	r5, [r4, #12]
    9008:	e584506c 	str	r5, [r4, #108]	; 0x6c
    900c:	e5845070 	str	r5, [r4, #112]	; 0x70
    9010:	e1a01004 	mov	r1, r4
    9014:	e2840074 	add	r0, r4, #116	; 0x74
    9018:	eb000d0c 	bl	c450 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    901c:	e5943004 	ldr	r3, [r4, #4]
    9020:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9024:	e1530005 	cmp	r3, r5
    9028:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    902c:	0a000011 	beq	9078 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9030:	e5943008 	ldr	r3, [r4, #8]
    9034:	e3530000 	cmp	r3, #0
    9038:	11a02005 	movne	r2, r5
    903c:	12843014 	addne	r3, r4, #20
    9040:	12841054 	addne	r1, r4, #84	; 0x54
    9044:	0a00000f 	beq	9088 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9048:	e5a32004 	str	r2, [r3, #4]!
    904c:	e1510003 	cmp	r1, r3
    9050:	1afffffc 	bne	9048 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9054:	e3a03000 	mov	r3, #0
    9058:	e1a01003 	mov	r1, r3
    905c:	e0842003 	add	r2, r4, r3
    9060:	e2833001 	add	r3, r3, #1
    9064:	e3530010 	cmp	r3, #16
    9068:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    906c:	1afffffa 	bne	905c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9070:	e1a00004 	mov	r0, r4
    9074:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9078:	e3a0204b 	mov	r2, #75	; 0x4b
    907c:	e59f1018 	ldr	r1, [pc, #24]	; 909c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9080:	e59f0018 	ldr	r0, [pc, #24]	; 90a0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9084:	eb006c0e 	bl	240c4 <assertion_failed>
    9088:	e3a0204c 	mov	r2, #76	; 0x4c
    908c:	e59f1008 	ldr	r1, [pc, #8]	; 909c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9090:	e59f000c 	ldr	r0, [pc, #12]	; 90a4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9094:	eb006c0a 	bl	240c4 <assertion_failed>
    9098:	0004089c 	.word	0x0004089c
    909c:	000408b0 	.word	0x000408b0
    90a0:	000408f8 	.word	0x000408f8
    90a4:	00040910 	.word	0x00040910

000090a8 <CDWHCIDevice::GetPortSpeed()>:
    90a8:	e92d4010 	push	{r4, lr}
    90ac:	e24dd010 	sub	sp, sp, #16
    90b0:	e59f103c 	ldr	r1, [pc, #60]	; 90f4 <CDWHCIDevice::GetPortSpeed()+0x4c>
    90b4:	e28d0004 	add	r0, sp, #4
    90b8:	eb000bf0 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    90bc:	e28d0004 	add	r0, sp, #4
    90c0:	eb000bf7 	bl	c0a4 <CDWHCIRegister::Read()>
    90c4:	e1a008a0 	lsr	r0, r0, #17
    90c8:	e2000003 	and	r0, r0, #3
    90cc:	e3500003 	cmp	r0, #3
    90d0:	03a04004 	moveq	r4, #4
    90d4:	159f301c 	ldrne	r3, [pc, #28]	; 90f8 <CDWHCIDevice::GetPortSpeed()+0x50>
    90d8:	10830000 	addne	r0, r3, r0
    90dc:	15d04020 	ldrbne	r4, [r0, #32]
    90e0:	e28d0004 	add	r0, sp, #4
    90e4:	eb000bed 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    90e8:	e1a00004 	mov	r0, r4
    90ec:	e28dd010 	add	sp, sp, #16
    90f0:	e8bd8010 	pop	{r4, pc}
    90f4:	20980440 	.word	0x20980440
    90f8:	0004088c 	.word	0x0004088c

000090fc <CDWHCIDevice::OvercurrentDetected()>:
    90fc:	e92d4010 	push	{r4, lr}
    9100:	e24dd010 	sub	sp, sp, #16
    9104:	e59f1028 	ldr	r1, [pc, #40]	; 9134 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9108:	e28d0004 	add	r0, sp, #4
    910c:	eb000bdb 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9110:	e28d0004 	add	r0, sp, #4
    9114:	eb000be2 	bl	c0a4 <CDWHCIRegister::Read()>
    9118:	e1a04000 	mov	r4, r0
    911c:	e28d0004 	add	r0, sp, #4
    9120:	eb000bde 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9124:	e1a00224 	lsr	r0, r4, #4
    9128:	e2000001 	and	r0, r0, #1
    912c:	e28dd010 	add	sp, sp, #16
    9130:	e8bd8010 	pop	{r4, pc}
    9134:	20980440 	.word	0x20980440

00009138 <CDWHCIDevice::DisableRootPort(bool)>:
    9138:	e3a03000 	mov	r3, #0
    913c:	e92d4010 	push	{r4, lr}
    9140:	e1a04001 	mov	r4, r1
    9144:	e24dd010 	sub	sp, sp, #16
    9148:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    914c:	e59f1044 	ldr	r1, [pc, #68]	; 9198 <CDWHCIDevice::DisableRootPort(bool)+0x60>
    9150:	e28d0004 	add	r0, sp, #4
    9154:	eb000bc9 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9158:	e28d0004 	add	r0, sp, #4
    915c:	eb000bd0 	bl	c0a4 <CDWHCIRegister::Read()>
    9160:	e28d0004 	add	r0, sp, #4
    9164:	e3e01004 	mvn	r1, #4
    9168:	eb000c01 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    916c:	e3540000 	cmp	r4, #0
    9170:	0a000002 	beq	9180 <CDWHCIDevice::DisableRootPort(bool)+0x48>
    9174:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9178:	e28d0004 	add	r0, sp, #4
    917c:	eb000bfc 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9180:	e28d0004 	add	r0, sp, #4
    9184:	eb000bcd 	bl	c0c0 <CDWHCIRegister::Write()>
    9188:	e28d0004 	add	r0, sp, #4
    918c:	eb000bc3 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9190:	e28dd010 	add	sp, sp, #16
    9194:	e8bd8010 	pop	{r4, pc}
    9198:	20980440 	.word	0x20980440

0000919c <CDWHCIDevice::PowerOn()>:
    919c:	e3a01000 	mov	r1, #0
    91a0:	e92d4030 	push	{r4, r5, lr}
    91a4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    91a8:	e28d000c 	add	r0, sp, #12
    91ac:	e1a05001 	mov	r5, r1
    91b0:	eb006be4 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    91b4:	e3a03014 	mov	r3, #20
    91b8:	e3a0c003 	mov	ip, #3
    91bc:	e28d000c 	add	r0, sp, #12
    91c0:	e58d5000 	str	r5, [sp]
    91c4:	e08d2003 	add	r2, sp, r3
    91c8:	e59f1034 	ldr	r1, [pc, #52]	; 9204 <CDWHCIDevice::PowerOn()+0x68>
    91cc:	e58dc020 	str	ip, [sp, #32]
    91d0:	e58dc024 	str	ip, [sp, #36]	; 0x24
    91d4:	eb006be7 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    91d8:	e2504000 	subs	r4, r0, #0
    91dc:	0a000003 	beq	91f0 <CDWHCIDevice::PowerOn()+0x54>
    91e0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    91e4:	e3140002 	tst	r4, #2
    91e8:	11a04005 	movne	r4, r5
    91ec:	02044001 	andeq	r4, r4, #1
    91f0:	e28d000c 	add	r0, sp, #12
    91f4:	eb006bda 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
    91f8:	e1a00004 	mov	r0, r4
    91fc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9200:	e8bd8030 	pop	{r4, r5, pc}
    9204:	00028001 	.word	0x00028001

00009208 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9208:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    920c:	e24dd014 	sub	sp, sp, #20
    9210:	e59f1030 	ldr	r1, [pc, #48]	; 9248 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9214:	e28d0004 	add	r0, sp, #4
    9218:	eb000b98 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    921c:	e28d0004 	add	r0, sp, #4
    9220:	eb000b9f 	bl	c0a4 <CDWHCIRegister::Read()>
    9224:	e3a01001 	mov	r1, #1
    9228:	e28d0004 	add	r0, sp, #4
    922c:	eb000bde 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9230:	e28d0004 	add	r0, sp, #4
    9234:	eb000ba1 	bl	c0c0 <CDWHCIRegister::Write()>
    9238:	e28d0004 	add	r0, sp, #4
    923c:	eb000b97 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9240:	e28dd014 	add	sp, sp, #20
    9244:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9248:	20980008 	.word	0x20980008

0000924c <CDWHCIDevice::EnableCommonInterrupts()>:
    924c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9250:	e24dd014 	sub	sp, sp, #20
    9254:	e59f1024 	ldr	r1, [pc, #36]	; 9280 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9258:	e28d0004 	add	r0, sp, #4
    925c:	eb000b87 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9260:	e28d0004 	add	r0, sp, #4
    9264:	eb000c0f 	bl	c2a8 <CDWHCIRegister::SetAll()>
    9268:	e28d0004 	add	r0, sp, #4
    926c:	eb000b93 	bl	c0c0 <CDWHCIRegister::Write()>
    9270:	e28d0004 	add	r0, sp, #4
    9274:	eb000b89 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9278:	e28dd014 	add	sp, sp, #20
    927c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9280:	20980014 	.word	0x20980014

00009284 <CDWHCIDevice::EnableHostInterrupts()>:
    9284:	e92d4010 	push	{r4, lr}
    9288:	e1a04000 	mov	r4, r0
    928c:	e24dd010 	sub	sp, sp, #16
    9290:	e3a02000 	mov	r2, #0
    9294:	e59f1040 	ldr	r1, [pc, #64]	; 92dc <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9298:	e28d0004 	add	r0, sp, #4
    929c:	eb000b7b 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    92a0:	e28d0004 	add	r0, sp, #4
    92a4:	eb000b85 	bl	c0c0 <CDWHCIRegister::Write()>
    92a8:	e1a00004 	mov	r0, r4
    92ac:	ebffffe6 	bl	924c <CDWHCIDevice::EnableCommonInterrupts()>
    92b0:	e28d0004 	add	r0, sp, #4
    92b4:	eb000b7a 	bl	c0a4 <CDWHCIRegister::Read()>
    92b8:	e3a01402 	mov	r1, #33554432	; 0x2000000
    92bc:	e28d0004 	add	r0, sp, #4
    92c0:	eb000bb9 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    92c4:	e28d0004 	add	r0, sp, #4
    92c8:	eb000b7c 	bl	c0c0 <CDWHCIRegister::Write()>
    92cc:	e28d0004 	add	r0, sp, #4
    92d0:	eb000b72 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    92d4:	e28dd010 	add	sp, sp, #16
    92d8:	e8bd8010 	pop	{r4, pc}
    92dc:	20980018 	.word	0x20980018

000092e0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    92e0:	e92d4030 	push	{r4, r5, lr}
    92e4:	e1a04000 	mov	r4, r0
    92e8:	e24dd014 	sub	sp, sp, #20
    92ec:	e1a05001 	mov	r5, r1
    92f0:	e28d0004 	add	r0, sp, #4
    92f4:	e59f1054 	ldr	r1, [pc, #84]	; 9350 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    92f8:	eb000b60 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    92fc:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9300:	e3500000 	cmp	r0, #0
    9304:	1a00000f 	bne	9348 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    9308:	e28d0004 	add	r0, sp, #4
    930c:	eb000b64 	bl	c0a4 <CDWHCIRegister::Read()>
    9310:	e3a01001 	mov	r1, #1
    9314:	e28d0004 	add	r0, sp, #4
    9318:	e1a01511 	lsl	r1, r1, r5
    931c:	eb000ba2 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9320:	e28d0004 	add	r0, sp, #4
    9324:	eb000b65 	bl	c0c0 <CDWHCIRegister::Write()>
    9328:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    932c:	e3530000 	cmp	r3, #0
    9330:	0a000000 	beq	9338 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    9334:	eb0088db 	bl	2b6a8 <LeaveCritical>
    9338:	e28d0004 	add	r0, sp, #4
    933c:	eb000b57 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9340:	e28dd014 	add	sp, sp, #20
    9344:	e8bd8030 	pop	{r4, r5, pc}
    9348:	eb0088ab 	bl	2b5fc <EnterCritical>
    934c:	eaffffed 	b	9308 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9350:	20980418 	.word	0x20980418

00009354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9354:	e92d4030 	push	{r4, r5, lr}
    9358:	e1a04000 	mov	r4, r0
    935c:	e24dd014 	sub	sp, sp, #20
    9360:	e1a05001 	mov	r5, r1
    9364:	e28d0004 	add	r0, sp, #4
    9368:	e59f1054 	ldr	r1, [pc, #84]	; 93c4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    936c:	eb000b43 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9370:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9374:	e3500000 	cmp	r0, #0
    9378:	1a00000f 	bne	93bc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    937c:	e28d0004 	add	r0, sp, #4
    9380:	eb000b47 	bl	c0a4 <CDWHCIRegister::Read()>
    9384:	e3a01001 	mov	r1, #1
    9388:	e28d0004 	add	r0, sp, #4
    938c:	e1e01511 	mvn	r1, r1, lsl r5
    9390:	eb000b77 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9394:	e28d0004 	add	r0, sp, #4
    9398:	eb000b48 	bl	c0c0 <CDWHCIRegister::Write()>
    939c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    93a0:	e3530000 	cmp	r3, #0
    93a4:	0a000000 	beq	93ac <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    93a8:	eb0088be 	bl	2b6a8 <LeaveCritical>
    93ac:	e28d0004 	add	r0, sp, #4
    93b0:	eb000b3a 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    93b4:	e28dd014 	add	sp, sp, #20
    93b8:	e8bd8030 	pop	{r4, r5, pc}
    93bc:	eb00888e 	bl	2b5fc <EnterCritical>
    93c0:	eaffffed 	b	937c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    93c4:	20980418 	.word	0x20980418

000093c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    93c8:	e92d4070 	push	{r4, r5, r6, lr}
    93cc:	e2514000 	subs	r4, r1, #0
    93d0:	e24dd048 	sub	sp, sp, #72	; 0x48
    93d4:	0a0000dd 	beq	9750 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x388>
    93d8:	e1a06000 	mov	r6, r0
    93dc:	e1a00004 	mov	r0, r4
    93e0:	eb000d17 	bl	c844 <CDWHCITransferStageData::GetChannelNumber() const>
    93e4:	e596300c 	ldr	r3, [r6, #12]
    93e8:	e1a05000 	mov	r5, r0
    93ec:	e1500003 	cmp	r0, r3
    93f0:	2a0000da 	bcs	9760 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x398>
    93f4:	e3a01001 	mov	r1, #1
    93f8:	e1a00004 	mov	r0, r4
    93fc:	eb000d0a 	bl	c82c <CDWHCITransferStageData::SetSubState(unsigned int)>
    9400:	e59f1368 	ldr	r1, [pc, #872]	; 9770 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    9404:	e1a05285 	lsl	r5, r5, #5
    9408:	e0851001 	add	r1, r5, r1
    940c:	e1a0000d 	mov	r0, sp
    9410:	eb000b1a 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9414:	e1a0000d 	mov	r0, sp
    9418:	eb000ba2 	bl	c2a8 <CDWHCIRegister::SetAll()>
    941c:	e1a0000d 	mov	r0, sp
    9420:	eb000b26 	bl	c0c0 <CDWHCIRegister::Write()>
    9424:	e59f1348 	ldr	r1, [pc, #840]	; 9774 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    9428:	e3a02000 	mov	r2, #0
    942c:	e0851001 	add	r1, r5, r1
    9430:	e28d000c 	add	r0, sp, #12
    9434:	eb000b15 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9438:	e1a00004 	mov	r0, r4
    943c:	eb000e39 	bl	cd28 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9440:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    9444:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    9448:	e28d000c 	add	r0, sp, #12
    944c:	eb000b56 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9450:	e1a00004 	mov	r0, r4
    9454:	eb000e35 	bl	cd30 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    9458:	e59f1318 	ldr	r1, [pc, #792]	; 9778 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    945c:	e0011980 	and	r1, r1, r0, lsl #19
    9460:	e28d000c 	add	r0, sp, #12
    9464:	eb000b50 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9468:	e1a00004 	mov	r0, r4
    946c:	eb000e00 	bl	cc74 <CDWHCITransferStageData::GetPID() const>
    9470:	e1a01e80 	lsl	r1, r0, #29
    9474:	e28d000c 	add	r0, sp, #12
    9478:	eb000b4b 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    947c:	e28d000c 	add	r0, sp, #12
    9480:	eb000b0e 	bl	c0c0 <CDWHCIRegister::Write()>
    9484:	e1a00004 	mov	r0, r4
    9488:	eb000e1a 	bl	ccf8 <CDWHCITransferStageData::GetDMAAddress() const>
    948c:	e59f12e8 	ldr	r1, [pc, #744]	; 977c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    9490:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    9494:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    9498:	e0851001 	add	r1, r5, r1
    949c:	e28d0018 	add	r0, sp, #24
    94a0:	eb000afa 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    94a4:	e28d0018 	add	r0, sp, #24
    94a8:	eb000b04 	bl	c0c0 <CDWHCIRegister::Write()>
    94ac:	e1a00004 	mov	r0, r4
    94b0:	eb000e10 	bl	ccf8 <CDWHCITransferStageData::GetDMAAddress() const>
    94b4:	e1a06000 	mov	r6, r0
    94b8:	e1a00004 	mov	r0, r4
    94bc:	eb000e19 	bl	cd28 <CDWHCITransferStageData::GetBytesToTransfer() const>
    94c0:	e1a01000 	mov	r1, r0
    94c4:	e1a00006 	mov	r0, r6
    94c8:	eb00888c 	bl	2b700 <CleanAndInvalidateDataCacheRange>
    94cc:	e59f12ac 	ldr	r1, [pc, #684]	; 9780 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    94d0:	e3a02000 	mov	r2, #0
    94d4:	e0851001 	add	r1, r5, r1
    94d8:	e28d0024 	add	r0, sp, #36	; 0x24
    94dc:	eb000aeb 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    94e0:	e1a00004 	mov	r0, r4
    94e4:	eb000e13 	bl	cd38 <CDWHCITransferStageData::IsSplit() const>
    94e8:	e3500000 	cmp	r0, #0
    94ec:	1a00007c 	bne	96e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x31c>
    94f0:	e28d0024 	add	r0, sp, #36	; 0x24
    94f4:	eb000af1 	bl	c0c0 <CDWHCIRegister::Write()>
    94f8:	e59f1284 	ldr	r1, [pc, #644]	; 9784 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    94fc:	e28d0030 	add	r0, sp, #48	; 0x30
    9500:	e0851001 	add	r1, r5, r1
    9504:	eb000add 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9508:	e28d0030 	add	r0, sp, #48	; 0x30
    950c:	eb000ae4 	bl	c0a4 <CDWHCIRegister::Read()>
    9510:	e59f1270 	ldr	r1, [pc, #624]	; 9788 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    9514:	e28d0030 	add	r0, sp, #48	; 0x30
    9518:	eb000b15 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    951c:	e1a00004 	mov	r0, r4
    9520:	eb000dcf 	bl	cc64 <CDWHCITransferStageData::GetMaxPacketSize() const>
    9524:	e1a01a80 	lsl	r1, r0, #21
    9528:	e1a01aa1 	lsr	r1, r1, #21
    952c:	e28d0030 	add	r0, sp, #48	; 0x30
    9530:	eb000b1d 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9534:	e28d0030 	add	r0, sp, #48	; 0x30
    9538:	e3e01603 	mvn	r1, #3145728	; 0x300000
    953c:	eb000b0c 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9540:	e28d0030 	add	r0, sp, #48	; 0x30
    9544:	e3a01601 	mov	r1, #1048576	; 0x100000
    9548:	eb000b17 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    954c:	e1a00004 	mov	r0, r4
    9550:	eb000de4 	bl	cce8 <CDWHCITransferStageData::IsDirectionIn() const>
    9554:	e3500000 	cmp	r0, #0
    9558:	1a000052 	bne	96a8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    955c:	e3e01902 	mvn	r1, #32768	; 0x8000
    9560:	e28d0030 	add	r0, sp, #48	; 0x30
    9564:	eb000b02 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9568:	e1a00004 	mov	r0, r4
    956c:	eb000dbe 	bl	cc6c <CDWHCITransferStageData::GetSpeed() const>
    9570:	e3500000 	cmp	r0, #0
    9574:	1a000052 	bne	96c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2fc>
    9578:	e3a01802 	mov	r1, #131072	; 0x20000
    957c:	e28d0030 	add	r0, sp, #48	; 0x30
    9580:	eb000b09 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9584:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    9588:	e28d0030 	add	r0, sp, #48	; 0x30
    958c:	eb000af8 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9590:	e1a00004 	mov	r0, r4
    9594:	eb000d7d 	bl	cb90 <CDWHCITransferStageData::GetDeviceAddress() const>
    9598:	e1a01b00 	lsl	r1, r0, #22
    959c:	e28d0030 	add	r0, sp, #48	; 0x30
    95a0:	eb000b01 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    95a4:	e3e01703 	mvn	r1, #786432	; 0xc0000
    95a8:	e28d0030 	add	r0, sp, #48	; 0x30
    95ac:	eb000af0 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    95b0:	e1a00004 	mov	r0, r4
    95b4:	eb000d81 	bl	cbc0 <CDWHCITransferStageData::GetEndpointType() const>
    95b8:	e1a01900 	lsl	r1, r0, #18
    95bc:	e28d0030 	add	r0, sp, #48	; 0x30
    95c0:	eb000af9 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    95c4:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    95c8:	e28d0030 	add	r0, sp, #48	; 0x30
    95cc:	eb000ae8 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    95d0:	e1a00004 	mov	r0, r4
    95d4:	eb000d96 	bl	cc34 <CDWHCITransferStageData::GetEndpointNumber() const>
    95d8:	e1a01580 	lsl	r1, r0, #11
    95dc:	e28d0030 	add	r0, sp, #48	; 0x30
    95e0:	eb000af1 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    95e4:	e1a00004 	mov	r0, r4
    95e8:	eb000e4a 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    95ec:	e2506000 	subs	r6, r0, #0
    95f0:	0a00000b 	beq	9624 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    95f4:	e5963000 	ldr	r3, [r6]
    95f8:	e5933014 	ldr	r3, [r3, #20]
    95fc:	e12fff33 	blx	r3
    9600:	e5963000 	ldr	r3, [r6]
    9604:	e1a00006 	mov	r0, r6
    9608:	e5933018 	ldr	r3, [r3, #24]
    960c:	e12fff33 	blx	r3
    9610:	e3500000 	cmp	r0, #0
    9614:	1a00002e 	bne	96d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x30c>
    9618:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    961c:	e28d0030 	add	r0, sp, #48	; 0x30
    9620:	eb000ad3 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9624:	e59f1160 	ldr	r1, [pc, #352]	; 978c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    9628:	e28d003c 	add	r0, sp, #60	; 0x3c
    962c:	e0851001 	add	r1, r5, r1
    9630:	eb000a92 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9634:	e1a00004 	mov	r0, r4
    9638:	eb000df9 	bl	ce24 <CDWHCITransferStageData::GetStatusMask() const>
    963c:	e1a01000 	mov	r1, r0
    9640:	e28d003c 	add	r0, sp, #60	; 0x3c
    9644:	eb000ab7 	bl	c128 <CDWHCIRegister::Set(unsigned int)>
    9648:	e28d003c 	add	r0, sp, #60	; 0x3c
    964c:	eb000a9b 	bl	c0c0 <CDWHCIRegister::Write()>
    9650:	e28d0030 	add	r0, sp, #48	; 0x30
    9654:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    9658:	eb000ad3 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    965c:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    9660:	e28d0030 	add	r0, sp, #48	; 0x30
    9664:	eb000ac2 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9668:	e28d0030 	add	r0, sp, #48	; 0x30
    966c:	eb000a93 	bl	c0c0 <CDWHCIRegister::Write()>
    9670:	e28d003c 	add	r0, sp, #60	; 0x3c
    9674:	eb000a89 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9678:	e28d0030 	add	r0, sp, #48	; 0x30
    967c:	eb000a87 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9680:	e28d0024 	add	r0, sp, #36	; 0x24
    9684:	eb000a85 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9688:	e28d0018 	add	r0, sp, #24
    968c:	eb000a83 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9690:	e28d000c 	add	r0, sp, #12
    9694:	eb000a81 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9698:	e1a0000d 	mov	r0, sp
    969c:	eb000a7f 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    96a0:	e28dd048 	add	sp, sp, #72	; 0x48
    96a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    96a8:	e3a01902 	mov	r1, #32768	; 0x8000
    96ac:	e28d0030 	add	r0, sp, #48	; 0x30
    96b0:	eb000abd 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    96b4:	e1a00004 	mov	r0, r4
    96b8:	eb000d6b 	bl	cc6c <CDWHCITransferStageData::GetSpeed() const>
    96bc:	e3500000 	cmp	r0, #0
    96c0:	0affffac 	beq	9578 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    96c4:	e3e01802 	mvn	r1, #131072	; 0x20000
    96c8:	e28d0030 	add	r0, sp, #48	; 0x30
    96cc:	eb000aa8 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    96d0:	eaffffab 	b	9584 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    96d4:	e3a01202 	mov	r1, #536870912	; 0x20000000
    96d8:	e28d0030 	add	r0, sp, #48	; 0x30
    96dc:	eb000ab2 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    96e0:	eaffffcf 	b	9624 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    96e4:	e1a00004 	mov	r0, r4
    96e8:	eb000db6 	bl	cdc8 <CDWHCITransferStageData::GetHubPortAddress() const>
    96ec:	e1a01000 	mov	r1, r0
    96f0:	e28d0024 	add	r0, sp, #36	; 0x24
    96f4:	eb000aac 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    96f8:	e1a00004 	mov	r0, r4
    96fc:	eb000d9c 	bl	cd74 <CDWHCITransferStageData::GetHubAddress() const>
    9700:	e1a01380 	lsl	r1, r0, #7
    9704:	e28d0024 	add	r0, sp, #36	; 0x24
    9708:	eb000aa7 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    970c:	e1a00004 	mov	r0, r4
    9710:	eb000dc1 	bl	ce1c <CDWHCITransferStageData::GetSplitPosition() const>
    9714:	e1a01700 	lsl	r1, r0, #14
    9718:	e28d0024 	add	r0, sp, #36	; 0x24
    971c:	eb000aa2 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    9720:	e1a00004 	mov	r0, r4
    9724:	eb000d85 	bl	cd40 <CDWHCITransferStageData::IsSplitComplete() const>
    9728:	e3500000 	cmp	r0, #0
    972c:	1a000003 	bne	9740 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x378>
    9730:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    9734:	e28d0024 	add	r0, sp, #36	; 0x24
    9738:	eb000a9b 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    973c:	eaffff6b 	b	94f0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    9740:	e3a01801 	mov	r1, #65536	; 0x10000
    9744:	e28d0024 	add	r0, sp, #36	; 0x24
    9748:	eb000a97 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    974c:	eafffff7 	b	9730 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x368>
    9750:	e59f2038 	ldr	r2, [pc, #56]	; 9790 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    9754:	e59f1038 	ldr	r1, [pc, #56]	; 9794 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    9758:	e59f0038 	ldr	r0, [pc, #56]	; 9798 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    975c:	eb006a58 	bl	240c4 <assertion_failed>
    9760:	e3a02e35 	mov	r2, #848	; 0x350
    9764:	e59f1028 	ldr	r1, [pc, #40]	; 9794 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    9768:	e59f002c 	ldr	r0, [pc, #44]	; 979c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    976c:	eb006a54 	bl	240c4 <assertion_failed>
    9770:	20980508 	.word	0x20980508
    9774:	20980510 	.word	0x20980510
    9778:	1ff80000 	.word	0x1ff80000
    977c:	20980514 	.word	0x20980514
    9780:	20980504 	.word	0x20980504
    9784:	20980500 	.word	0x20980500
    9788:	fffff800 	.word	0xfffff800
    978c:	2098050c 	.word	0x2098050c
    9790:	0000034e 	.word	0x0000034e
    9794:	000408b0 	.word	0x000408b0
    9798:	00040920 	.word	0x00040920
    979c:	00040930 	.word	0x00040930

000097a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    97a0:	e92d4070 	push	{r4, r5, r6, lr}
    97a4:	e2515000 	subs	r5, r1, #0
    97a8:	e24dd018 	sub	sp, sp, #24
    97ac:	0a000032 	beq	987c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    97b0:	e1a06000 	mov	r6, r0
    97b4:	e1a00005 	mov	r0, r5
    97b8:	eb000c21 	bl	c844 <CDWHCITransferStageData::GetChannelNumber() const>
    97bc:	e596300c 	ldr	r3, [r6, #12]
    97c0:	e1500003 	cmp	r0, r3
    97c4:	2a000030 	bcs	988c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    97c8:	e59f10cc 	ldr	r1, [pc, #204]	; 989c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    97cc:	e0801001 	add	r1, r0, r1
    97d0:	e1a04281 	lsl	r4, r1, #5
    97d4:	e1a01004 	mov	r1, r4
    97d8:	e1a0000d 	mov	r0, sp
    97dc:	eb000a27 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    97e0:	e1a0000d 	mov	r0, sp
    97e4:	eb000a2e 	bl	c0a4 <CDWHCIRegister::Read()>
    97e8:	e1a0000d 	mov	r0, sp
    97ec:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    97f0:	eb000a50 	bl	c138 <CDWHCIRegister::IsSet(unsigned int) const>
    97f4:	e3500000 	cmp	r0, #0
    97f8:	1a000006 	bne	9818 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    97fc:	e1a01005 	mov	r1, r5
    9800:	e1a00006 	mov	r0, r6
    9804:	ebfffeef 	bl	93c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9808:	e1a0000d 	mov	r0, sp
    980c:	eb000a23 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9810:	e28dd018 	add	sp, sp, #24
    9814:	e8bd8070 	pop	{r4, r5, r6, pc}
    9818:	e1a00005 	mov	r0, r5
    981c:	e3a01000 	mov	r1, #0
    9820:	eb000c01 	bl	c82c <CDWHCITransferStageData::SetSubState(unsigned int)>
    9824:	e1a0000d 	mov	r0, sp
    9828:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    982c:	eb000a50 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    9830:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    9834:	e1a0000d 	mov	r0, sp
    9838:	eb000a5b 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    983c:	e1a0000d 	mov	r0, sp
    9840:	eb000a1e 	bl	c0c0 <CDWHCIRegister::Write()>
    9844:	e284100c 	add	r1, r4, #12
    9848:	e28d000c 	add	r0, sp, #12
    984c:	eb000a0b 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9850:	e3a01002 	mov	r1, #2
    9854:	e28d000c 	add	r0, sp, #12
    9858:	eb000a32 	bl	c128 <CDWHCIRegister::Set(unsigned int)>
    985c:	e28d000c 	add	r0, sp, #12
    9860:	eb000a16 	bl	c0c0 <CDWHCIRegister::Write()>
    9864:	e28d000c 	add	r0, sp, #12
    9868:	eb000a0c 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    986c:	e1a0000d 	mov	r0, sp
    9870:	eb000a0a 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9874:	e28dd018 	add	sp, sp, #24
    9878:	e8bd8070 	pop	{r4, r5, r6, pc}
    987c:	e59f201c 	ldr	r2, [pc, #28]	; 98a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    9880:	e59f101c 	ldr	r1, [pc, #28]	; 98a4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    9884:	e59f001c 	ldr	r0, [pc, #28]	; 98a8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    9888:	eb006a0d 	bl	240c4 <assertion_failed>
    988c:	e59f2018 	ldr	r2, [pc, #24]	; 98ac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    9890:	e59f100c 	ldr	r1, [pc, #12]	; 98a4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    9894:	e59f0014 	ldr	r0, [pc, #20]	; 98b0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    9898:	eb006a09 	bl	240c4 <assertion_failed>
    989c:	0104c028 	.word	0x0104c028
    98a0:	00000333 	.word	0x00000333
    98a4:	000408b0 	.word	0x000408b0
    98a8:	00040920 	.word	0x00040920
    98ac:	00000335 	.word	0x00000335
    98b0:	00040930 	.word	0x00040930

000098b4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    98b4:	e92d4070 	push	{r4, r5, r6, lr}
    98b8:	e3a05000 	mov	r5, #0
    98bc:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    98c0:	e1510005 	cmp	r1, r5
    98c4:	0a00001d 	beq	9940 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    98c8:	e1a06000 	mov	r6, r0
    98cc:	e1a00001 	mov	r0, r1
    98d0:	e1a04001 	mov	r4, r1
    98d4:	eb000bd2 	bl	c824 <CDWHCITransferStageData::GetState() const>
    98d8:	e3500003 	cmp	r0, #3
    98dc:	1a00001b 	bne	9950 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    98e0:	e1a00004 	mov	r0, r4
    98e4:	eb000d13 	bl	cd38 <CDWHCITransferStageData::IsSplit() const>
    98e8:	e2501000 	subs	r1, r0, #0
    98ec:	1a000007 	bne	9910 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    98f0:	e1a00004 	mov	r0, r4
    98f4:	eb000bc8 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    98f8:	e1a01004 	mov	r1, r4
    98fc:	e1a00006 	mov	r0, r6
    9900:	ebffffa6 	bl	97a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9904:	e3a03000 	mov	r3, #0
    9908:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    990c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9910:	e1a00004 	mov	r0, r4
    9914:	e3a01001 	mov	r1, #1
    9918:	eb000bbf 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    991c:	e1a01005 	mov	r1, r5
    9920:	e1a00004 	mov	r0, r4
    9924:	eb000bb0 	bl	c7ec <CDWHCITransferStageData::SetSplitComplete(bool)>
    9928:	e1a00004 	mov	r0, r4
    992c:	eb000d79 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    9930:	e5903000 	ldr	r3, [r0]
    9934:	e5933008 	ldr	r3, [r3, #8]
    9938:	e12fff33 	blx	r3
    993c:	eaffffed 	b	98f8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    9940:	e59f2018 	ldr	r2, [pc, #24]	; 9960 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    9944:	e59f1018 	ldr	r1, [pc, #24]	; 9964 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    9948:	e59f0018 	ldr	r0, [pc, #24]	; 9968 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    994c:	eb0069dc 	bl	240c4 <assertion_failed>
    9950:	e59f2014 	ldr	r2, [pc, #20]	; 996c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    9954:	e59f1008 	ldr	r1, [pc, #8]	; 9964 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    9958:	e59f0010 	ldr	r0, [pc, #16]	; 9970 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    995c:	eb0069d8 	bl	240c4 <assertion_failed>
    9960:	0000053d 	.word	0x0000053d
    9964:	000408b0 	.word	0x000408b0
    9968:	00040920 	.word	0x00040920
    996c:	0000053e 	.word	0x0000053e
    9970:	00040948 	.word	0x00040948

00009974 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    9974:	e2520000 	subs	r0, r2, #0
    9978:	e92d4010 	push	{r4, lr}
    997c:	0a000003 	beq	9990 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    9980:	e3510000 	cmp	r1, #0
    9984:	0a000005 	beq	99a0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    9988:	e8bd4010 	pop	{r4, lr}
    998c:	eaffffc8 	b	98b4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    9990:	e59f2018 	ldr	r2, [pc, #24]	; 99b0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    9994:	e59f1018 	ldr	r1, [pc, #24]	; 99b4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    9998:	e59f0018 	ldr	r0, [pc, #24]	; 99b8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    999c:	eb0069c8 	bl	240c4 <assertion_failed>
    99a0:	e59f2014 	ldr	r2, [pc, #20]	; 99bc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    99a4:	e59f1008 	ldr	r1, [pc, #8]	; 99b4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    99a8:	e59f0010 	ldr	r0, [pc, #16]	; 99c0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    99ac:	eb0069c4 	bl	240c4 <assertion_failed>
    99b0:	00000554 	.word	0x00000554
    99b4:	000408b0 	.word	0x000408b0
    99b8:	000408c0 	.word	0x000408c0
    99bc:	00000557 	.word	0x00000557
    99c0:	0004097c 	.word	0x0004097c

000099c4 <CDWHCIDevice::AllocateChannel()>:
    99c4:	e92d4010 	push	{r4, lr}
    99c8:	e590c014 	ldr	ip, [r0, #20]
    99cc:	e24dd008 	sub	sp, sp, #8
    99d0:	e35c0000 	cmp	ip, #0
    99d4:	e1a04000 	mov	r4, r0
    99d8:	1a000014 	bne	9a30 <CDWHCIDevice::AllocateChannel()+0x6c>
    99dc:	e590100c 	ldr	r1, [r0, #12]
    99e0:	e3510000 	cmp	r1, #0
    99e4:	0a00000e 	beq	9a24 <CDWHCIDevice::AllocateChannel()+0x60>
    99e8:	e5903010 	ldr	r3, [r0, #16]
    99ec:	e2130001 	ands	r0, r3, #1
    99f0:	0a000025 	beq	9a8c <CDWHCIDevice::AllocateChannel()+0xc8>
    99f4:	e3a00000 	mov	r0, #0
    99f8:	e3a03001 	mov	r3, #1
    99fc:	ea000002 	b	9a0c <CDWHCIDevice::AllocateChannel()+0x48>
    9a00:	e5942010 	ldr	r2, [r4, #16]
    9a04:	e1120003 	tst	r2, r3
    9a08:	0a000013 	beq	9a5c <CDWHCIDevice::AllocateChannel()+0x98>
    9a0c:	e2800001 	add	r0, r0, #1
    9a10:	e1500001 	cmp	r0, r1
    9a14:	e1a03083 	lsl	r3, r3, #1
    9a18:	3afffff8 	bcc	9a00 <CDWHCIDevice::AllocateChannel()+0x3c>
    9a1c:	e35c0000 	cmp	ip, #0
    9a20:	1a000017 	bne	9a84 <CDWHCIDevice::AllocateChannel()+0xc0>
    9a24:	e3a00010 	mov	r0, #16
    9a28:	e28dd008 	add	sp, sp, #8
    9a2c:	e8bd8010 	pop	{r4, pc}
    9a30:	e1a0000c 	mov	r0, ip
    9a34:	eb0086f0 	bl	2b5fc <EnterCritical>
    9a38:	e594100c 	ldr	r1, [r4, #12]
    9a3c:	e3510000 	cmp	r1, #0
    9a40:	0594c014 	ldreq	ip, [r4, #20]
    9a44:	0afffff4 	beq	9a1c <CDWHCIDevice::AllocateChannel()+0x58>
    9a48:	e5943010 	ldr	r3, [r4, #16]
    9a4c:	e594c014 	ldr	ip, [r4, #20]
    9a50:	e2130001 	ands	r0, r3, #1
    9a54:	1affffe6 	bne	99f4 <CDWHCIDevice::AllocateChannel()+0x30>
    9a58:	e3a03001 	mov	r3, #1
    9a5c:	e5942010 	ldr	r2, [r4, #16]
    9a60:	e35c0000 	cmp	ip, #0
    9a64:	e1823003 	orr	r3, r2, r3
    9a68:	e5843010 	str	r3, [r4, #16]
    9a6c:	0affffed 	beq	9a28 <CDWHCIDevice::AllocateChannel()+0x64>
    9a70:	e58d0004 	str	r0, [sp, #4]
    9a74:	eb00870b 	bl	2b6a8 <LeaveCritical>
    9a78:	e59d0004 	ldr	r0, [sp, #4]
    9a7c:	e28dd008 	add	sp, sp, #8
    9a80:	e8bd8010 	pop	{r4, pc}
    9a84:	eb008707 	bl	2b6a8 <LeaveCritical>
    9a88:	eaffffe5 	b	9a24 <CDWHCIDevice::AllocateChannel()+0x60>
    9a8c:	e5943010 	ldr	r3, [r4, #16]
    9a90:	e3833001 	orr	r3, r3, #1
    9a94:	e5843010 	str	r3, [r4, #16]
    9a98:	eaffffe2 	b	9a28 <CDWHCIDevice::AllocateChannel()+0x64>

00009a9c <CDWHCIDevice::FreeChannel(unsigned int)>:
    9a9c:	e590300c 	ldr	r3, [r0, #12]
    9aa0:	e92d4070 	push	{r4, r5, r6, lr}
    9aa4:	e1530001 	cmp	r3, r1
    9aa8:	9a000012 	bls	9af8 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    9aac:	e3a05001 	mov	r5, #1
    9ab0:	e1a04000 	mov	r4, r0
    9ab4:	e5900014 	ldr	r0, [r0, #20]
    9ab8:	e1a05115 	lsl	r5, r5, r1
    9abc:	e3500000 	cmp	r0, #0
    9ac0:	1a00000a 	bne	9af0 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    9ac4:	e5943010 	ldr	r3, [r4, #16]
    9ac8:	e1150003 	tst	r5, r3
    9acc:	0a00000d 	beq	9b08 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    9ad0:	e5941010 	ldr	r1, [r4, #16]
    9ad4:	e5943014 	ldr	r3, [r4, #20]
    9ad8:	e1c15005 	bic	r5, r1, r5
    9adc:	e3530000 	cmp	r3, #0
    9ae0:	e5845010 	str	r5, [r4, #16]
    9ae4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9ae8:	e8bd4070 	pop	{r4, r5, r6, lr}
    9aec:	ea0086ed 	b	2b6a8 <LeaveCritical>
    9af0:	eb0086c1 	bl	2b5fc <EnterCritical>
    9af4:	eafffff2 	b	9ac4 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    9af8:	e59f2018 	ldr	r2, [pc, #24]	; 9b18 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    9afc:	e59f1018 	ldr	r1, [pc, #24]	; 9b1c <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    9b00:	e59f0018 	ldr	r0, [pc, #24]	; 9b20 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    9b04:	eb00696e 	bl	240c4 <assertion_failed>
    9b08:	e59f2014 	ldr	r2, [pc, #20]	; 9b24 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    9b0c:	e59f1008 	ldr	r1, [pc, #8]	; 9b1c <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    9b10:	e59f0010 	ldr	r0, [pc, #16]	; 9b28 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    9b14:	eb00696a 	bl	240c4 <assertion_failed>
    9b18:	00000578 	.word	0x00000578
    9b1c:	000408b0 	.word	0x000408b0
    9b20:	00040930 	.word	0x00040930
    9b24:	0000057d 	.word	0x0000057d
    9b28:	00040988 	.word	0x00040988

00009b2c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    9b2c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    9b30:	e2516000 	subs	r6, r1, #0
    9b34:	e24dd00c 	sub	sp, sp, #12
    9b38:	0a00003a 	beq	9c28 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    9b3c:	e1a05000 	mov	r5, r0
    9b40:	e1a09003 	mov	r9, r3
    9b44:	e1a08002 	mov	r8, r2
    9b48:	ebffff9d 	bl	99c4 <CDWHCIDevice::AllocateChannel()>
    9b4c:	e595300c 	ldr	r3, [r5, #12]
    9b50:	e1a04000 	mov	r4, r0
    9b54:	e1500003 	cmp	r0, r3
    9b58:	23a06000 	movcs	r6, #0
    9b5c:	3a000002 	bcc	9b6c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    9b60:	e1a00006 	mov	r0, r6
    9b64:	e28dd00c 	add	sp, sp, #12
    9b68:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9b6c:	e3a00054 	mov	r0, #84	; 0x54
    9b70:	eb000cea 	bl	cf20 <CDWHCITransferStageData::operator new(unsigned int)>
    9b74:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9b78:	e58d9000 	str	r9, [sp]
    9b7c:	e58d3004 	str	r3, [sp, #4]
    9b80:	e1a02006 	mov	r2, r6
    9b84:	e1a03008 	mov	r3, r8
    9b88:	e1a01004 	mov	r1, r4
    9b8c:	e0858104 	add	r8, r5, r4, lsl #2
    9b90:	e1a07000 	mov	r7, r0
    9b94:	eb000b3d 	bl	c890 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    9b98:	e5989018 	ldr	r9, [r8, #24]
    9b9c:	e3590000 	cmp	r9, #0
    9ba0:	1a000030 	bne	9c68 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    9ba4:	e1a01004 	mov	r1, r4
    9ba8:	e1a00005 	mov	r0, r5
    9bac:	e5887018 	str	r7, [r8, #24]
    9bb0:	ebfffdca 	bl	92e0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    9bb4:	e1a00007 	mov	r0, r7
    9bb8:	eb000c5e 	bl	cd38 <CDWHCITransferStageData::IsSplit() const>
    9bbc:	e2501000 	subs	r1, r0, #0
    9bc0:	e1a00007 	mov	r0, r7
    9bc4:	1a000007 	bne	9be8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xbc>
    9bc8:	eb000b13 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    9bcc:	e3a06001 	mov	r6, #1
    9bd0:	e1a00005 	mov	r0, r5
    9bd4:	e1a01007 	mov	r1, r7
    9bd8:	ebfffef0 	bl	97a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9bdc:	e1a00006 	mov	r0, r6
    9be0:	e28dd00c 	add	sp, sp, #12
    9be4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9be8:	eb000b13 	bl	c83c <CDWHCITransferStageData::BeginSplitCycle()>
    9bec:	e2506000 	subs	r6, r0, #0
    9bf0:	1a000010 	bne	9c38 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    9bf4:	e1a01004 	mov	r1, r4
    9bf8:	e1a00005 	mov	r0, r5
    9bfc:	ebfffdd4 	bl	9354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9c00:	e1a00007 	mov	r0, r7
    9c04:	eb000a7e 	bl	c604 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9c08:	e1a00007 	mov	r0, r7
    9c0c:	e3a01054 	mov	r1, #84	; 0x54
    9c10:	eb000cd8 	bl	cf78 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9c14:	e5886018 	str	r6, [r8, #24]
    9c18:	e1a01004 	mov	r1, r4
    9c1c:	e1a00005 	mov	r0, r5
    9c20:	ebffff9d 	bl	9a9c <CDWHCIDevice::FreeChannel(unsigned int)>
    9c24:	eaffffcd 	b	9b60 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    9c28:	e59f2048 	ldr	r2, [pc, #72]	; 9c78 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    9c2c:	e59f1048 	ldr	r1, [pc, #72]	; 9c7c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    9c30:	e59f0048 	ldr	r0, [pc, #72]	; 9c80 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    9c34:	eb006922 	bl	240c4 <assertion_failed>
    9c38:	e1a00007 	mov	r0, r7
    9c3c:	e3a01001 	mov	r1, #1
    9c40:	eb000af5 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    9c44:	e1a01009 	mov	r1, r9
    9c48:	e1a00007 	mov	r0, r7
    9c4c:	eb000ae6 	bl	c7ec <CDWHCITransferStageData::SetSplitComplete(bool)>
    9c50:	e1a00007 	mov	r0, r7
    9c54:	eb000caf 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    9c58:	e5903000 	ldr	r3, [r0]
    9c5c:	e5933008 	ldr	r3, [r3, #8]
    9c60:	e12fff33 	blx	r3
    9c64:	eaffffd8 	b	9bcc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa0>
    9c68:	e59f2014 	ldr	r2, [pc, #20]	; 9c84 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    9c6c:	e59f1008 	ldr	r1, [pc, #8]	; 9c7c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    9c70:	e59f0010 	ldr	r0, [pc, #16]	; 9c88 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    9c74:	eb006912 	bl	240c4 <assertion_failed>
    9c78:	000002b6 	.word	0x000002b6
    9c7c:	000408b0 	.word	0x000408b0
    9c80:	000409ac 	.word	0x000409ac
    9c84:	000002c7 	.word	0x000002c7
    9c88:	000409b8 	.word	0x000409b8

00009c8c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    9c8c:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    9c90:	e21330ff 	ands	r3, r3, #255	; 0xff
    9c94:	1a000020 	bne	9d1c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    9c98:	e92d4070 	push	{r4, r5, r6, lr}
    9c9c:	e1a06002 	mov	r6, r2
    9ca0:	e24dd008 	sub	sp, sp, #8
    9ca4:	e1a04001 	mov	r4, r1
    9ca8:	e1a05000 	mov	r5, r0
    9cac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9cb0:	e3510000 	cmp	r1, #0
    9cb4:	0a000027 	beq	9d58 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    9cb8:	e1a00001 	mov	r0, r1
    9cbc:	eb002832 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    9cc0:	eb0012d6 	bl	e820 <CUSBEndpoint::GetType() const>
    9cc4:	e3500001 	cmp	r0, #1
    9cc8:	1a000015 	bne	9d24 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    9ccc:	e1a00004 	mov	r0, r4
    9cd0:	eb00286d 	bl	13e8c <CUSBRequest::GetBufLen() const>
    9cd4:	e3500000 	cmp	r0, #0
    9cd8:	0a00001a 	beq	9d48 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    9cdc:	e3a01000 	mov	r1, #0
    9ce0:	e1a00004 	mov	r0, r4
    9ce4:	eb002833 	bl	13db8 <CUSBRequest::SetStatus(int)>
    9ce8:	e1a00004 	mov	r0, r4
    9cec:	eb002826 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    9cf0:	eb0012cc 	bl	e828 <CUSBEndpoint::IsDirectionIn() const>
    9cf4:	e58d6000 	str	r6, [sp]
    9cf8:	e1a02000 	mov	r2, r0
    9cfc:	e1a01004 	mov	r1, r4
    9d00:	e1a00005 	mov	r0, r5
    9d04:	e3a03000 	mov	r3, #0
    9d08:	ebffff87 	bl	9b2c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    9d0c:	e3a03000 	mov	r3, #0
    9d10:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9d14:	e28dd008 	add	sp, sp, #8
    9d18:	e8bd8070 	pop	{r4, r5, r6, pc}
    9d1c:	e3a00000 	mov	r0, #0
    9d20:	e12fff1e 	bx	lr
    9d24:	e1a00004 	mov	r0, r4
    9d28:	eb002817 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    9d2c:	eb0012bb 	bl	e820 <CUSBEndpoint::GetType() const>
    9d30:	e3500002 	cmp	r0, #2
    9d34:	0affffe4 	beq	9ccc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    9d38:	e59f2028 	ldr	r2, [pc, #40]	; 9d68 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    9d3c:	e59f1028 	ldr	r1, [pc, #40]	; 9d6c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9d40:	e59f0028 	ldr	r0, [pc, #40]	; 9d70 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    9d44:	eb0068de 	bl	240c4 <assertion_failed>
    9d48:	e59f2024 	ldr	r2, [pc, #36]	; 9d74 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    9d4c:	e59f1018 	ldr	r1, [pc, #24]	; 9d6c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9d50:	e59f0020 	ldr	r0, [pc, #32]	; 9d78 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    9d54:	eb0068da 	bl	240c4 <assertion_failed>
    9d58:	e3a02f45 	mov	r2, #276	; 0x114
    9d5c:	e59f1008 	ldr	r1, [pc, #8]	; 9d6c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9d60:	e59f0014 	ldr	r0, [pc, #20]	; 9d7c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    9d64:	eb0068d6 	bl	240c4 <assertion_failed>
    9d68:	00000116 	.word	0x00000116
    9d6c:	000408b0 	.word	0x000408b0
    9d70:	000409d4 	.word	0x000409d4
    9d74:	00000117 	.word	0x00000117
    9d78:	00040a48 	.word	0x00040a48
    9d7c:	000409ac 	.word	0x000409ac

00009d80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>:
    9d80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9d84:	e0807101 	add	r7, r0, r1, lsl #2
    9d88:	e5974018 	ldr	r4, [r7, #24]
    9d8c:	e24dd020 	sub	sp, sp, #32
    9d90:	e3540000 	cmp	r4, #0
    9d94:	0a00008d 	beq	9fd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x250>
    9d98:	e1a05000 	mov	r5, r0
    9d9c:	e1a00004 	mov	r0, r4
    9da0:	e1a06001 	mov	r6, r1
    9da4:	eb000c50 	bl	ceec <CDWHCITransferStageData::GetURB() const>
    9da8:	e2509000 	subs	r9, r0, #0
    9dac:	0a00008b 	beq	9fe0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x260>
    9db0:	e1a00004 	mov	r0, r4
    9db4:	eb000a9e 	bl	c834 <CDWHCITransferStageData::GetSubState() const>
    9db8:	e3500000 	cmp	r0, #0
    9dbc:	0a00004a 	beq	9eec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    9dc0:	e3500001 	cmp	r0, #1
    9dc4:	1a000044 	bne	9edc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x15c>
    9dc8:	e1a00004 	mov	r0, r4
    9dcc:	eb000bc9 	bl	ccf8 <CDWHCITransferStageData::GetDMAAddress() const>
    9dd0:	e1a08000 	mov	r8, r0
    9dd4:	e1a00004 	mov	r0, r4
    9dd8:	eb000bd2 	bl	cd28 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9ddc:	e1a01000 	mov	r1, r0
    9de0:	e1a00008 	mov	r0, r8
    9de4:	eb008645 	bl	2b700 <CleanAndInvalidateDataCacheRange>
    9de8:	e59f148c 	ldr	r1, [pc, #1164]	; a27c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4fc>
    9dec:	e1a08286 	lsl	r8, r6, #5
    9df0:	e0881001 	add	r1, r8, r1
    9df4:	e28d0008 	add	r0, sp, #8
    9df8:	eb0008a0 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dfc:	e28d0008 	add	r0, sp, #8
    9e00:	eb0008a7 	bl	c0a4 <CDWHCIRegister::Read()>
    9e04:	e59f1474 	ldr	r1, [pc, #1140]	; a280 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x500>
    9e08:	e28d0014 	add	r0, sp, #20
    9e0c:	e0881001 	add	r1, r8, r1
    9e10:	eb00089a 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e14:	e28d0014 	add	r0, sp, #20
    9e18:	eb0008a1 	bl	c0a4 <CDWHCIRegister::Read()>
    9e1c:	e3500002 	cmp	r0, #2
    9e20:	0a000072 	beq	9ff0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x270>
    9e24:	e1a00004 	mov	r0, r4
    9e28:	eb000a87 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    9e2c:	e3500000 	cmp	r0, #0
    9e30:	1a0000aa 	bne	a0e0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x360>
    9e34:	e28d0014 	add	r0, sp, #20
    9e38:	eb000899 	bl	c0a4 <CDWHCIRegister::Read()>
    9e3c:	e1a0a000 	mov	sl, r0
    9e40:	e28d0008 	add	r0, sp, #8
    9e44:	eb0008ab 	bl	c0f8 <CDWHCIRegister::Get() const>
    9e48:	e1a08000 	mov	r8, r0
    9e4c:	e28d0008 	add	r0, sp, #8
    9e50:	eb0008a8 	bl	c0f8 <CDWHCIRegister::Get() const>
    9e54:	e59f2428 	ldr	r2, [pc, #1064]	; a284 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x504>
    9e58:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    9e5c:	e00229a8 	and	r2, r2, r8, lsr #19
    9e60:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    9e64:	e1a0100a 	mov	r1, sl
    9e68:	e1a00004 	mov	r0, r4
    9e6c:	eb0009f7 	bl	c650 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9e70:	e28d0014 	add	r0, sp, #20
    9e74:	eb000889 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9e78:	e28d0008 	add	r0, sp, #8
    9e7c:	eb000887 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    9e80:	e1a00004 	mov	r0, r4
    9e84:	eb000a66 	bl	c824 <CDWHCITransferStageData::GetState() const>
    9e88:	e3500001 	cmp	r0, #1
    9e8c:	e1a08000 	mov	r8, r0
    9e90:	0a00001a 	beq	9f00 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x180>
    9e94:	3a000061 	bcc	a020 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2a0>
    9e98:	e3500002 	cmp	r0, #2
    9e9c:	1a00005b 	bne	a010 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x290>
    9ea0:	e1a00004 	mov	r0, r4
    9ea4:	eb000beb 	bl	ce58 <CDWHCITransferStageData::GetTransactionStatus() const>
    9ea8:	e59f33d8 	ldr	r3, [pc, #984]	; a288 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    9eac:	e1a08000 	mov	r8, r0
    9eb0:	e0033000 	and	r3, r3, r0
    9eb4:	e3530000 	cmp	r3, #0
    9eb8:	0a000081 	beq	a0c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x344>
    9ebc:	eb007173 	bl	26490 <CLogger::Get()>
    9ec0:	e59f13c4 	ldr	r1, [pc, #964]	; a28c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    9ec4:	e58d8000 	str	r8, [sp]
    9ec8:	e59f33c0 	ldr	r3, [pc, #960]	; a290 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    9ecc:	e3a02001 	mov	r2, #1
    9ed0:	eb0070ab 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9ed4:	e3a01000 	mov	r1, #0
    9ed8:	ea00005e 	b	a058 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    9edc:	e59f23b0 	ldr	r2, [pc, #944]	; a294 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x514>
    9ee0:	e59f13b0 	ldr	r1, [pc, #944]	; a298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    9ee4:	e59f03b0 	ldr	r0, [pc, #944]	; a29c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    9ee8:	eb006875 	bl	240c4 <assertion_failed>
    9eec:	e1a01004 	mov	r1, r4
    9ef0:	e1a00005 	mov	r0, r5
    9ef4:	ebfffd33 	bl	93c8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9ef8:	e28dd020 	add	sp, sp, #32
    9efc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9f00:	e1a00004 	mov	r0, r4
    9f04:	eb000bd3 	bl	ce58 <CDWHCITransferStageData::GetTransactionStatus() const>
    9f08:	e59f3390 	ldr	r3, [pc, #912]	; a2a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x520>
    9f0c:	e1a0a000 	mov	sl, r0
    9f10:	e0033000 	and	r3, r3, r0
    9f14:	e3530000 	cmp	r3, #0
    9f18:	1a000061 	bne	a0a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x324>
    9f1c:	e1a00004 	mov	r0, r4
    9f20:	eb000bfc 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    9f24:	e5903000 	ldr	r3, [r0]
    9f28:	e1a0100a 	mov	r1, sl
    9f2c:	e5933010 	ldr	r3, [r3, #16]
    9f30:	e12fff33 	blx	r3
    9f34:	e3a01002 	mov	r1, #2
    9f38:	e1a00004 	mov	r0, r4
    9f3c:	eb000a36 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    9f40:	e1a01008 	mov	r1, r8
    9f44:	e1a00004 	mov	r0, r4
    9f48:	eb000a27 	bl	c7ec <CDWHCITransferStageData::SetSplitComplete(bool)>
    9f4c:	e1a00004 	mov	r0, r4
    9f50:	eb000bf0 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    9f54:	e5903000 	ldr	r3, [r0]
    9f58:	e593300c 	ldr	r3, [r3, #12]
    9f5c:	e12fff33 	blx	r3
    9f60:	e3500000 	cmp	r0, #0
    9f64:	1a000086 	bne	a184 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x404>
    9f68:	e1a00004 	mov	r0, r4
    9f6c:	eb000bc5 	bl	ce88 <CDWHCITransferStageData::IsStageComplete() const>
    9f70:	e2508000 	subs	r8, r0, #0
    9f74:	1a00006c 	bne	a12c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3ac>
    9f78:	e1a00004 	mov	r0, r4
    9f7c:	eb000a2e 	bl	c83c <CDWHCITransferStageData::BeginSplitCycle()>
    9f80:	e250a000 	subs	sl, r0, #0
    9f84:	1a00009b 	bne	a1f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x478>
    9f88:	e1a0100a 	mov	r1, sl
    9f8c:	e1a00009 	mov	r0, r9
    9f90:	eb002788 	bl	13db8 <CUSBRequest::SetStatus(int)>
    9f94:	e1a01006 	mov	r1, r6
    9f98:	e1a00005 	mov	r0, r5
    9f9c:	ebfffcec 	bl	9354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9fa0:	e1a00004 	mov	r0, r4
    9fa4:	eb000996 	bl	c604 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9fa8:	e1a00004 	mov	r0, r4
    9fac:	e3a01054 	mov	r1, #84	; 0x54
    9fb0:	eb000bf0 	bl	cf78 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9fb4:	e587a018 	str	sl, [r7, #24]
    9fb8:	e1a00005 	mov	r0, r5
    9fbc:	e1a01006 	mov	r1, r6
    9fc0:	ebfffeb5 	bl	9a9c <CDWHCIDevice::FreeChannel(unsigned int)>
    9fc4:	e1a00009 	mov	r0, r9
    9fc8:	eb0027be 	bl	13ec8 <CUSBRequest::CallCompletionRoutine()>
    9fcc:	eaffffc9 	b	9ef8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    9fd0:	e59f22cc 	ldr	r2, [pc, #716]	; a2a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x524>
    9fd4:	e59f12bc 	ldr	r1, [pc, #700]	; a298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    9fd8:	e59f02c8 	ldr	r0, [pc, #712]	; a2a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x528>
    9fdc:	eb006838 	bl	240c4 <assertion_failed>
    9fe0:	e59f22c4 	ldr	r2, [pc, #708]	; a2ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x52c>
    9fe4:	e59f12ac 	ldr	r1, [pc, #684]	; a298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    9fe8:	e59f02c0 	ldr	r0, [pc, #704]	; a2b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x530>
    9fec:	eb006834 	bl	240c4 <assertion_failed>
    9ff0:	e1a01004 	mov	r1, r4
    9ff4:	e1a00005 	mov	r0, r5
    9ff8:	ebfffde8 	bl	97a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9ffc:	e28d0014 	add	r0, sp, #20
    a000:	eb000826 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    a004:	e28d0008 	add	r0, sp, #8
    a008:	eb000824 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    a00c:	eaffffb9 	b	9ef8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    a010:	e59f229c 	ldr	r2, [pc, #668]	; a2b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x534>
    a014:	e59f127c 	ldr	r1, [pc, #636]	; a298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    a018:	e59f027c 	ldr	r0, [pc, #636]	; a29c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    a01c:	eb006828 	bl	240c4 <assertion_failed>
    a020:	e1a00004 	mov	r0, r4
    a024:	eb000b8b 	bl	ce58 <CDWHCITransferStageData::GetTransactionStatus() const>
    a028:	e59f8258 	ldr	r8, [pc, #600]	; a288 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    a02c:	e1a0a000 	mov	sl, r0
    a030:	e0088000 	and	r8, r8, r0
    a034:	e3580000 	cmp	r8, #0
    a038:	1a000031 	bne	a104 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x384>
    a03c:	e3100050 	tst	r0, #80	; 0x50
    a040:	1a000053 	bne	a194 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x414>
    a044:	e1a00004 	mov	r0, r4
    a048:	eb000b28 	bl	ccf0 <CDWHCITransferStageData::IsStatusStage() const>
    a04c:	e3500000 	cmp	r0, #0
    a050:	0a000083 	beq	a264 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4e4>
    a054:	e3a01001 	mov	r1, #1
    a058:	e1a00009 	mov	r0, r9
    a05c:	eb002755 	bl	13db8 <CUSBRequest::SetStatus(int)>
    a060:	e1a01006 	mov	r1, r6
    a064:	e1a00005 	mov	r0, r5
    a068:	ebfffcb9 	bl	9354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a06c:	e1a00004 	mov	r0, r4
    a070:	eb000963 	bl	c604 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a074:	e1a00004 	mov	r0, r4
    a078:	e3a01054 	mov	r1, #84	; 0x54
    a07c:	eb000bbd 	bl	cf78 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a080:	e3a03000 	mov	r3, #0
    a084:	e1a01006 	mov	r1, r6
    a088:	e1a00005 	mov	r0, r5
    a08c:	e5873018 	str	r3, [r7, #24]
    a090:	ebfffe81 	bl	9a9c <CDWHCIDevice::FreeChannel(unsigned int)>
    a094:	e1a00009 	mov	r0, r9
    a098:	eb00278a 	bl	13ec8 <CUSBRequest::CallCompletionRoutine()>
    a09c:	e28dd020 	add	sp, sp, #32
    a0a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a0a4:	eb0070f9 	bl	26490 <CLogger::Get()>
    a0a8:	e59f11dc 	ldr	r1, [pc, #476]	; a28c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    a0ac:	e58da000 	str	sl, [sp]
    a0b0:	e1a02008 	mov	r2, r8
    a0b4:	e59f31d4 	ldr	r3, [pc, #468]	; a290 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    a0b8:	eb007031 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a0bc:	e3a01000 	mov	r1, #0
    a0c0:	eaffffe4 	b	a058 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    a0c4:	e1a00004 	mov	r0, r4
    a0c8:	eb000b92 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    a0cc:	e5903000 	ldr	r3, [r0]
    a0d0:	e1a01008 	mov	r1, r8
    a0d4:	e5933010 	ldr	r3, [r3, #16]
    a0d8:	e12fff33 	blx	r3
    a0dc:	eaffff9a 	b	9f4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x1cc>
    a0e0:	e28d0008 	add	r0, sp, #8
    a0e4:	eb000803 	bl	c0f8 <CDWHCIRegister::Get() const>
    a0e8:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    a0ec:	e3100206 	tst	r0, #1610612736	; 0x60000000
    a0f0:	1affff4f 	bne	9e34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0xb4>
    a0f4:	e59f21bc 	ldr	r2, [pc, #444]	; a2b8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x538>
    a0f8:	e59f1198 	ldr	r1, [pc, #408]	; a298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    a0fc:	e59f01b8 	ldr	r0, [pc, #440]	; a2bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x53c>
    a100:	eb0067ef 	bl	240c4 <assertion_failed>
    a104:	eb0070e1 	bl	26490 <CLogger::Get()>
    a108:	e58da000 	str	sl, [sp]
    a10c:	e59f317c 	ldr	r3, [pc, #380]	; a290 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    a110:	e3a02001 	mov	r2, #1
    a114:	e59f1170 	ldr	r1, [pc, #368]	; a28c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    a118:	eb007019 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a11c:	e3a01000 	mov	r1, #0
    a120:	e1a00009 	mov	r0, r9
    a124:	eb002723 	bl	13db8 <CUSBRequest::SetStatus(int)>
    a128:	eaffffcc 	b	a060 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    a12c:	e1a01006 	mov	r1, r6
    a130:	e1a00005 	mov	r0, r5
    a134:	ebfffc86 	bl	9354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a138:	e1a00004 	mov	r0, r4
    a13c:	eb000aeb 	bl	ccf0 <CDWHCITransferStageData::IsStatusStage() const>
    a140:	e3500000 	cmp	r0, #0
    a144:	0a000040 	beq	a24c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4cc>
    a148:	e3a01001 	mov	r1, #1
    a14c:	e1a00009 	mov	r0, r9
    a150:	eb002718 	bl	13db8 <CUSBRequest::SetStatus(int)>
    a154:	eaffffc4 	b	a06c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2ec>
    a158:	e3a01001 	mov	r1, #1
    a15c:	e1a00004 	mov	r0, r4
    a160:	eb0009ad 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    a164:	e1a0100a 	mov	r1, sl
    a168:	e1a00004 	mov	r0, r4
    a16c:	eb00099e 	bl	c7ec <CDWHCITransferStageData::SetSplitComplete(bool)>
    a170:	e1a00004 	mov	r0, r4
    a174:	eb000b67 	bl	cf18 <CDWHCITransferStageData::GetFrameScheduler() const>
    a178:	e5903000 	ldr	r3, [r0]
    a17c:	e5933008 	ldr	r3, [r3, #8]
    a180:	e12fff33 	blx	r3
    a184:	e1a01004 	mov	r1, r4
    a188:	e1a00005 	mov	r0, r5
    a18c:	ebfffd83 	bl	97a0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a190:	eaffff58 	b	9ef8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    a194:	e1a00004 	mov	r0, r4
    a198:	eb0009ab 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    a19c:	e3500000 	cmp	r0, #0
    a1a0:	0affffa7 	beq	a044 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2c4>
    a1a4:	e1a00004 	mov	r0, r4
    a1a8:	eb000b3f 	bl	ceac <CDWHCITransferStageData::IsTimeout() const>
    a1ac:	e3500000 	cmp	r0, #0
    a1b0:	1affffd9 	bne	a11c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x39c>
    a1b4:	e3a01003 	mov	r1, #3
    a1b8:	e1a00004 	mov	r0, r4
    a1bc:	eb000996 	bl	c81c <CDWHCITransferStageData::SetState(unsigned int)>
    a1c0:	e1a00009 	mov	r0, r9
    a1c4:	eb0026f0 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    a1c8:	eb00119d 	bl	e844 <CUSBEndpoint::GetInterval() const>
    a1cc:	e3a03064 	mov	r3, #100	; 0x64
    a1d0:	e0030093 	mul	r3, r3, r0
    a1d4:	e59f10e4 	ldr	r1, [pc, #228]	; a2c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x540>
    a1d8:	e5950008 	ldr	r0, [r5, #8]
    a1dc:	e0813391 	umull	r3, r1, r1, r3
    a1e0:	e58d5000 	str	r5, [sp]
    a1e4:	e1a03004 	mov	r3, r4
    a1e8:	e1a01321 	lsr	r1, r1, #6
    a1ec:	e59f20d0 	ldr	r2, [pc, #208]	; a2c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x544>
    a1f0:	eb007bb2 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    a1f4:	eaffff3f 	b	9ef8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    a1f8:	e1a00004 	mov	r0, r4
    a1fc:	eb000992 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    a200:	e250a000 	subs	sl, r0, #0
    a204:	0affffd3 	beq	a158 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3d8>
    a208:	e1a00004 	mov	r0, r4
    a20c:	eb000b26 	bl	ceac <CDWHCITransferStageData::IsTimeout() const>
    a210:	e3500000 	cmp	r0, #0
    a214:	0affffe6 	beq	a1b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x434>
    a218:	e1a01006 	mov	r1, r6
    a21c:	e1a00005 	mov	r0, r5
    a220:	ebfffc4b 	bl	9354 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a224:	e1a01008 	mov	r1, r8
    a228:	e1a00009 	mov	r0, r9
    a22c:	eb0026e1 	bl	13db8 <CUSBRequest::SetStatus(int)>
    a230:	e1a00004 	mov	r0, r4
    a234:	eb0008f2 	bl	c604 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a238:	e1a00004 	mov	r0, r4
    a23c:	e3a01054 	mov	r1, #84	; 0x54
    a240:	eb000b4c 	bl	cf78 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a244:	e5878018 	str	r8, [r7, #24]
    a248:	eaffff5a 	b	9fb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x238>
    a24c:	e1a00004 	mov	r0, r4
    a250:	eb000b10 	bl	ce98 <CDWHCITransferStageData::GetResultLen() const>
    a254:	e1a01000 	mov	r1, r0
    a258:	e1a00009 	mov	r0, r9
    a25c:	eb0026d7 	bl	13dc0 <CUSBRequest::SetResultLen(unsigned int)>
    a260:	eaffffb8 	b	a148 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3c8>
    a264:	e1a00004 	mov	r0, r4
    a268:	eb000b0a 	bl	ce98 <CDWHCITransferStageData::GetResultLen() const>
    a26c:	e1a01000 	mov	r1, r0
    a270:	e1a00009 	mov	r0, r9
    a274:	eb0026d1 	bl	13dc0 <CUSBRequest::SetResultLen(unsigned int)>
    a278:	eaffff75 	b	a054 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d4>
    a27c:	20980510 	.word	0x20980510
    a280:	20980508 	.word	0x20980508
    a284:	000003ff 	.word	0x000003ff
    a288:	0000078c 	.word	0x0000078c
    a28c:	0004088c 	.word	0x0004088c
    a290:	00040ad8 	.word	0x00040ad8
    a294:	000003eb 	.word	0x000003eb
    a298:	000408b0 	.word	0x000408b0
    a29c:	000414b4 	.word	0x000414b4
    a2a0:	000007dc 	.word	0x000007dc
    a2a4:	000003c1 	.word	0x000003c1
    a2a8:	00040920 	.word	0x00040920
    a2ac:	000003c3 	.word	0x000003c3
    a2b0:	000409ac 	.word	0x000409ac
    a2b4:	000004cc 	.word	0x000004cc
    a2b8:	000003e3 	.word	0x000003e3
    a2bc:	00040a60 	.word	0x00040a60
    a2c0:	10624dd3 	.word	0x10624dd3
    a2c4:	00009974 	.word	0x00009974

0000a2c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    a2c8:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a2cc:	e3530000 	cmp	r3, #0
    a2d0:	112fff1e 	bxne	lr
    a2d4:	eafffea9 	b	9d80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>

0000a2d8 <CDWHCIDevice::InterruptHandler()>:
    a2d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a2dc:	e1a07000 	mov	r7, r0
    a2e0:	e24dd028 	sub	sp, sp, #40	; 0x28
    a2e4:	e3a04000 	mov	r4, #0
    a2e8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    a2ec:	e59f10e8 	ldr	r1, [pc, #232]	; a3dc <CDWHCIDevice::InterruptHandler()+0x104>
    a2f0:	e28d0004 	add	r0, sp, #4
    a2f4:	eb000761 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a2f8:	e28d0004 	add	r0, sp, #4
    a2fc:	eb000768 	bl	c0a4 <CDWHCIRegister::Read()>
    a300:	e28d0004 	add	r0, sp, #4
    a304:	eb00077b 	bl	c0f8 <CDWHCIRegister::Get() const>
    a308:	e3100402 	tst	r0, #33554432	; 0x2000000
    a30c:	1a000007 	bne	a330 <CDWHCIDevice::InterruptHandler()+0x58>
    a310:	e28d0004 	add	r0, sp, #4
    a314:	eb000769 	bl	c0c0 <CDWHCIRegister::Write()>
    a318:	e3a03000 	mov	r3, #0
    a31c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a320:	e28d0004 	add	r0, sp, #4
    a324:	eb00075d 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    a328:	e28dd028 	add	sp, sp, #40	; 0x28
    a32c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a330:	e59f10a8 	ldr	r1, [pc, #168]	; a3e0 <CDWHCIDevice::InterruptHandler()+0x108>
    a334:	e28d0010 	add	r0, sp, #16
    a338:	eb000750 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a33c:	e28d0010 	add	r0, sp, #16
    a340:	eb000757 	bl	c0a4 <CDWHCIRegister::Read()>
    a344:	e28d0010 	add	r0, sp, #16
    a348:	eb00075c 	bl	c0c0 <CDWHCIRegister::Write()>
    a34c:	e597300c 	ldr	r3, [r7, #12]
    a350:	e1530004 	cmp	r3, r4
    a354:	0a000019 	beq	a3c0 <CDWHCIDevice::InterruptHandler()+0xe8>
    a358:	e3a05001 	mov	r5, #1
    a35c:	e1a08004 	mov	r8, r4
    a360:	e59f607c 	ldr	r6, [pc, #124]	; a3e4 <CDWHCIDevice::InterruptHandler()+0x10c>
    a364:	ea000005 	b	a380 <CDWHCIDevice::InterruptHandler()+0xa8>
    a368:	e597300c 	ldr	r3, [r7, #12]
    a36c:	e2844001 	add	r4, r4, #1
    a370:	e1530004 	cmp	r3, r4
    a374:	e1a05085 	lsl	r5, r5, #1
    a378:	e2866020 	add	r6, r6, #32
    a37c:	9a00000f 	bls	a3c0 <CDWHCIDevice::InterruptHandler()+0xe8>
    a380:	e28d0010 	add	r0, sp, #16
    a384:	eb00075b 	bl	c0f8 <CDWHCIRegister::Get() const>
    a388:	e1100005 	tst	r0, r5
    a38c:	0afffff5 	beq	a368 <CDWHCIDevice::InterruptHandler()+0x90>
    a390:	e1a02008 	mov	r2, r8
    a394:	e1a01006 	mov	r1, r6
    a398:	e28d001c 	add	r0, sp, #28
    a39c:	eb00073b 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a3a0:	e28d001c 	add	r0, sp, #28
    a3a4:	eb000745 	bl	c0c0 <CDWHCIRegister::Write()>
    a3a8:	e5d73081 	ldrb	r3, [r7, #129]	; 0x81
    a3ac:	e3530000 	cmp	r3, #0
    a3b0:	0a000005 	beq	a3cc <CDWHCIDevice::InterruptHandler()+0xf4>
    a3b4:	e28d001c 	add	r0, sp, #28
    a3b8:	eb000738 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    a3bc:	eaffffe9 	b	a368 <CDWHCIDevice::InterruptHandler()+0x90>
    a3c0:	e28d0010 	add	r0, sp, #16
    a3c4:	eb000735 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    a3c8:	eaffffd0 	b	a310 <CDWHCIDevice::InterruptHandler()+0x38>
    a3cc:	e1a01004 	mov	r1, r4
    a3d0:	e1a00007 	mov	r0, r7
    a3d4:	ebfffe69 	bl	9d80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>
    a3d8:	eafffff5 	b	a3b4 <CDWHCIDevice::InterruptHandler()+0xdc>
    a3dc:	20980014 	.word	0x20980014
    a3e0:	20980414 	.word	0x20980414
    a3e4:	2098050c 	.word	0x2098050c

0000a3e8 <CDWHCIDevice::InterruptStub(void*)>:
    a3e8:	e3500000 	cmp	r0, #0
    a3ec:	0a000000 	beq	a3f4 <CDWHCIDevice::InterruptStub(void*)+0xc>
    a3f0:	eaffffb8 	b	a2d8 <CDWHCIDevice::InterruptHandler()>
    a3f4:	e92d4010 	push	{r4, lr}
    a3f8:	e59f2008 	ldr	r2, [pc, #8]	; a408 <CDWHCIDevice::InterruptStub(void*)+0x20>
    a3fc:	e59f1008 	ldr	r1, [pc, #8]	; a40c <CDWHCIDevice::InterruptStub(void*)+0x24>
    a400:	e59f0008 	ldr	r0, [pc, #8]	; a410 <CDWHCIDevice::InterruptStub(void*)+0x28>
    a404:	eb00672e 	bl	240c4 <assertion_failed>
    a408:	00000532 	.word	0x00000532
    a40c:	000408b0 	.word	0x000408b0
    a410:	000408c0 	.word	0x000408c0

0000a414 <CDWHCIDevice::AllocateWaitBlock()>:
    a414:	e92d4070 	push	{r4, r5, r6, lr}
    a418:	e1a05000 	mov	r5, r0
    a41c:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    a420:	e3500000 	cmp	r0, #0
    a424:	1a000014 	bne	a47c <CDWHCIDevice::AllocateWaitBlock()+0x68>
    a428:	e3a04000 	mov	r4, #0
    a42c:	e3a03001 	mov	r3, #1
    a430:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    a434:	e1120003 	tst	r2, r3
    a438:	0a000007 	beq	a45c <CDWHCIDevice::AllocateWaitBlock()+0x48>
    a43c:	e2844001 	add	r4, r4, #1
    a440:	e3540010 	cmp	r4, #16
    a444:	e1a03083 	lsl	r3, r3, #1
    a448:	1afffff8 	bne	a430 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    a44c:	e3500000 	cmp	r0, #0
    a450:	1a000006 	bne	a470 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    a454:	e1a00004 	mov	r0, r4
    a458:	e8bd8070 	pop	{r4, r5, r6, pc}
    a45c:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    a460:	e3500000 	cmp	r0, #0
    a464:	e1823003 	orr	r3, r2, r3
    a468:	e585306c 	str	r3, [r5, #108]	; 0x6c
    a46c:	0afffff8 	beq	a454 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    a470:	eb00848c 	bl	2b6a8 <LeaveCritical>
    a474:	e1a00004 	mov	r0, r4
    a478:	e8bd8070 	pop	{r4, r5, r6, pc}
    a47c:	eb00845e 	bl	2b5fc <EnterCritical>
    a480:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    a484:	eaffffe7 	b	a428 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000a488 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    a488:	e351000f 	cmp	r1, #15
    a48c:	e92d4070 	push	{r4, r5, r6, lr}
    a490:	8a000012 	bhi	a4e0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    a494:	e3a05001 	mov	r5, #1
    a498:	e1a04000 	mov	r4, r0
    a49c:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    a4a0:	e1a05115 	lsl	r5, r5, r1
    a4a4:	e3500000 	cmp	r0, #0
    a4a8:	1a00000a 	bne	a4d8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    a4ac:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    a4b0:	e1150003 	tst	r5, r3
    a4b4:	0a00000d 	beq	a4f0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    a4b8:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    a4bc:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    a4c0:	e1c15005 	bic	r5, r1, r5
    a4c4:	e3530000 	cmp	r3, #0
    a4c8:	e584506c 	str	r5, [r4, #108]	; 0x6c
    a4cc:	08bd8070 	popeq	{r4, r5, r6, pc}
    a4d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a4d4:	ea008473 	b	2b6a8 <LeaveCritical>
    a4d8:	eb008447 	bl	2b5fc <EnterCritical>
    a4dc:	eafffff2 	b	a4ac <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    a4e0:	e59f2018 	ldr	r2, [pc, #24]	; a500 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    a4e4:	e59f1018 	ldr	r1, [pc, #24]	; a504 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    a4e8:	e59f0018 	ldr	r0, [pc, #24]	; a508 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    a4ec:	eb0066f4 	bl	240c4 <assertion_failed>
    a4f0:	e59f2014 	ldr	r2, [pc, #20]	; a50c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    a4f4:	e59f1008 	ldr	r1, [pc, #8]	; a504 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    a4f8:	e59f0010 	ldr	r0, [pc, #16]	; a510 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    a4fc:	eb0066f0 	bl	240c4 <assertion_failed>
    a500:	0000059d 	.word	0x0000059d
    a504:	000408b0 	.word	0x000408b0
    a508:	000408cc 	.word	0x000408cc
    a50c:	000005a2 	.word	0x000005a2
    a510:	00040afc 	.word	0x00040afc

0000a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    a514:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a518:	e24dd00c 	sub	sp, sp, #12
    a51c:	e1a07001 	mov	r7, r1
    a520:	e1a08002 	mov	r8, r2
    a524:	e1a09003 	mov	r9, r3
    a528:	e1a06000 	mov	r6, r0
    a52c:	ebffffb8 	bl	a414 <CDWHCIDevice::AllocateWaitBlock()>
    a530:	e350000f 	cmp	r0, #15
    a534:	8a000023 	bhi	a5c8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    a538:	e3570000 	cmp	r7, #0
    a53c:	0a000030 	beq	a604 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    a540:	e1a05000 	mov	r5, r0
    a544:	e1a03006 	mov	r3, r6
    a548:	e1a02000 	mov	r2, r0
    a54c:	e59f10c0 	ldr	r1, [pc, #192]	; a614 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    a550:	e1a00007 	mov	r0, r7
    a554:	e0864005 	add	r4, r6, r5
    a558:	eb00264d 	bl	13e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    a55c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    a560:	e3530000 	cmp	r3, #0
    a564:	1a00001b 	bne	a5d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    a568:	e3a01001 	mov	r1, #1
    a56c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a570:	e1a02008 	mov	r2, r8
    a574:	e58d3000 	str	r3, [sp]
    a578:	e1a00006 	mov	r0, r6
    a57c:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    a580:	e1a03009 	mov	r3, r9
    a584:	e1a01007 	mov	r1, r7
    a588:	ebfffd67 	bl	9b2c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a58c:	e2508000 	subs	r8, r0, #0
    a590:	0a000014 	beq	a5e8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    a594:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    a598:	e3530000 	cmp	r3, #0
    a59c:	1afffffc 	bne	a594 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    a5a0:	e1a01005 	mov	r1, r5
    a5a4:	e1a00006 	mov	r0, r6
    a5a8:	ebffffb6 	bl	a488 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a5ac:	e1a00007 	mov	r0, r7
    a5b0:	eb002604 	bl	13dc8 <CUSBRequest::GetStatus() const>
    a5b4:	e2908000 	adds	r8, r0, #0
    a5b8:	13a08001 	movne	r8, #1
    a5bc:	e1a00008 	mov	r0, r8
    a5c0:	e28dd00c 	add	sp, sp, #12
    a5c4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a5c8:	e3a08000 	mov	r8, #0
    a5cc:	e1a00008 	mov	r0, r8
    a5d0:	e28dd00c 	add	sp, sp, #12
    a5d4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a5d8:	e59f2038 	ldr	r2, [pc, #56]	; a618 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    a5dc:	e59f1038 	ldr	r1, [pc, #56]	; a61c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    a5e0:	e59f0038 	ldr	r0, [pc, #56]	; a620 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    a5e4:	eb0066b6 	bl	240c4 <assertion_failed>
    a5e8:	e1a00006 	mov	r0, r6
    a5ec:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    a5f0:	e1a01005 	mov	r1, r5
    a5f4:	ebffffa3 	bl	a488 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a5f8:	e1a00008 	mov	r0, r8
    a5fc:	e28dd00c 	add	sp, sp, #12
    a600:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a604:	e3a02e29 	mov	r2, #656	; 0x290
    a608:	e59f100c 	ldr	r1, [pc, #12]	; a61c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    a60c:	e59f0010 	ldr	r0, [pc, #16]	; a624 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    a610:	eb0066ab 	bl	240c4 <assertion_failed>
    a614:	00008f18 	.word	0x00008f18
    a618:	00000293 	.word	0x00000293
    a61c:	000408b0 	.word	0x000408b0
    a620:	00040b24 	.word	0x00040b24
    a624:	000409ac 	.word	0x000409ac

0000a628 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    a628:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a62c:	e21330ff 	ands	r3, r3, #255	; 0xff
    a630:	1a000027 	bne	a6d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>
    a634:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a638:	e1a06002 	mov	r6, r2
    a63c:	e24dd00c 	sub	sp, sp, #12
    a640:	e1a04001 	mov	r4, r1
    a644:	e1a05000 	mov	r5, r0
    a648:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a64c:	e3510000 	cmp	r1, #0
    a650:	0a000067 	beq	a7f4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    a654:	e1a01003 	mov	r1, r3
    a658:	e1a00004 	mov	r0, r4
    a65c:	eb0025d5 	bl	13db8 <CUSBRequest::SetStatus(int)>
    a660:	e1a00004 	mov	r0, r4
    a664:	eb0025c8 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    a668:	eb00106c 	bl	e820 <CUSBEndpoint::GetType() const>
    a66c:	e3500000 	cmp	r0, #0
    a670:	1a000019 	bne	a6dc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb4>
    a674:	e3560000 	cmp	r6, #0
    a678:	1a000061 	bne	a804 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    a67c:	e1a00004 	mov	r0, r4
    a680:	eb0025de 	bl	13e00 <CUSBRequest::GetSetupData()>
    a684:	e3500000 	cmp	r0, #0
    a688:	0a000061 	beq	a814 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    a68c:	e1d030d0 	ldrsb	r3, [r0]
    a690:	e1a00004 	mov	r0, r4
    a694:	e3530000 	cmp	r3, #0
    a698:	ba000039 	blt	a784 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    a69c:	eb0025fa 	bl	13e8c <CUSBRequest::GetBufLen() const>
    a6a0:	e2507000 	subs	r7, r0, #0
    a6a4:	0a000025 	beq	a740 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    a6a8:	e58d6000 	str	r6, [sp]
    a6ac:	e1a03006 	mov	r3, r6
    a6b0:	e1a02006 	mov	r2, r6
    a6b4:	e1a01004 	mov	r1, r4
    a6b8:	e1a00005 	mov	r0, r5
    a6bc:	ebffff94 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a6c0:	e3500000 	cmp	r0, #0
    a6c4:	1a000056 	bne	a824 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1fc>
    a6c8:	e3a00000 	mov	r0, #0
    a6cc:	e28dd00c 	add	sp, sp, #12
    a6d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a6d4:	e3a00000 	mov	r0, #0
    a6d8:	e12fff1e 	bx	lr
    a6dc:	e1a00004 	mov	r0, r4
    a6e0:	eb0025a9 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    a6e4:	eb00104d 	bl	e820 <CUSBEndpoint::GetType() const>
    a6e8:	e3500001 	cmp	r0, #1
    a6ec:	1a000057 	bne	a850 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x228>
    a6f0:	e1a00004 	mov	r0, r4
    a6f4:	eb0025e4 	bl	13e8c <CUSBRequest::GetBufLen() const>
    a6f8:	e3500000 	cmp	r0, #0
    a6fc:	0a00005c 	beq	a874 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    a700:	e1a00004 	mov	r0, r4
    a704:	eb0025a0 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    a708:	eb001046 	bl	e828 <CUSBEndpoint::IsDirectionIn() const>
    a70c:	e58d6000 	str	r6, [sp]
    a710:	e1a02000 	mov	r2, r0
    a714:	e1a01004 	mov	r1, r4
    a718:	e1a00005 	mov	r0, r5
    a71c:	e3a03000 	mov	r3, #0
    a720:	ebffff7b 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a724:	e3500000 	cmp	r0, #0
    a728:	0affffe6 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a72c:	e3a03000 	mov	r3, #0
    a730:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a734:	e3a00001 	mov	r0, #1
    a738:	e28dd00c 	add	sp, sp, #12
    a73c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a740:	e1a03007 	mov	r3, r7
    a744:	e58d7000 	str	r7, [sp]
    a748:	e1a02007 	mov	r2, r7
    a74c:	e1a01004 	mov	r1, r4
    a750:	e1a00005 	mov	r0, r5
    a754:	ebffff6e 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a758:	e3500000 	cmp	r0, #0
    a75c:	13a03001 	movne	r3, #1
    a760:	158d7000 	strne	r7, [sp]
    a764:	0affffd7 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a768:	e1a01004 	mov	r1, r4
    a76c:	e1a00005 	mov	r0, r5
    a770:	e1a02003 	mov	r2, r3
    a774:	ebffff66 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a778:	e3500000 	cmp	r0, #0
    a77c:	1affffea 	bne	a72c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    a780:	eaffffd0 	b	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a784:	eb0025c0 	bl	13e8c <CUSBRequest::GetBufLen() const>
    a788:	e3500000 	cmp	r0, #0
    a78c:	0a00003c 	beq	a884 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    a790:	e58d6000 	str	r6, [sp]
    a794:	e1a03006 	mov	r3, r6
    a798:	e1a02006 	mov	r2, r6
    a79c:	e1a01004 	mov	r1, r4
    a7a0:	e1a00005 	mov	r0, r5
    a7a4:	ebffff5a 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a7a8:	e3500000 	cmp	r0, #0
    a7ac:	0affffc5 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a7b0:	e58d6000 	str	r6, [sp]
    a7b4:	e1a03006 	mov	r3, r6
    a7b8:	e3a02001 	mov	r2, #1
    a7bc:	e1a01004 	mov	r1, r4
    a7c0:	e1a00005 	mov	r0, r5
    a7c4:	ebffff52 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a7c8:	e3500000 	cmp	r0, #0
    a7cc:	0affffbd 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a7d0:	e58d6000 	str	r6, [sp]
    a7d4:	e1a02006 	mov	r2, r6
    a7d8:	e1a01004 	mov	r1, r4
    a7dc:	e1a00005 	mov	r0, r5
    a7e0:	e3a03001 	mov	r3, #1
    a7e4:	ebffff4a 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a7e8:	e3500000 	cmp	r0, #0
    a7ec:	0affffb5 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a7f0:	eaffffcd 	b	a72c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    a7f4:	e3a020cf 	mov	r2, #207	; 0xcf
    a7f8:	e59f1094 	ldr	r1, [pc, #148]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a7fc:	e59f0094 	ldr	r0, [pc, #148]	; a898 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    a800:	eb00662f 	bl	240c4 <assertion_failed>
    a804:	e3a020d5 	mov	r2, #213	; 0xd5
    a808:	e59f1084 	ldr	r1, [pc, #132]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a80c:	e59f0088 	ldr	r0, [pc, #136]	; a89c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    a810:	eb00662b 	bl	240c4 <assertion_failed>
    a814:	e3a020d8 	mov	r2, #216	; 0xd8
    a818:	e59f1074 	ldr	r1, [pc, #116]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a81c:	e59f007c 	ldr	r0, [pc, #124]	; a8a0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    a820:	eb006627 	bl	240c4 <assertion_failed>
    a824:	e58d6000 	str	r6, [sp]
    a828:	e1a03006 	mov	r3, r6
    a82c:	e1a02006 	mov	r2, r6
    a830:	e1a01004 	mov	r1, r4
    a834:	e1a00005 	mov	r0, r5
    a838:	ebffff35 	bl	a514 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a83c:	e3500000 	cmp	r0, #0
    a840:	0affffa0 	beq	a6c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a844:	e3a03001 	mov	r3, #1
    a848:	e58d6000 	str	r6, [sp]
    a84c:	eaffffc5 	b	a768 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x140>
    a850:	e1a00004 	mov	r0, r4
    a854:	eb00254c 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    a858:	eb000ff0 	bl	e820 <CUSBEndpoint::GetType() const>
    a85c:	e3500002 	cmp	r0, #2
    a860:	0affffa2 	beq	a6f0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc8>
    a864:	e3a020fd 	mov	r2, #253	; 0xfd
    a868:	e59f1024 	ldr	r1, [pc, #36]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a86c:	e59f0030 	ldr	r0, [pc, #48]	; a8a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x27c>
    a870:	eb006613 	bl	240c4 <assertion_failed>
    a874:	e3a020fe 	mov	r2, #254	; 0xfe
    a878:	e59f1014 	ldr	r1, [pc, #20]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a87c:	e59f0024 	ldr	r0, [pc, #36]	; a8a8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    a880:	eb00660f 	bl	240c4 <assertion_failed>
    a884:	e3a020dc 	mov	r2, #220	; 0xdc
    a888:	e59f1004 	ldr	r1, [pc, #4]	; a894 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a88c:	e59f0014 	ldr	r0, [pc, #20]	; a8a8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    a890:	eb00660b 	bl	240c4 <assertion_failed>
    a894:	000408b0 	.word	0x000408b0
    a898:	000409ac 	.word	0x000409ac
    a89c:	00040b3c 	.word	0x00040b3c
    a8a0:	00040b5c 	.word	0x00040b5c
    a8a4:	000409d4 	.word	0x000409d4
    a8a8:	00040a48 	.word	0x00040a48

0000a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    a8ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a8b0:	e2516000 	subs	r6, r1, #0
    a8b4:	e59d4020 	ldr	r4, [sp, #32]
    a8b8:	0a00001f 	beq	a93c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x90>
    a8bc:	e3520000 	cmp	r2, #0
    a8c0:	e1a05002 	mov	r5, r2
    a8c4:	0a000020 	beq	a94c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa0>
    a8c8:	e3540000 	cmp	r4, #0
    a8cc:	11a09003 	movne	r9, r3
    a8d0:	13a08001 	movne	r8, #1
    a8d4:	11a07000 	movne	r7, r0
    a8d8:	1029a008 	eorne	sl, r9, r8
    a8dc:	1a000004 	bne	a8f4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x48>
    a8e0:	ea00001d 	b	a95c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb0>
    a8e4:	e1a00008 	mov	r0, r8
    a8e8:	eb007b7b 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    a8ec:	e2544001 	subs	r4, r4, #1
    a8f0:	0a00000f 	beq	a934 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x88>
    a8f4:	e1a00006 	mov	r0, r6
    a8f8:	eb0005e9 	bl	c0a4 <CDWHCIRegister::Read()>
    a8fc:	e1150000 	tst	r5, r0
    a900:	11a0300a 	movne	r3, sl
    a904:	01a03009 	moveq	r3, r9
    a908:	e3530000 	cmp	r3, #0
    a90c:	0a000006 	beq	a92c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x80>
    a910:	e5973008 	ldr	r3, [r7, #8]
    a914:	e3530000 	cmp	r3, #0
    a918:	1afffff1 	bne	a8e4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x38>
    a91c:	e59f2048 	ldr	r2, [pc, #72]	; a96c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    a920:	e59f1048 	ldr	r1, [pc, #72]	; a970 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    a924:	e59f0048 	ldr	r0, [pc, #72]	; a974 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    a928:	eb0065e5 	bl	240c4 <assertion_failed>
    a92c:	e3a00001 	mov	r0, #1
    a930:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a934:	e1a00004 	mov	r0, r4
    a938:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a93c:	e59f2034 	ldr	r2, [pc, #52]	; a978 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    a940:	e59f1028 	ldr	r1, [pc, #40]	; a970 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    a944:	e59f0030 	ldr	r0, [pc, #48]	; a97c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    a948:	eb0065dd 	bl	240c4 <assertion_failed>
    a94c:	e59f202c 	ldr	r2, [pc, #44]	; a980 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    a950:	e59f1018 	ldr	r1, [pc, #24]	; a970 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    a954:	e59f0028 	ldr	r0, [pc, #40]	; a984 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    a958:	eb0065d9 	bl	240c4 <assertion_failed>
    a95c:	e59f2024 	ldr	r2, [pc, #36]	; a988 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    a960:	e59f1008 	ldr	r1, [pc, #8]	; a970 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    a964:	e59f0020 	ldr	r0, [pc, #32]	; a98c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    a968:	eb0065d5 	bl	240c4 <assertion_failed>
    a96c:	000005b3 	.word	0x000005b3
    a970:	000408b0 	.word	0x000408b0
    a974:	00040910 	.word	0x00040910
    a978:	000005ad 	.word	0x000005ad
    a97c:	00040b68 	.word	0x00040b68
    a980:	000005ae 	.word	0x000005ae
    a984:	00040b78 	.word	0x00040b78
    a988:	000005af 	.word	0x000005af
    a98c:	00040b84 	.word	0x00040b84

0000a990 <CDWHCIDevice::EnableRootPort()>:
    a990:	e92d4030 	push	{r4, r5, lr}
    a994:	e24dd01c 	sub	sp, sp, #28
    a998:	e1a05000 	mov	r5, r0
    a99c:	eb006c7a 	bl	25b8c <CKernelOptions::Get()>
    a9a0:	e3500000 	cmp	r0, #0
    a9a4:	0a00002c 	beq	aa5c <CDWHCIDevice::EnableRootPort()+0xcc>
    a9a8:	eb006c6a 	bl	25b58 <CKernelOptions::GetUSBPowerDelay() const>
    a9ac:	e2504000 	subs	r4, r0, #0
    a9b0:	0a000029 	beq	aa5c <CDWHCIDevice::EnableRootPort()+0xcc>
    a9b4:	e59f10a8 	ldr	r1, [pc, #168]	; aa64 <CDWHCIDevice::EnableRootPort()+0xd4>
    a9b8:	e28d000c 	add	r0, sp, #12
    a9bc:	eb0005af 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9c0:	e3a03001 	mov	r3, #1
    a9c4:	e58d4000 	str	r4, [sp]
    a9c8:	e1a00005 	mov	r0, r5
    a9cc:	e28d100c 	add	r1, sp, #12
    a9d0:	e1a02003 	mov	r2, r3
    a9d4:	ebffffb4 	bl	a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a9d8:	e2504000 	subs	r4, r0, #0
    a9dc:	0a000019 	beq	aa48 <CDWHCIDevice::EnableRootPort()+0xb8>
    a9e0:	e3a00064 	mov	r0, #100	; 0x64
    a9e4:	eb007b3c 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    a9e8:	e28d000c 	add	r0, sp, #12
    a9ec:	eb0005ac 	bl	c0a4 <CDWHCIRegister::Read()>
    a9f0:	e3e0102e 	mvn	r1, #46	; 0x2e
    a9f4:	e28d000c 	add	r0, sp, #12
    a9f8:	eb0005dd 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    a9fc:	e3a01c01 	mov	r1, #256	; 0x100
    aa00:	e28d000c 	add	r0, sp, #12
    aa04:	eb0005e8 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    aa08:	e28d000c 	add	r0, sp, #12
    aa0c:	eb0005ab 	bl	c0c0 <CDWHCIRegister::Write()>
    aa10:	e3a00032 	mov	r0, #50	; 0x32
    aa14:	eb007b30 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    aa18:	e28d000c 	add	r0, sp, #12
    aa1c:	eb0005a0 	bl	c0a4 <CDWHCIRegister::Read()>
    aa20:	e3e0102e 	mvn	r1, #46	; 0x2e
    aa24:	e28d000c 	add	r0, sp, #12
    aa28:	eb0005d1 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    aa2c:	e3e01c01 	mvn	r1, #256	; 0x100
    aa30:	e28d000c 	add	r0, sp, #12
    aa34:	eb0005ce 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    aa38:	e28d000c 	add	r0, sp, #12
    aa3c:	eb00059f 	bl	c0c0 <CDWHCIRegister::Write()>
    aa40:	e3a00014 	mov	r0, #20
    aa44:	eb007b24 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    aa48:	e28d000c 	add	r0, sp, #12
    aa4c:	eb000593 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    aa50:	e1a00004 	mov	r0, r4
    aa54:	e28dd01c 	add	sp, sp, #28
    aa58:	e8bd8030 	pop	{r4, r5, pc}
    aa5c:	e59f4004 	ldr	r4, [pc, #4]	; aa68 <CDWHCIDevice::EnableRootPort()+0xd8>
    aa60:	eaffffd3 	b	a9b4 <CDWHCIDevice::EnableRootPort()+0x24>
    aa64:	20980440 	.word	0x20980440
    aa68:	000001fe 	.word	0x000001fe

0000aa6c <CDWHCIDevice::Reset()>:
    aa6c:	e92d4030 	push	{r4, r5, lr}
    aa70:	e1a04000 	mov	r4, r0
    aa74:	e3a05064 	mov	r5, #100	; 0x64
    aa78:	e24dd01c 	sub	sp, sp, #28
    aa7c:	e3a02000 	mov	r2, #0
    aa80:	e59f1080 	ldr	r1, [pc, #128]	; ab08 <CDWHCIDevice::Reset()+0x9c>
    aa84:	e28d000c 	add	r0, sp, #12
    aa88:	eb000580 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aa8c:	e28d100c 	add	r1, sp, #12
    aa90:	e1a00004 	mov	r0, r4
    aa94:	e58d5000 	str	r5, [sp]
    aa98:	e3a03001 	mov	r3, #1
    aa9c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    aaa0:	ebffff81 	bl	a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    aaa4:	e3500000 	cmp	r0, #0
    aaa8:	1a000005 	bne	aac4 <CDWHCIDevice::Reset()+0x58>
    aaac:	e3a04000 	mov	r4, #0
    aab0:	e28d000c 	add	r0, sp, #12
    aab4:	eb000579 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    aab8:	e1a00004 	mov	r0, r4
    aabc:	e28dd01c 	add	sp, sp, #28
    aac0:	e8bd8030 	pop	{r4, r5, pc}
    aac4:	e3a01001 	mov	r1, #1
    aac8:	e28d000c 	add	r0, sp, #12
    aacc:	eb0005b6 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    aad0:	e28d000c 	add	r0, sp, #12
    aad4:	eb000579 	bl	c0c0 <CDWHCIRegister::Write()>
    aad8:	e3a0300a 	mov	r3, #10
    aadc:	e1a00004 	mov	r0, r4
    aae0:	e58d3000 	str	r3, [sp]
    aae4:	e3a02001 	mov	r2, #1
    aae8:	e3a03000 	mov	r3, #0
    aaec:	e28d100c 	add	r1, sp, #12
    aaf0:	ebffff6d 	bl	a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    aaf4:	e2504000 	subs	r4, r0, #0
    aaf8:	0affffeb 	beq	aaac <CDWHCIDevice::Reset()+0x40>
    aafc:	e1a00005 	mov	r0, r5
    ab00:	eb007af5 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    ab04:	eaffffe9 	b	aab0 <CDWHCIDevice::Reset()+0x44>
    ab08:	20980010 	.word	0x20980010

0000ab0c <CDWHCIDevice::InitCore()>:
    ab0c:	e92d4030 	push	{r4, r5, lr}
    ab10:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ab14:	e59f1234 	ldr	r1, [pc, #564]	; ad50 <CDWHCIDevice::InitCore()+0x244>
    ab18:	e1a04000 	mov	r4, r0
    ab1c:	e28d0004 	add	r0, sp, #4
    ab20:	eb000556 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab24:	e28d0004 	add	r0, sp, #4
    ab28:	eb00055d 	bl	c0a4 <CDWHCIRegister::Read()>
    ab2c:	eb006c16 	bl	25b8c <CKernelOptions::Get()>
    ab30:	eb006c0a 	bl	25b60 <CKernelOptions::GetUSBFullSpeed() const>
    ab34:	e3500000 	cmp	r0, #0
    ab38:	1a000067 	bne	acdc <CDWHCIDevice::InitCore()+0x1d0>
    ab3c:	e3e01601 	mvn	r1, #1048576	; 0x100000
    ab40:	e28d0004 	add	r0, sp, #4
    ab44:	eb00058a 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ab48:	e3e01501 	mvn	r1, #4194304	; 0x400000
    ab4c:	e28d0004 	add	r0, sp, #4
    ab50:	eb000587 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ab54:	e28d0004 	add	r0, sp, #4
    ab58:	eb000558 	bl	c0c0 <CDWHCIRegister::Write()>
    ab5c:	e1a00004 	mov	r0, r4
    ab60:	ebffffc1 	bl	aa6c <CDWHCIDevice::Reset()>
    ab64:	e2505000 	subs	r5, r0, #0
    ab68:	0a000055 	beq	acc4 <CDWHCIDevice::InitCore()+0x1b8>
    ab6c:	e28d0004 	add	r0, sp, #4
    ab70:	eb00054b 	bl	c0a4 <CDWHCIRegister::Read()>
    ab74:	e3e01010 	mvn	r1, #16
    ab78:	e28d0004 	add	r0, sp, #4
    ab7c:	eb00057c 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ab80:	e3e01008 	mvn	r1, #8
    ab84:	e28d0004 	add	r0, sp, #4
    ab88:	eb000579 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ab8c:	e28d0004 	add	r0, sp, #4
    ab90:	eb00054a 	bl	c0c0 <CDWHCIRegister::Write()>
    ab94:	e59f11b8 	ldr	r1, [pc, #440]	; ad54 <CDWHCIDevice::InitCore()+0x248>
    ab98:	e28d0010 	add	r0, sp, #16
    ab9c:	eb000537 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aba0:	e28d0010 	add	r0, sp, #16
    aba4:	eb00053e 	bl	c0a4 <CDWHCIRegister::Read()>
    aba8:	e28d0010 	add	r0, sp, #16
    abac:	eb000551 	bl	c0f8 <CDWHCIRegister::Get() const>
    abb0:	e1a001a0 	lsr	r0, r0, #3
    abb4:	e2000003 	and	r0, r0, #3
    abb8:	e3500002 	cmp	r0, #2
    abbc:	1a00005b 	bne	ad30 <CDWHCIDevice::InitCore()+0x224>
    abc0:	e28d0004 	add	r0, sp, #4
    abc4:	eb000536 	bl	c0a4 <CDWHCIRegister::Read()>
    abc8:	e28d0010 	add	r0, sp, #16
    abcc:	eb000549 	bl	c0f8 <CDWHCIRegister::Get() const>
    abd0:	e1a00320 	lsr	r0, r0, #6
    abd4:	e2000003 	and	r0, r0, #3
    abd8:	e3500002 	cmp	r0, #2
    abdc:	0a000042 	beq	acec <CDWHCIDevice::InitCore()+0x1e0>
    abe0:	e3e01802 	mvn	r1, #131072	; 0x20000
    abe4:	e28d0004 	add	r0, sp, #4
    abe8:	eb000561 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    abec:	e3e01702 	mvn	r1, #524288	; 0x80000
    abf0:	e28d0004 	add	r0, sp, #4
    abf4:	eb00055e 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    abf8:	e28d0004 	add	r0, sp, #4
    abfc:	eb00052f 	bl	c0c0 <CDWHCIRegister::Write()>
    ac00:	e594300c 	ldr	r3, [r4, #12]
    ac04:	e3530000 	cmp	r3, #0
    ac08:	1a000044 	bne	ad20 <CDWHCIDevice::InitCore()+0x214>
    ac0c:	e28d0010 	add	r0, sp, #16
    ac10:	eb000538 	bl	c0f8 <CDWHCIRegister::Get() const>
    ac14:	e1a00720 	lsr	r0, r0, #14
    ac18:	e200000f 	and	r0, r0, #15
    ac1c:	e2403003 	sub	r3, r0, #3
    ac20:	e353000c 	cmp	r3, #12
    ac24:	e2800001 	add	r0, r0, #1
    ac28:	e584000c 	str	r0, [r4, #12]
    ac2c:	8a000043 	bhi	ad40 <CDWHCIDevice::InitCore()+0x234>
    ac30:	e59f1120 	ldr	r1, [pc, #288]	; ad58 <CDWHCIDevice::InitCore()+0x24c>
    ac34:	e28d001c 	add	r0, sp, #28
    ac38:	eb000510 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac3c:	e28d001c 	add	r0, sp, #28
    ac40:	eb000517 	bl	c0a4 <CDWHCIRegister::Read()>
    ac44:	e28d001c 	add	r0, sp, #28
    ac48:	e3a01020 	mov	r1, #32
    ac4c:	eb000556 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ac50:	e28d001c 	add	r0, sp, #28
    ac54:	e3a01010 	mov	r1, #16
    ac58:	eb000553 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ac5c:	e3e01006 	mvn	r1, #6
    ac60:	e28d001c 	add	r0, sp, #28
    ac64:	eb000542 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ac68:	e28d001c 	add	r0, sp, #28
    ac6c:	eb000513 	bl	c0c0 <CDWHCIRegister::Write()>
    ac70:	e28d0004 	add	r0, sp, #4
    ac74:	eb00050a 	bl	c0a4 <CDWHCIRegister::Read()>
    ac78:	e3e01c02 	mvn	r1, #512	; 0x200
    ac7c:	e28d0004 	add	r0, sp, #4
    ac80:	eb00053b 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ac84:	e3e01c01 	mvn	r1, #256	; 0x100
    ac88:	e28d0004 	add	r0, sp, #4
    ac8c:	eb000538 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    ac90:	e28d0004 	add	r0, sp, #4
    ac94:	eb000509 	bl	c0c0 <CDWHCIRegister::Write()>
    ac98:	e1a00004 	mov	r0, r4
    ac9c:	ebfff96a 	bl	924c <CDWHCIDevice::EnableCommonInterrupts()>
    aca0:	e28d001c 	add	r0, sp, #28
    aca4:	eb0004fd 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    aca8:	e28d0010 	add	r0, sp, #16
    acac:	eb0004fb 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    acb0:	e28d0004 	add	r0, sp, #4
    acb4:	eb0004f9 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    acb8:	e1a00005 	mov	r0, r5
    acbc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    acc0:	e8bd8030 	pop	{r4, r5, pc}
    acc4:	eb006df1 	bl	26490 <CLogger::Get()>
    acc8:	e59f308c 	ldr	r3, [pc, #140]	; ad5c <CDWHCIDevice::InitCore()+0x250>
    accc:	e3a02001 	mov	r2, #1
    acd0:	e59f1088 	ldr	r1, [pc, #136]	; ad60 <CDWHCIDevice::InitCore()+0x254>
    acd4:	eb006d2a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    acd8:	eafffff4 	b	acb0 <CDWHCIDevice::InitCore()+0x1a4>
    acdc:	e3a01040 	mov	r1, #64	; 0x40
    ace0:	e28d0004 	add	r0, sp, #4
    ace4:	eb000530 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ace8:	eaffff93 	b	ab3c <CDWHCIDevice::InitCore()+0x30>
    acec:	e28d0010 	add	r0, sp, #16
    acf0:	eb000500 	bl	c0f8 <CDWHCIRegister::Get() const>
    acf4:	e1a00420 	lsr	r0, r0, #8
    acf8:	e2000003 	and	r0, r0, #3
    acfc:	e3500001 	cmp	r0, #1
    ad00:	1affffb6 	bne	abe0 <CDWHCIDevice::InitCore()+0xd4>
    ad04:	e28d0004 	add	r0, sp, #4
    ad08:	e3a01802 	mov	r1, #131072	; 0x20000
    ad0c:	eb000526 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ad10:	e3a01702 	mov	r1, #524288	; 0x80000
    ad14:	e28d0004 	add	r0, sp, #4
    ad18:	eb000523 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ad1c:	eaffffb5 	b	abf8 <CDWHCIDevice::InitCore()+0xec>
    ad20:	e59f203c 	ldr	r2, [pc, #60]	; ad64 <CDWHCIDevice::InitCore()+0x258>
    ad24:	e59f103c 	ldr	r1, [pc, #60]	; ad68 <CDWHCIDevice::InitCore()+0x25c>
    ad28:	e59f003c 	ldr	r0, [pc, #60]	; ad6c <CDWHCIDevice::InitCore()+0x260>
    ad2c:	eb0064e4 	bl	240c4 <assertion_failed>
    ad30:	e59f2038 	ldr	r2, [pc, #56]	; ad70 <CDWHCIDevice::InitCore()+0x264>
    ad34:	e59f102c 	ldr	r1, [pc, #44]	; ad68 <CDWHCIDevice::InitCore()+0x25c>
    ad38:	e59f0034 	ldr	r0, [pc, #52]	; ad74 <CDWHCIDevice::InitCore()+0x268>
    ad3c:	eb0064e0 	bl	240c4 <assertion_failed>
    ad40:	e59f2030 	ldr	r2, [pc, #48]	; ad78 <CDWHCIDevice::InitCore()+0x26c>
    ad44:	e59f101c 	ldr	r1, [pc, #28]	; ad68 <CDWHCIDevice::InitCore()+0x25c>
    ad48:	e59f002c 	ldr	r0, [pc, #44]	; ad7c <CDWHCIDevice::InitCore()+0x270>
    ad4c:	eb0064dc 	bl	240c4 <assertion_failed>
    ad50:	2098000c 	.word	0x2098000c
    ad54:	20980048 	.word	0x20980048
    ad58:	20980008 	.word	0x20980008
    ad5c:	00040b94 	.word	0x00040b94
    ad60:	0004088c 	.word	0x0004088c
    ad64:	00000185 	.word	0x00000185
    ad68:	000408b0 	.word	0x000408b0
    ad6c:	00040bdc 	.word	0x00040bdc
    ad70:	00000175 	.word	0x00000175
    ad74:	00040ba4 	.word	0x00040ba4
    ad78:	00000187 	.word	0x00000187
    ad7c:	00040bf0 	.word	0x00040bf0

0000ad80 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    ad80:	e92d4030 	push	{r4, r5, lr}
    ad84:	e1a05001 	mov	r5, r1
    ad88:	e24dd01c 	sub	sp, sp, #28
    ad8c:	e3a02000 	mov	r2, #0
    ad90:	e1a04000 	mov	r4, r0
    ad94:	e59f107c 	ldr	r1, [pc, #124]	; ae18 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    ad98:	e28d000c 	add	r0, sp, #12
    ad9c:	eb0004bb 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ada0:	e28d000c 	add	r0, sp, #12
    ada4:	e3a01020 	mov	r1, #32
    ada8:	eb0004ff 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    adac:	e28d000c 	add	r0, sp, #12
    adb0:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    adb4:	eb0004ee 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    adb8:	e1a01305 	lsl	r1, r5, #6
    adbc:	e28d000c 	add	r0, sp, #12
    adc0:	eb0004f9 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    adc4:	e28d000c 	add	r0, sp, #12
    adc8:	eb0004bc 	bl	c0c0 <CDWHCIRegister::Write()>
    adcc:	e3a0300a 	mov	r3, #10
    add0:	e1a00004 	mov	r0, r4
    add4:	e58d3000 	str	r3, [sp]
    add8:	e28d100c 	add	r1, sp, #12
    addc:	e3a03000 	mov	r3, #0
    ade0:	e3a02020 	mov	r2, #32
    ade4:	ebfffeb0 	bl	a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ade8:	e3500000 	cmp	r0, #0
    adec:	1a000003 	bne	ae00 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    adf0:	e28d000c 	add	r0, sp, #12
    adf4:	eb0004a9 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    adf8:	e28dd01c 	add	sp, sp, #28
    adfc:	e8bd8030 	pop	{r4, r5, pc}
    ae00:	e3a00001 	mov	r0, #1
    ae04:	eb007a3b 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
    ae08:	e28d000c 	add	r0, sp, #12
    ae0c:	eb0004a3 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    ae10:	e28dd01c 	add	sp, sp, #28
    ae14:	e8bd8030 	pop	{r4, r5, pc}
    ae18:	20980010 	.word	0x20980010

0000ae1c <CDWHCIDevice::FlushRxFIFO()>:
    ae1c:	e92d4010 	push	{r4, lr}
    ae20:	e24dd018 	sub	sp, sp, #24
    ae24:	e3a02000 	mov	r2, #0
    ae28:	e1a04000 	mov	r4, r0
    ae2c:	e59f1064 	ldr	r1, [pc, #100]	; ae98 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    ae30:	e28d000c 	add	r0, sp, #12
    ae34:	eb000495 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ae38:	e3a01010 	mov	r1, #16
    ae3c:	e28d000c 	add	r0, sp, #12
    ae40:	eb0004d9 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    ae44:	e28d000c 	add	r0, sp, #12
    ae48:	eb00049c 	bl	c0c0 <CDWHCIRegister::Write()>
    ae4c:	e3a0300a 	mov	r3, #10
    ae50:	e1a00004 	mov	r0, r4
    ae54:	e58d3000 	str	r3, [sp]
    ae58:	e28d100c 	add	r1, sp, #12
    ae5c:	e3a03000 	mov	r3, #0
    ae60:	e3a02010 	mov	r2, #16
    ae64:	ebfffe90 	bl	a8ac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ae68:	e3500000 	cmp	r0, #0
    ae6c:	1a000003 	bne	ae80 <CDWHCIDevice::FlushRxFIFO()+0x64>
    ae70:	e28d000c 	add	r0, sp, #12
    ae74:	eb000489 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    ae78:	e28dd018 	add	sp, sp, #24
    ae7c:	e8bd8010 	pop	{r4, pc}
    ae80:	e3a00001 	mov	r0, #1
    ae84:	eb007a1b 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
    ae88:	e28d000c 	add	r0, sp, #12
    ae8c:	eb000483 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    ae90:	e28dd018 	add	sp, sp, #24
    ae94:	e8bd8010 	pop	{r4, pc}
    ae98:	20980010 	.word	0x20980010

0000ae9c <CDWHCIDevice::InitHost()>:
    ae9c:	e92d4010 	push	{r4, lr}
    aea0:	e24dd068 	sub	sp, sp, #104	; 0x68
    aea4:	e3a02000 	mov	r2, #0
    aea8:	e59f11cc 	ldr	r1, [pc, #460]	; b07c <CDWHCIDevice::InitHost()+0x1e0>
    aeac:	e1a04000 	mov	r4, r0
    aeb0:	e28d0008 	add	r0, sp, #8
    aeb4:	eb000475 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aeb8:	e28d0008 	add	r0, sp, #8
    aebc:	eb00047f 	bl	c0c0 <CDWHCIRegister::Write()>
    aec0:	e59f11b8 	ldr	r1, [pc, #440]	; b080 <CDWHCIDevice::InitHost()+0x1e4>
    aec4:	e28d0014 	add	r0, sp, #20
    aec8:	eb00046c 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aecc:	e28d0014 	add	r0, sp, #20
    aed0:	eb000473 	bl	c0a4 <CDWHCIRegister::Read()>
    aed4:	e28d0014 	add	r0, sp, #20
    aed8:	e3e01003 	mvn	r1, #3
    aedc:	eb0004a4 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    aee0:	e59f119c 	ldr	r1, [pc, #412]	; b084 <CDWHCIDevice::InitHost()+0x1e8>
    aee4:	e28d0020 	add	r0, sp, #32
    aee8:	eb000464 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aeec:	e59f1194 	ldr	r1, [pc, #404]	; b088 <CDWHCIDevice::InitHost()+0x1ec>
    aef0:	e28d002c 	add	r0, sp, #44	; 0x2c
    aef4:	eb000461 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aef8:	e28d0020 	add	r0, sp, #32
    aefc:	eb000468 	bl	c0a4 <CDWHCIRegister::Read()>
    af00:	e1a00320 	lsr	r0, r0, #6
    af04:	e2000003 	and	r0, r0, #3
    af08:	e3500002 	cmp	r0, #2
    af0c:	0a00004d 	beq	b048 <CDWHCIDevice::InitHost()+0x1ac>
    af10:	e3a01000 	mov	r1, #0
    af14:	e28d0014 	add	r0, sp, #20
    af18:	eb0004a3 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    af1c:	e28d0014 	add	r0, sp, #20
    af20:	eb000466 	bl	c0c0 <CDWHCIRegister::Write()>
    af24:	e3a02b01 	mov	r2, #1024	; 0x400
    af28:	e59f115c 	ldr	r1, [pc, #348]	; b08c <CDWHCIDevice::InitHost()+0x1f0>
    af2c:	e28d0038 	add	r0, sp, #56	; 0x38
    af30:	eb000456 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af34:	e28d0038 	add	r0, sp, #56	; 0x38
    af38:	eb000460 	bl	c0c0 <CDWHCIRegister::Write()>
    af3c:	e3a02000 	mov	r2, #0
    af40:	e59f1148 	ldr	r1, [pc, #328]	; b090 <CDWHCIDevice::InitHost()+0x1f4>
    af44:	e28d0044 	add	r0, sp, #68	; 0x44
    af48:	eb000450 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af4c:	e28d0044 	add	r0, sp, #68	; 0x44
    af50:	e3a01b01 	mov	r1, #1024	; 0x400
    af54:	eb000494 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    af58:	e3a01301 	mov	r1, #67108864	; 0x4000000
    af5c:	e28d0044 	add	r0, sp, #68	; 0x44
    af60:	eb000491 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    af64:	e28d0044 	add	r0, sp, #68	; 0x44
    af68:	eb000454 	bl	c0c0 <CDWHCIRegister::Write()>
    af6c:	e3a02000 	mov	r2, #0
    af70:	e59f111c 	ldr	r1, [pc, #284]	; b094 <CDWHCIDevice::InitHost()+0x1f8>
    af74:	e28d0050 	add	r0, sp, #80	; 0x50
    af78:	eb000444 	bl	c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af7c:	e28d0050 	add	r0, sp, #80	; 0x50
    af80:	e3a01b02 	mov	r1, #2048	; 0x800
    af84:	eb000488 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    af88:	e3a01301 	mov	r1, #67108864	; 0x4000000
    af8c:	e28d0050 	add	r0, sp, #80	; 0x50
    af90:	eb000485 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    af94:	e28d0050 	add	r0, sp, #80	; 0x50
    af98:	eb000448 	bl	c0c0 <CDWHCIRegister::Write()>
    af9c:	e3a01010 	mov	r1, #16
    afa0:	e1a00004 	mov	r0, r4
    afa4:	ebffff75 	bl	ad80 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    afa8:	e1a00004 	mov	r0, r4
    afac:	ebffff9a 	bl	ae1c <CDWHCIDevice::FlushRxFIFO()>
    afb0:	e59f10e0 	ldr	r1, [pc, #224]	; b098 <CDWHCIDevice::InitHost()+0x1fc>
    afb4:	e28d005c 	add	r0, sp, #92	; 0x5c
    afb8:	eb000430 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afbc:	e28d005c 	add	r0, sp, #92	; 0x5c
    afc0:	eb000437 	bl	c0a4 <CDWHCIRegister::Read()>
    afc4:	e28d005c 	add	r0, sp, #92	; 0x5c
    afc8:	e3e0102e 	mvn	r1, #46	; 0x2e
    afcc:	eb000468 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    afd0:	e28d005c 	add	r0, sp, #92	; 0x5c
    afd4:	eb000447 	bl	c0f8 <CDWHCIRegister::Get() const>
    afd8:	e3100a01 	tst	r0, #4096	; 0x1000
    afdc:	1a000004 	bne	aff4 <CDWHCIDevice::InitHost()+0x158>
    afe0:	e28d005c 	add	r0, sp, #92	; 0x5c
    afe4:	e3a01a01 	mov	r1, #4096	; 0x1000
    afe8:	eb00046f 	bl	c1ac <CDWHCIRegister::Or(unsigned int)>
    afec:	e28d005c 	add	r0, sp, #92	; 0x5c
    aff0:	eb000432 	bl	c0c0 <CDWHCIRegister::Write()>
    aff4:	e1a00004 	mov	r0, r4
    aff8:	ebfff8a1 	bl	9284 <CDWHCIDevice::EnableHostInterrupts()>
    affc:	e28d005c 	add	r0, sp, #92	; 0x5c
    b000:	eb000426 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b004:	e28d0050 	add	r0, sp, #80	; 0x50
    b008:	eb000424 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b00c:	e28d0044 	add	r0, sp, #68	; 0x44
    b010:	eb000422 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b014:	e28d0038 	add	r0, sp, #56	; 0x38
    b018:	eb000420 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b01c:	e28d002c 	add	r0, sp, #44	; 0x2c
    b020:	eb00041e 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b024:	e28d0020 	add	r0, sp, #32
    b028:	eb00041c 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b02c:	e28d0014 	add	r0, sp, #20
    b030:	eb00041a 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b034:	e28d0008 	add	r0, sp, #8
    b038:	eb000418 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b03c:	e3a00001 	mov	r0, #1
    b040:	e28dd068 	add	sp, sp, #104	; 0x68
    b044:	e8bd8010 	pop	{r4, pc}
    b048:	e28d0020 	add	r0, sp, #32
    b04c:	eb000429 	bl	c0f8 <CDWHCIRegister::Get() const>
    b050:	e1a01420 	lsr	r1, r0, #8
    b054:	e2011003 	and	r1, r1, #3
    b058:	e3510001 	cmp	r1, #1
    b05c:	1affffab 	bne	af10 <CDWHCIDevice::InitHost()+0x74>
    b060:	e28d002c 	add	r0, sp, #44	; 0x2c
    b064:	e58d1004 	str	r1, [sp, #4]
    b068:	eb00040d 	bl	c0a4 <CDWHCIRegister::Read()>
    b06c:	e3100802 	tst	r0, #131072	; 0x20000
    b070:	e59d1004 	ldr	r1, [sp, #4]
    b074:	1affffa6 	bne	af14 <CDWHCIDevice::InitHost()+0x78>
    b078:	eaffffa4 	b	af10 <CDWHCIDevice::InitHost()+0x74>
    b07c:	20980e00 	.word	0x20980e00
    b080:	20980400 	.word	0x20980400
    b084:	20980048 	.word	0x20980048
    b088:	2098000c 	.word	0x2098000c
    b08c:	20980024 	.word	0x20980024
    b090:	20980028 	.word	0x20980028
    b094:	20980100 	.word	0x20980100
    b098:	20980440 	.word	0x20980440

0000b09c <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    b09c:	e92d4030 	push	{r4, r5, lr}
    b0a0:	e24dd01c 	sub	sp, sp, #28
    b0a4:	e1a05001 	mov	r5, r1
    b0a8:	e28d000c 	add	r0, sp, #12
    b0ac:	e1a01002 	mov	r1, r2
    b0b0:	eb0003f2 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b0b4:	e3a03000 	mov	r3, #0
    b0b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b0bc:	eb006cf3 	bl	26490 <CLogger::Get()>
    b0c0:	e1a04000 	mov	r4, r0
    b0c4:	e28d000c 	add	r0, sp, #12
    b0c8:	eb0003f5 	bl	c0a4 <CDWHCIRegister::Read()>
    b0cc:	e59f3020 	ldr	r3, [pc, #32]	; b0f4 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    b0d0:	e88d0021 	stm	sp, {r0, r5}
    b0d4:	e3a02004 	mov	r2, #4
    b0d8:	e1a00004 	mov	r0, r4
    b0dc:	e59f1014 	ldr	r1, [pc, #20]	; b0f8 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    b0e0:	eb006c27 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0e4:	e28d000c 	add	r0, sp, #12
    b0e8:	eb0003ec 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b0ec:	e28dd01c 	add	sp, sp, #28
    b0f0:	e8bd8030 	pop	{r4, r5, pc}
    b0f4:	000408ec 	.word	0x000408ec
    b0f8:	0004088c 	.word	0x0004088c

0000b0fc <CDWHCIDevice::DumpStatus(unsigned int)>:
    b0fc:	e92d4070 	push	{r4, r5, r6, lr}
    b100:	e1a05001 	mov	r5, r1
    b104:	e59f0104 	ldr	r0, [pc, #260]	; b210 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    b108:	e59f1104 	ldr	r1, [pc, #260]	; b214 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    b10c:	ebfff797 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b110:	e59f1100 	ldr	r1, [pc, #256]	; b218 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    b114:	e59f0100 	ldr	r0, [pc, #256]	; b21c <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    b118:	ebfff794 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b11c:	e59f10fc 	ldr	r1, [pc, #252]	; b220 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    b120:	e59f00fc 	ldr	r0, [pc, #252]	; b224 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    b124:	ebfff791 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b128:	e59f10f8 	ldr	r1, [pc, #248]	; b228 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    b12c:	e59f00f8 	ldr	r0, [pc, #248]	; b22c <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    b130:	ebfff78e 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b134:	e59f10f4 	ldr	r1, [pc, #244]	; b230 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    b138:	e59f00f4 	ldr	r0, [pc, #244]	; b234 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    b13c:	ebfff78b 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b140:	e59f10f0 	ldr	r1, [pc, #240]	; b238 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    b144:	e59f00f0 	ldr	r0, [pc, #240]	; b23c <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    b148:	ebfff788 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b14c:	e59f10ec 	ldr	r1, [pc, #236]	; b240 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    b150:	e59f00ec 	ldr	r0, [pc, #236]	; b244 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    b154:	ebfff785 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b158:	e59f10e8 	ldr	r1, [pc, #232]	; b248 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    b15c:	e59f00e8 	ldr	r0, [pc, #232]	; b24c <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    b160:	ebfff782 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b164:	e59f10e4 	ldr	r1, [pc, #228]	; b250 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    b168:	e59f00e4 	ldr	r0, [pc, #228]	; b254 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    b16c:	ebfff77f 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b170:	e59f10e0 	ldr	r1, [pc, #224]	; b258 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    b174:	e59f00e0 	ldr	r0, [pc, #224]	; b25c <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    b178:	ebfff77c 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b17c:	e59f10dc 	ldr	r1, [pc, #220]	; b260 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    b180:	e59f00dc 	ldr	r0, [pc, #220]	; b264 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    b184:	ebfff779 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b188:	e59f40d8 	ldr	r4, [pc, #216]	; b268 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    b18c:	e59f10d8 	ldr	r1, [pc, #216]	; b26c <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    b190:	e59f00d8 	ldr	r0, [pc, #216]	; b270 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    b194:	ebfff775 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b198:	e59f10d4 	ldr	r1, [pc, #212]	; b274 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    b19c:	e59f00d4 	ldr	r0, [pc, #212]	; b278 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    b1a0:	ebfff772 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1a4:	e0854004 	add	r4, r5, r4
    b1a8:	e59f10cc 	ldr	r1, [pc, #204]	; b27c <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    b1ac:	e59f00cc 	ldr	r0, [pc, #204]	; b280 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    b1b0:	e1a04284 	lsl	r4, r4, #5
    b1b4:	ebfff76d 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1b8:	e59f10c4 	ldr	r1, [pc, #196]	; b284 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    b1bc:	e59f00c4 	ldr	r0, [pc, #196]	; b288 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    b1c0:	ebfff76a 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1c4:	e1a01004 	mov	r1, r4
    b1c8:	e59f00bc 	ldr	r0, [pc, #188]	; b28c <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    b1cc:	ebfff767 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1d0:	e2841004 	add	r1, r4, #4
    b1d4:	e59f00b4 	ldr	r0, [pc, #180]	; b290 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    b1d8:	ebfff764 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1dc:	e2841008 	add	r1, r4, #8
    b1e0:	e59f00ac 	ldr	r0, [pc, #172]	; b294 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    b1e4:	ebfff761 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1e8:	e284100c 	add	r1, r4, #12
    b1ec:	e59f00a4 	ldr	r0, [pc, #164]	; b298 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    b1f0:	ebfff75e 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b1f4:	e2841010 	add	r1, r4, #16
    b1f8:	e59f009c 	ldr	r0, [pc, #156]	; b29c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    b1fc:	ebfff75b 	bl	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b200:	e2841014 	add	r1, r4, #20
    b204:	e59f0094 	ldr	r0, [pc, #148]	; b2a0 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    b208:	e8bd4070 	pop	{r4, r5, r6, lr}
    b20c:	eafff757 	b	8f70 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    b210:	00040c28 	.word	0x00040c28
    b214:	20980000 	.word	0x20980000
    b218:	20980008 	.word	0x20980008
    b21c:	00040c34 	.word	0x00040c34
    b220:	2098000c 	.word	0x2098000c
    b224:	00040c3c 	.word	0x00040c3c
    b228:	20980010 	.word	0x20980010
    b22c:	00040c44 	.word	0x00040c44
    b230:	20980014 	.word	0x20980014
    b234:	00040c4c 	.word	0x00040c4c
    b238:	20980018 	.word	0x20980018
    b23c:	00040c58 	.word	0x00040c58
    b240:	20980024 	.word	0x20980024
    b244:	00040c64 	.word	0x00040c64
    b248:	20980028 	.word	0x20980028
    b24c:	00040c70 	.word	0x00040c70
    b250:	2098002c 	.word	0x2098002c
    b254:	00040c84 	.word	0x00040c84
    b258:	20980100 	.word	0x20980100
    b25c:	00040c94 	.word	0x00040c94
    b260:	20980400 	.word	0x20980400
    b264:	00040cac 	.word	0x00040cac
    b268:	0104c028 	.word	0x0104c028
    b26c:	20980410 	.word	0x20980410
    b270:	00040cb8 	.word	0x00040cb8
    b274:	20980414 	.word	0x20980414
    b278:	00040cd0 	.word	0x00040cd0
    b27c:	20980418 	.word	0x20980418
    b280:	00040ce4 	.word	0x00040ce4
    b284:	20980440 	.word	0x20980440
    b288:	00040cfc 	.word	0x00040cfc
    b28c:	00040d08 	.word	0x00040d08
    b290:	00040d20 	.word	0x00040d20
    b294:	00040d38 	.word	0x00040d38
    b298:	00040d4c 	.word	0x00040d4c
    b29c:	00040d64 	.word	0x00040d64
    b2a0:	00040d7c 	.word	0x00040d7c

0000b2a4 <CDWHCIDevice::~CDWHCIDevice()>:
    b2a4:	e3a03001 	mov	r3, #1
    b2a8:	e92d4030 	push	{r4, r5, lr}
    b2ac:	e5901008 	ldr	r1, [r0, #8]
    b2b0:	e59f20bc 	ldr	r2, [pc, #188]	; b374 <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    b2b4:	e3510000 	cmp	r1, #0
    b2b8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b2bc:	e5802000 	str	r2, [r0]
    b2c0:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    b2c4:	0a000022 	beq	b354 <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    b2c8:	e1a04000 	mov	r4, r0
    b2cc:	e3a000c8 	mov	r0, #200	; 0xc8
    b2d0:	eb007901 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    b2d4:	e5940004 	ldr	r0, [r4, #4]
    b2d8:	e3500000 	cmp	r0, #0
    b2dc:	0a000020 	beq	b364 <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    b2e0:	e3a05000 	mov	r5, #0
    b2e4:	e3a01009 	mov	r1, #9
    b2e8:	eb0081f8 	bl	2bad0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b2ec:	e1a00004 	mov	r0, r4
    b2f0:	ebfffddd 	bl	aa6c <CDWHCIDevice::Reset()>
    b2f4:	e1a01005 	mov	r1, r5
    b2f8:	e28d000c 	add	r0, sp, #12
    b2fc:	eb006391 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b300:	e3a03014 	mov	r3, #20
    b304:	e3a01003 	mov	r1, #3
    b308:	e3a0c002 	mov	ip, #2
    b30c:	e08d2003 	add	r2, sp, r3
    b310:	e58d1020 	str	r1, [sp, #32]
    b314:	e28d000c 	add	r0, sp, #12
    b318:	e59f1058 	ldr	r1, [pc, #88]	; b378 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    b31c:	e58d5000 	str	r5, [sp]
    b320:	e58dc024 	str	ip, [sp, #36]	; 0x24
    b324:	eb006393 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b328:	e5845004 	str	r5, [r4, #4]
    b32c:	e5845008 	str	r5, [r4, #8]
    b330:	e28d000c 	add	r0, sp, #12
    b334:	eb00638a 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
    b338:	e2840074 	add	r0, r4, #116	; 0x74
    b33c:	eb0003ff 	bl	c340 <CDWHCIRootPort::~CDWHCIRootPort()>
    b340:	e1a00004 	mov	r0, r4
    b344:	eb001a61 	bl	11cd0 <CUSBHostController::~CUSBHostController()>
    b348:	e1a00004 	mov	r0, r4
    b34c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b350:	e8bd8030 	pop	{r4, r5, pc}
    b354:	e3a0205d 	mov	r2, #93	; 0x5d
    b358:	e59f101c 	ldr	r1, [pc, #28]	; b37c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    b35c:	e59f001c 	ldr	r0, [pc, #28]	; b380 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    b360:	eb006357 	bl	240c4 <assertion_failed>
    b364:	e3a02060 	mov	r2, #96	; 0x60
    b368:	e59f100c 	ldr	r1, [pc, #12]	; b37c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    b36c:	e59f0010 	ldr	r0, [pc, #16]	; b384 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    b370:	eb006353 	bl	240c4 <assertion_failed>
    b374:	0004089c 	.word	0x0004089c
    b378:	00028001 	.word	0x00028001
    b37c:	000408b0 	.word	0x000408b0
    b380:	00040910 	.word	0x00040910
    b384:	000408f8 	.word	0x000408f8

0000b388 <CDWHCIDevice::~CDWHCIDevice()>:
    b388:	e92d4010 	push	{r4, lr}
    b38c:	e1a04000 	mov	r4, r0
    b390:	ebffffc3 	bl	b2a4 <CDWHCIDevice::~CDWHCIDevice()>
    b394:	e1a00004 	mov	r0, r4
    b398:	e3a01084 	mov	r1, #132	; 0x84
    b39c:	eb007d72 	bl	2a96c <operator delete(void*, unsigned int)>
    b3a0:	e1a00004 	mov	r0, r4
    b3a4:	e8bd8010 	pop	{r4, pc}

0000b3a8 <CDWHCIDevice::ReScanDevices()>:
    b3a8:	e92d4010 	push	{r4, lr}
    b3ac:	e3a03000 	mov	r3, #0
    b3b0:	e1a04000 	mov	r4, r0
    b3b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b3b8:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    b3bc:	e3530000 	cmp	r3, #0
    b3c0:	1a00000e 	bne	b400 <CDWHCIDevice::ReScanDevices()+0x58>
    b3c4:	ebfffd71 	bl	a990 <CDWHCIDevice::EnableRootPort()>
    b3c8:	e3500000 	cmp	r0, #0
    b3cc:	0a000010 	beq	b414 <CDWHCIDevice::ReScanDevices()+0x6c>
    b3d0:	e3a03001 	mov	r3, #1
    b3d4:	e2840074 	add	r0, r4, #116	; 0x74
    b3d8:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    b3dc:	eb00042b 	bl	c490 <CDWHCIRootPort::Initialize()>
    b3e0:	e3500000 	cmp	r0, #0
    b3e4:	1a000007 	bne	b408 <CDWHCIDevice::ReScanDevices()+0x60>
    b3e8:	eb006c28 	bl	26490 <CLogger::Get()>
    b3ec:	e59f3038 	ldr	r3, [pc, #56]	; b42c <CDWHCIDevice::ReScanDevices()+0x84>
    b3f0:	e3a02002 	mov	r2, #2
    b3f4:	e59f1034 	ldr	r1, [pc, #52]	; b430 <CDWHCIDevice::ReScanDevices()+0x88>
    b3f8:	eb006b61 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b3fc:	ea000001 	b	b408 <CDWHCIDevice::ReScanDevices()+0x60>
    b400:	e2800074 	add	r0, r0, #116	; 0x74
    b404:	eb000401 	bl	c410 <CDWHCIRootPort::ReScanDevices()>
    b408:	e3a03000 	mov	r3, #0
    b40c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b410:	e8bd8010 	pop	{r4, pc}
    b414:	eb006c1d 	bl	26490 <CLogger::Get()>
    b418:	e59f3014 	ldr	r3, [pc, #20]	; b434 <CDWHCIDevice::ReScanDevices()+0x8c>
    b41c:	e3a02002 	mov	r2, #2
    b420:	e59f1008 	ldr	r1, [pc, #8]	; b430 <CDWHCIDevice::ReScanDevices()+0x88>
    b424:	eb006b56 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b428:	eafffff6 	b	b408 <CDWHCIDevice::ReScanDevices()+0x60>
    b42c:	00040d94 	.word	0x00040d94
    b430:	0004088c 	.word	0x0004088c
    b434:	00040db0 	.word	0x00040db0

0000b438 <CDWHCIDevice::Initialize()>:
    b438:	e92d4070 	push	{r4, r5, r6, lr}
    b43c:	e3a01001 	mov	r1, #1
    b440:	e24dd020 	sub	sp, sp, #32
    b444:	e1a04000 	mov	r4, r0
    b448:	e3a00020 	mov	r0, #32
    b44c:	eb0022f4 	bl	14024 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    b450:	e3a01001 	mov	r1, #1
    b454:	e3a00010 	mov	r0, #16
    b458:	eb0006f6 	bl	d038 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    b45c:	e3a01001 	mov	r1, #1
    b460:	e3a00010 	mov	r0, #16
    b464:	eb000137 	bl	b948 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b468:	e3a01001 	mov	r1, #1
    b46c:	e3a00010 	mov	r0, #16
    b470:	eb0002e6 	bl	c010 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b474:	e3a01001 	mov	r1, #1
    b478:	e3a00010 	mov	r0, #16
    b47c:	eb0001d1 	bl	bbc8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    b480:	e3a05000 	mov	r5, #0
    b484:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    b488:	e5943004 	ldr	r3, [r4, #4]
    b48c:	e1530005 	cmp	r3, r5
    b490:	0a000041 	beq	b59c <CDWHCIDevice::Initialize()+0x164>
    b494:	e5943008 	ldr	r3, [r4, #8]
    b498:	e3530000 	cmp	r3, #0
    b49c:	0a000042 	beq	b5ac <CDWHCIDevice::Initialize()+0x174>
    b4a0:	e59f1164 	ldr	r1, [pc, #356]	; b60c <CDWHCIDevice::Initialize()+0x1d4>
    b4a4:	e28d0008 	add	r0, sp, #8
    b4a8:	eb0002f4 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b4ac:	e28d0008 	add	r0, sp, #8
    b4b0:	eb0002fb 	bl	c0a4 <CDWHCIRegister::Read()>
    b4b4:	e59f3154 	ldr	r3, [pc, #340]	; b610 <CDWHCIDevice::Initialize()+0x1d8>
    b4b8:	e1500003 	cmp	r0, r3
    b4bc:	0a00000f 	beq	b500 <CDWHCIDevice::Initialize()+0xc8>
    b4c0:	eb006bf2 	bl	26490 <CLogger::Get()>
    b4c4:	e1a04000 	mov	r4, r0
    b4c8:	e28d0008 	add	r0, sp, #8
    b4cc:	eb000309 	bl	c0f8 <CDWHCIRegister::Get() const>
    b4d0:	e59f313c 	ldr	r3, [pc, #316]	; b614 <CDWHCIDevice::Initialize()+0x1dc>
    b4d4:	e58d0000 	str	r0, [sp]
    b4d8:	e3a02001 	mov	r2, #1
    b4dc:	e1a00004 	mov	r0, r4
    b4e0:	e59f1130 	ldr	r1, [pc, #304]	; b618 <CDWHCIDevice::Initialize()+0x1e0>
    b4e4:	e1a06005 	mov	r6, r5
    b4e8:	eb006b25 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4ec:	e28d0008 	add	r0, sp, #8
    b4f0:	eb0002ea 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b4f4:	e1a00006 	mov	r0, r6
    b4f8:	e28dd020 	add	sp, sp, #32
    b4fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    b500:	e1a00004 	mov	r0, r4
    b504:	ebfff724 	bl	919c <CDWHCIDevice::PowerOn()>
    b508:	e2506000 	subs	r6, r0, #0
    b50c:	0a00001c 	beq	b584 <CDWHCIDevice::Initialize()+0x14c>
    b510:	e59f1104 	ldr	r1, [pc, #260]	; b61c <CDWHCIDevice::Initialize()+0x1e4>
    b514:	e28d0014 	add	r0, sp, #20
    b518:	eb0002d8 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b51c:	e28d0014 	add	r0, sp, #20
    b520:	eb0002df 	bl	c0a4 <CDWHCIRegister::Read()>
    b524:	e28d0014 	add	r0, sp, #20
    b528:	e3e01001 	mvn	r1, #1
    b52c:	eb000310 	bl	c174 <CDWHCIRegister::And(unsigned int)>
    b530:	e28d0014 	add	r0, sp, #20
    b534:	eb0002e1 	bl	c0c0 <CDWHCIRegister::Write()>
    b538:	e5940004 	ldr	r0, [r4, #4]
    b53c:	e3500000 	cmp	r0, #0
    b540:	0a00002d 	beq	b5fc <CDWHCIDevice::Initialize()+0x1c4>
    b544:	e1a03004 	mov	r3, r4
    b548:	e59f20d0 	ldr	r2, [pc, #208]	; b620 <CDWHCIDevice::Initialize()+0x1e8>
    b54c:	e3a01009 	mov	r1, #9
    b550:	eb00812a 	bl	2ba00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b554:	e1a00004 	mov	r0, r4
    b558:	ebfffd6b 	bl	ab0c <CDWHCIDevice::InitCore()>
    b55c:	e2506000 	subs	r6, r0, #0
    b560:	1a000015 	bne	b5bc <CDWHCIDevice::Initialize()+0x184>
    b564:	eb006bc9 	bl	26490 <CLogger::Get()>
    b568:	e59f30b4 	ldr	r3, [pc, #180]	; b624 <CDWHCIDevice::Initialize()+0x1ec>
    b56c:	e3a02001 	mov	r2, #1
    b570:	e59f10a0 	ldr	r1, [pc, #160]	; b618 <CDWHCIDevice::Initialize()+0x1e0>
    b574:	eb006b02 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b578:	e28d0014 	add	r0, sp, #20
    b57c:	eb0002c7 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    b580:	eaffffd9 	b	b4ec <CDWHCIDevice::Initialize()+0xb4>
    b584:	eb006bc1 	bl	26490 <CLogger::Get()>
    b588:	e59f3098 	ldr	r3, [pc, #152]	; b628 <CDWHCIDevice::Initialize()+0x1f0>
    b58c:	e3a02001 	mov	r2, #1
    b590:	e59f1080 	ldr	r1, [pc, #128]	; b618 <CDWHCIDevice::Initialize()+0x1e0>
    b594:	eb006afa 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b598:	eaffffd3 	b	b4ec <CDWHCIDevice::Initialize()+0xb4>
    b59c:	e3a0207a 	mov	r2, #122	; 0x7a
    b5a0:	e59f1084 	ldr	r1, [pc, #132]	; b62c <CDWHCIDevice::Initialize()+0x1f4>
    b5a4:	e59f0084 	ldr	r0, [pc, #132]	; b630 <CDWHCIDevice::Initialize()+0x1f8>
    b5a8:	eb0062c5 	bl	240c4 <assertion_failed>
    b5ac:	e3a0207b 	mov	r2, #123	; 0x7b
    b5b0:	e59f1074 	ldr	r1, [pc, #116]	; b62c <CDWHCIDevice::Initialize()+0x1f4>
    b5b4:	e59f0078 	ldr	r0, [pc, #120]	; b634 <CDWHCIDevice::Initialize()+0x1fc>
    b5b8:	eb0062c1 	bl	240c4 <assertion_failed>
    b5bc:	e1a00004 	mov	r0, r4
    b5c0:	ebfff710 	bl	9208 <CDWHCIDevice::EnableGlobalInterrupts()>
    b5c4:	e1a00004 	mov	r0, r4
    b5c8:	ebfffe33 	bl	ae9c <CDWHCIDevice::InitHost()>
    b5cc:	e2506000 	subs	r6, r0, #0
    b5d0:	1a000005 	bne	b5ec <CDWHCIDevice::Initialize()+0x1b4>
    b5d4:	eb006bad 	bl	26490 <CLogger::Get()>
    b5d8:	e59f3058 	ldr	r3, [pc, #88]	; b638 <CDWHCIDevice::Initialize()+0x200>
    b5dc:	e3a02001 	mov	r2, #1
    b5e0:	e59f1030 	ldr	r1, [pc, #48]	; b618 <CDWHCIDevice::Initialize()+0x1e0>
    b5e4:	eb006ae6 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b5e8:	eaffffe2 	b	b578 <CDWHCIDevice::Initialize()+0x140>
    b5ec:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    b5f0:	e1a00004 	mov	r0, r4
    b5f4:	ebffff6b 	bl	b3a8 <CDWHCIDevice::ReScanDevices()>
    b5f8:	eaffffde 	b	b578 <CDWHCIDevice::Initialize()+0x140>
    b5fc:	e3a02090 	mov	r2, #144	; 0x90
    b600:	e59f1024 	ldr	r1, [pc, #36]	; b62c <CDWHCIDevice::Initialize()+0x1f4>
    b604:	e59f0024 	ldr	r0, [pc, #36]	; b630 <CDWHCIDevice::Initialize()+0x1f8>
    b608:	eb0062ad 	bl	240c4 <assertion_failed>
    b60c:	20980040 	.word	0x20980040
    b610:	4f54280a 	.word	0x4f54280a
    b614:	00040dd4 	.word	0x00040dd4
    b618:	0004088c 	.word	0x0004088c
    b61c:	20980008 	.word	0x20980008
    b620:	0000a3e8 	.word	0x0000a3e8
    b624:	00040dfc 	.word	0x00040dfc
    b628:	00040dec 	.word	0x00040dec
    b62c:	000408b0 	.word	0x000408b0
    b630:	000408f8 	.word	0x000408f8
    b634:	00040910 	.word	0x00040910
    b638:	00040e14 	.word	0x00040e14

0000b63c <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b63c:	e12fff1e 	bx	lr

0000b640 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    b640:	e3a03000 	mov	r3, #0
    b644:	e5803008 	str	r3, [r0, #8]
    b648:	e12fff1e 	bx	lr

0000b64c <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    b64c:	e12fff1e 	bx	lr

0000b650 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    b650:	e3a00000 	mov	r0, #0
    b654:	e12fff1e 	bx	lr

0000b658 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    b658:	e5903008 	ldr	r3, [r0, #8]
    b65c:	e92d4010 	push	{r4, lr}
    b660:	e2433001 	sub	r3, r3, #1
    b664:	e3530004 	cmp	r3, #4
    b668:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b66c:	ea000010 	b	b6b4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    b670:	0000b69c 	.word	0x0000b69c
    b674:	0000b68c 	.word	0x0000b68c
    b678:	0000b68c 	.word	0x0000b68c
    b67c:	0000b684 	.word	0x0000b684
    b680:	0000b684 	.word	0x0000b684
    b684:	e3a00000 	mov	r0, #0
    b688:	e8bd8010 	pop	{r4, pc}
    b68c:	e59f0030 	ldr	r0, [pc, #48]	; b6c4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    b690:	eb007818 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
    b694:	e3a00001 	mov	r0, #1
    b698:	e8bd8010 	pop	{r4, pc}
    b69c:	e3a02002 	mov	r2, #2
    b6a0:	e3a03003 	mov	r3, #3
    b6a4:	e5802008 	str	r2, [r0, #8]
    b6a8:	e580300c 	str	r3, [r0, #12]
    b6ac:	e3a00001 	mov	r0, #1
    b6b0:	e8bd8010 	pop	{r4, pc}
    b6b4:	e3a0205f 	mov	r2, #95	; 0x5f
    b6b8:	e59f1008 	ldr	r1, [pc, #8]	; b6c8 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    b6bc:	e59f0008 	ldr	r0, [pc, #8]	; b6cc <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    b6c0:	eb00627f 	bl	240c4 <assertion_failed>
    b6c4:	00000271 	.word	0x00000271
    b6c8:	00040e50 	.word	0x00040e50
    b6cc:	000414b4 	.word	0x000414b4

0000b6d0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    b6d0:	e92d4010 	push	{r4, lr}
    b6d4:	e5903008 	ldr	r3, [r0, #8]
    b6d8:	e24dd010 	sub	sp, sp, #16
    b6dc:	e3530000 	cmp	r3, #0
    b6e0:	e1a04000 	mov	r4, r0
    b6e4:	0a000017 	beq	b748 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    b6e8:	e2433002 	sub	r3, r3, #2
    b6ec:	e3530001 	cmp	r3, #1
    b6f0:	8a000010 	bhi	b738 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    b6f4:	e3110001 	tst	r1, #1
    b6f8:	13a03004 	movne	r3, #4
    b6fc:	15803008 	strne	r3, [r0, #8]
    b700:	1a00000a 	bne	b730 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b704:	e3110060 	tst	r1, #96	; 0x60
    b708:	1a000016 	bne	b768 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
    b70c:	e3110010 	tst	r1, #16
    b710:	0a00001f 	beq	b794 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc4>
    b714:	e590300c 	ldr	r3, [r0, #12]
    b718:	e3530000 	cmp	r3, #0
    b71c:	e2433001 	sub	r3, r3, #1
    b720:	e580300c 	str	r3, [r0, #12]
    b724:	0a000017 	beq	b788 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    b728:	e3a03003 	mov	r3, #3
    b72c:	e5843008 	str	r3, [r4, #8]
    b730:	e28dd010 	add	sp, sp, #16
    b734:	e8bd8010 	pop	{r4, pc}
    b738:	e3a0209b 	mov	r2, #155	; 0x9b
    b73c:	e59f1080 	ldr	r1, [pc, #128]	; b7c4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    b740:	e59f0080 	ldr	r0, [pc, #128]	; b7c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    b744:	eb00625e 	bl	240c4 <assertion_failed>
    b748:	e3110020 	tst	r1, #32
    b74c:	13a03001 	movne	r3, #1
    b750:	15803008 	strne	r3, [r0, #8]
    b754:	1afffff5 	bne	b730 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b758:	e3a0206b 	mov	r2, #107	; 0x6b
    b75c:	e59f1060 	ldr	r1, [pc, #96]	; b7c4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    b760:	e59f0064 	ldr	r0, [pc, #100]	; b7cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    b764:	eb006256 	bl	240c4 <assertion_failed>
    b768:	e590300c 	ldr	r3, [r0, #12]
    b76c:	e3530000 	cmp	r3, #0
    b770:	e2433001 	sub	r3, r3, #1
    b774:	e580300c 	str	r3, [r0, #12]
    b778:	1affffea 	bne	b728 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    b77c:	e3a03005 	mov	r3, #5
    b780:	e5843008 	str	r3, [r4, #8]
    b784:	eaffffe9 	b	b730 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b788:	e59f0040 	ldr	r0, [pc, #64]	; b7d0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    b78c:	eb0077d9 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
    b790:	eafffff9 	b	b77c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    b794:	e58d100c 	str	r1, [sp, #12]
    b798:	eb006b3c 	bl	26490 <CLogger::Get()>
    b79c:	e59d100c 	ldr	r1, [sp, #12]
    b7a0:	e3a02001 	mov	r2, #1
    b7a4:	e58d1000 	str	r1, [sp]
    b7a8:	e59f3024 	ldr	r3, [pc, #36]	; b7d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    b7ac:	e59f1024 	ldr	r1, [pc, #36]	; b7d8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    b7b0:	eb006a73 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b7b4:	e3a02096 	mov	r2, #150	; 0x96
    b7b8:	e59f1004 	ldr	r1, [pc, #4]	; b7c4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    b7bc:	e59f0004 	ldr	r0, [pc, #4]	; b7c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    b7c0:	eb00623f 	bl	240c4 <assertion_failed>
    b7c4:	00040e50 	.word	0x00040e50
    b7c8:	000414b4 	.word	0x000414b4
    b7cc:	00040e68 	.word	0x00040e68
    b7d0:	00000271 	.word	0x00000271
    b7d4:	00040e8c 	.word	0x00040e8c
    b7d8:	00040ea0 	.word	0x00040ea0

0000b7dc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    b7dc:	e59f3034 	ldr	r3, [pc, #52]	; b818 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    b7e0:	e92d4010 	push	{r4, lr}
    b7e4:	e5803000 	str	r3, [r0]
    b7e8:	e1a04000 	mov	r4, r0
    b7ec:	eb0077f3 	bl	297c0 <CTimer::Get()>
    b7f0:	e3a03006 	mov	r3, #6
    b7f4:	e3500000 	cmp	r0, #0
    b7f8:	e9840009 	stmib	r4, {r0, r3}
    b7fc:	0a000001 	beq	b808 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    b800:	e1a00004 	mov	r0, r4
    b804:	e8bd8010 	pop	{r4, pc}
    b808:	e3a0202e 	mov	r2, #46	; 0x2e
    b80c:	e59f1008 	ldr	r1, [pc, #8]	; b81c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    b810:	e59f0008 	ldr	r0, [pc, #8]	; b820 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    b814:	eb00622a 	bl	240c4 <assertion_failed>
    b818:	00040e34 	.word	0x00040e34
    b81c:	00040e50 	.word	0x00040e50
    b820:	00040910 	.word	0x00040910

0000b824 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    b824:	e3500010 	cmp	r0, #16
    b828:	e92d4010 	push	{r4, lr}
    b82c:	1a000005 	bne	b848 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    b830:	e59f3030 	ldr	r3, [pc, #48]	; b868 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    b834:	e5930000 	ldr	r0, [r3]
    b838:	e3500000 	cmp	r0, #0
    b83c:	0a000005 	beq	b858 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    b840:	e8bd4010 	pop	{r4, lr}
    b844:	ea006324 	b	244dc <CClassAllocator::Allocate()>
    b848:	e3a020bd 	mov	r2, #189	; 0xbd
    b84c:	e59f1018 	ldr	r1, [pc, #24]	; b86c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    b850:	e59f0018 	ldr	r0, [pc, #24]	; b870 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    b854:	eb00621a 	bl	240c4 <assertion_failed>
    b858:	e3a020bd 	mov	r2, #189	; 0xbd
    b85c:	e59f1008 	ldr	r1, [pc, #8]	; b86c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    b860:	e59f000c 	ldr	r0, [pc, #12]	; b874 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    b864:	eb006216 	bl	240c4 <assertion_failed>
    b868:	00050128 	.word	0x00050128
    b86c:	00040e50 	.word	0x00040e50
    b870:	00040ea8 	.word	0x00040ea8
    b874:	00040edc 	.word	0x00040edc

0000b878 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    b878:	e3510010 	cmp	r1, #16
    b87c:	e92d4010 	push	{r4, lr}
    b880:	1a000007 	bne	b8a4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x2c>
    b884:	e59f3038 	ldr	r3, [pc, #56]	; b8c4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    b888:	e5933000 	ldr	r3, [r3]
    b88c:	e3530000 	cmp	r3, #0
    b890:	0a000007 	beq	b8b4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
    b894:	e8bd4010 	pop	{r4, lr}
    b898:	e1a01000 	mov	r1, r0
    b89c:	e1a00003 	mov	r0, r3
    b8a0:	ea006348 	b	245c8 <CClassAllocator::Free(void*)>
    b8a4:	e3a020bd 	mov	r2, #189	; 0xbd
    b8a8:	e59f1018 	ldr	r1, [pc, #24]	; b8c8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    b8ac:	e59f0018 	ldr	r0, [pc, #24]	; b8cc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    b8b0:	eb006203 	bl	240c4 <assertion_failed>
    b8b4:	e3a020bd 	mov	r2, #189	; 0xbd
    b8b8:	e59f1008 	ldr	r1, [pc, #8]	; b8c8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    b8bc:	e59f000c 	ldr	r0, [pc, #12]	; b8d0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x58>
    b8c0:	eb0061ff 	bl	240c4 <assertion_failed>
    b8c4:	00050128 	.word	0x00050128
    b8c8:	00040e50 	.word	0x00040e50
    b8cc:	00040ea8 	.word	0x00040ea8
    b8d0:	00040edc 	.word	0x00040edc

0000b8d4 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b8d4:	e92d4010 	push	{r4, lr}
    b8d8:	e1a04000 	mov	r4, r0
    b8dc:	e3a01010 	mov	r1, #16
    b8e0:	ebffffe4 	bl	b878 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    b8e4:	e1a00004 	mov	r0, r4
    b8e8:	e8bd8010 	pop	{r4, pc}

0000b8ec <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    b8ec:	e92d4070 	push	{r4, r5, r6, lr}
    b8f0:	e59f4040 	ldr	r4, [pc, #64]	; b938 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    b8f4:	e5943000 	ldr	r3, [r4]
    b8f8:	e3530000 	cmp	r3, #0
    b8fc:	1a000009 	bne	b928 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    b900:	e1a05000 	mov	r5, r0
    b904:	e3a0001c 	mov	r0, #28
    b908:	eb007c09 	bl	2a934 <operator new(unsigned int)>
    b90c:	e1a06000 	mov	r6, r0
    b910:	e1a02005 	mov	r2, r5
    b914:	e59f3020 	ldr	r3, [pc, #32]	; b93c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    b918:	e3a01010 	mov	r1, #16
    b91c:	eb0062d5 	bl	24478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b920:	e5846000 	str	r6, [r4]
    b924:	e8bd8070 	pop	{r4, r5, r6, pc}
    b928:	e3a020bd 	mov	r2, #189	; 0xbd
    b92c:	e59f100c 	ldr	r1, [pc, #12]	; b940 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    b930:	e59f000c 	ldr	r0, [pc, #12]	; b944 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    b934:	eb0061e2 	bl	240c4 <assertion_failed>
    b938:	00050128 	.word	0x00050128
    b93c:	00040f04 	.word	0x00040f04
    b940:	00040e50 	.word	0x00040e50
    b944:	00040ef0 	.word	0x00040ef0

0000b948 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    b948:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b94c:	e59f4054 	ldr	r4, [pc, #84]	; b9a8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    b950:	e1a05000 	mov	r5, r0
    b954:	e5940000 	ldr	r0, [r4]
    b958:	e24dd00c 	sub	sp, sp, #12
    b95c:	e3500000 	cmp	r0, #0
    b960:	1a00000c 	bne	b998 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    b964:	e1a06001 	mov	r6, r1
    b968:	e3a0001c 	mov	r0, #28
    b96c:	eb007bf0 	bl	2a934 <operator new(unsigned int)>
    b970:	e59f1034 	ldr	r1, [pc, #52]	; b9ac <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    b974:	e1a03006 	mov	r3, r6
    b978:	e58d1000 	str	r1, [sp]
    b97c:	e1a02005 	mov	r2, r5
    b980:	e3a01010 	mov	r1, #16
    b984:	e1a07000 	mov	r7, r0
    b988:	eb0062c6 	bl	244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b98c:	e5847000 	str	r7, [r4]
    b990:	e28dd00c 	add	sp, sp, #12
    b994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b998:	e3a020bd 	mov	r2, #189	; 0xbd
    b99c:	e59f100c 	ldr	r1, [pc, #12]	; b9b0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    b9a0:	e59f000c 	ldr	r0, [pc, #12]	; b9b4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    b9a4:	eb0061c6 	bl	240c4 <assertion_failed>
    b9a8:	00050128 	.word	0x00050128
    b9ac:	00040f04 	.word	0x00040f04
    b9b0:	00040e50 	.word	0x00040e50
    b9b4:	00040ef0 	.word	0x00040ef0

0000b9b8 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    b9b8:	e12fff1e 	bx	lr

0000b9bc <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    b9bc:	e1d000b6 	ldrh	r0, [r0, #6]
    b9c0:	e2000001 	and	r0, r0, #1
    b9c4:	e12fff1e 	bx	lr

0000b9c8 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    b9c8:	e92d4010 	push	{r4, lr}
    b9cc:	e3a02026 	mov	r2, #38	; 0x26
    b9d0:	e59f1004 	ldr	r1, [pc, #4]	; b9dc <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    b9d4:	e59f0004 	ldr	r0, [pc, #4]	; b9e0 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    b9d8:	eb0061b9 	bl	240c4 <assertion_failed>
    b9dc:	00040f48 	.word	0x00040f48
    b9e0:	000414b4 	.word	0x000414b4

0000b9e4 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    b9e4:	e92d4010 	push	{r4, lr}
    b9e8:	e3a0202b 	mov	r2, #43	; 0x2b
    b9ec:	e59f1004 	ldr	r1, [pc, #4]	; b9f8 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    b9f0:	e59f0004 	ldr	r0, [pc, #4]	; b9fc <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    b9f4:	eb0061b2 	bl	240c4 <assertion_failed>
    b9f8:	00040f48 	.word	0x00040f48
    b9fc:	000414b4 	.word	0x000414b4

0000ba00 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    ba00:	e92d4010 	push	{r4, lr}
    ba04:	e3a02031 	mov	r2, #49	; 0x31
    ba08:	e59f1004 	ldr	r1, [pc, #4]	; ba14 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    ba0c:	e59f0004 	ldr	r0, [pc, #4]	; ba18 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    ba10:	eb0061ab 	bl	240c4 <assertion_failed>
    ba14:	00040f48 	.word	0x00040f48
    ba18:	000414b4 	.word	0x000414b4

0000ba1c <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    ba1c:	e92d4030 	push	{r4, r5, lr}
    ba20:	e24dd014 	sub	sp, sp, #20
    ba24:	e1a05000 	mov	r5, r0
    ba28:	e59f1050 	ldr	r1, [pc, #80]	; ba80 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
    ba2c:	e28d0004 	add	r0, sp, #4
    ba30:	eb000192 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba34:	e28d0004 	add	r0, sp, #4
    ba38:	eb000199 	bl	c0a4 <CDWHCIRegister::Read()>
    ba3c:	e59f4040 	ldr	r4, [pc, #64]	; ba84 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    ba40:	e5d53004 	ldrb	r3, [r5, #4]
    ba44:	e2800001 	add	r0, r0, #1
    ba48:	e0000004 	and	r0, r0, r4
    ba4c:	e3530000 	cmp	r3, #0
    ba50:	e1c500b6 	strh	r0, [r5, #6]
    ba54:	1a000005 	bne	ba70 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
    ba58:	e28d0004 	add	r0, sp, #4
    ba5c:	eb000190 	bl	c0a4 <CDWHCIRegister::Read()>
    ba60:	e1d530b6 	ldrh	r3, [r5, #6]
    ba64:	e0000004 	and	r0, r0, r4
    ba68:	e1500003 	cmp	r0, r3
    ba6c:	1afffff9 	bne	ba58 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    ba70:	e28d0004 	add	r0, sp, #4
    ba74:	eb000189 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    ba78:	e28dd014 	add	sp, sp, #20
    ba7c:	e8bd8030 	pop	{r4, r5, pc}
    ba80:	20980408 	.word	0x20980408
    ba84:	00003fff 	.word	0x00003fff

0000ba88 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    ba88:	e3a02901 	mov	r2, #16384	; 0x4000
    ba8c:	e59fc00c 	ldr	ip, [pc, #12]	; baa0 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    ba90:	e5c01004 	strb	r1, [r0, #4]
    ba94:	e580c000 	str	ip, [r0]
    ba98:	e1c020b6 	strh	r2, [r0, #6]
    ba9c:	e12fff1e 	bx	lr
    baa0:	00040f2c 	.word	0x00040f2c

0000baa4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    baa4:	e3500008 	cmp	r0, #8
    baa8:	e92d4010 	push	{r4, lr}
    baac:	1a000005 	bne	bac8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    bab0:	e59f3030 	ldr	r3, [pc, #48]	; bae8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    bab4:	e5930000 	ldr	r0, [r3]
    bab8:	e3500000 	cmp	r0, #0
    babc:	0a000005 	beq	bad8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    bac0:	e8bd4010 	pop	{r4, lr}
    bac4:	ea006284 	b	244dc <CClassAllocator::Allocate()>
    bac8:	e3a0205a 	mov	r2, #90	; 0x5a
    bacc:	e59f1018 	ldr	r1, [pc, #24]	; baec <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    bad0:	e59f0018 	ldr	r0, [pc, #24]	; baf0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    bad4:	eb00617a 	bl	240c4 <assertion_failed>
    bad8:	e3a0205a 	mov	r2, #90	; 0x5a
    badc:	e59f1008 	ldr	r1, [pc, #8]	; baec <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    bae0:	e59f000c 	ldr	r0, [pc, #12]	; baf4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    bae4:	eb006176 	bl	240c4 <assertion_failed>
    bae8:	0005012c 	.word	0x0005012c
    baec:	00040f48 	.word	0x00040f48
    baf0:	00040f64 	.word	0x00040f64
    baf4:	00040edc 	.word	0x00040edc

0000baf8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    baf8:	e3510008 	cmp	r1, #8
    bafc:	e92d4010 	push	{r4, lr}
    bb00:	1a000007 	bne	bb24 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x2c>
    bb04:	e59f3038 	ldr	r3, [pc, #56]	; bb44 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    bb08:	e5933000 	ldr	r3, [r3]
    bb0c:	e3530000 	cmp	r3, #0
    bb10:	0a000007 	beq	bb34 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
    bb14:	e8bd4010 	pop	{r4, lr}
    bb18:	e1a01000 	mov	r1, r0
    bb1c:	e1a00003 	mov	r0, r3
    bb20:	ea0062a8 	b	245c8 <CClassAllocator::Free(void*)>
    bb24:	e3a0205a 	mov	r2, #90	; 0x5a
    bb28:	e59f1018 	ldr	r1, [pc, #24]	; bb48 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    bb2c:	e59f0018 	ldr	r0, [pc, #24]	; bb4c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    bb30:	eb006163 	bl	240c4 <assertion_failed>
    bb34:	e3a0205a 	mov	r2, #90	; 0x5a
    bb38:	e59f1008 	ldr	r1, [pc, #8]	; bb48 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    bb3c:	e59f000c 	ldr	r0, [pc, #12]	; bb50 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x58>
    bb40:	eb00615f 	bl	240c4 <assertion_failed>
    bb44:	0005012c 	.word	0x0005012c
    bb48:	00040f48 	.word	0x00040f48
    bb4c:	00040f64 	.word	0x00040f64
    bb50:	00040edc 	.word	0x00040edc

0000bb54 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    bb54:	e92d4010 	push	{r4, lr}
    bb58:	e1a04000 	mov	r4, r0
    bb5c:	e3a01008 	mov	r1, #8
    bb60:	ebffffe4 	bl	baf8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    bb64:	e1a00004 	mov	r0, r4
    bb68:	e8bd8010 	pop	{r4, pc}

0000bb6c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    bb6c:	e92d4070 	push	{r4, r5, r6, lr}
    bb70:	e59f4040 	ldr	r4, [pc, #64]	; bbb8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    bb74:	e5943000 	ldr	r3, [r4]
    bb78:	e3530000 	cmp	r3, #0
    bb7c:	1a000009 	bne	bba8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    bb80:	e1a05000 	mov	r5, r0
    bb84:	e3a0001c 	mov	r0, #28
    bb88:	eb007b69 	bl	2a934 <operator new(unsigned int)>
    bb8c:	e1a06000 	mov	r6, r0
    bb90:	e1a02005 	mov	r2, r5
    bb94:	e59f3020 	ldr	r3, [pc, #32]	; bbbc <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    bb98:	e3a01008 	mov	r1, #8
    bb9c:	eb006235 	bl	24478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bba0:	e5846000 	str	r6, [r4]
    bba4:	e8bd8070 	pop	{r4, r5, r6, pc}
    bba8:	e3a0205a 	mov	r2, #90	; 0x5a
    bbac:	e59f100c 	ldr	r1, [pc, #12]	; bbc0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    bbb0:	e59f000c 	ldr	r0, [pc, #12]	; bbc4 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    bbb4:	eb006142 	bl	240c4 <assertion_failed>
    bbb8:	0005012c 	.word	0x0005012c
    bbbc:	00040f94 	.word	0x00040f94
    bbc0:	00040f48 	.word	0x00040f48
    bbc4:	00040ef0 	.word	0x00040ef0

0000bbc8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    bbc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bbcc:	e59f4054 	ldr	r4, [pc, #84]	; bc28 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    bbd0:	e1a05000 	mov	r5, r0
    bbd4:	e5940000 	ldr	r0, [r4]
    bbd8:	e24dd00c 	sub	sp, sp, #12
    bbdc:	e3500000 	cmp	r0, #0
    bbe0:	1a00000c 	bne	bc18 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    bbe4:	e1a06001 	mov	r6, r1
    bbe8:	e3a0001c 	mov	r0, #28
    bbec:	eb007b50 	bl	2a934 <operator new(unsigned int)>
    bbf0:	e59f1034 	ldr	r1, [pc, #52]	; bc2c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    bbf4:	e1a03006 	mov	r3, r6
    bbf8:	e58d1000 	str	r1, [sp]
    bbfc:	e1a02005 	mov	r2, r5
    bc00:	e3a01008 	mov	r1, #8
    bc04:	e1a07000 	mov	r7, r0
    bc08:	eb006226 	bl	244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    bc0c:	e5847000 	str	r7, [r4]
    bc10:	e28dd00c 	add	sp, sp, #12
    bc14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    bc18:	e3a0205a 	mov	r2, #90	; 0x5a
    bc1c:	e59f100c 	ldr	r1, [pc, #12]	; bc30 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    bc20:	e59f000c 	ldr	r0, [pc, #12]	; bc34 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    bc24:	eb006126 	bl	240c4 <assertion_failed>
    bc28:	0005012c 	.word	0x0005012c
    bc2c:	00040f94 	.word	0x00040f94
    bc30:	00040f48 	.word	0x00040f48
    bc34:	00040ef0 	.word	0x00040ef0

0000bc38 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    bc38:	e12fff1e 	bx	lr

0000bc3c <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    bc3c:	e3a02901 	mov	r2, #16384	; 0x4000
    bc40:	e3a03000 	mov	r3, #0
    bc44:	e1c021b0 	strh	r2, [r0, #16]
    bc48:	e5803008 	str	r3, [r0, #8]
    bc4c:	e12fff1e 	bx	lr

0000bc50 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    bc50:	e1d001b0 	ldrh	r0, [r0, #16]
    bc54:	e2000001 	and	r0, r0, #1
    bc58:	e12fff1e 	bx	lr

0000bc5c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    bc5c:	e92d4010 	push	{r4, lr}
    bc60:	e1a04000 	mov	r4, r0
    bc64:	e24dd010 	sub	sp, sp, #16
    bc68:	e28d0004 	add	r0, sp, #4
    bc6c:	e59f1054 	ldr	r1, [pc, #84]	; bcc8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    bc70:	eb000102 	bl	c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc74:	e1d431b0 	ldrh	r3, [r4, #16]
    bc78:	e3530901 	cmp	r3, #16384	; 0x4000
    bc7c:	0a000009 	beq	bca8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    bc80:	e28d0004 	add	r0, sp, #4
    bc84:	eb000106 	bl	c0a4 <CDWHCIRegister::Read()>
    bc88:	e1d431b0 	ldrh	r3, [r4, #16]
    bc8c:	e2000007 	and	r0, r0, #7
    bc90:	e1500003 	cmp	r0, r3
    bc94:	1afffff9 	bne	bc80 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    bc98:	e28d0004 	add	r0, sp, #4
    bc9c:	eb0000ff 	bl	c0a0 <CDWHCIRegister::~CDWHCIRegister()>
    bca0:	e28dd010 	add	sp, sp, #16
    bca4:	e8bd8010 	pop	{r4, pc}
    bca8:	e28d0004 	add	r0, sp, #4
    bcac:	eb0000fc 	bl	c0a4 <CDWHCIRegister::Read()>
    bcb0:	e2803001 	add	r3, r0, #1
    bcb4:	e2033007 	and	r3, r3, #7
    bcb8:	e3530006 	cmp	r3, #6
    bcbc:	03a03007 	moveq	r3, #7
    bcc0:	e1c431b0 	strh	r3, [r4, #16]
    bcc4:	eaffffed 	b	bc80 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    bcc8:	20980408 	.word	0x20980408

0000bccc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    bccc:	e5903008 	ldr	r3, [r0, #8]
    bcd0:	e92d4010 	push	{r4, lr}
    bcd4:	e2433001 	sub	r3, r3, #1
    bcd8:	e3530004 	cmp	r3, #4
    bcdc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bce0:	ea00001c 	b	bd58 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    bce4:	0000bd20 	.word	0x0000bd20
    bce8:	0000bd58 	.word	0x0000bd58
    bcec:	0000bd00 	.word	0x0000bd00
    bcf0:	0000bcf8 	.word	0x0000bcf8
    bcf4:	0000bcf8 	.word	0x0000bcf8
    bcf8:	e3a00000 	mov	r0, #0
    bcfc:	e8bd8010 	pop	{r4, pc}
    bd00:	e1d031b0 	ldrh	r3, [r0, #16]
    bd04:	e3530901 	cmp	r3, #16384	; 0x4000
    bd08:	0a000016 	beq	bd68 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x9c>
    bd0c:	e2833001 	add	r3, r3, #1
    bd10:	e2033007 	and	r3, r3, #7
    bd14:	e1c031b0 	strh	r3, [r0, #16]
    bd18:	e3a00001 	mov	r0, #1
    bd1c:	e8bd8010 	pop	{r4, pc}
    bd20:	e3a02002 	mov	r2, #2
    bd24:	e1d031b0 	ldrh	r3, [r0, #16]
    bd28:	e5802008 	str	r2, [r0, #8]
    bd2c:	e3530901 	cmp	r3, #16384	; 0x4000
    bd30:	0a000010 	beq	bd78 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xac>
    bd34:	e3530005 	cmp	r3, #5
    bd38:	13a02003 	movne	r2, #3
    bd3c:	03a02002 	moveq	r2, #2
    bd40:	e2833002 	add	r3, r3, #2
    bd44:	e2033007 	and	r3, r3, #7
    bd48:	e1c031b0 	strh	r3, [r0, #16]
    bd4c:	e580200c 	str	r2, [r0, #12]
    bd50:	e3a00001 	mov	r0, #1
    bd54:	e8bd8010 	pop	{r4, pc}
    bd58:	e3a0206e 	mov	r2, #110	; 0x6e
    bd5c:	e59f1024 	ldr	r1, [pc, #36]	; bd88 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    bd60:	e59f0024 	ldr	r0, [pc, #36]	; bd8c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    bd64:	eb0060d6 	bl	240c4 <assertion_failed>
    bd68:	e3a02062 	mov	r2, #98	; 0x62
    bd6c:	e59f1014 	ldr	r1, [pc, #20]	; bd88 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    bd70:	e59f0018 	ldr	r0, [pc, #24]	; bd90 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    bd74:	eb0060d2 	bl	240c4 <assertion_failed>
    bd78:	e3a02054 	mov	r2, #84	; 0x54
    bd7c:	e59f1004 	ldr	r1, [pc, #4]	; bd88 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    bd80:	e59f0008 	ldr	r0, [pc, #8]	; bd90 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    bd84:	eb0060ce 	bl	240c4 <assertion_failed>
    bd88:	00040fd4 	.word	0x00040fd4
    bd8c:	000414b4 	.word	0x000414b4
    bd90:	00040fec 	.word	0x00040fec

0000bd94 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    bd94:	e92d4010 	push	{r4, lr}
    bd98:	e5903008 	ldr	r3, [r0, #8]
    bd9c:	e24dd010 	sub	sp, sp, #16
    bda0:	e3530000 	cmp	r3, #0
    bda4:	e1a04000 	mov	r4, r0
    bda8:	0a000014 	beq	be00 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
    bdac:	e2433002 	sub	r3, r3, #2
    bdb0:	e3530001 	cmp	r3, #1
    bdb4:	8a00000d 	bhi	bdf0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    bdb8:	e3110001 	tst	r1, #1
    bdbc:	13a03004 	movne	r3, #4
    bdc0:	15803008 	strne	r3, [r0, #8]
    bdc4:	1a000007 	bne	bde8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    bdc8:	e3110060 	tst	r1, #96	; 0x60
    bdcc:	1a000013 	bne	be20 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
    bdd0:	e3110010 	tst	r1, #16
    bdd4:	0a00001e 	beq	be54 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    bdd8:	e59f00a4 	ldr	r0, [pc, #164]	; be84 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    bddc:	eb007645 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
    bde0:	e3a03005 	mov	r3, #5
    bde4:	e5843008 	str	r3, [r4, #8]
    bde8:	e28dd010 	add	sp, sp, #16
    bdec:	e8bd8010 	pop	{r4, pc}
    bdf0:	e3a020a6 	mov	r2, #166	; 0xa6
    bdf4:	e59f108c 	ldr	r1, [pc, #140]	; be88 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    bdf8:	e59f008c 	ldr	r0, [pc, #140]	; be8c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    bdfc:	eb0060b0 	bl	240c4 <assertion_failed>
    be00:	e3110020 	tst	r1, #32
    be04:	13a03001 	movne	r3, #1
    be08:	15803008 	strne	r3, [r0, #8]
    be0c:	1afffff5 	bne	bde8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    be10:	e3a0207a 	mov	r2, #122	; 0x7a
    be14:	e59f106c 	ldr	r1, [pc, #108]	; be88 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    be18:	e59f0070 	ldr	r0, [pc, #112]	; be90 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    be1c:	eb0060a8 	bl	240c4 <assertion_failed>
    be20:	e590300c 	ldr	r3, [r0, #12]
    be24:	e3530000 	cmp	r3, #0
    be28:	e2433001 	sub	r3, r3, #1
    be2c:	e580300c 	str	r3, [r0, #12]
    be30:	13a03003 	movne	r3, #3
    be34:	15803008 	strne	r3, [r0, #8]
    be38:	1affffea 	bne	bde8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    be3c:	e3a03005 	mov	r3, #5
    be40:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    be44:	e5843008 	str	r3, [r4, #8]
    be48:	e28dd010 	add	sp, sp, #16
    be4c:	e8bd4010 	pop	{r4, lr}
    be50:	ea007628 	b	296f8 <CTimer::SimpleusDelay(unsigned int)>
    be54:	e58d100c 	str	r1, [sp, #12]
    be58:	eb00698c 	bl	26490 <CLogger::Get()>
    be5c:	e59d100c 	ldr	r1, [sp, #12]
    be60:	e3a02001 	mov	r2, #1
    be64:	e58d1000 	str	r1, [sp]
    be68:	e59f3024 	ldr	r3, [pc, #36]	; be94 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    be6c:	e59f1024 	ldr	r1, [pc, #36]	; be98 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    be70:	eb0068c3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be74:	e3a020a1 	mov	r2, #161	; 0xa1
    be78:	e59f1008 	ldr	r1, [pc, #8]	; be88 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    be7c:	e59f0008 	ldr	r0, [pc, #8]	; be8c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    be80:	eb00608f 	bl	240c4 <assertion_failed>
    be84:	00000271 	.word	0x00000271
    be88:	00040fd4 	.word	0x00040fd4
    be8c:	000414b4 	.word	0x000414b4
    be90:	00040e68 	.word	0x00040e68
    be94:	00040e8c 	.word	0x00040e8c
    be98:	00040ea0 	.word	0x00040ea0

0000be9c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    be9c:	e59f303c 	ldr	r3, [pc, #60]	; bee0 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    bea0:	e92d4010 	push	{r4, lr}
    bea4:	e5803000 	str	r3, [r0]
    bea8:	e1a04000 	mov	r4, r0
    beac:	eb007643 	bl	297c0 <CTimer::Get()>
    beb0:	e3a02006 	mov	r2, #6
    beb4:	e3a03901 	mov	r3, #16384	; 0x4000
    beb8:	e3500000 	cmp	r0, #0
    bebc:	e9840005 	stmib	r4, {r0, r2}
    bec0:	e1c431b0 	strh	r3, [r4, #16]
    bec4:	0a000001 	beq	bed0 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    bec8:	e1a00004 	mov	r0, r4
    becc:	e8bd8010 	pop	{r4, pc}
    bed0:	e3a02034 	mov	r2, #52	; 0x34
    bed4:	e59f1008 	ldr	r1, [pc, #8]	; bee4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    bed8:	e59f0008 	ldr	r0, [pc, #8]	; bee8 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    bedc:	eb006078 	bl	240c4 <assertion_failed>
    bee0:	00040fb8 	.word	0x00040fb8
    bee4:	00040fd4 	.word	0x00040fd4
    bee8:	00040910 	.word	0x00040910

0000beec <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    beec:	e3500014 	cmp	r0, #20
    bef0:	e92d4010 	push	{r4, lr}
    bef4:	1a000005 	bne	bf10 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    bef8:	e59f3030 	ldr	r3, [pc, #48]	; bf30 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    befc:	e5930000 	ldr	r0, [r3]
    bf00:	e3500000 	cmp	r0, #0
    bf04:	0a000005 	beq	bf20 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    bf08:	e8bd4010 	pop	{r4, lr}
    bf0c:	ea006172 	b	244dc <CClassAllocator::Allocate()>
    bf10:	e3a020e2 	mov	r2, #226	; 0xe2
    bf14:	e59f1018 	ldr	r1, [pc, #24]	; bf34 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    bf18:	e59f0018 	ldr	r0, [pc, #24]	; bf38 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    bf1c:	eb006068 	bl	240c4 <assertion_failed>
    bf20:	e3a020e2 	mov	r2, #226	; 0xe2
    bf24:	e59f1008 	ldr	r1, [pc, #8]	; bf34 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    bf28:	e59f000c 	ldr	r0, [pc, #12]	; bf3c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    bf2c:	eb006064 	bl	240c4 <assertion_failed>
    bf30:	00050130 	.word	0x00050130
    bf34:	00040fd4 	.word	0x00040fd4
    bf38:	0004100c 	.word	0x0004100c
    bf3c:	00040edc 	.word	0x00040edc

0000bf40 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    bf40:	e3510014 	cmp	r1, #20
    bf44:	e92d4010 	push	{r4, lr}
    bf48:	1a000007 	bne	bf6c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x2c>
    bf4c:	e59f3038 	ldr	r3, [pc, #56]	; bf8c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    bf50:	e5933000 	ldr	r3, [r3]
    bf54:	e3530000 	cmp	r3, #0
    bf58:	0a000007 	beq	bf7c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
    bf5c:	e8bd4010 	pop	{r4, lr}
    bf60:	e1a01000 	mov	r1, r0
    bf64:	e1a00003 	mov	r0, r3
    bf68:	ea006196 	b	245c8 <CClassAllocator::Free(void*)>
    bf6c:	e3a020e2 	mov	r2, #226	; 0xe2
    bf70:	e59f1018 	ldr	r1, [pc, #24]	; bf90 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    bf74:	e59f0018 	ldr	r0, [pc, #24]	; bf94 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    bf78:	eb006051 	bl	240c4 <assertion_failed>
    bf7c:	e3a020e2 	mov	r2, #226	; 0xe2
    bf80:	e59f1008 	ldr	r1, [pc, #8]	; bf90 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    bf84:	e59f000c 	ldr	r0, [pc, #12]	; bf98 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x58>
    bf88:	eb00604d 	bl	240c4 <assertion_failed>
    bf8c:	00050130 	.word	0x00050130
    bf90:	00040fd4 	.word	0x00040fd4
    bf94:	0004100c 	.word	0x0004100c
    bf98:	00040edc 	.word	0x00040edc

0000bf9c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    bf9c:	e92d4010 	push	{r4, lr}
    bfa0:	e1a04000 	mov	r4, r0
    bfa4:	e3a01014 	mov	r1, #20
    bfa8:	ebffffe4 	bl	bf40 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    bfac:	e1a00004 	mov	r0, r4
    bfb0:	e8bd8010 	pop	{r4, pc}

0000bfb4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    bfb4:	e92d4070 	push	{r4, r5, r6, lr}
    bfb8:	e59f4040 	ldr	r4, [pc, #64]	; c000 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    bfbc:	e5943000 	ldr	r3, [r4]
    bfc0:	e3530000 	cmp	r3, #0
    bfc4:	1a000009 	bne	bff0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    bfc8:	e1a05000 	mov	r5, r0
    bfcc:	e3a0001c 	mov	r0, #28
    bfd0:	eb007a57 	bl	2a934 <operator new(unsigned int)>
    bfd4:	e1a06000 	mov	r6, r0
    bfd8:	e1a02005 	mov	r2, r5
    bfdc:	e59f3020 	ldr	r3, [pc, #32]	; c004 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    bfe0:	e3a01014 	mov	r1, #20
    bfe4:	eb006123 	bl	24478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bfe8:	e5846000 	str	r6, [r4]
    bfec:	e8bd8070 	pop	{r4, r5, r6, pc}
    bff0:	e3a020e2 	mov	r2, #226	; 0xe2
    bff4:	e59f100c 	ldr	r1, [pc, #12]	; c008 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    bff8:	e59f000c 	ldr	r0, [pc, #12]	; c00c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    bffc:	eb006030 	bl	240c4 <assertion_failed>
    c000:	00050130 	.word	0x00050130
    c004:	0004103c 	.word	0x0004103c
    c008:	00040fd4 	.word	0x00040fd4
    c00c:	00040ef0 	.word	0x00040ef0

0000c010 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c010:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c014:	e59f4054 	ldr	r4, [pc, #84]	; c070 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c018:	e1a05000 	mov	r5, r0
    c01c:	e5940000 	ldr	r0, [r4]
    c020:	e24dd00c 	sub	sp, sp, #12
    c024:	e3500000 	cmp	r0, #0
    c028:	1a00000c 	bne	c060 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c02c:	e1a06001 	mov	r6, r1
    c030:	e3a0001c 	mov	r0, #28
    c034:	eb007a3e 	bl	2a934 <operator new(unsigned int)>
    c038:	e59f1034 	ldr	r1, [pc, #52]	; c074 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c03c:	e1a03006 	mov	r3, r6
    c040:	e58d1000 	str	r1, [sp]
    c044:	e1a02005 	mov	r2, r5
    c048:	e3a01014 	mov	r1, #20
    c04c:	e1a07000 	mov	r7, r0
    c050:	eb006114 	bl	244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c054:	e5847000 	str	r7, [r4]
    c058:	e28dd00c 	add	sp, sp, #12
    c05c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c060:	e3a020e2 	mov	r2, #226	; 0xe2
    c064:	e59f100c 	ldr	r1, [pc, #12]	; c078 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c068:	e59f000c 	ldr	r0, [pc, #12]	; c07c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c06c:	eb006014 	bl	240c4 <assertion_failed>
    c070:	00050130 	.word	0x00050130
    c074:	0004103c 	.word	0x0004103c
    c078:	00040fd4 	.word	0x00040fd4
    c07c:	00040ef0 	.word	0x00040ef0

0000c080 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    c080:	e3a02000 	mov	r2, #0
    c084:	e5801004 	str	r1, [r0, #4]
    c088:	e5c02000 	strb	r2, [r0]
    c08c:	e12fff1e 	bx	lr

0000c090 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    c090:	e3a0c001 	mov	ip, #1
    c094:	e9800006 	stmib	r0, {r1, r2}
    c098:	e5c0c000 	strb	ip, [r0]
    c09c:	e12fff1e 	bx	lr

0000c0a0 <CDWHCIRegister::~CDWHCIRegister()>:
    c0a0:	e12fff1e 	bx	lr

0000c0a4 <CDWHCIRegister::Read()>:
    c0a4:	e1a03000 	mov	r3, r0
    c0a8:	e3a02001 	mov	r2, #1
    c0ac:	e5901004 	ldr	r1, [r0, #4]
    c0b0:	e5910000 	ldr	r0, [r1]
    c0b4:	e5c32000 	strb	r2, [r3]
    c0b8:	e5830008 	str	r0, [r3, #8]
    c0bc:	e12fff1e 	bx	lr

0000c0c0 <CDWHCIRegister::Write()>:
    c0c0:	e5d03000 	ldrb	r3, [r0]
    c0c4:	e3530000 	cmp	r3, #0
    c0c8:	0a000003 	beq	c0dc <CDWHCIRegister::Write()+0x1c>
    c0cc:	e5902008 	ldr	r2, [r0, #8]
    c0d0:	e5903004 	ldr	r3, [r0, #4]
    c0d4:	e5832000 	str	r2, [r3]
    c0d8:	e12fff1e 	bx	lr
    c0dc:	e92d4010 	push	{r4, lr}
    c0e0:	e3a02035 	mov	r2, #53	; 0x35
    c0e4:	e59f1004 	ldr	r1, [pc, #4]	; c0f0 <CDWHCIRegister::Write()+0x30>
    c0e8:	e59f0004 	ldr	r0, [pc, #4]	; c0f4 <CDWHCIRegister::Write()+0x34>
    c0ec:	eb005ff4 	bl	240c4 <assertion_failed>
    c0f0:	0004105c 	.word	0x0004105c
    c0f4:	00041070 	.word	0x00041070

0000c0f8 <CDWHCIRegister::Get() const>:
    c0f8:	e5d03000 	ldrb	r3, [r0]
    c0fc:	e3530000 	cmp	r3, #0
    c100:	0a000001 	beq	c10c <CDWHCIRegister::Get() const+0x14>
    c104:	e5900008 	ldr	r0, [r0, #8]
    c108:	e12fff1e 	bx	lr
    c10c:	e92d4010 	push	{r4, lr}
    c110:	e3a0203b 	mov	r2, #59	; 0x3b
    c114:	e59f1004 	ldr	r1, [pc, #4]	; c120 <CDWHCIRegister::Get() const+0x28>
    c118:	e59f0004 	ldr	r0, [pc, #4]	; c124 <CDWHCIRegister::Get() const+0x2c>
    c11c:	eb005fe8 	bl	240c4 <assertion_failed>
    c120:	0004105c 	.word	0x0004105c
    c124:	00041070 	.word	0x00041070

0000c128 <CDWHCIRegister::Set(unsigned int)>:
    c128:	e3a03001 	mov	r3, #1
    c12c:	e5801008 	str	r1, [r0, #8]
    c130:	e5c03000 	strb	r3, [r0]
    c134:	e12fff1e 	bx	lr

0000c138 <CDWHCIRegister::IsSet(unsigned int) const>:
    c138:	e5d03000 	ldrb	r3, [r0]
    c13c:	e3530000 	cmp	r3, #0
    c140:	0a000004 	beq	c158 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    c144:	e5903008 	ldr	r3, [r0, #8]
    c148:	e1110003 	tst	r1, r3
    c14c:	13a00001 	movne	r0, #1
    c150:	03a00000 	moveq	r0, #0
    c154:	e12fff1e 	bx	lr
    c158:	e92d4010 	push	{r4, lr}
    c15c:	e3a02047 	mov	r2, #71	; 0x47
    c160:	e59f1004 	ldr	r1, [pc, #4]	; c16c <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    c164:	e59f0004 	ldr	r0, [pc, #4]	; c170 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    c168:	eb005fd5 	bl	240c4 <assertion_failed>
    c16c:	0004105c 	.word	0x0004105c
    c170:	00041070 	.word	0x00041070

0000c174 <CDWHCIRegister::And(unsigned int)>:
    c174:	e5d03000 	ldrb	r3, [r0]
    c178:	e3530000 	cmp	r3, #0
    c17c:	0a000003 	beq	c190 <CDWHCIRegister::And(unsigned int)+0x1c>
    c180:	e5903008 	ldr	r3, [r0, #8]
    c184:	e0011003 	and	r1, r1, r3
    c188:	e5801008 	str	r1, [r0, #8]
    c18c:	e12fff1e 	bx	lr
    c190:	e92d4010 	push	{r4, lr}
    c194:	e3a0204d 	mov	r2, #77	; 0x4d
    c198:	e59f1004 	ldr	r1, [pc, #4]	; c1a4 <CDWHCIRegister::And(unsigned int)+0x30>
    c19c:	e59f0004 	ldr	r0, [pc, #4]	; c1a8 <CDWHCIRegister::And(unsigned int)+0x34>
    c1a0:	eb005fc7 	bl	240c4 <assertion_failed>
    c1a4:	0004105c 	.word	0x0004105c
    c1a8:	00041070 	.word	0x00041070

0000c1ac <CDWHCIRegister::Or(unsigned int)>:
    c1ac:	e5d03000 	ldrb	r3, [r0]
    c1b0:	e3530000 	cmp	r3, #0
    c1b4:	0a000003 	beq	c1c8 <CDWHCIRegister::Or(unsigned int)+0x1c>
    c1b8:	e5903008 	ldr	r3, [r0, #8]
    c1bc:	e1831001 	orr	r1, r3, r1
    c1c0:	e5801008 	str	r1, [r0, #8]
    c1c4:	e12fff1e 	bx	lr
    c1c8:	e92d4010 	push	{r4, lr}
    c1cc:	e3a02053 	mov	r2, #83	; 0x53
    c1d0:	e59f1004 	ldr	r1, [pc, #4]	; c1dc <CDWHCIRegister::Or(unsigned int)+0x30>
    c1d4:	e59f0004 	ldr	r0, [pc, #4]	; c1e0 <CDWHCIRegister::Or(unsigned int)+0x34>
    c1d8:	eb005fb9 	bl	240c4 <assertion_failed>
    c1dc:	0004105c 	.word	0x0004105c
    c1e0:	00041070 	.word	0x00041070

0000c1e4 <CDWHCIRegister::ClearBit(unsigned int)>:
    c1e4:	e5d03000 	ldrb	r3, [r0]
    c1e8:	e92d4010 	push	{r4, lr}
    c1ec:	e3530000 	cmp	r3, #0
    c1f0:	0a000006 	beq	c210 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    c1f4:	e351001f 	cmp	r1, #31
    c1f8:	8a000008 	bhi	c220 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    c1fc:	e3a02001 	mov	r2, #1
    c200:	e5903008 	ldr	r3, [r0, #8]
    c204:	e1c31112 	bic	r1, r3, r2, lsl r1
    c208:	e5801008 	str	r1, [r0, #8]
    c20c:	e8bd8010 	pop	{r4, pc}
    c210:	e3a02059 	mov	r2, #89	; 0x59
    c214:	e59f1014 	ldr	r1, [pc, #20]	; c230 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    c218:	e59f0014 	ldr	r0, [pc, #20]	; c234 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    c21c:	eb005fa8 	bl	240c4 <assertion_failed>
    c220:	e3a0205a 	mov	r2, #90	; 0x5a
    c224:	e59f1004 	ldr	r1, [pc, #4]	; c230 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    c228:	e59f0008 	ldr	r0, [pc, #8]	; c238 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    c22c:	eb005fa4 	bl	240c4 <assertion_failed>
    c230:	0004105c 	.word	0x0004105c
    c234:	00041070 	.word	0x00041070
    c238:	0004107c 	.word	0x0004107c

0000c23c <CDWHCIRegister::SetBit(unsigned int)>:
    c23c:	e5d03000 	ldrb	r3, [r0]
    c240:	e92d4010 	push	{r4, lr}
    c244:	e3530000 	cmp	r3, #0
    c248:	0a000006 	beq	c268 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    c24c:	e351001f 	cmp	r1, #31
    c250:	8a000008 	bhi	c278 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    c254:	e3a02001 	mov	r2, #1
    c258:	e5903008 	ldr	r3, [r0, #8]
    c25c:	e1831112 	orr	r1, r3, r2, lsl r1
    c260:	e5801008 	str	r1, [r0, #8]
    c264:	e8bd8010 	pop	{r4, pc}
    c268:	e3a02060 	mov	r2, #96	; 0x60
    c26c:	e59f1014 	ldr	r1, [pc, #20]	; c288 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    c270:	e59f0014 	ldr	r0, [pc, #20]	; c28c <CDWHCIRegister::SetBit(unsigned int)+0x50>
    c274:	eb005f92 	bl	240c4 <assertion_failed>
    c278:	e3a02061 	mov	r2, #97	; 0x61
    c27c:	e59f1004 	ldr	r1, [pc, #4]	; c288 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    c280:	e59f0008 	ldr	r0, [pc, #8]	; c290 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    c284:	eb005f8e 	bl	240c4 <assertion_failed>
    c288:	0004105c 	.word	0x0004105c
    c28c:	00041070 	.word	0x00041070
    c290:	0004107c 	.word	0x0004107c

0000c294 <CDWHCIRegister::ClearAll()>:
    c294:	e3a02000 	mov	r2, #0
    c298:	e3a03001 	mov	r3, #1
    c29c:	e5802008 	str	r2, [r0, #8]
    c2a0:	e5c03000 	strb	r3, [r0]
    c2a4:	e12fff1e 	bx	lr

0000c2a8 <CDWHCIRegister::SetAll()>:
    c2a8:	e3e02000 	mvn	r2, #0
    c2ac:	e3a03001 	mov	r3, #1
    c2b0:	e5802008 	str	r2, [r0, #8]
    c2b4:	e5c03000 	strb	r3, [r0]
    c2b8:	e12fff1e 	bx	lr

0000c2bc <CDWHCIRegister::Dump() const>:
    c2bc:	e92d4010 	push	{r4, lr}
    c2c0:	e5d03000 	ldrb	r3, [r0]
    c2c4:	e24dd008 	sub	sp, sp, #8
    c2c8:	e3530000 	cmp	r3, #0
    c2cc:	e1a04000 	mov	r4, r0
    c2d0:	1a00000a 	bne	c300 <CDWHCIRegister::Dump() const+0x44>
    c2d4:	eb00686d 	bl	26490 <CLogger::Get()>
    c2d8:	e5942004 	ldr	r2, [r4, #4]
    c2dc:	e59f3050 	ldr	r3, [pc, #80]	; c334 <CDWHCIRegister::Dump() const+0x78>
    c2e0:	e1a02a02 	lsl	r2, r2, #20
    c2e4:	e1a02a22 	lsr	r2, r2, #20
    c2e8:	e58d2000 	str	r2, [sp]
    c2ec:	e59f1044 	ldr	r1, [pc, #68]	; c338 <CDWHCIRegister::Dump() const+0x7c>
    c2f0:	e3a02004 	mov	r2, #4
    c2f4:	eb0067a2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c2f8:	e28dd008 	add	sp, sp, #8
    c2fc:	e8bd8010 	pop	{r4, pc}
    c300:	eb006862 	bl	26490 <CLogger::Get()>
    c304:	e5943004 	ldr	r3, [r4, #4]
    c308:	e5942008 	ldr	r2, [r4, #8]
    c30c:	e1a03a03 	lsl	r3, r3, #20
    c310:	e1a03a23 	lsr	r3, r3, #20
    c314:	e58d3000 	str	r3, [sp]
    c318:	e58d2004 	str	r2, [sp, #4]
    c31c:	e59f3018 	ldr	r3, [pc, #24]	; c33c <CDWHCIRegister::Dump() const+0x80>
    c320:	e3a02004 	mov	r2, #4
    c324:	e59f100c 	ldr	r1, [pc, #12]	; c338 <CDWHCIRegister::Dump() const+0x7c>
    c328:	eb006795 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c32c:	e28dd008 	add	sp, sp, #8
    c330:	e8bd8010 	pop	{r4, pc}
    c334:	000410bc 	.word	0x000410bc
    c338:	000410b4 	.word	0x000410b4
    c33c:	00041098 	.word	0x00041098

0000c340 <CDWHCIRootPort::~CDWHCIRootPort()>:
    c340:	e92d4010 	push	{r4, lr}
    c344:	e1a04000 	mov	r4, r0
    c348:	e5900008 	ldr	r0, [r0, #8]
    c34c:	e59f301c 	ldr	r3, [pc, #28]	; c370 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    c350:	e3500000 	cmp	r0, #0
    c354:	e5843000 	str	r3, [r4]
    c358:	0a000002 	beq	c368 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c35c:	e5903000 	ldr	r3, [r0]
    c360:	e5933004 	ldr	r3, [r3, #4]
    c364:	e12fff33 	blx	r3
    c368:	e1a00004 	mov	r0, r4
    c36c:	e8bd8010 	pop	{r4, pc}
    c370:	000410e4 	.word	0x000410e4

0000c374 <CDWHCIRootPort::~CDWHCIRootPort()>:
    c374:	e92d4010 	push	{r4, lr}
    c378:	e1a04000 	mov	r4, r0
    c37c:	e5900008 	ldr	r0, [r0, #8]
    c380:	e59f3028 	ldr	r3, [pc, #40]	; c3b0 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    c384:	e3500000 	cmp	r0, #0
    c388:	e5843000 	str	r3, [r4]
    c38c:	0a000002 	beq	c39c <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c390:	e5903000 	ldr	r3, [r0]
    c394:	e5933004 	ldr	r3, [r3, #4]
    c398:	e12fff33 	blx	r3
    c39c:	e1a00004 	mov	r0, r4
    c3a0:	e3a0100c 	mov	r1, #12
    c3a4:	eb007970 	bl	2a96c <operator delete(void*, unsigned int)>
    c3a8:	e1a00004 	mov	r0, r4
    c3ac:	e8bd8010 	pop	{r4, pc}
    c3b0:	000410e4 	.word	0x000410e4

0000c3b4 <CDWHCIRootPort::RemoveDevice()>:
    c3b4:	e92d4010 	push	{r4, lr}
    c3b8:	e1a04000 	mov	r4, r0
    c3bc:	e5900004 	ldr	r0, [r0, #4]
    c3c0:	e3500000 	cmp	r0, #0
    c3c4:	0a00000b 	beq	c3f8 <CDWHCIRootPort::RemoveDevice()+0x44>
    c3c8:	e3a01000 	mov	r1, #0
    c3cc:	ebfff359 	bl	9138 <CDWHCIDevice::DisableRootPort(bool)>
    c3d0:	e5940008 	ldr	r0, [r4, #8]
    c3d4:	e3500000 	cmp	r0, #0
    c3d8:	0a000002 	beq	c3e8 <CDWHCIRootPort::RemoveDevice()+0x34>
    c3dc:	e5903000 	ldr	r3, [r0]
    c3e0:	e5933004 	ldr	r3, [r3, #4]
    c3e4:	e12fff33 	blx	r3
    c3e8:	e3a03000 	mov	r3, #0
    c3ec:	e3a00001 	mov	r0, #1
    c3f0:	e5843008 	str	r3, [r4, #8]
    c3f4:	e8bd8010 	pop	{r4, pc}
    c3f8:	e3a0206d 	mov	r2, #109	; 0x6d
    c3fc:	e59f1004 	ldr	r1, [pc, #4]	; c408 <CDWHCIRootPort::RemoveDevice()+0x54>
    c400:	e59f0004 	ldr	r0, [pc, #4]	; c40c <CDWHCIRootPort::RemoveDevice()+0x58>
    c404:	eb005f2e 	bl	240c4 <assertion_failed>
    c408:	000410fc 	.word	0x000410fc
    c40c:	00041110 	.word	0x00041110

0000c410 <CDWHCIRootPort::ReScanDevices()>:
    c410:	e92d4010 	push	{r4, lr}
    c414:	e5904008 	ldr	r4, [r0, #8]
    c418:	e3540000 	cmp	r4, #0
    c41c:	0a000002 	beq	c42c <CDWHCIRootPort::ReScanDevices()+0x1c>
    c420:	e1a00004 	mov	r0, r4
    c424:	e8bd4010 	pop	{r4, lr}
    c428:	ea0003f8 	b	d410 <CUSBDevice::ReScanDevices()>
    c42c:	eb006817 	bl	26490 <CLogger::Get()>
    c430:	e59f3010 	ldr	r3, [pc, #16]	; c448 <CDWHCIRootPort::ReScanDevices()+0x38>
    c434:	e3a02002 	mov	r2, #2
    c438:	e59f100c 	ldr	r1, [pc, #12]	; c44c <CDWHCIRootPort::ReScanDevices()+0x3c>
    c43c:	eb006750 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c440:	e1a00004 	mov	r0, r4
    c444:	e8bd8010 	pop	{r4, pc}
    c448:	00041120 	.word	0x00041120
    c44c:	000410f4 	.word	0x000410f4

0000c450 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    c450:	e3a02000 	mov	r2, #0
    c454:	e59fc028 	ldr	ip, [pc, #40]	; c484 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    c458:	e1510002 	cmp	r1, r2
    c45c:	e5801004 	str	r1, [r0, #4]
    c460:	e580c000 	str	ip, [r0]
    c464:	e5802008 	str	r2, [r0, #8]
    c468:	0a000000 	beq	c470 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
    c46c:	e12fff1e 	bx	lr
    c470:	e92d4010 	push	{r4, lr}
    c474:	e3a0201f 	mov	r2, #31
    c478:	e59f1008 	ldr	r1, [pc, #8]	; c488 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    c47c:	e59f0008 	ldr	r0, [pc, #8]	; c48c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
    c480:	eb005f0f 	bl	240c4 <assertion_failed>
    c484:	000410e4 	.word	0x000410e4
    c488:	000410fc 	.word	0x000410fc
    c48c:	00041110 	.word	0x00041110

0000c490 <CDWHCIRootPort::Initialize()>:
    c490:	e92d4070 	push	{r4, r5, r6, lr}
    c494:	e1a04000 	mov	r4, r0
    c498:	e5900004 	ldr	r0, [r0, #4]
    c49c:	e3500000 	cmp	r0, #0
    c4a0:	0a00002b 	beq	c554 <CDWHCIRootPort::Initialize()+0xc4>
    c4a4:	ebfff2ff 	bl	90a8 <CDWHCIDevice::GetPortSpeed()>
    c4a8:	e3500004 	cmp	r0, #4
    c4ac:	e1a05000 	mov	r5, r0
    c4b0:	0a000040 	beq	c5b8 <CDWHCIRootPort::Initialize()+0x128>
    c4b4:	e5943008 	ldr	r3, [r4, #8]
    c4b8:	e3530000 	cmp	r3, #0
    c4bc:	1a000044 	bne	c5d4 <CDWHCIRootPort::Initialize()+0x144>
    c4c0:	e3a00058 	mov	r0, #88	; 0x58
    c4c4:	eb00791a 	bl	2a934 <operator new(unsigned int)>
    c4c8:	e1a06000 	mov	r6, r0
    c4cc:	e1a03004 	mov	r3, r4
    c4d0:	e1a02005 	mov	r2, r5
    c4d4:	e5941004 	ldr	r1, [r4, #4]
    c4d8:	eb000344 	bl	d1f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    c4dc:	e5846008 	str	r6, [r4, #8]
    c4e0:	e1a00006 	mov	r0, r6
    c4e4:	eb0004f6 	bl	d8c4 <CUSBDevice::Initialize()>
    c4e8:	e3500000 	cmp	r0, #0
    c4ec:	e5940008 	ldr	r0, [r4, #8]
    c4f0:	1a000009 	bne	c51c <CDWHCIRootPort::Initialize()+0x8c>
    c4f4:	e3500000 	cmp	r0, #0
    c4f8:	0a000002 	beq	c508 <CDWHCIRootPort::Initialize()+0x78>
    c4fc:	e5903000 	ldr	r3, [r0]
    c500:	e5933004 	ldr	r3, [r3, #4]
    c504:	e12fff33 	blx	r3
    c508:	e3a00000 	mov	r0, #0
    c50c:	e1a05000 	mov	r5, r0
    c510:	e5840008 	str	r0, [r4, #8]
    c514:	e1a00005 	mov	r0, r5
    c518:	e8bd8070 	pop	{r4, r5, r6, pc}
    c51c:	e5903000 	ldr	r3, [r0]
    c520:	e593300c 	ldr	r3, [r3, #12]
    c524:	e12fff33 	blx	r3
    c528:	e2505000 	subs	r5, r0, #0
    c52c:	1a00000c 	bne	c564 <CDWHCIRootPort::Initialize()+0xd4>
    c530:	eb0067d6 	bl	26490 <CLogger::Get()>
    c534:	e59f30a8 	ldr	r3, [pc, #168]	; c5e4 <CDWHCIRootPort::Initialize()+0x154>
    c538:	e3a02002 	mov	r2, #2
    c53c:	e59f10a4 	ldr	r1, [pc, #164]	; c5e8 <CDWHCIRootPort::Initialize()+0x158>
    c540:	eb00670f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c544:	e5940008 	ldr	r0, [r4, #8]
    c548:	e3500000 	cmp	r0, #0
    c54c:	1affffea 	bne	c4fc <CDWHCIRootPort::Initialize()+0x6c>
    c550:	eaffffec 	b	c508 <CDWHCIRootPort::Initialize()+0x78>
    c554:	e3a0202c 	mov	r2, #44	; 0x2c
    c558:	e59f108c 	ldr	r1, [pc, #140]	; c5ec <CDWHCIRootPort::Initialize()+0x15c>
    c55c:	e59f008c 	ldr	r0, [pc, #140]	; c5f0 <CDWHCIRootPort::Initialize()+0x160>
    c560:	eb005ed7 	bl	240c4 <assertion_failed>
    c564:	eb0067c9 	bl	26490 <CLogger::Get()>
    c568:	e59f3084 	ldr	r3, [pc, #132]	; c5f4 <CDWHCIRootPort::Initialize()+0x164>
    c56c:	e3a02004 	mov	r2, #4
    c570:	e59f1070 	ldr	r1, [pc, #112]	; c5e8 <CDWHCIRootPort::Initialize()+0x158>
    c574:	eb006702 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c578:	e5940004 	ldr	r0, [r4, #4]
    c57c:	ebfff2de 	bl	90fc <CDWHCIDevice::OvercurrentDetected()>
    c580:	e3500000 	cmp	r0, #0
    c584:	0affffe2 	beq	c514 <CDWHCIRootPort::Initialize()+0x84>
    c588:	eb0067c0 	bl	26490 <CLogger::Get()>
    c58c:	e59f3064 	ldr	r3, [pc, #100]	; c5f8 <CDWHCIRootPort::Initialize()+0x168>
    c590:	e3a02001 	mov	r2, #1
    c594:	e59f104c 	ldr	r1, [pc, #76]	; c5e8 <CDWHCIRootPort::Initialize()+0x158>
    c598:	eb0066f9 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c59c:	e5940004 	ldr	r0, [r4, #4]
    c5a0:	e3a01001 	mov	r1, #1
    c5a4:	ebfff2e3 	bl	9138 <CDWHCIDevice::DisableRootPort(bool)>
    c5a8:	e5940008 	ldr	r0, [r4, #8]
    c5ac:	e3500000 	cmp	r0, #0
    c5b0:	1affffd1 	bne	c4fc <CDWHCIRootPort::Initialize()+0x6c>
    c5b4:	eaffffd3 	b	c508 <CDWHCIRootPort::Initialize()+0x78>
    c5b8:	eb0067b4 	bl	26490 <CLogger::Get()>
    c5bc:	e59f3038 	ldr	r3, [pc, #56]	; c5fc <CDWHCIRootPort::Initialize()+0x16c>
    c5c0:	e3a02001 	mov	r2, #1
    c5c4:	e59f101c 	ldr	r1, [pc, #28]	; c5e8 <CDWHCIRootPort::Initialize()+0x158>
    c5c8:	eb0066ed 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c5cc:	e3a05000 	mov	r5, #0
    c5d0:	eaffffcf 	b	c514 <CDWHCIRootPort::Initialize()+0x84>
    c5d4:	e3a02036 	mov	r2, #54	; 0x36
    c5d8:	e59f100c 	ldr	r1, [pc, #12]	; c5ec <CDWHCIRootPort::Initialize()+0x15c>
    c5dc:	e59f001c 	ldr	r0, [pc, #28]	; c600 <CDWHCIRootPort::Initialize()+0x170>
    c5e0:	eb005eb7 	bl	240c4 <assertion_failed>
    c5e4:	0004117c 	.word	0x0004117c
    c5e8:	000410f4 	.word	0x000410f4
    c5ec:	000410fc 	.word	0x000410fc
    c5f0:	00041110 	.word	0x00041110
    c5f4:	00041194 	.word	0x00041194
    c5f8:	000411a8 	.word	0x000411a8
    c5fc:	00041150 	.word	0x00041150
    c600:	0004116c 	.word	0x0004116c

0000c604 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c604:	e92d4010 	push	{r4, lr}
    c608:	e1a04000 	mov	r4, r0
    c60c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c610:	e3500000 	cmp	r0, #0
    c614:	0a000002 	beq	c624 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c618:	e5903000 	ldr	r3, [r0]
    c61c:	e5933004 	ldr	r3, [r3, #4]
    c620:	e12fff33 	blx	r3
    c624:	e3a03000 	mov	r3, #0
    c628:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    c62c:	e5843050 	str	r3, [r4, #80]	; 0x50
    c630:	e1500003 	cmp	r0, r3
    c634:	e5843048 	str	r3, [r4, #72]	; 0x48
    c638:	0a000000 	beq	c640 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c63c:	eb0078c4 	bl	2a954 <operator delete[](void*)>
    c640:	e1a00004 	mov	r0, r4
    c644:	e8bd8010 	pop	{r4, pc}

0000c648 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    c648:	e5801000 	str	r1, [r0]
    c64c:	e12fff1e 	bx	lr

0000c650 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c650:	e92d4070 	push	{r4, r5, r6, lr}
    c654:	e1a04000 	mov	r4, r0
    c658:	e59f0174 	ldr	r0, [pc, #372]	; c7d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    c65c:	e5841040 	str	r1, [r4, #64]	; 0x40
    c660:	e0000001 	and	r0, r0, r1
    c664:	e3500000 	cmp	r0, #0
    c668:	0a000006 	beq	c688 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    c66c:	e3110010 	tst	r1, #16
    c670:	08bd8070 	popeq	{r4, r5, r6, pc}
    c674:	e5940004 	ldr	r0, [r4, #4]
    c678:	eb001e24 	bl	13f10 <CUSBRequest::IsCompleteOnNAK() const>
    c67c:	e3500000 	cmp	r0, #0
    c680:	1a000039 	bne	c76c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x11c>
    c684:	e8bd8070 	pop	{r4, r5, r6, pc}
    c688:	e5d40010 	ldrb	r0, [r4, #16]
    c68c:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    c690:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    c694:	e3500000 	cmp	r0, #0
    c698:	e0455002 	sub	r5, r5, r2
    c69c:	e0413003 	sub	r3, r1, r3
    c6a0:	1a000018 	bne	c708 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    c6a4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c6a8:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c6ac:	e0811003 	add	r1, r1, r3
    c6b0:	e0823003 	add	r3, r2, r3
    c6b4:	e5841034 	str	r1, [r4, #52]	; 0x34
    c6b8:	e5843048 	str	r3, [r4, #72]	; 0x48
    c6bc:	e5d42009 	ldrb	r2, [r4, #9]
    c6c0:	e1a01005 	mov	r1, r5
    c6c4:	e5940018 	ldr	r0, [r4, #24]
    c6c8:	eb000879 	bl	e8b4 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    c6cc:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c6d0:	e1550002 	cmp	r5, r2
    c6d4:	8a00002e 	bhi	c794 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    c6d8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    c6dc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c6e0:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c6e4:	e0410003 	sub	r0, r1, r3
    c6e8:	e0422005 	sub	r2, r2, r5
    c6ec:	e150000c 	cmp	r0, ip
    c6f0:	e5842028 	str	r2, [r4, #40]	; 0x28
    c6f4:	28bd8070 	popcs	{r4, r5, r6, pc}
    c6f8:	e1510003 	cmp	r1, r3
    c6fc:	3a000028 	bcc	c7a4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x154>
    c700:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c704:	e8bd8070 	pop	{r4, r5, r6, pc}
    c708:	e5d40011 	ldrb	r0, [r4, #17]
    c70c:	e3530000 	cmp	r3, #0
    c710:	13a02000 	movne	r2, #0
    c714:	02002001 	andeq	r2, r0, #1
    c718:	e3520000 	cmp	r2, #0
    c71c:	0a000009 	beq	c748 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    c720:	e3510000 	cmp	r1, #0
    c724:	15941020 	ldrne	r1, [r4, #32]
    c728:	10010591 	mulne	r1, r1, r5
    c72c:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c730:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c734:	e0822001 	add	r2, r2, r1
    c738:	e0831001 	add	r1, r3, r1
    c73c:	e5842034 	str	r2, [r4, #52]	; 0x34
    c740:	e5841048 	str	r1, [r4, #72]	; 0x48
    c744:	eaffffdc 	b	c6bc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c748:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c74c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c750:	e0811003 	add	r1, r1, r3
    c754:	e3500000 	cmp	r0, #0
    c758:	e0823003 	add	r3, r2, r3
    c75c:	e5841034 	str	r1, [r4, #52]	; 0x34
    c760:	e5843048 	str	r3, [r4, #72]	; 0x48
    c764:	0affffd8 	beq	c6cc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x7c>
    c768:	eaffffd3 	b	c6bc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    c76c:	e5940018 	ldr	r0, [r4, #24]
    c770:	eb00082a 	bl	e820 <CUSBEndpoint::GetType() const>
    c774:	e3500001 	cmp	r0, #1
    c778:	1a00000d 	bne	c7b4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x164>
    c77c:	e5d43008 	ldrb	r3, [r4, #8]
    c780:	e3530000 	cmp	r3, #0
    c784:	0a00000e 	beq	c7c4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x174>
    c788:	e3a03000 	mov	r3, #0
    c78c:	e5843028 	str	r3, [r4, #40]	; 0x28
    c790:	e8bd8070 	pop	{r4, r5, r6, pc}
    c794:	e3a020d6 	mov	r2, #214	; 0xd6
    c798:	e59f1038 	ldr	r1, [pc, #56]	; c7d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    c79c:	e59f0038 	ldr	r0, [pc, #56]	; c7dc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    c7a0:	eb005e47 	bl	240c4 <assertion_failed>
    c7a4:	e3a020dc 	mov	r2, #220	; 0xdc
    c7a8:	e59f1028 	ldr	r1, [pc, #40]	; c7d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    c7ac:	e59f002c 	ldr	r0, [pc, #44]	; c7e0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    c7b0:	eb005e43 	bl	240c4 <assertion_failed>
    c7b4:	e3a020b9 	mov	r2, #185	; 0xb9
    c7b8:	e59f1018 	ldr	r1, [pc, #24]	; c7d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    c7bc:	e59f0020 	ldr	r0, [pc, #32]	; c7e4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    c7c0:	eb005e3f 	bl	240c4 <assertion_failed>
    c7c4:	e3a020ba 	mov	r2, #186	; 0xba
    c7c8:	e59f1008 	ldr	r1, [pc, #8]	; c7d8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    c7cc:	e59f0014 	ldr	r0, [pc, #20]	; c7e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    c7d0:	eb005e3b 	bl	240c4 <assertion_failed>
    c7d4:	000007dc 	.word	0x000007dc
    c7d8:	000411c0 	.word	0x000411c0
    c7dc:	0004120c 	.word	0x0004120c
    c7e0:	00041230 	.word	0x00041230
    c7e4:	000411d8 	.word	0x000411d8
    c7e8:	00041204 	.word	0x00041204

0000c7ec <CDWHCITransferStageData::SetSplitComplete(bool)>:
    c7ec:	e5d03010 	ldrb	r3, [r0, #16]
    c7f0:	e3530000 	cmp	r3, #0
    c7f4:	0a000001 	beq	c800 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    c7f8:	e5c01011 	strb	r1, [r0, #17]
    c7fc:	e12fff1e 	bx	lr
    c800:	e92d4010 	push	{r4, lr}
    c804:	e3a020e3 	mov	r2, #227	; 0xe3
    c808:	e59f1004 	ldr	r1, [pc, #4]	; c814 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    c80c:	e59f0004 	ldr	r0, [pc, #4]	; c818 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    c810:	eb005e2b 	bl	240c4 <assertion_failed>
    c814:	000411c0 	.word	0x000411c0
    c818:	0004125c 	.word	0x0004125c

0000c81c <CDWHCITransferStageData::SetState(unsigned int)>:
    c81c:	e5801038 	str	r1, [r0, #56]	; 0x38
    c820:	e12fff1e 	bx	lr

0000c824 <CDWHCITransferStageData::GetState() const>:
    c824:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    c828:	e12fff1e 	bx	lr

0000c82c <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c82c:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c830:	e12fff1e 	bx	lr

0000c834 <CDWHCITransferStageData::GetSubState() const>:
    c834:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c838:	e12fff1e 	bx	lr

0000c83c <CDWHCITransferStageData::BeginSplitCycle()>:
    c83c:	e3a00001 	mov	r0, #1
    c840:	e12fff1e 	bx	lr

0000c844 <CDWHCITransferStageData::GetChannelNumber() const>:
    c844:	e5900000 	ldr	r0, [r0]
    c848:	e12fff1e 	bx	lr

0000c84c <CDWHCITransferStageData::IsPeriodic() const>:
    c84c:	e5900018 	ldr	r0, [r0, #24]
    c850:	e92d4010 	push	{r4, lr}
    c854:	e3500000 	cmp	r0, #0
    c858:	0a000006 	beq	c878 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    c85c:	eb0007ef 	bl	e820 <CUSBEndpoint::GetType() const>
    c860:	e2400002 	sub	r0, r0, #2
    c864:	e6ef0070 	uxtb	r0, r0
    c868:	e3500001 	cmp	r0, #1
    c86c:	83a00000 	movhi	r0, #0
    c870:	93a00001 	movls	r0, #1
    c874:	e8bd8010 	pop	{r4, pc}
    c878:	e3a02f42 	mov	r2, #264	; 0x108
    c87c:	e59f1004 	ldr	r1, [pc, #4]	; c888 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    c880:	e59f0004 	ldr	r0, [pc, #4]	; c88c <CDWHCITransferStageData::IsPeriodic() const+0x40>
    c884:	eb005e0e 	bl	240c4 <assertion_failed>
    c888:	000411c0 	.word	0x000411c0
    c88c:	00041270 	.word	0x00041270

0000c890 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    c890:	e92d4070 	push	{r4, r5, r6, lr}
    c894:	e1a05002 	mov	r5, r2
    c898:	e3a02000 	mov	r2, #0
    c89c:	e5dd6010 	ldrb	r6, [sp, #16]
    c8a0:	e1550002 	cmp	r5, r2
    c8a4:	e8800022 	stm	r0, {r1, r5}
    c8a8:	e5c03008 	strb	r3, [r0, #8]
    c8ac:	e5c06009 	strb	r6, [r0, #9]
    c8b0:	e580200c 	str	r2, [r0, #12]
    c8b4:	e5c02011 	strb	r2, [r0, #17]
    c8b8:	e5802034 	str	r2, [r0, #52]	; 0x34
    c8bc:	e5802038 	str	r2, [r0, #56]	; 0x38
    c8c0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c8c4:	e5802040 	str	r2, [r0, #64]	; 0x40
    c8c8:	e5802044 	str	r2, [r0, #68]	; 0x44
    c8cc:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c8d0:	e5802050 	str	r2, [r0, #80]	; 0x50
    c8d4:	0a00008b 	beq	cb08 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x278>
    c8d8:	e1a04000 	mov	r4, r0
    c8dc:	e1a00005 	mov	r0, r5
    c8e0:	eb001d29 	bl	13d8c <CUSBRequest::GetEndpoint() const>
    c8e4:	e3500000 	cmp	r0, #0
    c8e8:	e5840018 	str	r0, [r4, #24]
    c8ec:	0a000089 	beq	cb18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    c8f0:	eb0007bd 	bl	e7ec <CUSBEndpoint::GetDevice() const>
    c8f4:	e3500000 	cmp	r0, #0
    c8f8:	e5840014 	str	r0, [r4, #20]
    c8fc:	0a000089 	beq	cb28 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    c900:	eb000374 	bl	d6d8 <CUSBDevice::GetSpeed() const>
    c904:	e5c4001c 	strb	r0, [r4, #28]
    c908:	e5940018 	ldr	r0, [r4, #24]
    c90c:	eb0007ca 	bl	e83c <CUSBEndpoint::GetMaxPacketSize() const>
    c910:	e5840020 	str	r0, [r4, #32]
    c914:	e5940014 	ldr	r0, [r4, #20]
    c918:	eb000370 	bl	d6e0 <CUSBDevice::IsSplit() const>
    c91c:	e3560000 	cmp	r6, #0
    c920:	e5c40010 	strb	r0, [r4, #16]
    c924:	0a00002f 	beq	c9e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x158>
    c928:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    c92c:	e3550000 	cmp	r5, #0
    c930:	1a00006c 	bne	cae8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x258>
    c934:	e3a00004 	mov	r0, #4
    c938:	eb0077fe 	bl	2a938 <operator new[](unsigned int)>
    c93c:	e3a03001 	mov	r3, #1
    c940:	e5840044 	str	r0, [r4, #68]	; 0x44
    c944:	e5840048 	str	r0, [r4, #72]	; 0x48
    c948:	e5845024 	str	r5, [r4, #36]	; 0x24
    c94c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c950:	e5843028 	str	r3, [r4, #40]	; 0x28
    c954:	e5843030 	str	r3, [r4, #48]	; 0x30
    c958:	e3100003 	tst	r0, #3
    c95c:	1a000075 	bne	cb38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    c960:	e5d43010 	ldrb	r3, [r4, #16]
    c964:	e3530000 	cmp	r3, #0
    c968:	0a00000d 	beq	c9a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x114>
    c96c:	e1a00004 	mov	r0, r4
    c970:	ebffffb5 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    c974:	e3500000 	cmp	r0, #0
    c978:	0a00003b 	beq	ca6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    c97c:	e3a00014 	mov	r0, #20
    c980:	ebfffd59 	bl	beec <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    c984:	e1a05000 	mov	r5, r0
    c988:	ebfffd43 	bl	be9c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    c98c:	e5845050 	str	r5, [r4, #80]	; 0x50
    c990:	e59d3014 	ldr	r3, [sp, #20]
    c994:	e3530000 	cmp	r3, #0
    c998:	1a00003b 	bne	ca8c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1fc>
    c99c:	e1a00004 	mov	r0, r4
    c9a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c9a4:	e5940014 	ldr	r0, [r4, #20]
    c9a8:	eb00034e 	bl	d6e8 <CUSBDevice::GetHubAddress() const>
    c9ac:	e3500000 	cmp	r0, #0
    c9b0:	1afffff6 	bne	c990 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    c9b4:	e5d4301c 	ldrb	r3, [r4, #28]
    c9b8:	e3530002 	cmp	r3, #2
    c9bc:	0afffff3 	beq	c990 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    c9c0:	e1a00004 	mov	r0, r4
    c9c4:	ebffffa0 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    c9c8:	e1a06000 	mov	r6, r0
    c9cc:	e3a00008 	mov	r0, #8
    c9d0:	ebfffc33 	bl	baa4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    c9d4:	e1a05000 	mov	r5, r0
    c9d8:	e1a01006 	mov	r1, r6
    c9dc:	ebfffc29 	bl	ba88 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    c9e0:	e5845050 	str	r5, [r4, #80]	; 0x50
    c9e4:	eaffffe9 	b	c990 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    c9e8:	e1a01006 	mov	r1, r6
    c9ec:	e5940018 	ldr	r0, [r4, #24]
    c9f0:	eb00079f 	bl	e874 <CUSBEndpoint::GetNextPID(bool)>
    c9f4:	e3500000 	cmp	r0, #0
    c9f8:	e1a00005 	mov	r0, r5
    c9fc:	0a000034 	beq	cad4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x244>
    ca00:	eb001d12 	bl	13e50 <CUSBRequest::GetBuffer()>
    ca04:	e5840048 	str	r0, [r4, #72]	; 0x48
    ca08:	e1a00005 	mov	r0, r5
    ca0c:	eb001d1e 	bl	13e8c <CUSBRequest::GetBufLen() const>
    ca10:	e1a05000 	mov	r5, r0
    ca14:	e5840024 	str	r0, [r4, #36]	; 0x24
    ca18:	e5946020 	ldr	r6, [r4, #32]
    ca1c:	e2460001 	sub	r0, r6, #1
    ca20:	e0800005 	add	r0, r0, r5
    ca24:	e1a01006 	mov	r1, r6
    ca28:	eb00cbdc 	bl	3f9a0 <__aeabi_uidiv>
    ca2c:	e5d43010 	ldrb	r3, [r4, #16]
    ca30:	e5840028 	str	r0, [r4, #40]	; 0x28
    ca34:	e3530000 	cmp	r3, #0
    ca38:	0a00002e 	beq	caf8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    ca3c:	e1560005 	cmp	r6, r5
    ca40:	31a05006 	movcc	r5, r6
    ca44:	e3a03001 	mov	r3, #1
    ca48:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    ca4c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    ca50:	e5843030 	str	r3, [r4, #48]	; 0x30
    ca54:	e3500000 	cmp	r0, #0
    ca58:	1affffbe 	bne	c958 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xc8>
    ca5c:	e3a0206c 	mov	r2, #108	; 0x6c
    ca60:	e59f1100 	ldr	r1, [pc, #256]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    ca64:	e59f0100 	ldr	r0, [pc, #256]	; cb6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    ca68:	eb005d95 	bl	240c4 <assertion_failed>
    ca6c:	e3a00010 	mov	r0, #16
    ca70:	ebfffb6b 	bl	b824 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    ca74:	e1a05000 	mov	r5, r0
    ca78:	ebfffb57 	bl	b7dc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    ca7c:	e59d3014 	ldr	r3, [sp, #20]
    ca80:	e5845050 	str	r5, [r4, #80]	; 0x50
    ca84:	e3530000 	cmp	r3, #0
    ca88:	0affffc3 	beq	c99c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x10c>
    ca8c:	e5940018 	ldr	r0, [r4, #24]
    ca90:	eb000762 	bl	e820 <CUSBEndpoint::GetType() const>
    ca94:	e3500002 	cmp	r0, #2
    ca98:	1a00002a 	bne	cb48 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    ca9c:	e3a03064 	mov	r3, #100	; 0x64
    caa0:	e59d2014 	ldr	r2, [sp, #20]
    caa4:	e0030293 	mul	r3, r3, r2
    caa8:	e59f20c0 	ldr	r2, [pc, #192]	; cb70 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    caac:	e0832392 	umull	r2, r3, r2, r3
    cab0:	e1a03323 	lsr	r3, r3, #6
    cab4:	e3530000 	cmp	r3, #0
    cab8:	e584300c 	str	r3, [r4, #12]
    cabc:	0a000025 	beq	cb58 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    cac0:	eb00733e 	bl	297c0 <CTimer::Get()>
    cac4:	eb007087 	bl	28ce8 <CTimer::GetTicks() const>
    cac8:	e584004c 	str	r0, [r4, #76]	; 0x4c
    cacc:	e1a00004 	mov	r0, r4
    cad0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cad4:	eb001cc9 	bl	13e00 <CUSBRequest::GetSetupData()>
    cad8:	e3a05008 	mov	r5, #8
    cadc:	e5840048 	str	r0, [r4, #72]	; 0x48
    cae0:	e5845024 	str	r5, [r4, #36]	; 0x24
    cae4:	eaffffcb 	b	ca18 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x188>
    cae8:	e3a02061 	mov	r2, #97	; 0x61
    caec:	e59f1074 	ldr	r1, [pc, #116]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    caf0:	e59f007c 	ldr	r0, [pc, #124]	; cb74 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e4>
    caf4:	eb005d72 	bl	240c4 <assertion_failed>
    caf8:	e5840030 	str	r0, [r4, #48]	; 0x30
    cafc:	e584502c 	str	r5, [r4, #44]	; 0x2c
    cb00:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    cb04:	eaffffd2 	b	ca54 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    cb08:	e3a02031 	mov	r2, #49	; 0x31
    cb0c:	e59f1054 	ldr	r1, [pc, #84]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb10:	e59f0060 	ldr	r0, [pc, #96]	; cb78 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    cb14:	eb005d6a 	bl	240c4 <assertion_failed>
    cb18:	e3a02034 	mov	r2, #52	; 0x34
    cb1c:	e59f1044 	ldr	r1, [pc, #68]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb20:	e59f0054 	ldr	r0, [pc, #84]	; cb7c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2ec>
    cb24:	eb005d66 	bl	240c4 <assertion_failed>
    cb28:	e3a02036 	mov	r2, #54	; 0x36
    cb2c:	e59f1034 	ldr	r1, [pc, #52]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb30:	e59f0048 	ldr	r0, [pc, #72]	; cb80 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f0>
    cb34:	eb005d62 	bl	240c4 <assertion_failed>
    cb38:	e3a0206d 	mov	r2, #109	; 0x6d
    cb3c:	e59f1024 	ldr	r1, [pc, #36]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb40:	e59f003c 	ldr	r0, [pc, #60]	; cb84 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    cb44:	eb005d5e 	bl	240c4 <assertion_failed>
    cb48:	e3a02088 	mov	r2, #136	; 0x88
    cb4c:	e59f1014 	ldr	r1, [pc, #20]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb50:	e59f0030 	ldr	r0, [pc, #48]	; cb88 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    cb54:	eb005d5a 	bl	240c4 <assertion_failed>
    cb58:	e3a0208b 	mov	r2, #139	; 0x8b
    cb5c:	e59f1004 	ldr	r1, [pc, #4]	; cb68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    cb60:	e59f0024 	ldr	r0, [pc, #36]	; cb8c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    cb64:	eb005d56 	bl	240c4 <assertion_failed>
    cb68:	000411c0 	.word	0x000411c0
    cb6c:	000412b4 	.word	0x000412b4
    cb70:	10624dd3 	.word	0x10624dd3
    cb74:	000412a0 	.word	0x000412a0
    cb78:	00041284 	.word	0x00041284
    cb7c:	00041270 	.word	0x00041270
    cb80:	00041290 	.word	0x00041290
    cb84:	000412cc 	.word	0x000412cc
    cb88:	000412f4 	.word	0x000412f4
    cb8c:	00041328 	.word	0x00041328

0000cb90 <CDWHCITransferStageData::GetDeviceAddress() const>:
    cb90:	e5900014 	ldr	r0, [r0, #20]
    cb94:	e3500000 	cmp	r0, #0
    cb98:	0a000000 	beq	cba0 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    cb9c:	ea0002cb 	b	d6d0 <CUSBDevice::GetAddress() const>
    cba0:	e92d4010 	push	{r4, lr}
    cba4:	e59f2008 	ldr	r2, [pc, #8]	; cbb4 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    cba8:	e59f1008 	ldr	r1, [pc, #8]	; cbb8 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    cbac:	e59f0008 	ldr	r0, [pc, #8]	; cbbc <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    cbb0:	eb005d43 	bl	240c4 <assertion_failed>
    cbb4:	00000111 	.word	0x00000111
    cbb8:	000411c0 	.word	0x000411c0
    cbbc:	00041290 	.word	0x00041290

0000cbc0 <CDWHCITransferStageData::GetEndpointType() const>:
    cbc0:	e5900018 	ldr	r0, [r0, #24]
    cbc4:	e92d4010 	push	{r4, lr}
    cbc8:	e3500000 	cmp	r0, #0
    cbcc:	0a00000f 	beq	cc10 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    cbd0:	eb000712 	bl	e820 <CUSBEndpoint::GetType() const>
    cbd4:	e3500001 	cmp	r0, #1
    cbd8:	0a00000a 	beq	cc08 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    cbdc:	3a000003 	bcc	cbf0 <CDWHCITransferStageData::GetEndpointType() const+0x30>
    cbe0:	e3500002 	cmp	r0, #2
    cbe4:	1a000003 	bne	cbf8 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    cbe8:	e3a00003 	mov	r0, #3
    cbec:	e8bd8010 	pop	{r4, pc}
    cbf0:	e3a00000 	mov	r0, #0
    cbf4:	e8bd8010 	pop	{r4, pc}
    cbf8:	e59f2020 	ldr	r2, [pc, #32]	; cc20 <CDWHCITransferStageData::GetEndpointType() const+0x60>
    cbfc:	e59f1020 	ldr	r1, [pc, #32]	; cc24 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    cc00:	e59f0020 	ldr	r0, [pc, #32]	; cc28 <CDWHCITransferStageData::GetEndpointType() const+0x68>
    cc04:	eb005d2e 	bl	240c4 <assertion_failed>
    cc08:	e3a00002 	mov	r0, #2
    cc0c:	e8bd8010 	pop	{r4, pc}
    cc10:	e59f2014 	ldr	r2, [pc, #20]	; cc2c <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    cc14:	e59f1008 	ldr	r1, [pc, #8]	; cc24 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    cc18:	e59f0010 	ldr	r0, [pc, #16]	; cc30 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    cc1c:	eb005d28 	bl	240c4 <assertion_failed>
    cc20:	0000012a 	.word	0x0000012a
    cc24:	000411c0 	.word	0x000411c0
    cc28:	000414b4 	.word	0x000414b4
    cc2c:	00000117 	.word	0x00000117
    cc30:	00041270 	.word	0x00041270

0000cc34 <CDWHCITransferStageData::GetEndpointNumber() const>:
    cc34:	e5900018 	ldr	r0, [r0, #24]
    cc38:	e3500000 	cmp	r0, #0
    cc3c:	0a000000 	beq	cc44 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    cc40:	ea0006f4 	b	e818 <CUSBEndpoint::GetNumber() const>
    cc44:	e92d4010 	push	{r4, lr}
    cc48:	e59f2008 	ldr	r2, [pc, #8]	; cc58 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    cc4c:	e59f1008 	ldr	r1, [pc, #8]	; cc5c <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    cc50:	e59f0008 	ldr	r0, [pc, #8]	; cc60 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    cc54:	eb005d1a 	bl	240c4 <assertion_failed>
    cc58:	00000133 	.word	0x00000133
    cc5c:	000411c0 	.word	0x000411c0
    cc60:	00041270 	.word	0x00041270

0000cc64 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    cc64:	e5900020 	ldr	r0, [r0, #32]
    cc68:	e12fff1e 	bx	lr

0000cc6c <CDWHCITransferStageData::GetSpeed() const>:
    cc6c:	e5d0001c 	ldrb	r0, [r0, #28]
    cc70:	e12fff1e 	bx	lr

0000cc74 <CDWHCITransferStageData::GetPID() const>:
    cc74:	e5903018 	ldr	r3, [r0, #24]
    cc78:	e92d4010 	push	{r4, lr}
    cc7c:	e3530000 	cmp	r3, #0
    cc80:	0a00000f 	beq	ccc4 <CDWHCITransferStageData::GetPID() const+0x50>
    cc84:	e5d01009 	ldrb	r1, [r0, #9]
    cc88:	e1a00003 	mov	r0, r3
    cc8c:	eb0006f8 	bl	e874 <CUSBEndpoint::GetNextPID(bool)>
    cc90:	e3500001 	cmp	r0, #1
    cc94:	0a000008 	beq	ccbc <CDWHCITransferStageData::GetPID() const+0x48>
    cc98:	3a000005 	bcc	ccb4 <CDWHCITransferStageData::GetPID() const+0x40>
    cc9c:	e3500002 	cmp	r0, #2
    cca0:	08bd8010 	popeq	{r4, pc}
    cca4:	e59f2028 	ldr	r2, [pc, #40]	; ccd4 <CDWHCITransferStageData::GetPID() const+0x60>
    cca8:	e59f1028 	ldr	r1, [pc, #40]	; ccd8 <CDWHCITransferStageData::GetPID() const+0x64>
    ccac:	e59f0028 	ldr	r0, [pc, #40]	; ccdc <CDWHCITransferStageData::GetPID() const+0x68>
    ccb0:	eb005d03 	bl	240c4 <assertion_failed>
    ccb4:	e3a00003 	mov	r0, #3
    ccb8:	e8bd8010 	pop	{r4, pc}
    ccbc:	e3a00000 	mov	r0, #0
    ccc0:	e8bd8010 	pop	{r4, pc}
    ccc4:	e59f2014 	ldr	r2, [pc, #20]	; cce0 <CDWHCITransferStageData::GetPID() const+0x6c>
    ccc8:	e59f1008 	ldr	r1, [pc, #8]	; ccd8 <CDWHCITransferStageData::GetPID() const+0x64>
    cccc:	e59f0010 	ldr	r0, [pc, #16]	; cce4 <CDWHCITransferStageData::GetPID() const+0x70>
    ccd0:	eb005cfb 	bl	240c4 <assertion_failed>
    ccd4:	00000156 	.word	0x00000156
    ccd8:	000411c0 	.word	0x000411c0
    ccdc:	000414b4 	.word	0x000414b4
    cce0:	00000143 	.word	0x00000143
    cce4:	00041270 	.word	0x00041270

0000cce8 <CDWHCITransferStageData::IsDirectionIn() const>:
    cce8:	e5d00008 	ldrb	r0, [r0, #8]
    ccec:	e12fff1e 	bx	lr

0000ccf0 <CDWHCITransferStageData::IsStatusStage() const>:
    ccf0:	e5d00009 	ldrb	r0, [r0, #9]
    ccf4:	e12fff1e 	bx	lr

0000ccf8 <CDWHCITransferStageData::GetDMAAddress() const>:
    ccf8:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    ccfc:	e3500000 	cmp	r0, #0
    cd00:	0a000000 	beq	cd08 <CDWHCITransferStageData::GetDMAAddress() const+0x10>
    cd04:	e12fff1e 	bx	lr
    cd08:	e92d4010 	push	{r4, lr}
    cd0c:	e59f2008 	ldr	r2, [pc, #8]	; cd1c <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    cd10:	e59f1008 	ldr	r1, [pc, #8]	; cd20 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    cd14:	e59f0008 	ldr	r0, [pc, #8]	; cd24 <CDWHCITransferStageData::GetDMAAddress() const+0x2c>
    cd18:	eb005ce9 	bl	240c4 <assertion_failed>
    cd1c:	00000169 	.word	0x00000169
    cd20:	000411c0 	.word	0x000411c0
    cd24:	000412b4 	.word	0x000412b4

0000cd28 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    cd28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cd2c:	e12fff1e 	bx	lr

0000cd30 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    cd30:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    cd34:	e12fff1e 	bx	lr

0000cd38 <CDWHCITransferStageData::IsSplit() const>:
    cd38:	e5d00010 	ldrb	r0, [r0, #16]
    cd3c:	e12fff1e 	bx	lr

0000cd40 <CDWHCITransferStageData::IsSplitComplete() const>:
    cd40:	e5d03010 	ldrb	r3, [r0, #16]
    cd44:	e3530000 	cmp	r3, #0
    cd48:	0a000001 	beq	cd54 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    cd4c:	e5d00011 	ldrb	r0, [r0, #17]
    cd50:	e12fff1e 	bx	lr
    cd54:	e92d4010 	push	{r4, lr}
    cd58:	e59f2008 	ldr	r2, [pc, #8]	; cd68 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    cd5c:	e59f1008 	ldr	r1, [pc, #8]	; cd6c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    cd60:	e59f0008 	ldr	r0, [pc, #8]	; cd70 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    cd64:	eb005cd6 	bl	240c4 <assertion_failed>
    cd68:	0000017f 	.word	0x0000017f
    cd6c:	000411c0 	.word	0x000411c0
    cd70:	0004125c 	.word	0x0004125c

0000cd74 <CDWHCITransferStageData::GetHubAddress() const>:
    cd74:	e5d03010 	ldrb	r3, [r0, #16]
    cd78:	e92d4010 	push	{r4, lr}
    cd7c:	e3530000 	cmp	r3, #0
    cd80:	0a000004 	beq	cd98 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    cd84:	e5900014 	ldr	r0, [r0, #20]
    cd88:	e3500000 	cmp	r0, #0
    cd8c:	0a000005 	beq	cda8 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    cd90:	e8bd4010 	pop	{r4, lr}
    cd94:	ea000253 	b	d6e8 <CUSBDevice::GetHubAddress() const>
    cd98:	e59f2018 	ldr	r2, [pc, #24]	; cdb8 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    cd9c:	e59f1018 	ldr	r1, [pc, #24]	; cdbc <CDWHCITransferStageData::GetHubAddress() const+0x48>
    cda0:	e59f0018 	ldr	r0, [pc, #24]	; cdc0 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    cda4:	eb005cc6 	bl	240c4 <assertion_failed>
    cda8:	e3a02f62 	mov	r2, #392	; 0x188
    cdac:	e59f1008 	ldr	r1, [pc, #8]	; cdbc <CDWHCITransferStageData::GetHubAddress() const+0x48>
    cdb0:	e59f000c 	ldr	r0, [pc, #12]	; cdc4 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    cdb4:	eb005cc2 	bl	240c4 <assertion_failed>
    cdb8:	00000186 	.word	0x00000186
    cdbc:	000411c0 	.word	0x000411c0
    cdc0:	0004125c 	.word	0x0004125c
    cdc4:	00041290 	.word	0x00041290

0000cdc8 <CDWHCITransferStageData::GetHubPortAddress() const>:
    cdc8:	e5d03010 	ldrb	r3, [r0, #16]
    cdcc:	e92d4010 	push	{r4, lr}
    cdd0:	e3530000 	cmp	r3, #0
    cdd4:	0a000004 	beq	cdec <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    cdd8:	e5900014 	ldr	r0, [r0, #20]
    cddc:	e3500000 	cmp	r0, #0
    cde0:	0a000005 	beq	cdfc <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    cde4:	e8bd4010 	pop	{r4, lr}
    cde8:	ea000240 	b	d6f0 <CUSBDevice::GetHubPortNumber() const>
    cdec:	e59f2018 	ldr	r2, [pc, #24]	; ce0c <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    cdf0:	e59f1018 	ldr	r1, [pc, #24]	; ce10 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    cdf4:	e59f0018 	ldr	r0, [pc, #24]	; ce14 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    cdf8:	eb005cb1 	bl	240c4 <assertion_failed>
    cdfc:	e3a02e19 	mov	r2, #400	; 0x190
    ce00:	e59f1008 	ldr	r1, [pc, #8]	; ce10 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    ce04:	e59f000c 	ldr	r0, [pc, #12]	; ce18 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    ce08:	eb005cad 	bl	240c4 <assertion_failed>
    ce0c:	0000018e 	.word	0x0000018e
    ce10:	000411c0 	.word	0x000411c0
    ce14:	0004125c 	.word	0x0004125c
    ce18:	00041290 	.word	0x00041290

0000ce1c <CDWHCITransferStageData::GetSplitPosition() const>:
    ce1c:	e3a00003 	mov	r0, #3
    ce20:	e12fff1e 	bx	lr

0000ce24 <CDWHCITransferStageData::GetStatusMask() const>:
    ce24:	e5d03010 	ldrb	r3, [r0, #16]
    ce28:	e3530000 	cmp	r3, #0
    ce2c:	0a000001 	beq	ce38 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    ce30:	e59f0018 	ldr	r0, [pc, #24]	; ce50 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    ce34:	e12fff1e 	bx	lr
    ce38:	e92d4010 	push	{r4, lr}
    ce3c:	ebfffe82 	bl	c84c <CDWHCITransferStageData::IsPeriodic() const>
    ce40:	e3500000 	cmp	r0, #0
    ce44:	059f0008 	ldreq	r0, [pc, #8]	; ce54 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    ce48:	159f0000 	ldrne	r0, [pc]	; ce50 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    ce4c:	e8bd8010 	pop	{r4, pc}
    ce50:	000007ff 	.word	0x000007ff
    ce54:	0000078f 	.word	0x0000078f

0000ce58 <CDWHCITransferStageData::GetTransactionStatus() const>:
    ce58:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    ce5c:	e3500000 	cmp	r0, #0
    ce60:	0a000000 	beq	ce68 <CDWHCITransferStageData::GetTransactionStatus() const+0x10>
    ce64:	e12fff1e 	bx	lr
    ce68:	e92d4010 	push	{r4, lr}
    ce6c:	e59f2008 	ldr	r2, [pc, #8]	; ce7c <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    ce70:	e59f1008 	ldr	r1, [pc, #8]	; ce80 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    ce74:	e59f0008 	ldr	r0, [pc, #8]	; ce84 <CDWHCITransferStageData::GetTransactionStatus() const+0x2c>
    ce78:	eb005c91 	bl	240c4 <assertion_failed>
    ce7c:	000001ad 	.word	0x000001ad
    ce80:	000411c0 	.word	0x000411c0
    ce84:	0004133c 	.word	0x0004133c

0000ce88 <CDWHCITransferStageData::IsStageComplete() const>:
    ce88:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    ce8c:	e16f0f10 	clz	r0, r0
    ce90:	e1a002a0 	lsr	r0, r0, #5
    ce94:	e12fff1e 	bx	lr

0000ce98 <CDWHCITransferStageData::GetResultLen() const>:
    ce98:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    ce9c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    cea0:	e1520000 	cmp	r2, r0
    cea4:	31a00002 	movcc	r0, r2
    cea8:	e12fff1e 	bx	lr

0000ceac <CDWHCITransferStageData::IsTimeout() const>:
    ceac:	e590300c 	ldr	r3, [r0, #12]
    ceb0:	e3530000 	cmp	r3, #0
    ceb4:	1a000001 	bne	cec0 <CDWHCITransferStageData::IsTimeout() const+0x14>
    ceb8:	e1a00003 	mov	r0, r3
    cebc:	e12fff1e 	bx	lr
    cec0:	e92d4010 	push	{r4, lr}
    cec4:	e1a04000 	mov	r4, r0
    cec8:	eb00723c 	bl	297c0 <CTimer::Get()>
    cecc:	eb006f85 	bl	28ce8 <CTimer::GetTicks() const>
    ced0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ced4:	e594200c 	ldr	r2, [r4, #12]
    ced8:	e0400003 	sub	r0, r0, r3
    cedc:	e1500002 	cmp	r0, r2
    cee0:	33a00000 	movcc	r0, #0
    cee4:	23a00001 	movcs	r0, #1
    cee8:	e8bd8010 	pop	{r4, pc}

0000ceec <CDWHCITransferStageData::GetURB() const>:
    ceec:	e5900004 	ldr	r0, [r0, #4]
    cef0:	e3500000 	cmp	r0, #0
    cef4:	0a000000 	beq	cefc <CDWHCITransferStageData::GetURB() const+0x10>
    cef8:	e12fff1e 	bx	lr
    cefc:	e92d4010 	push	{r4, lr}
    cf00:	e3a02f73 	mov	r2, #460	; 0x1cc
    cf04:	e59f1004 	ldr	r1, [pc, #4]	; cf10 <CDWHCITransferStageData::GetURB() const+0x24>
    cf08:	e59f0004 	ldr	r0, [pc, #4]	; cf14 <CDWHCITransferStageData::GetURB() const+0x28>
    cf0c:	eb005c6c 	bl	240c4 <assertion_failed>
    cf10:	000411c0 	.word	0x000411c0
    cf14:	00041284 	.word	0x00041284

0000cf18 <CDWHCITransferStageData::GetFrameScheduler() const>:
    cf18:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    cf1c:	e12fff1e 	bx	lr

0000cf20 <CDWHCITransferStageData::operator new(unsigned int)>:
    cf20:	e3500054 	cmp	r0, #84	; 0x54
    cf24:	e92d4010 	push	{r4, lr}
    cf28:	1a000005 	bne	cf44 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    cf2c:	e59f3030 	ldr	r3, [pc, #48]	; cf64 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    cf30:	e5930000 	ldr	r0, [r3]
    cf34:	e3500000 	cmp	r0, #0
    cf38:	0a000005 	beq	cf54 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    cf3c:	e8bd4010 	pop	{r4, lr}
    cf40:	ea005d65 	b	244dc <CClassAllocator::Allocate()>
    cf44:	e59f201c 	ldr	r2, [pc, #28]	; cf68 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    cf48:	e59f101c 	ldr	r1, [pc, #28]	; cf6c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    cf4c:	e59f001c 	ldr	r0, [pc, #28]	; cf70 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    cf50:	eb005c5b 	bl	240c4 <assertion_failed>
    cf54:	e59f200c 	ldr	r2, [pc, #12]	; cf68 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    cf58:	e59f100c 	ldr	r1, [pc, #12]	; cf6c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    cf5c:	e59f0010 	ldr	r0, [pc, #16]	; cf74 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    cf60:	eb005c57 	bl	240c4 <assertion_failed>
    cf64:	00050134 	.word	0x00050134
    cf68:	000001d5 	.word	0x000001d5
    cf6c:	000411c0 	.word	0x000411c0
    cf70:	00041358 	.word	0x00041358
    cf74:	00040edc 	.word	0x00040edc

0000cf78 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    cf78:	e3510054 	cmp	r1, #84	; 0x54
    cf7c:	e92d4010 	push	{r4, lr}
    cf80:	1a000007 	bne	cfa4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x2c>
    cf84:	e59f3038 	ldr	r3, [pc, #56]	; cfc4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    cf88:	e5933000 	ldr	r3, [r3]
    cf8c:	e3530000 	cmp	r3, #0
    cf90:	0a000007 	beq	cfb4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    cf94:	e8bd4010 	pop	{r4, lr}
    cf98:	e1a01000 	mov	r1, r0
    cf9c:	e1a00003 	mov	r0, r3
    cfa0:	ea005d88 	b	245c8 <CClassAllocator::Free(void*)>
    cfa4:	e59f201c 	ldr	r2, [pc, #28]	; cfc8 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    cfa8:	e59f101c 	ldr	r1, [pc, #28]	; cfcc <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    cfac:	e59f001c 	ldr	r0, [pc, #28]	; cfd0 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    cfb0:	eb005c43 	bl	240c4 <assertion_failed>
    cfb4:	e59f200c 	ldr	r2, [pc, #12]	; cfc8 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    cfb8:	e59f100c 	ldr	r1, [pc, #12]	; cfcc <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    cfbc:	e59f0010 	ldr	r0, [pc, #16]	; cfd4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    cfc0:	eb005c3f 	bl	240c4 <assertion_failed>
    cfc4:	00050134 	.word	0x00050134
    cfc8:	000001d5 	.word	0x000001d5
    cfcc:	000411c0 	.word	0x000411c0
    cfd0:	00041358 	.word	0x00041358
    cfd4:	00040edc 	.word	0x00040edc

0000cfd8 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    cfd8:	e92d4070 	push	{r4, r5, r6, lr}
    cfdc:	e59f4040 	ldr	r4, [pc, #64]	; d024 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    cfe0:	e5943000 	ldr	r3, [r4]
    cfe4:	e3530000 	cmp	r3, #0
    cfe8:	1a000009 	bne	d014 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    cfec:	e1a05000 	mov	r5, r0
    cff0:	e3a0001c 	mov	r0, #28
    cff4:	eb00764e 	bl	2a934 <operator new(unsigned int)>
    cff8:	e1a06000 	mov	r6, r0
    cffc:	e1a02005 	mov	r2, r5
    d000:	e59f3020 	ldr	r3, [pc, #32]	; d028 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    d004:	e3a01054 	mov	r1, #84	; 0x54
    d008:	eb005d1a 	bl	24478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    d00c:	e5846000 	str	r6, [r4]
    d010:	e8bd8070 	pop	{r4, r5, r6, pc}
    d014:	e59f2010 	ldr	r2, [pc, #16]	; d02c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    d018:	e59f1010 	ldr	r1, [pc, #16]	; d030 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    d01c:	e59f0010 	ldr	r0, [pc, #16]	; d034 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    d020:	eb005c27 	bl	240c4 <assertion_failed>
    d024:	00050134 	.word	0x00050134
    d028:	00041384 	.word	0x00041384
    d02c:	000001d5 	.word	0x000001d5
    d030:	000411c0 	.word	0x000411c0
    d034:	00040ef0 	.word	0x00040ef0

0000d038 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    d038:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d03c:	e59f4054 	ldr	r4, [pc, #84]	; d098 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    d040:	e1a05000 	mov	r5, r0
    d044:	e5940000 	ldr	r0, [r4]
    d048:	e24dd00c 	sub	sp, sp, #12
    d04c:	e3500000 	cmp	r0, #0
    d050:	1a00000c 	bne	d088 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    d054:	e1a06001 	mov	r6, r1
    d058:	e3a0001c 	mov	r0, #28
    d05c:	eb007634 	bl	2a934 <operator new(unsigned int)>
    d060:	e59f1034 	ldr	r1, [pc, #52]	; d09c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    d064:	e1a03006 	mov	r3, r6
    d068:	e58d1000 	str	r1, [sp]
    d06c:	e1a02005 	mov	r2, r5
    d070:	e3a01054 	mov	r1, #84	; 0x54
    d074:	e1a07000 	mov	r7, r0
    d078:	eb005d0a 	bl	244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    d07c:	e5847000 	str	r7, [r4]
    d080:	e28dd00c 	add	sp, sp, #12
    d084:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d088:	e59f2010 	ldr	r2, [pc, #16]	; d0a0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    d08c:	e59f1010 	ldr	r1, [pc, #16]	; d0a4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    d090:	e59f0010 	ldr	r0, [pc, #16]	; d0a8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    d094:	eb005c0a 	bl	240c4 <assertion_failed>
    d098:	00050134 	.word	0x00050134
    d09c:	00041384 	.word	0x00041384
    d0a0:	000001d5 	.word	0x000001d5
    d0a4:	000411c0 	.word	0x000411c0
    d0a8:	00040ef0 	.word	0x00040ef0

0000d0ac <CUSBDevice::~CUSBDevice()>:
    d0ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d0b0:	e1a04000 	mov	r4, r0
    d0b4:	e1a05000 	mov	r5, r0
    d0b8:	e3a06000 	mov	r6, #0
    d0bc:	e59f30fc 	ldr	r3, [pc, #252]	; d1c0 <CUSBDevice::~CUSBDevice()+0x114>
    d0c0:	e2807054 	add	r7, r0, #84	; 0x54
    d0c4:	e484302c 	str	r3, [r4], #44	; 0x2c
    d0c8:	e5940004 	ldr	r0, [r4, #4]
    d0cc:	e3500000 	cmp	r0, #0
    d0d0:	0a000002 	beq	d0e0 <CUSBDevice::~CUSBDevice()+0x34>
    d0d4:	e5903000 	ldr	r3, [r0]
    d0d8:	e5933004 	ldr	r3, [r3, #4]
    d0dc:	e12fff33 	blx	r3
    d0e0:	e5a46004 	str	r6, [r4, #4]!
    d0e4:	e1540007 	cmp	r4, r7
    d0e8:	1afffff6 	bne	d0c8 <CUSBDevice::~CUSBDevice()+0x1c>
    d0ec:	e5d51014 	ldrb	r1, [r5, #20]
    d0f0:	e3510000 	cmp	r1, #0
    d0f4:	0a000011 	beq	d140 <CUSBDevice::~CUSBDevice()+0x94>
    d0f8:	e3a03000 	mov	r3, #0
    d0fc:	e59f00c0 	ldr	r0, [pc, #192]	; d1c4 <CUSBDevice::~CUSBDevice()+0x118>
    d100:	e261c020 	rsb	ip, r1, #32
    d104:	e1c080d0 	ldrd	r8, [r0]
    d108:	e1a02138 	lsr	r2, r8, r1
    d10c:	e1822c19 	orr	r2, r2, r9, lsl ip
    d110:	e241e020 	sub	lr, r1, #32
    d114:	e1822e39 	orr	r2, r2, r9, lsr lr
    d118:	e2022001 	and	r2, r2, #1
    d11c:	e1923003 	orrs	r3, r2, r3
    d120:	0a000022 	beq	d1b0 <CUSBDevice::~CUSBDevice()+0x104>
    d124:	e3a04001 	mov	r4, #1
    d128:	e1a03e14 	lsl	r3, r4, lr
    d12c:	e1833c34 	orr	r3, r3, r4, lsr ip
    d130:	e1a02114 	lsl	r2, r4, r1
    d134:	e1c88002 	bic	r8, r8, r2
    d138:	e1c99003 	bic	r9, r9, r3
    d13c:	e1c080f0 	strd	r8, [r0]
    d140:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    d144:	e3540000 	cmp	r4, #0
    d148:	0a000004 	beq	d160 <CUSBDevice::~CUSBDevice()+0xb4>
    d14c:	e1a00004 	mov	r0, r4
    d150:	eb002881 	bl	1735c <CUSBConfigurationParser::~CUSBConfigurationParser()>
    d154:	e1a00004 	mov	r0, r4
    d158:	e3a0101c 	mov	r1, #28
    d15c:	eb007602 	bl	2a96c <operator delete(void*, unsigned int)>
    d160:	e3a04000 	mov	r4, #0
    d164:	e3a01009 	mov	r1, #9
    d168:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    d16c:	e585402c 	str	r4, [r5, #44]	; 0x2c
    d170:	eb0075fd 	bl	2a96c <operator delete(void*, unsigned int)>
    d174:	e5854028 	str	r4, [r5, #40]	; 0x28
    d178:	e3a01012 	mov	r1, #18
    d17c:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    d180:	eb0075f9 	bl	2a96c <operator delete(void*, unsigned int)>
    d184:	e5956018 	ldr	r6, [r5, #24]
    d188:	e5854024 	str	r4, [r5, #36]	; 0x24
    d18c:	e1560004 	cmp	r6, r4
    d190:	0a000004 	beq	d1a8 <CUSBDevice::~CUSBDevice()+0xfc>
    d194:	e1a00006 	mov	r0, r6
    d198:	eb000592 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
    d19c:	e1a00006 	mov	r0, r6
    d1a0:	e3a01014 	mov	r1, #20
    d1a4:	eb0075f0 	bl	2a96c <operator delete(void*, unsigned int)>
    d1a8:	e1a00005 	mov	r0, r5
    d1ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d1b0:	e3a02088 	mov	r2, #136	; 0x88
    d1b4:	e59f100c 	ldr	r1, [pc, #12]	; d1c8 <CUSBDevice::~CUSBDevice()+0x11c>
    d1b8:	e59f000c 	ldr	r0, [pc, #12]	; d1cc <CUSBDevice::~CUSBDevice()+0x120>
    d1bc:	eb005bc0 	bl	240c4 <assertion_failed>
    d1c0:	000413a4 	.word	0x000413a4
    d1c4:	00050138 	.word	0x00050138
    d1c8:	000413bc 	.word	0x000413bc
    d1cc:	000413cc 	.word	0x000413cc

0000d1d0 <CUSBDevice::~CUSBDevice()>:
    d1d0:	e92d4010 	push	{r4, lr}
    d1d4:	e1a04000 	mov	r4, r0
    d1d8:	ebffffb3 	bl	d0ac <CUSBDevice::~CUSBDevice()>
    d1dc:	e1a00004 	mov	r0, r4
    d1e0:	e3a01058 	mov	r1, #88	; 0x58
    d1e4:	eb0075e0 	bl	2a96c <operator delete(void*, unsigned int)>
    d1e8:	e1a00004 	mov	r0, r4
    d1ec:	e8bd8010 	pop	{r4, pc}

0000d1f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    d1f0:	e92d4070 	push	{r4, r5, r6, lr}
    d1f4:	e3a05000 	mov	r5, #0
    d1f8:	e1a04000 	mov	r4, r0
    d1fc:	e3a00001 	mov	r0, #1
    d200:	e59fc098 	ldr	ip, [pc, #152]	; d2a0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    d204:	e1510005 	cmp	r1, r5
    d208:	e5841004 	str	r1, [r4, #4]
    d20c:	e5c42015 	strb	r2, [r4, #21]
    d210:	e5843008 	str	r3, [r4, #8]
    d214:	e584c000 	str	ip, [r4]
    d218:	e5c4001e 	strb	r0, [r4, #30]
    d21c:	e584500c 	str	r5, [r4, #12]
    d220:	e5c45014 	strb	r5, [r4, #20]
    d224:	e5845018 	str	r5, [r4, #24]
    d228:	e5c4501c 	strb	r5, [r4, #28]
    d22c:	e5c4501d 	strb	r5, [r4, #29]
    d230:	e5845020 	str	r5, [r4, #32]
    d234:	e5845024 	str	r5, [r4, #36]	; 0x24
    d238:	e5845028 	str	r5, [r4, #40]	; 0x28
    d23c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d240:	0a00000e 	beq	d280 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x90>
    d244:	e3530000 	cmp	r3, #0
    d248:	0a000010 	beq	d290 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
    d24c:	e3a00014 	mov	r0, #20
    d250:	eb0075b7 	bl	2a934 <operator new(unsigned int)>
    d254:	e1a06000 	mov	r6, r0
    d258:	e1a01004 	mov	r1, r4
    d25c:	eb0004e4 	bl	e5f4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    d260:	e5846018 	str	r6, [r4, #24]
    d264:	e284302c 	add	r3, r4, #44	; 0x2c
    d268:	e2842054 	add	r2, r4, #84	; 0x54
    d26c:	e5a35004 	str	r5, [r3, #4]!
    d270:	e1530002 	cmp	r3, r2
    d274:	1afffffc 	bne	d26c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x7c>
    d278:	e1a00004 	mov	r0, r4
    d27c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d280:	e3a02038 	mov	r2, #56	; 0x38
    d284:	e59f1018 	ldr	r1, [pc, #24]	; d2a4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    d288:	e59f0018 	ldr	r0, [pc, #24]	; d2a8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    d28c:	eb005b8c 	bl	240c4 <assertion_failed>
    d290:	e3a02039 	mov	r2, #57	; 0x39
    d294:	e59f1008 	ldr	r1, [pc, #8]	; d2a4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    d298:	e59f000c 	ldr	r0, [pc, #12]	; d2ac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xbc>
    d29c:	eb005b88 	bl	240c4 <assertion_failed>
    d2a0:	000413a4 	.word	0x000413a4
    d2a4:	000413bc 	.word	0x000413bc
    d2a8:	00041110 	.word	0x00041110
    d2ac:	000413fc 	.word	0x000413fc

0000d2b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    d2b0:	e3a0c000 	mov	ip, #0
    d2b4:	e92d4070 	push	{r4, r5, r6, lr}
    d2b8:	e1a04000 	mov	r4, r0
    d2bc:	e59fe134 	ldr	lr, [pc, #308]	; d3f8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    d2c0:	e59d0010 	ldr	r0, [sp, #16]
    d2c4:	e151000c 	cmp	r1, ip
    d2c8:	e5841004 	str	r1, [r4, #4]
    d2cc:	e5c42015 	strb	r2, [r4, #21]
    d2d0:	e584300c 	str	r3, [r4, #12]
    d2d4:	e584e000 	str	lr, [r4]
    d2d8:	e5840010 	str	r0, [r4, #16]
    d2dc:	e584c008 	str	ip, [r4, #8]
    d2e0:	e5c4c014 	strb	ip, [r4, #20]
    d2e4:	e584c018 	str	ip, [r4, #24]
    d2e8:	e584c024 	str	ip, [r4, #36]	; 0x24
    d2ec:	e584c028 	str	ip, [r4, #40]	; 0x28
    d2f0:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    d2f4:	0a00002f 	beq	d3b8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    d2f8:	e3530000 	cmp	r3, #0
    d2fc:	0a000031 	beq	d3c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    d300:	e1a00003 	mov	r0, r3
    d304:	eb000690 	bl	ed4c <CUSBFunction::GetDevice() const>
    d308:	e3500000 	cmp	r0, #0
    d30c:	0a000031 	beq	d3d8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    d310:	e5d0301c 	ldrb	r3, [r0, #28]
    d314:	e5c4301c 	strb	r3, [r4, #28]
    d318:	e5d0201d 	ldrb	r2, [r0, #29]
    d31c:	e3530000 	cmp	r3, #0
    d320:	e5c4201d 	strb	r2, [r4, #29]
    d324:	e5d0301e 	ldrb	r3, [r0, #30]
    d328:	e5c4301e 	strb	r3, [r4, #30]
    d32c:	e5903020 	ldr	r3, [r0, #32]
    d330:	e5843020 	str	r3, [r4, #32]
    d334:	0a000010 	beq	d37c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    d338:	e5945018 	ldr	r5, [r4, #24]
    d33c:	e3550000 	cmp	r5, #0
    d340:	1a000028 	bne	d3e8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    d344:	e3a00014 	mov	r0, #20
    d348:	eb007579 	bl	2a934 <operator new(unsigned int)>
    d34c:	e1a01004 	mov	r1, r4
    d350:	e1a06000 	mov	r6, r0
    d354:	eb0004a6 	bl	e5f4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    d358:	e1a02005 	mov	r2, r5
    d35c:	e5846018 	str	r6, [r4, #24]
    d360:	e284302c 	add	r3, r4, #44	; 0x2c
    d364:	e2841054 	add	r1, r4, #84	; 0x54
    d368:	e5a32004 	str	r2, [r3, #4]!
    d36c:	e1510003 	cmp	r1, r3
    d370:	1afffffc 	bne	d368 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    d374:	e1a00004 	mov	r0, r4
    d378:	e8bd8070 	pop	{r4, r5, r6, pc}
    d37c:	e5d03015 	ldrb	r3, [r0, #21]
    d380:	e3530002 	cmp	r3, #2
    d384:	1affffeb 	bne	d338 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    d388:	e5d43015 	ldrb	r3, [r4, #21]
    d38c:	e3530001 	cmp	r3, #1
    d390:	caffffe8 	bgt	d338 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    d394:	e3a02001 	mov	r2, #1
    d398:	e5943010 	ldr	r3, [r4, #16]
    d39c:	e5c4201c 	strb	r2, [r4, #28]
    d3a0:	e5d02014 	ldrb	r2, [r0, #20]
    d3a4:	e2833001 	add	r3, r3, #1
    d3a8:	e5c4201d 	strb	r2, [r4, #29]
    d3ac:	e5840020 	str	r0, [r4, #32]
    d3b0:	e5c4301e 	strb	r3, [r4, #30]
    d3b4:	eaffffdf 	b	d338 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    d3b8:	e3a02057 	mov	r2, #87	; 0x57
    d3bc:	e59f1038 	ldr	r1, [pc, #56]	; d3fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    d3c0:	e59f0038 	ldr	r0, [pc, #56]	; d400 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    d3c4:	eb005b3e 	bl	240c4 <assertion_failed>
    d3c8:	e3a02058 	mov	r2, #88	; 0x58
    d3cc:	e59f1028 	ldr	r1, [pc, #40]	; d3fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    d3d0:	e59f002c 	ldr	r0, [pc, #44]	; d404 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    d3d4:	eb005b3a 	bl	240c4 <assertion_failed>
    d3d8:	e3a0205b 	mov	r2, #91	; 0x5b
    d3dc:	e59f1018 	ldr	r1, [pc, #24]	; d3fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    d3e0:	e59f0020 	ldr	r0, [pc, #32]	; d408 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    d3e4:	eb005b36 	bl	240c4 <assertion_failed>
    d3e8:	e3a02073 	mov	r2, #115	; 0x73
    d3ec:	e59f1008 	ldr	r1, [pc, #8]	; d3fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    d3f0:	e59f0014 	ldr	r0, [pc, #20]	; d40c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    d3f4:	eb005b32 	bl	240c4 <assertion_failed>
    d3f8:	000413a4 	.word	0x000413a4
    d3fc:	000413bc 	.word	0x000413bc
    d400:	00041110 	.word	0x00041110
    d404:	00041410 	.word	0x00041410
    d408:	0004141c 	.word	0x0004141c
    d40c:	0004142c 	.word	0x0004142c

0000d410 <CUSBDevice::ReScanDevices()>:
    d410:	e92d4070 	push	{r4, r5, r6, lr}
    d414:	e3a05000 	mov	r5, #0
    d418:	e280402c 	add	r4, r0, #44	; 0x2c
    d41c:	e2806054 	add	r6, r0, #84	; 0x54
    d420:	e5b40004 	ldr	r0, [r4, #4]!
    d424:	e3500000 	cmp	r0, #0
    d428:	0a000004 	beq	d440 <CUSBDevice::ReScanDevices()+0x30>
    d42c:	e5903000 	ldr	r3, [r0]
    d430:	e5933020 	ldr	r3, [r3, #32]
    d434:	e12fff33 	blx	r3
    d438:	e3500000 	cmp	r0, #0
    d43c:	11a05000 	movne	r5, r0
    d440:	e1540006 	cmp	r4, r6
    d444:	1afffff5 	bne	d420 <CUSBDevice::ReScanDevices()+0x10>
    d448:	e1a00005 	mov	r0, r5
    d44c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d450 <CUSBDevice::RemoveDevice()>:
    d450:	e5903008 	ldr	r3, [r0, #8]
    d454:	e3530000 	cmp	r3, #0
    d458:	0a000003 	beq	d46c <CUSBDevice::RemoveDevice()+0x1c>
    d45c:	e5932000 	ldr	r2, [r3]
    d460:	e1a00003 	mov	r0, r3
    d464:	e592300c 	ldr	r3, [r2, #12]
    d468:	e12fff13 	bx	r3
    d46c:	e590300c 	ldr	r3, [r0, #12]
    d470:	e3530000 	cmp	r3, #0
    d474:	0a000002 	beq	d484 <CUSBDevice::RemoveDevice()+0x34>
    d478:	e5901010 	ldr	r1, [r0, #16]
    d47c:	e1a00003 	mov	r0, r3
    d480:	ea001b81 	b	1428c <CUSBStandardHub::RemoveDevice(unsigned int)>
    d484:	e92d4010 	push	{r4, lr}
    d488:	e3a02f7e 	mov	r2, #504	; 0x1f8
    d48c:	e59f1004 	ldr	r1, [pc, #4]	; d498 <CUSBDevice::RemoveDevice()+0x48>
    d490:	e59f0004 	ldr	r0, [pc, #4]	; d49c <CUSBDevice::RemoveDevice()+0x4c>
    d494:	eb005b0a 	bl	240c4 <assertion_failed>
    d498:	000413bc 	.word	0x000413bc
    d49c:	00041410 	.word	0x00041410

0000d4a0 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    d4a0:	e92d4070 	push	{r4, r5, r6, lr}
    d4a4:	e1a06000 	mov	r6, r0
    d4a8:	e24dd008 	sub	sp, sp, #8
    d4ac:	e3a00010 	mov	r0, #16
    d4b0:	e1a04001 	mov	r4, r1
    d4b4:	eb00751e 	bl	2a934 <operator new(unsigned int)>
    d4b8:	e1a05000 	mov	r5, r0
    d4bc:	eb0067d8 	bl	27424 <CString::CString()>
    d4c0:	e3540000 	cmp	r4, #0
    d4c4:	0a000013 	beq	d518 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    d4c8:	e3540001 	cmp	r4, #1
    d4cc:	1a00000d 	bne	d508 <CUSBDevice::GetName(TDeviceNameSelector) const+0x68>
    d4d0:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    d4d4:	e3510000 	cmp	r1, #0
    d4d8:	0a000026 	beq	d578 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    d4dc:	e5d12004 	ldrb	r2, [r1, #4]
    d4e0:	e2423001 	sub	r3, r2, #1
    d4e4:	e6ef3073 	uxtb	r3, r3
    d4e8:	e35300fd 	cmp	r3, #253	; 0xfd
    d4ec:	9a000018 	bls	d554 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb4>
    d4f0:	e59f10a0 	ldr	r1, [pc, #160]	; d598 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    d4f4:	e1a00005 	mov	r0, r5
    d4f8:	eb0067e5 	bl	27494 <CString::operator=(char const*)>
    d4fc:	e1a00005 	mov	r0, r5
    d500:	e28dd008 	add	sp, sp, #8
    d504:	e8bd8070 	pop	{r4, r5, r6, pc}
    d508:	e3a02f86 	mov	r2, #536	; 0x218
    d50c:	e59f1088 	ldr	r1, [pc, #136]	; d59c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    d510:	e59f0088 	ldr	r0, [pc, #136]	; d5a0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    d514:	eb005aea 	bl	240c4 <assertion_failed>
    d518:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    d51c:	e3510000 	cmp	r1, #0
    d520:	0a000018 	beq	d588 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    d524:	e5d1000b 	ldrb	r0, [r1, #11]
    d528:	e5d1300a 	ldrb	r3, [r1, #10]
    d52c:	e5d12008 	ldrb	r2, [r1, #8]
    d530:	e5d11009 	ldrb	r1, [r1, #9]
    d534:	e1833400 	orr	r3, r3, r0, lsl #8
    d538:	e1822401 	orr	r2, r2, r1, lsl #8
    d53c:	e1a00005 	mov	r0, r5
    d540:	e59f105c 	ldr	r1, [pc, #92]	; d5a4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    d544:	eb006cf9 	bl	28930 <CString::Format(char const*, ...)>
    d548:	e1a00005 	mov	r0, r5
    d54c:	e28dd008 	add	sp, sp, #8
    d550:	e8bd8070 	pop	{r4, r5, r6, pc}
    d554:	e5d13005 	ldrb	r3, [r1, #5]
    d558:	e5d11006 	ldrb	r1, [r1, #6]
    d55c:	e1a00005 	mov	r0, r5
    d560:	e58d1000 	str	r1, [sp]
    d564:	e59f103c 	ldr	r1, [pc, #60]	; d5a8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    d568:	eb006cf0 	bl	28930 <CString::Format(char const*, ...)>
    d56c:	e1a00005 	mov	r0, r5
    d570:	e28dd008 	add	sp, sp, #8
    d574:	e8bd8070 	pop	{r4, r5, r6, pc}
    d578:	e59f202c 	ldr	r2, [pc, #44]	; d5ac <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    d57c:	e59f1018 	ldr	r1, [pc, #24]	; d59c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    d580:	e59f0028 	ldr	r0, [pc, #40]	; d5b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    d584:	eb005ace 	bl	240c4 <assertion_failed>
    d588:	e3a02f81 	mov	r2, #516	; 0x204
    d58c:	e59f1008 	ldr	r1, [pc, #8]	; d59c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    d590:	e59f0018 	ldr	r0, [pc, #24]	; d5b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    d594:	eb005aca 	bl	240c4 <assertion_failed>
    d598:	0004146c 	.word	0x0004146c
    d59c:	000413bc 	.word	0x000413bc
    d5a0:	000414b4 	.word	0x000414b4
    d5a4:	00041454 	.word	0x00041454
    d5a8:	00041460 	.word	0x00041460
    d5ac:	0000020b 	.word	0x0000020b
    d5b0:	00041440 	.word	0x00041440

0000d5b4 <CUSBDevice::GetNames() const>:
    d5b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d5b8:	e1a07000 	mov	r7, r0
    d5bc:	e3a00010 	mov	r0, #16
    d5c0:	eb0074db 	bl	2a934 <operator new(unsigned int)>
    d5c4:	e3a04000 	mov	r4, #0
    d5c8:	e1a06000 	mov	r6, r0
    d5cc:	eb006794 	bl	27424 <CString::CString()>
    d5d0:	e59f80b4 	ldr	r8, [pc, #180]	; d68c <CUSBDevice::GetNames() const+0xd8>
    d5d4:	e59f90b4 	ldr	r9, [pc, #180]	; d690 <CUSBDevice::GetNames() const+0xdc>
    d5d8:	e6ef1074 	uxtb	r1, r4
    d5dc:	e1a00007 	mov	r0, r7
    d5e0:	ebffffae 	bl	d4a0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d5e4:	e2505000 	subs	r5, r0, #0
    d5e8:	0a00001f 	beq	d66c <CUSBDevice::GetNames() const+0xb8>
    d5ec:	e1a01008 	mov	r1, r8
    d5f0:	eb0067f4 	bl	275c8 <CString::Compare(char const*) const>
    d5f4:	e3500000 	cmp	r0, #0
    d5f8:	1a000011 	bne	d644 <CUSBDevice::GetNames() const+0x90>
    d5fc:	e5953000 	ldr	r3, [r5]
    d600:	e2844001 	add	r4, r4, #1
    d604:	e5933004 	ldr	r3, [r3, #4]
    d608:	e1a00005 	mov	r0, r5
    d60c:	e12fff33 	blx	r3
    d610:	e3540002 	cmp	r4, #2
    d614:	1affffef 	bne	d5d8 <CUSBDevice::GetNames() const+0x24>
    d618:	e1a00006 	mov	r0, r6
    d61c:	eb0067c4 	bl	27534 <CString::GetLength() const>
    d620:	e3500000 	cmp	r0, #0
    d624:	0a000001 	beq	d630 <CUSBDevice::GetNames() const+0x7c>
    d628:	e1a00006 	mov	r0, r6
    d62c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d630:	e59f1054 	ldr	r1, [pc, #84]	; d68c <CUSBDevice::GetNames() const+0xd8>
    d634:	e1a00006 	mov	r0, r6
    d638:	eb006795 	bl	27494 <CString::operator=(char const*)>
    d63c:	e1a00006 	mov	r0, r6
    d640:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d644:	e1a00006 	mov	r0, r6
    d648:	eb0067b9 	bl	27534 <CString::GetLength() const>
    d64c:	e3500000 	cmp	r0, #0
    d650:	1a000009 	bne	d67c <CUSBDevice::GetNames() const+0xc8>
    d654:	e1a00005 	mov	r0, r5
    d658:	eb006787 	bl	2747c <CString::operator char const*() const>
    d65c:	e1a01000 	mov	r1, r0
    d660:	e1a00006 	mov	r0, r6
    d664:	eb0067b6 	bl	27544 <CString::Append(char const*)>
    d668:	eaffffe3 	b	d5fc <CUSBDevice::GetNames() const+0x48>
    d66c:	e59f2020 	ldr	r2, [pc, #32]	; d694 <CUSBDevice::GetNames() const+0xe0>
    d670:	e59f1020 	ldr	r1, [pc, #32]	; d698 <CUSBDevice::GetNames() const+0xe4>
    d674:	e59f0020 	ldr	r0, [pc, #32]	; d69c <CUSBDevice::GetNames() const+0xe8>
    d678:	eb005a91 	bl	240c4 <assertion_failed>
    d67c:	e1a01009 	mov	r1, r9
    d680:	e1a00006 	mov	r0, r6
    d684:	eb0067ae 	bl	27544 <CString::Append(char const*)>
    d688:	eafffff1 	b	d654 <CUSBDevice::GetNames() const+0xa0>
    d68c:	0004146c 	.word	0x0004146c
    d690:	00041480 	.word	0x00041480
    d694:	00000229 	.word	0x00000229
    d698:	000413bc 	.word	0x000413bc
    d69c:	00041474 	.word	0x00041474

0000d6a0 <CUSBDevice::SetAddress(unsigned char)>:
    d6a0:	e351003f 	cmp	r1, #63	; 0x3f
    d6a4:	ca000001 	bgt	d6b0 <CUSBDevice::SetAddress(unsigned char)+0x10>
    d6a8:	e5c01014 	strb	r1, [r0, #20]
    d6ac:	e12fff1e 	bx	lr
    d6b0:	e92d4010 	push	{r4, lr}
    d6b4:	e59f2008 	ldr	r2, [pc, #8]	; d6c4 <CUSBDevice::SetAddress(unsigned char)+0x24>
    d6b8:	e59f1008 	ldr	r1, [pc, #8]	; d6c8 <CUSBDevice::SetAddress(unsigned char)+0x28>
    d6bc:	e59f0008 	ldr	r0, [pc, #8]	; d6cc <CUSBDevice::SetAddress(unsigned char)+0x2c>
    d6c0:	eb005a7f 	bl	240c4 <assertion_failed>
    d6c4:	00000243 	.word	0x00000243
    d6c8:	000413bc 	.word	0x000413bc
    d6cc:	00041484 	.word	0x00041484

0000d6d0 <CUSBDevice::GetAddress() const>:
    d6d0:	e5d00014 	ldrb	r0, [r0, #20]
    d6d4:	e12fff1e 	bx	lr

0000d6d8 <CUSBDevice::GetSpeed() const>:
    d6d8:	e5d00015 	ldrb	r0, [r0, #21]
    d6dc:	e12fff1e 	bx	lr

0000d6e0 <CUSBDevice::IsSplit() const>:
    d6e0:	e5d0001c 	ldrb	r0, [r0, #28]
    d6e4:	e12fff1e 	bx	lr

0000d6e8 <CUSBDevice::GetHubAddress() const>:
    d6e8:	e5d0001d 	ldrb	r0, [r0, #29]
    d6ec:	e12fff1e 	bx	lr

0000d6f0 <CUSBDevice::GetHubPortNumber() const>:
    d6f0:	e5d0001e 	ldrb	r0, [r0, #30]
    d6f4:	e12fff1e 	bx	lr

0000d6f8 <CUSBDevice::GetTTHubDevice() const>:
    d6f8:	e5900020 	ldr	r0, [r0, #32]
    d6fc:	e12fff1e 	bx	lr

0000d700 <CUSBDevice::GetEndpoint0() const>:
    d700:	e5900018 	ldr	r0, [r0, #24]
    d704:	e3500000 	cmp	r0, #0
    d708:	0a000000 	beq	d710 <CUSBDevice::GetEndpoint0() const+0x10>
    d70c:	e12fff1e 	bx	lr
    d710:	e92d4010 	push	{r4, lr}
    d714:	e3a02f9b 	mov	r2, #620	; 0x26c
    d718:	e59f1004 	ldr	r1, [pc, #4]	; d724 <CUSBDevice::GetEndpoint0() const+0x24>
    d71c:	e59f0004 	ldr	r0, [pc, #4]	; d728 <CUSBDevice::GetEndpoint0() const+0x28>
    d720:	eb005a67 	bl	240c4 <assertion_failed>
    d724:	000413bc 	.word	0x000413bc
    d728:	000414a4 	.word	0x000414a4

0000d72c <CUSBDevice::GetHost() const>:
    d72c:	e5900004 	ldr	r0, [r0, #4]
    d730:	e3500000 	cmp	r0, #0
    d734:	0a000000 	beq	d73c <CUSBDevice::GetHost() const+0x10>
    d738:	e12fff1e 	bx	lr
    d73c:	e92d4010 	push	{r4, lr}
    d740:	e59f2008 	ldr	r2, [pc, #8]	; d750 <CUSBDevice::GetHost() const+0x24>
    d744:	e59f1008 	ldr	r1, [pc, #8]	; d754 <CUSBDevice::GetHost() const+0x28>
    d748:	e59f0008 	ldr	r0, [pc, #8]	; d758 <CUSBDevice::GetHost() const+0x2c>
    d74c:	eb005a5c 	bl	240c4 <assertion_failed>
    d750:	00000272 	.word	0x00000272
    d754:	000413bc 	.word	0x000413bc
    d758:	00041110 	.word	0x00041110

0000d75c <CUSBDevice::GetDeviceDescriptor() const>:
    d75c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d760:	e3500000 	cmp	r0, #0
    d764:	0a000000 	beq	d76c <CUSBDevice::GetDeviceDescriptor() const+0x10>
    d768:	e12fff1e 	bx	lr
    d76c:	e92d4010 	push	{r4, lr}
    d770:	e3a02f9e 	mov	r2, #632	; 0x278
    d774:	e59f1004 	ldr	r1, [pc, #4]	; d780 <CUSBDevice::GetDeviceDescriptor() const+0x24>
    d778:	e59f0004 	ldr	r0, [pc, #4]	; d784 <CUSBDevice::GetDeviceDescriptor() const+0x28>
    d77c:	eb005a50 	bl	240c4 <assertion_failed>
    d780:	000413bc 	.word	0x000413bc
    d784:	00041440 	.word	0x00041440

0000d788 <CUSBDevice::GetConfigurationDescriptor() const>:
    d788:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d78c:	e3500000 	cmp	r0, #0
    d790:	0a000000 	beq	d798 <CUSBDevice::GetConfigurationDescriptor() const+0x10>
    d794:	e12fff1e 	bx	lr
    d798:	e92d4010 	push	{r4, lr}
    d79c:	e59f2008 	ldr	r2, [pc, #8]	; d7ac <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    d7a0:	e59f1008 	ldr	r1, [pc, #8]	; d7b0 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    d7a4:	e59f0008 	ldr	r0, [pc, #8]	; d7b4 <CUSBDevice::GetConfigurationDescriptor() const+0x2c>
    d7a8:	eb005a45 	bl	240c4 <assertion_failed>
    d7ac:	0000027e 	.word	0x0000027e
    d7b0:	000413bc 	.word	0x000413bc
    d7b4:	000414b8 	.word	0x000414b8

0000d7b8 <CUSBDevice::GetDescriptor(unsigned char)>:
    d7b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d7bc:	e3500000 	cmp	r0, #0
    d7c0:	0a000000 	beq	d7c8 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    d7c4:	ea0026e7 	b	17368 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d7c8:	e92d4010 	push	{r4, lr}
    d7cc:	e3a02fa1 	mov	r2, #644	; 0x284
    d7d0:	e59f1004 	ldr	r1, [pc, #4]	; d7dc <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    d7d4:	e59f0004 	ldr	r0, [pc, #4]	; d7e0 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    d7d8:	eb005a39 	bl	240c4 <assertion_failed>
    d7dc:	000413bc 	.word	0x000413bc
    d7e0:	000414cc 	.word	0x000414cc

0000d7e4 <CUSBDevice::ConfigurationError(char const*) const>:
    d7e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d7e8:	e3500000 	cmp	r0, #0
    d7ec:	0a000000 	beq	d7f4 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    d7f0:	ea00272a 	b	174a0 <CUSBConfigurationParser::Error(char const*) const>
    d7f4:	e92d4010 	push	{r4, lr}
    d7f8:	e59f2008 	ldr	r2, [pc, #8]	; d808 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    d7fc:	e59f1008 	ldr	r1, [pc, #8]	; d80c <CUSBDevice::ConfigurationError(char const*) const+0x28>
    d800:	e59f0008 	ldr	r0, [pc, #8]	; d810 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    d804:	eb005a2e 	bl	240c4 <assertion_failed>
    d808:	0000028a 	.word	0x0000028a
    d80c:	000413bc 	.word	0x000413bc
    d810:	000414cc 	.word	0x000414cc

0000d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d814:	e92d000c 	push	{r2, r3}
    d818:	e92d4070 	push	{r4, r5, r6, lr}
    d81c:	e24dd020 	sub	sp, sp, #32
    d820:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d824:	e3540000 	cmp	r4, #0
    d828:	0a00001d 	beq	d8a4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    d82c:	e1a05000 	mov	r5, r0
    d830:	e28d0010 	add	r0, sp, #16
    d834:	e1a06001 	mov	r6, r1
    d838:	eb0066f9 	bl	27424 <CString::CString()>
    d83c:	e5d5201e 	ldrb	r2, [r5, #30]
    d840:	e5d5301d 	ldrb	r3, [r5, #29]
    d844:	e59f1068 	ldr	r1, [pc, #104]	; d8b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    d848:	e28d0010 	add	r0, sp, #16
    d84c:	e58d2000 	str	r2, [sp]
    d850:	e59f2060 	ldr	r2, [pc, #96]	; d8b8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    d854:	eb006c35 	bl	28930 <CString::Format(char const*, ...)>
    d858:	e28d3034 	add	r3, sp, #52	; 0x34
    d85c:	e58d300c 	str	r3, [sp, #12]
    d860:	eb00630a 	bl	26490 <CLogger::Get()>
    d864:	e1a05000 	mov	r5, r0
    d868:	e28d0010 	add	r0, sp, #16
    d86c:	eb006702 	bl	2747c <CString::operator char const*() const>
    d870:	e59dc00c 	ldr	ip, [sp, #12]
    d874:	e1a01000 	mov	r1, r0
    d878:	e1a03004 	mov	r3, r4
    d87c:	e1a00005 	mov	r0, r5
    d880:	e1a02006 	mov	r2, r6
    d884:	e58dc000 	str	ip, [sp]
    d888:	eb006249 	bl	261b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d88c:	e28d0010 	add	r0, sp, #16
    d890:	eb0066b0 	bl	27358 <CString::~CString()>
    d894:	e28dd020 	add	sp, sp, #32
    d898:	e8bd4070 	pop	{r4, r5, r6, lr}
    d89c:	e28dd008 	add	sp, sp, #8
    d8a0:	e12fff1e 	bx	lr
    d8a4:	e3a02e29 	mov	r2, #656	; 0x290
    d8a8:	e59f100c 	ldr	r1, [pc, #12]	; d8bc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    d8ac:	e59f000c 	ldr	r0, [pc, #12]	; d8c0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    d8b0:	eb005a03 	bl	240c4 <assertion_failed>
    d8b4:	000414f4 	.word	0x000414f4
    d8b8:	000413b4 	.word	0x000413b4
    d8bc:	000413bc 	.word	0x000413bc
    d8c0:	000414e4 	.word	0x000414e4

0000d8c4 <CUSBDevice::Initialize()>:
    d8c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8c8:	e5d03015 	ldrb	r3, [r0, #21]
    d8cc:	e24dd014 	sub	sp, sp, #20
    d8d0:	e3530002 	cmp	r3, #2
    d8d4:	1a00002a 	bne	d984 <CUSBDevice::Initialize()+0xc0>
    d8d8:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    d8dc:	e1a04000 	mov	r4, r0
    d8e0:	e3560000 	cmp	r6, #0
    d8e4:	1a000039 	bne	d9d0 <CUSBDevice::Initialize()+0x10c>
    d8e8:	e3a00012 	mov	r0, #18
    d8ec:	eb007410 	bl	2a934 <operator new(unsigned int)>
    d8f0:	e5943004 	ldr	r3, [r4, #4]
    d8f4:	e5840024 	str	r0, [r4, #36]	; 0x24
    d8f8:	e3530000 	cmp	r3, #0
    d8fc:	0a000037 	beq	d9e0 <CUSBDevice::Initialize()+0x11c>
    d900:	e5941018 	ldr	r1, [r4, #24]
    d904:	e3510000 	cmp	r1, #0
    d908:	0a000065 	beq	daa4 <CUSBDevice::Initialize()+0x1e0>
    d90c:	e3a02008 	mov	r2, #8
    d910:	e3a07080 	mov	r7, #128	; 0x80
    d914:	e58d0000 	str	r0, [sp]
    d918:	e98d0084 	stmib	sp, {r2, r7}
    d91c:	e1a00003 	mov	r0, r3
    d920:	e58d600c 	str	r6, [sp, #12]
    d924:	e1a03006 	mov	r3, r6
    d928:	e3a02001 	mov	r2, #1
    d92c:	eb001120 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d930:	e3500008 	cmp	r0, #8
    d934:	1a000019 	bne	d9a0 <CUSBDevice::Initialize()+0xdc>
    d938:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d93c:	e5d3a000 	ldrb	sl, [r3]
    d940:	e35a0012 	cmp	sl, #18
    d944:	1a000002 	bne	d954 <CUSBDevice::Initialize()+0x90>
    d948:	e5d3b001 	ldrb	fp, [r3, #1]
    d94c:	e35b0001 	cmp	fp, #1
    d950:	0a000026 	beq	d9f0 <CUSBDevice::Initialize()+0x12c>
    d954:	e3a05000 	mov	r5, #0
    d958:	e59f26a4 	ldr	r2, [pc, #1700]	; e004 <CUSBDevice::Initialize()+0x740>
    d95c:	e3a01001 	mov	r1, #1
    d960:	e1a00004 	mov	r0, r4
    d964:	ebffffaa 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d968:	e3a01012 	mov	r1, #18
    d96c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d970:	eb0073fd 	bl	2a96c <operator delete(void*, unsigned int)>
    d974:	e5845024 	str	r5, [r4, #36]	; 0x24
    d978:	e1a00005 	mov	r0, r5
    d97c:	e28dd014 	add	sp, sp, #20
    d980:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d984:	e3a05000 	mov	r5, #0
    d988:	e59f2678 	ldr	r2, [pc, #1656]	; e008 <CUSBDevice::Initialize()+0x744>
    d98c:	e3a01002 	mov	r1, #2
    d990:	ebffff9f 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d994:	e1a00005 	mov	r0, r5
    d998:	e28dd014 	add	sp, sp, #20
    d99c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a0:	e3a01001 	mov	r1, #1
    d9a4:	e59f2660 	ldr	r2, [pc, #1632]	; e00c <CUSBDevice::Initialize()+0x748>
    d9a8:	e1a05006 	mov	r5, r6
    d9ac:	e1a00004 	mov	r0, r4
    d9b0:	ebffff97 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d9b4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d9b8:	e3a01012 	mov	r1, #18
    d9bc:	eb0073ea 	bl	2a96c <operator delete(void*, unsigned int)>
    d9c0:	e1a00005 	mov	r0, r5
    d9c4:	e5846024 	str	r6, [r4, #36]	; 0x24
    d9c8:	e28dd014 	add	sp, sp, #20
    d9cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9d0:	e3a020a7 	mov	r2, #167	; 0xa7
    d9d4:	e59f1634 	ldr	r1, [pc, #1588]	; e010 <CUSBDevice::Initialize()+0x74c>
    d9d8:	e59f0634 	ldr	r0, [pc, #1588]	; e014 <CUSBDevice::Initialize()+0x750>
    d9dc:	eb0059b8 	bl	240c4 <assertion_failed>
    d9e0:	e3a020ab 	mov	r2, #171	; 0xab
    d9e4:	e59f1624 	ldr	r1, [pc, #1572]	; e010 <CUSBDevice::Initialize()+0x74c>
    d9e8:	e59f0628 	ldr	r0, [pc, #1576]	; e018 <CUSBDevice::Initialize()+0x754>
    d9ec:	eb0059b4 	bl	240c4 <assertion_failed>
    d9f0:	e5d31007 	ldrb	r1, [r3, #7]
    d9f4:	e5940018 	ldr	r0, [r4, #24]
    d9f8:	eb00038c 	bl	e830 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    d9fc:	e2505000 	subs	r5, r0, #0
    da00:	0a00002b 	beq	dab4 <CUSBDevice::Initialize()+0x1f0>
    da04:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    da08:	e5941018 	ldr	r1, [r4, #24]
    da0c:	e5940004 	ldr	r0, [r4, #4]
    da10:	e1a0200b 	mov	r2, fp
    da14:	e88d0408 	stm	sp, {r3, sl}
    da18:	e58d600c 	str	r6, [sp, #12]
    da1c:	e58d7008 	str	r7, [sp, #8]
    da20:	e1a03006 	mov	r3, r6
    da24:	eb0010e2 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    da28:	e3500012 	cmp	r0, #18
    da2c:	1a000029 	bne	dad8 <CUSBDevice::Initialize()+0x214>
    da30:	e59fc5e4 	ldr	ip, [pc, #1508]	; e01c <CUSBDevice::Initialize()+0x758>
    da34:	e1cc00d0 	ldrd	r0, [ip]
    da38:	e1b030a1 	lsrs	r3, r1, #1
    da3c:	e1a02060 	rrx	r2, r0
    da40:	e3a03000 	mov	r3, #0
    da44:	e2022001 	and	r2, r2, #1
    da48:	e1923003 	orrs	r3, r2, r3
    da4c:	0a000024 	beq	dae4 <CUSBDevice::Initialize()+0x220>
    da50:	e3a02002 	mov	r2, #2
    da54:	e3a07000 	mov	r7, #0
    da58:	e2623020 	rsb	r3, r2, #32
    da5c:	e1a08230 	lsr	r8, r0, r2
    da60:	e1888311 	orr	r8, r8, r1, lsl r3
    da64:	e2423020 	sub	r3, r2, #32
    da68:	e1888331 	orr	r8, r8, r1, lsr r3
    da6c:	e2086001 	and	r6, r8, #1
    da70:	e1963007 	orrs	r3, r6, r7
    da74:	e1a0e002 	mov	lr, r2
    da78:	e6ef6072 	uxtb	r6, r2
    da7c:	0a00001a 	beq	daec <CUSBDevice::Initialize()+0x228>
    da80:	e2822001 	add	r2, r2, #1
    da84:	e3520040 	cmp	r2, #64	; 0x40
    da88:	1afffff1 	bne	da54 <CUSBDevice::Initialize()+0x190>
    da8c:	e1a00004 	mov	r0, r4
    da90:	e59f2588 	ldr	r2, [pc, #1416]	; e020 <CUSBDevice::Initialize()+0x75c>
    da94:	e3a01001 	mov	r1, #1
    da98:	ebffff5d 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    da9c:	e3a05000 	mov	r5, #0
    daa0:	eaffffb4 	b	d978 <CUSBDevice::Initialize()+0xb4>
    daa4:	e3a020ac 	mov	r2, #172	; 0xac
    daa8:	e59f1560 	ldr	r1, [pc, #1376]	; e010 <CUSBDevice::Initialize()+0x74c>
    daac:	e59f0570 	ldr	r0, [pc, #1392]	; e024 <CUSBDevice::Initialize()+0x760>
    dab0:	eb005983 	bl	240c4 <assertion_failed>
    dab4:	e1a0100b 	mov	r1, fp
    dab8:	e59f2568 	ldr	r2, [pc, #1384]	; e028 <CUSBDevice::Initialize()+0x764>
    dabc:	e1a00004 	mov	r0, r4
    dac0:	ebffff53 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dac4:	e1a0100a 	mov	r1, sl
    dac8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    dacc:	eb0073a6 	bl	2a96c <operator delete(void*, unsigned int)>
    dad0:	e5845024 	str	r5, [r4, #36]	; 0x24
    dad4:	eaffffa7 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dad8:	e1a0100b 	mov	r1, fp
    dadc:	e59f2548 	ldr	r2, [pc, #1352]	; e02c <CUSBDevice::Initialize()+0x768>
    dae0:	eaffffb0 	b	d9a8 <CUSBDevice::Initialize()+0xe4>
    dae4:	e3a0e001 	mov	lr, #1
    dae8:	e1a0600e 	mov	r6, lr
    daec:	e3a07001 	mov	r7, #1
    daf0:	e24e5020 	sub	r5, lr, #32
    daf4:	e1a09517 	lsl	r9, r7, r5
    daf8:	e26e5020 	rsb	r5, lr, #32
    dafc:	e1899537 	orr	r9, r9, r7, lsr r5
    db00:	e1a08e17 	lsl	r8, r7, lr
    db04:	e1888000 	orr	r8, r8, r0
    db08:	e1899001 	orr	r9, r9, r1
    db0c:	e5940004 	ldr	r0, [r4, #4]
    db10:	e1a02006 	mov	r2, r6
    db14:	e5941018 	ldr	r1, [r4, #24]
    db18:	e1cc80f0 	strd	r8, [ip]
    db1c:	eb0010b2 	bl	11dec <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    db20:	e2505000 	subs	r5, r0, #0
    db24:	0a000037 	beq	dc08 <CUSBDevice::Initialize()+0x344>
    db28:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    db2c:	e5c46014 	strb	r6, [r4, #20]
    db30:	e3550000 	cmp	r5, #0
    db34:	1a000041 	bne	dc40 <CUSBDevice::Initialize()+0x37c>
    db38:	e3a00009 	mov	r0, #9
    db3c:	eb00737c 	bl	2a934 <operator new(unsigned int)>
    db40:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    db44:	e5840028 	str	r0, [r4, #40]	; 0x28
    db48:	e5d12008 	ldrb	r2, [r1, #8]
    db4c:	e5d1c009 	ldrb	ip, [r1, #9]
    db50:	e59f34d8 	ldr	r3, [pc, #1240]	; e030 <CUSBDevice::Initialize()+0x76c>
    db54:	e182240c 	orr	r2, r2, ip, lsl #8
    db58:	e1520003 	cmp	r2, r3
    db5c:	0a00002f 	beq	dc20 <CUSBDevice::Initialize()+0x35c>
    db60:	e3a08009 	mov	r8, #9
    db64:	e3a06000 	mov	r6, #0
    db68:	e3a07080 	mov	r7, #128	; 0x80
    db6c:	e5943004 	ldr	r3, [r4, #4]
    db70:	e5941018 	ldr	r1, [r4, #24]
    db74:	e3a02002 	mov	r2, #2
    db78:	e58d0000 	str	r0, [sp]
    db7c:	e58d600c 	str	r6, [sp, #12]
    db80:	e1a00003 	mov	r0, r3
    db84:	e58d7008 	str	r7, [sp, #8]
    db88:	e58d8004 	str	r8, [sp, #4]
    db8c:	e1a03005 	mov	r3, r5
    db90:	eb001087 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    db94:	e1500008 	cmp	r0, r8
    db98:	1a000010 	bne	dbe0 <CUSBDevice::Initialize()+0x31c>
    db9c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    dba0:	e5d09000 	ldrb	r9, [r0]
    dba4:	e3590009 	cmp	r9, #9
    dba8:	1a000002 	bne	dbb8 <CUSBDevice::Initialize()+0x2f4>
    dbac:	e5d0a001 	ldrb	sl, [r0, #1]
    dbb0:	e35a0002 	cmp	sl, #2
    dbb4:	0a000025 	beq	dc50 <CUSBDevice::Initialize()+0x38c>
    dbb8:	e3a05000 	mov	r5, #0
    dbbc:	e59f2470 	ldr	r2, [pc, #1136]	; e034 <CUSBDevice::Initialize()+0x770>
    dbc0:	e3a01001 	mov	r1, #1
    dbc4:	e1a00004 	mov	r0, r4
    dbc8:	ebffff11 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dbcc:	e3a01009 	mov	r1, #9
    dbd0:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    dbd4:	eb007364 	bl	2a96c <operator delete(void*, unsigned int)>
    dbd8:	e5845028 	str	r5, [r4, #40]	; 0x28
    dbdc:	eaffff65 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dbe0:	e59f2450 	ldr	r2, [pc, #1104]	; e038 <CUSBDevice::Initialize()+0x774>
    dbe4:	e3a01001 	mov	r1, #1
    dbe8:	e1a00004 	mov	r0, r4
    dbec:	ebffff08 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dbf0:	e1a01008 	mov	r1, r8
    dbf4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    dbf8:	eb00735b 	bl	2a96c <operator delete(void*, unsigned int)>
    dbfc:	e1a05006 	mov	r5, r6
    dc00:	e5846028 	str	r6, [r4, #40]	; 0x28
    dc04:	eaffff5b 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dc08:	e1a03006 	mov	r3, r6
    dc0c:	e1a01007 	mov	r1, r7
    dc10:	e1a00004 	mov	r0, r4
    dc14:	e59f2420 	ldr	r2, [pc, #1056]	; e03c <CUSBDevice::Initialize()+0x778>
    dc18:	ebfffefd 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dc1c:	eaffff55 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dc20:	e5d1500a 	ldrb	r5, [r1, #10]
    dc24:	e5d1200b 	ldrb	r2, [r1, #11]
    dc28:	e59f3410 	ldr	r3, [pc, #1040]	; e040 <CUSBDevice::Initialize()+0x77c>
    dc2c:	e1855402 	orr	r5, r5, r2, lsl #8
    dc30:	e0455003 	sub	r5, r5, r3
    dc34:	e16f5f15 	clz	r5, r5
    dc38:	e1a052a5 	lsr	r5, r5, #5
    dc3c:	eaffffc7 	b	db60 <CUSBDevice::Initialize()+0x29c>
    dc40:	e3a02c01 	mov	r2, #256	; 0x100
    dc44:	e59f13c4 	ldr	r1, [pc, #964]	; e010 <CUSBDevice::Initialize()+0x74c>
    dc48:	e59f03f4 	ldr	r0, [pc, #1012]	; e044 <CUSBDevice::Initialize()+0x780>
    dc4c:	eb00591c 	bl	240c4 <assertion_failed>
    dc50:	e5d08002 	ldrb	r8, [r0, #2]
    dc54:	e5d03003 	ldrb	r3, [r0, #3]
    dc58:	e1888403 	orr	r8, r8, r3, lsl #8
    dc5c:	e3580c02 	cmp	r8, #512	; 0x200
    dc60:	caffffd4 	bgt	dbb8 <CUSBDevice::Initialize()+0x2f4>
    dc64:	e1a01009 	mov	r1, r9
    dc68:	eb00733f 	bl	2a96c <operator delete(void*, unsigned int)>
    dc6c:	e1a00008 	mov	r0, r8
    dc70:	eb007330 	bl	2a938 <operator new[](unsigned int)>
    dc74:	e58d600c 	str	r6, [sp, #12]
    dc78:	e5840028 	str	r0, [r4, #40]	; 0x28
    dc7c:	e58d0000 	str	r0, [sp]
    dc80:	e58d7008 	str	r7, [sp, #8]
    dc84:	e58d8004 	str	r8, [sp, #4]
    dc88:	e1a03005 	mov	r3, r5
    dc8c:	e1a0200a 	mov	r2, sl
    dc90:	e5941018 	ldr	r1, [r4, #24]
    dc94:	e5940004 	ldr	r0, [r4, #4]
    dc98:	eb001045 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    dc9c:	e1580000 	cmp	r8, r0
    dca0:	1a000013 	bne	dcf4 <CUSBDevice::Initialize()+0x430>
    dca4:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
    dca8:	e3560000 	cmp	r6, #0
    dcac:	1a0000c4 	bne	dfc4 <CUSBDevice::Initialize()+0x700>
    dcb0:	e3a0001c 	mov	r0, #28
    dcb4:	eb00731e 	bl	2a934 <operator new(unsigned int)>
    dcb8:	e1a05000 	mov	r5, r0
    dcbc:	e1a02008 	mov	r2, r8
    dcc0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    dcc4:	eb00253b 	bl	171b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    dcc8:	e584502c 	str	r5, [r4, #44]	; 0x2c
    dccc:	e1a00005 	mov	r0, r5
    dcd0:	eb0025a2 	bl	17360 <CUSBConfigurationParser::IsValid() const>
    dcd4:	e2505000 	subs	r5, r0, #0
    dcd8:	1a000013 	bne	dd2c <CUSBDevice::Initialize()+0x468>
    dcdc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dce0:	e3500000 	cmp	r0, #0
    dce4:	0a00000c 	beq	dd1c <CUSBDevice::Initialize()+0x458>
    dce8:	e59f1358 	ldr	r1, [pc, #856]	; e048 <CUSBDevice::Initialize()+0x784>
    dcec:	eb0025eb 	bl	174a0 <CUSBConfigurationParser::Error(char const*) const>
    dcf0:	eaffff20 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dcf4:	e59f2350 	ldr	r2, [pc, #848]	; e04c <CUSBDevice::Initialize()+0x788>
    dcf8:	e3a01001 	mov	r1, #1
    dcfc:	e1a00004 	mov	r0, r4
    dd00:	ebfffec3 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dd04:	e1a01009 	mov	r1, r9
    dd08:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    dd0c:	eb007316 	bl	2a96c <operator delete(void*, unsigned int)>
    dd10:	e1a05006 	mov	r5, r6
    dd14:	e5846028 	str	r6, [r4, #40]	; 0x28
    dd18:	eaffff16 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dd1c:	e59f232c 	ldr	r2, [pc, #812]	; e050 <CUSBDevice::Initialize()+0x78c>
    dd20:	e59f12e8 	ldr	r1, [pc, #744]	; e010 <CUSBDevice::Initialize()+0x74c>
    dd24:	e59f0328 	ldr	r0, [pc, #808]	; e054 <CUSBDevice::Initialize()+0x790>
    dd28:	eb0058e5 	bl	240c4 <assertion_failed>
    dd2c:	e1a00004 	mov	r0, r4
    dd30:	ebfffe1f 	bl	d5b4 <CUSBDevice::GetNames() const>
    dd34:	e2507000 	subs	r7, r0, #0
    dd38:	0a0000ad 	beq	dff4 <CUSBDevice::Initialize()+0x730>
    dd3c:	eb0065ce 	bl	2747c <CString::operator char const*() const>
    dd40:	e59f2310 	ldr	r2, [pc, #784]	; e058 <CUSBDevice::Initialize()+0x794>
    dd44:	e1a03000 	mov	r3, r0
    dd48:	e3a01003 	mov	r1, #3
    dd4c:	e1a00004 	mov	r0, r4
    dd50:	ebfffeaf 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dd54:	e5973000 	ldr	r3, [r7]
    dd58:	e1a00007 	mov	r0, r7
    dd5c:	e5933004 	ldr	r3, [r3, #4]
    dd60:	e12fff33 	blx	r3
    dd64:	e1a08006 	mov	r8, r6
    dd68:	e1a0a006 	mov	sl, r6
    dd6c:	e3a01004 	mov	r1, #4
    dd70:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dd74:	eb00257b 	bl	17368 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    dd78:	e3500000 	cmp	r0, #0
    dd7c:	0a000094 	beq	dfd4 <CUSBDevice::Initialize()+0x710>
    dd80:	e5d03002 	ldrb	r3, [r0, #2]
    dd84:	e1530006 	cmp	r3, r6
    dd88:	ca000006 	bgt	dda8 <CUSBDevice::Initialize()+0x4e4>
    dd8c:	0a000006 	beq	ddac <CUSBDevice::Initialize()+0x4e8>
    dd90:	e5d03003 	ldrb	r3, [r0, #3]
    dd94:	e59f22c0 	ldr	r2, [pc, #704]	; e05c <CUSBDevice::Initialize()+0x798>
    dd98:	e3a01004 	mov	r1, #4
    dd9c:	e1a00004 	mov	r0, r4
    dda0:	ebfffe9b 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dda4:	eafffff0 	b	dd6c <CUSBDevice::Initialize()+0x4a8>
    dda8:	e1a06003 	mov	r6, r3
    ddac:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    ddb0:	e3530000 	cmp	r3, #0
    ddb4:	0a00007e 	beq	dfb4 <CUSBDevice::Initialize()+0x6f0>
    ddb8:	e0847108 	add	r7, r4, r8, lsl #2
    ddbc:	e5973030 	ldr	r3, [r7, #48]	; 0x30
    ddc0:	e3530000 	cmp	r3, #0
    ddc4:	1a00006c 	bne	df7c <CUSBDevice::Initialize()+0x6b8>
    ddc8:	e3a00010 	mov	r0, #16
    ddcc:	eb0072d8 	bl	2a934 <operator new(unsigned int)>
    ddd0:	e1a09000 	mov	r9, r0
    ddd4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    ddd8:	e1a01004 	mov	r1, r4
    dddc:	eb000352 	bl	eb2c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    dde0:	e3580000 	cmp	r8, #0
    dde4:	e5879030 	str	r9, [r7, #48]	; 0x30
    dde8:	0a000042 	beq	def8 <CUSBDevice::Initialize()+0x634>
    ddec:	e5970030 	ldr	r0, [r7, #48]	; 0x30
    ddf0:	eb0003ae 	bl	ecb0 <CUSBFunction::GetInterfaceName() const>
    ddf4:	e2509000 	subs	r9, r0, #0
    ddf8:	0a000033 	beq	decc <CUSBDevice::Initialize()+0x608>
    ddfc:	e59f125c 	ldr	r1, [pc, #604]	; e060 <CUSBDevice::Initialize()+0x79c>
    de00:	eb0065f0 	bl	275c8 <CString::Compare(char const*) const>
    de04:	e250b000 	subs	fp, r0, #0
    de08:	1a00000f 	bne	de4c <CUSBDevice::Initialize()+0x588>
    de0c:	e5993000 	ldr	r3, [r9]
    de10:	e1a00009 	mov	r0, r9
    de14:	e5933004 	ldr	r3, [r3, #4]
    de18:	e12fff33 	blx	r3
    de1c:	e5970030 	ldr	r0, [r7, #48]	; 0x30
    de20:	e3500000 	cmp	r0, #0
    de24:	0a000003 	beq	de38 <CUSBDevice::Initialize()+0x574>
    de28:	e5903000 	ldr	r3, [r0]
    de2c:	e5933004 	ldr	r3, [r3, #4]
    de30:	e12fff33 	blx	r3
    de34:	e587b030 	str	fp, [r7, #48]	; 0x30
    de38:	e59f2224 	ldr	r2, [pc, #548]	; e064 <CUSBDevice::Initialize()+0x7a0>
    de3c:	e3a01002 	mov	r1, #2
    de40:	e1a00004 	mov	r0, r4
    de44:	ebfffe72 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    de48:	eaffffc7 	b	dd6c <CUSBDevice::Initialize()+0x4a8>
    de4c:	e1a00009 	mov	r0, r9
    de50:	eb006589 	bl	2747c <CString::operator char const*() const>
    de54:	e59f220c 	ldr	r2, [pc, #524]	; e068 <CUSBDevice::Initialize()+0x7a4>
    de58:	e1a03000 	mov	r3, r0
    de5c:	e3a01003 	mov	r1, #3
    de60:	e1a00004 	mov	r0, r4
    de64:	ebfffe6a 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    de68:	e1a01009 	mov	r1, r9
    de6c:	e5970030 	ldr	r0, [r7, #48]	; 0x30
    de70:	eb0000c6 	bl	e190 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    de74:	e1a09000 	mov	r9, r0
    de78:	e5970030 	ldr	r0, [r7, #48]	; 0x30
    de7c:	e3500000 	cmp	r0, #0
    de80:	0a000002 	beq	de90 <CUSBDevice::Initialize()+0x5cc>
    de84:	e5903000 	ldr	r3, [r0]
    de88:	e5933004 	ldr	r3, [r3, #4]
    de8c:	e12fff33 	blx	r3
    de90:	e3590000 	cmp	r9, #0
    de94:	0a000036 	beq	df74 <CUSBDevice::Initialize()+0x6b0>
    de98:	e5993000 	ldr	r3, [r9]
    de9c:	e1a00009 	mov	r0, r9
    dea0:	e5879030 	str	r9, [r7, #48]	; 0x30
    dea4:	e5933018 	ldr	r3, [r3, #24]
    dea8:	e12fff33 	blx	r3
    deac:	e3500000 	cmp	r0, #0
    deb0:	0a000023 	beq	df44 <CUSBDevice::Initialize()+0x680>
    deb4:	e2888001 	add	r8, r8, #1
    deb8:	e358000a 	cmp	r8, #10
    debc:	0a000006 	beq	dedc <CUSBDevice::Initialize()+0x618>
    dec0:	e2866001 	add	r6, r6, #1
    dec4:	e6ef6076 	uxtb	r6, r6
    dec8:	eaffffa7 	b	dd6c <CUSBDevice::Initialize()+0x4a8>
    decc:	e3a02d06 	mov	r2, #384	; 0x180
    ded0:	e59f1138 	ldr	r1, [pc, #312]	; e010 <CUSBDevice::Initialize()+0x74c>
    ded4:	e59f0190 	ldr	r0, [pc, #400]	; e06c <CUSBDevice::Initialize()+0x7a8>
    ded8:	eb005879 	bl	240c4 <assertion_failed>
    dedc:	e1a03000 	mov	r3, r0
    dee0:	e59f2188 	ldr	r2, [pc, #392]	; e070 <CUSBDevice::Initialize()+0x7ac>
    dee4:	e1a00004 	mov	r0, r4
    dee8:	e3a01002 	mov	r1, #2
    deec:	e1a05003 	mov	r5, r3
    def0:	ebfffe47 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    def4:	eafffe9f 	b	d978 <CUSBDevice::Initialize()+0xb4>
    def8:	e1a0100a 	mov	r1, sl
    defc:	e1a00004 	mov	r0, r4
    df00:	ebfffd66 	bl	d4a0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    df04:	e1a01000 	mov	r1, r0
    df08:	e1a00009 	mov	r0, r9
    df0c:	eb00009f 	bl	e190 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    df10:	e2509000 	subs	r9, r0, #0
    df14:	0a00001c 	beq	df8c <CUSBDevice::Initialize()+0x6c8>
    df18:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    df1c:	e3500000 	cmp	r0, #0
    df20:	1affffd7 	bne	de84 <CUSBDevice::Initialize()+0x5c0>
    df24:	e5993000 	ldr	r3, [r9]
    df28:	e1a00009 	mov	r0, r9
    df2c:	e5849030 	str	r9, [r4, #48]	; 0x30
    df30:	e5933018 	ldr	r3, [r3, #24]
    df34:	e12fff33 	blx	r3
    df38:	e3500000 	cmp	r0, #0
    df3c:	13a08001 	movne	r8, #1
    df40:	1affffde 	bne	dec0 <CUSBDevice::Initialize()+0x5fc>
    df44:	e1a00004 	mov	r0, r4
    df48:	e59f2124 	ldr	r2, [pc, #292]	; e074 <CUSBDevice::Initialize()+0x7b0>
    df4c:	e3a01001 	mov	r1, #1
    df50:	ebfffe2f 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    df54:	e5970030 	ldr	r0, [r7, #48]	; 0x30
    df58:	e3500000 	cmp	r0, #0
    df5c:	0a000002 	beq	df6c <CUSBDevice::Initialize()+0x6a8>
    df60:	e5903000 	ldr	r3, [r0]
    df64:	e5933004 	ldr	r3, [r3, #4]
    df68:	e12fff33 	blx	r3
    df6c:	e587a030 	str	sl, [r7, #48]	; 0x30
    df70:	eaffff7d 	b	dd6c <CUSBDevice::Initialize()+0x4a8>
    df74:	e5879030 	str	r9, [r7, #48]	; 0x30
    df78:	eaffffae 	b	de38 <CUSBDevice::Initialize()+0x574>
    df7c:	e59f20f4 	ldr	r2, [pc, #244]	; e078 <CUSBDevice::Initialize()+0x7b4>
    df80:	e59f1088 	ldr	r1, [pc, #136]	; e010 <CUSBDevice::Initialize()+0x74c>
    df84:	e59f00f0 	ldr	r0, [pc, #240]	; e07c <CUSBDevice::Initialize()+0x7b8>
    df88:	eb00584d 	bl	240c4 <assertion_failed>
    df8c:	e3a01001 	mov	r1, #1
    df90:	e1a00004 	mov	r0, r4
    df94:	e5949030 	ldr	r9, [r4, #48]	; 0x30
    df98:	ebfffd40 	bl	d4a0 <CUSBDevice::GetName(TDeviceNameSelector) const>
    df9c:	e1a01000 	mov	r1, r0
    dfa0:	e1a00009 	mov	r0, r9
    dfa4:	eb000079 	bl	e190 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    dfa8:	e2509000 	subs	r9, r0, #0
    dfac:	1affffd9 	bne	df18 <CUSBDevice::Initialize()+0x654>
    dfb0:	eaffff8d 	b	ddec <CUSBDevice::Initialize()+0x528>
    dfb4:	e59f20c4 	ldr	r2, [pc, #196]	; e080 <CUSBDevice::Initialize()+0x7bc>
    dfb8:	e59f1050 	ldr	r1, [pc, #80]	; e010 <CUSBDevice::Initialize()+0x74c>
    dfbc:	e59f0090 	ldr	r0, [pc, #144]	; e054 <CUSBDevice::Initialize()+0x790>
    dfc0:	eb00583f 	bl	240c4 <assertion_failed>
    dfc4:	e59f20b8 	ldr	r2, [pc, #184]	; e084 <CUSBDevice::Initialize()+0x7c0>
    dfc8:	e59f1040 	ldr	r1, [pc, #64]	; e010 <CUSBDevice::Initialize()+0x74c>
    dfcc:	e59f00b4 	ldr	r0, [pc, #180]	; e088 <CUSBDevice::Initialize()+0x7c4>
    dfd0:	eb00583b 	bl	240c4 <assertion_failed>
    dfd4:	e3580000 	cmp	r8, #0
    dfd8:	1afffe66 	bne	d978 <CUSBDevice::Initialize()+0xb4>
    dfdc:	e1a00004 	mov	r0, r4
    dfe0:	e59f20a4 	ldr	r2, [pc, #164]	; e08c <CUSBDevice::Initialize()+0x7c8>
    dfe4:	e3a01002 	mov	r1, #2
    dfe8:	e1a05008 	mov	r5, r8
    dfec:	ebfffe08 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dff0:	eafffe60 	b	d978 <CUSBDevice::Initialize()+0xb4>
    dff4:	e59f2094 	ldr	r2, [pc, #148]	; e090 <CUSBDevice::Initialize()+0x7cc>
    dff8:	e59f1010 	ldr	r1, [pc, #16]	; e010 <CUSBDevice::Initialize()+0x74c>
    dffc:	e59f0090 	ldr	r0, [pc, #144]	; e094 <CUSBDevice::Initialize()+0x7d0>
    e000:	eb00582f 	bl	240c4 <assertion_failed>
    e004:	00041564 	.word	0x00041564
    e008:	000414fc 	.word	0x000414fc
    e00c:	0004153c 	.word	0x0004153c
    e010:	000413bc 	.word	0x000413bc
    e014:	00041528 	.word	0x00041528
    e018:	00041110 	.word	0x00041110
    e01c:	00050138 	.word	0x00050138
    e020:	00041768 	.word	0x00041768
    e024:	000414a4 	.word	0x000414a4
    e028:	00041580 	.word	0x00041580
    e02c:	000415a8 	.word	0x000415a8
    e030:	00000525 	.word	0x00000525
    e034:	00041620 	.word	0x00041620
    e038:	000415f4 	.word	0x000415f4
    e03c:	000415c8 	.word	0x000415c8
    e040:	0000a4a2 	.word	0x0000a4a2
    e044:	000415e0 	.word	0x000415e0
    e048:	000413b4 	.word	0x000413b4
    e04c:	00041644 	.word	0x00041644
    e050:	0000028a 	.word	0x0000028a
    e054:	000414cc 	.word	0x000414cc
    e058:	0004168c 	.word	0x0004168c
    e05c:	0004169c 	.word	0x0004169c
    e060:	0004146c 	.word	0x0004146c
    e064:	000416ec 	.word	0x000416ec
    e068:	000416d8 	.word	0x000416d8
    e06c:	00041474 	.word	0x00041474
    e070:	00041724 	.word	0x00041724
    e074:	00041708 	.word	0x00041708
    e078:	0000016e 	.word	0x0000016e
    e07c:	000416bc 	.word	0x000416bc
    e080:	0000016d 	.word	0x0000016d
    e084:	0000013e 	.word	0x0000013e
    e088:	00041668 	.word	0x00041668
    e08c:	00041744 	.word	0x00041744
    e090:	0000014a 	.word	0x0000014a
    e094:	00041680 	.word	0x00041680

0000e098 <CUSBDevice::Configure()>:
    e098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e09c:	e1a05000 	mov	r5, r0
    e0a0:	e5900004 	ldr	r0, [r0, #4]
    e0a4:	e3500000 	cmp	r0, #0
    e0a8:	0a00002a 	beq	e158 <CUSBDevice::Configure()+0xc0>
    e0ac:	e5951018 	ldr	r1, [r5, #24]
    e0b0:	e3510000 	cmp	r1, #0
    e0b4:	0a00002b 	beq	e168 <CUSBDevice::Configure()+0xd0>
    e0b8:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    e0bc:	e3560000 	cmp	r6, #0
    e0c0:	0a00001a 	beq	e130 <CUSBDevice::Configure()+0x98>
    e0c4:	e5d62005 	ldrb	r2, [r6, #5]
    e0c8:	eb000f5a 	bl	11e38 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    e0cc:	e2506000 	subs	r6, r0, #0
    e0d0:	0a000018 	beq	e138 <CUSBDevice::Configure()+0xa0>
    e0d4:	e3a06000 	mov	r6, #0
    e0d8:	e1a07006 	mov	r7, r6
    e0dc:	e2854030 	add	r4, r5, #48	; 0x30
    e0e0:	e2855058 	add	r5, r5, #88	; 0x58
    e0e4:	e5940000 	ldr	r0, [r4]
    e0e8:	e3500000 	cmp	r0, #0
    e0ec:	0a00000c 	beq	e124 <CUSBDevice::Configure()+0x8c>
    e0f0:	e5903000 	ldr	r3, [r0]
    e0f4:	e593301c 	ldr	r3, [r3, #28]
    e0f8:	e12fff33 	blx	r3
    e0fc:	e3500000 	cmp	r0, #0
    e100:	11a06000 	movne	r6, r0
    e104:	1a000006 	bne	e124 <CUSBDevice::Configure()+0x8c>
    e108:	e5940000 	ldr	r0, [r4]
    e10c:	e3500000 	cmp	r0, #0
    e110:	0a000002 	beq	e120 <CUSBDevice::Configure()+0x88>
    e114:	e5903000 	ldr	r3, [r0]
    e118:	e5933004 	ldr	r3, [r3, #4]
    e11c:	e12fff33 	blx	r3
    e120:	e5847000 	str	r7, [r4]
    e124:	e2844004 	add	r4, r4, #4
    e128:	e1550004 	cmp	r5, r4
    e12c:	1affffec 	bne	e0e4 <CUSBDevice::Configure()+0x4c>
    e130:	e1a00006 	mov	r0, r6
    e134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e138:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    e13c:	e1a00005 	mov	r0, r5
    e140:	e5d33005 	ldrb	r3, [r3, #5]
    e144:	e59f202c 	ldr	r2, [pc, #44]	; e178 <CUSBDevice::Configure()+0xe0>
    e148:	e3a01001 	mov	r1, #1
    e14c:	ebfffdb0 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e150:	e1a00006 	mov	r0, r6
    e154:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e158:	e59f201c 	ldr	r2, [pc, #28]	; e17c <CUSBDevice::Configure()+0xe4>
    e15c:	e59f101c 	ldr	r1, [pc, #28]	; e180 <CUSBDevice::Configure()+0xe8>
    e160:	e59f001c 	ldr	r0, [pc, #28]	; e184 <CUSBDevice::Configure()+0xec>
    e164:	eb0057d6 	bl	240c4 <assertion_failed>
    e168:	e59f2018 	ldr	r2, [pc, #24]	; e188 <CUSBDevice::Configure()+0xf0>
    e16c:	e59f100c 	ldr	r1, [pc, #12]	; e180 <CUSBDevice::Configure()+0xe8>
    e170:	e59f0014 	ldr	r0, [pc, #20]	; e18c <CUSBDevice::Configure()+0xf4>
    e174:	eb0057d2 	bl	240c4 <assertion_failed>
    e178:	0004177c 	.word	0x0004177c
    e17c:	000001b9 	.word	0x000001b9
    e180:	000413bc 	.word	0x000413bc
    e184:	00041110 	.word	0x00041110
    e188:	000001ba 	.word	0x000001ba
    e18c:	000414a4 	.word	0x000414a4

0000e190 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    e190:	e92d4070 	push	{r4, r5, r6, lr}
    e194:	e2506000 	subs	r6, r0, #0
    e198:	0a000042 	beq	e2a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x118>
    e19c:	e3510000 	cmp	r1, #0
    e1a0:	e1a04001 	mov	r4, r1
    e1a4:	0a000043 	beq	e2b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    e1a8:	e59f13d0 	ldr	r1, [pc, #976]	; e580 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    e1ac:	e1a00004 	mov	r0, r4
    e1b0:	eb006504 	bl	275c8 <CString::Compare(char const*) const>
    e1b4:	e3500000 	cmp	r0, #0
    e1b8:	1a000014 	bne	e210 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    e1bc:	e3a00068 	mov	r0, #104	; 0x68
    e1c0:	eb0071db 	bl	2a934 <operator new(unsigned int)>
    e1c4:	e1a01006 	mov	r1, r6
    e1c8:	e1a05000 	mov	r5, r0
    e1cc:	eb0017e8 	bl	14174 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    e1d0:	e1a00005 	mov	r0, r5
    e1d4:	eb0002dc 	bl	ed4c <CUSBFunction::GetDevice() const>
    e1d8:	e1a06000 	mov	r6, r0
    e1dc:	e1a00004 	mov	r0, r4
    e1e0:	eb0064a5 	bl	2747c <CString::operator char const*() const>
    e1e4:	e59f2398 	ldr	r2, [pc, #920]	; e584 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    e1e8:	e1a03000 	mov	r3, r0
    e1ec:	e3a01003 	mov	r1, #3
    e1f0:	e1a00006 	mov	r0, r6
    e1f4:	ebfffd86 	bl	d814 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e1f8:	e5943000 	ldr	r3, [r4]
    e1fc:	e1a00004 	mov	r0, r4
    e200:	e5933004 	ldr	r3, [r3, #4]
    e204:	e12fff33 	blx	r3
    e208:	e1a00005 	mov	r0, r5
    e20c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e210:	e59f1370 	ldr	r1, [pc, #880]	; e588 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    e214:	e1a00004 	mov	r0, r4
    e218:	eb0064ea 	bl	275c8 <CString::Compare(char const*) const>
    e21c:	e3500000 	cmp	r0, #0
    e220:	0affffe5 	beq	e1bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    e224:	e59f1360 	ldr	r1, [pc, #864]	; e58c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    e228:	e1a00004 	mov	r0, r4
    e22c:	eb0064e5 	bl	275c8 <CString::Compare(char const*) const>
    e230:	e3500000 	cmp	r0, #0
    e234:	1a000005 	bne	e250 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    e238:	e3a00030 	mov	r0, #48	; 0x30
    e23c:	eb0071bc 	bl	2a934 <operator new(unsigned int)>
    e240:	e1a01006 	mov	r1, r6
    e244:	e1a05000 	mov	r5, r0
    e248:	eb00107b 	bl	1243c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    e24c:	eaffffdf 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e250:	e59f1338 	ldr	r1, [pc, #824]	; e590 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    e254:	e1a00004 	mov	r0, r4
    e258:	eb0064da 	bl	275c8 <CString::Compare(char const*) const>
    e25c:	e3500000 	cmp	r0, #0
    e260:	0a00000a 	beq	e290 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x100>
    e264:	e59f1328 	ldr	r1, [pc, #808]	; e594 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    e268:	e1a00004 	mov	r0, r4
    e26c:	eb0064d5 	bl	275c8 <CString::Compare(char const*) const>
    e270:	e3500000 	cmp	r0, #0
    e274:	1a000013 	bne	e2c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    e278:	e3a00030 	mov	r0, #48	; 0x30
    e27c:	eb0071ac 	bl	2a934 <operator new(unsigned int)>
    e280:	e1a01006 	mov	r1, r6
    e284:	e1a05000 	mov	r5, r0
    e288:	eb0015b3 	bl	1395c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    e28c:	eaffffcf 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e290:	e3a00e45 	mov	r0, #1104	; 0x450
    e294:	eb0071a6 	bl	2a934 <operator new(unsigned int)>
    e298:	e1a01006 	mov	r1, r6
    e29c:	e1a05000 	mov	r5, r0
    e2a0:	eb000f86 	bl	120c0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    e2a4:	eaffffc9 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e2a8:	e3a0202b 	mov	r2, #43	; 0x2b
    e2ac:	e59f12e4 	ldr	r1, [pc, #740]	; e598 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    e2b0:	e59f02e4 	ldr	r0, [pc, #740]	; e59c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    e2b4:	eb005782 	bl	240c4 <assertion_failed>
    e2b8:	e3a0202c 	mov	r2, #44	; 0x2c
    e2bc:	e59f12d4 	ldr	r1, [pc, #724]	; e598 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    e2c0:	e59f02d8 	ldr	r0, [pc, #728]	; e5a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    e2c4:	eb00577e 	bl	240c4 <assertion_failed>
    e2c8:	e59f12d4 	ldr	r1, [pc, #724]	; e5a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    e2cc:	e1a00004 	mov	r0, r4
    e2d0:	eb0064bc 	bl	275c8 <CString::Compare(char const*) const>
    e2d4:	e3500000 	cmp	r0, #0
    e2d8:	0a00000a 	beq	e308 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x178>
    e2dc:	e59f12c4 	ldr	r1, [pc, #708]	; e5a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    e2e0:	e1a00004 	mov	r0, r4
    e2e4:	eb0064b7 	bl	275c8 <CString::Compare(char const*) const>
    e2e8:	e3500000 	cmp	r0, #0
    e2ec:	1a00000c 	bne	e324 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    e2f0:	e3a00f5b 	mov	r0, #364	; 0x16c
    e2f4:	eb00718e 	bl	2a934 <operator new(unsigned int)>
    e2f8:	e1a01006 	mov	r1, r6
    e2fc:	e1a05000 	mov	r5, r0
    e300:	eb0003b1 	bl	f1cc <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    e304:	eaffffb1 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e308:	e3a00f4f 	mov	r0, #316	; 0x13c
    e30c:	eb007188 	bl	2a934 <operator new(unsigned int)>
    e310:	e1a01006 	mov	r1, r6
    e314:	e3a02001 	mov	r2, #1
    e318:	e1a05000 	mov	r5, r0
    e31c:	eb0006c0 	bl	fe24 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    e320:	eaffffaa 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e324:	e59f1280 	ldr	r1, [pc, #640]	; e5ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    e328:	e1a00004 	mov	r0, r4
    e32c:	eb0064a5 	bl	275c8 <CString::Compare(char const*) const>
    e330:	e3500000 	cmp	r0, #0
    e334:	1a000005 	bne	e350 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1c0>
    e338:	e3a00f53 	mov	r0, #332	; 0x14c
    e33c:	eb00717c 	bl	2a934 <operator new(unsigned int)>
    e340:	e1a01006 	mov	r1, r6
    e344:	e1a05000 	mov	r5, r0
    e348:	eb000508 	bl	f770 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    e34c:	eaffff9f 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e350:	e59f1258 	ldr	r1, [pc, #600]	; e5b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    e354:	e1a00004 	mov	r0, r4
    e358:	eb00649a 	bl	275c8 <CString::Compare(char const*) const>
    e35c:	e3500000 	cmp	r0, #0
    e360:	0afffff4 	beq	e338 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
    e364:	e59f1248 	ldr	r1, [pc, #584]	; e5b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    e368:	e1a00004 	mov	r0, r4
    e36c:	eb006495 	bl	275c8 <CString::Compare(char const*) const>
    e370:	e3500000 	cmp	r0, #0
    e374:	1a000005 	bne	e390 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    e378:	e3a00e13 	mov	r0, #304	; 0x130
    e37c:	eb00716c 	bl	2a934 <operator new(unsigned int)>
    e380:	e1a01006 	mov	r1, r6
    e384:	e1a05000 	mov	r5, r0
    e388:	eb000ae4 	bl	10f20 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    e38c:	eaffff8f 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e390:	e59f1220 	ldr	r1, [pc, #544]	; e5b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    e394:	e1a00004 	mov	r0, r4
    e398:	eb00648a 	bl	275c8 <CString::Compare(char const*) const>
    e39c:	e3500000 	cmp	r0, #0
    e3a0:	0afffff4 	beq	e378 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1e8>
    e3a4:	e59f1210 	ldr	r1, [pc, #528]	; e5bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    e3a8:	e1a00004 	mov	r0, r4
    e3ac:	eb006485 	bl	275c8 <CString::Compare(char const*) const>
    e3b0:	e3500000 	cmp	r0, #0
    e3b4:	1a000005 	bne	e3d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x240>
    e3b8:	e3a00f4d 	mov	r0, #308	; 0x134
    e3bc:	eb00715c 	bl	2a934 <operator new(unsigned int)>
    e3c0:	e1a01006 	mov	r1, r6
    e3c4:	e1a05000 	mov	r5, r0
    e3c8:	eb000bec 	bl	11380 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    e3cc:	eaffff7f 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e3d0:	e59f11e8 	ldr	r1, [pc, #488]	; e5c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    e3d4:	e1a00004 	mov	r0, r4
    e3d8:	eb00647a 	bl	275c8 <CString::Compare(char const*) const>
    e3dc:	e3500000 	cmp	r0, #0
    e3e0:	0afffff4 	beq	e3b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    e3e4:	e59f11d8 	ldr	r1, [pc, #472]	; e5c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    e3e8:	e1a00004 	mov	r0, r4
    e3ec:	eb006475 	bl	275c8 <CString::Compare(char const*) const>
    e3f0:	e3500000 	cmp	r0, #0
    e3f4:	0affffef 	beq	e3b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    e3f8:	e59f11c8 	ldr	r1, [pc, #456]	; e5c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    e3fc:	e1a00004 	mov	r0, r4
    e400:	eb006470 	bl	275c8 <CString::Compare(char const*) const>
    e404:	e3500000 	cmp	r0, #0
    e408:	0affffea 	beq	e3b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    e40c:	e59f11b8 	ldr	r1, [pc, #440]	; e5cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    e410:	e1a00004 	mov	r0, r4
    e414:	eb00646b 	bl	275c8 <CString::Compare(char const*) const>
    e418:	e3500000 	cmp	r0, #0
    e41c:	1a000005 	bne	e438 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    e420:	e3a00f4d 	mov	r0, #308	; 0x134
    e424:	eb007142 	bl	2a934 <operator new(unsigned int)>
    e428:	e1a01006 	mov	r1, r6
    e42c:	e1a05000 	mov	r5, r0
    e430:	eb00093e 	bl	10930 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    e434:	eaffff65 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e438:	e59f1190 	ldr	r1, [pc, #400]	; e5d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    e43c:	e1a00004 	mov	r0, r4
    e440:	eb006460 	bl	275c8 <CString::Compare(char const*) const>
    e444:	e3500000 	cmp	r0, #0
    e448:	1a000005 	bne	e464 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d4>
    e44c:	e3a0001c 	mov	r0, #28
    e450:	eb007137 	bl	2a934 <operator new(unsigned int)>
    e454:	e1a01006 	mov	r1, r6
    e458:	e1a05000 	mov	r5, r0
    e45c:	eb001595 	bl	13ab8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    e460:	eaffff5a 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e464:	e59f1168 	ldr	r1, [pc, #360]	; e5d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    e468:	e1a00004 	mov	r0, r4
    e46c:	eb006455 	bl	275c8 <CString::Compare(char const*) const>
    e470:	e3500000 	cmp	r0, #0
    e474:	0afffff4 	beq	e44c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2bc>
    e478:	e59f1158 	ldr	r1, [pc, #344]	; e5d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    e47c:	e1a00004 	mov	r0, r4
    e480:	eb006450 	bl	275c8 <CString::Compare(char const*) const>
    e484:	e3500000 	cmp	r0, #0
    e488:	1a000005 	bne	e4a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    e48c:	e3a00024 	mov	r0, #36	; 0x24
    e490:	eb007127 	bl	2a934 <operator new(unsigned int)>
    e494:	e1a01006 	mov	r1, r6
    e498:	e1a05000 	mov	r5, r0
    e49c:	eb001e38 	bl	15d84 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    e4a0:	eaffff4a 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e4a4:	e59f1130 	ldr	r1, [pc, #304]	; e5dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    e4a8:	e1a00004 	mov	r0, r4
    e4ac:	eb006445 	bl	275c8 <CString::Compare(char const*) const>
    e4b0:	e3500000 	cmp	r0, #0
    e4b4:	1a000005 	bne	e4d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    e4b8:	e3a00024 	mov	r0, #36	; 0x24
    e4bc:	eb00711c 	bl	2a934 <operator new(unsigned int)>
    e4c0:	e1a01006 	mov	r1, r6
    e4c4:	e1a05000 	mov	r5, r0
    e4c8:	eb001a96 	bl	14f28 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    e4cc:	eaffff3f 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e4d0:	e59f1108 	ldr	r1, [pc, #264]	; e5e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    e4d4:	e1a00004 	mov	r0, r4
    e4d8:	eb00643a 	bl	275c8 <CString::Compare(char const*) const>
    e4dc:	e3500000 	cmp	r0, #0
    e4e0:	1a000005 	bne	e4fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x36c>
    e4e4:	e3a00028 	mov	r0, #40	; 0x28
    e4e8:	eb007111 	bl	2a934 <operator new(unsigned int)>
    e4ec:	e1a01006 	mov	r1, r6
    e4f0:	e1a05000 	mov	r5, r0
    e4f4:	eb002070 	bl	166bc <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    e4f8:	eaffff34 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e4fc:	e59f10e0 	ldr	r1, [pc, #224]	; e5e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    e500:	e1a00004 	mov	r0, r4
    e504:	eb00642f 	bl	275c8 <CString::Compare(char const*) const>
    e508:	e3500000 	cmp	r0, #0
    e50c:	0afffff4 	beq	e4e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    e510:	e59f10d0 	ldr	r1, [pc, #208]	; e5e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    e514:	e1a00004 	mov	r0, r4
    e518:	eb00642a 	bl	275c8 <CString::Compare(char const*) const>
    e51c:	e3500000 	cmp	r0, #0
    e520:	1a000005 	bne	e53c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ac>
    e524:	e3a00028 	mov	r0, #40	; 0x28
    e528:	eb007101 	bl	2a934 <operator new(unsigned int)>
    e52c:	e1a01006 	mov	r1, r6
    e530:	e1a05000 	mov	r5, r0
    e534:	eb0012ff 	bl	13138 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    e538:	eaffff24 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e53c:	e59f10a8 	ldr	r1, [pc, #168]	; e5ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    e540:	e1a00004 	mov	r0, r4
    e544:	eb00641f 	bl	275c8 <CString::Compare(char const*) const>
    e548:	e3500000 	cmp	r0, #0
    e54c:	0afffff4 	beq	e524 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x394>
    e550:	e59f1098 	ldr	r1, [pc, #152]	; e5f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    e554:	e1a00004 	mov	r0, r4
    e558:	eb00641a 	bl	275c8 <CString::Compare(char const*) const>
    e55c:	e3500000 	cmp	r0, #0
    e560:	13a05000 	movne	r5, #0
    e564:	1affff23 	bne	e1f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    e568:	e3a00024 	mov	r0, #36	; 0x24
    e56c:	eb0070f0 	bl	2a934 <operator new(unsigned int)>
    e570:	e1a01006 	mov	r1, r6
    e574:	e1a05000 	mov	r5, r0
    e578:	eb00222c 	bl	16e30 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    e57c:	eaffff13 	b	e1d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    e580:	000417c4 	.word	0x000417c4
    e584:	000418f0 	.word	0x000418f0
    e588:	000417d0 	.word	0x000417d0
    e58c:	0004189c 	.word	0x0004189c
    e590:	000417dc 	.word	0x000417dc
    e594:	000417e8 	.word	0x000417e8
    e598:	0004179c 	.word	0x0004179c
    e59c:	000417b4 	.word	0x000417b4
    e5a0:	00041474 	.word	0x00041474
    e5a4:	000417f4 	.word	0x000417f4
    e5a8:	00041800 	.word	0x00041800
    e5ac:	0004180c 	.word	0x0004180c
    e5b0:	00041818 	.word	0x00041818
    e5b4:	000418a8 	.word	0x000418a8
    e5b8:	00041824 	.word	0x00041824
    e5bc:	000418b4 	.word	0x000418b4
    e5c0:	00041830 	.word	0x00041830
    e5c4:	0004183c 	.word	0x0004183c
    e5c8:	00041848 	.word	0x00041848
    e5cc:	000418c0 	.word	0x000418c0
    e5d0:	00041854 	.word	0x00041854
    e5d4:	00041860 	.word	0x00041860
    e5d8:	000418cc 	.word	0x000418cc
    e5dc:	0004186c 	.word	0x0004186c
    e5e0:	00041878 	.word	0x00041878
    e5e4:	00041884 	.word	0x00041884
    e5e8:	000418d8 	.word	0x000418d8
    e5ec:	00041890 	.word	0x00041890
    e5f0:	000418e4 	.word	0x000418e4

0000e5f4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    e5f4:	e3a02000 	mov	r2, #0
    e5f8:	e92d4010 	push	{r4, lr}
    e5fc:	e3a0c001 	mov	ip, #1
    e600:	e3a0e008 	mov	lr, #8
    e604:	e1510002 	cmp	r1, r2
    e608:	e5801000 	str	r1, [r0]
    e60c:	e580e008 	str	lr, [r0, #8]
    e610:	e580c00c 	str	ip, [r0, #12]
    e614:	e5c02004 	strb	r2, [r0, #4]
    e618:	e5c02005 	strb	r2, [r0, #5]
    e61c:	e5c02006 	strb	r2, [r0, #6]
    e620:	e5c02010 	strb	r2, [r0, #16]
    e624:	18bd8010 	popne	{r4, pc}
    e628:	e3a02023 	mov	r2, #35	; 0x23
    e62c:	e59f1004 	ldr	r1, [pc, #4]	; e638 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    e630:	e59f0004 	ldr	r0, [pc, #4]	; e63c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    e634:	eb0056a2 	bl	240c4 <assertion_failed>
    e638:	0004190c 	.word	0x0004190c
    e63c:	00041290 	.word	0x00041290

0000e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    e640:	e92d4070 	push	{r4, r5, r6, lr}
    e644:	e3a05001 	mov	r5, #1
    e648:	e3510000 	cmp	r1, #0
    e64c:	e5801000 	str	r1, [r0]
    e650:	e580500c 	str	r5, [r0, #12]
    e654:	e5c05010 	strb	r5, [r0, #16]
    e658:	0a000041 	beq	e764 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    e65c:	e3520000 	cmp	r2, #0
    e660:	0a000043 	beq	e774 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
    e664:	e5d23000 	ldrb	r3, [r2]
    e668:	e3530006 	cmp	r3, #6
    e66c:	9a000044 	bls	e784 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x144>
    e670:	e5d23001 	ldrb	r3, [r2, #1]
    e674:	e3530005 	cmp	r3, #5
    e678:	1a000045 	bne	e794 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x154>
    e67c:	e5d23003 	ldrb	r3, [r2, #3]
    e680:	e1a04000 	mov	r4, r0
    e684:	e2033003 	and	r3, r3, #3
    e688:	e3530002 	cmp	r3, #2
    e68c:	0a000022 	beq	e71c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xdc>
    e690:	e3530003 	cmp	r3, #3
    e694:	1a00002e 	bne	e754 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    e698:	e3a03002 	mov	r3, #2
    e69c:	e5c03005 	strb	r3, [r0, #5]
    e6a0:	e5d23002 	ldrb	r3, [r2, #2]
    e6a4:	e203000f 	and	r0, r3, #15
    e6a8:	e1a033a3 	lsr	r3, r3, #7
    e6ac:	e5c40004 	strb	r0, [r4, #4]
    e6b0:	e5c43006 	strb	r3, [r4, #6]
    e6b4:	e5d23004 	ldrb	r3, [r2, #4]
    e6b8:	e5d20005 	ldrb	r0, [r2, #5]
    e6bc:	e1833400 	orr	r3, r3, r0, lsl #8
    e6c0:	e1a03a83 	lsl	r3, r3, #21
    e6c4:	e1a03aa3 	lsr	r3, r3, #21
    e6c8:	e5843008 	str	r3, [r4, #8]
    e6cc:	e5d26006 	ldrb	r6, [r2, #6]
    e6d0:	e3560000 	cmp	r6, #0
    e6d4:	0a000032 	beq	e7a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    e6d8:	e1a00001 	mov	r0, r1
    e6dc:	ebfffbfd 	bl	d6d8 <CUSBDevice::GetSpeed() const>
    e6e0:	e3500001 	cmp	r0, #1
    e6e4:	da000037 	ble	e7c8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    e6e8:	e3560010 	cmp	r6, #16
    e6ec:	c3a03a01 	movgt	r3, #4096	; 0x1000
    e6f0:	c584300c 	strgt	r3, [r4, #12]
    e6f4:	ca000014 	bgt	e74c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    e6f8:	e2466001 	sub	r6, r6, #1
    e6fc:	e1a05615 	lsl	r5, r5, r6
    e700:	e1a061a5 	lsr	r6, r5, #3
    e704:	e3560000 	cmp	r6, #0
    e708:	e584600c 	str	r6, [r4, #12]
    e70c:	0a000028 	beq	e7b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    e710:	e3560013 	cmp	r6, #19
    e714:	9a000026 	bls	e7b4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    e718:	ea00000b 	b	e74c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    e71c:	e5c05005 	strb	r5, [r0, #5]
    e720:	e5d23002 	ldrb	r3, [r2, #2]
    e724:	e203100f 	and	r1, r3, #15
    e728:	e1a033a3 	lsr	r3, r3, #7
    e72c:	e5c01004 	strb	r1, [r0, #4]
    e730:	e5c03006 	strb	r3, [r0, #6]
    e734:	e5d23004 	ldrb	r3, [r2, #4]
    e738:	e5d22005 	ldrb	r2, [r2, #5]
    e73c:	e1833402 	orr	r3, r3, r2, lsl #8
    e740:	e1a03a83 	lsl	r3, r3, #21
    e744:	e1a03aa3 	lsr	r3, r3, #21
    e748:	e5803008 	str	r3, [r0, #8]
    e74c:	e1a00004 	mov	r0, r4
    e750:	e8bd8070 	pop	{r4, r5, r6, pc}
    e754:	e3a02043 	mov	r2, #67	; 0x43
    e758:	e59f1070 	ldr	r1, [pc, #112]	; e7d0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e75c:	e59f0070 	ldr	r0, [pc, #112]	; e7d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x194>
    e760:	eb005657 	bl	240c4 <assertion_failed>
    e764:	e3a02032 	mov	r2, #50	; 0x32
    e768:	e59f1060 	ldr	r1, [pc, #96]	; e7d0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e76c:	e59f0064 	ldr	r0, [pc, #100]	; e7d8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x198>
    e770:	eb005653 	bl	240c4 <assertion_failed>
    e774:	e3a02034 	mov	r2, #52	; 0x34
    e778:	e59f1050 	ldr	r1, [pc, #80]	; e7d0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e77c:	e59f0058 	ldr	r0, [pc, #88]	; e7dc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x19c>
    e780:	eb00564f 	bl	240c4 <assertion_failed>
    e784:	e3a02035 	mov	r2, #53	; 0x35
    e788:	e59f1040 	ldr	r1, [pc, #64]	; e7d0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e78c:	e59f004c 	ldr	r0, [pc, #76]	; e7e0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    e790:	eb00564b 	bl	240c4 <assertion_failed>
    e794:	e3a02036 	mov	r2, #54	; 0x36
    e798:	e59f1030 	ldr	r1, [pc, #48]	; e7d0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    e79c:	e59f0040 	ldr	r0, [pc, #64]	; e7e4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    e7a0:	eb005647 	bl	240c4 <assertion_failed>
    e7a4:	e1a00001 	mov	r0, r1
    e7a8:	ebfffbca 	bl	d6d8 <CUSBDevice::GetSpeed() const>
    e7ac:	e3500001 	cmp	r0, #1
    e7b0:	da000003 	ble	e7c4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    e7b4:	e3a03014 	mov	r3, #20
    e7b8:	e1a00004 	mov	r0, r4
    e7bc:	e584300c 	str	r3, [r4, #12]
    e7c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e7c4:	e1a06005 	mov	r6, r5
    e7c8:	e584600c 	str	r6, [r4, #12]
    e7cc:	eaffffcf 	b	e710 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    e7d0:	0004190c 	.word	0x0004190c
    e7d4:	000414b4 	.word	0x000414b4
    e7d8:	00041290 	.word	0x00041290
    e7dc:	0004191c 	.word	0x0004191c
    e7e0:	00041928 	.word	0x00041928
    e7e4:	00041948 	.word	0x00041948

0000e7e8 <CUSBEndpoint::~CUSBEndpoint()>:
    e7e8:	e12fff1e 	bx	lr

0000e7ec <CUSBEndpoint::GetDevice() const>:
    e7ec:	e5900000 	ldr	r0, [r0]
    e7f0:	e3500000 	cmp	r0, #0
    e7f4:	0a000000 	beq	e7fc <CUSBEndpoint::GetDevice() const+0x10>
    e7f8:	e12fff1e 	bx	lr
    e7fc:	e92d4010 	push	{r4, lr}
    e800:	e3a02086 	mov	r2, #134	; 0x86
    e804:	e59f1004 	ldr	r1, [pc, #4]	; e810 <CUSBEndpoint::GetDevice() const+0x24>
    e808:	e59f0004 	ldr	r0, [pc, #4]	; e814 <CUSBEndpoint::GetDevice() const+0x28>
    e80c:	eb00562c 	bl	240c4 <assertion_failed>
    e810:	0004190c 	.word	0x0004190c
    e814:	00041290 	.word	0x00041290

0000e818 <CUSBEndpoint::GetNumber() const>:
    e818:	e5d00004 	ldrb	r0, [r0, #4]
    e81c:	e12fff1e 	bx	lr

0000e820 <CUSBEndpoint::GetType() const>:
    e820:	e5d00005 	ldrb	r0, [r0, #5]
    e824:	e12fff1e 	bx	lr

0000e828 <CUSBEndpoint::IsDirectionIn() const>:
    e828:	e5d00006 	ldrb	r0, [r0, #6]
    e82c:	e12fff1e 	bx	lr

0000e830 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    e830:	e5801008 	str	r1, [r0, #8]
    e834:	e3a00001 	mov	r0, #1
    e838:	e12fff1e 	bx	lr

0000e83c <CUSBEndpoint::GetMaxPacketSize() const>:
    e83c:	e5900008 	ldr	r0, [r0, #8]
    e840:	e12fff1e 	bx	lr

0000e844 <CUSBEndpoint::GetInterval() const>:
    e844:	e5d03005 	ldrb	r3, [r0, #5]
    e848:	e3530002 	cmp	r3, #2
    e84c:	1a000001 	bne	e858 <CUSBEndpoint::GetInterval() const+0x14>
    e850:	e590000c 	ldr	r0, [r0, #12]
    e854:	e12fff1e 	bx	lr
    e858:	e92d4010 	push	{r4, lr}
    e85c:	e3a020ae 	mov	r2, #174	; 0xae
    e860:	e59f1004 	ldr	r1, [pc, #4]	; e86c <CUSBEndpoint::GetInterval() const+0x28>
    e864:	e59f0004 	ldr	r0, [pc, #4]	; e870 <CUSBEndpoint::GetInterval() const+0x2c>
    e868:	eb005615 	bl	240c4 <assertion_failed>
    e86c:	0004190c 	.word	0x0004190c
    e870:	00041978 	.word	0x00041978

0000e874 <CUSBEndpoint::GetNextPID(bool)>:
    e874:	e3510000 	cmp	r1, #0
    e878:	0a000004 	beq	e890 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    e87c:	e5d03005 	ldrb	r3, [r0, #5]
    e880:	e3530000 	cmp	r3, #0
    e884:	03a00002 	moveq	r0, #2
    e888:	1a000002 	bne	e898 <CUSBEndpoint::GetNextPID(bool)+0x24>
    e88c:	e12fff1e 	bx	lr
    e890:	e5d00010 	ldrb	r0, [r0, #16]
    e894:	e12fff1e 	bx	lr
    e898:	e92d4010 	push	{r4, lr}
    e89c:	e3a020b7 	mov	r2, #183	; 0xb7
    e8a0:	e59f1004 	ldr	r1, [pc, #4]	; e8ac <CUSBEndpoint::GetNextPID(bool)+0x38>
    e8a4:	e59f0004 	ldr	r0, [pc, #4]	; e8b0 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    e8a8:	eb005605 	bl	240c4 <assertion_failed>
    e8ac:	0004190c 	.word	0x0004190c
    e8b0:	00041998 	.word	0x00041998

0000e8b4 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    e8b4:	e5d03005 	ldrb	r3, [r0, #5]
    e8b8:	e92d4010 	push	{r4, lr}
    e8bc:	e3530002 	cmp	r3, #2
    e8c0:	8a000018 	bhi	e928 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x74>
    e8c4:	e3520000 	cmp	r2, #0
    e8c8:	1a000009 	bne	e8f4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
    e8cc:	e5d03010 	ldrb	r3, [r0, #16]
    e8d0:	e3530001 	cmp	r3, #1
    e8d4:	0a00000e 	beq	e914 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x60>
    e8d8:	3a00000f 	bcc	e91c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x68>
    e8dc:	e3530002 	cmp	r3, #2
    e8e0:	1a000007 	bne	e904 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
    e8e4:	e3110001 	tst	r1, #1
    e8e8:	13a03001 	movne	r3, #1
    e8ec:	15c03010 	strbne	r3, [r0, #16]
    e8f0:	e8bd8010 	pop	{r4, pc}
    e8f4:	e3530000 	cmp	r3, #0
    e8f8:	1a00000e 	bne	e938 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x84>
    e8fc:	e5c03010 	strb	r3, [r0, #16]
    e900:	e8bd8010 	pop	{r4, pc}
    e904:	e3a020dc 	mov	r2, #220	; 0xdc
    e908:	e59f1038 	ldr	r1, [pc, #56]	; e948 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    e90c:	e59f0038 	ldr	r0, [pc, #56]	; e94c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    e910:	eb0055eb 	bl	240c4 <assertion_failed>
    e914:	e3110001 	tst	r1, #1
    e918:	08bd8010 	popeq	{r4, pc}
    e91c:	e3a03002 	mov	r3, #2
    e920:	e5c03010 	strb	r3, [r0, #16]
    e924:	e8bd8010 	pop	{r4, pc}
    e928:	e3a020c3 	mov	r2, #195	; 0xc3
    e92c:	e59f1014 	ldr	r1, [pc, #20]	; e948 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    e930:	e59f0018 	ldr	r0, [pc, #24]	; e950 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    e934:	eb0055e2 	bl	240c4 <assertion_failed>
    e938:	e3a020e2 	mov	r2, #226	; 0xe2
    e93c:	e59f1004 	ldr	r1, [pc, #4]	; e948 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    e940:	e59f000c 	ldr	r0, [pc, #12]	; e954 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    e944:	eb0055de 	bl	240c4 <assertion_failed>
    e948:	0004190c 	.word	0x0004190c
    e94c:	000414b4 	.word	0x000414b4
    e950:	000419b8 	.word	0x000419b8
    e954:	00041998 	.word	0x00041998

0000e958 <CUSBEndpoint::ResetPID()>:
    e958:	e5d03005 	ldrb	r3, [r0, #5]
    e95c:	e3530001 	cmp	r3, #1
    e960:	1a000001 	bne	e96c <CUSBEndpoint::ResetPID()+0x14>
    e964:	e5c03010 	strb	r3, [r0, #16]
    e968:	e12fff1e 	bx	lr
    e96c:	e92d4010 	push	{r4, lr}
    e970:	e3a020ed 	mov	r2, #237	; 0xed
    e974:	e59f1004 	ldr	r1, [pc, #4]	; e980 <CUSBEndpoint::ResetPID()+0x28>
    e978:	e59f0004 	ldr	r0, [pc, #4]	; e984 <CUSBEndpoint::ResetPID()+0x2c>
    e97c:	eb0055d0 	bl	240c4 <assertion_failed>
    e980:	0004190c 	.word	0x0004190c
    e984:	00041a18 	.word	0x00041a18

0000e988 <CUSBFunction::Initialize()>:
    e988:	e3a00001 	mov	r0, #1
    e98c:	e12fff1e 	bx	lr

0000e990 <CUSBFunction::ReScanDevices()>:
    e990:	e3a00000 	mov	r0, #0
    e994:	e12fff1e 	bx	lr

0000e998 <CUSBFunction::~CUSBFunction()>:
    e998:	e3a03000 	mov	r3, #0
    e99c:	e92d4070 	push	{r4, r5, r6, lr}
    e9a0:	e5905008 	ldr	r5, [r0, #8]
    e9a4:	e59f2040 	ldr	r2, [pc, #64]	; e9ec <CUSBFunction::~CUSBFunction()+0x54>
    e9a8:	e1550003 	cmp	r5, r3
    e9ac:	e1a04000 	mov	r4, r0
    e9b0:	e5802000 	str	r2, [r0]
    e9b4:	e580300c 	str	r3, [r0, #12]
    e9b8:	0a000004 	beq	e9d0 <CUSBFunction::~CUSBFunction()+0x38>
    e9bc:	e1a00005 	mov	r0, r5
    e9c0:	eb002265 	bl	1735c <CUSBConfigurationParser::~CUSBConfigurationParser()>
    e9c4:	e1a00005 	mov	r0, r5
    e9c8:	e3a0101c 	mov	r1, #28
    e9cc:	eb006fe6 	bl	2a96c <operator delete(void*, unsigned int)>
    e9d0:	e3a03000 	mov	r3, #0
    e9d4:	e1a00004 	mov	r0, r4
    e9d8:	e5843008 	str	r3, [r4, #8]
    e9dc:	e5843004 	str	r3, [r4, #4]
    e9e0:	eb00579a 	bl	24850 <CDevice::~CDevice()>
    e9e4:	e1a00004 	mov	r0, r4
    e9e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e9ec:	00041a3c 	.word	0x00041a3c

0000e9f0 <CUSBFunction::~CUSBFunction()>:
    e9f0:	e92d4010 	push	{r4, lr}
    e9f4:	e1a04000 	mov	r4, r0
    e9f8:	ebffffe6 	bl	e998 <CUSBFunction::~CUSBFunction()>
    e9fc:	e1a00004 	mov	r0, r4
    ea00:	e3a01010 	mov	r1, #16
    ea04:	eb006fd8 	bl	2a96c <operator delete(void*, unsigned int)>
    ea08:	e1a00004 	mov	r0, r4
    ea0c:	e8bd8010 	pop	{r4, pc}

0000ea10 <CUSBFunction::RemoveDevice()>:
    ea10:	e5900004 	ldr	r0, [r0, #4]
    ea14:	e3500000 	cmp	r0, #0
    ea18:	0a000000 	beq	ea20 <CUSBFunction::RemoveDevice()+0x10>
    ea1c:	eafffa8b 	b	d450 <CUSBDevice::RemoveDevice()>
    ea20:	e92d4010 	push	{r4, lr}
    ea24:	e3a02066 	mov	r2, #102	; 0x66
    ea28:	e59f1004 	ldr	r1, [pc, #4]	; ea34 <CUSBFunction::RemoveDevice()+0x24>
    ea2c:	e59f0004 	ldr	r0, [pc, #4]	; ea38 <CUSBFunction::RemoveDevice()+0x28>
    ea30:	eb0055a3 	bl	240c4 <assertion_failed>
    ea34:	00041a68 	.word	0x00041a68
    ea38:	00041290 	.word	0x00041290

0000ea3c <CUSBFunction::Configure()>:
    ea3c:	e92d4070 	push	{r4, r5, r6, lr}
    ea40:	e590300c 	ldr	r3, [r0, #12]
    ea44:	e24dd010 	sub	sp, sp, #16
    ea48:	e3530000 	cmp	r3, #0
    ea4c:	0a000029 	beq	eaf8 <CUSBFunction::Configure()+0xbc>
    ea50:	e5d33003 	ldrb	r3, [r3, #3]
    ea54:	e3530000 	cmp	r3, #0
    ea58:	0a000018 	beq	eac0 <CUSBFunction::Configure()+0x84>
    ea5c:	e1a04000 	mov	r4, r0
    ea60:	e5900004 	ldr	r0, [r0, #4]
    ea64:	e3500000 	cmp	r0, #0
    ea68:	0a00001e 	beq	eae8 <CUSBFunction::Configure()+0xac>
    ea6c:	ebfffb2e 	bl	d72c <CUSBDevice::GetHost() const>
    ea70:	e1a06000 	mov	r6, r0
    ea74:	e5940004 	ldr	r0, [r4, #4]
    ea78:	e3500000 	cmp	r0, #0
    ea7c:	0a000021 	beq	eb08 <CUSBFunction::Configure()+0xcc>
    ea80:	e3a05000 	mov	r5, #0
    ea84:	ebfffb1d 	bl	d700 <CUSBDevice::GetEndpoint0() const>
    ea88:	e594300c 	ldr	r3, [r4, #12]
    ea8c:	e58d500c 	str	r5, [sp, #12]
    ea90:	e58d5008 	str	r5, [sp, #8]
    ea94:	e5d32002 	ldrb	r2, [r3, #2]
    ea98:	e1a01000 	mov	r1, r0
    ea9c:	e58d2004 	str	r2, [sp, #4]
    eaa0:	e5d33003 	ldrb	r3, [r3, #3]
    eaa4:	e1a00006 	mov	r0, r6
    eaa8:	e58d3000 	str	r3, [sp]
    eaac:	e3a02001 	mov	r2, #1
    eab0:	e3a0300b 	mov	r3, #11
    eab4:	eb000c8c 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eab8:	e1500005 	cmp	r0, r5
    eabc:	ba000002 	blt	eacc <CUSBFunction::Configure()+0x90>
    eac0:	e3a00001 	mov	r0, #1
    eac4:	e28dd010 	add	sp, sp, #16
    eac8:	e8bd8070 	pop	{r4, r5, r6, pc}
    eacc:	eb005e6f 	bl	26490 <CLogger::Get()>
    ead0:	e59f3040 	ldr	r3, [pc, #64]	; eb18 <CUSBFunction::Configure()+0xdc>
    ead4:	e3a02001 	mov	r2, #1
    ead8:	e59f103c 	ldr	r1, [pc, #60]	; eb1c <CUSBFunction::Configure()+0xe0>
    eadc:	eb005da8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eae0:	e1a00005 	mov	r0, r5
    eae4:	eafffff6 	b	eac4 <CUSBFunction::Configure()+0x88>
    eae8:	e3a02090 	mov	r2, #144	; 0x90
    eaec:	e59f102c 	ldr	r1, [pc, #44]	; eb20 <CUSBFunction::Configure()+0xe4>
    eaf0:	e59f002c 	ldr	r0, [pc, #44]	; eb24 <CUSBFunction::Configure()+0xe8>
    eaf4:	eb005572 	bl	240c4 <assertion_failed>
    eaf8:	e3a0204e 	mov	r2, #78	; 0x4e
    eafc:	e59f101c 	ldr	r1, [pc, #28]	; eb20 <CUSBFunction::Configure()+0xe4>
    eb00:	e59f0020 	ldr	r0, [pc, #32]	; eb28 <CUSBFunction::Configure()+0xec>
    eb04:	eb00556e 	bl	240c4 <assertion_failed>
    eb08:	e3a0208a 	mov	r2, #138	; 0x8a
    eb0c:	e59f100c 	ldr	r1, [pc, #12]	; eb20 <CUSBFunction::Configure()+0xe4>
    eb10:	e59f000c 	ldr	r0, [pc, #12]	; eb24 <CUSBFunction::Configure()+0xe8>
    eb14:	eb00556a 	bl	240c4 <assertion_failed>
    eb18:	00041a90 	.word	0x00041a90
    eb1c:	00041a60 	.word	0x00041a60
    eb20:	00041a68 	.word	0x00041a68
    eb24:	00041290 	.word	0x00041290
    eb28:	00041a78 	.word	0x00041a78

0000eb2c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    eb2c:	e92d4070 	push	{r4, r5, r6, lr}
    eb30:	e1a04000 	mov	r4, r0
    eb34:	e1a05001 	mov	r5, r1
    eb38:	e1a06002 	mov	r6, r2
    eb3c:	eb005751 	bl	24888 <CDevice::CDevice()>
    eb40:	e3a03000 	mov	r3, #0
    eb44:	e59f207c 	ldr	r2, [pc, #124]	; ebc8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    eb48:	e1550003 	cmp	r5, r3
    eb4c:	e8840024 	stm	r4, {r2, r5}
    eb50:	e5843008 	str	r3, [r4, #8]
    eb54:	e584300c 	str	r3, [r4, #12]
    eb58:	0a00000e 	beq	eb98 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    eb5c:	e3560000 	cmp	r6, #0
    eb60:	0a000010 	beq	eba8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    eb64:	e3a0001c 	mov	r0, #28
    eb68:	eb006f71 	bl	2a934 <operator new(unsigned int)>
    eb6c:	e1a05000 	mov	r5, r0
    eb70:	e1a01006 	mov	r1, r6
    eb74:	eb0021e1 	bl	17300 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    eb78:	e5845008 	str	r5, [r4, #8]
    eb7c:	e1a00005 	mov	r0, r5
    eb80:	eb002234 	bl	17458 <CUSBConfigurationParser::GetCurrentDescriptor()>
    eb84:	e3500000 	cmp	r0, #0
    eb88:	e584000c 	str	r0, [r4, #12]
    eb8c:	0a000009 	beq	ebb8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    eb90:	e1a00004 	mov	r0, r4
    eb94:	e8bd8070 	pop	{r4, r5, r6, pc}
    eb98:	e3a02022 	mov	r2, #34	; 0x22
    eb9c:	e59f1028 	ldr	r1, [pc, #40]	; ebcc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    eba0:	e59f0028 	ldr	r0, [pc, #40]	; ebd0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    eba4:	eb005546 	bl	240c4 <assertion_failed>
    eba8:	e3a02024 	mov	r2, #36	; 0x24
    ebac:	e59f1018 	ldr	r1, [pc, #24]	; ebcc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    ebb0:	e59f001c 	ldr	r0, [pc, #28]	; ebd4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    ebb4:	eb005542 	bl	240c4 <assertion_failed>
    ebb8:	e3a02029 	mov	r2, #41	; 0x29
    ebbc:	e59f1008 	ldr	r1, [pc, #8]	; ebcc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    ebc0:	e59f0010 	ldr	r0, [pc, #16]	; ebd8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    ebc4:	eb00553e 	bl	240c4 <assertion_failed>
    ebc8:	00041a3c 	.word	0x00041a3c
    ebcc:	00041a68 	.word	0x00041a68
    ebd0:	00041290 	.word	0x00041290
    ebd4:	00041aa8 	.word	0x00041aa8
    ebd8:	00041a78 	.word	0x00041a78

0000ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    ebdc:	e92d4070 	push	{r4, r5, r6, lr}
    ebe0:	e1a04000 	mov	r4, r0
    ebe4:	e1a05001 	mov	r5, r1
    ebe8:	eb005726 	bl	24888 <CDevice::CDevice()>
    ebec:	e3a03000 	mov	r3, #0
    ebf0:	e59f20a0 	ldr	r2, [pc, #160]	; ec98 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    ebf4:	e1550003 	cmp	r5, r3
    ebf8:	e884000c 	stm	r4, {r2, r3}
    ebfc:	e5843008 	str	r3, [r4, #8]
    ec00:	e584300c 	str	r3, [r4, #12]
    ec04:	0a000013 	beq	ec58 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    ec08:	e5953004 	ldr	r3, [r5, #4]
    ec0c:	e3530000 	cmp	r3, #0
    ec10:	e5843004 	str	r3, [r4, #4]
    ec14:	0a000013 	beq	ec68 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    ec18:	e5953008 	ldr	r3, [r5, #8]
    ec1c:	e3530000 	cmp	r3, #0
    ec20:	0a000014 	beq	ec78 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    ec24:	e3a0001c 	mov	r0, #28
    ec28:	eb006f41 	bl	2a934 <operator new(unsigned int)>
    ec2c:	e1a06000 	mov	r6, r0
    ec30:	e5951008 	ldr	r1, [r5, #8]
    ec34:	eb0021b1 	bl	17300 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    ec38:	e5846008 	str	r6, [r4, #8]
    ec3c:	e1a00006 	mov	r0, r6
    ec40:	eb002204 	bl	17458 <CUSBConfigurationParser::GetCurrentDescriptor()>
    ec44:	e3500000 	cmp	r0, #0
    ec48:	e584000c 	str	r0, [r4, #12]
    ec4c:	0a00000d 	beq	ec88 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    ec50:	e1a00004 	mov	r0, r4
    ec54:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec58:	e3a02031 	mov	r2, #49	; 0x31
    ec5c:	e59f1038 	ldr	r1, [pc, #56]	; ec9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    ec60:	e59f0038 	ldr	r0, [pc, #56]	; eca0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    ec64:	eb005516 	bl	240c4 <assertion_failed>
    ec68:	e3a02033 	mov	r2, #51	; 0x33
    ec6c:	e59f1028 	ldr	r1, [pc, #40]	; ec9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    ec70:	e59f002c 	ldr	r0, [pc, #44]	; eca4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    ec74:	eb005512 	bl	240c4 <assertion_failed>
    ec78:	e3a02035 	mov	r2, #53	; 0x35
    ec7c:	e59f1018 	ldr	r1, [pc, #24]	; ec9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    ec80:	e59f0020 	ldr	r0, [pc, #32]	; eca8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    ec84:	eb00550e 	bl	240c4 <assertion_failed>
    ec88:	e3a0203a 	mov	r2, #58	; 0x3a
    ec8c:	e59f1008 	ldr	r1, [pc, #8]	; ec9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    ec90:	e59f0014 	ldr	r0, [pc, #20]	; ecac <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    ec94:	eb00550a 	bl	240c4 <assertion_failed>
    ec98:	00041a3c 	.word	0x00041a3c
    ec9c:	00041a68 	.word	0x00041a68
    eca0:	00041abc 	.word	0x00041abc
    eca4:	00041290 	.word	0x00041290
    eca8:	00041acc 	.word	0x00041acc
    ecac:	00041a78 	.word	0x00041a78

0000ecb0 <CUSBFunction::GetInterfaceName() const>:
    ecb0:	e92d4030 	push	{r4, r5, lr}
    ecb4:	e1a05000 	mov	r5, r0
    ecb8:	e24dd00c 	sub	sp, sp, #12
    ecbc:	e3a00010 	mov	r0, #16
    ecc0:	eb006f1b 	bl	2a934 <operator new(unsigned int)>
    ecc4:	e59f1048 	ldr	r1, [pc, #72]	; ed14 <CUSBFunction::GetInterfaceName() const+0x64>
    ecc8:	e1a04000 	mov	r4, r0
    eccc:	eb0061da 	bl	2743c <CString::CString(char const*)>
    ecd0:	e595100c 	ldr	r1, [r5, #12]
    ecd4:	e3510000 	cmp	r1, #0
    ecd8:	0a00000a 	beq	ed08 <CUSBFunction::GetInterfaceName() const+0x58>
    ecdc:	e5d12005 	ldrb	r2, [r1, #5]
    ece0:	e2423001 	sub	r3, r2, #1
    ece4:	e6ef3073 	uxtb	r3, r3
    ece8:	e35300fd 	cmp	r3, #253	; 0xfd
    ecec:	8a000005 	bhi	ed08 <CUSBFunction::GetInterfaceName() const+0x58>
    ecf0:	e5d13006 	ldrb	r3, [r1, #6]
    ecf4:	e5d11007 	ldrb	r1, [r1, #7]
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	e58d1000 	str	r1, [sp]
    ed00:	e59f1010 	ldr	r1, [pc, #16]	; ed18 <CUSBFunction::GetInterfaceName() const+0x68>
    ed04:	eb006709 	bl	28930 <CString::Format(char const*, ...)>
    ed08:	e1a00004 	mov	r0, r4
    ed0c:	e28dd00c 	add	sp, sp, #12
    ed10:	e8bd8030 	pop	{r4, r5, pc}
    ed14:	0004146c 	.word	0x0004146c
    ed18:	00041aec 	.word	0x00041aec

0000ed1c <CUSBFunction::GetNumEndpoints() const>:
    ed1c:	e590300c 	ldr	r3, [r0, #12]
    ed20:	e3530000 	cmp	r3, #0
    ed24:	0a000001 	beq	ed30 <CUSBFunction::GetNumEndpoints() const+0x14>
    ed28:	e5d30004 	ldrb	r0, [r3, #4]
    ed2c:	e12fff1e 	bx	lr
    ed30:	e92d4010 	push	{r4, lr}
    ed34:	e3a0207e 	mov	r2, #126	; 0x7e
    ed38:	e59f1004 	ldr	r1, [pc, #4]	; ed44 <CUSBFunction::GetNumEndpoints() const+0x28>
    ed3c:	e59f0004 	ldr	r0, [pc, #4]	; ed48 <CUSBFunction::GetNumEndpoints() const+0x2c>
    ed40:	eb0054df 	bl	240c4 <assertion_failed>
    ed44:	00041a68 	.word	0x00041a68
    ed48:	00041a78 	.word	0x00041a78

0000ed4c <CUSBFunction::GetDevice() const>:
    ed4c:	e5900004 	ldr	r0, [r0, #4]
    ed50:	e3500000 	cmp	r0, #0
    ed54:	0a000000 	beq	ed5c <CUSBFunction::GetDevice() const+0x10>
    ed58:	e12fff1e 	bx	lr
    ed5c:	e92d4010 	push	{r4, lr}
    ed60:	e3a02084 	mov	r2, #132	; 0x84
    ed64:	e59f1004 	ldr	r1, [pc, #4]	; ed70 <CUSBFunction::GetDevice() const+0x24>
    ed68:	e59f0004 	ldr	r0, [pc, #4]	; ed74 <CUSBFunction::GetDevice() const+0x28>
    ed6c:	eb0054d4 	bl	240c4 <assertion_failed>
    ed70:	00041a68 	.word	0x00041a68
    ed74:	00041290 	.word	0x00041290

0000ed78 <CUSBFunction::GetEndpoint0() const>:
    ed78:	e5900004 	ldr	r0, [r0, #4]
    ed7c:	e3500000 	cmp	r0, #0
    ed80:	0a000000 	beq	ed88 <CUSBFunction::GetEndpoint0() const+0x10>
    ed84:	eafffa5d 	b	d700 <CUSBDevice::GetEndpoint0() const>
    ed88:	e92d4010 	push	{r4, lr}
    ed8c:	e3a0208a 	mov	r2, #138	; 0x8a
    ed90:	e59f1004 	ldr	r1, [pc, #4]	; ed9c <CUSBFunction::GetEndpoint0() const+0x24>
    ed94:	e59f0004 	ldr	r0, [pc, #4]	; eda0 <CUSBFunction::GetEndpoint0() const+0x28>
    ed98:	eb0054c9 	bl	240c4 <assertion_failed>
    ed9c:	00041a68 	.word	0x00041a68
    eda0:	00041290 	.word	0x00041290

0000eda4 <CUSBFunction::GetHost() const>:
    eda4:	e5900004 	ldr	r0, [r0, #4]
    eda8:	e3500000 	cmp	r0, #0
    edac:	0a000000 	beq	edb4 <CUSBFunction::GetHost() const+0x10>
    edb0:	eafffa5d 	b	d72c <CUSBDevice::GetHost() const>
    edb4:	e92d4010 	push	{r4, lr}
    edb8:	e3a02090 	mov	r2, #144	; 0x90
    edbc:	e59f1004 	ldr	r1, [pc, #4]	; edc8 <CUSBFunction::GetHost() const+0x24>
    edc0:	e59f0004 	ldr	r0, [pc, #4]	; edcc <CUSBFunction::GetHost() const+0x28>
    edc4:	eb0054be 	bl	240c4 <assertion_failed>
    edc8:	00041a68 	.word	0x00041a68
    edcc:	00041290 	.word	0x00041290

0000edd0 <CUSBFunction::GetDescriptor(unsigned char)>:
    edd0:	e5900008 	ldr	r0, [r0, #8]
    edd4:	e3500000 	cmp	r0, #0
    edd8:	0a000000 	beq	ede0 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    eddc:	ea002161 	b	17368 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    ede0:	e92d4010 	push	{r4, lr}
    ede4:	e3a02096 	mov	r2, #150	; 0x96
    ede8:	e59f1004 	ldr	r1, [pc, #4]	; edf4 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    edec:	e59f0004 	ldr	r0, [pc, #4]	; edf8 <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    edf0:	eb0054b3 	bl	240c4 <assertion_failed>
    edf4:	00041a68 	.word	0x00041a68
    edf8:	000414cc 	.word	0x000414cc

0000edfc <CUSBFunction::ConfigurationError(char const*) const>:
    edfc:	e5900008 	ldr	r0, [r0, #8]
    ee00:	e92d4010 	push	{r4, lr}
    ee04:	e3500000 	cmp	r0, #0
    ee08:	0a000003 	beq	ee1c <CUSBFunction::ConfigurationError(char const*) const+0x20>
    ee0c:	e3510000 	cmp	r1, #0
    ee10:	0a000005 	beq	ee2c <CUSBFunction::ConfigurationError(char const*) const+0x30>
    ee14:	e8bd4010 	pop	{r4, lr}
    ee18:	ea0021a0 	b	174a0 <CUSBConfigurationParser::Error(char const*) const>
    ee1c:	e3a0209c 	mov	r2, #156	; 0x9c
    ee20:	e59f1014 	ldr	r1, [pc, #20]	; ee3c <CUSBFunction::ConfigurationError(char const*) const+0x40>
    ee24:	e59f0014 	ldr	r0, [pc, #20]	; ee40 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    ee28:	eb0054a5 	bl	240c4 <assertion_failed>
    ee2c:	e3a0209d 	mov	r2, #157	; 0x9d
    ee30:	e59f1004 	ldr	r1, [pc, #4]	; ee3c <CUSBFunction::ConfigurationError(char const*) const+0x40>
    ee34:	e59f0008 	ldr	r0, [pc, #8]	; ee44 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    ee38:	eb0054a1 	bl	240c4 <assertion_failed>
    ee3c:	00041a68 	.word	0x00041a68
    ee40:	000414cc 	.word	0x000414cc
    ee44:	00041af8 	.word	0x00041af8

0000ee48 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    ee48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ee4c:	e1a04000 	mov	r4, r0
    ee50:	e590000c 	ldr	r0, [r0, #12]
    ee54:	e3500000 	cmp	r0, #0
    ee58:	0a00001f 	beq	eedc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
    ee5c:	e1a08003 	mov	r8, r3
    ee60:	e5943008 	ldr	r3, [r4, #8]
    ee64:	e3530000 	cmp	r3, #0
    ee68:	0a00001f 	beq	eeec <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
    ee6c:	e5943004 	ldr	r3, [r4, #4]
    ee70:	e3530000 	cmp	r3, #0
    ee74:	11a06001 	movne	r6, r1
    ee78:	11a07002 	movne	r7, r2
    ee7c:	13a05004 	movne	r5, #4
    ee80:	1a000009 	bne	eeac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x64>
    ee84:	ea00001c 	b	eefc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xb4>
    ee88:	e1a01005 	mov	r1, r5
    ee8c:	e5940004 	ldr	r0, [r4, #4]
    ee90:	ebfffa48 	bl	d7b8 <CUSBDevice::GetDescriptor(unsigned char)>
    ee94:	e1a01005 	mov	r1, r5
    ee98:	e5940008 	ldr	r0, [r4, #8]
    ee9c:	eb002131 	bl	17368 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    eea0:	e3500000 	cmp	r0, #0
    eea4:	e584000c 	str	r0, [r4, #12]
    eea8:	0a00000a 	beq	eed8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x90>
    eeac:	e5d03005 	ldrb	r3, [r0, #5]
    eeb0:	e1530006 	cmp	r3, r6
    eeb4:	1afffff3 	bne	ee88 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    eeb8:	e5d03006 	ldrb	r3, [r0, #6]
    eebc:	e1530007 	cmp	r3, r7
    eec0:	1afffff0 	bne	ee88 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    eec4:	e5d03007 	ldrb	r3, [r0, #7]
    eec8:	e1530008 	cmp	r3, r8
    eecc:	1affffed 	bne	ee88 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    eed0:	e3a00001 	mov	r0, #1
    eed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eed8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eedc:	e3a020a3 	mov	r2, #163	; 0xa3
    eee0:	e59f1024 	ldr	r1, [pc, #36]	; ef0c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    eee4:	e59f0024 	ldr	r0, [pc, #36]	; ef10 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    eee8:	eb005475 	bl	240c4 <assertion_failed>
    eeec:	e3a020a4 	mov	r2, #164	; 0xa4
    eef0:	e59f1014 	ldr	r1, [pc, #20]	; ef0c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    eef4:	e59f0018 	ldr	r0, [pc, #24]	; ef14 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xcc>
    eef8:	eb005471 	bl	240c4 <assertion_failed>
    eefc:	e3a020a5 	mov	r2, #165	; 0xa5
    ef00:	e59f1004 	ldr	r1, [pc, #4]	; ef0c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    ef04:	e59f000c 	ldr	r0, [pc, #12]	; ef18 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd0>
    ef08:	eb00546d 	bl	240c4 <assertion_failed>
    ef0c:	00041a68 	.word	0x00041a68
    ef10:	00041a78 	.word	0x00041a78
    ef14:	000414cc 	.word	0x000414cc
    ef18:	00041290 	.word	0x00041290

0000ef1c <CUSBFunction::GetInterfaceNumber() const>:
    ef1c:	e590300c 	ldr	r3, [r0, #12]
    ef20:	e3530000 	cmp	r3, #0
    ef24:	0a000001 	beq	ef30 <CUSBFunction::GetInterfaceNumber() const+0x14>
    ef28:	e5d30002 	ldrb	r0, [r3, #2]
    ef2c:	e12fff1e 	bx	lr
    ef30:	e92d4010 	push	{r4, lr}
    ef34:	e3a020bb 	mov	r2, #187	; 0xbb
    ef38:	e59f1004 	ldr	r1, [pc, #4]	; ef44 <CUSBFunction::GetInterfaceNumber() const+0x28>
    ef3c:	e59f0004 	ldr	r0, [pc, #4]	; ef48 <CUSBFunction::GetInterfaceNumber() const+0x2c>
    ef40:	eb00545f 	bl	240c4 <assertion_failed>
    ef44:	00041a68 	.word	0x00041a68
    ef48:	00041a78 	.word	0x00041a78

0000ef4c <CUSBFunction::GetInterfaceClass() const>:
    ef4c:	e590300c 	ldr	r3, [r0, #12]
    ef50:	e3530000 	cmp	r3, #0
    ef54:	0a000001 	beq	ef60 <CUSBFunction::GetInterfaceClass() const+0x14>
    ef58:	e5d30005 	ldrb	r0, [r3, #5]
    ef5c:	e12fff1e 	bx	lr
    ef60:	e92d4010 	push	{r4, lr}
    ef64:	e3a020c1 	mov	r2, #193	; 0xc1
    ef68:	e59f1004 	ldr	r1, [pc, #4]	; ef74 <CUSBFunction::GetInterfaceClass() const+0x28>
    ef6c:	e59f0004 	ldr	r0, [pc, #4]	; ef78 <CUSBFunction::GetInterfaceClass() const+0x2c>
    ef70:	eb005453 	bl	240c4 <assertion_failed>
    ef74:	00041a68 	.word	0x00041a68
    ef78:	00041a78 	.word	0x00041a78

0000ef7c <CUSBFunction::GetInterfaceSubClass() const>:
    ef7c:	e590300c 	ldr	r3, [r0, #12]
    ef80:	e3530000 	cmp	r3, #0
    ef84:	0a000001 	beq	ef90 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    ef88:	e5d30006 	ldrb	r0, [r3, #6]
    ef8c:	e12fff1e 	bx	lr
    ef90:	e92d4010 	push	{r4, lr}
    ef94:	e3a020c7 	mov	r2, #199	; 0xc7
    ef98:	e59f1004 	ldr	r1, [pc, #4]	; efa4 <CUSBFunction::GetInterfaceSubClass() const+0x28>
    ef9c:	e59f0004 	ldr	r0, [pc, #4]	; efa8 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    efa0:	eb005447 	bl	240c4 <assertion_failed>
    efa4:	00041a68 	.word	0x00041a68
    efa8:	00041a78 	.word	0x00041a78

0000efac <CUSBFunction::GetInterfaceProtocol() const>:
    efac:	e590300c 	ldr	r3, [r0, #12]
    efb0:	e3530000 	cmp	r3, #0
    efb4:	0a000001 	beq	efc0 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    efb8:	e5d30007 	ldrb	r0, [r3, #7]
    efbc:	e12fff1e 	bx	lr
    efc0:	e92d4010 	push	{r4, lr}
    efc4:	e3a020cd 	mov	r2, #205	; 0xcd
    efc8:	e59f1004 	ldr	r1, [pc, #4]	; efd4 <CUSBFunction::GetInterfaceProtocol() const+0x28>
    efcc:	e59f0004 	ldr	r0, [pc, #4]	; efd8 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    efd0:	eb00543b 	bl	240c4 <assertion_failed>
    efd4:	00041a68 	.word	0x00041a68
    efd8:	00041a78 	.word	0x00041a78

0000efdc <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    efdc:	e92d4010 	push	{r4, lr}
    efe0:	e1a04000 	mov	r4, r0
    efe4:	e59f300c 	ldr	r3, [pc, #12]	; eff8 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    efe8:	e5803000 	str	r3, [r0]
    efec:	eb000375 	bl	fdc8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    eff0:	e1a00004 	mov	r0, r4
    eff4:	e8bd8010 	pop	{r4, pc}
    eff8:	00041b10 	.word	0x00041b10

0000effc <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    effc:	e92d4010 	push	{r4, lr}
    f000:	e1a04000 	mov	r4, r0
    f004:	e59f3018 	ldr	r3, [pc, #24]	; f024 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    f008:	e5803000 	str	r3, [r0]
    f00c:	eb00036d 	bl	fdc8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    f010:	e1a00004 	mov	r0, r4
    f014:	e3a01f5b 	mov	r1, #364	; 0x16c
    f018:	eb006e53 	bl	2a96c <operator delete(void*, unsigned int)>
    f01c:	e1a00004 	mov	r0, r4
    f020:	e8bd8010 	pop	{r4, pc}
    f024:	00041b10 	.word	0x00041b10

0000f028 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    f028:	e92d4070 	push	{r4, r5, r6, lr}
    f02c:	e1a05001 	mov	r5, r1
    f030:	e24dd040 	sub	sp, sp, #64	; 0x40
    f034:	e2801f4f 	add	r1, r0, #316	; 0x13c
    f038:	e1a04000 	mov	r4, r0
    f03c:	e3a02030 	mov	r2, #48	; 0x30
    f040:	e28d0010 	add	r0, sp, #16
    f044:	eb006c61 	bl	2a1d0 <memcpy>
    f048:	e3550001 	cmp	r5, #1
    f04c:	0a00002c 	beq	f104 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xdc>
    f050:	3a000025 	bcc	f0ec <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc4>
    f054:	e3550002 	cmp	r5, #2
    f058:	1a00001f 	bne	f0dc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
    f05c:	e3e03001 	mvn	r3, #1
    f060:	e3a01000 	mov	r1, #0
    f064:	e3e02000 	mvn	r2, #0
    f068:	e5cd3011 	strb	r3, [sp, #17]
    f06c:	e5cd3013 	strb	r3, [sp, #19]
    f070:	e5cd1012 	strb	r1, [sp, #18]
    f074:	e5cd2014 	strb	r2, [sp, #20]
    f078:	e1a00004 	mov	r0, r4
    f07c:	ebffff48 	bl	eda4 <CUSBFunction::GetHost() const>
    f080:	e1a05000 	mov	r5, r0
    f084:	e1a00004 	mov	r0, r4
    f088:	ebffff3a 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
    f08c:	e1a06000 	mov	r6, r0
    f090:	e1a00004 	mov	r0, r4
    f094:	ebffffa0 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
    f098:	e3a02030 	mov	r2, #48	; 0x30
    f09c:	e59f3080 	ldr	r3, [pc, #128]	; f124 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    f0a0:	e28dc010 	add	ip, sp, #16
    f0a4:	e6ff0070 	uxth	r0, r0
    f0a8:	e58d0004 	str	r0, [sp, #4]
    f0ac:	e58d200c 	str	r2, [sp, #12]
    f0b0:	e58d3000 	str	r3, [sp]
    f0b4:	e1a01006 	mov	r1, r6
    f0b8:	e1a00005 	mov	r0, r5
    f0bc:	e58dc008 	str	ip, [sp, #8]
    f0c0:	e3a03009 	mov	r3, #9
    f0c4:	e3a02021 	mov	r2, #33	; 0x21
    f0c8:	eb000b07 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f0cc:	e1e00000 	mvn	r0, r0
    f0d0:	e1a00fa0 	lsr	r0, r0, #31
    f0d4:	e28dd040 	add	sp, sp, #64	; 0x40
    f0d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f0dc:	e59f2044 	ldr	r2, [pc, #68]	; f128 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    f0e0:	e59f1044 	ldr	r1, [pc, #68]	; f12c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x104>
    f0e4:	e59f0044 	ldr	r0, [pc, #68]	; f130 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
    f0e8:	eb0053f5 	bl	240c4 <assertion_failed>
    f0ec:	e3a03000 	mov	r3, #0
    f0f0:	e5cd3011 	strb	r3, [sp, #17]
    f0f4:	e5cd3012 	strb	r3, [sp, #18]
    f0f8:	e5cd3013 	strb	r3, [sp, #19]
    f0fc:	e5cd3014 	strb	r3, [sp, #20]
    f100:	eaffffdc 	b	f078 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    f104:	e3e03001 	mvn	r3, #1
    f108:	e3e01000 	mvn	r1, #0
    f10c:	e3a02000 	mov	r2, #0
    f110:	e5cd3011 	strb	r3, [sp, #17]
    f114:	e5cd3013 	strb	r3, [sp, #19]
    f118:	e5cd1012 	strb	r1, [sp, #18]
    f11c:	e5cd2014 	strb	r2, [sp, #20]
    f120:	eaffffd4 	b	f078 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    f124:	00000201 	.word	0x00000201
    f128:	0000010e 	.word	0x0000010e
    f12c:	00041bcc 	.word	0x00041bcc
    f130:	000414b4 	.word	0x000414b4

0000f134 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    f134:	e351000a 	cmp	r1, #10
    f138:	9a000001 	bls	f144 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    f13c:	e3a00000 	mov	r0, #0
    f140:	e12fff1e 	bx	lr
    f144:	e59f3078 	ldr	r3, [pc, #120]	; f1c4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
    f148:	e92d4070 	push	{r4, r5, r6, lr}
    f14c:	e0831001 	add	r1, r3, r1
    f150:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    f154:	e24dd010 	sub	sp, sp, #16
    f158:	e1a03083 	lsl	r3, r3, #1
    f15c:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    f160:	e1a04000 	mov	r4, r0
    f164:	ebffff0e 	bl	eda4 <CUSBFunction::GetHost() const>
    f168:	e1a05000 	mov	r5, r0
    f16c:	e1a00004 	mov	r0, r4
    f170:	ebffff00 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
    f174:	e1a06000 	mov	r6, r0
    f178:	e1a00004 	mov	r0, r4
    f17c:	ebffff66 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
    f180:	e3a02030 	mov	r2, #48	; 0x30
    f184:	e59f303c 	ldr	r3, [pc, #60]	; f1c8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
    f188:	e6ff0070 	uxth	r0, r0
    f18c:	e2844f4f 	add	r4, r4, #316	; 0x13c
    f190:	e58d0004 	str	r0, [sp, #4]
    f194:	e58d200c 	str	r2, [sp, #12]
    f198:	e58d3000 	str	r3, [sp]
    f19c:	e1a01006 	mov	r1, r6
    f1a0:	e1a00005 	mov	r0, r5
    f1a4:	e58d4008 	str	r4, [sp, #8]
    f1a8:	e3a03009 	mov	r3, #9
    f1ac:	e3a02021 	mov	r2, #33	; 0x21
    f1b0:	eb000acd 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f1b4:	e1e00000 	mvn	r0, r0
    f1b8:	e1a00fa0 	lsr	r0, r0, #31
    f1bc:	e28dd010 	add	sp, sp, #16
    f1c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f1c4:	00041b08 	.word	0x00041b08
    f1c8:	00000201 	.word	0x00000201

0000f1cc <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    f1cc:	e92d4070 	push	{r4, r5, r6, lr}
    f1d0:	e3a02000 	mov	r2, #0
    f1d4:	e1a04000 	mov	r4, r0
    f1d8:	eb000311 	bl	fe24 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    f1dc:	e3a03000 	mov	r3, #0
    f1e0:	e59f5030 	ldr	r5, [pc, #48]	; f218 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    f1e4:	e1a00004 	mov	r0, r4
    f1e8:	e2852008 	add	r2, r5, #8
    f1ec:	e5842000 	str	r2, [r4]
    f1f0:	e3a01003 	mov	r1, #3
    f1f4:	e1a02003 	mov	r2, r3
    f1f8:	ebffff12 	bl	ee48 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    f1fc:	e2851058 	add	r1, r5, #88	; 0x58
    f200:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    f204:	e3a02030 	mov	r2, #48	; 0x30
    f208:	e2840f4f 	add	r0, r4, #316	; 0x13c
    f20c:	eb006bef 	bl	2a1d0 <memcpy>
    f210:	e1a00004 	mov	r0, r4
    f214:	e8bd8070 	pop	{r4, r5, r6, pc}
    f218:	00041b08 	.word	0x00041b08

0000f21c <CUSBGamePadPS3Device::PS3Enable()>:
    f21c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f220:	e3a02042 	mov	r2, #66	; 0x42
    f224:	e3a0300c 	mov	r3, #12
    f228:	e3a04000 	mov	r4, #0
    f22c:	e24dd01c 	sub	sp, sp, #28
    f230:	e5cd2014 	strb	r2, [sp, #20]
    f234:	e5cd3015 	strb	r3, [sp, #21]
    f238:	e1a05000 	mov	r5, r0
    f23c:	e5cd4016 	strb	r4, [sp, #22]
    f240:	e5cd4017 	strb	r4, [sp, #23]
    f244:	ebfffed6 	bl	eda4 <CUSBFunction::GetHost() const>
    f248:	e1a06000 	mov	r6, r0
    f24c:	e1a00005 	mov	r0, r5
    f250:	ebfffec8 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
    f254:	e1a07000 	mov	r7, r0
    f258:	e1a00005 	mov	r0, r5
    f25c:	ebffff2e 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
    f260:	e3a0c004 	mov	ip, #4
    f264:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    f268:	e6ff0070 	uxth	r0, r0
    f26c:	e28d3014 	add	r3, sp, #20
    f270:	e58d0004 	str	r0, [sp, #4]
    f274:	e58d2000 	str	r2, [sp]
    f278:	e58d3008 	str	r3, [sp, #8]
    f27c:	e1a01007 	mov	r1, r7
    f280:	e1a00006 	mov	r0, r6
    f284:	e58dc00c 	str	ip, [sp, #12]
    f288:	e3a03009 	mov	r3, #9
    f28c:	e3a02021 	mov	r2, #33	; 0x21
    f290:	eb000a95 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f294:	e1500004 	cmp	r0, r4
    f298:	b1a00004 	movlt	r0, r4
    f29c:	ba000004 	blt	f2b4 <CUSBGamePadPS3Device::PS3Enable()+0x98>
    f2a0:	e5953000 	ldr	r3, [r5]
    f2a4:	e5d5112c 	ldrb	r1, [r5, #300]	; 0x12c
    f2a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    f2ac:	e1a00005 	mov	r0, r5
    f2b0:	e12fff33 	blx	r3
    f2b4:	e28dd01c 	add	sp, sp, #28
    f2b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000f2bc <CUSBGamePadPS3Device::Configure()>:
    f2bc:	e92d4030 	push	{r4, r5, lr}
    f2c0:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
    f2c4:	e24dd00c 	sub	sp, sp, #12
    f2c8:	e3550000 	cmp	r5, #0
    f2cc:	0a00001e 	beq	f34c <CUSBGamePadPS3Device::Configure()+0x90>
    f2d0:	e1a04000 	mov	r4, r0
    f2d4:	eb000449 	bl	10400 <CUSBGamePadStandardDevice::Configure()>
    f2d8:	e2505000 	subs	r5, r0, #0
    f2dc:	0a00002a 	beq	f38c <CUSBGamePadPS3Device::Configure()+0xd0>
    f2e0:	e2845f4a 	add	r5, r4, #296	; 0x128
    f2e4:	e1d530b0 	ldrh	r3, [r5]
    f2e8:	e2433031 	sub	r3, r3, #49	; 0x31
    f2ec:	e3530001 	cmp	r3, #1
    f2f0:	8a00001a 	bhi	f360 <CUSBGamePadPS3Device::Configure()+0xa4>
    f2f4:	e3a01010 	mov	r1, #16
    f2f8:	e3a0c013 	mov	ip, #19
    f2fc:	e1a03004 	mov	r3, r4
    f300:	e3a02000 	mov	r2, #0
    f304:	e3a000ff 	mov	r0, #255	; 0xff
    f308:	e5841024 	str	r1, [r4, #36]	; 0x24
    f30c:	e584c104 	str	ip, [r4, #260]	; 0x104
    f310:	e28410c0 	add	r1, r4, #192	; 0xc0
    f314:	e583202c 	str	r2, [r3, #44]	; 0x2c
    f318:	e5830030 	str	r0, [r3, #48]	; 0x30
    f31c:	e283300c 	add	r3, r3, #12
    f320:	e1530001 	cmp	r3, r1
    f324:	1afffffa 	bne	f314 <CUSBGamePadPS3Device::Configure()+0x58>
    f328:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    f32c:	e1a00004 	mov	r0, r4
    f330:	ebffffb9 	bl	f21c <CUSBGamePadPS3Device::PS3Enable()>
    f334:	e2505000 	subs	r5, r0, #0
    f338:	0a00001b 	beq	f3ac <CUSBGamePadPS3Device::Configure()+0xf0>
    f33c:	e1a00004 	mov	r0, r4
    f340:	e28dd00c 	add	sp, sp, #12
    f344:	e8bd4030 	pop	{r4, r5, lr}
    f348:	ea0009da 	b	11ab8 <CUSBHIDDevice::StartRequest()>
    f34c:	e59f1078 	ldr	r1, [pc, #120]	; f3cc <CUSBGamePadPS3Device::Configure()+0x110>
    f350:	ebfffea9 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
    f354:	e1a00005 	mov	r0, r5
    f358:	e28dd00c 	add	sp, sp, #12
    f35c:	e8bd8030 	pop	{r4, r5, pc}
    f360:	eb005c4a 	bl	26490 <CLogger::Get()>
    f364:	e1d520b0 	ldrh	r2, [r5]
    f368:	e3a05000 	mov	r5, #0
    f36c:	e58d2000 	str	r2, [sp]
    f370:	e59f3058 	ldr	r3, [pc, #88]	; f3d0 <CUSBGamePadPS3Device::Configure()+0x114>
    f374:	e3a02001 	mov	r2, #1
    f378:	e59f104c 	ldr	r1, [pc, #76]	; f3cc <CUSBGamePadPS3Device::Configure()+0x110>
    f37c:	eb005b80 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f380:	e1a00005 	mov	r0, r5
    f384:	e28dd00c 	add	sp, sp, #12
    f388:	e8bd8030 	pop	{r4, r5, pc}
    f38c:	eb005c3f 	bl	26490 <CLogger::Get()>
    f390:	e59f303c 	ldr	r3, [pc, #60]	; f3d4 <CUSBGamePadPS3Device::Configure()+0x118>
    f394:	e3a02001 	mov	r2, #1
    f398:	e59f102c 	ldr	r1, [pc, #44]	; f3cc <CUSBGamePadPS3Device::Configure()+0x110>
    f39c:	eb005b78 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f3a0:	e1a00005 	mov	r0, r5
    f3a4:	e28dd00c 	add	sp, sp, #12
    f3a8:	e8bd8030 	pop	{r4, r5, pc}
    f3ac:	eb005c37 	bl	26490 <CLogger::Get()>
    f3b0:	e59f3020 	ldr	r3, [pc, #32]	; f3d8 <CUSBGamePadPS3Device::Configure()+0x11c>
    f3b4:	e3a02001 	mov	r2, #1
    f3b8:	e59f100c 	ldr	r1, [pc, #12]	; f3cc <CUSBGamePadPS3Device::Configure()+0x110>
    f3bc:	eb005b70 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f3c0:	e1a00005 	mov	r0, r5
    f3c4:	e28dd00c 	add	sp, sp, #12
    f3c8:	e8bd8030 	pop	{r4, r5, pc}
    f3cc:	00041b90 	.word	0x00041b90
    f3d0:	00041c00 	.word	0x00041c00
    f3d4:	00041be0 	.word	0x00041be0
    f3d8:	00041c1c 	.word	0x00041c1c

0000f3dc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    f3dc:	e2803f4a 	add	r3, r0, #296	; 0x128
    f3e0:	e1d330b0 	ldrh	r3, [r3]
    f3e4:	e92d4010 	push	{r4, lr}
    f3e8:	e3530031 	cmp	r3, #49	; 0x31
    f3ec:	e1a0c000 	mov	ip, r0
    f3f0:	e1a0e001 	mov	lr, r1
    f3f4:	0a000008 	beq	f41c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>
    f3f8:	e3530032 	cmp	r3, #50	; 0x32
    f3fc:	0a000005 	beq	f418 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    f400:	e3530000 	cmp	r3, #0
    f404:	0a000040 	beq	f50c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    f408:	e3a02092 	mov	r2, #146	; 0x92
    f40c:	e59f1110 	ldr	r1, [pc, #272]	; f524 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    f410:	e59f0110 	ldr	r0, [pc, #272]	; f528 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
    f414:	eb00532a 	bl	240c4 <assertion_failed>
    f418:	e281e001 	add	lr, r1, #1
    f41c:	e35e0000 	cmp	lr, #0
    f420:	0a00003b 	beq	f514 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    f424:	e5de0003 	ldrb	r0, [lr, #3]
    f428:	e5de2002 	ldrb	r2, [lr, #2]
    f42c:	e5de1004 	ldrb	r1, [lr, #4]
    f430:	e1822400 	orr	r2, r2, r0, lsl #8
    f434:	e5de0005 	ldrb	r0, [lr, #5]
    f438:	e1822801 	orr	r2, r2, r1, lsl #16
    f43c:	e59f10e8 	ldr	r1, [pc, #232]	; f52c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    f440:	e1822c00 	orr	r2, r2, r0, lsl #24
    f444:	e59f00e4 	ldr	r0, [pc, #228]	; f530 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    f448:	e1a04682 	lsl	r4, r2, #13
    f44c:	e00112a2 	and	r1, r1, r2, lsr #5
    f450:	e1811ea4 	orr	r1, r1, r4, lsr #29
    f454:	e0002582 	and	r2, r0, r2, lsl #11
    f458:	e1812002 	orr	r2, r1, r2
    f45c:	e58c2108 	str	r2, [ip, #264]	; 0x108
    f460:	e5de2006 	ldrb	r2, [lr, #6]
    f464:	e3a03006 	mov	r3, #6
    f468:	e58c2028 	str	r2, [ip, #40]	; 0x28
    f46c:	e5de1007 	ldrb	r1, [lr, #7]
    f470:	e59f00bc 	ldr	r0, [pc, #188]	; f534 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    f474:	e58c1034 	str	r1, [ip, #52]	; 0x34
    f478:	e5de1008 	ldrb	r1, [lr, #8]
    f47c:	e28e200d 	add	r2, lr, #13
    f480:	e58c1040 	str	r1, [ip, #64]	; 0x40
    f484:	e5de1009 	ldrb	r1, [lr, #9]
    f488:	e28e4019 	add	r4, lr, #25
    f48c:	e58c104c 	str	r1, [ip, #76]	; 0x4c
    f490:	ea000000 	b	f498 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xbc>
    f494:	e5b03004 	ldr	r3, [r0, #4]!
    f498:	e5f21001 	ldrb	r1, [r2, #1]!
    f49c:	e0833083 	add	r3, r3, r3, lsl #1
    f4a0:	e08c3103 	add	r3, ip, r3, lsl #2
    f4a4:	e1520004 	cmp	r2, r4
    f4a8:	e5831028 	str	r1, [r3, #40]	; 0x28
    f4ac:	1afffff8 	bne	f494 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
    f4b0:	e3a01000 	mov	r1, #0
    f4b4:	e59f407c 	ldr	r4, [pc, #124]	; f538 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
    f4b8:	e28c0f43 	add	r0, ip, #268	; 0x10c
    f4bc:	e2812014 	add	r2, r1, #20
    f4c0:	e08e2082 	add	r2, lr, r2, lsl #1
    f4c4:	e5d23001 	ldrb	r3, [r2, #1]
    f4c8:	e5d22002 	ldrb	r2, [r2, #2]
    f4cc:	e2811001 	add	r1, r1, #1
    f4d0:	e1833402 	orr	r3, r3, r2, lsl #8
    f4d4:	e6bf3fb3 	rev16	r3, r3
    f4d8:	e6ff3073 	uxth	r3, r3
    f4dc:	e0443003 	sub	r3, r4, r3
    f4e0:	e3510003 	cmp	r1, #3
    f4e4:	e4803004 	str	r3, [r0], #4
    f4e8:	1afffff3 	bne	f4bc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xe0>
    f4ec:	e5de302f 	ldrb	r3, [lr, #47]	; 0x2f
    f4f0:	e5de2030 	ldrb	r2, [lr, #48]	; 0x30
    f4f4:	e1833402 	orr	r3, r3, r2, lsl #8
    f4f8:	e6bf3fb3 	rev16	r3, r3
    f4fc:	e6ff3073 	uxth	r3, r3
    f500:	e2433006 	sub	r3, r3, #6
    f504:	e58c3120 	str	r3, [ip, #288]	; 0x120
    f508:	e8bd8010 	pop	{r4, pc}
    f50c:	e8bd4010 	pop	{r4, lr}
    f510:	ea00029d 	b	ff8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
    f514:	e3a02097 	mov	r2, #151	; 0x97
    f518:	e59f1004 	ldr	r1, [pc, #4]	; f524 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    f51c:	e59f0018 	ldr	r0, [pc, #24]	; f53c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
    f520:	eb0052e7 	bl	240c4 <assertion_failed>
    f524:	00041bcc 	.word	0x00041bcc
    f528:	000414b4 	.word	0x000414b4
    f52c:	000007f8 	.word	0x000007f8
    f530:	0007f800 	.word	0x0007f800
    f534:	00041b9c 	.word	0x00041b9c
    f538:	000001ff 	.word	0x000001ff
    f53c:	00041c3c 	.word	0x00041c3c

0000f540 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    f540:	e3a00000 	mov	r0, #0
    f544:	e12fff1e 	bx	lr

0000f548 <CUSBGamePadPS3Device::GetProperties()>:
    f548:	e3a0001b 	mov	r0, #27
    f54c:	e12fff1e 	bx	lr

0000f550 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
    f550:	e5d13001 	ldrb	r3, [r1, #1]
    f554:	e5d12005 	ldrb	r2, [r1, #5]
    f558:	e5803028 	str	r3, [r0, #40]	; 0x28
    f55c:	e5d13002 	ldrb	r3, [r1, #2]
    f560:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f564:	e5803034 	str	r3, [r0, #52]	; 0x34
    f568:	e5d13003 	ldrb	r3, [r1, #3]
    f56c:	e59fc18c 	ldr	ip, [pc, #396]	; f700 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
    f570:	e5803040 	str	r3, [r0, #64]	; 0x40
    f574:	e5d1e004 	ldrb	lr, [r1, #4]
    f578:	e5d13005 	ldrb	r3, [r1, #5]
    f57c:	e580e04c 	str	lr, [r0, #76]	; 0x4c
    f580:	e202200f 	and	r2, r2, #15
    f584:	e5d1e008 	ldrb	lr, [r1, #8]
    f588:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
    f58c:	e3130080 	tst	r3, #128	; 0x80
    f590:	e580e058 	str	lr, [r0, #88]	; 0x58
    f594:	e5d1e009 	ldrb	lr, [r1, #9]
    f598:	e580c108 	str	ip, [r0, #264]	; 0x108
    f59c:	138cc080 	orrne	ip, ip, #128	; 0x80
    f5a0:	1580c108 	strne	ip, [r0, #264]	; 0x108
    f5a4:	e3130040 	tst	r3, #64	; 0x40
    f5a8:	e58020ec 	str	r2, [r0, #236]	; 0xec
    f5ac:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f5b0:	e580e064 	str	lr, [r0, #100]	; 0x64
    f5b4:	13822c01 	orrne	r2, r2, #256	; 0x100
    f5b8:	15802108 	strne	r2, [r0, #264]	; 0x108
    f5bc:	e3130020 	tst	r3, #32
    f5c0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f5c4:	13822c02 	orrne	r2, r2, #512	; 0x200
    f5c8:	15802108 	strne	r2, [r0, #264]	; 0x108
    f5cc:	e3130010 	tst	r3, #16
    f5d0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f5d4:	13833b01 	orrne	r3, r3, #1024	; 0x400
    f5d8:	15803108 	strne	r3, [r0, #264]	; 0x108
    f5dc:	e5d13006 	ldrb	r3, [r1, #6]
    f5e0:	e3130080 	tst	r3, #128	; 0x80
    f5e4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f5e8:	13822a02 	orrne	r2, r2, #8192	; 0x2000
    f5ec:	15802108 	strne	r2, [r0, #264]	; 0x108
    f5f0:	e3130040 	tst	r3, #64	; 0x40
    f5f4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f5f8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
    f5fc:	15802108 	strne	r2, [r0, #264]	; 0x108
    f600:	e3130020 	tst	r3, #32
    f604:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f608:	13822901 	orrne	r2, r2, #16384	; 0x4000
    f60c:	15802108 	strne	r2, [r0, #264]	; 0x108
    f610:	e3130010 	tst	r3, #16
    f614:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f618:	13822b02 	orrne	r2, r2, #2048	; 0x800
    f61c:	15802108 	strne	r2, [r0, #264]	; 0x108
    f620:	e3130008 	tst	r3, #8
    f624:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f628:	13822010 	orrne	r2, r2, #16
    f62c:	15802108 	strne	r2, [r0, #264]	; 0x108
    f630:	e3130004 	tst	r3, #4
    f634:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f638:	13822008 	orrne	r2, r2, #8
    f63c:	15802108 	strne	r2, [r0, #264]	; 0x108
    f640:	e3130002 	tst	r3, #2
    f644:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f648:	13822040 	orrne	r2, r2, #64	; 0x40
    f64c:	15802108 	strne	r2, [r0, #264]	; 0x108
    f650:	e3130001 	tst	r3, #1
    f654:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f658:	13833020 	orrne	r3, r3, #32
    f65c:	15803108 	strne	r3, [r0, #264]	; 0x108
    f660:	e5d13007 	ldrb	r3, [r1, #7]
    f664:	e3130002 	tst	r3, #2
    f668:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    f66c:	13822602 	orrne	r2, r2, #2097152	; 0x200000
    f670:	15802108 	strne	r2, [r0, #264]	; 0x108
    f674:	e3130001 	tst	r3, #1
    f678:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f67c:	13833001 	orrne	r3, r3, #1
    f680:	15803108 	strne	r3, [r0, #264]	; 0x108
    f684:	e5d12014 	ldrb	r2, [r1, #20]
    f688:	e5d13013 	ldrb	r3, [r1, #19]
    f68c:	e1833402 	orr	r3, r3, r2, lsl #8
    f690:	e6bf3073 	sxth	r3, r3
    f694:	e580310c 	str	r3, [r0, #268]	; 0x10c
    f698:	e5d12018 	ldrb	r2, [r1, #24]
    f69c:	e5d13017 	ldrb	r3, [r1, #23]
    f6a0:	e1833402 	orr	r3, r3, r2, lsl #8
    f6a4:	e6bf3073 	sxth	r3, r3
    f6a8:	e5803110 	str	r3, [r0, #272]	; 0x110
    f6ac:	e5d12016 	ldrb	r2, [r1, #22]
    f6b0:	e5d13015 	ldrb	r3, [r1, #21]
    f6b4:	e1833402 	orr	r3, r3, r2, lsl #8
    f6b8:	e6bf3073 	sxth	r3, r3
    f6bc:	e5803114 	str	r3, [r0, #276]	; 0x114
    f6c0:	e5d12012 	ldrb	r2, [r1, #18]
    f6c4:	e5d13011 	ldrb	r3, [r1, #17]
    f6c8:	e1833402 	orr	r3, r3, r2, lsl #8
    f6cc:	e6bf3073 	sxth	r3, r3
    f6d0:	e5803118 	str	r3, [r0, #280]	; 0x118
    f6d4:	e5d1200e 	ldrb	r2, [r1, #14]
    f6d8:	e5d1300d 	ldrb	r3, [r1, #13]
    f6dc:	e1833402 	orr	r3, r3, r2, lsl #8
    f6e0:	e6bf3073 	sxth	r3, r3
    f6e4:	e580311c 	str	r3, [r0, #284]	; 0x11c
    f6e8:	e5d1300f 	ldrb	r3, [r1, #15]
    f6ec:	e5d12010 	ldrb	r2, [r1, #16]
    f6f0:	e1833402 	orr	r3, r3, r2, lsl #8
    f6f4:	e6bf3073 	sxth	r3, r3
    f6f8:	e5803120 	str	r3, [r0, #288]	; 0x120
    f6fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f700:	00041c4c 	.word	0x00041c4c

0000f704 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    f704:	e92d4010 	push	{r4, lr}
    f708:	e1a04000 	mov	r4, r0
    f70c:	e5900140 	ldr	r0, [r0, #320]	; 0x140
    f710:	e59f3034 	ldr	r3, [pc, #52]	; f74c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
    f714:	e3500000 	cmp	r0, #0
    f718:	e5843000 	str	r3, [r4]
    f71c:	0a000002 	beq	f72c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
    f720:	e5903000 	ldr	r3, [r0]
    f724:	e5933004 	ldr	r3, [r3, #4]
    f728:	e12fff33 	blx	r3
    f72c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    f730:	e3500000 	cmp	r0, #0
    f734:	0a000000 	beq	f73c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
    f738:	eb006c85 	bl	2a954 <operator delete[](void*)>
    f73c:	e1a00004 	mov	r0, r4
    f740:	eb001fd6 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    f744:	e1a00004 	mov	r0, r4
    f748:	e8bd8010 	pop	{r4, pc}
    f74c:	00041c78 	.word	0x00041c78

0000f750 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    f750:	e92d4010 	push	{r4, lr}
    f754:	e1a04000 	mov	r4, r0
    f758:	ebffffe9 	bl	f704 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
    f75c:	e1a00004 	mov	r0, r4
    f760:	e3a01f53 	mov	r1, #332	; 0x14c
    f764:	eb006c80 	bl	2a96c <operator delete(void*, unsigned int)>
    f768:	e1a00004 	mov	r0, r4
    f76c:	e8bd8010 	pop	{r4, pc}

0000f770 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
    f770:	e92d4010 	push	{r4, lr}
    f774:	e1a04000 	mov	r4, r0
    f778:	eb001fb6 	bl	17658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    f77c:	e3a03000 	mov	r3, #0
    f780:	e59f2030 	ldr	r2, [pc, #48]	; f7b8 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
    f784:	e1a00004 	mov	r0, r4
    f788:	e5842000 	str	r2, [r4]
    f78c:	e3a01003 	mov	r1, #3
    f790:	e1a02003 	mov	r2, r3
    f794:	ebfffdab 	bl	ee48 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    f798:	e3a03000 	mov	r3, #0
    f79c:	e5c40130 	strb	r0, [r4, #304]	; 0x130
    f7a0:	e584313c 	str	r3, [r4, #316]	; 0x13c
    f7a4:	e5843140 	str	r3, [r4, #320]	; 0x140
    f7a8:	e5c43144 	strb	r3, [r4, #324]	; 0x144
    f7ac:	e5c43145 	strb	r3, [r4, #325]	; 0x145
    f7b0:	e1a00004 	mov	r0, r4
    f7b4:	e8bd8010 	pop	{r4, pc}
    f7b8:	00041c78 	.word	0x00041c78

0000f7bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
    f7bc:	e5d13007 	ldrb	r3, [r1, #7]
    f7c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f7c4:	e2133002 	ands	r3, r3, #2
    f7c8:	e1a06001 	mov	r6, r1
    f7cc:	e1a05000 	mov	r5, r0
    f7d0:	1a000058 	bne	f938 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
    f7d4:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
    f7d8:	e3500000 	cmp	r0, #0
    f7dc:	1a000059 	bne	f948 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x18c>
    f7e0:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
    f7e4:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
    f7e8:	e2473001 	sub	r3, r7, #1
    f7ec:	e3530002 	cmp	r3, #2
    f7f0:	83a07001 	movhi	r7, #1
    f7f4:	e1b043a4 	lsrs	r4, r4, #7
    f7f8:	1a000047 	bne	f91c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
    f7fc:	e1a03004 	mov	r3, r4
    f800:	e5d5c145 	ldrb	ip, [r5, #325]	; 0x145
    f804:	e0833004 	add	r3, r3, r4
    f808:	e35c0000 	cmp	ip, #0
    f80c:	e0863003 	add	r3, r6, r3
    f810:	1a000022 	bne	f8a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
    f814:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
    f818:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
    f81c:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
    f820:	e1a01201 	lsl	r1, r1, #4
    f824:	e202300f 	and	r3, r2, #15
    f828:	e18ee403 	orr	lr, lr, r3, lsl #8
    f82c:	e1811222 	orr	r1, r1, r2, lsr #4
    f830:	e1a0300c 	mov	r3, ip
    f834:	e1a0200c 	mov	r2, ip
    f838:	e2859f51 	add	r9, r5, #324	; 0x144
    f83c:	e2858f52 	add	r8, r5, #328	; 0x148
    f840:	e3a0a001 	mov	sl, #1
    f844:	e190000c 	orrs	r0, r0, ip
    f848:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
    f84c:	e1c9e0b2 	strh	lr, [r9, #2]
    f850:	e1c810b0 	strh	r1, [r8]
    f854:	0a000004 	beq	f86c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
    f858:	e5950140 	ldr	r0, [r5, #320]	; 0x140
    f85c:	e3500000 	cmp	r0, #0
    f860:	0a000029 	beq	f90c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
    f864:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
    f868:	eb0022e3 	bl	183fc <CMouseDevice::ReportHandler(unsigned int, int, int)>
    f86c:	e3a01000 	mov	r1, #0
    f870:	e2844001 	add	r4, r4, #1
    f874:	e1570004 	cmp	r7, r4
    f878:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f87c:	e1a03184 	lsl	r3, r4, #3
    f880:	e0832004 	add	r2, r3, r4
    f884:	e0862002 	add	r2, r6, r2
    f888:	e5d22023 	ldrb	r2, [r2, #35]	; 0x23
    f88c:	e1a00001 	mov	r0, r1
    f890:	e1b023a2 	lsrs	r2, r2, #7
    f894:	0affffd9 	beq	f800 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
    f898:	e5c51145 	strb	r1, [r5, #325]	; 0x145
    f89c:	eafffff3 	b	f870 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb4>
    f8a0:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
    f8a4:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
    f8a8:	e2859f51 	add	r9, r5, #324	; 0x144
    f8ac:	e20a100f 	and	r1, sl, #15
    f8b0:	e1d920b2 	ldrh	r2, [r9, #2]
    f8b4:	e18ee401 	orr	lr, lr, r1, lsl #8
    f8b8:	e04e2002 	sub	r2, lr, r2
    f8bc:	e352007f 	cmp	r2, #127	; 0x7f
    f8c0:	e3e0c07e 	mvn	ip, #126	; 0x7e
    f8c4:	a3a0207f 	movge	r2, #127	; 0x7f
    f8c8:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
    f8cc:	e2858f52 	add	r8, r5, #328	; 0x148
    f8d0:	e1a01201 	lsl	r1, r1, #4
    f8d4:	e1d830b0 	ldrh	r3, [r8]
    f8d8:	e181122a 	orr	r1, r1, sl, lsr #4
    f8dc:	e0413003 	sub	r3, r1, r3
    f8e0:	e152000c 	cmp	r2, ip
    f8e4:	b1a0200c 	movlt	r2, ip
    f8e8:	e353007f 	cmp	r3, #127	; 0x7f
    f8ec:	a3a0307f 	movge	r3, #127	; 0x7f
    f8f0:	e153000c 	cmp	r3, ip
    f8f4:	b1a0300c 	movlt	r3, ip
    f8f8:	e3530000 	cmp	r3, #0
    f8fc:	03520000 	cmpeq	r2, #0
    f900:	13a0c001 	movne	ip, #1
    f904:	03a0c000 	moveq	ip, #0
    f908:	eaffffcc 	b	f840 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x84>
    f90c:	e59f2050 	ldr	r2, [pc, #80]	; f964 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
    f910:	e59f1050 	ldr	r1, [pc, #80]	; f968 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1ac>
    f914:	e59f0050 	ldr	r0, [pc, #80]	; f96c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b0>
    f918:	eb0051e9 	bl	240c4 <assertion_failed>
    f91c:	e3a04000 	mov	r4, #0
    f920:	e1500004 	cmp	r0, r4
    f924:	e5c54145 	strb	r4, [r5, #325]	; 0x145
    f928:	0a00000b 	beq	f95c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a0>
    f92c:	e1a03004 	mov	r3, r4
    f930:	e1a02004 	mov	r2, r4
    f934:	eaffffc7 	b	f858 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x9c>
    f938:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
    f93c:	e3520000 	cmp	r2, #0
    f940:	13a00000 	movne	r0, #0
    f944:	1affffa5 	bne	f7e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
    f948:	e2933000 	adds	r3, r3, #0
    f94c:	13a03001 	movne	r3, #1
    f950:	e3a00001 	mov	r0, #1
    f954:	e5c53144 	strb	r3, [r5, #324]	; 0x144
    f958:	eaffffa0 	b	f7e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
    f95c:	e1a04000 	mov	r4, r0
    f960:	eaffffc1 	b	f86c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
    f964:	0000015a 	.word	0x0000015a
    f968:	00041cc8 	.word	0x00041cc8
    f96c:	00041cdc 	.word	0x00041cdc

0000f970 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
    f970:	e2913000 	adds	r3, r1, #0
    f974:	13a03001 	movne	r3, #1
    f978:	e3520040 	cmp	r2, #64	; 0x40
    f97c:	13a03000 	movne	r3, #0
    f980:	e2532000 	subs	r2, r3, #0
    f984:	012fff1e 	bxeq	lr
    f988:	e92d4070 	push	{r4, r5, r6, lr}
    f98c:	e1a04000 	mov	r4, r0
    f990:	e5903000 	ldr	r3, [r0]
    f994:	e1a05001 	mov	r5, r1
    f998:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    f99c:	e12fff33 	blx	r3
    f9a0:	e5943124 	ldr	r3, [r4, #292]	; 0x124
    f9a4:	e3530000 	cmp	r3, #0
    f9a8:	0a000003 	beq	f9bc <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
    f9ac:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
    f9b0:	e2841024 	add	r1, r4, #36	; 0x24
    f9b4:	e2400001 	sub	r0, r0, #1
    f9b8:	e12fff33 	blx	r3
    f9bc:	e5943140 	ldr	r3, [r4, #320]	; 0x140
    f9c0:	e3530000 	cmp	r3, #0
    f9c4:	08bd8070 	popeq	{r4, r5, r6, pc}
    f9c8:	e1a01005 	mov	r1, r5
    f9cc:	e1a00004 	mov	r0, r4
    f9d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f9d4:	eaffff78 	b	f7bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0000f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
    f9d8:	e92d4010 	push	{r4, lr}
    f9dc:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
    f9e0:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
    f9e4:	e3a03000 	mov	r3, #0
    f9e8:	e5c2c003 	strb	ip, [r2, #3]
    f9ec:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f9f0:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
    f9f4:	e3a02020 	mov	r2, #32
    f9f8:	e5cce004 	strb	lr, [ip, #4]
    f9fc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa00:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
    fa04:	e5cce005 	strb	lr, [ip, #5]
    fa08:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa0c:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
    fa10:	e5cce006 	strb	lr, [ip, #6]
    fa14:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa18:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
    fa1c:	e5cce007 	strb	lr, [ip, #7]
    fa20:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa24:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
    fa28:	e5cce008 	strb	lr, [ip, #8]
    fa2c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa30:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
    fa34:	e5cce009 	strb	lr, [ip, #9]
    fa38:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    fa3c:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
    fa40:	e5cce00a 	strb	lr, [ip, #10]
    fa44:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
    fa48:	eb000790 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    fa4c:	e2504000 	subs	r4, r0, #0
    fa50:	1a000004 	bne	fa68 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
    fa54:	eb005a8d 	bl	26490 <CLogger::Get()>
    fa58:	e59f3010 	ldr	r3, [pc, #16]	; fa70 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
    fa5c:	e3a02001 	mov	r2, #1
    fa60:	e59f100c 	ldr	r1, [pc, #12]	; fa74 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
    fa64:	eb0059c6 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa68:	e1a00004 	mov	r0, r4
    fa6c:	e8bd8010 	pop	{r4, pc}
    fa70:	00041cf0 	.word	0x00041cf0
    fa74:	00041cbc 	.word	0x00041cbc

0000fa78 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
    fa78:	e2411001 	sub	r1, r1, #1
    fa7c:	e3510006 	cmp	r1, #6
    fa80:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    fa84:	ea000044 	b	fb9c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
    fa88:	0000fac4 	.word	0x0000fac4
    fa8c:	0000fae8 	.word	0x0000fae8
    fa90:	0000fb0c 	.word	0x0000fb0c
    fa94:	0000fb30 	.word	0x0000fb30
    fa98:	0000fb54 	.word	0x0000fb54
    fa9c:	0000fb78 	.word	0x0000fb78
    faa0:	0000faa4 	.word	0x0000faa4
    faa4:	e3e03000 	mvn	r3, #0
    faa8:	e3a0207f 	mov	r2, #127	; 0x7f
    faac:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    fab0:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fab4:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fab8:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fabc:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    fac0:	eaffffc4 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fac4:	e3a02000 	mov	r2, #0
    fac8:	e3e03000 	mvn	r3, #0
    facc:	e3a0107f 	mov	r1, #127	; 0x7f
    fad0:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    fad4:	e5c02135 	strb	r2, [r0, #309]	; 0x135
    fad8:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fadc:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fae0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    fae4:	eaffffbb 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fae8:	e3e02000 	mvn	r2, #0
    faec:	e3a03000 	mov	r3, #0
    faf0:	e3a0107f 	mov	r1, #127	; 0x7f
    faf4:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    faf8:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    fafc:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fb00:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fb04:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    fb08:	eaffffb2 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fb0c:	e3e03000 	mvn	r3, #0
    fb10:	e3a01000 	mov	r1, #0
    fb14:	e3a0207f 	mov	r2, #127	; 0x7f
    fb18:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    fb1c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fb20:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fb24:	e5c01135 	strb	r1, [r0, #309]	; 0x135
    fb28:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    fb2c:	eaffffa9 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fb30:	e3a02000 	mov	r2, #0
    fb34:	e3e03000 	mvn	r3, #0
    fb38:	e3a0107f 	mov	r1, #127	; 0x7f
    fb3c:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    fb40:	e5c02136 	strb	r2, [r0, #310]	; 0x136
    fb44:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fb48:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fb4c:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    fb50:	eaffffa0 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fb54:	e3e03000 	mvn	r3, #0
    fb58:	e3a01000 	mov	r1, #0
    fb5c:	e3a0207f 	mov	r2, #127	; 0x7f
    fb60:	e5c01134 	strb	r1, [r0, #308]	; 0x134
    fb64:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fb68:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fb6c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fb70:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    fb74:	eaffff97 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fb78:	e3e03000 	mvn	r3, #0
    fb7c:	e3a01000 	mov	r1, #0
    fb80:	e3a0207f 	mov	r2, #127	; 0x7f
    fb84:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    fb88:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fb8c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fb90:	e5c01136 	strb	r1, [r0, #310]	; 0x136
    fb94:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    fb98:	eaffff8e 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fb9c:	e3a03000 	mov	r3, #0
    fba0:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    fba4:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    fba8:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    fbac:	e5c03137 	strb	r3, [r0, #311]	; 0x137
    fbb0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fbb4:	eaffff87 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000fbb8 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    fbb8:	e92d4010 	push	{r4, lr}
    fbbc:	e1a04821 	lsr	r4, r1, #16
    fbc0:	e1a0e421 	lsr	lr, r1, #8
    fbc4:	e5c04134 	strb	r4, [r0, #308]	; 0x134
    fbc8:	e5c01136 	strb	r1, [r0, #310]	; 0x136
    fbcc:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
    fbd0:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    fbd4:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    fbd8:	e8bd4010 	pop	{r4, lr}
    fbdc:	eaffff7d 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000fbe0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
    fbe0:	e3510001 	cmp	r1, #1
    fbe4:	0a000011 	beq	fc30 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fbe8:	3a00000a 	bcc	fc18 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
    fbec:	e3510002 	cmp	r1, #2
    fbf0:	1a000006 	bne	fc10 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
    fbf4:	e3e0100c 	mvn	r1, #12
    fbf8:	e3a02000 	mov	r2, #0
    fbfc:	e3e03000 	mvn	r3, #0
    fc00:	e5c01131 	strb	r1, [r0, #305]	; 0x131
    fc04:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    fc08:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    fc0c:	eaffff71 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fc10:	e3a00001 	mov	r0, #1
    fc14:	e12fff1e 	bx	lr
    fc18:	e3a03000 	mov	r3, #0
    fc1c:	e3e0200f 	mvn	r2, #15
    fc20:	e5c03133 	strb	r3, [r0, #307]	; 0x133
    fc24:	e5c02131 	strb	r2, [r0, #305]	; 0x131
    fc28:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    fc2c:	eaffff69 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fc30:	e3e0100c 	mvn	r1, #12
    fc34:	e3e02000 	mvn	r2, #0
    fc38:	e3a03000 	mov	r3, #0
    fc3c:	e5c01131 	strb	r1, [r0, #305]	; 0x131
    fc40:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    fc44:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    fc48:	eaffff62 	b	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000fc4c <CUSBGamePadPS4Device::DisableTouchpad()>:
    fc4c:	e3a02000 	mov	r2, #0
    fc50:	e59f3004 	ldr	r3, [pc, #4]	; fc5c <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
    fc54:	e5c32000 	strb	r2, [r3]
    fc58:	e12fff1e 	bx	lr
    fc5c:	00049980 	.word	0x00049980

0000fc60 <CUSBGamePadPS4Device::Configure()>:
    fc60:	e92d4070 	push	{r4, r5, r6, lr}
    fc64:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
    fc68:	e3550000 	cmp	r5, #0
    fc6c:	0a00003f 	beq	fd70 <CUSBGamePadPS4Device::Configure()+0x110>
    fc70:	e3a02040 	mov	r2, #64	; 0x40
    fc74:	e2803f4a 	add	r3, r0, #296	; 0x128
    fc78:	e1c320b0 	strh	r2, [r3]
    fc7c:	e1a04000 	mov	r4, r0
    fc80:	eb001e49 	bl	175ac <CUSBGamePadDevice::Configure()>
    fc84:	e2505000 	subs	r5, r0, #0
    fc88:	0a00003c 	beq	fd80 <CUSBGamePadPS4Device::Configure()+0x120>
    fc8c:	e59f3120 	ldr	r3, [pc, #288]	; fdb4 <CUSBGamePadPS4Device::Configure()+0x154>
    fc90:	e5d33000 	ldrb	r3, [r3]
    fc94:	e3530000 	cmp	r3, #0
    fc98:	1a00003f 	bne	fd9c <CUSBGamePadPS4Device::Configure()+0x13c>
    fc9c:	e3a02006 	mov	r2, #6
    fca0:	e3a0c00e 	mov	ip, #14
    fca4:	e3a00001 	mov	r0, #1
    fca8:	e1a03004 	mov	r3, r4
    fcac:	e3a05000 	mov	r5, #0
    fcb0:	e3a010ff 	mov	r1, #255	; 0xff
    fcb4:	e5842024 	str	r2, [r4, #36]	; 0x24
    fcb8:	e584c104 	str	ip, [r4, #260]	; 0x104
    fcbc:	e58400e8 	str	r0, [r4, #232]	; 0xe8
    fcc0:	e2842048 	add	r2, r4, #72	; 0x48
    fcc4:	e583502c 	str	r5, [r3, #44]	; 0x2c
    fcc8:	e5831030 	str	r1, [r3, #48]	; 0x30
    fccc:	e283300c 	add	r3, r3, #12
    fcd0:	e1520003 	cmp	r2, r3
    fcd4:	1afffffa 	bne	fcc4 <CUSBGamePadPS4Device::Configure()+0x64>
    fcd8:	e3a00020 	mov	r0, #32
    fcdc:	eb006b15 	bl	2a938 <operator new[](unsigned int)>
    fce0:	e3a06005 	mov	r6, #5
    fce4:	e3a02020 	mov	r2, #32
    fce8:	e584013c 	str	r0, [r4, #316]	; 0x13c
    fcec:	e3a01000 	mov	r1, #0
    fcf0:	eb0066bf 	bl	297f4 <memset>
    fcf4:	e3a0c007 	mov	ip, #7
    fcf8:	e3e03000 	mvn	r3, #0
    fcfc:	e3a0e004 	mov	lr, #4
    fd00:	e3e0100f 	mvn	r1, #15
    fd04:	e3a0207f 	mov	r2, #127	; 0x7f
    fd08:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    fd0c:	e5c06000 	strb	r6, [r0]
    fd10:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    fd14:	e5c0c001 	strb	ip, [r0, #1]
    fd18:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
    fd1c:	e1a00004 	mov	r0, r4
    fd20:	e5cce002 	strb	lr, [ip, #2]
    fd24:	e5c41131 	strb	r1, [r4, #305]	; 0x131
    fd28:	e5c43134 	strb	r3, [r4, #308]	; 0x134
    fd2c:	e5c43135 	strb	r3, [r4, #309]	; 0x135
    fd30:	e5c43136 	strb	r3, [r4, #310]	; 0x136
    fd34:	e5c43138 	strb	r3, [r4, #312]	; 0x138
    fd38:	e5c42137 	strb	r2, [r4, #311]	; 0x137
    fd3c:	e5c45133 	strb	r5, [r4, #307]	; 0x133
    fd40:	e5c45132 	strb	r5, [r4, #306]	; 0x132
    fd44:	ebffff23 	bl	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fd48:	e5c45134 	strb	r5, [r4, #308]	; 0x134
    fd4c:	e5c45135 	strb	r5, [r4, #309]	; 0x135
    fd50:	e5c45136 	strb	r5, [r4, #310]	; 0x136
    fd54:	e3a000fa 	mov	r0, #250	; 0xfa
    fd58:	eb00665f 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
    fd5c:	e1a00004 	mov	r0, r4
    fd60:	ebffff1c 	bl	f9d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    fd64:	e1a00004 	mov	r0, r4
    fd68:	e8bd4070 	pop	{r4, r5, r6, lr}
    fd6c:	ea000751 	b	11ab8 <CUSBHIDDevice::StartRequest()>
    fd70:	e59f1040 	ldr	r1, [pc, #64]	; fdb8 <CUSBGamePadPS4Device::Configure()+0x158>
    fd74:	ebfffc20 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
    fd78:	e1a00005 	mov	r0, r5
    fd7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd80:	eb0059c2 	bl	26490 <CLogger::Get()>
    fd84:	e59f3030 	ldr	r3, [pc, #48]	; fdbc <CUSBGamePadPS4Device::Configure()+0x15c>
    fd88:	e3a02001 	mov	r2, #1
    fd8c:	e59f1024 	ldr	r1, [pc, #36]	; fdb8 <CUSBGamePadPS4Device::Configure()+0x158>
    fd90:	eb0058fb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd94:	e1a00005 	mov	r0, r5
    fd98:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd9c:	e3a00028 	mov	r0, #40	; 0x28
    fda0:	eb006ae3 	bl	2a934 <operator new(unsigned int)>
    fda4:	e1a05000 	mov	r5, r0
    fda8:	eb002159 	bl	18314 <CMouseDevice::CMouseDevice()>
    fdac:	e5845140 	str	r5, [r4, #320]	; 0x140
    fdb0:	eaffffb9 	b	fc9c <CUSBGamePadPS4Device::Configure()+0x3c>
    fdb4:	00049980 	.word	0x00049980
    fdb8:	00041cbc 	.word	0x00041cbc
    fdbc:	00041be0 	.word	0x00041be0

0000fdc0 <CUSBGamePadPS4Device::GetProperties()>:
    fdc0:	e3a0003f 	mov	r0, #63	; 0x3f
    fdc4:	e12fff1e 	bx	lr

0000fdc8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    fdc8:	e92d4010 	push	{r4, lr}
    fdcc:	e1a04000 	mov	r4, r0
    fdd0:	e5900134 	ldr	r0, [r0, #308]	; 0x134
    fdd4:	e59f3024 	ldr	r3, [pc, #36]	; fe00 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
    fdd8:	e3500000 	cmp	r0, #0
    fddc:	e5843000 	str	r3, [r4]
    fde0:	0a000000 	beq	fde8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
    fde4:	eb006ada 	bl	2a954 <operator delete[](void*)>
    fde8:	e3a03000 	mov	r3, #0
    fdec:	e1a00004 	mov	r0, r4
    fdf0:	e5843134 	str	r3, [r4, #308]	; 0x134
    fdf4:	eb001e29 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    fdf8:	e1a00004 	mov	r0, r4
    fdfc:	e8bd8010 	pop	{r4, pc}
    fe00:	00041d18 	.word	0x00041d18

0000fe04 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    fe04:	e92d4010 	push	{r4, lr}
    fe08:	e1a04000 	mov	r4, r0
    fe0c:	ebffffed 	bl	fdc8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fe10:	e1a00004 	mov	r0, r4
    fe14:	e3a01f4f 	mov	r1, #316	; 0x13c
    fe18:	eb006ad3 	bl	2a96c <operator delete(void*, unsigned int)>
    fe1c:	e1a00004 	mov	r0, r4
    fe20:	e8bd8010 	pop	{r4, pc}

0000fe24 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
    fe24:	e92d4070 	push	{r4, r5, r6, lr}
    fe28:	e1a04000 	mov	r4, r0
    fe2c:	e1a05002 	mov	r5, r2
    fe30:	eb001e08 	bl	17658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    fe34:	e3a03000 	mov	r3, #0
    fe38:	e59f0018 	ldr	r0, [pc, #24]	; fe58 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
    fe3c:	e2841f4e 	add	r1, r4, #312	; 0x138
    fe40:	e5840000 	str	r0, [r4]
    fe44:	e5c45130 	strb	r5, [r4, #304]	; 0x130
    fe48:	e5843134 	str	r3, [r4, #308]	; 0x134
    fe4c:	e1a00004 	mov	r0, r4
    fe50:	e1c130b0 	strh	r3, [r1]
    fe54:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe58:	00041d18 	.word	0x00041d18

0000fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
    fe5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe60:	e0814002 	add	r4, r1, r2
    fe64:	e2846007 	add	r6, r4, #7
    fe68:	e1a061a6 	lsr	r6, r6, #3
    fe6c:	e1a0e1a1 	lsr	lr, r1, #3
    fe70:	e15e0006 	cmp	lr, r6
    fe74:	e24dd00c 	sub	sp, sp, #12
    fe78:	2a000037 	bcs	ff5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
    fe7c:	e3a07001 	mov	r7, #1
    fe80:	e3a05000 	mov	r5, #0
    fe84:	e2011007 	and	r1, r1, #7
    fe88:	e0828001 	add	r8, r2, r1
    fe8c:	e1a08817 	lsl	r8, r7, r8
    fe90:	e6ef8078 	uxtb	r8, r8
    fe94:	e1a07117 	lsl	r7, r7, r1
    fe98:	e6ef7077 	uxtb	r7, r7
    fe9c:	e2489001 	sub	r9, r8, #1
    fea0:	e2444001 	sub	r4, r4, #1
    fea4:	e0488007 	sub	r8, r8, r7
    fea8:	e6ef9079 	uxtb	r9, r9
    feac:	e2677000 	rsb	r7, r7, #0
    feb0:	e1a03005 	mov	r3, r5
    feb4:	e1a0c00e 	mov	ip, lr
    feb8:	e1a041a4 	lsr	r4, r4, #3
    febc:	e080000e 	add	r0, r0, lr
    fec0:	e58d9004 	str	r9, [sp, #4]
    fec4:	e6ef8078 	uxtb	r8, r8
    fec8:	e6ef7077 	uxtb	r7, r7
    fecc:	e261b008 	rsb	fp, r1, #8
    fed0:	ea00000e 	b	ff10 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
    fed4:	e15e000c 	cmp	lr, ip
    fed8:	0a000018 	beq	ff40 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
    fedc:	e15c0004 	cmp	ip, r4
    fee0:	05d09000 	ldrbeq	r9, [r0]
    fee4:	059da004 	ldreq	sl, [sp, #4]
    fee8:	12855008 	addne	r5, r5, #8
    feec:	15d0a000 	ldrbne	sl, [r0]
    fef0:	0009900a 	andeq	r9, r9, sl
    fef4:	10429005 	subne	r9, r2, r5
    fef8:	01833009 	orreq	r3, r3, r9
    fefc:	1183391a 	orrne	r3, r3, sl, lsl r9
    ff00:	e28cc001 	add	ip, ip, #1
    ff04:	e15c0006 	cmp	ip, r6
    ff08:	e2800001 	add	r0, r0, #1
    ff0c:	0a000008 	beq	ff34 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
    ff10:	e15e0004 	cmp	lr, r4
    ff14:	1affffee 	bne	fed4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
    ff18:	e5d03000 	ldrb	r3, [r0]
    ff1c:	e28cc001 	add	ip, ip, #1
    ff20:	e0033008 	and	r3, r3, r8
    ff24:	e15c0006 	cmp	ip, r6
    ff28:	e1a03153 	asr	r3, r3, r1
    ff2c:	e2800001 	add	r0, r0, #1
    ff30:	1afffff6 	bne	ff10 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
    ff34:	e1a00003 	mov	r0, r3
    ff38:	e28dd00c 	add	sp, sp, #12
    ff3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff40:	e5d03000 	ldrb	r3, [r0]
    ff44:	e085500b 	add	r5, r5, fp
    ff48:	e0033007 	and	r3, r3, r7
    ff4c:	e1a03153 	asr	r3, r3, r1
    ff50:	e0429005 	sub	r9, r2, r5
    ff54:	e1a03913 	lsl	r3, r3, r9
    ff58:	eaffffe8 	b	ff00 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
    ff5c:	e3a03000 	mov	r3, #0
    ff60:	eafffff3 	b	ff34 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

0000ff64 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
    ff64:	e92d4010 	push	{r4, lr}
    ff68:	e1a04002 	mov	r4, r2
    ff6c:	ebffffba 	bl	fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    ff70:	e3a02001 	mov	r2, #1
    ff74:	e2443001 	sub	r3, r4, #1
    ff78:	e0103312 	ands	r3, r0, r2, lsl r3
    ff7c:	11a02412 	lslne	r2, r2, r4
    ff80:	12622000 	rsbne	r2, r2, #0
    ff84:	11800002 	orrne	r0, r0, r2
    ff88:	e8bd8010 	pop	{r4, pc}

0000ff8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
    ff8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff90:	e5905134 	ldr	r5, [r0, #308]	; 0x134
    ff94:	e24dd034 	sub	sp, sp, #52	; 0x34
    ff98:	e3550000 	cmp	r5, #0
    ff9c:	e58d0014 	str	r0, [sp, #20]
    ffa0:	e58d1000 	str	r1, [sp]
    ffa4:	0a000108 	beq	103cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x440>
    ffa8:	e3a09000 	mov	r9, #0
    ffac:	e59f3440 	ldr	r3, [pc, #1088]	; 103f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
    ffb0:	e1a07009 	mov	r7, r9
    ffb4:	e1a02003 	mov	r2, r3
    ffb8:	e1a0a009 	mov	sl, r9
    ffbc:	e1a0b009 	mov	fp, r9
    ffc0:	e1a08009 	mov	r8, r9
    ffc4:	e58d300c 	str	r3, [sp, #12]
    ffc8:	e59d3014 	ldr	r3, [sp, #20]
    ffcc:	e58d9020 	str	r9, [sp, #32]
    ffd0:	e2833f4e 	add	r3, r3, #312	; 0x138
    ffd4:	e1d340b0 	ldrh	r4, [r3]
    ffd8:	e58d901c 	str	r9, [sp, #28]
    ffdc:	e58d9004 	str	r9, [sp, #4]
    ffe0:	e58d2010 	str	r2, [sp, #16]
    ffe4:	e58d2018 	str	r2, [sp, #24]
    ffe8:	e58d2008 	str	r2, [sp, #8]
    ffec:	e3540000 	cmp	r4, #0
    fff0:	0a000024 	beq	10088 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
    fff4:	e1d530d0 	ldrsb	r3, [r5]
    fff8:	e2032003 	and	r2, r3, #3
    fffc:	e3520001 	cmp	r2, #1
   10000:	0a00004e 	beq	10140 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   10004:	e3520002 	cmp	r2, #2
   10008:	0a000045 	beq	10124 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   1000c:	e3520000 	cmp	r2, #0
   10010:	0a00003e 	beq	10110 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   10014:	e1d560d3 	ldrsb	r6, [r5, #3]
   10018:	e1d520d2 	ldrsb	r2, [r5, #2]
   1001c:	e1d510d1 	ldrsb	r1, [r5, #1]
   10020:	e1a06806 	lsl	r6, r6, #16
   10024:	e1866402 	orr	r6, r6, r2, lsl #8
   10028:	e1d520d4 	ldrsb	r2, [r5, #4]
   1002c:	e2444005 	sub	r4, r4, #5
   10030:	e1866001 	orr	r6, r6, r1
   10034:	e6ff4074 	uxth	r4, r4
   10038:	e1866c02 	orr	r6, r6, r2, lsl #24
   1003c:	e2855005 	add	r5, r5, #5
   10040:	e20330fc 	and	r3, r3, #252	; 0xfc
   10044:	e3530084 	cmp	r3, #132	; 0x84
   10048:	0a000024 	beq	100e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   1004c:	e3530034 	cmp	r3, #52	; 0x34
   10050:	0a00003f 	beq	10154 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   10054:	ca000016 	bgt	100b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   10058:	e3530008 	cmp	r3, #8
   1005c:	0a00003e 	beq	1015c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   10060:	da00004c 	ble	10198 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   10064:	e3530014 	cmp	r3, #20
   10068:	058d6018 	streq	r6, [sp, #24]
   1006c:	0affffde 	beq	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10070:	e3530024 	cmp	r3, #36	; 0x24
   10074:	e59d2008 	ldr	r2, [sp, #8]
   10078:	01a02006 	moveq	r2, r6
   1007c:	e3540000 	cmp	r4, #0
   10080:	e58d2008 	str	r2, [sp, #8]
   10084:	1affffda 	bne	fff4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   10088:	e59d1014 	ldr	r1, [sp, #20]
   1008c:	e59d001c 	ldr	r0, [sp, #28]
   10090:	e28b3007 	add	r3, fp, #7
   10094:	e5810024 	str	r0, [r1, #36]	; 0x24
   10098:	e59d0020 	ldr	r0, [sp, #32]
   1009c:	e1a031a3 	lsr	r3, r3, #3
   100a0:	e2812f4a 	add	r2, r1, #296	; 0x128
   100a4:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   100a8:	e1c230b0 	strh	r3, [r2]
   100ac:	e28dd034 	add	sp, sp, #52	; 0x34
   100b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100b4:	e3530074 	cmp	r3, #116	; 0x74
   100b8:	01a0a006 	moveq	sl, r6
   100bc:	0affffca 	beq	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   100c0:	da00003b 	ble	101b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   100c4:	e3530080 	cmp	r3, #128	; 0x80
   100c8:	0a00002b 	beq	1017c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   100cc:	e3530094 	cmp	r3, #148	; 0x94
   100d0:	e59d2004 	ldr	r2, [sp, #4]
   100d4:	01a02006 	moveq	r2, r6
   100d8:	e58d2004 	str	r2, [sp, #4]
   100dc:	eaffffc2 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   100e0:	e3570000 	cmp	r7, #0
   100e4:	1affffe7 	bne	10088 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   100e8:	e3a02008 	mov	r2, #8
   100ec:	e1a01008 	mov	r1, r8
   100f0:	e59d0000 	ldr	r0, [sp]
   100f4:	ebffff58 	bl	fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   100f8:	e3500000 	cmp	r0, #0
   100fc:	11500006 	cmpne	r0, r6
   10100:	1affffe9 	bne	100ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   10104:	e1a07006 	mov	r7, r6
   10108:	e3a0b008 	mov	fp, #8
   1010c:	eaffffb6 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10110:	e2444001 	sub	r4, r4, #1
   10114:	e6ff4074 	uxth	r4, r4
   10118:	e2855001 	add	r5, r5, #1
   1011c:	e1a06008 	mov	r6, r8
   10120:	eaffffc6 	b	10040 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10124:	e5d56001 	ldrb	r6, [r5, #1]
   10128:	e1d520d2 	ldrsb	r2, [r5, #2]
   1012c:	e2444003 	sub	r4, r4, #3
   10130:	e6ff4074 	uxth	r4, r4
   10134:	e1866402 	orr	r6, r6, r2, lsl #8
   10138:	e2855003 	add	r5, r5, #3
   1013c:	eaffffbf 	b	10040 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10140:	e2444002 	sub	r4, r4, #2
   10144:	e1d560d1 	ldrsb	r6, [r5, #1]
   10148:	e6ff4074 	uxth	r4, r4
   1014c:	e2855002 	add	r5, r5, #2
   10150:	eaffffba 	b	10040 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10154:	e58d6010 	str	r6, [sp, #16]
   10158:	eaffffa3 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1015c:	e3560036 	cmp	r6, #54	; 0x36
   10160:	ca000018 	bgt	101c8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   10164:	e3560030 	cmp	r6, #48	; 0x30
   10168:	aa00002d 	bge	10224 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   1016c:	e2466004 	sub	r6, r6, #4
   10170:	e3560001 	cmp	r6, #1
   10174:	93a09001 	movls	r9, #1
   10178:	eaffff9b 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   1017c:	e2066003 	and	r6, r6, #3
   10180:	e3560002 	cmp	r6, #2
   10184:	0a000014 	beq	101dc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   10188:	e59d3004 	ldr	r3, [sp, #4]
   1018c:	e0060a93 	mul	r6, r3, sl
   10190:	e08bb006 	add	fp, fp, r6
   10194:	eaffff94 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10198:	e3530004 	cmp	r3, #4
   1019c:	1affff92 	bne	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101a0:	e3560009 	cmp	r6, #9
   101a4:	1affff90 	bne	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101a8:	e3590001 	cmp	r9, #1
   101ac:	03a09002 	moveq	r9, #2
   101b0:	eaffff8d 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101b4:	e3530044 	cmp	r3, #68	; 0x44
   101b8:	e59d200c 	ldr	r2, [sp, #12]
   101bc:	01a02006 	moveq	r2, r6
   101c0:	e58d200c 	str	r2, [sp, #12]
   101c4:	eaffff88 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101c8:	e3560039 	cmp	r6, #57	; 0x39
   101cc:	1affff86 	bne	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101d0:	e3590001 	cmp	r9, #1
   101d4:	03a09004 	moveq	r9, #4
   101d8:	eaffff83 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   101dc:	e3590003 	cmp	r9, #3
   101e0:	0a000012 	beq	10230 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   101e4:	e3590004 	cmp	r9, #4
   101e8:	0a00004e 	beq	10328 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x39c>
   101ec:	e59d3004 	ldr	r3, [sp, #4]
   101f0:	e3590002 	cmp	r9, #2
   101f4:	e0060a93 	mul	r6, r3, sl
   101f8:	1affffe4 	bne	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   101fc:	e59d2014 	ldr	r2, [sp, #20]
   10200:	e1a0100b 	mov	r1, fp
   10204:	e5823104 	str	r3, [r2, #260]	; 0x104
   10208:	e59d0000 	ldr	r0, [sp]
   1020c:	e1a02006 	mov	r2, r6
   10210:	ebffff11 	bl	fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10214:	e59d2014 	ldr	r2, [sp, #20]
   10218:	e3a09001 	mov	r9, #1
   1021c:	e5820108 	str	r0, [r2, #264]	; 0x108
   10220:	eaffffda 	b	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10224:	e3590001 	cmp	r9, #1
   10228:	03a09003 	moveq	r9, #3
   1022c:	eaffff6e 	b	ffec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10230:	e59d3004 	ldr	r3, [sp, #4]
   10234:	e3530000 	cmp	r3, #0
   10238:	0a00006a 	beq	103e8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x45c>
   1023c:	e59d2018 	ldr	r2, [sp, #24]
   10240:	e59f01ac 	ldr	r0, [pc, #428]	; 103f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10244:	e59d1010 	ldr	r1, [sp, #16]
   10248:	e1520000 	cmp	r2, r0
   1024c:	e1a03002 	mov	r3, r2
   10250:	01a03001 	moveq	r3, r1
   10254:	e59fc198 	ldr	ip, [pc, #408]	; 103f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10258:	e59d1008 	ldr	r1, [sp, #8]
   1025c:	e59d000c 	ldr	r0, [sp, #12]
   10260:	e151000c 	cmp	r1, ip
   10264:	e1a02003 	mov	r2, r3
   10268:	e1a03001 	mov	r3, r1
   1026c:	01a03000 	moveq	r3, r0
   10270:	e1a01003 	mov	r1, r3
   10274:	e59d001c 	ldr	r0, [sp, #28]
   10278:	e59dc014 	ldr	ip, [sp, #20]
   1027c:	e0806080 	add	r6, r0, r0, lsl #1
   10280:	e58db01c 	str	fp, [sp, #28]
   10284:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10288:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1028c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10290:	e3a09000 	mov	r9, #0
   10294:	e1a0400b 	mov	r4, fp
   10298:	e08c6106 	add	r6, ip, r6, lsl #2
   1029c:	e1a05000 	mov	r5, r0
   102a0:	e1a07002 	mov	r7, r2
   102a4:	e1a0b001 	mov	fp, r1
   102a8:	ea00000d 	b	102e4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x358>
   102ac:	ebfffeea 	bl	fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   102b0:	e2899001 	add	r9, r9, #1
   102b4:	e359000f 	cmp	r9, #15
   102b8:	93a02000 	movls	r2, #0
   102bc:	83a02001 	movhi	r2, #1
   102c0:	e59d3004 	ldr	r3, [sp, #4]
   102c4:	e5860028 	str	r0, [r6, #40]	; 0x28
   102c8:	e1530009 	cmp	r3, r9
   102cc:	93822001 	orrls	r2, r2, #1
   102d0:	e3520000 	cmp	r2, #0
   102d4:	e2855001 	add	r5, r5, #1
   102d8:	e286600c 	add	r6, r6, #12
   102dc:	e084400a 	add	r4, r4, sl
   102e0:	1a000008 	bne	10308 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x37c>
   102e4:	e3570000 	cmp	r7, #0
   102e8:	e1a0200a 	mov	r2, sl
   102ec:	e1a01004 	mov	r1, r4
   102f0:	e586702c 	str	r7, [r6, #44]	; 0x2c
   102f4:	e586b030 	str	fp, [r6, #48]	; 0x30
   102f8:	e59d0000 	ldr	r0, [sp]
   102fc:	aaffffea 	bge	102ac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>
   10300:	ebffff17 	bl	ff64 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10304:	eaffffe9 	b	102b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   10308:	e59db01c 	ldr	fp, [sp, #28]
   1030c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   10310:	e58d501c 	str	r5, [sp, #28]
   10314:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10318:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1031c:	e0060a93 	mul	r6, r3, sl
   10320:	e3a09001 	mov	r9, #1
   10324:	eaffff99 	b	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10328:	e59d2004 	ldr	r2, [sp, #4]
   1032c:	e3520000 	cmp	r2, #0
   10330:	0a000029 	beq	103dc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x450>
   10334:	e59d1020 	ldr	r1, [sp, #32]
   10338:	e59d0014 	ldr	r0, [sp, #20]
   1033c:	e281303b 	add	r3, r1, #59	; 0x3b
   10340:	e0803103 	add	r3, r0, r3, lsl #2
   10344:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10348:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1034c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10350:	e3a06000 	mov	r6, #0
   10354:	e1a07001 	mov	r7, r1
   10358:	e1a04002 	mov	r4, r2
   1035c:	e1a05003 	mov	r5, r3
   10360:	e1a0900b 	mov	r9, fp
   10364:	e58db020 	str	fp, [sp, #32]
   10368:	e59db000 	ldr	fp, [sp]
   1036c:	e1a0200a 	mov	r2, sl
   10370:	e2866001 	add	r6, r6, #1
   10374:	e1a01009 	mov	r1, r9
   10378:	e1a0000b 	mov	r0, fp
   1037c:	ebfffeb6 	bl	fe5c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10380:	e3560005 	cmp	r6, #5
   10384:	93a02000 	movls	r2, #0
   10388:	83a02001 	movhi	r2, #1
   1038c:	e1540006 	cmp	r4, r6
   10390:	93822001 	orrls	r2, r2, #1
   10394:	e3520000 	cmp	r2, #0
   10398:	e2877001 	add	r7, r7, #1
   1039c:	e089900a 	add	r9, r9, sl
   103a0:	e4850004 	str	r0, [r5], #4
   103a4:	0afffff0 	beq	1036c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e0>
   103a8:	e59d3004 	ldr	r3, [sp, #4]
   103ac:	e59db020 	ldr	fp, [sp, #32]
   103b0:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   103b4:	e58d7020 	str	r7, [sp, #32]
   103b8:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   103bc:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   103c0:	e0060a93 	mul	r6, r3, sl
   103c4:	e3a09001 	mov	r9, #1
   103c8:	eaffff70 	b	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   103cc:	e3a020a2 	mov	r2, #162	; 0xa2
   103d0:	e59f1020 	ldr	r1, [pc, #32]	; 103f8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   103d4:	e59f0020 	ldr	r0, [pc, #32]	; 103fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x470>
   103d8:	eb004f39 	bl	240c4 <assertion_failed>
   103dc:	e59d6004 	ldr	r6, [sp, #4]
   103e0:	e3a09001 	mov	r9, #1
   103e4:	eaffff69 	b	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   103e8:	e1a06008 	mov	r6, r8
   103ec:	e3a09001 	mov	r9, #1
   103f0:	eaffff66 	b	10190 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   103f4:	f8a432eb 	.word	0xf8a432eb
   103f8:	00041d68 	.word	0x00041d68
   103fc:	00041d80 	.word	0x00041d80

00010400 <CUSBGamePadStandardDevice::Configure()>:
   10400:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10404:	e3a01021 	mov	r1, #33	; 0x21
   10408:	e24dd078 	sub	sp, sp, #120	; 0x78
   1040c:	e1a04000 	mov	r4, r0
   10410:	ebfffa6e 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   10414:	e2505000 	subs	r5, r0, #0
   10418:	0a000003 	beq	1042c <CUSBGamePadStandardDevice::Configure()+0x2c>
   1041c:	e5d50007 	ldrb	r0, [r5, #7]
   10420:	e5d53008 	ldrb	r3, [r5, #8]
   10424:	e1900403 	orrs	r0, r0, r3, lsl #8
   10428:	1a000006 	bne	10448 <CUSBGamePadStandardDevice::Configure()+0x48>
   1042c:	e1a00004 	mov	r0, r4
   10430:	e59f1158 	ldr	r1, [pc, #344]	; 10590 <CUSBGamePadStandardDevice::Configure()+0x190>
   10434:	ebfffa70 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   10438:	e3a05000 	mov	r5, #0
   1043c:	e1a00005 	mov	r0, r5
   10440:	e28dd078 	add	sp, sp, #120	; 0x78
   10444:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10448:	e2846f4e 	add	r6, r4, #312	; 0x138
   1044c:	e1c600b0 	strh	r0, [r6]
   10450:	eb006938 	bl	2a938 <operator new[](unsigned int)>
   10454:	e5840134 	str	r0, [r4, #308]	; 0x134
   10458:	e1a00004 	mov	r0, r4
   1045c:	ebfffa50 	bl	eda4 <CUSBFunction::GetHost() const>
   10460:	e1a07000 	mov	r7, r0
   10464:	e1a00004 	mov	r0, r4
   10468:	ebfffa42 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   1046c:	e1a08000 	mov	r8, r0
   10470:	e1a00004 	mov	r0, r4
   10474:	e5d55006 	ldrb	r5, [r5, #6]
   10478:	e1d6a0b0 	ldrh	sl, [r6]
   1047c:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   10480:	ebfffaa5 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
   10484:	e3a03081 	mov	r3, #129	; 0x81
   10488:	e6ff0070 	uxth	r0, r0
   1048c:	e58d000c 	str	r0, [sp, #12]
   10490:	e58d3008 	str	r3, [sp, #8]
   10494:	e58da004 	str	sl, [sp, #4]
   10498:	e3a03000 	mov	r3, #0
   1049c:	e58d9000 	str	r9, [sp]
   104a0:	e1a02005 	mov	r2, r5
   104a4:	e1a01008 	mov	r1, r8
   104a8:	e1a00007 	mov	r0, r7
   104ac:	eb000640 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   104b0:	e1d630b0 	ldrh	r3, [r6]
   104b4:	e1500003 	cmp	r0, r3
   104b8:	0a000008 	beq	104e0 <CUSBGamePadStandardDevice::Configure()+0xe0>
   104bc:	e3a05000 	mov	r5, #0
   104c0:	eb0057f2 	bl	26490 <CLogger::Get()>
   104c4:	e59f30c8 	ldr	r3, [pc, #200]	; 10594 <CUSBGamePadStandardDevice::Configure()+0x194>
   104c8:	e3a02001 	mov	r2, #1
   104cc:	e59f10bc 	ldr	r1, [pc, #188]	; 10590 <CUSBGamePadStandardDevice::Configure()+0x190>
   104d0:	eb00572b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   104d4:	e1a00005 	mov	r0, r5
   104d8:	e28dd078 	add	sp, sp, #120	; 0x78
   104dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   104e0:	e3a02064 	mov	r2, #100	; 0x64
   104e4:	e3a01000 	mov	r1, #0
   104e8:	e28d0014 	add	r0, sp, #20
   104ec:	eb0064c0 	bl	297f4 <memset>
   104f0:	e5943000 	ldr	r3, [r4]
   104f4:	e28d1014 	add	r1, sp, #20
   104f8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   104fc:	e1a00004 	mov	r0, r4
   10500:	e12fff33 	blx	r3
   10504:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10508:	e3530000 	cmp	r3, #0
   1050c:	1a000002 	bne	1051c <CUSBGamePadStandardDevice::Configure()+0x11c>
   10510:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   10514:	e3530000 	cmp	r3, #0
   10518:	0a00000e 	beq	10558 <CUSBGamePadStandardDevice::Configure()+0x158>
   1051c:	e2843f4a 	add	r3, r4, #296	; 0x128
   10520:	e1d330b0 	ldrh	r3, [r3]
   10524:	e3530000 	cmp	r3, #0
   10528:	0a000014 	beq	10580 <CUSBGamePadStandardDevice::Configure()+0x180>
   1052c:	e1a00004 	mov	r0, r4
   10530:	eb001c1d 	bl	175ac <CUSBGamePadDevice::Configure()>
   10534:	e2505000 	subs	r5, r0, #0
   10538:	0a00000a 	beq	10568 <CUSBGamePadStandardDevice::Configure()+0x168>
   1053c:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   10540:	e3530000 	cmp	r3, #0
   10544:	0affffbc 	beq	1043c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10548:	e1a00004 	mov	r0, r4
   1054c:	eb000559 	bl	11ab8 <CUSBHIDDevice::StartRequest()>
   10550:	e1a05000 	mov	r5, r0
   10554:	eaffffb8 	b	1043c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10558:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   1055c:	e3550000 	cmp	r5, #0
   10560:	1affffed 	bne	1051c <CUSBGamePadStandardDevice::Configure()+0x11c>
   10564:	eaffffb4 	b	1043c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10568:	eb0057c8 	bl	26490 <CLogger::Get()>
   1056c:	e59f3024 	ldr	r3, [pc, #36]	; 10598 <CUSBGamePadStandardDevice::Configure()+0x198>
   10570:	e3a02001 	mov	r2, #1
   10574:	e59f1014 	ldr	r1, [pc, #20]	; 10590 <CUSBGamePadStandardDevice::Configure()+0x190>
   10578:	eb005701 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1057c:	eaffffae 	b	1043c <CUSBGamePadStandardDevice::Configure()+0x3c>
   10580:	e3a02085 	mov	r2, #133	; 0x85
   10584:	e59f1010 	ldr	r1, [pc, #16]	; 1059c <CUSBGamePadStandardDevice::Configure()+0x19c>
   10588:	e59f0010 	ldr	r0, [pc, #16]	; 105a0 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   1058c:	eb004ecc 	bl	240c4 <assertion_failed>
   10590:	00041d5c 	.word	0x00041d5c
   10594:	00041d9c 	.word	0x00041d9c
   10598:	00041be0 	.word	0x00041be0
   1059c:	00041d68 	.word	0x00041d68
   105a0:	00041dc0 	.word	0x00041dc0

000105a4 <CUSBGamePadDevice::GetProperties()>:
   105a4:	e3a00000 	mov	r0, #0
   105a8:	e12fff1e 	bx	lr

000105ac <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   105ac:	e3a00000 	mov	r0, #0
   105b0:	e12fff1e 	bx	lr

000105b4 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   105b4:	e3a00000 	mov	r0, #0
   105b8:	e12fff1e 	bx	lr

000105bc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   105bc:	e92d4010 	push	{r4, lr}
   105c0:	e1a04000 	mov	r4, r0
   105c4:	e59f300c 	ldr	r3, [pc, #12]	; 105d8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   105c8:	e5803000 	str	r3, [r0]
   105cc:	eb001c33 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   105d0:	e1a00004 	mov	r0, r4
   105d4:	e8bd8010 	pop	{r4, pc}
   105d8:	00041ddc 	.word	0x00041ddc

000105dc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   105dc:	e92d4010 	push	{r4, lr}
   105e0:	e1a04000 	mov	r4, r0
   105e4:	e59f3018 	ldr	r3, [pc, #24]	; 10604 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   105e8:	e5803000 	str	r3, [r0]
   105ec:	eb001c2b 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   105f0:	e1a00004 	mov	r0, r4
   105f4:	e3a01f4d 	mov	r1, #308	; 0x134
   105f8:	eb0068db 	bl	2a96c <operator delete(void*, unsigned int)>
   105fc:	e1a00004 	mov	r0, r4
   10600:	e8bd8010 	pop	{r4, pc}
   10604:	00041ddc 	.word	0x00041ddc

00010608 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   10608:	e5d13000 	ldrb	r3, [r1]
   1060c:	e3530030 	cmp	r3, #48	; 0x30
   10610:	1a00005e 	bne	10790 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   10614:	e3a02000 	mov	r2, #0
   10618:	e5d13003 	ldrb	r3, [r1, #3]
   1061c:	e5802108 	str	r2, [r0, #264]	; 0x108
   10620:	e3130001 	tst	r3, #1
   10624:	13a02080 	movne	r2, #128	; 0x80
   10628:	15802108 	strne	r2, [r0, #264]	; 0x108
   1062c:	e3130002 	tst	r3, #2
   10630:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10634:	13822b01 	orrne	r2, r2, #1024	; 0x400
   10638:	15802108 	strne	r2, [r0, #264]	; 0x108
   1063c:	e3130004 	tst	r3, #4
   10640:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10644:	13822c01 	orrne	r2, r2, #256	; 0x100
   10648:	15802108 	strne	r2, [r0, #264]	; 0x108
   1064c:	e3130008 	tst	r3, #8
   10650:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10654:	13822c02 	orrne	r2, r2, #512	; 0x200
   10658:	15802108 	strne	r2, [r0, #264]	; 0x108
   1065c:	e3130040 	tst	r3, #64	; 0x40
   10660:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10664:	13822040 	orrne	r2, r2, #64	; 0x40
   10668:	15802108 	strne	r2, [r0, #264]	; 0x108
   1066c:	e3130080 	tst	r3, #128	; 0x80
   10670:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10674:	13833010 	orrne	r3, r3, #16
   10678:	15803108 	strne	r3, [r0, #264]	; 0x108
   1067c:	e5d13004 	ldrb	r3, [r1, #4]
   10680:	e3130001 	tst	r3, #1
   10684:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10688:	13822702 	orrne	r2, r2, #524288	; 0x80000
   1068c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10690:	e3130002 	tst	r3, #2
   10694:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10698:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   1069c:	15802108 	strne	r2, [r0, #264]	; 0x108
   106a0:	e3130004 	tst	r3, #4
   106a4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   106a8:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   106ac:	15802108 	strne	r2, [r0, #264]	; 0x108
   106b0:	e3130008 	tst	r3, #8
   106b4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   106b8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   106bc:	15802108 	strne	r2, [r0, #264]	; 0x108
   106c0:	e3130010 	tst	r3, #16
   106c4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   106c8:	13822001 	orrne	r2, r2, #1
   106cc:	15802108 	strne	r2, [r0, #264]	; 0x108
   106d0:	e3130020 	tst	r3, #32
   106d4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   106d8:	13833b02 	orrne	r3, r3, #2048	; 0x800
   106dc:	15803108 	strne	r3, [r0, #264]	; 0x108
   106e0:	e5d13005 	ldrb	r3, [r1, #5]
   106e4:	e3130001 	tst	r3, #1
   106e8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   106ec:	13822802 	orrne	r2, r2, #131072	; 0x20000
   106f0:	15802108 	strne	r2, [r0, #264]	; 0x108
   106f4:	e3130002 	tst	r3, #2
   106f8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   106fc:	13822902 	orrne	r2, r2, #32768	; 0x8000
   10700:	15802108 	strne	r2, [r0, #264]	; 0x108
   10704:	e3130004 	tst	r3, #4
   10708:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1070c:	13822801 	orrne	r2, r2, #65536	; 0x10000
   10710:	15802108 	strne	r2, [r0, #264]	; 0x108
   10714:	e3130008 	tst	r3, #8
   10718:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1071c:	13822701 	orrne	r2, r2, #262144	; 0x40000
   10720:	15802108 	strne	r2, [r0, #264]	; 0x108
   10724:	e3130040 	tst	r3, #64	; 0x40
   10728:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1072c:	13822020 	orrne	r2, r2, #32
   10730:	15802108 	strne	r2, [r0, #264]	; 0x108
   10734:	e3130080 	tst	r3, #128	; 0x80
   10738:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1073c:	13833008 	orrne	r3, r3, #8
   10740:	15803108 	strne	r3, [r0, #264]	; 0x108
   10744:	e5d12007 	ldrb	r2, [r1, #7]
   10748:	e5d13006 	ldrb	r3, [r1, #6]
   1074c:	e1833402 	orr	r3, r3, r2, lsl #8
   10750:	e1a03243 	asr	r3, r3, #4
   10754:	e6ef3073 	uxtb	r3, r3
   10758:	e5803028 	str	r3, [r0, #40]	; 0x28
   1075c:	e5d13008 	ldrb	r3, [r1, #8]
   10760:	e26330ff 	rsb	r3, r3, #255	; 0xff
   10764:	e5803034 	str	r3, [r0, #52]	; 0x34
   10768:	e5d13009 	ldrb	r3, [r1, #9]
   1076c:	e5d1200a 	ldrb	r2, [r1, #10]
   10770:	e1833402 	orr	r3, r3, r2, lsl #8
   10774:	e1a03243 	asr	r3, r3, #4
   10778:	e6ef3073 	uxtb	r3, r3
   1077c:	e5803040 	str	r3, [r0, #64]	; 0x40
   10780:	e5d1300b 	ldrb	r3, [r1, #11]
   10784:	e26330ff 	rsb	r3, r3, #255	; 0xff
   10788:	e580304c 	str	r3, [r0, #76]	; 0x4c
   1078c:	e12fff1e 	bx	lr
   10790:	e92d4010 	push	{r4, lr}
   10794:	e1a04001 	mov	r4, r1
   10798:	e24dd008 	sub	sp, sp, #8
   1079c:	eb00573b 	bl	26490 <CLogger::Get()>
   107a0:	e5d42000 	ldrb	r2, [r4]
   107a4:	e59f3014 	ldr	r3, [pc, #20]	; 107c0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   107a8:	e58d2000 	str	r2, [sp]
   107ac:	e59f1010 	ldr	r1, [pc, #16]	; 107c4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   107b0:	e3a02003 	mov	r2, #3
   107b4:	eb005672 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   107b8:	e28dd008 	add	sp, sp, #8
   107bc:	e8bd8010 	pop	{r4, pc}
   107c0:	00041e48 	.word	0x00041e48
   107c4:	00041e20 	.word	0x00041e20

000107c8 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   107c8:	e92d4070 	push	{r4, r5, r6, lr}
   107cc:	e1a05000 	mov	r5, r0
   107d0:	e1a06001 	mov	r6, r1
   107d4:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   107d8:	e24dd010 	sub	sp, sp, #16
   107dc:	e59f4058 	ldr	r4, [pc, #88]	; 1083c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   107e0:	e2832001 	add	r2, r3, #1
   107e4:	e28de004 	add	lr, sp, #4
   107e8:	e203c00f 	and	ip, r3, #15
   107ec:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   107f0:	e3a03000 	mov	r3, #0
   107f4:	e8940007 	ldm	r4, {r0, r1, r2}
   107f8:	e88e0007 	stm	lr, {r0, r1, r2}
   107fc:	e1a00005 	mov	r0, r5
   10800:	e1a0100e 	mov	r1, lr
   10804:	e3a0200c 	mov	r2, #12
   10808:	e5cdc005 	strb	ip, [sp, #5]
   1080c:	e5cd600f 	strb	r6, [sp, #15]
   10810:	eb00041e 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10814:	e2505000 	subs	r5, r0, #0
   10818:	1a000004 	bne	10830 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   1081c:	eb00571b 	bl	26490 <CLogger::Get()>
   10820:	e2441010 	sub	r1, r4, #16
   10824:	e59f3014 	ldr	r3, [pc, #20]	; 10840 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   10828:	e3a02001 	mov	r2, #1
   1082c:	eb005654 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10830:	e1a00005 	mov	r0, r5
   10834:	e28dd010 	add	sp, sp, #16
   10838:	e8bd8070 	pop	{r4, r5, r6, pc}
   1083c:	00041e30 	.word	0x00041e30
   10840:	00041e64 	.word	0x00041e64

00010844 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   10844:	e92d4010 	push	{r4, lr}
   10848:	e1a0e001 	mov	lr, r1
   1084c:	e24dd010 	sub	sp, sp, #16
   10850:	e59f20cc 	ldr	r2, [pc, #204]	; 10924 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   10854:	e28d3004 	add	r3, sp, #4
   10858:	e1a0c000 	mov	ip, r0
   1085c:	e8920007 	ldm	r2, {r0, r1, r2}
   10860:	e8a30003 	stmia	r3!, {r0, r1}
   10864:	e35e0001 	cmp	lr, #1
   10868:	e1c320b0 	strh	r2, [r3]
   1086c:	0a000023 	beq	10900 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   10870:	3a000007 	bcc	10894 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   10874:	e35e0002 	cmp	lr, #2
   10878:	1a00001c 	bne	108f0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   1087c:	e3a01020 	mov	r1, #32
   10880:	e3a02062 	mov	r2, #98	; 0x62
   10884:	e3e03000 	mvn	r3, #0
   10888:	e5cd1007 	strb	r1, [sp, #7]
   1088c:	e5cd2008 	strb	r2, [sp, #8]
   10890:	e5cd3009 	strb	r3, [sp, #9]
   10894:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   10898:	e1a0000c 	mov	r0, ip
   1089c:	e2832001 	add	r2, r3, #1
   108a0:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   108a4:	e28d1004 	add	r1, sp, #4
   108a8:	e203c00f 	and	ip, r3, #15
   108ac:	e3a0200a 	mov	r2, #10
   108b0:	e3a03000 	mov	r3, #0
   108b4:	e5cdc005 	strb	ip, [sp, #5]
   108b8:	eb0003f4 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   108bc:	e2504000 	subs	r4, r0, #0
   108c0:	0a000002 	beq	108d0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   108c4:	e1a00004 	mov	r0, r4
   108c8:	e28dd010 	add	sp, sp, #16
   108cc:	e8bd8010 	pop	{r4, pc}
   108d0:	eb0056ee 	bl	26490 <CLogger::Get()>
   108d4:	e59f304c 	ldr	r3, [pc, #76]	; 10928 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   108d8:	e3a02001 	mov	r2, #1
   108dc:	e59f1048 	ldr	r1, [pc, #72]	; 1092c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   108e0:	eb005627 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   108e4:	e1a00004 	mov	r0, r4
   108e8:	e28dd010 	add	sp, sp, #16
   108ec:	e8bd8010 	pop	{r4, pc}
   108f0:	e3a04001 	mov	r4, #1
   108f4:	e1a00004 	mov	r0, r4
   108f8:	e28dd010 	add	sp, sp, #16
   108fc:	e8bd8010 	pop	{r4, pc}
   10900:	e3e00067 	mvn	r0, #103	; 0x67
   10904:	e3a01020 	mov	r1, #32
   10908:	e3a02062 	mov	r2, #98	; 0x62
   1090c:	e3e03000 	mvn	r3, #0
   10910:	e5cd000a 	strb	r0, [sp, #10]
   10914:	e5cd100b 	strb	r1, [sp, #11]
   10918:	e5cd200c 	strb	r2, [sp, #12]
   1091c:	e5cd300d 	strb	r3, [sp, #13]
   10920:	eaffffdb 	b	10894 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   10924:	00041e3c 	.word	0x00041e3c
   10928:	00041e78 	.word	0x00041e78
   1092c:	00041e20 	.word	0x00041e20

00010930 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   10930:	e92d4010 	push	{r4, lr}
   10934:	e1a04000 	mov	r4, r0
   10938:	eb001b46 	bl	17658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1093c:	e3a03000 	mov	r3, #0
   10940:	e59f2024 	ldr	r2, [pc, #36]	; 1096c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   10944:	e1a00004 	mov	r0, r4
   10948:	e5842000 	str	r2, [r4]
   1094c:	e3a01003 	mov	r1, #3
   10950:	e1a02003 	mov	r2, r3
   10954:	ebfff93b 	bl	ee48 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10958:	e3a03000 	mov	r3, #0
   1095c:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   10960:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   10964:	e1a00004 	mov	r0, r4
   10968:	e8bd8010 	pop	{r4, pc}
   1096c:	00041ddc 	.word	0x00041ddc

00010970 <CUSBGamePadSwitchProDevice::Configure()>:
   10970:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10974:	e28db01c 	add	fp, sp, #28
   10978:	e24dd010 	sub	sp, sp, #16
   1097c:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   10980:	e3550000 	cmp	r5, #0
   10984:	0a00003e 	beq	10a84 <CUSBGamePadSwitchProDevice::Configure()+0x114>
   10988:	e3a03040 	mov	r3, #64	; 0x40
   1098c:	e2807f4a 	add	r7, r0, #296	; 0x128
   10990:	e1c730b0 	strh	r3, [r7]
   10994:	e1a04000 	mov	r4, r0
   10998:	eb001b03 	bl	175ac <CUSBGamePadDevice::Configure()>
   1099c:	e2505000 	subs	r5, r0, #0
   109a0:	0a00003c 	beq	10a98 <CUSBGamePadSwitchProDevice::Configure()+0x128>
   109a4:	e3a03012 	mov	r3, #18
   109a8:	e3a06000 	mov	r6, #0
   109ac:	e3a000ff 	mov	r0, #255	; 0xff
   109b0:	e3a0c004 	mov	ip, #4
   109b4:	e1d720b0 	ldrh	r2, [r7]
   109b8:	e5843104 	str	r3, [r4, #260]	; 0x104
   109bc:	e2823007 	add	r3, r2, #7
   109c0:	e3c33007 	bic	r3, r3, #7
   109c4:	e04dd003 	sub	sp, sp, r3
   109c8:	e1a0100d 	mov	r1, sp
   109cc:	e1a03006 	mov	r3, r6
   109d0:	e584c024 	str	ip, [r4, #36]	; 0x24
   109d4:	e5840030 	str	r0, [r4, #48]	; 0x30
   109d8:	e584003c 	str	r0, [r4, #60]	; 0x3c
   109dc:	e5840048 	str	r0, [r4, #72]	; 0x48
   109e0:	e5840054 	str	r0, [r4, #84]	; 0x54
   109e4:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   109e8:	e584602c 	str	r6, [r4, #44]	; 0x2c
   109ec:	e5846038 	str	r6, [r4, #56]	; 0x38
   109f0:	e5846044 	str	r6, [r4, #68]	; 0x44
   109f4:	e5846050 	str	r6, [r4, #80]	; 0x50
   109f8:	e1a00004 	mov	r0, r4
   109fc:	eb000400 	bl	11a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10a00:	e3e0807f 	mvn	r8, #127	; 0x7f
   10a04:	e3a0c003 	mov	ip, #3
   10a08:	e1a03006 	mov	r3, r6
   10a0c:	e3a02002 	mov	r2, #2
   10a10:	e24b1028 	sub	r1, fp, #40	; 0x28
   10a14:	e1a00004 	mov	r0, r4
   10a18:	e54b8028 	strb	r8, [fp, #-40]	; 0xffffffd8
   10a1c:	e54bc027 	strb	ip, [fp, #-39]	; 0xffffffd9
   10a20:	eb00039a 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10a24:	e2505000 	subs	r5, r0, #0
   10a28:	0a000022 	beq	10ab8 <CUSBGamePadSwitchProDevice::Configure()+0x148>
   10a2c:	e1a03006 	mov	r3, r6
   10a30:	e1d720b0 	ldrh	r2, [r7]
   10a34:	e1a0100d 	mov	r1, sp
   10a38:	e1a00004 	mov	r0, r4
   10a3c:	eb0003f0 	bl	11a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10a40:	e3500000 	cmp	r0, #0
   10a44:	da000041 	ble	10b50 <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   10a48:	e5dd3000 	ldrb	r3, [sp]
   10a4c:	e3530081 	cmp	r3, #129	; 0x81
   10a50:	1a000002 	bne	10a60 <CUSBGamePadSwitchProDevice::Configure()+0xf0>
   10a54:	e5dd3001 	ldrb	r3, [sp, #1]
   10a58:	e3530003 	cmp	r3, #3
   10a5c:	0a00001d 	beq	10ad8 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   10a60:	eb00568a 	bl	26490 <CLogger::Get()>
   10a64:	e59f31d0 	ldr	r3, [pc, #464]	; 10c3c <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   10a68:	e3a02001 	mov	r2, #1
   10a6c:	e59f11cc 	ldr	r1, [pc, #460]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10a70:	eb0055c3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a74:	e3a05000 	mov	r5, #0
   10a78:	e1a00005 	mov	r0, r5
   10a7c:	e24bd01c 	sub	sp, fp, #28
   10a80:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10a84:	e59f11b4 	ldr	r1, [pc, #436]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10a88:	ebfff8db 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   10a8c:	e1a00005 	mov	r0, r5
   10a90:	e24bd01c 	sub	sp, fp, #28
   10a94:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10a98:	eb00567c 	bl	26490 <CLogger::Get()>
   10a9c:	e59f31a0 	ldr	r3, [pc, #416]	; 10c44 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   10aa0:	e3a02001 	mov	r2, #1
   10aa4:	e59f1194 	ldr	r1, [pc, #404]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10aa8:	eb0055b5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10aac:	e1a00005 	mov	r0, r5
   10ab0:	e24bd01c 	sub	sp, fp, #28
   10ab4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10ab8:	eb005674 	bl	26490 <CLogger::Get()>
   10abc:	e59f3178 	ldr	r3, [pc, #376]	; 10c3c <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   10ac0:	e3a02001 	mov	r2, #1
   10ac4:	e59f1174 	ldr	r1, [pc, #372]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10ac8:	eb0055ad 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10acc:	e1a00005 	mov	r0, r5
   10ad0:	e24bd01c 	sub	sp, fp, #28
   10ad4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10ad8:	e3a0c002 	mov	ip, #2
   10adc:	e1a03006 	mov	r3, r6
   10ae0:	e1a0200c 	mov	r2, ip
   10ae4:	e24b1024 	sub	r1, fp, #36	; 0x24
   10ae8:	e1a00004 	mov	r0, r4
   10aec:	e54b8024 	strb	r8, [fp, #-36]	; 0xffffffdc
   10af0:	e54bc023 	strb	ip, [fp, #-35]	; 0xffffffdd
   10af4:	eb000365 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10af8:	e2505000 	subs	r5, r0, #0
   10afc:	0a00001a 	beq	10b6c <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   10b00:	e1a03006 	mov	r3, r6
   10b04:	e1d720b0 	ldrh	r2, [r7]
   10b08:	e1a0100d 	mov	r1, sp
   10b0c:	e1a00004 	mov	r0, r4
   10b10:	eb0003bb 	bl	11a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10b14:	e3500000 	cmp	r0, #0
   10b18:	da000034 	ble	10bf0 <CUSBGamePadSwitchProDevice::Configure()+0x280>
   10b1c:	e5dd3000 	ldrb	r3, [sp]
   10b20:	e3530081 	cmp	r3, #129	; 0x81
   10b24:	1a000002 	bne	10b34 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   10b28:	e5dd3001 	ldrb	r3, [sp, #1]
   10b2c:	e3530002 	cmp	r3, #2
   10b30:	0a000013 	beq	10b84 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   10b34:	eb005655 	bl	26490 <CLogger::Get()>
   10b38:	e59f3108 	ldr	r3, [pc, #264]	; 10c48 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   10b3c:	e3a02001 	mov	r2, #1
   10b40:	e59f10f8 	ldr	r1, [pc, #248]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10b44:	eb00558e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b48:	e3a05000 	mov	r5, #0
   10b4c:	eaffffc9 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10b50:	eb00564e 	bl	26490 <CLogger::Get()>
   10b54:	e59f30f0 	ldr	r3, [pc, #240]	; 10c4c <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   10b58:	e3a02001 	mov	r2, #1
   10b5c:	e59f10dc 	ldr	r1, [pc, #220]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10b60:	e1a05006 	mov	r5, r6
   10b64:	eb005586 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b68:	eaffffc2 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10b6c:	eb005647 	bl	26490 <CLogger::Get()>
   10b70:	e59f30d0 	ldr	r3, [pc, #208]	; 10c48 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   10b74:	e3a02001 	mov	r2, #1
   10b78:	e59f10c0 	ldr	r1, [pc, #192]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10b7c:	eb005580 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b80:	eaffffbc 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10b84:	e3e0e07f 	mvn	lr, #127	; 0x7f
   10b88:	e3a0c004 	mov	ip, #4
   10b8c:	e3a03000 	mov	r3, #0
   10b90:	e3a02002 	mov	r2, #2
   10b94:	e24b1020 	sub	r1, fp, #32
   10b98:	e1a00004 	mov	r0, r4
   10b9c:	e54be020 	strb	lr, [fp, #-32]	; 0xffffffe0
   10ba0:	e54bc01f 	strb	ip, [fp, #-31]	; 0xffffffe1
   10ba4:	eb000339 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10ba8:	e2505000 	subs	r5, r0, #0
   10bac:	0a000016 	beq	10c0c <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   10bb0:	e5943000 	ldr	r3, [r4]
   10bb4:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   10bb8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   10bbc:	e1a00004 	mov	r0, r4
   10bc0:	e12fff33 	blx	r3
   10bc4:	e1d720b0 	ldrh	r2, [r7]
   10bc8:	e1a0100d 	mov	r1, sp
   10bcc:	e3a03000 	mov	r3, #0
   10bd0:	e1a00004 	mov	r0, r4
   10bd4:	eb00038a 	bl	11a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10bd8:	e3500000 	cmp	r0, #0
   10bdc:	da000010 	ble	10c24 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   10be0:	e1a00004 	mov	r0, r4
   10be4:	eb0003b3 	bl	11ab8 <CUSBHIDDevice::StartRequest()>
   10be8:	e1a05000 	mov	r5, r0
   10bec:	eaffffa1 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10bf0:	eb005626 	bl	26490 <CLogger::Get()>
   10bf4:	e59f3054 	ldr	r3, [pc, #84]	; 10c50 <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   10bf8:	e3a02001 	mov	r2, #1
   10bfc:	e59f103c 	ldr	r1, [pc, #60]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10c00:	e1a05006 	mov	r5, r6
   10c04:	eb00555e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c08:	eaffff9a 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10c0c:	eb00561f 	bl	26490 <CLogger::Get()>
   10c10:	e59f303c 	ldr	r3, [pc, #60]	; 10c54 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   10c14:	e3a02001 	mov	r2, #1
   10c18:	e59f1020 	ldr	r1, [pc, #32]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10c1c:	eb005558 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c20:	eaffff94 	b	10a78 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10c24:	eb005619 	bl	26490 <CLogger::Get()>
   10c28:	e59f3028 	ldr	r3, [pc, #40]	; 10c58 <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   10c2c:	e3a02001 	mov	r2, #1
   10c30:	e59f1008 	ldr	r1, [pc, #8]	; 10c40 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10c34:	eb005552 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c38:	eaffffe8 	b	10be0 <CUSBGamePadSwitchProDevice::Configure()+0x270>
   10c3c:	00041e90 	.word	0x00041e90
   10c40:	00041e20 	.word	0x00041e20
   10c44:	00041be0 	.word	0x00041be0
   10c48:	00041ed0 	.word	0x00041ed0
   10c4c:	00041eb0 	.word	0x00041eb0
   10c50:	00041eec 	.word	0x00041eec
   10c54:	00041f08 	.word	0x00041f08
   10c58:	00041f28 	.word	0x00041f28

00010c5c <CUSBGamePadSwitchProDevice::GetProperties()>:
   10c5c:	e3a0004b 	mov	r0, #75	; 0x4b
   10c60:	e12fff1e 	bx	lr

00010c64 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   10c64:	e92d4010 	push	{r4, lr}
   10c68:	e1a04000 	mov	r4, r0
   10c6c:	e59f300c 	ldr	r3, [pc, #12]	; 10c80 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   10c70:	e5803000 	str	r3, [r0]
   10c74:	eb001a89 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10c78:	e1a00004 	mov	r0, r4
   10c7c:	e8bd8010 	pop	{r4, pc}
   10c80:	00041f4c 	.word	0x00041f4c

00010c84 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   10c84:	e92d4010 	push	{r4, lr}
   10c88:	e1a04000 	mov	r4, r0
   10c8c:	e59f3018 	ldr	r3, [pc, #24]	; 10cac <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   10c90:	e5803000 	str	r3, [r0]
   10c94:	eb001a81 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10c98:	e1a00004 	mov	r0, r4
   10c9c:	e3a01e13 	mov	r1, #304	; 0x130
   10ca0:	eb006731 	bl	2a96c <operator delete(void*, unsigned int)>
   10ca4:	e1a00004 	mov	r0, r4
   10ca8:	e8bd8010 	pop	{r4, pc}
   10cac:	00041f4c 	.word	0x00041f4c

00010cb0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   10cb0:	e3510000 	cmp	r1, #0
   10cb4:	e92d4010 	push	{r4, lr}
   10cb8:	0a00003b 	beq	10dac <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   10cbc:	e5d13000 	ldrb	r3, [r1]
   10cc0:	e5d12001 	ldrb	r2, [r1, #1]
   10cc4:	e1833402 	orr	r3, r3, r2, lsl #8
   10cc8:	e3530b05 	cmp	r3, #5120	; 0x1400
   10ccc:	1a00003a 	bne	10dbc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   10cd0:	e3a0e000 	mov	lr, #0
   10cd4:	e5d1c003 	ldrb	ip, [r1, #3]
   10cd8:	e5d12002 	ldrb	r2, [r1, #2]
   10cdc:	e59f30e8 	ldr	r3, [pc, #232]	; 10dcc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x11c>
   10ce0:	e182240c 	orr	r2, r2, ip, lsl #8
   10ce4:	e580e108 	str	lr, [r0, #264]	; 0x108
   10ce8:	e283c040 	add	ip, r3, #64	; 0x40
   10cec:	e3120001 	tst	r2, #1
   10cf0:	15934000 	ldrne	r4, [r3]
   10cf4:	1590e108 	ldrne	lr, [r0, #264]	; 0x108
   10cf8:	e2833004 	add	r3, r3, #4
   10cfc:	118ee004 	orrne	lr, lr, r4
   10d00:	1580e108 	strne	lr, [r0, #264]	; 0x108
   10d04:	e15c0003 	cmp	ip, r3
   10d08:	e1a020a2 	lsr	r2, r2, #1
   10d0c:	1afffff6 	bne	10cec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   10d10:	e3a0e000 	mov	lr, #0
   10d14:	e1a0200e 	mov	r2, lr
   10d18:	e5d13006 	ldrb	r3, [r1, #6]
   10d1c:	e5d14007 	ldrb	r4, [r1, #7]
   10d20:	e1833404 	orr	r3, r3, r4, lsl #8
   10d24:	e6bf3073 	sxth	r3, r3
   10d28:	e2833902 	add	r3, r3, #32768	; 0x8000
   10d2c:	e1a03423 	lsr	r3, r3, #8
   10d30:	e0822082 	add	r2, r2, r2, lsl #1
   10d34:	e28ee001 	add	lr, lr, #1
   10d38:	e0802102 	add	r2, r0, r2, lsl #2
   10d3c:	e35e0004 	cmp	lr, #4
   10d40:	e5823028 	str	r3, [r2, #40]	; 0x28
   10d44:	0a00000b 	beq	10d78 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xc8>
   10d48:	e081208e 	add	r2, r1, lr, lsl #1
   10d4c:	e5d24007 	ldrb	r4, [r2, #7]
   10d50:	e5d23006 	ldrb	r3, [r2, #6]
   10d54:	e79c210e 	ldr	r2, [ip, lr, lsl #2]
   10d58:	e1833404 	orr	r3, r3, r4, lsl #8
   10d5c:	e6bf3073 	sxth	r3, r3
   10d60:	e3c24002 	bic	r4, r2, #2
   10d64:	e2833902 	add	r3, r3, #32768	; 0x8000
   10d68:	e3540001 	cmp	r4, #1
   10d6c:	e1a03423 	lsr	r3, r3, #8
   10d70:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   10d74:	eaffffed 	b	10d30 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x80>
   10d78:	e5d13004 	ldrb	r3, [r1, #4]
   10d7c:	e353007f 	cmp	r3, #127	; 0x7f
   10d80:	e5803058 	str	r3, [r0, #88]	; 0x58
   10d84:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   10d88:	c3833008 	orrgt	r3, r3, #8
   10d8c:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   10d90:	e5d13005 	ldrb	r3, [r1, #5]
   10d94:	e353007f 	cmp	r3, #127	; 0x7f
   10d98:	e5803064 	str	r3, [r0, #100]	; 0x64
   10d9c:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   10da0:	c3833010 	orrgt	r3, r3, #16
   10da4:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   10da8:	e8bd8010 	pop	{r4, pc}
   10dac:	e3a02077 	mov	r2, #119	; 0x77
   10db0:	e59f1018 	ldr	r1, [pc, #24]	; 10dd0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   10db4:	e59f0018 	ldr	r0, [pc, #24]	; 10dd4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   10db8:	eb004cc1 	bl	240c4 <assertion_failed>
   10dbc:	e3a02078 	mov	r2, #120	; 0x78
   10dc0:	e59f1008 	ldr	r1, [pc, #8]	; 10dd0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   10dc4:	e59f000c 	ldr	r0, [pc, #12]	; 10dd8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   10dc8:	eb004cbd 	bl	240c4 <assertion_failed>
   10dcc:	00041f90 	.word	0x00041f90
   10dd0:	00042000 	.word	0x00042000
   10dd4:	00041c3c 	.word	0x00041c3c
   10dd8:	00042018 	.word	0x00042018

00010ddc <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   10ddc:	e2913000 	adds	r3, r1, #0
   10de0:	13a03001 	movne	r3, #1
   10de4:	e352000e 	cmp	r2, #14
   10de8:	13a03000 	movne	r3, #0
   10dec:	e2532000 	subs	r2, r3, #0
   10df0:	012fff1e 	bxeq	lr
   10df4:	e5d1c000 	ldrb	ip, [r1]
   10df8:	e35c0000 	cmp	ip, #0
   10dfc:	112fff1e 	bxne	lr
   10e00:	e5d13001 	ldrb	r3, [r1, #1]
   10e04:	e3530014 	cmp	r3, #20
   10e08:	112fff1e 	bxne	lr
   10e0c:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   10e10:	e92d4070 	push	{r4, r5, r6, lr}
   10e14:	e3530000 	cmp	r3, #0
   10e18:	e1a04000 	mov	r4, r0
   10e1c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10e20:	e1a05000 	mov	r5, r0
   10e24:	e4953024 	ldr	r3, [r5], #36	; 0x24
   10e28:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10e2c:	e12fff33 	blx	r3
   10e30:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10e34:	e1a01005 	mov	r1, r5
   10e38:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   10e3c:	e2400001 	sub	r0, r0, #1
   10e40:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e44:	e12fff13 	bx	r3

00010e48 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   10e48:	e3510004 	cmp	r1, #4
   10e4c:	9a000001 	bls	10e58 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   10e50:	e3a00000 	mov	r0, #0
   10e54:	e12fff1e 	bx	lr
   10e58:	e3a0c003 	mov	ip, #3
   10e5c:	e92d4010 	push	{r4, lr}
   10e60:	e3a0e001 	mov	lr, #1
   10e64:	e59f302c 	ldr	r3, [pc, #44]	; 10e98 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   10e68:	e24dd008 	sub	sp, sp, #8
   10e6c:	e0831001 	add	r1, r3, r1
   10e70:	e5d140a4 	ldrb	r4, [r1, #164]	; 0xa4
   10e74:	e1a0200c 	mov	r2, ip
   10e78:	e3a03000 	mov	r3, #0
   10e7c:	e28d1004 	add	r1, sp, #4
   10e80:	e5cd4006 	strb	r4, [sp, #6]
   10e84:	e5cdc005 	strb	ip, [sp, #5]
   10e88:	e5cde004 	strb	lr, [sp, #4]
   10e8c:	eb00027f 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10e90:	e28dd008 	add	sp, sp, #8
   10e94:	e8bd8010 	pop	{r4, pc}
   10e98:	00041f44 	.word	0x00041f44

00010e9c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   10e9c:	e92d4030 	push	{r4, r5, lr}
   10ea0:	e24dd00c 	sub	sp, sp, #12
   10ea4:	e1a04001 	mov	r4, r1
   10ea8:	e1a05000 	mov	r5, r0
   10eac:	e3a02008 	mov	r2, #8
   10eb0:	e1a0000d 	mov	r0, sp
   10eb4:	e3a01000 	mov	r1, #0
   10eb8:	eb00624d 	bl	297f4 <memset>
   10ebc:	e3a03008 	mov	r3, #8
   10ec0:	e3540001 	cmp	r4, #1
   10ec4:	e5cd3001 	strb	r3, [sp, #1]
   10ec8:	0a00000f 	beq	10f0c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   10ecc:	3a000003 	bcc	10ee0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   10ed0:	e3540002 	cmp	r4, #2
   10ed4:	1a000008 	bne	10efc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   10ed8:	e3e03000 	mvn	r3, #0
   10edc:	e5cd3003 	strb	r3, [sp, #3]
   10ee0:	e1a0100d 	mov	r1, sp
   10ee4:	e1a00005 	mov	r0, r5
   10ee8:	e3a03000 	mov	r3, #0
   10eec:	e3a02008 	mov	r2, #8
   10ef0:	eb000266 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10ef4:	e28dd00c 	add	sp, sp, #12
   10ef8:	e8bd8030 	pop	{r4, r5, pc}
   10efc:	e3a020e5 	mov	r2, #229	; 0xe5
   10f00:	e59f1010 	ldr	r1, [pc, #16]	; 10f18 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   10f04:	e59f0010 	ldr	r0, [pc, #16]	; 10f1c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   10f08:	eb004c6d 	bl	240c4 <assertion_failed>
   10f0c:	e3e03000 	mvn	r3, #0
   10f10:	e5cd3004 	strb	r3, [sp, #4]
   10f14:	eafffff1 	b	10ee0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   10f18:	00042000 	.word	0x00042000
   10f1c:	000414b4 	.word	0x000414b4

00010f20 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   10f20:	e92d4010 	push	{r4, lr}
   10f24:	e1a04000 	mov	r4, r0
   10f28:	eb0019ca 	bl	17658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10f2c:	e59f3008 	ldr	r3, [pc, #8]	; 10f3c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   10f30:	e1a00004 	mov	r0, r4
   10f34:	e5843000 	str	r3, [r4]
   10f38:	e8bd8010 	pop	{r4, pc}
   10f3c:	00041f4c 	.word	0x00041f4c

00010f40 <CUSBGamePadXbox360Device::Configure()>:
   10f40:	e3a0200e 	mov	r2, #14
   10f44:	e2803f4a 	add	r3, r0, #296	; 0x128
   10f48:	e92d4070 	push	{r4, r5, r6, lr}
   10f4c:	e1c320b0 	strh	r2, [r3]
   10f50:	e1a04000 	mov	r4, r0
   10f54:	eb001994 	bl	175ac <CUSBGamePadDevice::Configure()>
   10f58:	e2505000 	subs	r5, r0, #0
   10f5c:	0a00001e 	beq	10fdc <CUSBGamePadXbox360Device::Configure()+0x9c>
   10f60:	e3a03000 	mov	r3, #0
   10f64:	e3a020ff 	mov	r2, #255	; 0xff
   10f68:	e3a0c012 	mov	ip, #18
   10f6c:	e3a00006 	mov	r0, #6
   10f70:	e5941000 	ldr	r1, [r4]
   10f74:	e5840024 	str	r0, [r4, #36]	; 0x24
   10f78:	e584302c 	str	r3, [r4, #44]	; 0x2c
   10f7c:	e5843038 	str	r3, [r4, #56]	; 0x38
   10f80:	e5843044 	str	r3, [r4, #68]	; 0x44
   10f84:	e5843050 	str	r3, [r4, #80]	; 0x50
   10f88:	e584305c 	str	r3, [r4, #92]	; 0x5c
   10f8c:	e5843068 	str	r3, [r4, #104]	; 0x68
   10f90:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10f94:	e584c104 	str	ip, [r4, #260]	; 0x104
   10f98:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   10f9c:	e5842030 	str	r2, [r4, #48]	; 0x30
   10fa0:	e584203c 	str	r2, [r4, #60]	; 0x3c
   10fa4:	e5842048 	str	r2, [r4, #72]	; 0x48
   10fa8:	e5842054 	str	r2, [r4, #84]	; 0x54
   10fac:	e5842060 	str	r2, [r4, #96]	; 0x60
   10fb0:	e584206c 	str	r2, [r4, #108]	; 0x6c
   10fb4:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   10fb8:	e1a00004 	mov	r0, r4
   10fbc:	e12fff33 	blx	r3
   10fc0:	e2505000 	subs	r5, r0, #0
   10fc4:	1a000001 	bne	10fd0 <CUSBGamePadXbox360Device::Configure()+0x90>
   10fc8:	e1a00005 	mov	r0, r5
   10fcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10fd0:	e1a00004 	mov	r0, r4
   10fd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10fd8:	ea0002b6 	b	11ab8 <CUSBHIDDevice::StartRequest()>
   10fdc:	eb00552b 	bl	26490 <CLogger::Get()>
   10fe0:	e59f3010 	ldr	r3, [pc, #16]	; 10ff8 <CUSBGamePadXbox360Device::Configure()+0xb8>
   10fe4:	e3a02001 	mov	r2, #1
   10fe8:	e59f100c 	ldr	r1, [pc, #12]	; 10ffc <CUSBGamePadXbox360Device::Configure()+0xbc>
   10fec:	eb005464 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ff0:	e1a00005 	mov	r0, r5
   10ff4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ff8:	00041be0 	.word	0x00041be0
   10ffc:	00041ff0 	.word	0x00041ff0

00011000 <CUSBGamePadXbox360Device::GetProperties()>:
   11000:	e3a0000b 	mov	r0, #11
   11004:	e12fff1e 	bx	lr

00011008 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11008:	e3a02000 	mov	r2, #0
   1100c:	e5d13004 	ldrb	r3, [r1, #4]
   11010:	e5802108 	str	r2, [r0, #264]	; 0x108
   11014:	e3130004 	tst	r3, #4
   11018:	13a02901 	movne	r2, #16384	; 0x4000
   1101c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11020:	e3130008 	tst	r3, #8
   11024:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11028:	13822b02 	orrne	r2, r2, #2048	; 0x800
   1102c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11030:	e3130010 	tst	r3, #16
   11034:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11038:	13822c02 	orrne	r2, r2, #512	; 0x200
   1103c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11040:	e3130020 	tst	r3, #32
   11044:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11048:	13822c01 	orrne	r2, r2, #256	; 0x100
   1104c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11050:	e3130040 	tst	r3, #64	; 0x40
   11054:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11058:	13822b01 	orrne	r2, r2, #1024	; 0x400
   1105c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11060:	e1b033a3 	lsrs	r3, r3, #7
   11064:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11068:	13833080 	orrne	r3, r3, #128	; 0x80
   1106c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11070:	e5d13005 	ldrb	r3, [r1, #5]
   11074:	e3130001 	tst	r3, #1
   11078:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1107c:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11080:	15802108 	strne	r2, [r0, #264]	; 0x108
   11084:	e3130002 	tst	r3, #2
   11088:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1108c:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11090:	15802108 	strne	r2, [r0, #264]	; 0x108
   11094:	e3130004 	tst	r3, #4
   11098:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1109c:	13822701 	orrne	r2, r2, #262144	; 0x40000
   110a0:	15802108 	strne	r2, [r0, #264]	; 0x108
   110a4:	e3130008 	tst	r3, #8
   110a8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   110ac:	13822801 	orrne	r2, r2, #65536	; 0x10000
   110b0:	15802108 	strne	r2, [r0, #264]	; 0x108
   110b4:	e3130010 	tst	r3, #16
   110b8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   110bc:	13822020 	orrne	r2, r2, #32
   110c0:	15802108 	strne	r2, [r0, #264]	; 0x108
   110c4:	e3130020 	tst	r3, #32
   110c8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   110cc:	13822040 	orrne	r2, r2, #64	; 0x40
   110d0:	15802108 	strne	r2, [r0, #264]	; 0x108
   110d4:	e3130040 	tst	r3, #64	; 0x40
   110d8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   110dc:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   110e0:	15802108 	strne	r2, [r0, #264]	; 0x108
   110e4:	e1b033a3 	lsrs	r3, r3, #7
   110e8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   110ec:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   110f0:	15803108 	strne	r3, [r0, #264]	; 0x108
   110f4:	e5d12007 	ldrb	r2, [r1, #7]
   110f8:	e5d13006 	ldrb	r3, [r1, #6]
   110fc:	e1833402 	orr	r3, r3, r2, lsl #8
   11100:	e1a03143 	asr	r3, r3, #2
   11104:	e353007f 	cmp	r3, #127	; 0x7f
   11108:	e5803058 	str	r3, [r0, #88]	; 0x58
   1110c:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11110:	c3833008 	orrgt	r3, r3, #8
   11114:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11118:	e5d12009 	ldrb	r2, [r1, #9]
   1111c:	e5d13008 	ldrb	r3, [r1, #8]
   11120:	e1833402 	orr	r3, r3, r2, lsl #8
   11124:	e1a03143 	asr	r3, r3, #2
   11128:	e353007f 	cmp	r3, #127	; 0x7f
   1112c:	e5803064 	str	r3, [r0, #100]	; 0x64
   11130:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11134:	c3833010 	orrgt	r3, r3, #16
   11138:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   1113c:	e5d1200b 	ldrb	r2, [r1, #11]
   11140:	e5d1300a 	ldrb	r3, [r1, #10]
   11144:	e1833402 	orr	r3, r3, r2, lsl #8
   11148:	e6bf3073 	sxth	r3, r3
   1114c:	e2833902 	add	r3, r3, #32768	; 0x8000
   11150:	e1a03423 	lsr	r3, r3, #8
   11154:	e5803028 	str	r3, [r0, #40]	; 0x28
   11158:	e5d1200d 	ldrb	r2, [r1, #13]
   1115c:	e5d1300c 	ldrb	r3, [r1, #12]
   11160:	e1833402 	orr	r3, r3, r2, lsl #8
   11164:	e6bf3073 	sxth	r3, r3
   11168:	e2833902 	add	r3, r3, #32768	; 0x8000
   1116c:	e1a03423 	lsr	r3, r3, #8
   11170:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11174:	e5803034 	str	r3, [r0, #52]	; 0x34
   11178:	e5d1200f 	ldrb	r2, [r1, #15]
   1117c:	e5d1300e 	ldrb	r3, [r1, #14]
   11180:	e1833402 	orr	r3, r3, r2, lsl #8
   11184:	e6bf3073 	sxth	r3, r3
   11188:	e2833902 	add	r3, r3, #32768	; 0x8000
   1118c:	e1a03423 	lsr	r3, r3, #8
   11190:	e5803040 	str	r3, [r0, #64]	; 0x40
   11194:	e5d13010 	ldrb	r3, [r1, #16]
   11198:	e5d12011 	ldrb	r2, [r1, #17]
   1119c:	e1833402 	orr	r3, r3, r2, lsl #8
   111a0:	e6bf3073 	sxth	r3, r3
   111a4:	e2833902 	add	r3, r3, #32768	; 0x8000
   111a8:	e1a03423 	lsr	r3, r3, #8
   111ac:	e26330ff 	rsb	r3, r3, #255	; 0xff
   111b0:	e580304c 	str	r3, [r0, #76]	; 0x4c
   111b4:	e12fff1e 	bx	lr

000111b8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   111b8:	e92d4010 	push	{r4, lr}
   111bc:	e1a04000 	mov	r4, r0
   111c0:	e59f300c 	ldr	r3, [pc, #12]	; 111d4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   111c4:	e5803000 	str	r3, [r0]
   111c8:	eb001934 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   111cc:	e1a00004 	mov	r0, r4
   111d0:	e8bd8010 	pop	{r4, pc}
   111d4:	00042044 	.word	0x00042044

000111d8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   111d8:	e92d4010 	push	{r4, lr}
   111dc:	e1a04000 	mov	r4, r0
   111e0:	e59f3018 	ldr	r3, [pc, #24]	; 11200 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   111e4:	e5803000 	str	r3, [r0]
   111e8:	eb00192c 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   111ec:	e1a00004 	mov	r0, r4
   111f0:	e3a01f4d 	mov	r1, #308	; 0x134
   111f4:	eb0065dc 	bl	2a96c <operator delete(void*, unsigned int)>
   111f8:	e1a00004 	mov	r0, r4
   111fc:	e8bd8010 	pop	{r4, pc}
   11200:	00042044 	.word	0x00042044

00011204 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11204:	e2513000 	subs	r3, r1, #0
   11208:	012fff1e 	bxeq	lr
   1120c:	e92d4030 	push	{r4, r5, lr}
   11210:	e3520006 	cmp	r2, #6
   11214:	e24dd014 	sub	sp, sp, #20
   11218:	e1a04000 	mov	r4, r0
   1121c:	e1a0c003 	mov	ip, r3
   11220:	0a00000b 	beq	11254 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   11224:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11228:	e2933000 	adds	r3, r3, #0
   1122c:	13a03001 	movne	r3, #1
   11230:	e3520012 	cmp	r2, #18
   11234:	13a03000 	movne	r3, #0
   11238:	e3530000 	cmp	r3, #0
   1123c:	0a000002 	beq	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11240:	e5dc3000 	ldrb	r3, [ip]
   11244:	e3530020 	cmp	r3, #32
   11248:	0a00001b 	beq	112bc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   1124c:	e28dd014 	add	sp, sp, #20
   11250:	e8bd8030 	pop	{r4, r5, pc}
   11254:	e5d33000 	ldrb	r3, [r3]
   11258:	e3530007 	cmp	r3, #7
   1125c:	1afffffa 	bne	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11260:	e5dc3001 	ldrb	r3, [ip, #1]
   11264:	e3530030 	cmp	r3, #48	; 0x30
   11268:	1afffff7 	bne	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1126c:	e1a0e00d 	mov	lr, sp
   11270:	e59f506c 	ldr	r5, [pc, #108]	; 112e4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11274:	e5dcc002 	ldrb	ip, [ip, #2]
   11278:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   1127c:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11280:	e1a00004 	mov	r0, r4
   11284:	e5ce3000 	strb	r3, [lr]
   11288:	e3a0200d 	mov	r2, #13
   1128c:	e3a03000 	mov	r3, #0
   11290:	e1a0100d 	mov	r1, sp
   11294:	e5cdc002 	strb	ip, [sp, #2]
   11298:	eb0001a1 	bl	11924 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   1129c:	e3500000 	cmp	r0, #0
   112a0:	1affffe9 	bne	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   112a4:	eb005479 	bl	26490 <CLogger::Get()>
   112a8:	e2851010 	add	r1, r5, #16
   112ac:	e59f3034 	ldr	r3, [pc, #52]	; 112e8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   112b0:	e3a02001 	mov	r2, #1
   112b4:	eb0053b2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   112b8:	eaffffe3 	b	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   112bc:	e1a05000 	mov	r5, r0
   112c0:	e4953024 	ldr	r3, [r5], #36	; 0x24
   112c4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   112c8:	e12fff33 	blx	r3
   112cc:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   112d0:	e1a01005 	mov	r1, r5
   112d4:	e2400001 	sub	r0, r0, #1
   112d8:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   112dc:	e12fff33 	blx	r3
   112e0:	eaffffd9 	b	1124c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   112e4:	00042088 	.word	0x00042088
   112e8:	000420c0 	.word	0x000420c0

000112ec <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   112ec:	e92d4010 	push	{r4, lr}
   112f0:	e24dd010 	sub	sp, sp, #16
   112f4:	e1a0c00d 	mov	ip, sp
   112f8:	e1a04001 	mov	r4, r1
   112fc:	e59f3070 	ldr	r3, [pc, #112]	; 11374 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   11300:	e1a0e000 	mov	lr, r0
   11304:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11308:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   1130c:	e3540001 	cmp	r4, #1
   11310:	e5cc3000 	strb	r3, [ip]
   11314:	0a000013 	beq	11368 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   11318:	3a000003 	bcc	1132c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   1131c:	e3540002 	cmp	r4, #2
   11320:	1a00000c 	bne	11358 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   11324:	e3e03000 	mvn	r3, #0
   11328:	e5cd3008 	strb	r3, [sp, #8]
   1132c:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   11330:	e1a0100d 	mov	r1, sp
   11334:	e28c3001 	add	r3, ip, #1
   11338:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   1133c:	e1a0000e 	mov	r0, lr
   11340:	e3a03000 	mov	r3, #0
   11344:	e3a0200d 	mov	r2, #13
   11348:	e5cdc002 	strb	ip, [sp, #2]
   1134c:	eb00014f 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11350:	e28dd010 	add	sp, sp, #16
   11354:	e8bd8010 	pop	{r4, pc}
   11358:	e3a020ee 	mov	r2, #238	; 0xee
   1135c:	e59f1014 	ldr	r1, [pc, #20]	; 11378 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11360:	e59f0014 	ldr	r0, [pc, #20]	; 1137c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11364:	eb004b56 	bl	240c4 <assertion_failed>
   11368:	e3e03000 	mvn	r3, #0
   1136c:	e5cd3009 	strb	r3, [sp, #9]
   11370:	eaffffed 	b	1132c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   11374:	000420a8 	.word	0x000420a8
   11378:	000420d4 	.word	0x000420d4
   1137c:	000414b4 	.word	0x000414b4

00011380 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11380:	e92d4010 	push	{r4, lr}
   11384:	e1a04000 	mov	r4, r0
   11388:	eb0018b2 	bl	17658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1138c:	e3a02000 	mov	r2, #0
   11390:	e59f300c 	ldr	r3, [pc, #12]	; 113a4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11394:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11398:	e5843000 	str	r3, [r4]
   1139c:	e1a00004 	mov	r0, r4
   113a0:	e8bd8010 	pop	{r4, pc}
   113a4:	00042044 	.word	0x00042044

000113a8 <CUSBGamePadXboxOneDevice::Configure()>:
   113a8:	e3a02040 	mov	r2, #64	; 0x40
   113ac:	e92d4070 	push	{r4, r5, r6, lr}
   113b0:	e2803f4a 	add	r3, r0, #296	; 0x128
   113b4:	e24dd008 	sub	sp, sp, #8
   113b8:	e1c320b0 	strh	r2, [r3]
   113bc:	e1a04000 	mov	r4, r0
   113c0:	eb001879 	bl	175ac <CUSBGamePadDevice::Configure()>
   113c4:	e2505000 	subs	r5, r0, #0
   113c8:	0a00002a 	beq	11478 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   113cc:	e3a03000 	mov	r3, #0
   113d0:	e3a020ff 	mov	r2, #255	; 0xff
   113d4:	e3a01010 	mov	r1, #16
   113d8:	e3a0c006 	mov	ip, #6
   113dc:	e59f60b4 	ldr	r6, [pc, #180]	; 11498 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   113e0:	e5841104 	str	r1, [r4, #260]	; 0x104
   113e4:	e5842030 	str	r2, [r4, #48]	; 0x30
   113e8:	e8960003 	ldm	r6, {r0, r1}
   113ec:	e584203c 	str	r2, [r4, #60]	; 0x3c
   113f0:	e58d0000 	str	r0, [sp]
   113f4:	e5cd1004 	strb	r1, [sp, #4]
   113f8:	e5842048 	str	r2, [r4, #72]	; 0x48
   113fc:	e5842054 	str	r2, [r4, #84]	; 0x54
   11400:	e5842060 	str	r2, [r4, #96]	; 0x60
   11404:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11408:	e584c024 	str	ip, [r4, #36]	; 0x24
   1140c:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11410:	e5843038 	str	r3, [r4, #56]	; 0x38
   11414:	e5843044 	str	r3, [r4, #68]	; 0x44
   11418:	e5843050 	str	r3, [r4, #80]	; 0x50
   1141c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11420:	e5843068 	str	r3, [r4, #104]	; 0x68
   11424:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11428:	e3a02005 	mov	r2, #5
   1142c:	e1a0100d 	mov	r1, sp
   11430:	e1a00004 	mov	r0, r4
   11434:	eb000115 	bl	11890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11438:	e2505000 	subs	r5, r0, #0
   1143c:	0a000005 	beq	11458 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11440:	e1a00004 	mov	r0, r4
   11444:	eb00019b 	bl	11ab8 <CUSBHIDDevice::StartRequest()>
   11448:	e1a05000 	mov	r5, r0
   1144c:	e1a00005 	mov	r0, r5
   11450:	e28dd008 	add	sp, sp, #8
   11454:	e8bd8070 	pop	{r4, r5, r6, pc}
   11458:	eb00540c 	bl	26490 <CLogger::Get()>
   1145c:	e2461020 	sub	r1, r6, #32
   11460:	e59f3034 	ldr	r3, [pc, #52]	; 1149c <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11464:	e3a02001 	mov	r2, #1
   11468:	eb005345 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1146c:	e1a00005 	mov	r0, r5
   11470:	e28dd008 	add	sp, sp, #8
   11474:	e8bd8070 	pop	{r4, r5, r6, pc}
   11478:	eb005404 	bl	26490 <CLogger::Get()>
   1147c:	e59f301c 	ldr	r3, [pc, #28]	; 114a0 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11480:	e3a02001 	mov	r2, #1
   11484:	e59f1018 	ldr	r1, [pc, #24]	; 114a4 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11488:	eb00533d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1148c:	e1a00005 	mov	r0, r5
   11490:	e28dd008 	add	sp, sp, #8
   11494:	e8bd8070 	pop	{r4, r5, r6, pc}
   11498:	000420b8 	.word	0x000420b8
   1149c:	000420ec 	.word	0x000420ec
   114a0:	00041be0 	.word	0x00041be0
   114a4:	00042098 	.word	0x00042098

000114a8 <CUSBGamePadXboxOneDevice::GetProperties()>:
   114a8:	e3a00009 	mov	r0, #9
   114ac:	e12fff1e 	bx	lr

000114b0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   114b0:	e92d4070 	push	{r4, r5, r6, lr}
   114b4:	e2504000 	subs	r4, r0, #0
   114b8:	0a000013 	beq	1150c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   114bc:	e1a05001 	mov	r5, r1
   114c0:	eb000a40 	bl	13dc8 <CUSBRequest::GetStatus() const>
   114c4:	e3500000 	cmp	r0, #0
   114c8:	0a000009 	beq	114f4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   114cc:	e1a00004 	mov	r0, r4
   114d0:	eb000a2c 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   114d4:	e1a00004 	mov	r0, r4
   114d8:	e3a01028 	mov	r1, #40	; 0x28
   114dc:	eb000aa2 	bl	13f6c <CUSBRequest::operator delete(void*, unsigned int)>
   114e0:	e3550000 	cmp	r5, #0
   114e4:	0a00000c 	beq	1151c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   114e8:	e1a00005 	mov	r0, r5
   114ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   114f0:	ea006517 	b	2a954 <operator delete[](void*)>
   114f4:	eb0053e5 	bl	26490 <CLogger::Get()>
   114f8:	e59f302c 	ldr	r3, [pc, #44]	; 1152c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   114fc:	e3a02002 	mov	r2, #2
   11500:	e59f1028 	ldr	r1, [pc, #40]	; 11530 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   11504:	eb00531e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11508:	eaffffef 	b	114cc <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   1150c:	e3a020af 	mov	r2, #175	; 0xaf
   11510:	e59f101c 	ldr	r1, [pc, #28]	; 11534 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   11514:	e59f001c 	ldr	r0, [pc, #28]	; 11538 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   11518:	eb004ae9 	bl	240c4 <assertion_failed>
   1151c:	e3a020b8 	mov	r2, #184	; 0xb8
   11520:	e59f100c 	ldr	r1, [pc, #12]	; 11534 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   11524:	e59f0010 	ldr	r0, [pc, #16]	; 1153c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   11528:	eb004ae5 	bl	240c4 <assertion_failed>
   1152c:	00042150 	.word	0x00042150
   11530:	00042104 	.word	0x00042104
   11534:	0004213c 	.word	0x0004213c
   11538:	000409ac 	.word	0x000409ac
   1153c:	0004216c 	.word	0x0004216c

00011540 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   11540:	e92d4070 	push	{r4, r5, r6, lr}
   11544:	e1a04000 	mov	r4, r0
   11548:	e1a05002 	mov	r5, r2
   1154c:	ebfff5a2 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11550:	e3a03000 	mov	r3, #0
   11554:	e59f2030 	ldr	r2, [pc, #48]	; 1158c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   11558:	e1550003 	cmp	r5, r3
   1155c:	e5845010 	str	r5, [r4, #16]
   11560:	e5842000 	str	r2, [r4]
   11564:	e5843014 	str	r3, [r4, #20]
   11568:	e5843018 	str	r3, [r4, #24]
   1156c:	e584301c 	str	r3, [r4, #28]
   11570:	e5843020 	str	r3, [r4, #32]
   11574:	0a000002 	beq	11584 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   11578:	e1a00005 	mov	r0, r5
   1157c:	eb0064ed 	bl	2a938 <operator new[](unsigned int)>
   11580:	e5840020 	str	r0, [r4, #32]
   11584:	e1a00004 	mov	r0, r4
   11588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1158c:	00042114 	.word	0x00042114

00011590 <CUSBHIDDevice::~CUSBHIDDevice()>:
   11590:	e92d4070 	push	{r4, r5, r6, lr}
   11594:	e1a04000 	mov	r4, r0
   11598:	e5900020 	ldr	r0, [r0, #32]
   1159c:	e59f3074 	ldr	r3, [pc, #116]	; 11618 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   115a0:	e3500000 	cmp	r0, #0
   115a4:	e5843000 	str	r3, [r4]
   115a8:	0a000000 	beq	115b0 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   115ac:	eb0064e8 	bl	2a954 <operator delete[](void*)>
   115b0:	e3a03000 	mov	r3, #0
   115b4:	e5945018 	ldr	r5, [r4, #24]
   115b8:	e5843020 	str	r3, [r4, #32]
   115bc:	e1550003 	cmp	r5, r3
   115c0:	0a000004 	beq	115d8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   115c4:	e1a00005 	mov	r0, r5
   115c8:	ebfff486 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   115cc:	e1a00005 	mov	r0, r5
   115d0:	e3a01014 	mov	r1, #20
   115d4:	eb0064e4 	bl	2a96c <operator delete(void*, unsigned int)>
   115d8:	e3a03000 	mov	r3, #0
   115dc:	e5945014 	ldr	r5, [r4, #20]
   115e0:	e5843018 	str	r3, [r4, #24]
   115e4:	e1550003 	cmp	r5, r3
   115e8:	0a000004 	beq	11600 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   115ec:	e1a00005 	mov	r0, r5
   115f0:	ebfff47c 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   115f4:	e1a00005 	mov	r0, r5
   115f8:	e3a01014 	mov	r1, #20
   115fc:	eb0064da 	bl	2a96c <operator delete(void*, unsigned int)>
   11600:	e3a03000 	mov	r3, #0
   11604:	e1a00004 	mov	r0, r4
   11608:	e5843014 	str	r3, [r4, #20]
   1160c:	ebfff4e1 	bl	e998 <CUSBFunction::~CUSBFunction()>
   11610:	e1a00004 	mov	r0, r4
   11614:	e8bd8070 	pop	{r4, r5, r6, pc}
   11618:	00042114 	.word	0x00042114

0001161c <CUSBHIDDevice::~CUSBHIDDevice()>:
   1161c:	e92d4010 	push	{r4, lr}
   11620:	e1a04000 	mov	r4, r0
   11624:	ebffffd9 	bl	11590 <CUSBHIDDevice::~CUSBHIDDevice()>
   11628:	e1a00004 	mov	r0, r4
   1162c:	e3a01024 	mov	r1, #36	; 0x24
   11630:	eb0064cd 	bl	2a96c <operator delete(void*, unsigned int)>
   11634:	e1a00004 	mov	r0, r4
   11638:	e8bd8010 	pop	{r4, pc}

0001163c <CUSBHIDDevice::Configure(unsigned int)>:
   1163c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11640:	e24dd010 	sub	sp, sp, #16
   11644:	e1a07001 	mov	r7, r1
   11648:	e1a05000 	mov	r5, r0
   1164c:	ebfff5b2 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   11650:	e2506000 	subs	r6, r0, #0
   11654:	13a06005 	movne	r6, #5
   11658:	13a08014 	movne	r8, #20
   1165c:	1a000004 	bne	11674 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11660:	ea000053 	b	117b4 <CUSBHIDDevice::Configure(unsigned int)+0x178>
   11664:	e5d43003 	ldrb	r3, [r4, #3]
   11668:	e203303f 	and	r3, r3, #63	; 0x3f
   1166c:	e3530003 	cmp	r3, #3
   11670:	0a000019 	beq	116dc <CUSBHIDDevice::Configure(unsigned int)+0xa0>
   11674:	e1a01006 	mov	r1, r6
   11678:	e1a00005 	mov	r0, r5
   1167c:	ebfff5d3 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   11680:	e2504000 	subs	r4, r0, #0
   11684:	1afffff6 	bne	11664 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   11688:	e5956014 	ldr	r6, [r5, #20]
   1168c:	e1a00005 	mov	r0, r5
   11690:	e3560000 	cmp	r6, #0
   11694:	0a000043 	beq	117a8 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   11698:	ebfff4e7 	bl	ea3c <CUSBFunction::Configure()>
   1169c:	e2506000 	subs	r6, r0, #0
   116a0:	0a00001e 	beq	11720 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   116a4:	e1a00005 	mov	r0, r5
   116a8:	ebfff627 	bl	ef4c <CUSBFunction::GetInterfaceClass() const>
   116ac:	e3500003 	cmp	r0, #3
   116b0:	0a000043 	beq	117c4 <CUSBHIDDevice::Configure(unsigned int)+0x188>
   116b4:	e5953010 	ldr	r3, [r5, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a00001f 	beq	11740 <CUSBHIDDevice::Configure(unsigned int)+0x104>
   116c0:	e5953020 	ldr	r3, [r5, #32]
   116c4:	e3530000 	cmp	r3, #0
   116c8:	1a000019 	bne	11734 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   116cc:	e3a02082 	mov	r2, #130	; 0x82
   116d0:	e59f119c 	ldr	r1, [pc, #412]	; 11874 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   116d4:	e59f019c 	ldr	r0, [pc, #412]	; 11878 <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   116d8:	eb004a79 	bl	240c4 <assertion_failed>
   116dc:	e1d430d2 	ldrsb	r3, [r4, #2]
   116e0:	e3530000 	cmp	r3, #0
   116e4:	ba000021 	blt	11770 <CUSBHIDDevice::Configure(unsigned int)+0x134>
   116e8:	e5953018 	ldr	r3, [r5, #24]
   116ec:	e1a00005 	mov	r0, r5
   116f0:	e3530000 	cmp	r3, #0
   116f4:	1a00005a 	bne	11864 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   116f8:	ebfff593 	bl	ed4c <CUSBFunction::GetDevice() const>
   116fc:	e1a0a000 	mov	sl, r0
   11700:	e1a00008 	mov	r0, r8
   11704:	eb00648a 	bl	2a934 <operator new(unsigned int)>
   11708:	e1a09000 	mov	r9, r0
   1170c:	e1a02004 	mov	r2, r4
   11710:	e1a0100a 	mov	r1, sl
   11714:	ebfff3c9 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   11718:	e5859018 	str	r9, [r5, #24]
   1171c:	eaffffd4 	b	11674 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   11720:	eb00535a 	bl	26490 <CLogger::Get()>
   11724:	e59f3150 	ldr	r3, [pc, #336]	; 1187c <CUSBHIDDevice::Configure(unsigned int)+0x240>
   11728:	e3a02001 	mov	r2, #1
   1172c:	e59f114c 	ldr	r1, [pc, #332]	; 11880 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11730:	eb005293 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11734:	e1a00006 	mov	r0, r6
   11738:	e28dd010 	add	sp, sp, #16
   1173c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11740:	e3570000 	cmp	r7, #0
   11744:	e5857010 	str	r7, [r5, #16]
   11748:	0a000041 	beq	11854 <CUSBHIDDevice::Configure(unsigned int)+0x218>
   1174c:	e5953020 	ldr	r3, [r5, #32]
   11750:	e3530000 	cmp	r3, #0
   11754:	1a00003a 	bne	11844 <CUSBHIDDevice::Configure(unsigned int)+0x208>
   11758:	e1a00007 	mov	r0, r7
   1175c:	eb006475 	bl	2a938 <operator new[](unsigned int)>
   11760:	e5850020 	str	r0, [r5, #32]
   11764:	e1a00006 	mov	r0, r6
   11768:	e28dd010 	add	sp, sp, #16
   1176c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11770:	e5953014 	ldr	r3, [r5, #20]
   11774:	e1a00005 	mov	r0, r5
   11778:	e3530000 	cmp	r3, #0
   1177c:	1a000038 	bne	11864 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   11780:	ebfff571 	bl	ed4c <CUSBFunction::GetDevice() const>
   11784:	e1a0a000 	mov	sl, r0
   11788:	e1a00008 	mov	r0, r8
   1178c:	eb006468 	bl	2a934 <operator new(unsigned int)>
   11790:	e1a09000 	mov	r9, r0
   11794:	e1a02004 	mov	r2, r4
   11798:	e1a0100a 	mov	r1, sl
   1179c:	ebfff3a7 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   117a0:	e5859014 	str	r9, [r5, #20]
   117a4:	eaffffb2 	b	11674 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   117a8:	e59f10d0 	ldr	r1, [pc, #208]	; 11880 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   117ac:	ebfff592 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   117b0:	eaffffdf 	b	11734 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   117b4:	e1a00005 	mov	r0, r5
   117b8:	e59f10c0 	ldr	r1, [pc, #192]	; 11880 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   117bc:	ebfff58e 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   117c0:	eaffffdb 	b	11734 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   117c4:	e1a00005 	mov	r0, r5
   117c8:	ebfff5eb 	bl	ef7c <CUSBFunction::GetInterfaceSubClass() const>
   117cc:	e3500001 	cmp	r0, #1
   117d0:	e1a0a000 	mov	sl, r0
   117d4:	1affffb6 	bne	116b4 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   117d8:	e1a00005 	mov	r0, r5
   117dc:	ebfff570 	bl	eda4 <CUSBFunction::GetHost() const>
   117e0:	e1a08000 	mov	r8, r0
   117e4:	e1a00005 	mov	r0, r5
   117e8:	ebfff562 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   117ec:	e1a09000 	mov	r9, r0
   117f0:	e1a00005 	mov	r0, r5
   117f4:	ebfff5c8 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
   117f8:	e6ff0070 	uxth	r0, r0
   117fc:	e58d0004 	str	r0, [sp, #4]
   11800:	e1a01009 	mov	r1, r9
   11804:	e1a00008 	mov	r0, r8
   11808:	e58d400c 	str	r4, [sp, #12]
   1180c:	e58d4008 	str	r4, [sp, #8]
   11810:	e58d4000 	str	r4, [sp]
   11814:	e3a0300b 	mov	r3, #11
   11818:	e3a02021 	mov	r2, #33	; 0x21
   1181c:	eb000132 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11820:	e3500000 	cmp	r0, #0
   11824:	aaffffa2 	bge	116b4 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   11828:	eb005318 	bl	26490 <CLogger::Get()>
   1182c:	e1a0200a 	mov	r2, sl
   11830:	e59f304c 	ldr	r3, [pc, #76]	; 11884 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   11834:	e59f1044 	ldr	r1, [pc, #68]	; 11880 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11838:	e1a06004 	mov	r6, r4
   1183c:	eb005250 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11840:	eaffffbb 	b	11734 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   11844:	e3a0207f 	mov	r2, #127	; 0x7f
   11848:	e59f1024 	ldr	r1, [pc, #36]	; 11874 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   1184c:	e59f0034 	ldr	r0, [pc, #52]	; 11888 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   11850:	eb004a1b 	bl	240c4 <assertion_failed>
   11854:	e3a0207d 	mov	r2, #125	; 0x7d
   11858:	e59f1014 	ldr	r1, [pc, #20]	; 11874 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   1185c:	e59f0028 	ldr	r0, [pc, #40]	; 1188c <CUSBHIDDevice::Configure(unsigned int)+0x250>
   11860:	eb004a17 	bl	240c4 <assertion_failed>
   11864:	e59f1014 	ldr	r1, [pc, #20]	; 11880 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11868:	ebfff563 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   1186c:	e3a06000 	mov	r6, #0
   11870:	eaffffaf 	b	11734 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   11874:	0004213c 	.word	0x0004213c
   11878:	000421cc 	.word	0x000421cc
   1187c:	00041a90 	.word	0x00041a90
   11880:	00042104 	.word	0x00042104
   11884:	00042180 	.word	0x00042180
   11888:	000421b4 	.word	0x000421b4
   1188c:	0004219c 	.word	0x0004219c

00011890 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   11890:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11894:	e590e018 	ldr	lr, [r0, #24]
   11898:	e24dd00c 	sub	sp, sp, #12
   1189c:	e35e0000 	cmp	lr, #0
   118a0:	0a000011 	beq	118ec <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   118a4:	e3510000 	cmp	r1, #0
   118a8:	e1a07003 	mov	r7, r3
   118ac:	e1a06002 	mov	r6, r2
   118b0:	e1a05001 	mov	r5, r1
   118b4:	0a00000f 	beq	118f8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   118b8:	e3520000 	cmp	r2, #0
   118bc:	0a000011 	beq	11908 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x78>
   118c0:	e1a04000 	mov	r4, r0
   118c4:	ebfff536 	bl	eda4 <CUSBFunction::GetHost() const>
   118c8:	e5941018 	ldr	r1, [r4, #24]
   118cc:	e1a03006 	mov	r3, r6
   118d0:	e58d7000 	str	r7, [sp]
   118d4:	e1a02005 	mov	r2, r5
   118d8:	eb000169 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   118dc:	e1e00000 	mvn	r0, r0
   118e0:	e1a00fa0 	lsr	r0, r0, #31
   118e4:	e28dd00c 	add	sp, sp, #12
   118e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   118ec:	e1a0000e 	mov	r0, lr
   118f0:	e28dd00c 	add	sp, sp, #12
   118f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   118f8:	e3a0208e 	mov	r2, #142	; 0x8e
   118fc:	e59f1014 	ldr	r1, [pc, #20]	; 11918 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   11900:	e59f0014 	ldr	r0, [pc, #20]	; 1191c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   11904:	eb0049ee 	bl	240c4 <assertion_failed>
   11908:	e3a0208f 	mov	r2, #143	; 0x8f
   1190c:	e59f1004 	ldr	r1, [pc, #4]	; 11918 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   11910:	e59f0008 	ldr	r0, [pc, #8]	; 11920 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   11914:	eb0049ea 	bl	240c4 <assertion_failed>
   11918:	0004213c 	.word	0x0004213c
   1191c:	000423b8 	.word	0x000423b8
   11920:	000421e4 	.word	0x000421e4

00011924 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   11924:	e590c018 	ldr	ip, [r0, #24]
   11928:	e35c0000 	cmp	ip, #0
   1192c:	0a00002e 	beq	119ec <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   11930:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11934:	e3510000 	cmp	r1, #0
   11938:	e24dd008 	sub	sp, sp, #8
   1193c:	e1a07003 	mov	r7, r3
   11940:	e1a05002 	mov	r5, r2
   11944:	e1a06001 	mov	r6, r1
   11948:	e1a04000 	mov	r4, r0
   1194c:	0a00001e 	beq	119cc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   11950:	e3520000 	cmp	r2, #0
   11954:	0a000020 	beq	119dc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   11958:	e1a00002 	mov	r0, r2
   1195c:	eb0063f5 	bl	2a938 <operator new[](unsigned int)>
   11960:	e1a02005 	mov	r2, r5
   11964:	e1a01006 	mov	r1, r6
   11968:	e1a08000 	mov	r8, r0
   1196c:	eb006217 	bl	2a1d0 <memcpy>
   11970:	e3a00028 	mov	r0, #40	; 0x28
   11974:	eb000967 	bl	13f18 <CUSBRequest::operator new(unsigned int)>
   11978:	e3a0c000 	mov	ip, #0
   1197c:	e1a06000 	mov	r6, r0
   11980:	e5941018 	ldr	r1, [r4, #24]
   11984:	e1a03005 	mov	r3, r5
   11988:	e58dc000 	str	ip, [sp]
   1198c:	e1a02008 	mov	r2, r8
   11990:	eb0008db 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11994:	e1a03004 	mov	r3, r4
   11998:	e1a02008 	mov	r2, r8
   1199c:	e1a00006 	mov	r0, r6
   119a0:	e59f104c 	ldr	r1, [pc, #76]	; 119f4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   119a4:	eb00093a 	bl	13e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   119a8:	e1a00004 	mov	r0, r4
   119ac:	ebfff4fc 	bl	eda4 <CUSBFunction::GetHost() const>
   119b0:	e1a01006 	mov	r1, r6
   119b4:	e1a02007 	mov	r2, r7
   119b8:	e5903000 	ldr	r3, [r0]
   119bc:	e593300c 	ldr	r3, [r3, #12]
   119c0:	e28dd008 	add	sp, sp, #8
   119c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   119c8:	e12fff13 	bx	r3
   119cc:	e3a020a0 	mov	r2, #160	; 0xa0
   119d0:	e59f1020 	ldr	r1, [pc, #32]	; 119f8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   119d4:	e59f0020 	ldr	r0, [pc, #32]	; 119fc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   119d8:	eb0049b9 	bl	240c4 <assertion_failed>
   119dc:	e3a020a1 	mov	r2, #161	; 0xa1
   119e0:	e59f1010 	ldr	r1, [pc, #16]	; 119f8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   119e4:	e59f0014 	ldr	r0, [pc, #20]	; 11a00 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   119e8:	eb0049b5 	bl	240c4 <assertion_failed>
   119ec:	e1a0000c 	mov	r0, ip
   119f0:	e12fff1e 	bx	lr
   119f4:	000114b0 	.word	0x000114b0
   119f8:	0004213c 	.word	0x0004213c
   119fc:	000423b8 	.word	0x000423b8
   11a00:	000421e4 	.word	0x000421e4

00011a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   11a04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11a08:	e590c01c 	ldr	ip, [r0, #28]
   11a0c:	e24dd00c 	sub	sp, sp, #12
   11a10:	e35c0000 	cmp	ip, #0
   11a14:	1a000012 	bne	11a64 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   11a18:	e1a06002 	mov	r6, r2
   11a1c:	e5902014 	ldr	r2, [r0, #20]
   11a20:	e1a04000 	mov	r4, r0
   11a24:	e3520000 	cmp	r2, #0
   11a28:	0a000011 	beq	11a74 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   11a2c:	e3510000 	cmp	r1, #0
   11a30:	e1a05001 	mov	r5, r1
   11a34:	0a000012 	beq	11a84 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   11a38:	e3560000 	cmp	r6, #0
   11a3c:	0a000014 	beq	11a94 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   11a40:	e1a07003 	mov	r7, r3
   11a44:	ebfff4d6 	bl	eda4 <CUSBFunction::GetHost() const>
   11a48:	e5941014 	ldr	r1, [r4, #20]
   11a4c:	e1a03006 	mov	r3, r6
   11a50:	e58d7000 	str	r7, [sp]
   11a54:	e1a02005 	mov	r2, r5
   11a58:	eb000109 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11a5c:	e28dd00c 	add	sp, sp, #12
   11a60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11a64:	e3a020be 	mov	r2, #190	; 0xbe
   11a68:	e59f1034 	ldr	r1, [pc, #52]	; 11aa4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11a6c:	e59f0034 	ldr	r0, [pc, #52]	; 11aa8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   11a70:	eb004993 	bl	240c4 <assertion_failed>
   11a74:	e3a020c0 	mov	r2, #192	; 0xc0
   11a78:	e59f1024 	ldr	r1, [pc, #36]	; 11aa4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11a7c:	e59f0028 	ldr	r0, [pc, #40]	; 11aac <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   11a80:	eb00498f 	bl	240c4 <assertion_failed>
   11a84:	e3a020c1 	mov	r2, #193	; 0xc1
   11a88:	e59f1014 	ldr	r1, [pc, #20]	; 11aa4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11a8c:	e59f001c 	ldr	r0, [pc, #28]	; 11ab0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   11a90:	eb00498b 	bl	240c4 <assertion_failed>
   11a94:	e3a020c2 	mov	r2, #194	; 0xc2
   11a98:	e59f1004 	ldr	r1, [pc, #4]	; 11aa4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11a9c:	e59f0010 	ldr	r0, [pc, #16]	; 11ab4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   11aa0:	eb004987 	bl	240c4 <assertion_failed>
   11aa4:	0004213c 	.word	0x0004213c
   11aa8:	000421f4 	.word	0x000421f4
   11aac:	00042200 	.word	0x00042200
   11ab0:	000423b8 	.word	0x000423b8
   11ab4:	000421e4 	.word	0x000421e4

00011ab8 <CUSBHIDDevice::StartRequest()>:
   11ab8:	e92d4070 	push	{r4, r5, r6, lr}
   11abc:	e5903014 	ldr	r3, [r0, #20]
   11ac0:	e24dd008 	sub	sp, sp, #8
   11ac4:	e3530000 	cmp	r3, #0
   11ac8:	0a000020 	beq	11b50 <CUSBHIDDevice::StartRequest()+0x98>
   11acc:	e5903020 	ldr	r3, [r0, #32]
   11ad0:	e1a04000 	mov	r4, r0
   11ad4:	e3530000 	cmp	r3, #0
   11ad8:	0a000020 	beq	11b60 <CUSBHIDDevice::StartRequest()+0xa8>
   11adc:	e590501c 	ldr	r5, [r0, #28]
   11ae0:	e3550000 	cmp	r5, #0
   11ae4:	1a000021 	bne	11b70 <CUSBHIDDevice::StartRequest()+0xb8>
   11ae8:	e5903010 	ldr	r3, [r0, #16]
   11aec:	e3530000 	cmp	r3, #0
   11af0:	0a000022 	beq	11b80 <CUSBHIDDevice::StartRequest()+0xc8>
   11af4:	e3a00028 	mov	r0, #40	; 0x28
   11af8:	eb000906 	bl	13f18 <CUSBRequest::operator new(unsigned int)>
   11afc:	e1a06000 	mov	r6, r0
   11b00:	e5943010 	ldr	r3, [r4, #16]
   11b04:	e5942020 	ldr	r2, [r4, #32]
   11b08:	e5941014 	ldr	r1, [r4, #20]
   11b0c:	e58d5000 	str	r5, [sp]
   11b10:	eb00087b 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11b14:	e1a03004 	mov	r3, r4
   11b18:	e1a02005 	mov	r2, r5
   11b1c:	e1a00006 	mov	r0, r6
   11b20:	e59f1068 	ldr	r1, [pc, #104]	; 11b90 <CUSBHIDDevice::StartRequest()+0xd8>
   11b24:	e584601c 	str	r6, [r4, #28]
   11b28:	eb0008d9 	bl	13e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11b2c:	e1a00004 	mov	r0, r4
   11b30:	ebfff49b 	bl	eda4 <CUSBFunction::GetHost() const>
   11b34:	e1a02005 	mov	r2, r5
   11b38:	e5903000 	ldr	r3, [r0]
   11b3c:	e594101c 	ldr	r1, [r4, #28]
   11b40:	e593300c 	ldr	r3, [r3, #12]
   11b44:	e28dd008 	add	sp, sp, #8
   11b48:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b4c:	e12fff13 	bx	r3
   11b50:	e3a020c8 	mov	r2, #200	; 0xc8
   11b54:	e59f1038 	ldr	r1, [pc, #56]	; 11b94 <CUSBHIDDevice::StartRequest()+0xdc>
   11b58:	e59f0038 	ldr	r0, [pc, #56]	; 11b98 <CUSBHIDDevice::StartRequest()+0xe0>
   11b5c:	eb004958 	bl	240c4 <assertion_failed>
   11b60:	e3a020c9 	mov	r2, #201	; 0xc9
   11b64:	e59f1028 	ldr	r1, [pc, #40]	; 11b94 <CUSBHIDDevice::StartRequest()+0xdc>
   11b68:	e59f002c 	ldr	r0, [pc, #44]	; 11b9c <CUSBHIDDevice::StartRequest()+0xe4>
   11b6c:	eb004954 	bl	240c4 <assertion_failed>
   11b70:	e3a020cb 	mov	r2, #203	; 0xcb
   11b74:	e59f1018 	ldr	r1, [pc, #24]	; 11b94 <CUSBHIDDevice::StartRequest()+0xdc>
   11b78:	e59f0020 	ldr	r0, [pc, #32]	; 11ba0 <CUSBHIDDevice::StartRequest()+0xe8>
   11b7c:	eb004950 	bl	240c4 <assertion_failed>
   11b80:	e3a020cc 	mov	r2, #204	; 0xcc
   11b84:	e59f1008 	ldr	r1, [pc, #8]	; 11b94 <CUSBHIDDevice::StartRequest()+0xdc>
   11b88:	e59f0014 	ldr	r0, [pc, #20]	; 11ba4 <CUSBHIDDevice::StartRequest()+0xec>
   11b8c:	eb00494c 	bl	240c4 <assertion_failed>
   11b90:	00011c90 	.word	0x00011c90
   11b94:	0004213c 	.word	0x0004213c
   11b98:	00042200 	.word	0x00042200
   11b9c:	000421cc 	.word	0x000421cc
   11ba0:	000421f4 	.word	0x000421f4
   11ba4:	0004219c 	.word	0x0004219c

00011ba8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   11ba8:	e92d4070 	push	{r4, r5, r6, lr}
   11bac:	e2515000 	subs	r5, r1, #0
   11bb0:	0a000029 	beq	11c5c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   11bb4:	e590301c 	ldr	r3, [r0, #28]
   11bb8:	e1a04000 	mov	r4, r0
   11bbc:	e1550003 	cmp	r5, r3
   11bc0:	1a000029 	bne	11c6c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   11bc4:	e1a00005 	mov	r0, r5
   11bc8:	eb00087e 	bl	13dc8 <CUSBRequest::GetStatus() const>
   11bcc:	e2502000 	subs	r2, r0, #0
   11bd0:	e5943000 	ldr	r3, [r4]
   11bd4:	1a000017 	bne	11c38 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x90>
   11bd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11bdc:	e1a01002 	mov	r1, r2
   11be0:	e1a00004 	mov	r0, r4
   11be4:	e12fff33 	blx	r3
   11be8:	e594501c 	ldr	r5, [r4, #28]
   11bec:	e3550000 	cmp	r5, #0
   11bf0:	0a000004 	beq	11c08 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   11bf4:	e1a00005 	mov	r0, r5
   11bf8:	eb000862 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   11bfc:	e1a00005 	mov	r0, r5
   11c00:	e3a01028 	mov	r1, #40	; 0x28
   11c04:	eb0008d8 	bl	13f6c <CUSBRequest::operator delete(void*, unsigned int)>
   11c08:	e3a03000 	mov	r3, #0
   11c0c:	e1a00004 	mov	r0, r4
   11c10:	e584301c 	str	r3, [r4, #28]
   11c14:	ebffffa7 	bl	11ab8 <CUSBHIDDevice::StartRequest()>
   11c18:	e3500000 	cmp	r0, #0
   11c1c:	18bd8070 	popne	{r4, r5, r6, pc}
   11c20:	eb00521a 	bl	26490 <CLogger::Get()>
   11c24:	e8bd4070 	pop	{r4, r5, r6, lr}
   11c28:	e59f304c 	ldr	r3, [pc, #76]	; 11c7c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   11c2c:	e3a02001 	mov	r2, #1
   11c30:	e59f1048 	ldr	r1, [pc, #72]	; 11c80 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   11c34:	ea005152 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c38:	e1a00005 	mov	r0, r5
   11c3c:	e5946020 	ldr	r6, [r4, #32]
   11c40:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   11c44:	eb000861 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   11c48:	e1a01006 	mov	r1, r6
   11c4c:	e1a02000 	mov	r2, r0
   11c50:	e1a00004 	mov	r0, r4
   11c54:	e12fff35 	blx	r5
   11c58:	eaffffe2 	b	11be8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   11c5c:	e3a020d6 	mov	r2, #214	; 0xd6
   11c60:	e59f101c 	ldr	r1, [pc, #28]	; 11c84 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   11c64:	e59f001c 	ldr	r0, [pc, #28]	; 11c88 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   11c68:	eb004915 	bl	240c4 <assertion_failed>
   11c6c:	e3a020d7 	mov	r2, #215	; 0xd7
   11c70:	e59f100c 	ldr	r1, [pc, #12]	; 11c84 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   11c74:	e59f0010 	ldr	r0, [pc, #16]	; 11c8c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   11c78:	eb004911 	bl	240c4 <assertion_failed>
   11c7c:	00042228 	.word	0x00042228
   11c80:	00042104 	.word	0x00042104
   11c84:	0004213c 	.word	0x0004213c
   11c88:	000409ac 	.word	0x000409ac
   11c8c:	00042218 	.word	0x00042218

00011c90 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   11c90:	e3520000 	cmp	r2, #0
   11c94:	0a000002 	beq	11ca4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   11c98:	e1a01000 	mov	r1, r0
   11c9c:	e1a00002 	mov	r0, r2
   11ca0:	eaffffc0 	b	11ba8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11ca4:	e92d4010 	push	{r4, lr}
   11ca8:	e3a020ee 	mov	r2, #238	; 0xee
   11cac:	e59f1004 	ldr	r1, [pc, #4]	; 11cb8 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   11cb0:	e59f0004 	ldr	r0, [pc, #4]	; 11cbc <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   11cb4:	eb004902 	bl	240c4 <assertion_failed>
   11cb8:	0004213c 	.word	0x0004213c
   11cbc:	000408c0 	.word	0x000408c0

00011cc0 <CUSBHostController::CUSBHostController()>:
   11cc0:	e59f3004 	ldr	r3, [pc, #4]	; 11ccc <CUSBHostController::CUSBHostController()+0xc>
   11cc4:	e5803000 	str	r3, [r0]
   11cc8:	e12fff1e 	bx	lr
   11ccc:	00042248 	.word	0x00042248

00011cd0 <CUSBHostController::~CUSBHostController()>:
   11cd0:	e12fff1e 	bx	lr

00011cd4 <CUSBHostController::~CUSBHostController()>:
   11cd4:	e92d4010 	push	{r4, lr}
   11cd8:	e1a04000 	mov	r4, r0
   11cdc:	e3a01004 	mov	r1, #4
   11ce0:	eb006321 	bl	2a96c <operator delete(void*, unsigned int)>
   11ce4:	e1a00004 	mov	r0, r4
   11ce8:	e8bd8010 	pop	{r4, pc}

00011cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   11cec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf0:	e1a06000 	mov	r6, r0
   11cf4:	e24dd034 	sub	sp, sp, #52	; 0x34
   11cf8:	e3a00008 	mov	r0, #8
   11cfc:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
   11d00:	e1a0a002 	mov	sl, r2
   11d04:	e1a09003 	mov	r9, r3
   11d08:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
   11d0c:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
   11d10:	e1a0b001 	mov	fp, r1
   11d14:	eb006306 	bl	2a934 <operator new(unsigned int)>
   11d18:	e1a04000 	mov	r4, r0
   11d1c:	e58d0000 	str	r0, [sp]
   11d20:	e1a02428 	lsr	r2, r8, #8
   11d24:	e5c0a000 	strb	sl, [r0]
   11d28:	e5c09001 	strb	r9, [r0, #1]
   11d2c:	e1a00427 	lsr	r0, r7, #8
   11d30:	e1a0c425 	lsr	ip, r5, #8
   11d34:	e1a0100b 	mov	r1, fp
   11d38:	e5c42003 	strb	r2, [r4, #3]
   11d3c:	e1a03005 	mov	r3, r5
   11d40:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   11d44:	e5c40005 	strb	r0, [r4, #5]
   11d48:	e28d0008 	add	r0, sp, #8
   11d4c:	e5c4c007 	strb	ip, [r4, #7]
   11d50:	e5c48002 	strb	r8, [r4, #2]
   11d54:	e5c47004 	strb	r7, [r4, #4]
   11d58:	e5c45006 	strb	r5, [r4, #6]
   11d5c:	eb0007e8 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11d60:	e5963000 	ldr	r3, [r6]
   11d64:	e1a00006 	mov	r0, r6
   11d68:	e5933008 	ldr	r3, [r3, #8]
   11d6c:	e28d1008 	add	r1, sp, #8
   11d70:	e3a02000 	mov	r2, #0
   11d74:	e12fff33 	blx	r3
   11d78:	e3500000 	cmp	r0, #0
   11d7c:	0a00000a 	beq	11dac <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   11d80:	e28d0008 	add	r0, sp, #8
   11d84:	eb000811 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   11d88:	e1a05000 	mov	r5, r0
   11d8c:	e1a00004 	mov	r0, r4
   11d90:	e3a01008 	mov	r1, #8
   11d94:	eb0062f4 	bl	2a96c <operator delete(void*, unsigned int)>
   11d98:	e28d0008 	add	r0, sp, #8
   11d9c:	eb0007f9 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   11da0:	e1a00005 	mov	r0, r5
   11da4:	e28dd034 	add	sp, sp, #52	; 0x34
   11da8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dac:	e3e05000 	mvn	r5, #0
   11db0:	eafffff5 	b	11d8c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

00011db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   11db4:	e92d4030 	push	{r4, r5, lr}
   11db8:	e59d500c 	ldr	r5, [sp, #12]
   11dbc:	e5dd4014 	ldrb	r4, [sp, #20]
   11dc0:	e1dde1b8 	ldrh	lr, [sp, #24]
   11dc4:	e1ddc1b0 	ldrh	ip, [sp, #16]
   11dc8:	e1833402 	orr	r3, r3, r2, lsl #8
   11dcc:	e58d300c 	str	r3, [sp, #12]
   11dd0:	e58d5014 	str	r5, [sp, #20]
   11dd4:	e1a02004 	mov	r2, r4
   11dd8:	e58de010 	str	lr, [sp, #16]
   11ddc:	e58dc018 	str	ip, [sp, #24]
   11de0:	e3a03006 	mov	r3, #6
   11de4:	e8bd4030 	pop	{r4, r5, lr}
   11de8:	eaffffbf 	b	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00011dec <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   11dec:	e92d4010 	push	{r4, lr}
   11df0:	e3a04000 	mov	r4, #0
   11df4:	e24dd010 	sub	sp, sp, #16
   11df8:	e58d2000 	str	r2, [sp]
   11dfc:	e58d400c 	str	r4, [sp, #12]
   11e00:	e58d4008 	str	r4, [sp, #8]
   11e04:	e58d4004 	str	r4, [sp, #4]
   11e08:	e1a02004 	mov	r2, r4
   11e0c:	e3a03005 	mov	r3, #5
   11e10:	ebffffb5 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11e14:	e1500004 	cmp	r0, r4
   11e18:	b1a00004 	movlt	r0, r4
   11e1c:	ba000003 	blt	11e30 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   11e20:	eb005e66 	bl	297c0 <CTimer::Get()>
   11e24:	e3a00032 	mov	r0, #50	; 0x32
   11e28:	eb005e2b 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   11e2c:	e3a00001 	mov	r0, #1
   11e30:	e28dd010 	add	sp, sp, #16
   11e34:	e8bd8010 	pop	{r4, pc}

00011e38 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   11e38:	e92d4010 	push	{r4, lr}
   11e3c:	e3a04000 	mov	r4, #0
   11e40:	e24dd010 	sub	sp, sp, #16
   11e44:	e58d2000 	str	r2, [sp]
   11e48:	e58d400c 	str	r4, [sp, #12]
   11e4c:	e58d4008 	str	r4, [sp, #8]
   11e50:	e58d4004 	str	r4, [sp, #4]
   11e54:	e1a02004 	mov	r2, r4
   11e58:	e3a03009 	mov	r3, #9
   11e5c:	ebffffa2 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11e60:	e1500004 	cmp	r0, r4
   11e64:	b1a00004 	movlt	r0, r4
   11e68:	ba000003 	blt	11e7c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   11e6c:	eb005e53 	bl	297c0 <CTimer::Get()>
   11e70:	e3a00032 	mov	r0, #50	; 0x32
   11e74:	eb005e18 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   11e78:	e3a00001 	mov	r0, #1
   11e7c:	e28dd010 	add	sp, sp, #16
   11e80:	e8bd8010 	pop	{r4, pc}

00011e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   11e84:	e3a0c000 	mov	ip, #0
   11e88:	e92d4010 	push	{r4, lr}
   11e8c:	e1a04000 	mov	r4, r0
   11e90:	e24dd030 	sub	sp, sp, #48	; 0x30
   11e94:	e58dc000 	str	ip, [sp]
   11e98:	e28d0008 	add	r0, sp, #8
   11e9c:	eb000798 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11ea0:	e5943000 	ldr	r3, [r4]
   11ea4:	e1a00004 	mov	r0, r4
   11ea8:	e5933008 	ldr	r3, [r3, #8]
   11eac:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   11eb0:	e28d1008 	add	r1, sp, #8
   11eb4:	e12fff33 	blx	r3
   11eb8:	e3500000 	cmp	r0, #0
   11ebc:	0a000007 	beq	11ee0 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   11ec0:	e28d0008 	add	r0, sp, #8
   11ec4:	eb0007c1 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   11ec8:	e1a04000 	mov	r4, r0
   11ecc:	e28d0008 	add	r0, sp, #8
   11ed0:	eb0007ac 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   11ed4:	e1a00004 	mov	r0, r4
   11ed8:	e28dd030 	add	sp, sp, #48	; 0x30
   11edc:	e8bd8010 	pop	{r4, pc}
   11ee0:	e3e04000 	mvn	r4, #0
   11ee4:	eafffff8 	b	11ecc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00011ee8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   11ee8:	e92d4070 	push	{r4, r5, r6, lr}
   11eec:	e3a06000 	mov	r6, #0
   11ef0:	e1a04000 	mov	r4, r0
   11ef4:	e59f5034 	ldr	r5, [pc, #52]	; 11f30 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
   11ef8:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   11efc:	e2853008 	add	r3, r5, #8
   11f00:	e5803000 	str	r3, [r0]
   11f04:	eb004b48 	bl	24c2c <CDeviceNameService::Get()>
   11f08:	e1a03006 	mov	r3, r6
   11f0c:	e2851030 	add	r1, r5, #48	; 0x30
   11f10:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   11f14:	eb004b6b 	bl	24cc8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11f18:	e2840024 	add	r0, r4, #36	; 0x24
   11f1c:	eb00173f 	bl	17c20 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   11f20:	e1a00004 	mov	r0, r4
   11f24:	ebfffd99 	bl	11590 <CUSBHIDDevice::~CUSBHIDDevice()>
   11f28:	e1a00004 	mov	r0, r4
   11f2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f30:	00042258 	.word	0x00042258

00011f34 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   11f34:	e92d4010 	push	{r4, lr}
   11f38:	e1a04000 	mov	r4, r0
   11f3c:	ebffffe9 	bl	11ee8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   11f40:	e1a00004 	mov	r0, r4
   11f44:	e3a01e45 	mov	r1, #1104	; 0x450
   11f48:	eb006287 	bl	2a96c <operator delete(void*, unsigned int)>
   11f4c:	e1a00004 	mov	r0, r4
   11f50:	e8bd8010 	pop	{r4, pc}

00011f54 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11f54:	e2522008 	subs	r2, r2, #8
   11f58:	13a02001 	movne	r2, #1
   11f5c:	e3510000 	cmp	r1, #0
   11f60:	03822001 	orreq	r2, r2, #1
   11f64:	e3520000 	cmp	r2, #0
   11f68:	112fff1e 	bxne	lr
   11f6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f70:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   11f74:	e24dd00c 	sub	sp, sp, #12
   11f78:	e3530000 	cmp	r3, #0
   11f7c:	e1a07001 	mov	r7, r1
   11f80:	0a000004 	beq	11f98 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   11f84:	e5d70000 	ldrb	r0, [r7]
   11f88:	e2811002 	add	r1, r1, #2
   11f8c:	e28dd00c 	add	sp, sp, #12
   11f90:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f94:	e12fff13 	bx	r3
   11f98:	e1a06000 	mov	r6, r0
   11f9c:	e1a04003 	mov	r4, r3
   11fa0:	e3a05080 	mov	r5, #128	; 0x80
   11fa4:	e3a09001 	mov	r9, #1
   11fa8:	e2808024 	add	r8, r0, #36	; 0x24
   11fac:	ea000006 	b	11fcc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   11fb0:	e1120003 	tst	r2, r3
   11fb4:	1a00003d 	bne	120b0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   11fb8:	e2844001 	add	r4, r4, #1
   11fbc:	e2855001 	add	r5, r5, #1
   11fc0:	e3540008 	cmp	r4, #8
   11fc4:	e6ef5075 	uxtb	r5, r5
   11fc8:	0a00000a 	beq	11ff8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   11fcc:	e5d72000 	ldrb	r2, [r7]
   11fd0:	e1a03419 	lsl	r3, r9, r4
   11fd4:	e1120003 	tst	r2, r3
   11fd8:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
   11fdc:	0afffff3 	beq	11fb0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
   11fe0:	e1120003 	tst	r2, r3
   11fe4:	1afffff3 	bne	11fb8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11fe8:	e1a01005 	mov	r1, r5
   11fec:	e1a00008 	mov	r0, r8
   11ff0:	eb00176f 	bl	17db4 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   11ff4:	eaffffef 	b	11fb8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   11ff8:	e2868d11 	add	r8, r6, #1088	; 0x440
   11ffc:	e2885002 	add	r5, r8, #2
   12000:	e1a0b005 	mov	fp, r5
   12004:	e2863024 	add	r3, r6, #36	; 0x24
   12008:	e2884008 	add	r4, r8, #8
   1200c:	e2879002 	add	r9, r7, #2
   12010:	e287a008 	add	sl, r7, #8
   12014:	e58d3004 	str	r3, [sp, #4]
   12018:	e4db1001 	ldrb	r1, [fp], #1
   1201c:	e3510000 	cmp	r1, #0
   12020:	0a000007 	beq	12044 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   12024:	e1a03009 	mov	r3, r9
   12028:	e4d30001 	ldrb	r0, [r3], #1
   1202c:	e1500001 	cmp	r0, r1
   12030:	0a000003 	beq	12044 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   12034:	e153000a 	cmp	r3, sl
   12038:	1afffffa 	bne	12028 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   1203c:	e59d0004 	ldr	r0, [sp, #4]
   12040:	eb00176a 	bl	17df0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   12044:	e15b0004 	cmp	fp, r4
   12048:	1afffff2 	bne	12018 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   1204c:	e2866024 	add	r6, r6, #36	; 0x24
   12050:	e2879001 	add	r9, r7, #1
   12054:	e287a007 	add	sl, r7, #7
   12058:	ea000001 	b	12064 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   1205c:	e159000a 	cmp	r9, sl
   12060:	0a00000c 	beq	12098 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
   12064:	e5f91001 	ldrb	r1, [r9, #1]!
   12068:	e3510000 	cmp	r1, #0
   1206c:	11a03005 	movne	r3, r5
   12070:	0afffff9 	beq	1205c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   12074:	e4d32001 	ldrb	r2, [r3], #1
   12078:	e1520001 	cmp	r2, r1
   1207c:	0afffff6 	beq	1205c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   12080:	e1530004 	cmp	r3, r4
   12084:	1afffffa 	bne	12074 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
   12088:	e1a00006 	mov	r0, r6
   1208c:	eb001748 	bl	17db4 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   12090:	e159000a 	cmp	r9, sl
   12094:	1afffff2 	bne	12064 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   12098:	e1a01007 	mov	r1, r7
   1209c:	e1a00008 	mov	r0, r8
   120a0:	e3a02008 	mov	r2, #8
   120a4:	e28dd00c 	add	sp, sp, #12
   120a8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ac:	ea006047 	b	2a1d0 <memcpy>
   120b0:	e1a01005 	mov	r1, r5
   120b4:	e1a00008 	mov	r0, r8
   120b8:	eb00174c 	bl	17df0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   120bc:	eaffffbd 	b	11fb8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

000120c0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   120c0:	e92d4010 	push	{r4, lr}
   120c4:	e1a04000 	mov	r4, r0
   120c8:	e3a02008 	mov	r2, #8
   120cc:	ebfffd1b 	bl	11540 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   120d0:	e1a00004 	mov	r0, r4
   120d4:	e59f3028 	ldr	r3, [pc, #40]	; 12104 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
   120d8:	e4803024 	str	r3, [r0], #36	; 0x24
   120dc:	eb0016c2 	bl	17bec <CKeyboardBehaviour::CKeyboardBehaviour()>
   120e0:	e3a01000 	mov	r1, #0
   120e4:	e2840d11 	add	r0, r4, #1088	; 0x440
   120e8:	e584143c 	str	r1, [r4, #1084]	; 0x43c
   120ec:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
   120f0:	e584144c 	str	r1, [r4, #1100]	; 0x44c
   120f4:	e3a02008 	mov	r2, #8
   120f8:	eb005dbd 	bl	297f4 <memset>
   120fc:	e1a00004 	mov	r0, r4
   12100:	e8bd8010 	pop	{r4, pc}
   12104:	00042260 	.word	0x00042260

00012108 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   12108:	e2800024 	add	r0, r0, #36	; 0x24
   1210c:	ea0016cd 	b	17c48 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00012110 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   12110:	e2800024 	add	r0, r0, #36	; 0x24
   12114:	ea0016d6 	b	17c74 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00012118 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   12118:	e2800024 	add	r0, r0, #36	; 0x24
   1211c:	ea0016df 	b	17ca0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00012120 <CUSBKeyboardDevice::GetLEDStatus() const>:
   12120:	e92d4010 	push	{r4, lr}
   12124:	e2800024 	add	r0, r0, #36	; 0x24
   12128:	eb0016e7 	bl	17ccc <CKeyboardBehaviour::GetLEDStatus() const>
   1212c:	e2003001 	and	r3, r0, #1
   12130:	e3100002 	tst	r0, #2
   12134:	13833002 	orrne	r3, r3, #2
   12138:	e3100004 	tst	r0, #4
   1213c:	13833004 	orrne	r3, r3, #4
   12140:	e1a00003 	mov	r0, r3
   12144:	e8bd8010 	pop	{r4, pc}

00012148 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   12148:	e3510000 	cmp	r1, #0
   1214c:	0a000001 	beq	12158 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
   12150:	e580143c 	str	r1, [r0, #1084]	; 0x43c
   12154:	e12fff1e 	bx	lr
   12158:	e92d4010 	push	{r4, lr}
   1215c:	e3a0207d 	mov	r2, #125	; 0x7d
   12160:	e59f1004 	ldr	r1, [pc, #4]	; 1216c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
   12164:	e59f0004 	ldr	r0, [pc, #4]	; 12170 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
   12168:	eb0047d5 	bl	240c4 <assertion_failed>
   1216c:	00042298 	.word	0x00042298
   12170:	000422a8 	.word	0x000422a8

00012174 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   12174:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12178:	e24dd01c 	sub	sp, sp, #28
   1217c:	e28d4018 	add	r4, sp, #24
   12180:	e5641004 	strb	r1, [r4, #-4]!
   12184:	e1a05000 	mov	r5, r0
   12188:	ebfff305 	bl	eda4 <CUSBFunction::GetHost() const>
   1218c:	e1a06000 	mov	r6, r0
   12190:	e1a00005 	mov	r0, r5
   12194:	ebfff2f7 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   12198:	e1a07000 	mov	r7, r0
   1219c:	e1a00005 	mov	r0, r5
   121a0:	ebfff35d 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
   121a4:	e3a02001 	mov	r2, #1
   121a8:	e3a03c02 	mov	r3, #512	; 0x200
   121ac:	e6ff0070 	uxth	r0, r0
   121b0:	e98d0011 	stmib	sp, {r0, r4}
   121b4:	e58d200c 	str	r2, [sp, #12]
   121b8:	e58d3000 	str	r3, [sp]
   121bc:	e1a01007 	mov	r1, r7
   121c0:	e1a00006 	mov	r0, r6
   121c4:	e3a03009 	mov	r3, #9
   121c8:	e3a02021 	mov	r2, #33	; 0x21
   121cc:	ebfffec6 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   121d0:	e1e00000 	mvn	r0, r0
   121d4:	e1a00fa0 	lsr	r0, r0, #31
   121d8:	e28dd01c 	add	sp, sp, #28
   121dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000121e0 <CUSBKeyboardDevice::Configure()>:
   121e0:	e92d4030 	push	{r4, r5, lr}
   121e4:	e3a01000 	mov	r1, #0
   121e8:	e24dd00c 	sub	sp, sp, #12
   121ec:	e1a04000 	mov	r4, r0
   121f0:	ebfffd11 	bl	1163c <CUSBHIDDevice::Configure(unsigned int)>
   121f4:	e2505000 	subs	r5, r0, #0
   121f8:	0a000012 	beq	12248 <CUSBKeyboardDevice::Configure()+0x68>
   121fc:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   12200:	e1a00004 	mov	r0, r4
   12204:	ebffffda 	bl	12174 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   12208:	e59f2058 	ldr	r2, [pc, #88]	; 12268 <CUSBKeyboardDevice::Configure()+0x88>
   1220c:	e5923000 	ldr	r3, [r2]
   12210:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   12214:	e2833001 	add	r3, r3, #1
   12218:	e5823000 	str	r3, [r2]
   1221c:	eb004a82 	bl	24c2c <CDeviceNameService::Get()>
   12220:	e3a03000 	mov	r3, #0
   12224:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   12228:	e59f103c 	ldr	r1, [pc, #60]	; 1226c <CUSBKeyboardDevice::Configure()+0x8c>
   1222c:	e58d3000 	str	r3, [sp]
   12230:	e1a03004 	mov	r3, r4
   12234:	eb004a89 	bl	24c60 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   12238:	e1a00004 	mov	r0, r4
   1223c:	e28dd00c 	add	sp, sp, #12
   12240:	e8bd4030 	pop	{r4, r5, lr}
   12244:	eafffe1b 	b	11ab8 <CUSBHIDDevice::StartRequest()>
   12248:	eb005090 	bl	26490 <CLogger::Get()>
   1224c:	e59f301c 	ldr	r3, [pc, #28]	; 12270 <CUSBKeyboardDevice::Configure()+0x90>
   12250:	e3a02001 	mov	r2, #1
   12254:	e59f1018 	ldr	r1, [pc, #24]	; 12274 <CUSBKeyboardDevice::Configure()+0x94>
   12258:	eb004fc9 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1225c:	e1a00005 	mov	r0, r5
   12260:	e28dd00c 	add	sp, sp, #12
   12264:	e8bd8030 	pop	{r4, r5, pc}
   12268:	00049984 	.word	0x00049984
   1226c:	00042288 	.word	0x00042288
   12270:	000422c4 	.word	0x000422c4
   12274:	00042290 	.word	0x00042290

00012278 <CUSBKeyboardDevice::UpdateLEDs()>:
   12278:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   1227c:	e3520000 	cmp	r2, #0
   12280:	112fff1e 	bxne	lr
   12284:	e92d4010 	push	{r4, lr}
   12288:	e1a04000 	mov	r4, r0
   1228c:	ebffffa3 	bl	12120 <CUSBKeyboardDevice::GetLEDStatus() const>
   12290:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   12294:	e1530000 	cmp	r3, r0
   12298:	08bd8010 	popeq	{r4, pc}
   1229c:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   122a0:	e1a01000 	mov	r1, r0
   122a4:	e1a00004 	mov	r0, r4
   122a8:	ebffffb1 	bl	12174 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   122ac:	e3500000 	cmp	r0, #0
   122b0:	18bd8010 	popne	{r4, pc}
   122b4:	eb005075 	bl	26490 <CLogger::Get()>
   122b8:	e8bd4010 	pop	{r4, lr}
   122bc:	e59f3008 	ldr	r3, [pc, #8]	; 122cc <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   122c0:	e3a02001 	mov	r2, #1
   122c4:	e59f1004 	ldr	r1, [pc, #4]	; 122d0 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   122c8:	ea004fad 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   122cc:	000422e0 	.word	0x000422e0
   122d0:	00042290 	.word	0x00042290

000122d4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   122d4:	e0802002 	add	r2, r0, r2
   122d8:	ea000002 	b	122e8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   122dc:	e4d03001 	ldrb	r3, [r0], #1
   122e0:	e1530001 	cmp	r3, r1
   122e4:	0a000003 	beq	122f8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   122e8:	e1500002 	cmp	r0, r2
   122ec:	1afffffa 	bne	122dc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   122f0:	e3a00000 	mov	r0, #0
   122f4:	e12fff1e 	bx	lr
   122f8:	e3a00001 	mov	r0, #1
   122fc:	e12fff1e 	bx	lr

00012300 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   12300:	e1c022f0 	strd	r2, [r0, #32]
   12304:	e1a01003 	mov	r1, r3
   12308:	e1a00002 	mov	r0, r2
   1230c:	e12fff1e 	bx	lr

00012310 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12310:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12314:	e59f30ec 	ldr	r3, [pc, #236]	; 12408 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12318:	e3520000 	cmp	r2, #0
   1231c:	e92d4070 	push	{r4, r5, r6, lr}
   12320:	e1a04000 	mov	r4, r0
   12324:	e5803000 	str	r3, [r0]
   12328:	1a000021 	bne	123b4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   1232c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12330:	e3550000 	cmp	r5, #0
   12334:	0a000004 	beq	1234c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12338:	e1a00005 	mov	r0, r5
   1233c:	eb001973 	bl	18910 <CPartitionManager::~CPartitionManager()>
   12340:	e1a00005 	mov	r0, r5
   12344:	e3a01024 	mov	r1, #36	; 0x24
   12348:	eb006187 	bl	2a96c <operator delete(void*, unsigned int)>
   1234c:	e3a03000 	mov	r3, #0
   12350:	e5945014 	ldr	r5, [r4, #20]
   12354:	e5843028 	str	r3, [r4, #40]	; 0x28
   12358:	e1550003 	cmp	r5, r3
   1235c:	0a000004 	beq	12374 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   12360:	e1a00005 	mov	r0, r5
   12364:	ebfff11f 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   12368:	e1a00005 	mov	r0, r5
   1236c:	e3a01014 	mov	r1, #20
   12370:	eb00617d 	bl	2a96c <operator delete(void*, unsigned int)>
   12374:	e3a03000 	mov	r3, #0
   12378:	e5945010 	ldr	r5, [r4, #16]
   1237c:	e5843014 	str	r3, [r4, #20]
   12380:	e1550003 	cmp	r5, r3
   12384:	0a000004 	beq	1239c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   12388:	e1a00005 	mov	r0, r5
   1238c:	ebfff115 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   12390:	e1a00005 	mov	r0, r5
   12394:	e3a01014 	mov	r1, #20
   12398:	eb006173 	bl	2a96c <operator delete(void*, unsigned int)>
   1239c:	e3a03000 	mov	r3, #0
   123a0:	e1a00004 	mov	r0, r4
   123a4:	e5843010 	str	r3, [r4, #16]
   123a8:	ebfff17a 	bl	e998 <CUSBFunction::~CUSBFunction()>
   123ac:	e1a00004 	mov	r0, r4
   123b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   123b4:	eb004a1c 	bl	24c2c <CDeviceNameService::Get()>
   123b8:	e3a03001 	mov	r3, #1
   123bc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   123c0:	e59f1044 	ldr	r1, [pc, #68]	; 1240c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   123c4:	eb004a3f 	bl	24cc8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   123c8:	e3a03001 	mov	r3, #1
   123cc:	e59f103c 	ldr	r1, [pc, #60]	; 12410 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   123d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   123d4:	e5912000 	ldr	r2, [r1]
   123d8:	e1a03013 	lsl	r3, r3, r0
   123dc:	e1130002 	tst	r3, r2
   123e0:	0a000004 	beq	123f8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xe8>
   123e4:	e3a00000 	mov	r0, #0
   123e8:	e1c23003 	bic	r3, r2, r3
   123ec:	e5813000 	str	r3, [r1]
   123f0:	e584002c 	str	r0, [r4, #44]	; 0x2c
   123f4:	eaffffcc 	b	1232c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   123f8:	e3a020d4 	mov	r2, #212	; 0xd4
   123fc:	e59f1010 	ldr	r1, [pc, #16]	; 12414 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12400:	e59f0010 	ldr	r0, [pc, #16]	; 12418 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x108>
   12404:	eb00472e 	bl	240c4 <assertion_failed>
   12408:	00042300 	.word	0x00042300
   1240c:	0004232c 	.word	0x0004232c
   12410:	00050140 	.word	0x00050140
   12414:	00042334 	.word	0x00042334
   12418:	00042348 	.word	0x00042348

0001241c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   1241c:	e92d4010 	push	{r4, lr}
   12420:	e1a04000 	mov	r4, r0
   12424:	ebffffb9 	bl	12310 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12428:	e1a00004 	mov	r0, r4
   1242c:	e3a01030 	mov	r1, #48	; 0x30
   12430:	eb00614d 	bl	2a96c <operator delete(void*, unsigned int)>
   12434:	e1a00004 	mov	r0, r4
   12438:	e8bd8010 	pop	{r4, pc}

0001243c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   1243c:	e92d4010 	push	{r4, lr}
   12440:	e1a04000 	mov	r4, r0
   12444:	ebfff1e4 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12448:	e3a03000 	mov	r3, #0
   1244c:	e3a00000 	mov	r0, #0
   12450:	e3a01000 	mov	r1, #0
   12454:	e59f2024 	ldr	r2, [pc, #36]	; 12480 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12458:	e1c402f0 	strd	r0, [r4, #32]
   1245c:	e5842000 	str	r2, [r4]
   12460:	e5843010 	str	r3, [r4, #16]
   12464:	e5843014 	str	r3, [r4, #20]
   12468:	e5843018 	str	r3, [r4, #24]
   1246c:	e584301c 	str	r3, [r4, #28]
   12470:	e5843028 	str	r3, [r4, #40]	; 0x28
   12474:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12478:	e1a00004 	mov	r0, r4
   1247c:	e8bd8010 	pop	{r4, pc}
   12480:	00042300 	.word	0x00042300

00012484 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12484:	e590001c 	ldr	r0, [r0, #28]
   12488:	e12fff1e 	bx	lr

0001248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   1248c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12490:	e2519000 	subs	r9, r1, #0
   12494:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12498:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   1249c:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   124a0:	0a000059 	beq	1260c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x180>
   124a4:	e1a07003 	mov	r7, r3
   124a8:	e2423006 	sub	r3, r2, #6
   124ac:	e353000a 	cmp	r3, #10
   124b0:	e1a06002 	mov	r6, r2
   124b4:	8a000058 	bhi	1261c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x190>
   124b8:	e2973000 	adds	r3, r7, #0
   124bc:	13a03001 	movne	r3, #1
   124c0:	e3550000 	cmp	r5, #0
   124c4:	03833001 	orreq	r3, r3, #1
   124c8:	e3530000 	cmp	r3, #0
   124cc:	0a000056 	beq	1262c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1a0>
   124d0:	e1a04000 	mov	r4, r0
   124d4:	e3a0201f 	mov	r2, #31
   124d8:	e3a01000 	mov	r1, #0
   124dc:	e28d0018 	add	r0, sp, #24
   124e0:	eb005cc3 	bl	297f4 <memset>
   124e4:	e3580000 	cmp	r8, #0
   124e8:	13a0e080 	movne	lr, #128	; 0x80
   124ec:	03a0e000 	moveq	lr, #0
   124f0:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   124f4:	e5943018 	ldr	r3, [r4, #24]
   124f8:	e3c0201f 	bic	r2, r0, #31
   124fc:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
   12500:	e206001f 	and	r0, r6, #31
   12504:	e2833001 	add	r3, r3, #1
   12508:	e1800002 	orr	r0, r0, r2
   1250c:	e1a02006 	mov	r2, r6
   12510:	e59f61e4 	ldr	r6, [pc, #484]	; 126fc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12514:	e5843018 	str	r3, [r4, #24]
   12518:	e3ccc00f 	bic	ip, ip, #15
   1251c:	e1a01009 	mov	r1, r9
   12520:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12524:	e28d0027 	add	r0, sp, #39	; 0x27
   12528:	e58d301c 	str	r3, [sp, #28]
   1252c:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
   12530:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12534:	e58d6018 	str	r6, [sp, #24]
   12538:	e58d5020 	str	r5, [sp, #32]
   1253c:	eb005f23 	bl	2a1d0 <memcpy>
   12540:	e1a00004 	mov	r0, r4
   12544:	ebfff216 	bl	eda4 <CUSBFunction::GetHost() const>
   12548:	e2506000 	subs	r6, r0, #0
   1254c:	0a00003a 	beq	1263c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b0>
   12550:	e3a09000 	mov	r9, #0
   12554:	e5941014 	ldr	r1, [r4, #20]
   12558:	e28d2018 	add	r2, sp, #24
   1255c:	e58d9000 	str	r9, [sp]
   12560:	e3a0301f 	mov	r3, #31
   12564:	ebfffe46 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12568:	e1500009 	cmp	r0, r9
   1256c:	ba00005b 	blt	126e0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   12570:	e3550000 	cmp	r5, #0
   12574:	0a00000a 	beq	125a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x118>
   12578:	e5940010 	ldr	r0, [r4, #16]
   1257c:	e3580000 	cmp	r8, #0
   12580:	e5941014 	ldr	r1, [r4, #20]
   12584:	e1a03005 	mov	r3, r5
   12588:	11a01000 	movne	r1, r0
   1258c:	e58d9000 	str	r9, [sp]
   12590:	e1a02007 	mov	r2, r7
   12594:	e1a00006 	mov	r0, r6
   12598:	ebfffe39 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1259c:	e2505000 	subs	r5, r0, #0
   125a0:	ba000029 	blt	1264c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
   125a4:	e3a03000 	mov	r3, #0
   125a8:	e5941010 	ldr	r1, [r4, #16]
   125ac:	e1a00006 	mov	r0, r6
   125b0:	e58d3000 	str	r3, [sp]
   125b4:	e28d2008 	add	r2, sp, #8
   125b8:	e3a0300d 	mov	r3, #13
   125bc:	ebfffe30 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   125c0:	e350000d 	cmp	r0, #13
   125c4:	1a000027 	bne	12668 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1dc>
   125c8:	e59f3130 	ldr	r3, [pc, #304]	; 12700 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   125cc:	e59d2008 	ldr	r2, [sp, #8]
   125d0:	e1520003 	cmp	r2, r3
   125d4:	1a00002a 	bne	12684 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f8>
   125d8:	e5943018 	ldr	r3, [r4, #24]
   125dc:	e59d200c 	ldr	r2, [sp, #12]
   125e0:	e1520003 	cmp	r2, r3
   125e4:	1a00002d 	bne	126a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
   125e8:	e5dd3014 	ldrb	r3, [sp, #20]
   125ec:	e3530000 	cmp	r3, #0
   125f0:	1a000031 	bne	126bc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
   125f4:	e59d3010 	ldr	r3, [sp, #16]
   125f8:	e3530000 	cmp	r3, #0
   125fc:	1a000030 	bne	126c4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x238>
   12600:	e1a00005 	mov	r0, r5
   12604:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12608:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1260c:	e3a02f8e 	mov	r2, #568	; 0x238
   12610:	e59f10ec 	ldr	r1, [pc, #236]	; 12704 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12614:	e59f00ec 	ldr	r0, [pc, #236]	; 12708 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12618:	eb0046a9 	bl	240c4 <assertion_failed>
   1261c:	e59f20e8 	ldr	r2, [pc, #232]	; 1270c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12620:	e59f10dc 	ldr	r1, [pc, #220]	; 12704 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12624:	e59f00e4 	ldr	r0, [pc, #228]	; 12710 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12628:	eb0046a5 	bl	240c4 <assertion_failed>
   1262c:	e59f20e0 	ldr	r2, [pc, #224]	; 12714 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12630:	e59f10cc 	ldr	r1, [pc, #204]	; 12704 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12634:	e59f00dc 	ldr	r0, [pc, #220]	; 12718 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12638:	eb0046a1 	bl	240c4 <assertion_failed>
   1263c:	e59f20d8 	ldr	r2, [pc, #216]	; 1271c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12640:	e59f10bc 	ldr	r1, [pc, #188]	; 12704 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12644:	e59f00d4 	ldr	r0, [pc, #212]	; 12720 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12648:	eb00469d 	bl	240c4 <assertion_failed>
   1264c:	eb004f8f 	bl	26490 <CLogger::Get()>
   12650:	e59f30cc 	ldr	r3, [pc, #204]	; 12724 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12654:	e3a02001 	mov	r2, #1
   12658:	e59f10c8 	ldr	r1, [pc, #200]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   1265c:	eb004ec8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12660:	e3e05000 	mvn	r5, #0
   12664:	eaffffe5 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12668:	eb004f88 	bl	26490 <CLogger::Get()>
   1266c:	e59f30b8 	ldr	r3, [pc, #184]	; 1272c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12670:	e3a02001 	mov	r2, #1
   12674:	e59f10ac 	ldr	r1, [pc, #172]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12678:	eb004ec1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1267c:	e3e05000 	mvn	r5, #0
   12680:	eaffffde 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12684:	eb004f81 	bl	26490 <CLogger::Get()>
   12688:	e59f30a0 	ldr	r3, [pc, #160]	; 12730 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   1268c:	e3a02001 	mov	r2, #1
   12690:	e59f1090 	ldr	r1, [pc, #144]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12694:	eb004eba 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12698:	e3e05000 	mvn	r5, #0
   1269c:	eaffffd7 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   126a0:	eb004f7a 	bl	26490 <CLogger::Get()>
   126a4:	e59f3088 	ldr	r3, [pc, #136]	; 12734 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   126a8:	e3a02001 	mov	r2, #1
   126ac:	e59f1074 	ldr	r1, [pc, #116]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   126b0:	eb004eb3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126b4:	e3e05000 	mvn	r5, #0
   126b8:	eaffffd0 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   126bc:	e3e05000 	mvn	r5, #0
   126c0:	eaffffce 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   126c4:	eb004f71 	bl	26490 <CLogger::Get()>
   126c8:	e59f3068 	ldr	r3, [pc, #104]	; 12738 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   126cc:	e3a02001 	mov	r2, #1
   126d0:	e59f1050 	ldr	r1, [pc, #80]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   126d4:	eb004eaa 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126d8:	e3e05000 	mvn	r5, #0
   126dc:	eaffffc7 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   126e0:	eb004f6a 	bl	26490 <CLogger::Get()>
   126e4:	e59f3050 	ldr	r3, [pc, #80]	; 1273c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
   126e8:	e3a02001 	mov	r2, #1
   126ec:	e59f1034 	ldr	r1, [pc, #52]	; 12728 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   126f0:	eb004ea3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126f4:	e3e05000 	mvn	r5, #0
   126f8:	eaffffc0 	b	12600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   126fc:	43425355 	.word	0x43425355
   12700:	53425355 	.word	0x53425355
   12704:	00042334 	.word	0x00042334
   12708:	00042374 	.word	0x00042374
   1270c:	00000239 	.word	0x00000239
   12710:	00042384 	.word	0x00042384
   12714:	0000023a 	.word	0x0000023a
   12718:	000423a8 	.word	0x000423a8
   1271c:	00000249 	.word	0x00000249
   12720:	000423c8 	.word	0x000423c8
   12724:	000423e8 	.word	0x000423e8
   12728:	00042324 	.word	0x00042324
   1272c:	00042400 	.word	0x00042400
   12730:	00042414 	.word	0x00042414
   12734:	0004242c 	.word	0x0004242c
   12738:	00042440 	.word	0x00042440
   1273c:	000423d4 	.word	0x000423d4

00012740 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12740:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12744:	e3510000 	cmp	r1, #0
   12748:	e24dd01c 	sub	sp, sp, #28
   1274c:	0a000034 	beq	12824 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12750:	e1c062d0 	ldrd	r6, [r0, #32]
   12754:	e3a03000 	mov	r3, #0
   12758:	e1a04002 	mov	r4, r2
   1275c:	e59f20ec 	ldr	r2, [pc, #236]	; 12850 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   12760:	e0033007 	and	r3, r3, r7
   12764:	e0022006 	and	r2, r2, r6
   12768:	e1923003 	orrs	r3, r2, r3
   1276c:	e3e08000 	mvn	r8, #0
   12770:	13a03001 	movne	r3, #1
   12774:	03a03000 	moveq	r3, #0
   12778:	e59f90d0 	ldr	r9, [pc, #208]	; 12850 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   1277c:	e1570009 	cmp	r7, r9
   12780:	01560008 	cmpeq	r6, r8
   12784:	83833001 	orrhi	r3, r3, #1
   12788:	e3530000 	cmp	r3, #0
   1278c:	1a000020 	bne	12814 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   12790:	e1a0cb84 	lsl	ip, r4, #23
   12794:	e1a0cbac 	lsr	ip, ip, #23
   12798:	e1a024a6 	lsr	r2, r6, #9
   1279c:	e35c0000 	cmp	ip, #0
   127a0:	e1822b87 	orr	r2, r2, r7, lsl #23
   127a4:	1a00001a 	bne	12814 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   127a8:	e3a05001 	mov	r5, #1
   127ac:	e3a06028 	mov	r6, #40	; 0x28
   127b0:	e1a0e4a4 	lsr	lr, r4, #9
   127b4:	e6bf2f32 	rev	r2, r2
   127b8:	e6bfefbe 	rev16	lr, lr
   127bc:	e6ffe07e 	uxth	lr, lr
   127c0:	e1cd20be 	strh	r2, [sp, #14]
   127c4:	e1a02822 	lsr	r2, r2, #16
   127c8:	e1a03001 	mov	r3, r1
   127cc:	e1cd21b0 	strh	r2, [sp, #16]
   127d0:	e1a0742e 	lsr	r7, lr, #8
   127d4:	e58d4000 	str	r4, [sp]
   127d8:	e58d5004 	str	r5, [sp, #4]
   127dc:	e3a0200a 	mov	r2, #10
   127e0:	e28d100c 	add	r1, sp, #12
   127e4:	e5cdc00d 	strb	ip, [sp, #13]
   127e8:	e5cdc012 	strb	ip, [sp, #18]
   127ec:	e5cdc015 	strb	ip, [sp, #21]
   127f0:	e5cde013 	strb	lr, [sp, #19]
   127f4:	e5cd7014 	strb	r7, [sp, #20]
   127f8:	e5cd600c 	strb	r6, [sp, #12]
   127fc:	ebffff22 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12800:	e1500004 	cmp	r0, r4
   12804:	1a00000a 	bne	12834 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12808:	e1a00004 	mov	r0, r4
   1280c:	e28dd01c 	add	sp, sp, #28
   12810:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12814:	e3e04000 	mvn	r4, #0
   12818:	e1a00004 	mov	r0, r4
   1281c:	e28dd01c 	add	sp, sp, #28
   12820:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12824:	e59f2028 	ldr	r2, [pc, #40]	; 12854 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x114>
   12828:	e59f1028 	ldr	r1, [pc, #40]	; 12858 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x118>
   1282c:	e59f0028 	ldr	r0, [pc, #40]	; 1285c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   12830:	eb004623 	bl	240c4 <assertion_failed>
   12834:	eb004f15 	bl	26490 <CLogger::Get()>
   12838:	e1a02005 	mov	r2, r5
   1283c:	e59f301c 	ldr	r3, [pc, #28]	; 12860 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   12840:	e59f101c 	ldr	r1, [pc, #28]	; 12864 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   12844:	eb004e4e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12848:	e3e04000 	mvn	r4, #0
   1284c:	eaffffed 	b	12808 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12850:	000001ff 	.word	0x000001ff
   12854:	000001ed 	.word	0x000001ed
   12858:	00042334 	.word	0x00042334
   1285c:	000423b8 	.word	0x000423b8
   12860:	00042458 	.word	0x00042458
   12864:	00042324 	.word	0x00042324

00012868 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12868:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1286c:	e3510000 	cmp	r1, #0
   12870:	e24dd01c 	sub	sp, sp, #28
   12874:	0a000032 	beq	12944 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xdc>
   12878:	e1c062d0 	ldrd	r6, [r0, #32]
   1287c:	e3a03000 	mov	r3, #0
   12880:	e1a04002 	mov	r4, r2
   12884:	e59f20e4 	ldr	r2, [pc, #228]	; 12970 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   12888:	e0033007 	and	r3, r3, r7
   1288c:	e0022006 	and	r2, r2, r6
   12890:	e1923003 	orrs	r3, r2, r3
   12894:	e3e08000 	mvn	r8, #0
   12898:	13a03001 	movne	r3, #1
   1289c:	03a03000 	moveq	r3, #0
   128a0:	e59f90c8 	ldr	r9, [pc, #200]	; 12970 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   128a4:	e1570009 	cmp	r7, r9
   128a8:	01560008 	cmpeq	r6, r8
   128ac:	83833001 	orrhi	r3, r3, #1
   128b0:	e3530000 	cmp	r3, #0
   128b4:	1a00001f 	bne	12938 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   128b8:	e1a0cb84 	lsl	ip, r4, #23
   128bc:	e1a0cbac 	lsr	ip, ip, #23
   128c0:	e1a024a6 	lsr	r2, r6, #9
   128c4:	e35c0000 	cmp	ip, #0
   128c8:	e1822b87 	orr	r2, r2, r7, lsl #23
   128cc:	1a000019 	bne	12938 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   128d0:	e3a05008 	mov	r5, #8
   128d4:	e3a0602a 	mov	r6, #42	; 0x2a
   128d8:	e1a0e4a4 	lsr	lr, r4, #9
   128dc:	e6bf2f32 	rev	r2, r2
   128e0:	e6bfefbe 	rev16	lr, lr
   128e4:	e6ffe07e 	uxth	lr, lr
   128e8:	e1cd20be 	strh	r2, [sp, #14]
   128ec:	e1a02822 	lsr	r2, r2, #16
   128f0:	e1a03001 	mov	r3, r1
   128f4:	e1cd21b0 	strh	r2, [sp, #16]
   128f8:	e1a0753e 	lsr	r7, lr, r5
   128fc:	e88d1010 	stm	sp, {r4, ip}
   12900:	e3a0200a 	mov	r2, #10
   12904:	e28d100c 	add	r1, sp, #12
   12908:	e5cdc012 	strb	ip, [sp, #18]
   1290c:	e5cdc015 	strb	ip, [sp, #21]
   12910:	e5cde013 	strb	lr, [sp, #19]
   12914:	e5cd7014 	strb	r7, [sp, #20]
   12918:	e5cd600c 	strb	r6, [sp, #12]
   1291c:	e5cd500d 	strb	r5, [sp, #13]
   12920:	ebfffed9 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12924:	e3500000 	cmp	r0, #0
   12928:	a1a00004 	movge	r0, r4
   1292c:	ba000008 	blt	12954 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   12930:	e28dd01c 	add	sp, sp, #28
   12934:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12938:	e3e00000 	mvn	r0, #0
   1293c:	e28dd01c 	add	sp, sp, #28
   12940:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12944:	e59f2028 	ldr	r2, [pc, #40]	; 12974 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
   12948:	e59f1028 	ldr	r1, [pc, #40]	; 12978 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x110>
   1294c:	e59f0028 	ldr	r0, [pc, #40]	; 1297c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   12950:	eb0045db 	bl	240c4 <assertion_failed>
   12954:	eb004ecd 	bl	26490 <CLogger::Get()>
   12958:	e59f3020 	ldr	r3, [pc, #32]	; 12980 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   1295c:	e3a02001 	mov	r2, #1
   12960:	e59f101c 	ldr	r1, [pc, #28]	; 12984 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   12964:	eb004e06 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12968:	e3e00000 	mvn	r0, #0
   1296c:	eaffffef 	b	12930 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   12970:	000001ff 	.word	0x000001ff
   12974:	00000212 	.word	0x00000212
   12978:	00042334 	.word	0x00042334
   1297c:	000423b8 	.word	0x000423b8
   12980:	00042468 	.word	0x00042468
   12984:	00042324 	.word	0x00042324

00012988 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   12988:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1298c:	e24dd014 	sub	sp, sp, #20
   12990:	e1a05000 	mov	r5, r0
   12994:	ebfff102 	bl	eda4 <CUSBFunction::GetHost() const>
   12998:	e2506000 	subs	r6, r0, #0
   1299c:	0a00002e 	beq	12a5c <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   129a0:	e1a00005 	mov	r0, r5
   129a4:	ebfff0f3 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   129a8:	e3a04000 	mov	r4, #0
   129ac:	e1a01000 	mov	r1, r0
   129b0:	e58d400c 	str	r4, [sp, #12]
   129b4:	e58d4008 	str	r4, [sp, #8]
   129b8:	e58d4004 	str	r4, [sp, #4]
   129bc:	e58d4000 	str	r4, [sp]
   129c0:	e3a030ff 	mov	r3, #255	; 0xff
   129c4:	e3a02021 	mov	r2, #33	; 0x21
   129c8:	e1a00006 	mov	r0, r6
   129cc:	ebfffcc6 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   129d0:	e1500004 	cmp	r0, r4
   129d4:	ba000024 	blt	12a6c <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   129d8:	e1a00005 	mov	r0, r5
   129dc:	ebfff0e5 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   129e0:	e3a07001 	mov	r7, #1
   129e4:	e1a01000 	mov	r1, r0
   129e8:	e58d400c 	str	r4, [sp, #12]
   129ec:	e58d4008 	str	r4, [sp, #8]
   129f0:	e88d0090 	stm	sp, {r4, r7}
   129f4:	e1a03007 	mov	r3, r7
   129f8:	e3a02002 	mov	r2, #2
   129fc:	e1a00006 	mov	r0, r6
   12a00:	ebfffcb9 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12a04:	e3500000 	cmp	r0, #0
   12a08:	ba00001e 	blt	12a88 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   12a0c:	e1a00005 	mov	r0, r5
   12a10:	ebfff0d8 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   12a14:	e3a02002 	mov	r2, #2
   12a18:	e1a01000 	mov	r1, r0
   12a1c:	e58d400c 	str	r4, [sp, #12]
   12a20:	e58d4008 	str	r4, [sp, #8]
   12a24:	e58d4000 	str	r4, [sp]
   12a28:	e1a03007 	mov	r3, r7
   12a2c:	e1a00006 	mov	r0, r6
   12a30:	e58d2004 	str	r2, [sp, #4]
   12a34:	ebfffcac 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12a38:	e3500000 	cmp	r0, #0
   12a3c:	ba000018 	blt	12aa4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   12a40:	e5950010 	ldr	r0, [r5, #16]
   12a44:	ebffefc3 	bl	e958 <CUSBEndpoint::ResetPID()>
   12a48:	e5950014 	ldr	r0, [r5, #20]
   12a4c:	ebffefc1 	bl	e958 <CUSBEndpoint::ResetPID()>
   12a50:	e1a00004 	mov	r0, r4
   12a54:	e28dd014 	add	sp, sp, #20
   12a58:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12a5c:	e3a02fa2 	mov	r2, #648	; 0x288
   12a60:	e59f1058 	ldr	r1, [pc, #88]	; 12ac0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   12a64:	e59f0058 	ldr	r0, [pc, #88]	; 12ac4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   12a68:	eb004595 	bl	240c4 <assertion_failed>
   12a6c:	eb004e87 	bl	26490 <CLogger::Get()>
   12a70:	e59f3050 	ldr	r3, [pc, #80]	; 12ac8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   12a74:	e3a02004 	mov	r2, #4
   12a78:	e59f104c 	ldr	r1, [pc, #76]	; 12acc <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12a7c:	eb004dc0 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a80:	e3e00000 	mvn	r0, #0
   12a84:	eafffff2 	b	12a54 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   12a88:	eb004e80 	bl	26490 <CLogger::Get()>
   12a8c:	e59f303c 	ldr	r3, [pc, #60]	; 12ad0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   12a90:	e3a02004 	mov	r2, #4
   12a94:	e59f1030 	ldr	r1, [pc, #48]	; 12acc <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12a98:	eb004db9 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a9c:	e3e00000 	mvn	r0, #0
   12aa0:	eaffffeb 	b	12a54 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   12aa4:	eb004e79 	bl	26490 <CLogger::Get()>
   12aa8:	e59f3024 	ldr	r3, [pc, #36]	; 12ad4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   12aac:	e3a02004 	mov	r2, #4
   12ab0:	e59f1014 	ldr	r1, [pc, #20]	; 12acc <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12ab4:	eb004db2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ab8:	e3e00000 	mvn	r0, #0
   12abc:	eaffffe4 	b	12a54 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   12ac0:	00042334 	.word	0x00042334
   12ac4:	000423c8 	.word	0x000423c8
   12ac8:	00042478 	.word	0x00042478
   12acc:	00042324 	.word	0x00042324
   12ad0:	0004248c 	.word	0x0004248c
   12ad4:	000424ac 	.word	0x000424ac

00012ad8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   12ad8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12adc:	e1a06002 	mov	r6, r2
   12ae0:	e1a07000 	mov	r7, r0
   12ae4:	e1a08001 	mov	r8, r1
   12ae8:	e1a09002 	mov	r9, r2
   12aec:	e3a05004 	mov	r5, #4
   12af0:	e1a02006 	mov	r2, r6
   12af4:	e1a01008 	mov	r1, r8
   12af8:	e1a00007 	mov	r0, r7
   12afc:	ebffff0f 	bl	12740 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   12b00:	e1500006 	cmp	r0, r6
   12b04:	e1a04000 	mov	r4, r0
   12b08:	1a000001 	bne	12b14 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   12b0c:	e1a00009 	mov	r0, r9
   12b10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b14:	e1a00007 	mov	r0, r7
   12b18:	ebffff9a 	bl	12988 <CUSBBulkOnlyMassStorageDevice::Reset()>
   12b1c:	e3500000 	cmp	r0, #0
   12b20:	1a000004 	bne	12b38 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   12b24:	e2555001 	subs	r5, r5, #1
   12b28:	1afffff0 	bne	12af0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   12b2c:	e1a09004 	mov	r9, r4
   12b30:	e1a00009 	mov	r0, r9
   12b34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b38:	e1a09000 	mov	r9, r0
   12b3c:	eafffff2 	b	12b0c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

00012b40 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   12b40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b44:	e1a06002 	mov	r6, r2
   12b48:	e1a07000 	mov	r7, r0
   12b4c:	e1a08001 	mov	r8, r1
   12b50:	e1a09002 	mov	r9, r2
   12b54:	e3a05004 	mov	r5, #4
   12b58:	e1a02006 	mov	r2, r6
   12b5c:	e1a01008 	mov	r1, r8
   12b60:	e1a00007 	mov	r0, r7
   12b64:	ebffff3f 	bl	12868 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   12b68:	e1500006 	cmp	r0, r6
   12b6c:	e1a04000 	mov	r4, r0
   12b70:	1a000001 	bne	12b7c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   12b74:	e1a00009 	mov	r0, r9
   12b78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b7c:	e1a00007 	mov	r0, r7
   12b80:	ebffff80 	bl	12988 <CUSBBulkOnlyMassStorageDevice::Reset()>
   12b84:	e3500000 	cmp	r0, #0
   12b88:	1a000004 	bne	12ba0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   12b8c:	e2555001 	subs	r5, r5, #1
   12b90:	1afffff0 	bne	12b58 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   12b94:	e1a09004 	mov	r9, r4
   12b98:	e1a00009 	mov	r0, r9
   12b9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ba0:	e1a09000 	mov	r9, r0
   12ba4:	eafffff2 	b	12b74 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00012ba8 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   12ba8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bac:	e24dd064 	sub	sp, sp, #100	; 0x64
   12bb0:	e1a05000 	mov	r5, r0
   12bb4:	ebfff058 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   12bb8:	e3500001 	cmp	r0, #1
   12bbc:	c3a06005 	movgt	r6, #5
   12bc0:	c3a07014 	movgt	r7, #20
   12bc4:	ca000004 	bgt	12bdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   12bc8:	ea0000e6 	b	12f68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c0>
   12bcc:	e5d43003 	ldrb	r3, [r4, #3]
   12bd0:	e203303f 	and	r3, r3, #63	; 0x3f
   12bd4:	e3530002 	cmp	r3, #2
   12bd8:	0a0000a2 	beq	12e68 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   12bdc:	e1a01006 	mov	r1, r6
   12be0:	e1a00005 	mov	r0, r5
   12be4:	ebfff079 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   12be8:	e2504000 	subs	r4, r0, #0
   12bec:	1afffff6 	bne	12bcc <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   12bf0:	e5953010 	ldr	r3, [r5, #16]
   12bf4:	e1a00005 	mov	r0, r5
   12bf8:	e3530000 	cmp	r3, #0
   12bfc:	0a0000b2 	beq	12ecc <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   12c00:	e5953014 	ldr	r3, [r5, #20]
   12c04:	e3530000 	cmp	r3, #0
   12c08:	0a0000af 	beq	12ecc <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   12c0c:	ebffef8a 	bl	ea3c <CUSBFunction::Configure()>
   12c10:	e2506000 	subs	r6, r0, #0
   12c14:	0a0000a4 	beq	12eac <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   12c18:	e3a0c024 	mov	ip, #36	; 0x24
   12c1c:	e3a06001 	mov	r6, #1
   12c20:	e3a07012 	mov	r7, #18
   12c24:	e58dc000 	str	ip, [sp]
   12c28:	e58d6004 	str	r6, [sp, #4]
   12c2c:	e28d303c 	add	r3, sp, #60	; 0x3c
   12c30:	e3a02006 	mov	r2, #6
   12c34:	e28d100c 	add	r1, sp, #12
   12c38:	e1a00005 	mov	r0, r5
   12c3c:	e5cd400d 	strb	r4, [sp, #13]
   12c40:	e5cd400e 	strb	r4, [sp, #14]
   12c44:	e5cd400f 	strb	r4, [sp, #15]
   12c48:	e5cd4011 	strb	r4, [sp, #17]
   12c4c:	e5cdc010 	strb	ip, [sp, #16]
   12c50:	e5cd700c 	strb	r7, [sp, #12]
   12c54:	ebfffe0c 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12c58:	e3500024 	cmp	r0, #36	; 0x24
   12c5c:	1a0000b8 	bne	12f44 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
   12c60:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   12c64:	e213301f 	ands	r3, r3, #31
   12c68:	1a0000ab 	bne	12f1c <CUSBBulkOnlyMassStorageDevice::Configure()+0x374>
   12c6c:	e1a04003 	mov	r4, r3
   12c70:	e3a06063 	mov	r6, #99	; 0x63
   12c74:	e3a0a064 	mov	sl, #100	; 0x64
   12c78:	e3a08006 	mov	r8, #6
   12c7c:	e3a0b003 	mov	fp, #3
   12c80:	ea000010 	b	12cc8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   12c84:	e3a09001 	mov	r9, #1
   12c88:	e3a0c000 	mov	ip, #0
   12c8c:	e88d0280 	stm	sp, {r7, r9}
   12c90:	e28d3028 	add	r3, sp, #40	; 0x28
   12c94:	e1a02008 	mov	r2, r8
   12c98:	e28d101c 	add	r1, sp, #28
   12c9c:	e1a00005 	mov	r0, r5
   12ca0:	e5cdb01c 	strb	fp, [sp, #28]
   12ca4:	e1cd41be 	strh	r4, [sp, #30]
   12ca8:	e5cd7020 	strb	r7, [sp, #32]
   12cac:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   12cb0:	e5cdc01d 	strb	ip, [sp, #29]
   12cb4:	ebfffdf4 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12cb8:	e3500000 	cmp	r0, #0
   12cbc:	ba0000ae 	blt	12f7c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d4>
   12cc0:	e2566001 	subs	r6, r6, #1
   12cc4:	0a0000bb 	beq	12fb8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
   12cc8:	eb005abc 	bl	297c0 <CTimer::Get()>
   12ccc:	e1a0000a 	mov	r0, sl
   12cd0:	eb005a81 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   12cd4:	e58d4004 	str	r4, [sp, #4]
   12cd8:	e58d4000 	str	r4, [sp]
   12cdc:	e3a03000 	mov	r3, #0
   12ce0:	e1a02008 	mov	r2, r8
   12ce4:	e28d1014 	add	r1, sp, #20
   12ce8:	e1a00005 	mov	r0, r5
   12cec:	e5cd4014 	strb	r4, [sp, #20]
   12cf0:	e5cd4015 	strb	r4, [sp, #21]
   12cf4:	e5cd4016 	strb	r4, [sp, #22]
   12cf8:	e5cd4017 	strb	r4, [sp, #23]
   12cfc:	e5cd4018 	strb	r4, [sp, #24]
   12d00:	e5cd4019 	strb	r4, [sp, #25]
   12d04:	ebfffde0 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12d08:	e3500000 	cmp	r0, #0
   12d0c:	baffffdc 	blt	12c84 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   12d10:	e3a02008 	mov	r2, #8
   12d14:	e3a00025 	mov	r0, #37	; 0x25
   12d18:	e3a06001 	mov	r6, #1
   12d1c:	e3a0e000 	mov	lr, #0
   12d20:	e88d0044 	stm	sp, {r2, r6}
   12d24:	e5cd001c 	strb	r0, [sp, #28]
   12d28:	e28d3014 	add	r3, sp, #20
   12d2c:	e28d101c 	add	r1, sp, #28
   12d30:	e3a0200a 	mov	r2, #10
   12d34:	e1a00005 	mov	r0, r5
   12d38:	e1cd41be 	strh	r4, [sp, #30]
   12d3c:	e1cd42b0 	strh	r4, [sp, #32]
   12d40:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   12d44:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   12d48:	e5cde01d 	strb	lr, [sp, #29]
   12d4c:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12d50:	ebfffdcd 	bl	1248c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12d54:	e3500008 	cmp	r0, #8
   12d58:	1a00009c 	bne	12fd0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   12d5c:	e59d4018 	ldr	r4, [sp, #24]
   12d60:	e6bf4f34 	rev	r4, r4
   12d64:	e3540c02 	cmp	r4, #512	; 0x200
   12d68:	1a00008a 	bne	12f98 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f0>
   12d6c:	e59d3014 	ldr	r3, [sp, #20]
   12d70:	e6bf3f33 	rev	r3, r3
   12d74:	e3730001 	cmn	r3, #1
   12d78:	e585301c 	str	r3, [r5, #28]
   12d7c:	0a0000ab 	beq	13030 <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   12d80:	e2833001 	add	r3, r3, #1
   12d84:	e585301c 	str	r3, [r5, #28]
   12d88:	eb004dc0 	bl	26490 <CLogger::Get()>
   12d8c:	e595201c 	ldr	r2, [r5, #28]
   12d90:	e59f72d4 	ldr	r7, [pc, #724]	; 1306c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   12d94:	e1a025a2 	lsr	r2, r2, #11
   12d98:	e59f32d0 	ldr	r3, [pc, #720]	; 13070 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c8>
   12d9c:	e58d2000 	str	r2, [sp]
   12da0:	e59f12cc 	ldr	r1, [pc, #716]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12da4:	e3a02004 	mov	r2, #4
   12da8:	eb004cf5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dac:	e1a04006 	mov	r4, r6
   12db0:	e1a03006 	mov	r3, r6
   12db4:	e5971000 	ldr	r1, [r7]
   12db8:	ea000002 	b	12dc8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x220>
   12dbc:	e2833001 	add	r3, r3, #1
   12dc0:	e3530020 	cmp	r3, #32
   12dc4:	0a000088 	beq	12fec <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   12dc8:	e1a02314 	lsl	r2, r4, r3
   12dcc:	e1120001 	tst	r2, r1
   12dd0:	1afffff9 	bne	12dbc <CUSBBulkOnlyMassStorageDevice::Configure()+0x214>
   12dd4:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   12dd8:	e1822001 	orr	r2, r2, r1
   12ddc:	e3500000 	cmp	r0, #0
   12de0:	e5872000 	str	r2, [r7]
   12de4:	1a00009c 	bne	1305c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   12de8:	e585302c 	str	r3, [r5, #44]	; 0x2c
   12dec:	e28d0028 	add	r0, sp, #40	; 0x28
   12df0:	eb00518b 	bl	27424 <CString::CString()>
   12df4:	e28d0028 	add	r0, sp, #40	; 0x28
   12df8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   12dfc:	e59f1274 	ldr	r1, [pc, #628]	; 13078 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d0>
   12e00:	eb0056ca 	bl	28930 <CString::Format(char const*, ...)>
   12e04:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   12e08:	e3530000 	cmp	r3, #0
   12e0c:	1a00008e 	bne	1304c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   12e10:	e28d0028 	add	r0, sp, #40	; 0x28
   12e14:	eb005198 	bl	2747c <CString::operator char const*() const>
   12e18:	e1a08000 	mov	r8, r0
   12e1c:	e3a00024 	mov	r0, #36	; 0x24
   12e20:	eb005ec3 	bl	2a934 <operator new(unsigned int)>
   12e24:	e1a06000 	mov	r6, r0
   12e28:	e1a02008 	mov	r2, r8
   12e2c:	e1a01005 	mov	r1, r5
   12e30:	eb0016aa 	bl	188e0 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   12e34:	e5856028 	str	r6, [r5, #40]	; 0x28
   12e38:	e1a00006 	mov	r0, r6
   12e3c:	eb0016e5 	bl	189d8 <CPartitionManager::Initialize()>
   12e40:	e2506000 	subs	r6, r0, #0
   12e44:	1a00006f 	bne	13008 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   12e48:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   12e4c:	e5973000 	ldr	r3, [r7]
   12e50:	e585602c 	str	r6, [r5, #44]	; 0x2c
   12e54:	e1c34214 	bic	r4, r3, r4, lsl r2
   12e58:	e5874000 	str	r4, [r7]
   12e5c:	e28d0028 	add	r0, sp, #40	; 0x28
   12e60:	eb00513c 	bl	27358 <CString::~CString()>
   12e64:	ea000015 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12e68:	e1d430d2 	ldrsb	r3, [r4, #2]
   12e6c:	e3530000 	cmp	r3, #0
   12e70:	ba00001b 	blt	12ee4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
   12e74:	e5953014 	ldr	r3, [r5, #20]
   12e78:	e1a00005 	mov	r0, r5
   12e7c:	e3530000 	cmp	r3, #0
   12e80:	1a000011 	bne	12ecc <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   12e84:	ebffefb0 	bl	ed4c <CUSBFunction::GetDevice() const>
   12e88:	e1a09000 	mov	r9, r0
   12e8c:	e1a00007 	mov	r0, r7
   12e90:	eb005ea7 	bl	2a934 <operator new(unsigned int)>
   12e94:	e1a08000 	mov	r8, r0
   12e98:	e1a02004 	mov	r2, r4
   12e9c:	e1a01009 	mov	r1, r9
   12ea0:	ebffede6 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12ea4:	e5858014 	str	r8, [r5, #20]
   12ea8:	eaffff4b 	b	12bdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   12eac:	eb004d77 	bl	26490 <CLogger::Get()>
   12eb0:	e59f31c4 	ldr	r3, [pc, #452]	; 1307c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d4>
   12eb4:	e3a02001 	mov	r2, #1
   12eb8:	e59f11b4 	ldr	r1, [pc, #436]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12ebc:	eb004cb0 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ec0:	e1a00006 	mov	r0, r6
   12ec4:	e28dd064 	add	sp, sp, #100	; 0x64
   12ec8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ecc:	e3a06000 	mov	r6, #0
   12ed0:	e59f119c 	ldr	r1, [pc, #412]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12ed4:	ebffefc8 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   12ed8:	e1a00006 	mov	r0, r6
   12edc:	e28dd064 	add	sp, sp, #100	; 0x64
   12ee0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee4:	e5953010 	ldr	r3, [r5, #16]
   12ee8:	e1a00005 	mov	r0, r5
   12eec:	e3530000 	cmp	r3, #0
   12ef0:	1afffff5 	bne	12ecc <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   12ef4:	ebffef94 	bl	ed4c <CUSBFunction::GetDevice() const>
   12ef8:	e1a09000 	mov	r9, r0
   12efc:	e1a00007 	mov	r0, r7
   12f00:	eb005e8b 	bl	2a934 <operator new(unsigned int)>
   12f04:	e1a08000 	mov	r8, r0
   12f08:	e1a02004 	mov	r2, r4
   12f0c:	e1a01009 	mov	r1, r9
   12f10:	ebffedca 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12f14:	e5858010 	str	r8, [r5, #16]
   12f18:	eaffff2f 	b	12bdc <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   12f1c:	eb004d5b 	bl	26490 <CLogger::Get()>
   12f20:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   12f24:	e1a02006 	mov	r2, r6
   12f28:	e203301f 	and	r3, r3, #31
   12f2c:	e58d3000 	str	r3, [sp]
   12f30:	e59f113c 	ldr	r1, [pc, #316]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12f34:	e59f3144 	ldr	r3, [pc, #324]	; 13080 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d8>
   12f38:	e1a06004 	mov	r6, r4
   12f3c:	eb004c90 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f40:	eaffffde 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12f44:	eb004d51 	bl	26490 <CLogger::Get()>
   12f48:	e1a02006 	mov	r2, r6
   12f4c:	e1a06004 	mov	r6, r4
   12f50:	e59f312c 	ldr	r3, [pc, #300]	; 13084 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4dc>
   12f54:	e59f1118 	ldr	r1, [pc, #280]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12f58:	eb004c89 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f5c:	e1a00006 	mov	r0, r6
   12f60:	e28dd064 	add	sp, sp, #100	; 0x64
   12f64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f68:	e1a00005 	mov	r0, r5
   12f6c:	e59f1100 	ldr	r1, [pc, #256]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12f70:	ebffefa1 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   12f74:	e3a06000 	mov	r6, #0
   12f78:	eaffffd0 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12f7c:	eb004d43 	bl	26490 <CLogger::Get()>
   12f80:	e1a02009 	mov	r2, r9
   12f84:	e59f30fc 	ldr	r3, [pc, #252]	; 13088 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e0>
   12f88:	e59f10e4 	ldr	r1, [pc, #228]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12f8c:	eb004c7c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f90:	e3a06000 	mov	r6, #0
   12f94:	eaffffc9 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12f98:	eb004d3c 	bl	26490 <CLogger::Get()>
   12f9c:	e1a02006 	mov	r2, r6
   12fa0:	e58d4000 	str	r4, [sp]
   12fa4:	e59f30e0 	ldr	r3, [pc, #224]	; 1308c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e4>
   12fa8:	e59f10c4 	ldr	r1, [pc, #196]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12fac:	eb004c74 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12fb0:	e3a06000 	mov	r6, #0
   12fb4:	eaffffc1 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12fb8:	eb004d34 	bl	26490 <CLogger::Get()>
   12fbc:	e1a02009 	mov	r2, r9
   12fc0:	e59f30c8 	ldr	r3, [pc, #200]	; 13090 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e8>
   12fc4:	e59f10a8 	ldr	r1, [pc, #168]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12fc8:	eb004c6d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12fcc:	eaffffbb 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12fd0:	eb004d2e 	bl	26490 <CLogger::Get()>
   12fd4:	e1a02006 	mov	r2, r6
   12fd8:	e59f30b4 	ldr	r3, [pc, #180]	; 13094 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ec>
   12fdc:	e59f1090 	ldr	r1, [pc, #144]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12fe0:	eb004c67 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12fe4:	e3a06000 	mov	r6, #0
   12fe8:	eaffffb4 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12fec:	eb004d27 	bl	26490 <CLogger::Get()>
   12ff0:	e59f30a0 	ldr	r3, [pc, #160]	; 13098 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f0>
   12ff4:	e3a02001 	mov	r2, #1
   12ff8:	e59f1074 	ldr	r1, [pc, #116]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12ffc:	eb004c60 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13000:	e3a06000 	mov	r6, #0
   13004:	eaffffad 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13008:	eb004707 	bl	24c2c <CDeviceNameService::Get()>
   1300c:	e1a04000 	mov	r4, r0
   13010:	e28d0028 	add	r0, sp, #40	; 0x28
   13014:	eb005118 	bl	2747c <CString::operator char const*() const>
   13018:	e1a02005 	mov	r2, r5
   1301c:	e1a01000 	mov	r1, r0
   13020:	e3a03001 	mov	r3, #1
   13024:	e1a00004 	mov	r0, r4
   13028:	eb004645 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1302c:	eaffff8a 	b	12e5c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b4>
   13030:	eb004d16 	bl	26490 <CLogger::Get()>
   13034:	e1a02006 	mov	r2, r6
   13038:	e59f305c 	ldr	r3, [pc, #92]	; 1309c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f4>
   1303c:	e59f1030 	ldr	r1, [pc, #48]	; 13074 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13040:	eb004c4f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13044:	e3a06000 	mov	r6, #0
   13048:	eaffff9c 	b	12ec0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   1304c:	e59f204c 	ldr	r2, [pc, #76]	; 130a0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f8>
   13050:	e59f104c 	ldr	r1, [pc, #76]	; 130a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   13054:	e59f004c 	ldr	r0, [pc, #76]	; 130a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x500>
   13058:	eb004419 	bl	240c4 <assertion_failed>
   1305c:	e59f2048 	ldr	r2, [pc, #72]	; 130ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x504>
   13060:	e59f103c 	ldr	r1, [pc, #60]	; 130a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   13064:	e59f0044 	ldr	r0, [pc, #68]	; 130b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x508>
   13068:	eb004415 	bl	240c4 <assertion_failed>
   1306c:	00050140 	.word	0x00050140
   13070:	0004256c 	.word	0x0004256c
   13074:	00042324 	.word	0x00042324
   13078:	0004259c 	.word	0x0004259c
   1307c:	00041a90 	.word	0x00041a90
   13080:	000424e4 	.word	0x000424e4
   13084:	000424cc 	.word	0x000424cc
   13088:	00042504 	.word	0x00042504
   1308c:	00042534 	.word	0x00042534
   13090:	000425c0 	.word	0x000425c0
   13094:	0004251c 	.word	0x0004251c
   13098:	00041768 	.word	0x00041768
   1309c:	00042550 	.word	0x00042550
   130a0:	0000019d 	.word	0x0000019d
   130a4:	00042334 	.word	0x00042334
   130a8:	000425a4 	.word	0x000425a4
   130ac:	00000197 	.word	0x00000197
   130b0:	00042584 	.word	0x00042584

000130b4 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   130b4:	e92d4070 	push	{r4, r5, r6, lr}
   130b8:	e1a04000 	mov	r4, r0
   130bc:	e5900020 	ldr	r0, [r0, #32]
   130c0:	e59f304c 	ldr	r3, [pc, #76]	; 13114 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   130c4:	e3500000 	cmp	r0, #0
   130c8:	e5843000 	str	r3, [r4]
   130cc:	0a000002 	beq	130dc <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   130d0:	eb005e1f 	bl	2a954 <operator delete[](void*)>
   130d4:	e3a03000 	mov	r3, #0
   130d8:	e5843020 	str	r3, [r4, #32]
   130dc:	e5945010 	ldr	r5, [r4, #16]
   130e0:	e3550000 	cmp	r5, #0
   130e4:	0a000006 	beq	13104 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   130e8:	e1a00005 	mov	r0, r5
   130ec:	ebffedbd 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   130f0:	e1a00005 	mov	r0, r5
   130f4:	e3a01014 	mov	r1, #20
   130f8:	eb005e1b 	bl	2a96c <operator delete(void*, unsigned int)>
   130fc:	e3a03000 	mov	r3, #0
   13100:	e5843010 	str	r3, [r4, #16]
   13104:	e1a00004 	mov	r0, r4
   13108:	ebffee22 	bl	e998 <CUSBFunction::~CUSBFunction()>
   1310c:	e1a00004 	mov	r0, r4
   13110:	e8bd8070 	pop	{r4, r5, r6, pc}
   13114:	000425dc 	.word	0x000425dc

00013118 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13118:	e92d4010 	push	{r4, lr}
   1311c:	e1a04000 	mov	r4, r0
   13120:	ebffffe3 	bl	130b4 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   13124:	e1a00004 	mov	r0, r4
   13128:	e3a01028 	mov	r1, #40	; 0x28
   1312c:	eb005e0e 	bl	2a96c <operator delete(void*, unsigned int)>
   13130:	e1a00004 	mov	r0, r4
   13134:	e8bd8010 	pop	{r4, pc}

00013138 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   13138:	e92d4010 	push	{r4, lr}
   1313c:	e1a04000 	mov	r4, r0
   13140:	ebffeea5 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13144:	e3a03000 	mov	r3, #0
   13148:	e59f201c 	ldr	r2, [pc, #28]	; 1316c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   1314c:	e5843010 	str	r3, [r4, #16]
   13150:	e5842000 	str	r2, [r4]
   13154:	e5843014 	str	r3, [r4, #20]
   13158:	e5843018 	str	r3, [r4, #24]
   1315c:	e5843020 	str	r3, [r4, #32]
   13160:	e5843024 	str	r3, [r4, #36]	; 0x24
   13164:	e1a00004 	mov	r0, r4
   13168:	e8bd8010 	pop	{r4, pc}
   1316c:	000425dc 	.word	0x000425dc

00013170 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   13170:	e5903014 	ldr	r3, [r0, #20]
   13174:	e92d4010 	push	{r4, lr}
   13178:	e3530000 	cmp	r3, #0
   1317c:	1a000006 	bne	1319c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   13180:	e3510000 	cmp	r1, #0
   13184:	e5801014 	str	r1, [r0, #20]
   13188:	18bd8010 	popne	{r4, pc}
   1318c:	e3a0209b 	mov	r2, #155	; 0x9b
   13190:	e59f1014 	ldr	r1, [pc, #20]	; 131ac <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   13194:	e59f0014 	ldr	r0, [pc, #20]	; 131b0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   13198:	eb0043c9 	bl	240c4 <assertion_failed>
   1319c:	e3a02099 	mov	r2, #153	; 0x99
   131a0:	e59f1004 	ldr	r1, [pc, #4]	; 131ac <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   131a4:	e59f0008 	ldr	r0, [pc, #8]	; 131b4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   131a8:	eb0043c5 	bl	240c4 <assertion_failed>
   131ac:	00042648 	.word	0x00042648
   131b0:	0004266c 	.word	0x0004266c
   131b4:	00042654 	.word	0x00042654

000131b8 <CUSBMIDIDevice::StartRequest()>:
   131b8:	e92d4070 	push	{r4, r5, r6, lr}
   131bc:	e5903010 	ldr	r3, [r0, #16]
   131c0:	e24dd008 	sub	sp, sp, #8
   131c4:	e3530000 	cmp	r3, #0
   131c8:	0a000022 	beq	13258 <CUSBMIDIDevice::StartRequest()+0xa0>
   131cc:	e5903020 	ldr	r3, [r0, #32]
   131d0:	e1a04000 	mov	r4, r0
   131d4:	e3530000 	cmp	r3, #0
   131d8:	0a000022 	beq	13268 <CUSBMIDIDevice::StartRequest()+0xb0>
   131dc:	e5905018 	ldr	r5, [r0, #24]
   131e0:	e3550000 	cmp	r5, #0
   131e4:	1a000023 	bne	13278 <CUSBMIDIDevice::StartRequest()+0xc0>
   131e8:	e1d031bc 	ldrh	r3, [r0, #28]
   131ec:	e3530000 	cmp	r3, #0
   131f0:	0a000024 	beq	13288 <CUSBMIDIDevice::StartRequest()+0xd0>
   131f4:	e3a00028 	mov	r0, #40	; 0x28
   131f8:	eb000346 	bl	13f18 <CUSBRequest::operator new(unsigned int)>
   131fc:	e1a06000 	mov	r6, r0
   13200:	e1d431bc 	ldrh	r3, [r4, #28]
   13204:	e5942020 	ldr	r2, [r4, #32]
   13208:	e5941010 	ldr	r1, [r4, #16]
   1320c:	e58d5000 	str	r5, [sp]
   13210:	eb0002bb 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13214:	e1a03004 	mov	r3, r4
   13218:	e1a02005 	mov	r2, r5
   1321c:	e59f1074 	ldr	r1, [pc, #116]	; 13298 <CUSBMIDIDevice::StartRequest()+0xe0>
   13220:	e1a00006 	mov	r0, r6
   13224:	e5846018 	str	r6, [r4, #24]
   13228:	eb000319 	bl	13e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1322c:	e5940018 	ldr	r0, [r4, #24]
   13230:	eb000333 	bl	13f04 <CUSBRequest::SetCompleteOnNAK()>
   13234:	e1a00004 	mov	r0, r4
   13238:	ebffeed9 	bl	eda4 <CUSBFunction::GetHost() const>
   1323c:	e1a02005 	mov	r2, r5
   13240:	e5903000 	ldr	r3, [r0]
   13244:	e5941018 	ldr	r1, [r4, #24]
   13248:	e593300c 	ldr	r3, [r3, #12]
   1324c:	e28dd008 	add	sp, sp, #8
   13250:	e8bd4070 	pop	{r4, r5, r6, lr}
   13254:	e12fff13 	bx	r3
   13258:	e3a020a0 	mov	r2, #160	; 0xa0
   1325c:	e59f1038 	ldr	r1, [pc, #56]	; 1329c <CUSBMIDIDevice::StartRequest()+0xe4>
   13260:	e59f0038 	ldr	r0, [pc, #56]	; 132a0 <CUSBMIDIDevice::StartRequest()+0xe8>
   13264:	eb004396 	bl	240c4 <assertion_failed>
   13268:	e3a020a1 	mov	r2, #161	; 0xa1
   1326c:	e59f1028 	ldr	r1, [pc, #40]	; 1329c <CUSBMIDIDevice::StartRequest()+0xe4>
   13270:	e59f002c 	ldr	r0, [pc, #44]	; 132a4 <CUSBMIDIDevice::StartRequest()+0xec>
   13274:	eb004392 	bl	240c4 <assertion_failed>
   13278:	e3a020a3 	mov	r2, #163	; 0xa3
   1327c:	e59f1018 	ldr	r1, [pc, #24]	; 1329c <CUSBMIDIDevice::StartRequest()+0xe4>
   13280:	e59f0020 	ldr	r0, [pc, #32]	; 132a8 <CUSBMIDIDevice::StartRequest()+0xf0>
   13284:	eb00438e 	bl	240c4 <assertion_failed>
   13288:	e3a020a4 	mov	r2, #164	; 0xa4
   1328c:	e59f1008 	ldr	r1, [pc, #8]	; 1329c <CUSBMIDIDevice::StartRequest()+0xe4>
   13290:	e59f0014 	ldr	r0, [pc, #20]	; 132ac <CUSBMIDIDevice::StartRequest()+0xf4>
   13294:	eb00438a 	bl	240c4 <assertion_failed>
   13298:	000134bc 	.word	0x000134bc
   1329c:	00042648 	.word	0x00042648
   132a0:	00042684 	.word	0x00042684
   132a4:	00042698 	.word	0x00042698
   132a8:	000421f4 	.word	0x000421f4
   132ac:	000426b0 	.word	0x000426b0

000132b0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   132b0:	e3520000 	cmp	r2, #0
   132b4:	e92d4010 	push	{r4, lr}
   132b8:	0a000007 	beq	132dc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   132bc:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   132c0:	e1500003 	cmp	r0, r3
   132c4:	1a000008 	bne	132ec <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   132c8:	e8bd4010 	pop	{r4, lr}
   132cc:	e3a03000 	mov	r3, #0
   132d0:	e1a00002 	mov	r0, r2
   132d4:	e5823024 	str	r3, [r2, #36]	; 0x24
   132d8:	eaffffb6 	b	131b8 <CUSBMIDIDevice::StartRequest()>
   132dc:	e3a020f0 	mov	r2, #240	; 0xf0
   132e0:	e59f1014 	ldr	r1, [pc, #20]	; 132fc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   132e4:	e59f0014 	ldr	r0, [pc, #20]	; 13300 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   132e8:	eb004375 	bl	240c4 <assertion_failed>
   132ec:	e3a020e7 	mov	r2, #231	; 0xe7
   132f0:	e59f1004 	ldr	r1, [pc, #4]	; 132fc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   132f4:	e59f0008 	ldr	r0, [pc, #8]	; 13304 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   132f8:	eb004371 	bl	240c4 <assertion_failed>
   132fc:	00042648 	.word	0x00042648
   13300:	000408c0 	.word	0x000408c0
   13304:	000426c4 	.word	0x000426c4

00013308 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   13308:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1330c:	e2514000 	subs	r4, r1, #0
   13310:	e24dd00c 	sub	sp, sp, #12
   13314:	0a000050 	beq	1345c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   13318:	e5903018 	ldr	r3, [r0, #24]
   1331c:	e1a05000 	mov	r5, r0
   13320:	e1540003 	cmp	r4, r3
   13324:	1a000050 	bne	1346c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   13328:	e1a00004 	mov	r0, r4
   1332c:	eb0002a5 	bl	13dc8 <CUSBRequest::GetStatus() const>
   13330:	e3500000 	cmp	r0, #0
   13334:	1a00001a 	bne	133a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x9c>
   13338:	e5954018 	ldr	r4, [r5, #24]
   1333c:	e3540000 	cmp	r4, #0
   13340:	13a09000 	movne	r9, #0
   13344:	0a000008 	beq	1336c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   13348:	e1a00004 	mov	r0, r4
   1334c:	eb00028d 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   13350:	e1a00004 	mov	r0, r4
   13354:	e3a01028 	mov	r1, #40	; 0x28
   13358:	eb000303 	bl	13f6c <CUSBRequest::operator delete(void*, unsigned int)>
   1335c:	e3a03000 	mov	r3, #0
   13360:	e1590003 	cmp	r9, r3
   13364:	e5853018 	str	r3, [r5, #24]
   13368:	1a000033 	bne	1343c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x134>
   1336c:	e5954024 	ldr	r4, [r5, #36]	; 0x24
   13370:	e3540000 	cmp	r4, #0
   13374:	1a000040 	bne	1347c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   13378:	eb005910 	bl	297c0 <CTimer::Get()>
   1337c:	e58d5000 	str	r5, [sp]
   13380:	e1a03004 	mov	r3, r4
   13384:	e59f2110 	ldr	r2, [pc, #272]	; 1349c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   13388:	e3a01001 	mov	r1, #1
   1338c:	eb00574b 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13390:	e3500000 	cmp	r0, #0
   13394:	e5850024 	str	r0, [r5, #36]	; 0x24
   13398:	0a00002b 	beq	1344c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   1339c:	e28dd00c 	add	sp, sp, #12
   133a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   133a4:	e1a00004 	mov	r0, r4
   133a8:	eb000288 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   133ac:	e2109003 	ands	r9, r0, #3
   133b0:	1affffe0 	bne	13338 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   133b4:	e5956020 	ldr	r6, [r5, #32]
   133b8:	e3560000 	cmp	r6, #0
   133bc:	0a000032 	beq	1348c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   133c0:	e1a00004 	mov	r0, r4
   133c4:	eb000281 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   133c8:	e5954020 	ldr	r4, [r5, #32]
   133cc:	e0866000 	add	r6, r6, r0
   133d0:	e1560004 	cmp	r6, r4
   133d4:	9affffd7 	bls	13338 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   133d8:	e3a07001 	mov	r7, #1
   133dc:	e59f80bc 	ldr	r8, [pc, #188]	; 134a0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   133e0:	e2844001 	add	r4, r4, #1
   133e4:	e5540001 	ldrb	r0, [r4, #-1]
   133e8:	e3500000 	cmp	r0, #0
   133ec:	0a00000a 	beq	1341c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   133f0:	e5959014 	ldr	r9, [r5, #20]
   133f4:	e3590000 	cmp	r9, #0
   133f8:	01a09007 	moveq	r9, r7
   133fc:	0a000006 	beq	1341c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   13400:	e200300f 	and	r3, r0, #15
   13404:	e0883103 	add	r3, r8, r3, lsl #2
   13408:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1340c:	e1a00220 	lsr	r0, r0, #4
   13410:	e1a01004 	mov	r1, r4
   13414:	e12fff39 	blx	r9
   13418:	e1a09007 	mov	r9, r7
   1341c:	e2843003 	add	r3, r4, #3
   13420:	e1560003 	cmp	r6, r3
   13424:	e2844004 	add	r4, r4, #4
   13428:	8affffed 	bhi	133e4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   1342c:	e5954018 	ldr	r4, [r5, #24]
   13430:	e3540000 	cmp	r4, #0
   13434:	1affffc3 	bne	13348 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   13438:	eaffffc7 	b	1335c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x54>
   1343c:	e1a00005 	mov	r0, r5
   13440:	e28dd00c 	add	sp, sp, #12
   13444:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   13448:	eaffff5a 	b	131b8 <CUSBMIDIDevice::StartRequest()>
   1344c:	e3a020d9 	mov	r2, #217	; 0xd9
   13450:	e59f104c 	ldr	r1, [pc, #76]	; 134a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13454:	e59f004c 	ldr	r0, [pc, #76]	; 134a8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   13458:	eb004319 	bl	240c4 <assertion_failed>
   1345c:	e3a020b0 	mov	r2, #176	; 0xb0
   13460:	e59f103c 	ldr	r1, [pc, #60]	; 134a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13464:	e59f0040 	ldr	r0, [pc, #64]	; 134ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13468:	eb004315 	bl	240c4 <assertion_failed>
   1346c:	e3a020b1 	mov	r2, #177	; 0xb1
   13470:	e59f102c 	ldr	r1, [pc, #44]	; 134a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13474:	e59f0034 	ldr	r0, [pc, #52]	; 134b0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a8>
   13478:	eb004311 	bl	240c4 <assertion_failed>
   1347c:	e3a020d7 	mov	r2, #215	; 0xd7
   13480:	e59f101c 	ldr	r1, [pc, #28]	; 134a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13484:	e59f0028 	ldr	r0, [pc, #40]	; 134b4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   13488:	eb00430d 	bl	240c4 <assertion_failed>
   1348c:	e3a020b8 	mov	r2, #184	; 0xb8
   13490:	e59f100c 	ldr	r1, [pc, #12]	; 134a4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13494:	e59f001c 	ldr	r0, [pc, #28]	; 134b8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   13498:	eb004309 	bl	240c4 <assertion_failed>
   1349c:	000132b0 	.word	0x000132b0
   134a0:	000425d4 	.word	0x000425d4
   134a4:	00042648 	.word	0x00042648
   134a8:	000426e8 	.word	0x000426e8
   134ac:	000409ac 	.word	0x000409ac
   134b0:	00042218 	.word	0x00042218
   134b4:	000426d8 	.word	0x000426d8
   134b8:	00042698 	.word	0x00042698

000134bc <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   134bc:	e3520000 	cmp	r2, #0
   134c0:	0a000002 	beq	134d0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   134c4:	e1a01000 	mov	r1, r0
   134c8:	e1a00002 	mov	r0, r2
   134cc:	eaffff8d 	b	13308 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   134d0:	e92d4010 	push	{r4, lr}
   134d4:	e3a020e0 	mov	r2, #224	; 0xe0
   134d8:	e59f1004 	ldr	r1, [pc, #4]	; 134e4 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   134dc:	e59f0004 	ldr	r0, [pc, #4]	; 134e8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   134e0:	eb0042f7 	bl	240c4 <assertion_failed>
   134e4:	00042648 	.word	0x00042648
   134e8:	000408c0 	.word	0x000408c0

000134ec <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   134ec:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   134f0:	e1520001 	cmp	r2, r1
   134f4:	1a000002 	bne	13504 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   134f8:	e3a02000 	mov	r2, #0
   134fc:	e5802024 	str	r2, [r0, #36]	; 0x24
   13500:	eaffff2c 	b	131b8 <CUSBMIDIDevice::StartRequest()>
   13504:	e92d4010 	push	{r4, lr}
   13508:	e3a020e7 	mov	r2, #231	; 0xe7
   1350c:	e59f1004 	ldr	r1, [pc, #4]	; 13518 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13510:	e59f0004 	ldr	r0, [pc, #4]	; 1351c <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13514:	eb0042ea 	bl	240c4 <assertion_failed>
   13518:	00042648 	.word	0x00042648
   1351c:	000426c4 	.word	0x000426c4

00013520 <CUSBMIDIDevice::Configure()>:
   13520:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13524:	e24dd014 	sub	sp, sp, #20
   13528:	e1a05000 	mov	r5, r0
   1352c:	ebffedfa 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   13530:	e2506000 	subs	r6, r0, #0
   13534:	e1a00005 	mov	r0, r5
   13538:	0a000065 	beq	136d4 <CUSBMIDIDevice::Configure()+0x1b4>
   1353c:	ebffee02 	bl	ed4c <CUSBFunction::GetDevice() const>
   13540:	ebffe885 	bl	d75c <CUSBDevice::GetDeviceDescriptor() const>
   13544:	e3500000 	cmp	r0, #0
   13548:	0a000072 	beq	13718 <CUSBMIDIDevice::Configure()+0x1f8>
   1354c:	e5d03008 	ldrb	r3, [r0, #8]
   13550:	e5d01009 	ldrb	r1, [r0, #9]
   13554:	e59f21e0 	ldr	r2, [pc, #480]	; 1373c <CUSBMIDIDevice::Configure()+0x21c>
   13558:	e1833401 	orr	r3, r3, r1, lsl #8
   1355c:	e1530002 	cmp	r3, r2
   13560:	05d0700a 	ldrbeq	r7, [r0, #10]
   13564:	05d0200b 	ldrbeq	r2, [r0, #11]
   13568:	059f31d0 	ldreq	r3, [pc, #464]	; 13740 <CUSBMIDIDevice::Configure()+0x220>
   1356c:	01877402 	orreq	r7, r7, r2, lsl #8
   13570:	00477003 	subeq	r7, r7, r3
   13574:	016f7f17 	clzeq	r7, r7
   13578:	13a07000 	movne	r7, #0
   1357c:	e3a06005 	mov	r6, #5
   13580:	e3a08014 	mov	r8, #20
   13584:	e3a09025 	mov	r9, #37	; 0x25
   13588:	01a072a7 	lsreq	r7, r7, #5
   1358c:	e1a01006 	mov	r1, r6
   13590:	e1a00005 	mov	r0, r5
   13594:	ebffee0d 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   13598:	e2504000 	subs	r4, r0, #0
   1359c:	0a00002b 	beq	13650 <CUSBMIDIDevice::Configure()+0x130>
   135a0:	e1d430d2 	ldrsb	r3, [r4, #2]
   135a4:	e3530000 	cmp	r3, #0
   135a8:	aafffff7 	bge	1358c <CUSBMIDIDevice::Configure()+0x6c>
   135ac:	e5d43003 	ldrb	r3, [r4, #3]
   135b0:	e203303f 	and	r3, r3, #63	; 0x3f
   135b4:	e3530002 	cmp	r3, #2
   135b8:	1afffff3 	bne	1358c <CUSBMIDIDevice::Configure()+0x6c>
   135bc:	e3570000 	cmp	r7, #0
   135c0:	0a000018 	beq	13628 <CUSBMIDIDevice::Configure()+0x108>
   135c4:	e5953010 	ldr	r3, [r5, #16]
   135c8:	e3530000 	cmp	r3, #0
   135cc:	1a000055 	bne	13728 <CUSBMIDIDevice::Configure()+0x208>
   135d0:	e1a00005 	mov	r0, r5
   135d4:	ebffeddc 	bl	ed4c <CUSBFunction::GetDevice() const>
   135d8:	e1a0b000 	mov	fp, r0
   135dc:	e1a00008 	mov	r0, r8
   135e0:	eb005cd3 	bl	2a934 <operator new(unsigned int)>
   135e4:	e1a0a000 	mov	sl, r0
   135e8:	e1a02004 	mov	r2, r4
   135ec:	e1a0100b 	mov	r1, fp
   135f0:	ebffec12 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   135f4:	e585a010 	str	sl, [r5, #16]
   135f8:	e5d40004 	ldrb	r0, [r4, #4]
   135fc:	e5d42005 	ldrb	r2, [r4, #5]
   13600:	e5953020 	ldr	r3, [r5, #32]
   13604:	e1800402 	orr	r0, r0, r2, lsl #8
   13608:	e3c00003 	bic	r0, r0, #3
   1360c:	e6ff0070 	uxth	r0, r0
   13610:	e3530000 	cmp	r3, #0
   13614:	e1c501bc 	strh	r0, [r5, #28]
   13618:	1a00003a 	bne	13708 <CUSBMIDIDevice::Configure()+0x1e8>
   1361c:	eb005cc5 	bl	2a938 <operator new[](unsigned int)>
   13620:	e5850020 	str	r0, [r5, #32]
   13624:	eaffffd8 	b	1358c <CUSBMIDIDevice::Configure()+0x6c>
   13628:	e1a01009 	mov	r1, r9
   1362c:	e1a00005 	mov	r0, r5
   13630:	ebffede6 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   13634:	e3500000 	cmp	r0, #0
   13638:	0affffd3 	beq	1358c <CUSBMIDIDevice::Configure()+0x6c>
   1363c:	e5d43000 	ldrb	r3, [r4]
   13640:	e0843003 	add	r3, r4, r3
   13644:	e1500003 	cmp	r0, r3
   13648:	1affffcf 	bne	1358c <CUSBMIDIDevice::Configure()+0x6c>
   1364c:	eaffffdc 	b	135c4 <CUSBMIDIDevice::Configure()+0xa4>
   13650:	e5956010 	ldr	r6, [r5, #16]
   13654:	e1a00005 	mov	r0, r5
   13658:	e3560000 	cmp	r6, #0
   1365c:	0a00001c 	beq	136d4 <CUSBMIDIDevice::Configure()+0x1b4>
   13660:	ebffecf5 	bl	ea3c <CUSBFunction::Configure()>
   13664:	e2506000 	subs	r6, r0, #0
   13668:	0a00001e 	beq	136e8 <CUSBMIDIDevice::Configure()+0x1c8>
   1366c:	e1a0000d 	mov	r0, sp
   13670:	eb004f6b 	bl	27424 <CString::CString()>
   13674:	e59f30c8 	ldr	r3, [pc, #200]	; 13744 <CUSBMIDIDevice::Configure()+0x224>
   13678:	e59f10c8 	ldr	r1, [pc, #200]	; 13748 <CUSBMIDIDevice::Configure()+0x228>
   1367c:	e5932000 	ldr	r2, [r3]
   13680:	e1a0000d 	mov	r0, sp
   13684:	e282c001 	add	ip, r2, #1
   13688:	e583c000 	str	ip, [r3]
   1368c:	eb0054a7 	bl	28930 <CString::Format(char const*, ...)>
   13690:	eb004565 	bl	24c2c <CDeviceNameService::Get()>
   13694:	e1a06000 	mov	r6, r0
   13698:	e1a0000d 	mov	r0, sp
   1369c:	eb004f76 	bl	2747c <CString::operator char const*() const>
   136a0:	e1a03004 	mov	r3, r4
   136a4:	e1a01000 	mov	r1, r0
   136a8:	e1a02005 	mov	r2, r5
   136ac:	e1a00006 	mov	r0, r6
   136b0:	eb0044a3 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   136b4:	e1a00005 	mov	r0, r5
   136b8:	ebfffebe 	bl	131b8 <CUSBMIDIDevice::StartRequest()>
   136bc:	e1a06000 	mov	r6, r0
   136c0:	e1a0000d 	mov	r0, sp
   136c4:	eb004f23 	bl	27358 <CString::~CString()>
   136c8:	e1a00006 	mov	r0, r6
   136cc:	e28dd014 	add	sp, sp, #20
   136d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d4:	e59f1070 	ldr	r1, [pc, #112]	; 1374c <CUSBMIDIDevice::Configure()+0x22c>
   136d8:	ebffedc7 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   136dc:	e1a00006 	mov	r0, r6
   136e0:	e28dd014 	add	sp, sp, #20
   136e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e8:	eb004b68 	bl	26490 <CLogger::Get()>
   136ec:	e59f305c 	ldr	r3, [pc, #92]	; 13750 <CUSBMIDIDevice::Configure()+0x230>
   136f0:	e3a02001 	mov	r2, #1
   136f4:	e59f1050 	ldr	r1, [pc, #80]	; 1374c <CUSBMIDIDevice::Configure()+0x22c>
   136f8:	eb004aa1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136fc:	e1a00006 	mov	r0, r6
   13700:	e28dd014 	add	sp, sp, #20
   13704:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13708:	e3a0207d 	mov	r2, #125	; 0x7d
   1370c:	e59f1040 	ldr	r1, [pc, #64]	; 13754 <CUSBMIDIDevice::Configure()+0x234>
   13710:	e59f0040 	ldr	r0, [pc, #64]	; 13758 <CUSBMIDIDevice::Configure()+0x238>
   13714:	eb00426a 	bl	240c4 <assertion_failed>
   13718:	e3a02051 	mov	r2, #81	; 0x51
   1371c:	e59f1030 	ldr	r1, [pc, #48]	; 13754 <CUSBMIDIDevice::Configure()+0x234>
   13720:	e59f0034 	ldr	r0, [pc, #52]	; 1375c <CUSBMIDIDevice::Configure()+0x23c>
   13724:	eb004266 	bl	240c4 <assertion_failed>
   13728:	e1a00005 	mov	r0, r5
   1372c:	e59f1018 	ldr	r1, [pc, #24]	; 1374c <CUSBMIDIDevice::Configure()+0x22c>
   13730:	ebffedb1 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13734:	e3a06000 	mov	r6, #0
   13738:	eaffffe2 	b	136c8 <CUSBMIDIDevice::Configure()+0x1a8>
   1373c:	00000582 	.word	0x00000582
   13740:	0000012a 	.word	0x0000012a
   13744:	00049988 	.word	0x00049988
   13748:	00042724 	.word	0x00042724
   1374c:	00042640 	.word	0x00042640
   13750:	00041a90 	.word	0x00041a90
   13754:	00042648 	.word	0x00042648
   13758:	0004270c 	.word	0x0004270c
   1375c:	000426f8 	.word	0x000426f8

00013760 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13760:	e92d4010 	push	{r4, lr}
   13764:	e1a04000 	mov	r4, r0
   13768:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1376c:	e59f3044 	ldr	r3, [pc, #68]	; 137b8 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13770:	e3500000 	cmp	r0, #0
   13774:	e5843000 	str	r3, [r4]
   13778:	0a000002 	beq	13788 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   1377c:	e5903000 	ldr	r3, [r0]
   13780:	e5933004 	ldr	r3, [r3, #4]
   13784:	e12fff33 	blx	r3
   13788:	e3a03000 	mov	r3, #0
   1378c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13790:	e5843024 	str	r3, [r4, #36]	; 0x24
   13794:	e1500003 	cmp	r0, r3
   13798:	0a000000 	beq	137a0 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   1379c:	eb005c6c 	bl	2a954 <operator delete[](void*)>
   137a0:	e3a03000 	mov	r3, #0
   137a4:	e1a00004 	mov	r0, r4
   137a8:	e5843028 	str	r3, [r4, #40]	; 0x28
   137ac:	ebfff777 	bl	11590 <CUSBHIDDevice::~CUSBHIDDevice()>
   137b0:	e1a00004 	mov	r0, r4
   137b4:	e8bd8010 	pop	{r4, pc}
   137b8:	00042734 	.word	0x00042734

000137bc <CUSBMouseDevice::~CUSBMouseDevice()>:
   137bc:	e92d4010 	push	{r4, lr}
   137c0:	e1a04000 	mov	r4, r0
   137c4:	ebffffe5 	bl	13760 <CUSBMouseDevice::~CUSBMouseDevice()>
   137c8:	e1a00004 	mov	r0, r4
   137cc:	e3a01030 	mov	r1, #48	; 0x30
   137d0:	eb005c65 	bl	2a96c <operator delete(void*, unsigned int)>
   137d4:	e1a00004 	mov	r0, r4
   137d8:	e8bd8010 	pop	{r4, pc}

000137dc <CUSBMouseDevice::Configure()>:
   137dc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   137e0:	e3a01021 	mov	r1, #33	; 0x21
   137e4:	e24dd014 	sub	sp, sp, #20
   137e8:	e1a04000 	mov	r4, r0
   137ec:	ebffed77 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   137f0:	e2505000 	subs	r5, r0, #0
   137f4:	0a000003 	beq	13808 <CUSBMouseDevice::Configure()+0x2c>
   137f8:	e5d50007 	ldrb	r0, [r5, #7]
   137fc:	e5d53008 	ldrb	r3, [r5, #8]
   13800:	e1900403 	orrs	r0, r0, r3, lsl #8
   13804:	1a000006 	bne	13824 <CUSBMouseDevice::Configure()+0x48>
   13808:	e1a00004 	mov	r0, r4
   1380c:	e59f10f0 	ldr	r1, [pc, #240]	; 13904 <CUSBMouseDevice::Configure()+0x128>
   13810:	ebffed79 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13814:	e3a05000 	mov	r5, #0
   13818:	e1a00005 	mov	r0, r5
   1381c:	e28dd014 	add	sp, sp, #20
   13820:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13824:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13828:	eb005c42 	bl	2a938 <operator new[](unsigned int)>
   1382c:	e5840028 	str	r0, [r4, #40]	; 0x28
   13830:	e1a00004 	mov	r0, r4
   13834:	ebffed5a 	bl	eda4 <CUSBFunction::GetHost() const>
   13838:	e1a06000 	mov	r6, r0
   1383c:	e1a00004 	mov	r0, r4
   13840:	ebffed4c 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   13844:	e1a07000 	mov	r7, r0
   13848:	e1a00004 	mov	r0, r4
   1384c:	e5d55006 	ldrb	r5, [r5, #6]
   13850:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   13854:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   13858:	ebffedaf 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
   1385c:	e3a03081 	mov	r3, #129	; 0x81
   13860:	e6ff0070 	uxth	r0, r0
   13864:	e58d000c 	str	r0, [sp, #12]
   13868:	e58d3008 	str	r3, [sp, #8]
   1386c:	e88d0300 	stm	sp, {r8, r9}
   13870:	e3a03000 	mov	r3, #0
   13874:	e1a02005 	mov	r2, r5
   13878:	e1a01007 	mov	r1, r7
   1387c:	e1a00006 	mov	r0, r6
   13880:	ebfff94b 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13884:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13888:	e1500003 	cmp	r0, r3
   1388c:	0a000008 	beq	138b4 <CUSBMouseDevice::Configure()+0xd8>
   13890:	e3a05000 	mov	r5, #0
   13894:	eb004afd 	bl	26490 <CLogger::Get()>
   13898:	e59f3068 	ldr	r3, [pc, #104]	; 13908 <CUSBMouseDevice::Configure()+0x12c>
   1389c:	e3a02001 	mov	r2, #1
   138a0:	e59f105c 	ldr	r1, [pc, #92]	; 13904 <CUSBMouseDevice::Configure()+0x128>
   138a4:	eb004a36 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   138a8:	e1a00005 	mov	r0, r5
   138ac:	e28dd014 	add	sp, sp, #20
   138b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   138b4:	e3a01000 	mov	r1, #0
   138b8:	e1a00004 	mov	r0, r4
   138bc:	ebfff75e 	bl	1163c <CUSBHIDDevice::Configure(unsigned int)>
   138c0:	e2505000 	subs	r5, r0, #0
   138c4:	0a000008 	beq	138ec <CUSBMouseDevice::Configure()+0x110>
   138c8:	e3a00028 	mov	r0, #40	; 0x28
   138cc:	eb005c18 	bl	2a934 <operator new(unsigned int)>
   138d0:	e1a05000 	mov	r5, r0
   138d4:	eb00128e 	bl	18314 <CMouseDevice::CMouseDevice()>
   138d8:	e1a00004 	mov	r0, r4
   138dc:	e5845024 	str	r5, [r4, #36]	; 0x24
   138e0:	e28dd014 	add	sp, sp, #20
   138e4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   138e8:	eafff872 	b	11ab8 <CUSBHIDDevice::StartRequest()>
   138ec:	eb004ae7 	bl	26490 <CLogger::Get()>
   138f0:	e59f3014 	ldr	r3, [pc, #20]	; 1390c <CUSBMouseDevice::Configure()+0x130>
   138f4:	e3a02001 	mov	r2, #1
   138f8:	e59f1004 	ldr	r1, [pc, #4]	; 13904 <CUSBMouseDevice::Configure()+0x128>
   138fc:	eb004a20 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13900:	eaffffc4 	b	13818 <CUSBMouseDevice::Configure()+0x3c>
   13904:	0004275c 	.word	0x0004275c
   13908:	00041d9c 	.word	0x00041d9c
   1390c:	000422c4 	.word	0x000422c4

00013910 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13910:	e2913000 	adds	r3, r1, #0
   13914:	13a03001 	movne	r3, #1
   13918:	e3520003 	cmp	r2, #3
   1391c:	13a03000 	movne	r3, #0
   13920:	e3530000 	cmp	r3, #0
   13924:	e1a02001 	mov	r2, r1
   13928:	012fff1e 	bxeq	lr
   1392c:	e5d13000 	ldrb	r3, [r1]
   13930:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13934:	e3130002 	tst	r3, #2
   13938:	e2031001 	and	r1, r3, #1
   1393c:	13811002 	orrne	r1, r1, #2
   13940:	e3130004 	tst	r3, #4
   13944:	13811004 	orrne	r1, r1, #4
   13948:	e3500000 	cmp	r0, #0
   1394c:	012fff1e 	bxeq	lr
   13950:	e1d230d2 	ldrsb	r3, [r2, #2]
   13954:	e1d220d1 	ldrsb	r2, [r2, #1]
   13958:	ea0012a7 	b	183fc <CMouseDevice::ReportHandler(unsigned int, int, int)>

0001395c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   1395c:	e92d4010 	push	{r4, lr}
   13960:	e3a02003 	mov	r2, #3
   13964:	e1a04000 	mov	r4, r0
   13968:	ebfff6f4 	bl	11540 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1396c:	e3a03000 	mov	r3, #0
   13970:	e59f2010 	ldr	r2, [pc, #16]	; 13988 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   13974:	e5843024 	str	r3, [r4, #36]	; 0x24
   13978:	e5842000 	str	r2, [r4]
   1397c:	e5843028 	str	r3, [r4, #40]	; 0x28
   13980:	e1a00004 	mov	r0, r4
   13984:	e8bd8010 	pop	{r4, pc}
   13988:	00042734 	.word	0x00042734

0001398c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   1398c:	e92d4070 	push	{r4, r5, r6, lr}
   13990:	e5905018 	ldr	r5, [r0, #24]
   13994:	e59f3060 	ldr	r3, [pc, #96]	; 139fc <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   13998:	e3550000 	cmp	r5, #0
   1399c:	e1a04000 	mov	r4, r0
   139a0:	e5803000 	str	r3, [r0]
   139a4:	0a000004 	beq	139bc <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   139a8:	e1a00005 	mov	r0, r5
   139ac:	ebffeb8d 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   139b0:	e1a00005 	mov	r0, r5
   139b4:	e3a01014 	mov	r1, #20
   139b8:	eb005beb 	bl	2a96c <operator delete(void*, unsigned int)>
   139bc:	e3a03000 	mov	r3, #0
   139c0:	e5945014 	ldr	r5, [r4, #20]
   139c4:	e5843018 	str	r3, [r4, #24]
   139c8:	e1550003 	cmp	r5, r3
   139cc:	0a000004 	beq	139e4 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   139d0:	e1a00005 	mov	r0, r5
   139d4:	ebffeb83 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   139d8:	e1a00005 	mov	r0, r5
   139dc:	e3a01014 	mov	r1, #20
   139e0:	eb005be1 	bl	2a96c <operator delete(void*, unsigned int)>
   139e4:	e3a03000 	mov	r3, #0
   139e8:	e1a00004 	mov	r0, r4
   139ec:	e5843014 	str	r3, [r4, #20]
   139f0:	ebffebe8 	bl	e998 <CUSBFunction::~CUSBFunction()>
   139f4:	e1a00004 	mov	r0, r4
   139f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   139fc:	0004276c 	.word	0x0004276c

00013a00 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13a00:	e92d4010 	push	{r4, lr}
   13a04:	e1a04000 	mov	r4, r0
   13a08:	ebffffdf 	bl	1398c <CUSBPrinterDevice::~CUSBPrinterDevice()>
   13a0c:	e1a00004 	mov	r0, r4
   13a10:	e3a0101c 	mov	r1, #28
   13a14:	eb005bd4 	bl	2a96c <operator delete(void*, unsigned int)>
   13a18:	e1a00004 	mov	r0, r4
   13a1c:	e8bd8010 	pop	{r4, pc}

00013a20 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   13a20:	e92d4070 	push	{r4, r5, r6, lr}
   13a24:	e2515000 	subs	r5, r1, #0
   13a28:	e24dd008 	sub	sp, sp, #8
   13a2c:	0a000011 	beq	13a78 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   13a30:	e3520000 	cmp	r2, #0
   13a34:	e1a04002 	mov	r4, r2
   13a38:	0a000012 	beq	13a88 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   13a3c:	e1a06000 	mov	r6, r0
   13a40:	ebffecd7 	bl	eda4 <CUSBFunction::GetHost() const>
   13a44:	e3500000 	cmp	r0, #0
   13a48:	0a000012 	beq	13a98 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   13a4c:	e3a03000 	mov	r3, #0
   13a50:	e5961018 	ldr	r1, [r6, #24]
   13a54:	e1a02005 	mov	r2, r5
   13a58:	e58d3000 	str	r3, [sp]
   13a5c:	e1a03004 	mov	r3, r4
   13a60:	ebfff907 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   13a64:	e3500000 	cmp	r0, #0
   13a68:	a1a00004 	movge	r0, r4
   13a6c:	b3e00000 	mvnlt	r0, #0
   13a70:	e28dd008 	add	sp, sp, #8
   13a74:	e8bd8070 	pop	{r4, r5, r6, pc}
   13a78:	e3a0207e 	mov	r2, #126	; 0x7e
   13a7c:	e59f1024 	ldr	r1, [pc, #36]	; 13aa8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   13a80:	e59f0024 	ldr	r0, [pc, #36]	; 13aac <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   13a84:	eb00418e 	bl	240c4 <assertion_failed>
   13a88:	e3a0207f 	mov	r2, #127	; 0x7f
   13a8c:	e59f1014 	ldr	r1, [pc, #20]	; 13aa8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   13a90:	e59f0018 	ldr	r0, [pc, #24]	; 13ab0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   13a94:	eb00418a 	bl	240c4 <assertion_failed>
   13a98:	e3a02082 	mov	r2, #130	; 0x82
   13a9c:	e59f1004 	ldr	r1, [pc, #4]	; 13aa8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   13aa0:	e59f000c 	ldr	r0, [pc, #12]	; 13ab4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   13aa4:	eb004186 	bl	240c4 <assertion_failed>
   13aa8:	00042798 	.word	0x00042798
   13aac:	000423b8 	.word	0x000423b8
   13ab0:	000427a8 	.word	0x000427a8
   13ab4:	000423c8 	.word	0x000423c8

00013ab8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   13ab8:	e92d4010 	push	{r4, lr}
   13abc:	e1a04000 	mov	r4, r0
   13ac0:	ebffec45 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13ac4:	e3a03000 	mov	r3, #0
   13ac8:	e59f2014 	ldr	r2, [pc, #20]	; 13ae4 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   13acc:	e5c43010 	strb	r3, [r4, #16]
   13ad0:	e5842000 	str	r2, [r4]
   13ad4:	e5843014 	str	r3, [r4, #20]
   13ad8:	e5843018 	str	r3, [r4, #24]
   13adc:	e1a00004 	mov	r0, r4
   13ae0:	e8bd8010 	pop	{r4, pc}
   13ae4:	0004276c 	.word	0x0004276c

00013ae8 <CUSBPrinterDevice::Configure()>:
   13ae8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13aec:	e24dd01c 	sub	sp, sp, #28
   13af0:	e1a05000 	mov	r5, r0
   13af4:	ebffed2c 	bl	efac <CUSBFunction::GetInterfaceProtocol() const>
   13af8:	e2403001 	sub	r3, r0, #1
   13afc:	e3530001 	cmp	r3, #1
   13b00:	e5c50010 	strb	r0, [r5, #16]
   13b04:	9a00000a 	bls	13b34 <CUSBPrinterDevice::Configure()+0x4c>
   13b08:	eb004a60 	bl	26490 <CLogger::Get()>
   13b0c:	e5d52010 	ldrb	r2, [r5, #16]
   13b10:	e59f31d8 	ldr	r3, [pc, #472]	; 13cf0 <CUSBPrinterDevice::Configure()+0x208>
   13b14:	e58d2000 	str	r2, [sp]
   13b18:	e59f11d4 	ldr	r1, [pc, #468]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13b1c:	e3a02001 	mov	r2, #1
   13b20:	eb004997 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b24:	e3a04000 	mov	r4, #0
   13b28:	e1a00004 	mov	r0, r4
   13b2c:	e28dd01c 	add	sp, sp, #28
   13b30:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13b34:	e1a00005 	mov	r0, r5
   13b38:	ebffec77 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   13b3c:	e5d53010 	ldrb	r3, [r5, #16]
   13b40:	e3530001 	cmp	r3, #1
   13b44:	03a03001 	moveq	r3, #1
   13b48:	13a03002 	movne	r3, #2
   13b4c:	e1530000 	cmp	r3, r0
   13b50:	d3a06005 	movle	r6, #5
   13b54:	d3a07014 	movle	r7, #20
   13b58:	da000004 	ble	13b70 <CUSBPrinterDevice::Configure()+0x88>
   13b5c:	ea000053 	b	13cb0 <CUSBPrinterDevice::Configure()+0x1c8>
   13b60:	e5d43003 	ldrb	r3, [r4, #3]
   13b64:	e203303f 	and	r3, r3, #63	; 0x3f
   13b68:	e3530002 	cmp	r3, #2
   13b6c:	0a000028 	beq	13c14 <CUSBPrinterDevice::Configure()+0x12c>
   13b70:	e1a01006 	mov	r1, r6
   13b74:	e1a00005 	mov	r0, r5
   13b78:	ebffec94 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   13b7c:	e2504000 	subs	r4, r0, #0
   13b80:	1afffff6 	bne	13b60 <CUSBPrinterDevice::Configure()+0x78>
   13b84:	e5954018 	ldr	r4, [r5, #24]
   13b88:	e3540000 	cmp	r4, #0
   13b8c:	0a00004c 	beq	13cc4 <CUSBPrinterDevice::Configure()+0x1dc>
   13b90:	e5d53010 	ldrb	r3, [r5, #16]
   13b94:	e1a00005 	mov	r0, r5
   13b98:	e3530001 	cmp	r3, #1
   13b9c:	0a000002 	beq	13bac <CUSBPrinterDevice::Configure()+0xc4>
   13ba0:	e5954014 	ldr	r4, [r5, #20]
   13ba4:	e3540000 	cmp	r4, #0
   13ba8:	0a000049 	beq	13cd4 <CUSBPrinterDevice::Configure()+0x1ec>
   13bac:	ebffeba2 	bl	ea3c <CUSBFunction::Configure()>
   13bb0:	e2504000 	subs	r4, r0, #0
   13bb4:	0a000027 	beq	13c58 <CUSBPrinterDevice::Configure()+0x170>
   13bb8:	e28d0008 	add	r0, sp, #8
   13bbc:	eb004e18 	bl	27424 <CString::CString()>
   13bc0:	e59f3130 	ldr	r3, [pc, #304]	; 13cf8 <CUSBPrinterDevice::Configure()+0x210>
   13bc4:	e59f1130 	ldr	r1, [pc, #304]	; 13cfc <CUSBPrinterDevice::Configure()+0x214>
   13bc8:	e5932000 	ldr	r2, [r3]
   13bcc:	e28d0008 	add	r0, sp, #8
   13bd0:	e282c001 	add	ip, r2, #1
   13bd4:	e583c000 	str	ip, [r3]
   13bd8:	eb005354 	bl	28930 <CString::Format(char const*, ...)>
   13bdc:	eb004412 	bl	24c2c <CDeviceNameService::Get()>
   13be0:	e1a06000 	mov	r6, r0
   13be4:	e28d0008 	add	r0, sp, #8
   13be8:	eb004e23 	bl	2747c <CString::operator char const*() const>
   13bec:	e1a02005 	mov	r2, r5
   13bf0:	e1a01000 	mov	r1, r0
   13bf4:	e3a03000 	mov	r3, #0
   13bf8:	e1a00006 	mov	r0, r6
   13bfc:	eb004350 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13c00:	e28d0008 	add	r0, sp, #8
   13c04:	eb004dd3 	bl	27358 <CString::~CString()>
   13c08:	e1a00004 	mov	r0, r4
   13c0c:	e28dd01c 	add	sp, sp, #28
   13c10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c14:	e1d430d2 	ldrsb	r3, [r4, #2]
   13c18:	e3530000 	cmp	r3, #0
   13c1c:	ba000015 	blt	13c78 <CUSBPrinterDevice::Configure()+0x190>
   13c20:	e5953018 	ldr	r3, [r5, #24]
   13c24:	e1a00005 	mov	r0, r5
   13c28:	e3530000 	cmp	r3, #0
   13c2c:	1a00002b 	bne	13ce0 <CUSBPrinterDevice::Configure()+0x1f8>
   13c30:	ebffec45 	bl	ed4c <CUSBFunction::GetDevice() const>
   13c34:	e1a09000 	mov	r9, r0
   13c38:	e1a00007 	mov	r0, r7
   13c3c:	eb005b3c 	bl	2a934 <operator new(unsigned int)>
   13c40:	e1a08000 	mov	r8, r0
   13c44:	e1a02004 	mov	r2, r4
   13c48:	e1a01009 	mov	r1, r9
   13c4c:	ebffea7b 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13c50:	e5858018 	str	r8, [r5, #24]
   13c54:	eaffffc5 	b	13b70 <CUSBPrinterDevice::Configure()+0x88>
   13c58:	eb004a0c 	bl	26490 <CLogger::Get()>
   13c5c:	e59f309c 	ldr	r3, [pc, #156]	; 13d00 <CUSBPrinterDevice::Configure()+0x218>
   13c60:	e3a02001 	mov	r2, #1
   13c64:	e59f1088 	ldr	r1, [pc, #136]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13c68:	eb004945 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c6c:	e1a00004 	mov	r0, r4
   13c70:	e28dd01c 	add	sp, sp, #28
   13c74:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c78:	e5953014 	ldr	r3, [r5, #20]
   13c7c:	e1a00005 	mov	r0, r5
   13c80:	e3530000 	cmp	r3, #0
   13c84:	1a000015 	bne	13ce0 <CUSBPrinterDevice::Configure()+0x1f8>
   13c88:	ebffec2f 	bl	ed4c <CUSBFunction::GetDevice() const>
   13c8c:	e1a09000 	mov	r9, r0
   13c90:	e1a00007 	mov	r0, r7
   13c94:	eb005b26 	bl	2a934 <operator new(unsigned int)>
   13c98:	e1a08000 	mov	r8, r0
   13c9c:	e1a02004 	mov	r2, r4
   13ca0:	e1a01009 	mov	r1, r9
   13ca4:	ebffea65 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13ca8:	e5858014 	str	r8, [r5, #20]
   13cac:	eaffffaf 	b	13b70 <CUSBPrinterDevice::Configure()+0x88>
   13cb0:	e1a00005 	mov	r0, r5
   13cb4:	e59f1038 	ldr	r1, [pc, #56]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13cb8:	ebffec4f 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13cbc:	e3a04000 	mov	r4, #0
   13cc0:	eaffff98 	b	13b28 <CUSBPrinterDevice::Configure()+0x40>
   13cc4:	e1a00005 	mov	r0, r5
   13cc8:	e59f1024 	ldr	r1, [pc, #36]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13ccc:	ebffec4a 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13cd0:	eaffff94 	b	13b28 <CUSBPrinterDevice::Configure()+0x40>
   13cd4:	e59f1018 	ldr	r1, [pc, #24]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13cd8:	ebffec47 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13cdc:	eaffff91 	b	13b28 <CUSBPrinterDevice::Configure()+0x40>
   13ce0:	e59f100c 	ldr	r1, [pc, #12]	; 13cf4 <CUSBPrinterDevice::Configure()+0x20c>
   13ce4:	ebffec44 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   13ce8:	e3a04000 	mov	r4, #0
   13cec:	eaffff8d 	b	13b28 <CUSBPrinterDevice::Configure()+0x40>
   13cf0:	000427b4 	.word	0x000427b4
   13cf4:	00042790 	.word	0x00042790
   13cf8:	0004998c 	.word	0x0004998c
   13cfc:	000427d4 	.word	0x000427d4
   13d00:	00041a90 	.word	0x00041a90

00013d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   13d04:	e92d4010 	push	{r4, lr}
   13d08:	e3a0e000 	mov	lr, #0
   13d0c:	e59d4008 	ldr	r4, [sp, #8]
   13d10:	e151000e 	cmp	r1, lr
   13d14:	e5801000 	str	r1, [r0]
   13d18:	e5802008 	str	r2, [r0, #8]
   13d1c:	e580300c 	str	r3, [r0, #12]
   13d20:	e5804004 	str	r4, [r0, #4]
   13d24:	e580e010 	str	lr, [r0, #16]
   13d28:	e580e014 	str	lr, [r0, #20]
   13d2c:	e580e018 	str	lr, [r0, #24]
   13d30:	e580e01c 	str	lr, [r0, #28]
   13d34:	e580e020 	str	lr, [r0, #32]
   13d38:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   13d3c:	0a00000a 	beq	13d6c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x68>
   13d40:	e2922000 	adds	r2, r2, #0
   13d44:	13a02001 	movne	r2, #1
   13d48:	e3530000 	cmp	r3, #0
   13d4c:	11a03002 	movne	r3, r2
   13d50:	03823001 	orreq	r3, r2, #1
   13d54:	e3530000 	cmp	r3, #0
   13d58:	18bd8010 	popne	{r4, pc}
   13d5c:	e3a02024 	mov	r2, #36	; 0x24
   13d60:	e59f1014 	ldr	r1, [pc, #20]	; 13d7c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   13d64:	e59f0014 	ldr	r0, [pc, #20]	; 13d80 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   13d68:	eb0040d5 	bl	240c4 <assertion_failed>
   13d6c:	e3a02023 	mov	r2, #35	; 0x23
   13d70:	e59f1004 	ldr	r1, [pc, #4]	; 13d7c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   13d74:	e59f0008 	ldr	r0, [pc, #8]	; 13d84 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x80>
   13d78:	eb0040d1 	bl	240c4 <assertion_failed>
   13d7c:	000427dc 	.word	0x000427dc
   13d80:	000427ec 	.word	0x000427ec
   13d84:	00041270 	.word	0x00041270

00013d88 <CUSBRequest::~CUSBRequest()>:
   13d88:	e12fff1e 	bx	lr

00013d8c <CUSBRequest::GetEndpoint() const>:
   13d8c:	e5900000 	ldr	r0, [r0]
   13d90:	e3500000 	cmp	r0, #0
   13d94:	0a000000 	beq	13d9c <CUSBRequest::GetEndpoint() const+0x10>
   13d98:	e12fff1e 	bx	lr
   13d9c:	e92d4010 	push	{r4, lr}
   13da0:	e3a02031 	mov	r2, #49	; 0x31
   13da4:	e59f1004 	ldr	r1, [pc, #4]	; 13db0 <CUSBRequest::GetEndpoint() const+0x24>
   13da8:	e59f0004 	ldr	r0, [pc, #4]	; 13db4 <CUSBRequest::GetEndpoint() const+0x28>
   13dac:	eb0040c4 	bl	240c4 <assertion_failed>
   13db0:	000427dc 	.word	0x000427dc
   13db4:	00041270 	.word	0x00041270

00013db8 <CUSBRequest::SetStatus(int)>:
   13db8:	e5801010 	str	r1, [r0, #16]
   13dbc:	e12fff1e 	bx	lr

00013dc0 <CUSBRequest::SetResultLen(unsigned int)>:
   13dc0:	e5801014 	str	r1, [r0, #20]
   13dc4:	e12fff1e 	bx	lr

00013dc8 <CUSBRequest::GetStatus() const>:
   13dc8:	e5900010 	ldr	r0, [r0, #16]
   13dcc:	e12fff1e 	bx	lr

00013dd0 <CUSBRequest::GetResultLength() const>:
   13dd0:	e5903010 	ldr	r3, [r0, #16]
   13dd4:	e3530000 	cmp	r3, #0
   13dd8:	0a000001 	beq	13de4 <CUSBRequest::GetResultLength() const+0x14>
   13ddc:	e5900014 	ldr	r0, [r0, #20]
   13de0:	e12fff1e 	bx	lr
   13de4:	e92d4010 	push	{r4, lr}
   13de8:	e3a02046 	mov	r2, #70	; 0x46
   13dec:	e59f1004 	ldr	r1, [pc, #4]	; 13df8 <CUSBRequest::GetResultLength() const+0x28>
   13df0:	e59f0004 	ldr	r0, [pc, #4]	; 13dfc <CUSBRequest::GetResultLength() const+0x2c>
   13df4:	eb0040b2 	bl	240c4 <assertion_failed>
   13df8:	000427dc 	.word	0x000427dc
   13dfc:	00042810 	.word	0x00042810

00013e00 <CUSBRequest::GetSetupData()>:
   13e00:	e92d4010 	push	{r4, lr}
   13e04:	e1a04000 	mov	r4, r0
   13e08:	e5900000 	ldr	r0, [r0]
   13e0c:	ebffea83 	bl	e820 <CUSBEndpoint::GetType() const>
   13e10:	e3500000 	cmp	r0, #0
   13e14:	1a000006 	bne	13e34 <CUSBRequest::GetSetupData()+0x34>
   13e18:	e5940004 	ldr	r0, [r4, #4]
   13e1c:	e3500000 	cmp	r0, #0
   13e20:	18bd8010 	popne	{r4, pc}
   13e24:	e3a0204e 	mov	r2, #78	; 0x4e
   13e28:	e59f1014 	ldr	r1, [pc, #20]	; 13e44 <CUSBRequest::GetSetupData()+0x44>
   13e2c:	e59f0014 	ldr	r0, [pc, #20]	; 13e48 <CUSBRequest::GetSetupData()+0x48>
   13e30:	eb0040a3 	bl	240c4 <assertion_failed>
   13e34:	e3a0204d 	mov	r2, #77	; 0x4d
   13e38:	e59f1004 	ldr	r1, [pc, #4]	; 13e44 <CUSBRequest::GetSetupData()+0x44>
   13e3c:	e59f0008 	ldr	r0, [pc, #8]	; 13e4c <CUSBRequest::GetSetupData()+0x4c>
   13e40:	eb00409f 	bl	240c4 <assertion_failed>
   13e44:	000427dc 	.word	0x000427dc
   13e48:	0004284c 	.word	0x0004284c
   13e4c:	0004281c 	.word	0x0004281c

00013e50 <CUSBRequest::GetBuffer()>:
   13e50:	e5903008 	ldr	r3, [r0, #8]
   13e54:	e3530000 	cmp	r3, #0
   13e58:	0a000001 	beq	13e64 <CUSBRequest::GetBuffer()+0x14>
   13e5c:	e1a00003 	mov	r0, r3
   13e60:	e12fff1e 	bx	lr
   13e64:	e590200c 	ldr	r2, [r0, #12]
   13e68:	e3520000 	cmp	r2, #0
   13e6c:	0afffffa 	beq	13e5c <CUSBRequest::GetBuffer()+0xc>
   13e70:	e92d4010 	push	{r4, lr}
   13e74:	e3a02056 	mov	r2, #86	; 0x56
   13e78:	e59f1004 	ldr	r1, [pc, #4]	; 13e84 <CUSBRequest::GetBuffer()+0x34>
   13e7c:	e59f0004 	ldr	r0, [pc, #4]	; 13e88 <CUSBRequest::GetBuffer()+0x38>
   13e80:	eb00408f 	bl	240c4 <assertion_failed>
   13e84:	000427dc 	.word	0x000427dc
   13e88:	000427ec 	.word	0x000427ec

00013e8c <CUSBRequest::GetBufLen() const>:
   13e8c:	e590000c 	ldr	r0, [r0, #12]
   13e90:	e12fff1e 	bx	lr

00013e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   13e94:	e3510000 	cmp	r1, #0
   13e98:	e5801018 	str	r1, [r0, #24]
   13e9c:	e580201c 	str	r2, [r0, #28]
   13ea0:	e5803020 	str	r3, [r0, #32]
   13ea4:	0a000000 	beq	13eac <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x18>
   13ea8:	e12fff1e 	bx	lr
   13eac:	e92d4010 	push	{r4, lr}
   13eb0:	e3a02066 	mov	r2, #102	; 0x66
   13eb4:	e59f1004 	ldr	r1, [pc, #4]	; 13ec0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x2c>
   13eb8:	e59f0004 	ldr	r0, [pc, #4]	; 13ec4 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x30>
   13ebc:	eb004080 	bl	240c4 <assertion_failed>
   13ec0:	000427dc 	.word	0x000427dc
   13ec4:	00042860 	.word	0x00042860

00013ec8 <CUSBRequest::CallCompletionRoutine()>:
   13ec8:	e92d4010 	push	{r4, lr}
   13ecc:	e590e018 	ldr	lr, [r0, #24]
   13ed0:	e35e0000 	cmp	lr, #0
   13ed4:	0a000004 	beq	13eec <CUSBRequest::CallCompletionRoutine()+0x24>
   13ed8:	e1a0300e 	mov	r3, lr
   13edc:	e8bd4010 	pop	{r4, lr}
   13ee0:	e5902020 	ldr	r2, [r0, #32]
   13ee4:	e590101c 	ldr	r1, [r0, #28]
   13ee8:	e12fff13 	bx	r3
   13eec:	e3a0206b 	mov	r2, #107	; 0x6b
   13ef0:	e59f1004 	ldr	r1, [pc, #4]	; 13efc <CUSBRequest::CallCompletionRoutine()+0x34>
   13ef4:	e59f0004 	ldr	r0, [pc, #4]	; 13f00 <CUSBRequest::CallCompletionRoutine()+0x38>
   13ef8:	eb004071 	bl	240c4 <assertion_failed>
   13efc:	000427dc 	.word	0x000427dc
   13f00:	00042860 	.word	0x00042860

00013f04 <CUSBRequest::SetCompleteOnNAK()>:
   13f04:	e3a03001 	mov	r3, #1
   13f08:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   13f0c:	e12fff1e 	bx	lr

00013f10 <CUSBRequest::IsCompleteOnNAK() const>:
   13f10:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   13f14:	e12fff1e 	bx	lr

00013f18 <CUSBRequest::operator new(unsigned int)>:
   13f18:	e3500028 	cmp	r0, #40	; 0x28
   13f1c:	e92d4010 	push	{r4, lr}
   13f20:	1a000005 	bne	13f3c <CUSBRequest::operator new(unsigned int)+0x24>
   13f24:	e59f3030 	ldr	r3, [pc, #48]	; 13f5c <CUSBRequest::operator new(unsigned int)+0x44>
   13f28:	e5930000 	ldr	r0, [r3]
   13f2c:	e3500000 	cmp	r0, #0
   13f30:	0a000005 	beq	13f4c <CUSBRequest::operator new(unsigned int)+0x34>
   13f34:	e8bd4010 	pop	{r4, lr}
   13f38:	ea004167 	b	244dc <CClassAllocator::Allocate()>
   13f3c:	e3a0207a 	mov	r2, #122	; 0x7a
   13f40:	e59f1018 	ldr	r1, [pc, #24]	; 13f60 <CUSBRequest::operator new(unsigned int)+0x48>
   13f44:	e59f0018 	ldr	r0, [pc, #24]	; 13f64 <CUSBRequest::operator new(unsigned int)+0x4c>
   13f48:	eb00405d 	bl	240c4 <assertion_failed>
   13f4c:	e3a0207a 	mov	r2, #122	; 0x7a
   13f50:	e59f1008 	ldr	r1, [pc, #8]	; 13f60 <CUSBRequest::operator new(unsigned int)+0x48>
   13f54:	e59f000c 	ldr	r0, [pc, #12]	; 13f68 <CUSBRequest::operator new(unsigned int)+0x50>
   13f58:	eb004059 	bl	240c4 <assertion_failed>
   13f5c:	00050144 	.word	0x00050144
   13f60:	000427dc 	.word	0x000427dc
   13f64:	0004287c 	.word	0x0004287c
   13f68:	00040edc 	.word	0x00040edc

00013f6c <CUSBRequest::operator delete(void*, unsigned int)>:
   13f6c:	e3510028 	cmp	r1, #40	; 0x28
   13f70:	e92d4010 	push	{r4, lr}
   13f74:	1a000007 	bne	13f98 <CUSBRequest::operator delete(void*, unsigned int)+0x2c>
   13f78:	e59f3038 	ldr	r3, [pc, #56]	; 13fb8 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   13f7c:	e5933000 	ldr	r3, [r3]
   13f80:	e3530000 	cmp	r3, #0
   13f84:	0a000007 	beq	13fa8 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
   13f88:	e8bd4010 	pop	{r4, lr}
   13f8c:	e1a01000 	mov	r1, r0
   13f90:	e1a00003 	mov	r0, r3
   13f94:	ea00418b 	b	245c8 <CClassAllocator::Free(void*)>
   13f98:	e3a0207a 	mov	r2, #122	; 0x7a
   13f9c:	e59f1018 	ldr	r1, [pc, #24]	; 13fbc <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   13fa0:	e59f0018 	ldr	r0, [pc, #24]	; 13fc0 <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   13fa4:	eb004046 	bl	240c4 <assertion_failed>
   13fa8:	e3a0207a 	mov	r2, #122	; 0x7a
   13fac:	e59f1008 	ldr	r1, [pc, #8]	; 13fbc <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   13fb0:	e59f000c 	ldr	r0, [pc, #12]	; 13fc4 <CUSBRequest::operator delete(void*, unsigned int)+0x58>
   13fb4:	eb004042 	bl	240c4 <assertion_failed>
   13fb8:	00050144 	.word	0x00050144
   13fbc:	000427dc 	.word	0x000427dc
   13fc0:	0004287c 	.word	0x0004287c
   13fc4:	00040edc 	.word	0x00040edc

00013fc8 <CUSBRequest::InitAllocator(unsigned int)>:
   13fc8:	e92d4070 	push	{r4, r5, r6, lr}
   13fcc:	e59f4040 	ldr	r4, [pc, #64]	; 14014 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   13fd0:	e5943000 	ldr	r3, [r4]
   13fd4:	e3530000 	cmp	r3, #0
   13fd8:	1a000009 	bne	14004 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   13fdc:	e1a05000 	mov	r5, r0
   13fe0:	e3a0001c 	mov	r0, #28
   13fe4:	eb005a52 	bl	2a934 <operator new(unsigned int)>
   13fe8:	e1a06000 	mov	r6, r0
   13fec:	e1a02005 	mov	r2, r5
   13ff0:	e59f3020 	ldr	r3, [pc, #32]	; 14018 <CUSBRequest::InitAllocator(unsigned int)+0x50>
   13ff4:	e3a01028 	mov	r1, #40	; 0x28
   13ff8:	eb00411e 	bl	24478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   13ffc:	e5846000 	str	r6, [r4]
   14000:	e8bd8070 	pop	{r4, r5, r6, pc}
   14004:	e3a0207a 	mov	r2, #122	; 0x7a
   14008:	e59f100c 	ldr	r1, [pc, #12]	; 1401c <CUSBRequest::InitAllocator(unsigned int)+0x54>
   1400c:	e59f000c 	ldr	r0, [pc, #12]	; 14020 <CUSBRequest::InitAllocator(unsigned int)+0x58>
   14010:	eb00402b 	bl	240c4 <assertion_failed>
   14014:	00050144 	.word	0x00050144
   14018:	0004289c 	.word	0x0004289c
   1401c:	000427dc 	.word	0x000427dc
   14020:	00040ef0 	.word	0x00040ef0

00014024 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   14024:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14028:	e59f4054 	ldr	r4, [pc, #84]	; 14084 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   1402c:	e1a05000 	mov	r5, r0
   14030:	e5940000 	ldr	r0, [r4]
   14034:	e24dd00c 	sub	sp, sp, #12
   14038:	e3500000 	cmp	r0, #0
   1403c:	1a00000c 	bne	14074 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   14040:	e1a06001 	mov	r6, r1
   14044:	e3a0001c 	mov	r0, #28
   14048:	eb005a39 	bl	2a934 <operator new(unsigned int)>
   1404c:	e59f1034 	ldr	r1, [pc, #52]	; 14088 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   14050:	e1a03006 	mov	r3, r6
   14054:	e58d1000 	str	r1, [sp]
   14058:	e1a02005 	mov	r2, r5
   1405c:	e3a01028 	mov	r1, #40	; 0x28
   14060:	e1a07000 	mov	r7, r0
   14064:	eb00410f 	bl	244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   14068:	e5847000 	str	r7, [r4]
   1406c:	e28dd00c 	add	sp, sp, #12
   14070:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14074:	e3a0207a 	mov	r2, #122	; 0x7a
   14078:	e59f100c 	ldr	r1, [pc, #12]	; 1408c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   1407c:	e59f000c 	ldr	r0, [pc, #12]	; 14090 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   14080:	eb00400f 	bl	240c4 <assertion_failed>
   14084:	00050144 	.word	0x00050144
   14088:	0004289c 	.word	0x0004289c
   1408c:	000427dc 	.word	0x000427dc
   14090:	00040ef0 	.word	0x00040ef0

00014094 <CUSBStandardHub::~CUSBStandardHub()>:
   14094:	e5902018 	ldr	r2, [r0, #24]
   14098:	e59f30b0 	ldr	r3, [pc, #176]	; 14150 <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   1409c:	e3520000 	cmp	r2, #0
   140a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140a4:	e1a07000 	mov	r7, r0
   140a8:	e5803000 	str	r3, [r0]
   140ac:	0a000013 	beq	14100 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
   140b0:	e3a04000 	mov	r4, #0
   140b4:	e3a09004 	mov	r9, #4
   140b8:	e1a08004 	mov	r8, r4
   140bc:	e2805020 	add	r5, r0, #32
   140c0:	e2806040 	add	r6, r0, #64	; 0x40
   140c4:	e5960000 	ldr	r0, [r6]
   140c8:	e1a01009 	mov	r1, r9
   140cc:	eb005a26 	bl	2a96c <operator delete(void*, unsigned int)>
   140d0:	e5950000 	ldr	r0, [r5]
   140d4:	e2844001 	add	r4, r4, #1
   140d8:	e3500000 	cmp	r0, #0
   140dc:	e4868004 	str	r8, [r6], #4
   140e0:	0a000002 	beq	140f0 <CUSBStandardHub::~CUSBStandardHub()+0x5c>
   140e4:	e5903000 	ldr	r3, [r0]
   140e8:	e5933004 	ldr	r3, [r3, #4]
   140ec:	e12fff33 	blx	r3
   140f0:	e5973018 	ldr	r3, [r7, #24]
   140f4:	e4858004 	str	r8, [r5], #4
   140f8:	e1530004 	cmp	r3, r4
   140fc:	8afffff0 	bhi	140c4 <CUSBStandardHub::~CUSBStandardHub()+0x30>
   14100:	e3a03000 	mov	r3, #0
   14104:	e5974014 	ldr	r4, [r7, #20]
   14108:	e5873018 	str	r3, [r7, #24]
   1410c:	e1540003 	cmp	r4, r3
   14110:	0a000004 	beq	14128 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   14114:	e1a00004 	mov	r0, r4
   14118:	ebffe9b2 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   1411c:	e1a00004 	mov	r0, r4
   14120:	e3a01014 	mov	r1, #20
   14124:	eb005a10 	bl	2a96c <operator delete(void*, unsigned int)>
   14128:	e3a04000 	mov	r4, #0
   1412c:	e3a01009 	mov	r1, #9
   14130:	e5970010 	ldr	r0, [r7, #16]
   14134:	e5874014 	str	r4, [r7, #20]
   14138:	eb005a0b 	bl	2a96c <operator delete(void*, unsigned int)>
   1413c:	e5874010 	str	r4, [r7, #16]
   14140:	e1a00007 	mov	r0, r7
   14144:	ebffea13 	bl	e998 <CUSBFunction::~CUSBFunction()>
   14148:	e1a00007 	mov	r0, r7
   1414c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14150:	000428b0 	.word	0x000428b0

00014154 <CUSBStandardHub::~CUSBStandardHub()>:
   14154:	e92d4010 	push	{r4, lr}
   14158:	e1a04000 	mov	r4, r0
   1415c:	ebffffcc 	bl	14094 <CUSBStandardHub::~CUSBStandardHub()>
   14160:	e1a00004 	mov	r0, r4
   14164:	e3a01068 	mov	r1, #104	; 0x68
   14168:	eb0059ff 	bl	2a96c <operator delete(void*, unsigned int)>
   1416c:	e1a00004 	mov	r0, r4
   14170:	e8bd8010 	pop	{r4, pc}

00014174 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   14174:	e92d4010 	push	{r4, lr}
   14178:	e1a04000 	mov	r4, r0
   1417c:	ebffea96 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14180:	e3a03000 	mov	r3, #0
   14184:	e284c040 	add	ip, r4, #64	; 0x40
   14188:	e1a0000c 	mov	r0, ip
   1418c:	e59f1038 	ldr	r1, [pc, #56]	; 141cc <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x58>
   14190:	e1a02003 	mov	r2, r3
   14194:	e5843010 	str	r3, [r4, #16]
   14198:	e5841000 	str	r1, [r4]
   1419c:	e5843014 	str	r3, [r4, #20]
   141a0:	e5843018 	str	r3, [r4, #24]
   141a4:	e5c4301c 	strb	r3, [r4, #28]
   141a8:	e2841060 	add	r1, r4, #96	; 0x60
   141ac:	e2843020 	add	r3, r4, #32
   141b0:	e4832004 	str	r2, [r3], #4
   141b4:	e153000c 	cmp	r3, ip
   141b8:	e4802004 	str	r2, [r0], #4
   141bc:	e4c12001 	strb	r2, [r1], #1
   141c0:	1afffffa 	bne	141b0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x3c>
   141c4:	e1a00004 	mov	r0, r4
   141c8:	e8bd8010 	pop	{r4, pc}
   141cc:	000428b0 	.word	0x000428b0

000141d0 <CUSBStandardHub::DisablePort(unsigned int)>:
   141d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   141d4:	e5903018 	ldr	r3, [r0, #24]
   141d8:	e24dd014 	sub	sp, sp, #20
   141dc:	e1530001 	cmp	r3, r1
   141e0:	9a000019 	bls	1424c <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   141e4:	e1a06001 	mov	r6, r1
   141e8:	e1a05000 	mov	r5, r0
   141ec:	ebffeaec 	bl	eda4 <CUSBFunction::GetHost() const>
   141f0:	e3a04001 	mov	r4, #1
   141f4:	e1a09000 	mov	r9, r0
   141f8:	e1a00005 	mov	r0, r5
   141fc:	ebffeadd 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   14200:	e3a07000 	mov	r7, #0
   14204:	e0868004 	add	r8, r6, r4
   14208:	e6ff3078 	uxth	r3, r8
   1420c:	e1a01000 	mov	r1, r0
   14210:	e58d3004 	str	r3, [sp, #4]
   14214:	e1a00009 	mov	r0, r9
   14218:	e58d700c 	str	r7, [sp, #12]
   1421c:	e58d7008 	str	r7, [sp, #8]
   14220:	e58d4000 	str	r4, [sp]
   14224:	e1a03004 	mov	r3, r4
   14228:	e3a02023 	mov	r2, #35	; 0x23
   1422c:	ebfff6ae 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14230:	e1500007 	cmp	r0, r7
   14234:	a0855006 	addge	r5, r5, r6
   14238:	a1a00004 	movge	r0, r4
   1423c:	a5c57060 	strbge	r7, [r5, #96]	; 0x60
   14240:	ba000005 	blt	1425c <CUSBStandardHub::DisablePort(unsigned int)+0x8c>
   14244:	e28dd014 	add	sp, sp, #20
   14248:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1424c:	e3a020c7 	mov	r2, #199	; 0xc7
   14250:	e59f1024 	ldr	r1, [pc, #36]	; 1427c <CUSBStandardHub::DisablePort(unsigned int)+0xac>
   14254:	e59f0024 	ldr	r0, [pc, #36]	; 14280 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   14258:	eb003f99 	bl	240c4 <assertion_failed>
   1425c:	eb00488b 	bl	26490 <CLogger::Get()>
   14260:	e58d8000 	str	r8, [sp]
   14264:	e1a02004 	mov	r2, r4
   14268:	e59f3014 	ldr	r3, [pc, #20]	; 14284 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   1426c:	e59f1014 	ldr	r1, [pc, #20]	; 14288 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   14270:	eb0047c3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14274:	e1a00007 	mov	r0, r7
   14278:	eafffff1 	b	14244 <CUSBStandardHub::DisablePort(unsigned int)+0x74>
   1427c:	000428dc 	.word	0x000428dc
   14280:	000428f0 	.word	0x000428f0
   14284:	00042908 	.word	0x00042908
   14288:	000428d4 	.word	0x000428d4

0001428c <CUSBStandardHub::RemoveDevice(unsigned int)>:
   1428c:	e92d4070 	push	{r4, r5, r6, lr}
   14290:	e1a04000 	mov	r4, r0
   14294:	e1a06001 	mov	r6, r1
   14298:	ebffffcc 	bl	141d0 <CUSBStandardHub::DisablePort(unsigned int)>
   1429c:	e2505000 	subs	r5, r0, #0
   142a0:	0a000008 	beq	142c8 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   142a4:	e0844106 	add	r4, r4, r6, lsl #2
   142a8:	e5940020 	ldr	r0, [r4, #32]
   142ac:	e3500000 	cmp	r0, #0
   142b0:	0a000002 	beq	142c0 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   142b4:	e5903000 	ldr	r3, [r0]
   142b8:	e5933004 	ldr	r3, [r3, #4]
   142bc:	e12fff33 	blx	r3
   142c0:	e3a03000 	mov	r3, #0
   142c4:	e5843020 	str	r3, [r4, #32]
   142c8:	e1a00005 	mov	r0, r5
   142cc:	e8bd8070 	pop	{r4, r5, r6, pc}

000142d0 <CUSBStandardHub::Initialize()>:
   142d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   142d4:	e24dd010 	sub	sp, sp, #16
   142d8:	e1a04000 	mov	r4, r0
   142dc:	ebffe9a9 	bl	e988 <CUSBFunction::Initialize()>
   142e0:	e2506000 	subs	r6, r0, #0
   142e4:	0a00001d 	beq	14360 <CUSBStandardHub::Initialize()+0x90>
   142e8:	e5945010 	ldr	r5, [r4, #16]
   142ec:	e3550000 	cmp	r5, #0
   142f0:	1a000039 	bne	143dc <CUSBStandardHub::Initialize()+0x10c>
   142f4:	e3a00009 	mov	r0, #9
   142f8:	eb00598d 	bl	2a934 <operator new(unsigned int)>
   142fc:	e5840010 	str	r0, [r4, #16]
   14300:	e1a00004 	mov	r0, r4
   14304:	ebffeaa6 	bl	eda4 <CUSBFunction::GetHost() const>
   14308:	e1a08000 	mov	r8, r0
   1430c:	e1a00004 	mov	r0, r4
   14310:	ebffea98 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   14314:	e3a07009 	mov	r7, #9
   14318:	e3a020a0 	mov	r2, #160	; 0xa0
   1431c:	e5943010 	ldr	r3, [r4, #16]
   14320:	e1a01000 	mov	r1, r0
   14324:	e58d2008 	str	r2, [sp, #8]
   14328:	e1a00008 	mov	r0, r8
   1432c:	e88d0088 	stm	sp, {r3, r7}
   14330:	e58d500c 	str	r5, [sp, #12]
   14334:	e1a03005 	mov	r3, r5
   14338:	e3a02029 	mov	r2, #41	; 0x29
   1433c:	ebfff69c 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14340:	e1500007 	cmp	r0, r7
   14344:	e1a08000 	mov	r8, r0
   14348:	1a000007 	bne	1436c <CUSBStandardHub::Initialize()+0x9c>
   1434c:	e5943010 	ldr	r3, [r4, #16]
   14350:	e5d33002 	ldrb	r3, [r3, #2]
   14354:	e3530008 	cmp	r3, #8
   14358:	e5843018 	str	r3, [r4, #24]
   1435c:	8a00000f 	bhi	143a0 <CUSBStandardHub::Initialize()+0xd0>
   14360:	e1a00006 	mov	r0, r6
   14364:	e28dd010 	add	sp, sp, #16
   14368:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1436c:	e1a06005 	mov	r6, r5
   14370:	eb004846 	bl	26490 <CLogger::Get()>
   14374:	e59f3070 	ldr	r3, [pc, #112]	; 143ec <CUSBStandardHub::Initialize()+0x11c>
   14378:	e3a02001 	mov	r2, #1
   1437c:	e59f106c 	ldr	r1, [pc, #108]	; 143f0 <CUSBStandardHub::Initialize()+0x120>
   14380:	eb00477f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14384:	e5940010 	ldr	r0, [r4, #16]
   14388:	e1a01007 	mov	r1, r7
   1438c:	eb005976 	bl	2a96c <operator delete(void*, unsigned int)>
   14390:	e1a00006 	mov	r0, r6
   14394:	e5845010 	str	r5, [r4, #16]
   14398:	e28dd010 	add	sp, sp, #16
   1439c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   143a0:	e1a06005 	mov	r6, r5
   143a4:	eb004839 	bl	26490 <CLogger::Get()>
   143a8:	e5942018 	ldr	r2, [r4, #24]
   143ac:	e59f3040 	ldr	r3, [pc, #64]	; 143f4 <CUSBStandardHub::Initialize()+0x124>
   143b0:	e58d2000 	str	r2, [sp]
   143b4:	e59f1034 	ldr	r1, [pc, #52]	; 143f0 <CUSBStandardHub::Initialize()+0x120>
   143b8:	e3a02001 	mov	r2, #1
   143bc:	eb004770 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143c0:	e5940010 	ldr	r0, [r4, #16]
   143c4:	e1a01008 	mov	r1, r8
   143c8:	eb005967 	bl	2a96c <operator delete(void*, unsigned int)>
   143cc:	e1a00006 	mov	r0, r6
   143d0:	e5845010 	str	r5, [r4, #16]
   143d4:	e28dd010 	add	sp, sp, #16
   143d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   143dc:	e3a02055 	mov	r2, #85	; 0x55
   143e0:	e59f1010 	ldr	r1, [pc, #16]	; 143f8 <CUSBStandardHub::Initialize()+0x128>
   143e4:	e59f0010 	ldr	r0, [pc, #16]	; 143fc <CUSBStandardHub::Initialize()+0x12c>
   143e8:	eb003f35 	bl	240c4 <assertion_failed>
   143ec:	00042930 	.word	0x00042930
   143f0:	000428d4 	.word	0x000428d4
   143f4:	0004294c 	.word	0x0004294c
   143f8:	000428dc 	.word	0x000428dc
   143fc:	00042920 	.word	0x00042920

00014400 <CUSBStandardHub::EnumeratePorts()>:
   14400:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14404:	e24dd024 	sub	sp, sp, #36	; 0x24
   14408:	e1a07000 	mov	r7, r0
   1440c:	ebffea64 	bl	eda4 <CUSBFunction::GetHost() const>
   14410:	e2509000 	subs	r9, r0, #0
   14414:	0a000139 	beq	14900 <CUSBStandardHub::EnumeratePorts()+0x500>
   14418:	e1a00007 	mov	r0, r7
   1441c:	ebffea55 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   14420:	e2503000 	subs	r3, r0, #0
   14424:	e58d3014 	str	r3, [sp, #20]
   14428:	0a00013f 	beq	1492c <CUSBStandardHub::EnumeratePorts()+0x52c>
   1442c:	e5973018 	ldr	r3, [r7, #24]
   14430:	e3530000 	cmp	r3, #0
   14434:	0a000140 	beq	1493c <CUSBStandardHub::EnumeratePorts()+0x53c>
   14438:	e5d7601c 	ldrb	r6, [r7, #28]
   1443c:	e3560000 	cmp	r6, #0
   14440:	0a000074 	beq	14618 <CUSBStandardHub::EnumeratePorts()+0x218>
   14444:	e2873020 	add	r3, r7, #32
   14448:	e58d3018 	str	r3, [sp, #24]
   1444c:	e1a05003 	mov	r5, r3
   14450:	e3a04001 	mov	r4, #1
   14454:	e2876040 	add	r6, r7, #64	; 0x40
   14458:	ea000006 	b	14478 <CUSBStandardHub::EnumeratePorts()+0x78>
   1445c:	ebffe3eb 	bl	d410 <CUSBDevice::ReScanDevices()>
   14460:	e5973018 	ldr	r3, [r7, #24]
   14464:	e2855004 	add	r5, r5, #4
   14468:	e1530004 	cmp	r3, r4
   1446c:	e2866004 	add	r6, r6, #4
   14470:	e2844001 	add	r4, r4, #1
   14474:	9a000089 	bls	146a0 <CUSBStandardHub::EnumeratePorts()+0x2a0>
   14478:	e5950000 	ldr	r0, [r5]
   1447c:	e2448001 	sub	r8, r4, #1
   14480:	e3500000 	cmp	r0, #0
   14484:	1afffff4 	bne	1445c <CUSBStandardHub::EnumeratePorts()+0x5c>
   14488:	e5963000 	ldr	r3, [r6]
   1448c:	e3530000 	cmp	r3, #0
   14490:	0a00005b 	beq	14604 <CUSBStandardHub::EnumeratePorts()+0x204>
   14494:	e3a02004 	mov	r2, #4
   14498:	e58d3008 	str	r3, [sp, #8]
   1449c:	e3a03000 	mov	r3, #0
   144a0:	e6ffa074 	uxth	sl, r4
   144a4:	e58d200c 	str	r2, [sp, #12]
   144a8:	e88d0408 	stm	sp, {r3, sl}
   144ac:	e3a020a3 	mov	r2, #163	; 0xa3
   144b0:	e59d1014 	ldr	r1, [sp, #20]
   144b4:	e1a00009 	mov	r0, r9
   144b8:	ebfff60b 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   144bc:	e3500004 	cmp	r0, #4
   144c0:	e1a0b000 	mov	fp, r0
   144c4:	0a000006 	beq	144e4 <CUSBStandardHub::EnumeratePorts()+0xe4>
   144c8:	eb0047f0 	bl	26490 <CLogger::Get()>
   144cc:	e58d4000 	str	r4, [sp]
   144d0:	e59f35b4 	ldr	r3, [pc, #1460]	; 14a8c <CUSBStandardHub::EnumeratePorts()+0x68c>
   144d4:	e3a02001 	mov	r2, #1
   144d8:	e59f15b0 	ldr	r1, [pc, #1456]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   144dc:	eb004728 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   144e0:	eaffffde 	b	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   144e4:	e5962000 	ldr	r2, [r6]
   144e8:	e5d23000 	ldrb	r3, [r2]
   144ec:	e5d22001 	ldrb	r2, [r2, #1]
   144f0:	e1833402 	orr	r3, r3, r2, lsl #8
   144f4:	e3130c01 	tst	r3, #256	; 0x100
   144f8:	0a0000f5 	beq	148d4 <CUSBStandardHub::EnumeratePorts()+0x4d4>
   144fc:	e3130001 	tst	r3, #1
   14500:	0affffd6 	beq	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   14504:	e3a03000 	mov	r3, #0
   14508:	e58d0000 	str	r0, [sp]
   1450c:	e58d300c 	str	r3, [sp, #12]
   14510:	e58d3008 	str	r3, [sp, #8]
   14514:	e58da004 	str	sl, [sp, #4]
   14518:	e3a03003 	mov	r3, #3
   1451c:	e3a02023 	mov	r2, #35	; 0x23
   14520:	e59d1014 	ldr	r1, [sp, #20]
   14524:	e1a00009 	mov	r0, r9
   14528:	ebfff5ef 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1452c:	e3500000 	cmp	r0, #0
   14530:	ba0000eb 	blt	148e4 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14534:	eb0054a1 	bl	297c0 <CTimer::Get()>
   14538:	e3a00064 	mov	r0, #100	; 0x64
   1453c:	eb005466 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   14540:	e3a02000 	mov	r2, #0
   14544:	e5963000 	ldr	r3, [r6]
   14548:	e59d1014 	ldr	r1, [sp, #20]
   1454c:	e58d2000 	str	r2, [sp]
   14550:	e58d3008 	str	r3, [sp, #8]
   14554:	e58db00c 	str	fp, [sp, #12]
   14558:	e1a03002 	mov	r3, r2
   1455c:	e58da004 	str	sl, [sp, #4]
   14560:	e3a020a3 	mov	r2, #163	; 0xa3
   14564:	e1a00009 	mov	r0, r9
   14568:	ebfff5df 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1456c:	e3500004 	cmp	r0, #4
   14570:	1a00012e 	bne	14a30 <CUSBStandardHub::EnumeratePorts()+0x630>
   14574:	e5962000 	ldr	r2, [r6]
   14578:	e5d23000 	ldrb	r3, [r2]
   1457c:	e5d22001 	ldrb	r2, [r2, #1]
   14580:	e1833402 	orr	r3, r3, r2, lsl #8
   14584:	e3130002 	tst	r3, #2
   14588:	0a0000e0 	beq	14910 <CUSBStandardHub::EnumeratePorts()+0x510>
   1458c:	e3130008 	tst	r3, #8
   14590:	1a000128 	bne	14a38 <CUSBStandardHub::EnumeratePorts()+0x638>
   14594:	e3130c02 	tst	r3, #512	; 0x200
   14598:	13a0b000 	movne	fp, #0
   1459c:	0a0000ac 	beq	14854 <CUSBStandardHub::EnumeratePorts()+0x454>
   145a0:	e5953000 	ldr	r3, [r5]
   145a4:	e3530000 	cmp	r3, #0
   145a8:	1a0000e7 	bne	1494c <CUSBStandardHub::EnumeratePorts()+0x54c>
   145ac:	e3a00058 	mov	r0, #88	; 0x58
   145b0:	eb0058df 	bl	2a934 <operator new(unsigned int)>
   145b4:	e1a0a000 	mov	sl, r0
   145b8:	e1a0200b 	mov	r2, fp
   145bc:	e1a03007 	mov	r3, r7
   145c0:	e1a01009 	mov	r1, r9
   145c4:	e58d8000 	str	r8, [sp]
   145c8:	ebffe338 	bl	d2b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   145cc:	e585a000 	str	sl, [r5]
   145d0:	e1a0000a 	mov	r0, sl
   145d4:	ebffe4ba 	bl	d8c4 <CUSBDevice::Initialize()>
   145d8:	e3500000 	cmp	r0, #0
   145dc:	1affff9f 	bne	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   145e0:	e5950000 	ldr	r0, [r5]
   145e4:	e3500000 	cmp	r0, #0
   145e8:	0a000002 	beq	145f8 <CUSBStandardHub::EnumeratePorts()+0x1f8>
   145ec:	e5903000 	ldr	r3, [r0]
   145f0:	e5933004 	ldr	r3, [r3, #4]
   145f4:	e12fff33 	blx	r3
   145f8:	e3a03000 	mov	r3, #0
   145fc:	e5853000 	str	r3, [r5]
   14600:	eaffff96 	b	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   14604:	e3a00004 	mov	r0, #4
   14608:	eb0058c9 	bl	2a934 <operator new(unsigned int)>
   1460c:	e1a03000 	mov	r3, r0
   14610:	e5860000 	str	r0, [r6]
   14614:	eaffff9e 	b	14494 <CUSBStandardHub::EnumeratePorts()+0x94>
   14618:	e1a04006 	mov	r4, r6
   1461c:	e1a05006 	mov	r5, r6
   14620:	e58d6018 	str	r6, [sp, #24]
   14624:	e3a0b008 	mov	fp, #8
   14628:	e3a0a003 	mov	sl, #3
   1462c:	e3a08023 	mov	r8, #35	; 0x23
   14630:	e59d6014 	ldr	r6, [sp, #20]
   14634:	ea000002 	b	14644 <CUSBStandardHub::EnumeratePorts()+0x244>
   14638:	e5973018 	ldr	r3, [r7, #24]
   1463c:	e1530004 	cmp	r3, r4
   14640:	9a000093 	bls	14894 <CUSBStandardHub::EnumeratePorts()+0x494>
   14644:	e2844001 	add	r4, r4, #1
   14648:	e6ff3074 	uxth	r3, r4
   1464c:	e58d3004 	str	r3, [sp, #4]
   14650:	e58d500c 	str	r5, [sp, #12]
   14654:	e58d5008 	str	r5, [sp, #8]
   14658:	e58db000 	str	fp, [sp]
   1465c:	e1a0300a 	mov	r3, sl
   14660:	e1a02008 	mov	r2, r8
   14664:	e1a01006 	mov	r1, r6
   14668:	e1a00009 	mov	r0, r9
   1466c:	ebfff59e 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14670:	e3500000 	cmp	r0, #0
   14674:	aaffffef 	bge	14638 <CUSBStandardHub::EnumeratePorts()+0x238>
   14678:	e59d6018 	ldr	r6, [sp, #24]
   1467c:	eb004783 	bl	26490 <CLogger::Get()>
   14680:	e58d4000 	str	r4, [sp]
   14684:	e59f3408 	ldr	r3, [pc, #1032]	; 14a94 <CUSBStandardHub::EnumeratePorts()+0x694>
   14688:	e3a02001 	mov	r2, #1
   1468c:	e59f13fc 	ldr	r1, [pc, #1020]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   14690:	eb0046bb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14694:	e1a00006 	mov	r0, r6
   14698:	e28dd024 	add	sp, sp, #36	; 0x24
   1469c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a0:	e3530000 	cmp	r3, #0
   146a4:	0a00002a 	beq	14754 <CUSBStandardHub::EnumeratePorts()+0x354>
   146a8:	e3a04001 	mov	r4, #1
   146ac:	e58d901c 	str	r9, [sp, #28]
   146b0:	e3a0a004 	mov	sl, #4
   146b4:	e1a06004 	mov	r6, r4
   146b8:	e3a0b002 	mov	fp, #2
   146bc:	e59f83cc 	ldr	r8, [pc, #972]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   146c0:	e2875060 	add	r5, r7, #96	; 0x60
   146c4:	e59d9018 	ldr	r9, [sp, #24]
   146c8:	ea000004 	b	146e0 <CUSBStandardHub::EnumeratePorts()+0x2e0>
   146cc:	e1530004 	cmp	r3, r4
   146d0:	e2899004 	add	r9, r9, #4
   146d4:	e2844001 	add	r4, r4, #1
   146d8:	e2855001 	add	r5, r5, #1
   146dc:	9a00001b 	bls	14750 <CUSBStandardHub::EnumeratePorts()+0x350>
   146e0:	e5990000 	ldr	r0, [r9]
   146e4:	e3500000 	cmp	r0, #0
   146e8:	0afffff7 	beq	146cc <CUSBStandardHub::EnumeratePorts()+0x2cc>
   146ec:	e5d52000 	ldrb	r2, [r5]
   146f0:	e3520000 	cmp	r2, #0
   146f4:	1afffff4 	bne	146cc <CUSBStandardHub::EnumeratePorts()+0x2cc>
   146f8:	e5903000 	ldr	r3, [r0]
   146fc:	e5c56000 	strb	r6, [r5]
   14700:	e593300c 	ldr	r3, [r3, #12]
   14704:	e12fff33 	blx	r3
   14708:	e3500000 	cmp	r0, #0
   1470c:	1a000048 	bne	14834 <CUSBStandardHub::EnumeratePorts()+0x434>
   14710:	eb00475e 	bl	26490 <CLogger::Get()>
   14714:	e58d4000 	str	r4, [sp]
   14718:	e59f3378 	ldr	r3, [pc, #888]	; 14a98 <CUSBStandardHub::EnumeratePorts()+0x698>
   1471c:	e1a0200b 	mov	r2, fp
   14720:	e1a01008 	mov	r1, r8
   14724:	eb004696 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14728:	e5990000 	ldr	r0, [r9]
   1472c:	e3500000 	cmp	r0, #0
   14730:	0a000002 	beq	14740 <CUSBStandardHub::EnumeratePorts()+0x340>
   14734:	e5903000 	ldr	r3, [r0]
   14738:	e5933004 	ldr	r3, [r3, #4]
   1473c:	e12fff33 	blx	r3
   14740:	e3a03000 	mov	r3, #0
   14744:	e5893000 	str	r3, [r9]
   14748:	e5973018 	ldr	r3, [r7, #24]
   1474c:	eaffffde 	b	146cc <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14750:	e59d901c 	ldr	r9, [sp, #28]
   14754:	e3a00004 	mov	r0, #4
   14758:	eb005875 	bl	2a934 <operator new(unsigned int)>
   1475c:	e3a06000 	mov	r6, #0
   14760:	e3a04004 	mov	r4, #4
   14764:	e58d0008 	str	r0, [sp, #8]
   14768:	e1a0b000 	mov	fp, r0
   1476c:	e58d400c 	str	r4, [sp, #12]
   14770:	e58d6004 	str	r6, [sp, #4]
   14774:	e58d6000 	str	r6, [sp]
   14778:	e1a03006 	mov	r3, r6
   1477c:	e3a020a0 	mov	r2, #160	; 0xa0
   14780:	e59d1014 	ldr	r1, [sp, #20]
   14784:	e1a00009 	mov	r0, r9
   14788:	ebfff557 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1478c:	e1500004 	cmp	r0, r4
   14790:	e1a05000 	mov	r5, r0
   14794:	1a000035 	bne	14870 <CUSBStandardHub::EnumeratePorts()+0x470>
   14798:	e5db3000 	ldrb	r3, [fp]
   1479c:	e2138002 	ands	r8, r3, #2
   147a0:	0a00006d 	beq	1495c <CUSBStandardHub::EnumeratePorts()+0x55c>
   147a4:	e5973018 	ldr	r3, [r7, #24]
   147a8:	e3530000 	cmp	r3, #0
   147ac:	0a000016 	beq	1480c <CUSBStandardHub::EnumeratePorts()+0x40c>
   147b0:	e3a04001 	mov	r4, #1
   147b4:	e58db018 	str	fp, [sp, #24]
   147b8:	e1a0a004 	mov	sl, r4
   147bc:	e3a08008 	mov	r8, #8
   147c0:	e3a05023 	mov	r5, #35	; 0x23
   147c4:	e59db014 	ldr	fp, [sp, #20]
   147c8:	ea000000 	b	147d0 <CUSBStandardHub::EnumeratePorts()+0x3d0>
   147cc:	e1a04002 	mov	r4, r2
   147d0:	e6ff3074 	uxth	r3, r4
   147d4:	e58d3004 	str	r3, [sp, #4]
   147d8:	e1a02005 	mov	r2, r5
   147dc:	e1a0300a 	mov	r3, sl
   147e0:	e58d600c 	str	r6, [sp, #12]
   147e4:	e58d6008 	str	r6, [sp, #8]
   147e8:	e58d8000 	str	r8, [sp]
   147ec:	e1a0100b 	mov	r1, fp
   147f0:	e1a00009 	mov	r0, r9
   147f4:	ebfff53c 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   147f8:	e5973018 	ldr	r3, [r7, #24]
   147fc:	e2842001 	add	r2, r4, #1
   14800:	e1540003 	cmp	r4, r3
   14804:	3afffff0 	bcc	147cc <CUSBStandardHub::EnumeratePorts()+0x3cc>
   14808:	e59db018 	ldr	fp, [sp, #24]
   1480c:	eb00471f 	bl	26490 <CLogger::Get()>
   14810:	e59f3284 	ldr	r3, [pc, #644]	; 14a9c <CUSBStandardHub::EnumeratePorts()+0x69c>
   14814:	e3a02001 	mov	r2, #1
   14818:	e59f1270 	ldr	r1, [pc, #624]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   1481c:	eb004658 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14820:	e1a0000b 	mov	r0, fp
   14824:	e3a01004 	mov	r1, #4
   14828:	eb00584f 	bl	2a96c <operator delete(void*, unsigned int)>
   1482c:	e3a06000 	mov	r6, #0
   14830:	eaffff97 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14834:	eb004715 	bl	26490 <CLogger::Get()>
   14838:	e59f3260 	ldr	r3, [pc, #608]	; 14aa0 <CUSBStandardHub::EnumeratePorts()+0x6a0>
   1483c:	e58d4000 	str	r4, [sp]
   14840:	e1a0200a 	mov	r2, sl
   14844:	e1a01008 	mov	r1, r8
   14848:	eb00464d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1484c:	e5973018 	ldr	r3, [r7, #24]
   14850:	eaffff9d 	b	146cc <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14854:	e3130b01 	tst	r3, #1024	; 0x400
   14858:	e5953000 	ldr	r3, [r5]
   1485c:	03a0b001 	moveq	fp, #1
   14860:	13a0b002 	movne	fp, #2
   14864:	e3530000 	cmp	r3, #0
   14868:	0affff4f 	beq	145ac <CUSBStandardHub::EnumeratePorts()+0x1ac>
   1486c:	ea000036 	b	1494c <CUSBStandardHub::EnumeratePorts()+0x54c>
   14870:	eb004706 	bl	26490 <CLogger::Get()>
   14874:	e59f3228 	ldr	r3, [pc, #552]	; 14aa4 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14878:	e3a02001 	mov	r2, #1
   1487c:	e59f120c 	ldr	r1, [pc, #524]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   14880:	eb00463f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14884:	e1a01004 	mov	r1, r4
   14888:	e1a0000b 	mov	r0, fp
   1488c:	eb005836 	bl	2a96c <operator delete(void*, unsigned int)>
   14890:	eaffff7f 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14894:	e3a03001 	mov	r3, #1
   14898:	e5c7301c 	strb	r3, [r7, #28]
   1489c:	eb0044ba 	bl	25b8c <CKernelOptions::Get()>
   148a0:	e3500000 	cmp	r0, #0
   148a4:	0a000002 	beq	148b4 <CUSBStandardHub::EnumeratePorts()+0x4b4>
   148a8:	eb0044aa 	bl	25b58 <CKernelOptions::GetUSBPowerDelay() const>
   148ac:	e2504000 	subs	r4, r0, #0
   148b0:	1a000000 	bne	148b8 <CUSBStandardHub::EnumeratePorts()+0x4b8>
   148b4:	e59f41ec 	ldr	r4, [pc, #492]	; 14aa8 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   148b8:	eb0053c0 	bl	297c0 <CTimer::Get()>
   148bc:	e1a00004 	mov	r0, r4
   148c0:	eb005385 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   148c4:	e5973018 	ldr	r3, [r7, #24]
   148c8:	e3530000 	cmp	r3, #0
   148cc:	1afffedc 	bne	14444 <CUSBStandardHub::EnumeratePorts()+0x44>
   148d0:	eaffff9f 	b	14754 <CUSBStandardHub::EnumeratePorts()+0x354>
   148d4:	e59f21d0 	ldr	r2, [pc, #464]	; 14aac <CUSBStandardHub::EnumeratePorts()+0x6ac>
   148d8:	e59f11d0 	ldr	r1, [pc, #464]	; 14ab0 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   148dc:	e59f01d0 	ldr	r0, [pc, #464]	; 14ab4 <CUSBStandardHub::EnumeratePorts()+0x6b4>
   148e0:	eb003df7 	bl	240c4 <assertion_failed>
   148e4:	eb0046e9 	bl	26490 <CLogger::Get()>
   148e8:	e58d4000 	str	r4, [sp]
   148ec:	e59f31c4 	ldr	r3, [pc, #452]	; 14ab8 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   148f0:	e3a02001 	mov	r2, #1
   148f4:	e59f1194 	ldr	r1, [pc, #404]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   148f8:	eb004621 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   148fc:	eafffed7 	b	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   14900:	e3a020e3 	mov	r2, #227	; 0xe3
   14904:	e59f11a4 	ldr	r1, [pc, #420]	; 14ab0 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14908:	e59f01ac 	ldr	r0, [pc, #428]	; 14abc <CUSBStandardHub::EnumeratePorts()+0x6bc>
   1490c:	eb003dec 	bl	240c4 <assertion_failed>
   14910:	eb0046de 	bl	26490 <CLogger::Get()>
   14914:	e58d4000 	str	r4, [sp]
   14918:	e59f31a0 	ldr	r3, [pc, #416]	; 14ac0 <CUSBStandardHub::EnumeratePorts()+0x6c0>
   1491c:	e3a02001 	mov	r2, #1
   14920:	e59f1168 	ldr	r1, [pc, #360]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   14924:	eb004616 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14928:	eafffecc 	b	14460 <CUSBStandardHub::EnumeratePorts()+0x60>
   1492c:	e3a020e6 	mov	r2, #230	; 0xe6
   14930:	e59f1178 	ldr	r1, [pc, #376]	; 14ab0 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14934:	e59f0188 	ldr	r0, [pc, #392]	; 14ac4 <CUSBStandardHub::EnumeratePorts()+0x6c4>
   14938:	eb003de1 	bl	240c4 <assertion_failed>
   1493c:	e3a020e8 	mov	r2, #232	; 0xe8
   14940:	e59f1168 	ldr	r1, [pc, #360]	; 14ab0 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14944:	e59f017c 	ldr	r0, [pc, #380]	; 14ac8 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   14948:	eb003ddd 	bl	240c4 <assertion_failed>
   1494c:	e59f2178 	ldr	r2, [pc, #376]	; 14acc <CUSBStandardHub::EnumeratePorts()+0x6cc>
   14950:	e59f1158 	ldr	r1, [pc, #344]	; 14ab0 <CUSBStandardHub::EnumeratePorts()+0x6b0>
   14954:	e59f0174 	ldr	r0, [pc, #372]	; 14ad0 <CUSBStandardHub::EnumeratePorts()+0x6d0>
   14958:	eb003dd9 	bl	240c4 <assertion_failed>
   1495c:	e1a0000b 	mov	r0, fp
   14960:	e1a01005 	mov	r1, r5
   14964:	eb005800 	bl	2a96c <operator delete(void*, unsigned int)>
   14968:	e5973018 	ldr	r3, [r7, #24]
   1496c:	e3530000 	cmp	r3, #0
   14970:	0a000043 	beq	14a84 <CUSBStandardHub::EnumeratePorts()+0x684>
   14974:	e3a04001 	mov	r4, #1
   14978:	e1a0b005 	mov	fp, r5
   1497c:	e59da014 	ldr	sl, [sp, #20]
   14980:	e2875040 	add	r5, r7, #64	; 0x40
   14984:	e58d4014 	str	r4, [sp, #20]
   14988:	ea000004 	b	149a0 <CUSBStandardHub::EnumeratePorts()+0x5a0>
   1498c:	e5973018 	ldr	r3, [r7, #24]
   14990:	e2855004 	add	r5, r5, #4
   14994:	e1540003 	cmp	r4, r3
   14998:	e2844001 	add	r4, r4, #1
   1499c:	2a000021 	bcs	14a28 <CUSBStandardHub::EnumeratePorts()+0x628>
   149a0:	e5953000 	ldr	r3, [r5]
   149a4:	e6ff6074 	uxth	r6, r4
   149a8:	e58d3008 	str	r3, [sp, #8]
   149ac:	e58db00c 	str	fp, [sp, #12]
   149b0:	e58d8000 	str	r8, [sp]
   149b4:	e58d6004 	str	r6, [sp, #4]
   149b8:	e3a03000 	mov	r3, #0
   149bc:	e3a020a3 	mov	r2, #163	; 0xa3
   149c0:	e1a0100a 	mov	r1, sl
   149c4:	e1a00009 	mov	r0, r9
   149c8:	ebfff4c7 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   149cc:	e3500004 	cmp	r0, #4
   149d0:	1affffed 	bne	1498c <CUSBStandardHub::EnumeratePorts()+0x58c>
   149d4:	e5953000 	ldr	r3, [r5]
   149d8:	e5d33000 	ldrb	r3, [r3]
   149dc:	e3130008 	tst	r3, #8
   149e0:	0affffe9 	beq	1498c <CUSBStandardHub::EnumeratePorts()+0x58c>
   149e4:	e3a03008 	mov	r3, #8
   149e8:	e3a02023 	mov	r2, #35	; 0x23
   149ec:	e1a0100a 	mov	r1, sl
   149f0:	e58d3000 	str	r3, [sp]
   149f4:	e58d800c 	str	r8, [sp, #12]
   149f8:	e3a03001 	mov	r3, #1
   149fc:	e98d0140 	stmib	sp, {r6, r8}
   14a00:	e1a00009 	mov	r0, r9
   14a04:	ebfff4b8 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14a08:	eb0046a0 	bl	26490 <CLogger::Get()>
   14a0c:	e58d4000 	str	r4, [sp]
   14a10:	e59f30bc 	ldr	r3, [pc, #188]	; 14ad4 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   14a14:	e3a02001 	mov	r2, #1
   14a18:	e59f1070 	ldr	r1, [pc, #112]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   14a1c:	eb0045d8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a20:	e58d8014 	str	r8, [sp, #20]
   14a24:	eaffffd8 	b	1498c <CUSBStandardHub::EnumeratePorts()+0x58c>
   14a28:	e59d6014 	ldr	r6, [sp, #20]
   14a2c:	eaffff18 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14a30:	e3a06000 	mov	r6, #0
   14a34:	eaffff16 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14a38:	e3a02000 	mov	r2, #0
   14a3c:	e3a03008 	mov	r3, #8
   14a40:	e59d1014 	ldr	r1, [sp, #20]
   14a44:	e58d200c 	str	r2, [sp, #12]
   14a48:	e58d2008 	str	r2, [sp, #8]
   14a4c:	e58d3000 	str	r3, [sp]
   14a50:	e3a02023 	mov	r2, #35	; 0x23
   14a54:	e3a03001 	mov	r3, #1
   14a58:	e58da004 	str	sl, [sp, #4]
   14a5c:	e1a00009 	mov	r0, r9
   14a60:	ebfff4a1 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14a64:	eb004689 	bl	26490 <CLogger::Get()>
   14a68:	e58d4000 	str	r4, [sp]
   14a6c:	e59f3060 	ldr	r3, [pc, #96]	; 14ad4 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   14a70:	e3a02001 	mov	r2, #1
   14a74:	e59f1014 	ldr	r1, [pc, #20]	; 14a90 <CUSBStandardHub::EnumeratePorts()+0x690>
   14a78:	eb0045c1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a7c:	e3a06000 	mov	r6, #0
   14a80:	eaffff03 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14a84:	e3a06001 	mov	r6, #1
   14a88:	eaffff01 	b	14694 <CUSBStandardHub::EnumeratePorts()+0x294>
   14a8c:	00042998 	.word	0x00042998
   14a90:	000428d4 	.word	0x000428d4
   14a94:	00042980 	.word	0x00042980
   14a98:	00042a58 	.word	0x00042a58
   14a9c:	00042ab0 	.word	0x00042ab0
   14aa0:	00042a7c 	.word	0x00042a7c
   14aa4:	00042a98 	.word	0x00042a98
   14aa8:	000001fe 	.word	0x000001fe
   14aac:	00000125 	.word	0x00000125
   14ab0:	000428dc 	.word	0x000428dc
   14ab4:	000429b8 	.word	0x000429b8
   14ab8:	000429ec 	.word	0x000429ec
   14abc:	000423c8 	.word	0x000423c8
   14ac0:	00042a04 	.word	0x00042a04
   14ac4:	00042960 	.word	0x00042960
   14ac8:	00042970 	.word	0x00042970
   14acc:	00000162 	.word	0x00000162
   14ad0:	00042a40 	.word	0x00042a40
   14ad4:	00042a1c 	.word	0x00042a1c

00014ad8 <CUSBStandardHub::ReScanDevices()>:
   14ad8:	eafffe48 	b	14400 <CUSBStandardHub::EnumeratePorts()>

00014adc <CUSBStandardHub::Configure()>:
   14adc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14ae0:	e24dd010 	sub	sp, sp, #16
   14ae4:	e1a04000 	mov	r4, r0
   14ae8:	ebffe88b 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   14aec:	e3500001 	cmp	r0, #1
   14af0:	0a000006 	beq	14b10 <CUSBStandardHub::Configure()+0x34>
   14af4:	e1a00004 	mov	r0, r4
   14af8:	e59f1110 	ldr	r1, [pc, #272]	; 14c10 <CUSBStandardHub::Configure()+0x134>
   14afc:	ebffe8be 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   14b00:	e3a06000 	mov	r6, #0
   14b04:	e1a00006 	mov	r0, r6
   14b08:	e28dd010 	add	sp, sp, #16
   14b0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b10:	e1a05000 	mov	r5, r0
   14b14:	e3a01005 	mov	r1, #5
   14b18:	e1a00004 	mov	r0, r4
   14b1c:	ebffe8ab 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   14b20:	e2506000 	subs	r6, r0, #0
   14b24:	0afffff2 	beq	14af4 <CUSBStandardHub::Configure()+0x18>
   14b28:	e1d630d2 	ldrsb	r3, [r6, #2]
   14b2c:	e3530000 	cmp	r3, #0
   14b30:	aaffffef 	bge	14af4 <CUSBStandardHub::Configure()+0x18>
   14b34:	e5d63003 	ldrb	r3, [r6, #3]
   14b38:	e203303f 	and	r3, r3, #63	; 0x3f
   14b3c:	e3530003 	cmp	r3, #3
   14b40:	1affffeb 	bne	14af4 <CUSBStandardHub::Configure()+0x18>
   14b44:	e1a00004 	mov	r0, r4
   14b48:	ebffe87f 	bl	ed4c <CUSBFunction::GetDevice() const>
   14b4c:	e1a08000 	mov	r8, r0
   14b50:	e3a00014 	mov	r0, #20
   14b54:	eb005776 	bl	2a934 <operator new(unsigned int)>
   14b58:	e1a07000 	mov	r7, r0
   14b5c:	e1a02006 	mov	r2, r6
   14b60:	e1a01008 	mov	r1, r8
   14b64:	ebffe6b5 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14b68:	e5847014 	str	r7, [r4, #20]
   14b6c:	e1a00004 	mov	r0, r4
   14b70:	ebffe7b1 	bl	ea3c <CUSBFunction::Configure()>
   14b74:	e2506000 	subs	r6, r0, #0
   14b78:	0a000018 	beq	14be0 <CUSBStandardHub::Configure()+0x104>
   14b7c:	e1a0000d 	mov	r0, sp
   14b80:	eb004a27 	bl	27424 <CString::CString()>
   14b84:	e59f3088 	ldr	r3, [pc, #136]	; 14c14 <CUSBStandardHub::Configure()+0x138>
   14b88:	e59f1088 	ldr	r1, [pc, #136]	; 14c18 <CUSBStandardHub::Configure()+0x13c>
   14b8c:	e5932000 	ldr	r2, [r3]
   14b90:	e1a0000d 	mov	r0, sp
   14b94:	e282c001 	add	ip, r2, #1
   14b98:	e583c000 	str	ip, [r3]
   14b9c:	eb004f63 	bl	28930 <CString::Format(char const*, ...)>
   14ba0:	eb004021 	bl	24c2c <CDeviceNameService::Get()>
   14ba4:	e1a06000 	mov	r6, r0
   14ba8:	e1a0000d 	mov	r0, sp
   14bac:	eb004a32 	bl	2747c <CString::operator char const*() const>
   14bb0:	e3a03000 	mov	r3, #0
   14bb4:	e1a01000 	mov	r1, r0
   14bb8:	e1a02004 	mov	r2, r4
   14bbc:	e1a00006 	mov	r0, r6
   14bc0:	eb003f5f 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14bc4:	e1a00004 	mov	r0, r4
   14bc8:	ebfffe0c 	bl	14400 <CUSBStandardHub::EnumeratePorts()>
   14bcc:	e2506000 	subs	r6, r0, #0
   14bd0:	0a000008 	beq	14bf8 <CUSBStandardHub::Configure()+0x11c>
   14bd4:	e1a0000d 	mov	r0, sp
   14bd8:	eb0049de 	bl	27358 <CString::~CString()>
   14bdc:	eaffffc8 	b	14b04 <CUSBStandardHub::Configure()+0x28>
   14be0:	eb00462a 	bl	26490 <CLogger::Get()>
   14be4:	e1a02005 	mov	r2, r5
   14be8:	e59f302c 	ldr	r3, [pc, #44]	; 14c1c <CUSBStandardHub::Configure()+0x140>
   14bec:	e59f101c 	ldr	r1, [pc, #28]	; 14c10 <CUSBStandardHub::Configure()+0x134>
   14bf0:	eb004563 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bf4:	eaffffc2 	b	14b04 <CUSBStandardHub::Configure()+0x28>
   14bf8:	eb004624 	bl	26490 <CLogger::Get()>
   14bfc:	e1a02005 	mov	r2, r5
   14c00:	e59f3018 	ldr	r3, [pc, #24]	; 14c20 <CUSBStandardHub::Configure()+0x144>
   14c04:	e59f1004 	ldr	r1, [pc, #4]	; 14c10 <CUSBStandardHub::Configure()+0x134>
   14c08:	eb00455d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c0c:	eafffff0 	b	14bd4 <CUSBStandardHub::Configure()+0xf8>
   14c10:	000428d4 	.word	0x000428d4
   14c14:	00049990 	.word	0x00049990
   14c18:	00042acc 	.word	0x00042acc
   14c1c:	00041a90 	.word	0x00041a90
   14c20:	00042ad4 	.word	0x00042ad4

00014c24 <CLAN7800Device::GetMACAddress() const>:
   14c24:	e280001c 	add	r0, r0, #28
   14c28:	e12fff1e 	bx	lr

00014c2c <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   14c2c:	e2400010 	sub	r0, r0, #16
   14c30:	eafffffb 	b	14c24 <CLAN7800Device::GetMACAddress() const>

00014c34 <CLAN7800Device::~CLAN7800Device()>:
   14c34:	e92d4070 	push	{r4, r5, r6, lr}
   14c38:	e59f3074 	ldr	r3, [pc, #116]	; 14cb4 <CLAN7800Device::~CLAN7800Device()+0x80>
   14c3c:	e5905018 	ldr	r5, [r0, #24]
   14c40:	e2832040 	add	r2, r3, #64	; 0x40
   14c44:	e3550000 	cmp	r5, #0
   14c48:	e1a04000 	mov	r4, r0
   14c4c:	e5803000 	str	r3, [r0]
   14c50:	e5802010 	str	r2, [r0, #16]
   14c54:	0a000004 	beq	14c6c <CLAN7800Device::~CLAN7800Device()+0x38>
   14c58:	e1a00005 	mov	r0, r5
   14c5c:	ebffe6e1 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   14c60:	e1a00005 	mov	r0, r5
   14c64:	e3a01014 	mov	r1, #20
   14c68:	eb00573f 	bl	2a96c <operator delete(void*, unsigned int)>
   14c6c:	e3a03000 	mov	r3, #0
   14c70:	e5945014 	ldr	r5, [r4, #20]
   14c74:	e5843018 	str	r3, [r4, #24]
   14c78:	e1550003 	cmp	r5, r3
   14c7c:	0a000004 	beq	14c94 <CLAN7800Device::~CLAN7800Device()+0x60>
   14c80:	e1a00005 	mov	r0, r5
   14c84:	ebffe6d7 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   14c88:	e1a00005 	mov	r0, r5
   14c8c:	e3a01014 	mov	r1, #20
   14c90:	eb005735 	bl	2a96c <operator delete(void*, unsigned int)>
   14c94:	e3a03000 	mov	r3, #0
   14c98:	e284001c 	add	r0, r4, #28
   14c9c:	e5843014 	str	r3, [r4, #20]
   14ca0:	eb00563e 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   14ca4:	e1a00004 	mov	r0, r4
   14ca8:	ebffe73a 	bl	e998 <CUSBFunction::~CUSBFunction()>
   14cac:	e1a00004 	mov	r0, r4
   14cb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   14cb4:	00042af4 	.word	0x00042af4

00014cb8 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   14cb8:	e2400010 	sub	r0, r0, #16
   14cbc:	eaffffdc 	b	14c34 <CLAN7800Device::~CLAN7800Device()>

00014cc0 <CLAN7800Device::~CLAN7800Device()>:
   14cc0:	e92d4010 	push	{r4, lr}
   14cc4:	e1a04000 	mov	r4, r0
   14cc8:	ebffffd9 	bl	14c34 <CLAN7800Device::~CLAN7800Device()>
   14ccc:	e1a00004 	mov	r0, r4
   14cd0:	e3a01024 	mov	r1, #36	; 0x24
   14cd4:	eb005724 	bl	2a96c <operator delete(void*, unsigned int)>
   14cd8:	e1a00004 	mov	r0, r4
   14cdc:	e8bd8010 	pop	{r4, pc}

00014ce0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   14ce0:	e2400010 	sub	r0, r0, #16
   14ce4:	eafffff5 	b	14cc0 <CLAN7800Device::~CLAN7800Device()>

00014ce8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   14ce8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14cec:	e5903014 	ldr	r3, [r0, #20]
   14cf0:	e24dd030 	sub	sp, sp, #48	; 0x30
   14cf4:	e3530000 	cmp	r3, #0
   14cf8:	0a000034 	beq	14dd0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   14cfc:	e3510000 	cmp	r1, #0
   14d00:	e1a04001 	mov	r4, r1
   14d04:	0a000035 	beq	14de0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   14d08:	e3a06000 	mov	r6, #0
   14d0c:	e1a05000 	mov	r5, r0
   14d10:	e1a01003 	mov	r1, r3
   14d14:	e1a08002 	mov	r8, r2
   14d18:	e3a03d19 	mov	r3, #1600	; 0x640
   14d1c:	e1a02004 	mov	r2, r4
   14d20:	e58d6000 	str	r6, [sp]
   14d24:	e28d0008 	add	r0, sp, #8
   14d28:	ebfffbf5 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   14d2c:	e1a00005 	mov	r0, r5
   14d30:	ebffe81b 	bl	eda4 <CUSBFunction::GetHost() const>
   14d34:	e5903000 	ldr	r3, [r0]
   14d38:	e1a02006 	mov	r2, r6
   14d3c:	e5933008 	ldr	r3, [r3, #8]
   14d40:	e28d1008 	add	r1, sp, #8
   14d44:	e12fff33 	blx	r3
   14d48:	e2505000 	subs	r5, r0, #0
   14d4c:	0a000019 	beq	14db8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   14d50:	e28d0008 	add	r0, sp, #8
   14d54:	ebfffc1d 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   14d58:	e3500009 	cmp	r0, #9
   14d5c:	9a000015 	bls	14db8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   14d60:	e5947000 	ldr	r7, [r4]
   14d64:	e3170501 	tst	r7, #4194304	; 0x400000
   14d68:	1a000020 	bne	14df0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   14d6c:	e1a03907 	lsl	r3, r7, #18
   14d70:	e1a03923 	lsr	r3, r3, #18
   14d74:	e240200a 	sub	r2, r0, #10
   14d78:	e1530002 	cmp	r3, r2
   14d7c:	1a000027 	bne	14e20 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   14d80:	e3530004 	cmp	r3, #4
   14d84:	9a000021 	bls	14e10 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   14d88:	e240600e 	sub	r6, r0, #14
   14d8c:	e1a02006 	mov	r2, r6
   14d90:	e284100a 	add	r1, r4, #10
   14d94:	e1a00004 	mov	r0, r4
   14d98:	eb00550c 	bl	2a1d0 <memcpy>
   14d9c:	e3580000 	cmp	r8, #0
   14da0:	15886000 	strne	r6, [r8]
   14da4:	1a000004 	bne	14dbc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   14da8:	e59f2080 	ldr	r2, [pc, #128]	; 14e30 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   14dac:	e59f1080 	ldr	r1, [pc, #128]	; 14e34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14db0:	e59f0080 	ldr	r0, [pc, #128]	; 14e38 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   14db4:	eb003cc2 	bl	240c4 <assertion_failed>
   14db8:	e3a05000 	mov	r5, #0
   14dbc:	e28d0008 	add	r0, sp, #8
   14dc0:	ebfffbf0 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   14dc4:	e1a00005 	mov	r0, r5
   14dc8:	e28dd030 	add	sp, sp, #48	; 0x30
   14dcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14dd0:	e59f2064 	ldr	r2, [pc, #100]	; 14e3c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   14dd4:	e59f1058 	ldr	r1, [pc, #88]	; 14e34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14dd8:	e59f0060 	ldr	r0, [pc, #96]	; 14e40 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   14ddc:	eb003cb8 	bl	240c4 <assertion_failed>
   14de0:	e3a02d07 	mov	r2, #448	; 0x1c0
   14de4:	e59f1048 	ldr	r1, [pc, #72]	; 14e34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14de8:	e59f0054 	ldr	r0, [pc, #84]	; 14e44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   14dec:	eb003cb4 	bl	240c4 <assertion_failed>
   14df0:	eb0045a6 	bl	26490 <CLogger::Get()>
   14df4:	e58d7000 	str	r7, [sp]
   14df8:	e59f3048 	ldr	r3, [pc, #72]	; 14e48 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   14dfc:	e3a02002 	mov	r2, #2
   14e00:	e59f1044 	ldr	r1, [pc, #68]	; 14e4c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   14e04:	e1a05006 	mov	r5, r6
   14e08:	eb0044dd 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e0c:	eaffffea 	b	14dbc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   14e10:	e3a02f76 	mov	r2, #472	; 0x1d8
   14e14:	e59f1018 	ldr	r1, [pc, #24]	; 14e34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14e18:	e59f0030 	ldr	r0, [pc, #48]	; 14e50 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   14e1c:	eb003ca8 	bl	240c4 <assertion_failed>
   14e20:	e59f202c 	ldr	r2, [pc, #44]	; 14e54 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   14e24:	e59f1008 	ldr	r1, [pc, #8]	; 14e34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14e28:	e59f0028 	ldr	r0, [pc, #40]	; 14e58 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   14e2c:	eb003ca4 	bl	240c4 <assertion_failed>
   14e30:	000001e3 	.word	0x000001e3
   14e34:	00042b64 	.word	0x00042b64
   14e38:	00042be4 	.word	0x00042be4
   14e3c:	000001bf 	.word	0x000001bf
   14e40:	00042b70 	.word	0x00042b70
   14e44:	000423b8 	.word	0x000423b8
   14e48:	00042b88 	.word	0x00042b88
   14e4c:	00042b5c 	.word	0x00042b5c
   14e50:	00042bd0 	.word	0x00042bd0
   14e54:	000001d7 	.word	0x000001d7
   14e58:	00042ba0 	.word	0x00042ba0

00014e5c <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   14e5c:	e2400010 	sub	r0, r0, #16
   14e60:	eaffffa0 	b	14ce8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

00014e64 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   14e64:	e3520d19 	cmp	r2, #1600	; 0x640
   14e68:	8a00001d 	bhi	14ee4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   14e6c:	e92d4070 	push	{r4, r5, r6, lr}
   14e70:	e3510000 	cmp	r1, #0
   14e74:	e24dde65 	sub	sp, sp, #1616	; 0x650
   14e78:	e24dd008 	sub	sp, sp, #8
   14e7c:	e1a05000 	mov	r5, r0
   14e80:	0a00001d 	beq	14efc <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   14e84:	e1a04002 	mov	r4, r2
   14e88:	e3a06000 	mov	r6, #0
   14e8c:	e28d0018 	add	r0, sp, #24
   14e90:	e2403008 	sub	r3, r0, #8
   14e94:	e58d300c 	str	r3, [sp, #12]
   14e98:	eb0054cc 	bl	2a1d0 <memcpy>
   14e9c:	e5952018 	ldr	r2, [r5, #24]
   14ea0:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   14ea4:	e1520006 	cmp	r2, r6
   14ea8:	e58d6014 	str	r6, [sp, #20]
   14eac:	e58d3010 	str	r3, [sp, #16]
   14eb0:	0a00000d 	beq	14eec <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   14eb4:	e1a00005 	mov	r0, r5
   14eb8:	ebffe7b9 	bl	eda4 <CUSBFunction::GetHost() const>
   14ebc:	e5951018 	ldr	r1, [r5, #24]
   14ec0:	e2843008 	add	r3, r4, #8
   14ec4:	e58d6000 	str	r6, [sp]
   14ec8:	e59d200c 	ldr	r2, [sp, #12]
   14ecc:	ebfff3ec 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14ed0:	e1e00000 	mvn	r0, r0
   14ed4:	e1a00fa0 	lsr	r0, r0, #31
   14ed8:	e28dde65 	add	sp, sp, #1616	; 0x650
   14edc:	e28dd008 	add	sp, sp, #8
   14ee0:	e8bd8070 	pop	{r4, r5, r6, pc}
   14ee4:	e3a00000 	mov	r0, #0
   14ee8:	e12fff1e 	bx	lr
   14eec:	e59f2018 	ldr	r2, [pc, #24]	; 14f0c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   14ef0:	e59f1018 	ldr	r1, [pc, #24]	; 14f10 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   14ef4:	e59f0018 	ldr	r0, [pc, #24]	; 14f14 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   14ef8:	eb003c71 	bl	240c4 <assertion_failed>
   14efc:	e59f2014 	ldr	r2, [pc, #20]	; 14f18 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   14f00:	e59f1008 	ldr	r1, [pc, #8]	; 14f10 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   14f04:	e59f0010 	ldr	r0, [pc, #16]	; 14f1c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   14f08:	eb003c6d 	bl	240c4 <assertion_failed>
   14f0c:	000001b9 	.word	0x000001b9
   14f10:	00042b64 	.word	0x00042b64
   14f14:	00042bf8 	.word	0x00042bf8
   14f18:	000001b2 	.word	0x000001b2
   14f1c:	000423b8 	.word	0x000423b8

00014f20 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   14f20:	e2400010 	sub	r0, r0, #16
   14f24:	eaffffce 	b	14e64 <CLAN7800Device::SendFrame(void const*, unsigned int)>

00014f28 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   14f28:	e92d4010 	push	{r4, lr}
   14f2c:	e1a04000 	mov	r4, r0
   14f30:	ebffe729 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14f34:	e3a02000 	mov	r2, #0
   14f38:	e59f3024 	ldr	r3, [pc, #36]	; 14f64 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   14f3c:	e5842014 	str	r2, [r4, #20]
   14f40:	e2831008 	add	r1, r3, #8
   14f44:	e2833048 	add	r3, r3, #72	; 0x48
   14f48:	e5841000 	str	r1, [r4]
   14f4c:	e5843010 	str	r3, [r4, #16]
   14f50:	e5842018 	str	r2, [r4, #24]
   14f54:	e284001c 	add	r0, r4, #28
   14f58:	eb00558d 	bl	2a594 <CMACAddress::CMACAddress()>
   14f5c:	e1a00004 	mov	r0, r4
   14f60:	e8bd8010 	pop	{r4, pc}
   14f64:	00042aec 	.word	0x00042aec

00014f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   14f68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14f6c:	e24dd01c 	sub	sp, sp, #28
   14f70:	e28d5018 	add	r5, sp, #24
   14f74:	e1a06001 	mov	r6, r1
   14f78:	e5252004 	str	r2, [r5, #-4]!
   14f7c:	e1a04000 	mov	r4, r0
   14f80:	ebffe787 	bl	eda4 <CUSBFunction::GetHost() const>
   14f84:	e1a07000 	mov	r7, r0
   14f88:	e1a00004 	mov	r0, r4
   14f8c:	ebffe779 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   14f90:	e3a04000 	mov	r4, #0
   14f94:	e3a03004 	mov	r3, #4
   14f98:	e6ff2076 	uxth	r2, r6
   14f9c:	e1a01000 	mov	r1, r0
   14fa0:	e58d2004 	str	r2, [sp, #4]
   14fa4:	e58d300c 	str	r3, [sp, #12]
   14fa8:	e58d5008 	str	r5, [sp, #8]
   14fac:	e1a00007 	mov	r0, r7
   14fb0:	e58d4000 	str	r4, [sp]
   14fb4:	e3a030a0 	mov	r3, #160	; 0xa0
   14fb8:	e3a02040 	mov	r2, #64	; 0x40
   14fbc:	ebfff34a 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14fc0:	e1500004 	cmp	r0, r4
   14fc4:	a3a00001 	movge	r0, #1
   14fc8:	ba000001 	blt	14fd4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   14fcc:	e28dd01c 	add	sp, sp, #28
   14fd0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14fd4:	eb00452d 	bl	26490 <CLogger::Get()>
   14fd8:	e58d6000 	str	r6, [sp]
   14fdc:	e59f3014 	ldr	r3, [pc, #20]	; 14ff8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   14fe0:	e3a02002 	mov	r2, #2
   14fe4:	e59f1010 	ldr	r1, [pc, #16]	; 14ffc <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   14fe8:	eb004465 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fec:	e1a00004 	mov	r0, r4
   14ff0:	e28dd01c 	add	sp, sp, #28
   14ff4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14ff8:	00042c10 	.word	0x00042c10
   14ffc:	00042b5c 	.word	0x00042b5c

00015000 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   15000:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15004:	e24dd014 	sub	sp, sp, #20
   15008:	e1a05001 	mov	r5, r1
   1500c:	e1a07002 	mov	r7, r2
   15010:	e1a04000 	mov	r4, r0
   15014:	ebffe762 	bl	eda4 <CUSBFunction::GetHost() const>
   15018:	e1a06000 	mov	r6, r0
   1501c:	e1a00004 	mov	r0, r4
   15020:	ebffe754 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   15024:	e3a04000 	mov	r4, #0
   15028:	e3a03004 	mov	r3, #4
   1502c:	e6ffc075 	uxth	ip, r5
   15030:	e1a01000 	mov	r1, r0
   15034:	e58d300c 	str	r3, [sp, #12]
   15038:	e58d7008 	str	r7, [sp, #8]
   1503c:	e58dc004 	str	ip, [sp, #4]
   15040:	e1a00006 	mov	r0, r6
   15044:	e58d4000 	str	r4, [sp]
   15048:	e3a030a1 	mov	r3, #161	; 0xa1
   1504c:	e3a020c0 	mov	r2, #192	; 0xc0
   15050:	ebfff325 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15054:	e3500004 	cmp	r0, #4
   15058:	03a00001 	moveq	r0, #1
   1505c:	0a000006 	beq	1507c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   15060:	eb00450a 	bl	26490 <CLogger::Get()>
   15064:	e58d5000 	str	r5, [sp]
   15068:	e59f3014 	ldr	r3, [pc, #20]	; 15084 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   1506c:	e3a02002 	mov	r2, #2
   15070:	e59f1010 	ldr	r1, [pc, #16]	; 15088 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   15074:	eb004442 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15078:	e1a00004 	mov	r0, r4
   1507c:	e28dd014 	add	sp, sp, #20
   15080:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15084:	00042c2c 	.word	0x00042c2c
   15088:	00042b5c 	.word	0x00042b5c

0001508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1508c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15090:	e24dd00c 	sub	sp, sp, #12
   15094:	e1a08000 	mov	r8, r0
   15098:	e1a09001 	mov	r9, r1
   1509c:	e1a0a002 	mov	sl, r2
   150a0:	e1a0b003 	mov	fp, r3
   150a4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   150a8:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   150ac:	eb0051c3 	bl	297c0 <CTimer::Get()>
   150b0:	e2505000 	subs	r5, r0, #0
   150b4:	0a000019 	beq	15120 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   150b8:	eb004f0a 	bl	28ce8 <CTimer::GetTicks() const>
   150bc:	e1a07000 	mov	r7, r0
   150c0:	ea00000e 	b	15100 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   150c4:	e1a00005 	mov	r0, r5
   150c8:	eb004f06 	bl	28ce8 <CTimer::GetTicks() const>
   150cc:	e0400007 	sub	r0, r0, r7
   150d0:	e1500006 	cmp	r0, r6
   150d4:	2a00000e 	bcs	15114 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   150d8:	e28d2004 	add	r2, sp, #4
   150dc:	e1a01009 	mov	r1, r9
   150e0:	e1a00008 	mov	r0, r8
   150e4:	ebffffc5 	bl	15000 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   150e8:	e3500000 	cmp	r0, #0
   150ec:	0a000008 	beq	15114 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   150f0:	e59d3004 	ldr	r3, [sp, #4]
   150f4:	e003300a 	and	r3, r3, sl
   150f8:	e153000b 	cmp	r3, fp
   150fc:	0a000005 	beq	15118 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   15100:	e3540000 	cmp	r4, #0
   15104:	0affffee 	beq	150c4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15108:	e1a00004 	mov	r0, r4
   1510c:	eb005179 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
   15110:	eaffffeb 	b	150c4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15114:	e3a00000 	mov	r0, #0
   15118:	e28dd00c 	add	sp, sp, #12
   1511c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15120:	e59f2008 	ldr	r2, [pc, #8]	; 15130 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   15124:	e59f1008 	ldr	r1, [pc, #8]	; 15134 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   15128:	e59f0008 	ldr	r0, [pc, #8]	; 15138 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   1512c:	eb003be4 	bl	240c4 <assertion_failed>
   15130:	0000028e 	.word	0x0000028e
   15134:	00042b64 	.word	0x00042b64
   15138:	00042c48 	.word	0x00042c48

0001513c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   1513c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15140:	e351001f 	cmp	r1, #31
   15144:	e24dd008 	sub	sp, sp, #8
   15148:	ca000025 	bgt	151e4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa8>
   1514c:	e3a05000 	mov	r5, #0
   15150:	e3a06064 	mov	r6, #100	; 0x64
   15154:	e1a04001 	mov	r4, r1
   15158:	e1a08002 	mov	r8, r2
   1515c:	e88d0060 	stm	sp, {r5, r6}
   15160:	e1a03005 	mov	r3, r5
   15164:	e3a02001 	mov	r2, #1
   15168:	e3a01e12 	mov	r1, #288	; 0x120
   1516c:	e1a07000 	mov	r7, r0
   15170:	ebffffc5 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15174:	e1500005 	cmp	r0, r5
   15178:	1a000002 	bne	15188 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   1517c:	e3a00000 	mov	r0, #0
   15180:	e28dd008 	add	sp, sp, #8
   15184:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15188:	e1a02008 	mov	r2, r8
   1518c:	e3a01f49 	mov	r1, #292	; 0x124
   15190:	e1a00007 	mov	r0, r7
   15194:	ebffff73 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15198:	e3500000 	cmp	r0, #0
   1519c:	0afffff6 	beq	1517c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   151a0:	e1a02304 	lsl	r2, r4, #6
   151a4:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   151a8:	e3822b02 	orr	r2, r2, #2048	; 0x800
   151ac:	e3822003 	orr	r2, r2, #3
   151b0:	e3a01e12 	mov	r1, #288	; 0x120
   151b4:	e1a00007 	mov	r0, r7
   151b8:	ebffff6a 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   151bc:	e3500000 	cmp	r0, #0
   151c0:	0affffed 	beq	1517c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   151c4:	e88d0060 	stm	sp, {r5, r6}
   151c8:	e1a03005 	mov	r3, r5
   151cc:	e1a00007 	mov	r0, r7
   151d0:	e3a02001 	mov	r2, #1
   151d4:	e3a01e12 	mov	r1, #288	; 0x120
   151d8:	ebffffab 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   151dc:	e28dd008 	add	sp, sp, #8
   151e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   151e4:	e59f2008 	ldr	r2, [pc, #8]	; 151f4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   151e8:	e59f1008 	ldr	r1, [pc, #8]	; 151f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   151ec:	e59f0008 	ldr	r0, [pc, #8]	; 151fc <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   151f0:	eb003bb3 	bl	240c4 <assertion_failed>
   151f4:	00000259 	.word	0x00000259
   151f8:	00042b64 	.word	0x00042b64
   151fc:	00042c54 	.word	0x00042c54

00015200 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   15200:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15204:	e351001f 	cmp	r1, #31
   15208:	e24dd010 	sub	sp, sp, #16
   1520c:	ca00002f 	bgt	152d0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   15210:	e3a05000 	mov	r5, #0
   15214:	e3a06064 	mov	r6, #100	; 0x64
   15218:	e1a04001 	mov	r4, r1
   1521c:	e1a08002 	mov	r8, r2
   15220:	e88d0060 	stm	sp, {r5, r6}
   15224:	e1a03005 	mov	r3, r5
   15228:	e3a02001 	mov	r2, #1
   1522c:	e3a01e12 	mov	r1, #288	; 0x120
   15230:	e1a07000 	mov	r7, r0
   15234:	ebffff94 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15238:	e3500000 	cmp	r0, #0
   1523c:	1a000001 	bne	15248 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   15240:	e28dd010 	add	sp, sp, #16
   15244:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15248:	e1a02304 	lsl	r2, r4, #6
   1524c:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   15250:	e3822b02 	orr	r2, r2, #2048	; 0x800
   15254:	e3822001 	orr	r2, r2, #1
   15258:	e3a01e12 	mov	r1, #288	; 0x120
   1525c:	e1a00007 	mov	r0, r7
   15260:	ebffff40 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15264:	e1500005 	cmp	r0, r5
   15268:	1a000002 	bne	15278 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x78>
   1526c:	e3a00000 	mov	r0, #0
   15270:	e28dd010 	add	sp, sp, #16
   15274:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15278:	e88d0060 	stm	sp, {r5, r6}
   1527c:	e1a03005 	mov	r3, r5
   15280:	e3a02001 	mov	r2, #1
   15284:	e3a01e12 	mov	r1, #288	; 0x120
   15288:	e1a00007 	mov	r0, r7
   1528c:	ebffff7e 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15290:	e3500000 	cmp	r0, #0
   15294:	0afffff4 	beq	1526c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   15298:	e1a00007 	mov	r0, r7
   1529c:	e28d200c 	add	r2, sp, #12
   152a0:	e3a01f49 	mov	r1, #292	; 0x124
   152a4:	ebffff55 	bl	15000 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   152a8:	e3500000 	cmp	r0, #0
   152ac:	0affffee 	beq	1526c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   152b0:	e3580000 	cmp	r8, #0
   152b4:	159d300c 	ldrne	r3, [sp, #12]
   152b8:	11c830b0 	strhne	r3, [r8]
   152bc:	1affffdf 	bne	15240 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   152c0:	e3a02fa1 	mov	r2, #644	; 0x284
   152c4:	e59f1014 	ldr	r1, [pc, #20]	; 152e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   152c8:	e59f0014 	ldr	r0, [pc, #20]	; 152e4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   152cc:	eb003b7c 	bl	240c4 <assertion_failed>
   152d0:	e3a02e27 	mov	r2, #624	; 0x270
   152d4:	e59f1004 	ldr	r1, [pc, #4]	; 152e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   152d8:	e59f0008 	ldr	r0, [pc, #8]	; 152e8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   152dc:	eb003b78 	bl	240c4 <assertion_failed>
   152e0:	00042b64 	.word	0x00042b64
   152e4:	00042c64 	.word	0x00042c64
   152e8:	00042c54 	.word	0x00042c54

000152ec <CLAN7800Device::IsLinkUp()>:
   152ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   152f0:	e24dd00c 	sub	sp, sp, #12
   152f4:	e28d2006 	add	r2, sp, #6
   152f8:	e3a01001 	mov	r1, #1
   152fc:	ebffffbf 	bl	15200 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15300:	e3500000 	cmp	r0, #0
   15304:	11dd00b6 	ldrhne	r0, [sp, #6]
   15308:	11a00120 	lsrne	r0, r0, #2
   1530c:	12000001 	andne	r0, r0, #1
   15310:	e28dd00c 	add	sp, sp, #12
   15314:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015318 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   15318:	e2400010 	sub	r0, r0, #16
   1531c:	eafffff2 	b	152ec <CLAN7800Device::IsLinkUp()>

00015320 <CLAN7800Device::GetLinkSpeed()>:
   15320:	e92d4010 	push	{r4, lr}
   15324:	e3a02000 	mov	r2, #0
   15328:	e24dd008 	sub	sp, sp, #8
   1532c:	e3a0101f 	mov	r1, #31
   15330:	e1a04000 	mov	r4, r0
   15334:	ebffff80 	bl	1513c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15338:	e3500000 	cmp	r0, #0
   1533c:	1a000002 	bne	1534c <CLAN7800Device::GetLinkSpeed()+0x2c>
   15340:	e3a00006 	mov	r0, #6
   15344:	e28dd008 	add	sp, sp, #8
   15348:	e8bd8010 	pop	{r4, pc}
   1534c:	e1a00004 	mov	r0, r4
   15350:	e28d2006 	add	r2, sp, #6
   15354:	e3a0101c 	mov	r1, #28
   15358:	ebffffa8 	bl	15200 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1535c:	e3500000 	cmp	r0, #0
   15360:	0afffff6 	beq	15340 <CLAN7800Device::GetLinkSpeed()+0x20>
   15364:	e1dd30b6 	ldrh	r3, [sp, #6]
   15368:	e3130901 	tst	r3, #16384	; 0x4000
   1536c:	1a00000d 	bne	153a8 <CLAN7800Device::GetLinkSpeed()+0x88>
   15370:	e3130902 	tst	r3, #32768	; 0x8000
   15374:	0afffff1 	beq	15340 <CLAN7800Device::GetLinkSpeed()+0x20>
   15378:	e1a031c3 	asr	r3, r3, #3
   1537c:	e2033007 	and	r3, r3, #7
   15380:	e3530006 	cmp	r3, #6
   15384:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   15388:	eaffffec 	b	15340 <CLAN7800Device::GetLinkSpeed()+0x20>
   1538c:	000153b8 	.word	0x000153b8
   15390:	000153c0 	.word	0x000153c0
   15394:	000153e0 	.word	0x000153e0
   15398:	00015340 	.word	0x00015340
   1539c:	000153d8 	.word	0x000153d8
   153a0:	000153d0 	.word	0x000153d0
   153a4:	000153c8 	.word	0x000153c8
   153a8:	e59f2038 	ldr	r2, [pc, #56]	; 153e8 <CLAN7800Device::GetLinkSpeed()+0xc8>
   153ac:	e59f1038 	ldr	r1, [pc, #56]	; 153ec <CLAN7800Device::GetLinkSpeed()+0xcc>
   153b0:	e59f0038 	ldr	r0, [pc, #56]	; 153f0 <CLAN7800Device::GetLinkSpeed()+0xd0>
   153b4:	eb003b42 	bl	240c4 <assertion_failed>
   153b8:	e3a00000 	mov	r0, #0
   153bc:	eaffffe0 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153c0:	e3a00002 	mov	r0, #2
   153c4:	eaffffde 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153c8:	e3a00005 	mov	r0, #5
   153cc:	eaffffdc 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153d0:	e3a00003 	mov	r0, #3
   153d4:	eaffffda 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153d8:	e3a00001 	mov	r0, #1
   153dc:	eaffffd8 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153e0:	e3a00004 	mov	r0, #4
   153e4:	eaffffd6 	b	15344 <CLAN7800Device::GetLinkSpeed()+0x24>
   153e8:	00000203 	.word	0x00000203
   153ec:	00042b64 	.word	0x00042b64
   153f0:	00042c70 	.word	0x00042c70

000153f4 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   153f4:	e2400010 	sub	r0, r0, #16
   153f8:	eaffffc8 	b	15320 <CLAN7800Device::GetLinkSpeed()>

000153fc <CLAN7800Device::InitPHY()>:
   153fc:	e92d4010 	push	{r4, lr}
   15400:	e3a02000 	mov	r2, #0
   15404:	e24dd008 	sub	sp, sp, #8
   15408:	e3a0101f 	mov	r1, #31
   1540c:	e1a04000 	mov	r4, r0
   15410:	ebffff49 	bl	1513c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15414:	e3500000 	cmp	r0, #0
   15418:	1a000001 	bne	15424 <CLAN7800Device::InitPHY()+0x28>
   1541c:	e28dd008 	add	sp, sp, #8
   15420:	e8bd8010 	pop	{r4, pc}
   15424:	e28d2006 	add	r2, sp, #6
   15428:	e3a0101d 	mov	r1, #29
   1542c:	e1a00004 	mov	r0, r4
   15430:	ebffff72 	bl	15200 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15434:	e3500000 	cmp	r0, #0
   15438:	0afffff7 	beq	1541c <CLAN7800Device::InitPHY()+0x20>
   1543c:	e1dd30b6 	ldrh	r3, [sp, #6]
   15440:	e1a00004 	mov	r0, r4
   15444:	e3c330ff 	bic	r3, r3, #255	; 0xff
   15448:	e3833061 	orr	r3, r3, #97	; 0x61
   1544c:	e1a02003 	mov	r2, r3
   15450:	e3a0101d 	mov	r1, #29
   15454:	e1cd30b6 	strh	r3, [sp, #6]
   15458:	ebffff37 	bl	1513c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1545c:	e28dd008 	add	sp, sp, #8
   15460:	e8bd8010 	pop	{r4, pc}

00015464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15464:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15468:	e24dd00c 	sub	sp, sp, #12
   1546c:	e1a06002 	mov	r6, r2
   15470:	e28d2004 	add	r2, sp, #4
   15474:	e1a04003 	mov	r4, r3
   15478:	e1a05000 	mov	r5, r0
   1547c:	e1a07001 	mov	r7, r1
   15480:	ebfffede 	bl	15000 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15484:	e3500000 	cmp	r0, #0
   15488:	0a000007 	beq	154ac <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   1548c:	e59d3004 	ldr	r3, [sp, #4]
   15490:	e1a01007 	mov	r1, r7
   15494:	e0044003 	and	r4, r4, r3
   15498:	e1844006 	orr	r4, r4, r6
   1549c:	e1a00005 	mov	r0, r5
   154a0:	e1a02004 	mov	r2, r4
   154a4:	e58d4004 	str	r4, [sp, #4]
   154a8:	ebfffeae 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   154ac:	e28dd00c 	add	sp, sp, #12
   154b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000154b4 <CLAN7800Device::InitMACAddress()>:
   154b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   154b8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   154bc:	e3a01000 	mov	r1, #0
   154c0:	e1a04000 	mov	r4, r0
   154c4:	e28d000c 	add	r0, sp, #12
   154c8:	eb003b1e 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   154cc:	e3a03000 	mov	r3, #0
   154d0:	e28d000c 	add	r0, sp, #12
   154d4:	e58d3000 	str	r3, [sp]
   154d8:	e28d2024 	add	r2, sp, #36	; 0x24
   154dc:	e3a03014 	mov	r3, #20
   154e0:	e59f10e0 	ldr	r1, [pc, #224]	; 155c8 <CLAN7800Device::InitMACAddress()+0x114>
   154e4:	eb003b23 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   154e8:	e3500000 	cmp	r0, #0
   154ec:	1a000005 	bne	15508 <CLAN7800Device::InitMACAddress()+0x54>
   154f0:	e3a04000 	mov	r4, #0
   154f4:	e28d000c 	add	r0, sp, #12
   154f8:	eb003b19 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   154fc:	e1a00004 	mov	r0, r4
   15500:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15504:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15508:	e284601c 	add	r6, r4, #28
   1550c:	e1a00006 	mov	r0, r6
   15510:	e28d1030 	add	r1, sp, #48	; 0x30
   15514:	eb00543f 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   15518:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1551c:	e3a01f47 	mov	r1, #284	; 0x11c
   15520:	e1a02005 	mov	r2, r5
   15524:	e1a00004 	mov	r0, r4
   15528:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   1552c:	ebfffe8d 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15530:	e3500000 	cmp	r0, #0
   15534:	0affffed 	beq	154f0 <CLAN7800Device::InitMACAddress()+0x3c>
   15538:	e1a02007 	mov	r2, r7
   1553c:	e3a01f46 	mov	r1, #280	; 0x118
   15540:	e1a00004 	mov	r0, r4
   15544:	ebfffe87 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15548:	e3500000 	cmp	r0, #0
   1554c:	0affffe7 	beq	154f0 <CLAN7800Device::InitMACAddress()+0x3c>
   15550:	e1a02005 	mov	r2, r5
   15554:	e59f1070 	ldr	r1, [pc, #112]	; 155cc <CLAN7800Device::InitMACAddress()+0x118>
   15558:	e1a00004 	mov	r0, r4
   1555c:	ebfffe81 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15560:	e3500000 	cmp	r0, #0
   15564:	0affffe1 	beq	154f0 <CLAN7800Device::InitMACAddress()+0x3c>
   15568:	e1a00004 	mov	r0, r4
   1556c:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15570:	e3a01b01 	mov	r1, #1024	; 0x400
   15574:	ebfffe7b 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15578:	e2504000 	subs	r4, r0, #0
   1557c:	0affffdb 	beq	154f0 <CLAN7800Device::InitMACAddress()+0x3c>
   15580:	e28d0014 	add	r0, sp, #20
   15584:	eb0047a6 	bl	27424 <CString::CString()>
   15588:	e28d1014 	add	r1, sp, #20
   1558c:	e1a00006 	mov	r0, r6
   15590:	eb005479 	bl	2a77c <CMACAddress::Format(CString*) const>
   15594:	eb0043bd 	bl	26490 <CLogger::Get()>
   15598:	e1a05000 	mov	r5, r0
   1559c:	e28d0014 	add	r0, sp, #20
   155a0:	eb0047b5 	bl	2747c <CString::operator char const*() const>
   155a4:	e59f3024 	ldr	r3, [pc, #36]	; 155d0 <CLAN7800Device::InitMACAddress()+0x11c>
   155a8:	e58d0000 	str	r0, [sp]
   155ac:	e3a02004 	mov	r2, #4
   155b0:	e1a00005 	mov	r0, r5
   155b4:	e59f1018 	ldr	r1, [pc, #24]	; 155d4 <CLAN7800Device::InitMACAddress()+0x120>
   155b8:	eb0042f1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   155bc:	e28d0014 	add	r0, sp, #20
   155c0:	eb004764 	bl	27358 <CString::~CString()>
   155c4:	eaffffca 	b	154f4 <CLAN7800Device::InitMACAddress()+0x40>
   155c8:	00010003 	.word	0x00010003
   155cc:	00000404 	.word	0x00000404
   155d0:	00042c98 	.word	0x00042c98
   155d4:	00042b5c 	.word	0x00042b5c

000155d8 <CLAN7800Device::Configure()>:
   155d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   155dc:	e24dd014 	sub	sp, sp, #20
   155e0:	e1a05000 	mov	r5, r0
   155e4:	ebffe5cc 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   155e8:	e3500003 	cmp	r0, #3
   155ec:	03a06005 	moveq	r6, #5
   155f0:	03a07014 	moveq	r7, #20
   155f4:	0a000004 	beq	1560c <CLAN7800Device::Configure()+0x34>
   155f8:	ea000034 	b	156d0 <CLAN7800Device::Configure()+0xf8>
   155fc:	e5d43003 	ldrb	r3, [r4, #3]
   15600:	e203303f 	and	r3, r3, #63	; 0x3f
   15604:	e3530002 	cmp	r3, #2
   15608:	0a00001f 	beq	1568c <CLAN7800Device::Configure()+0xb4>
   1560c:	e1a01006 	mov	r1, r6
   15610:	e1a00005 	mov	r0, r5
   15614:	ebffe5ed 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   15618:	e2504000 	subs	r4, r0, #0
   1561c:	1afffff6 	bne	155fc <CLAN7800Device::Configure()+0x24>
   15620:	e5953014 	ldr	r3, [r5, #20]
   15624:	e1a00005 	mov	r0, r5
   15628:	e3530000 	cmp	r3, #0
   1562c:	0a00004f 	beq	15770 <CLAN7800Device::Configure()+0x198>
   15630:	e5953018 	ldr	r3, [r5, #24]
   15634:	e3530000 	cmp	r3, #0
   15638:	0a00004c 	beq	15770 <CLAN7800Device::Configure()+0x198>
   1563c:	ebffe4fe 	bl	ea3c <CUSBFunction::Configure()>
   15640:	e2506000 	subs	r6, r0, #0
   15644:	0a00004f 	beq	15788 <CLAN7800Device::Configure()+0x1b0>
   15648:	e28d200c 	add	r2, sp, #12
   1564c:	e1a01004 	mov	r1, r4
   15650:	e1a00005 	mov	r0, r5
   15654:	ebfffe69 	bl	15000 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15658:	e3500000 	cmp	r0, #0
   1565c:	1a000030 	bne	15724 <CLAN7800Device::Configure()+0x14c>
   15660:	eb00438a 	bl	26490 <CLogger::Get()>
   15664:	e1dd20be 	ldrh	r2, [sp, #14]
   15668:	e59f33c0 	ldr	r3, [pc, #960]	; 15a30 <CLAN7800Device::Configure()+0x458>
   1566c:	e58d2000 	str	r2, [sp]
   15670:	e59f13bc 	ldr	r1, [pc, #956]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15674:	e3a02001 	mov	r2, #1
   15678:	eb0042c1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1567c:	e3a06000 	mov	r6, #0
   15680:	e1a00006 	mov	r0, r6
   15684:	e28dd014 	add	sp, sp, #20
   15688:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1568c:	e1d430d2 	ldrsb	r3, [r4, #2]
   15690:	e3530000 	cmp	r3, #0
   15694:	ba000014 	blt	156ec <CLAN7800Device::Configure()+0x114>
   15698:	e5953018 	ldr	r3, [r5, #24]
   1569c:	e1a00005 	mov	r0, r5
   156a0:	e3530000 	cmp	r3, #0
   156a4:	1a000031 	bne	15770 <CLAN7800Device::Configure()+0x198>
   156a8:	ebffe5a7 	bl	ed4c <CUSBFunction::GetDevice() const>
   156ac:	e1a09000 	mov	r9, r0
   156b0:	e1a00007 	mov	r0, r7
   156b4:	eb00549e 	bl	2a934 <operator new(unsigned int)>
   156b8:	e1a08000 	mov	r8, r0
   156bc:	e1a02004 	mov	r2, r4
   156c0:	e1a01009 	mov	r1, r9
   156c4:	ebffe3dd 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   156c8:	e5858018 	str	r8, [r5, #24]
   156cc:	eaffffce 	b	1560c <CLAN7800Device::Configure()+0x34>
   156d0:	e3a06000 	mov	r6, #0
   156d4:	e1a00005 	mov	r0, r5
   156d8:	e59f1354 	ldr	r1, [pc, #852]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   156dc:	ebffe5c6 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   156e0:	e1a00006 	mov	r0, r6
   156e4:	e28dd014 	add	sp, sp, #20
   156e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   156ec:	e5953014 	ldr	r3, [r5, #20]
   156f0:	e1a00005 	mov	r0, r5
   156f4:	e3530000 	cmp	r3, #0
   156f8:	1a00001c 	bne	15770 <CLAN7800Device::Configure()+0x198>
   156fc:	ebffe592 	bl	ed4c <CUSBFunction::GetDevice() const>
   15700:	e1a09000 	mov	r9, r0
   15704:	e1a00007 	mov	r0, r7
   15708:	eb005489 	bl	2a934 <operator new(unsigned int)>
   1570c:	e1a08000 	mov	r8, r0
   15710:	e1a02004 	mov	r2, r4
   15714:	e1a01009 	mov	r1, r9
   15718:	ebffe3c8 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1571c:	e5858014 	str	r8, [r5, #20]
   15720:	eaffffb9 	b	1560c <CLAN7800Device::Configure()+0x34>
   15724:	e1dd30be 	ldrh	r3, [sp, #14]
   15728:	e3530b1e 	cmp	r3, #30720	; 0x7800
   1572c:	1affffcb 	bne	15660 <CLAN7800Device::Configure()+0x88>
   15730:	e3e03000 	mvn	r3, #0
   15734:	e3a02002 	mov	r2, #2
   15738:	e3a01010 	mov	r1, #16
   1573c:	e1a00005 	mov	r0, r5
   15740:	ebffff47 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15744:	e3500000 	cmp	r0, #0
   15748:	1a000016 	bne	157a8 <CLAN7800Device::Configure()+0x1d0>
   1574c:	e3a06000 	mov	r6, #0
   15750:	eb00434e 	bl	26490 <CLogger::Get()>
   15754:	e59f32dc 	ldr	r3, [pc, #732]	; 15a38 <CLAN7800Device::Configure()+0x460>
   15758:	e3a02001 	mov	r2, #1
   1575c:	e59f12d0 	ldr	r1, [pc, #720]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15760:	eb004287 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15764:	e1a00006 	mov	r0, r6
   15768:	e28dd014 	add	sp, sp, #20
   1576c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15770:	e3a06000 	mov	r6, #0
   15774:	e59f12b8 	ldr	r1, [pc, #696]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15778:	ebffe59f 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   1577c:	e1a00006 	mov	r0, r6
   15780:	e28dd014 	add	sp, sp, #20
   15784:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15788:	eb004340 	bl	26490 <CLogger::Get()>
   1578c:	e59f32a8 	ldr	r3, [pc, #680]	; 15a3c <CLAN7800Device::Configure()+0x464>
   15790:	e3a02001 	mov	r2, #1
   15794:	e59f1298 	ldr	r1, [pc, #664]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15798:	eb004279 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1579c:	e1a00006 	mov	r0, r6
   157a0:	e28dd014 	add	sp, sp, #20
   157a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   157a8:	e3a01064 	mov	r1, #100	; 0x64
   157ac:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   157b0:	e58d1004 	str	r1, [sp, #4]
   157b4:	e58d2000 	str	r2, [sp]
   157b8:	e1a03004 	mov	r3, r4
   157bc:	e3a02002 	mov	r2, #2
   157c0:	e3a01010 	mov	r1, #16
   157c4:	e1a00005 	mov	r0, r5
   157c8:	ebfffe2f 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   157cc:	e3500000 	cmp	r0, #0
   157d0:	0affffdd 	beq	1574c <CLAN7800Device::Configure()+0x174>
   157d4:	e1a00005 	mov	r0, r5
   157d8:	ebffff35 	bl	154b4 <CLAN7800Device::InitMACAddress()>
   157dc:	e2506000 	subs	r6, r0, #0
   157e0:	0a000052 	beq	15930 <CLAN7800Device::Configure()+0x358>
   157e4:	e3a02018 	mov	r2, #24
   157e8:	e3a01090 	mov	r1, #144	; 0x90
   157ec:	e1a00005 	mov	r0, r5
   157f0:	ebfffddc 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   157f4:	e3500000 	cmp	r0, #0
   157f8:	0affff9f 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   157fc:	e3a02b02 	mov	r2, #2048	; 0x800
   15800:	e3a01094 	mov	r1, #148	; 0x94
   15804:	e1a00005 	mov	r0, r5
   15808:	ebfffdd6 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1580c:	e3500000 	cmp	r0, #0
   15810:	0affff99 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   15814:	e3e03010 	mvn	r3, #16
   15818:	e3a02603 	mov	r2, #3145728	; 0x300000
   1581c:	e3a01010 	mov	r1, #16
   15820:	e1a00005 	mov	r0, r5
   15824:	ebffff0e 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15828:	e3500000 	cmp	r0, #0
   1582c:	0affff92 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   15830:	e3e03040 	mvn	r3, #64	; 0x40
   15834:	e3a02020 	mov	r2, #32
   15838:	e3a01080 	mov	r1, #128	; 0x80
   1583c:	e1a00005 	mov	r0, r5
   15840:	ebffff07 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15844:	e3500000 	cmp	r0, #0
   15848:	0affff8b 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   1584c:	e3a02017 	mov	r2, #23
   15850:	e3a010c8 	mov	r1, #200	; 0xc8
   15854:	e1a00005 	mov	r0, r5
   15858:	ebfffdc2 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1585c:	e3500000 	cmp	r0, #0
   15860:	0affff85 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   15864:	e3a02017 	mov	r2, #23
   15868:	e3a010cc 	mov	r1, #204	; 0xcc
   1586c:	e1a00005 	mov	r0, r5
   15870:	ebfffdbc 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15874:	e3500000 	cmp	r0, #0
   15878:	0affff7f 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   1587c:	e3a02000 	mov	r2, #0
   15880:	e3a01098 	mov	r1, #152	; 0x98
   15884:	e1a00005 	mov	r0, r5
   15888:	ebfffdb6 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1588c:	e3500000 	cmp	r0, #0
   15890:	0affff79 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   15894:	e3e02000 	mvn	r2, #0
   15898:	e3a0100c 	mov	r1, #12
   1589c:	e1a00005 	mov	r0, r5
   158a0:	ebfffdb0 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158a4:	e3500000 	cmp	r0, #0
   158a8:	0affff73 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   158ac:	e3a02000 	mov	r2, #0
   158b0:	e3a01f43 	mov	r1, #268	; 0x10c
   158b4:	e1a00005 	mov	r0, r5
   158b8:	ebfffdaa 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158bc:	e3500000 	cmp	r0, #0
   158c0:	0affff6d 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   158c4:	e3a02000 	mov	r2, #0
   158c8:	e3a010d0 	mov	r1, #208	; 0xd0
   158cc:	e1a00005 	mov	r0, r5
   158d0:	ebfffda4 	bl	14f68 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158d4:	e3500000 	cmp	r0, #0
   158d8:	0affff67 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   158dc:	e3e03000 	mvn	r3, #0
   158e0:	e59f2158 	ldr	r2, [pc, #344]	; 15a40 <CLAN7800Device::Configure()+0x468>
   158e4:	e3a010b0 	mov	r1, #176	; 0xb0
   158e8:	e1a00005 	mov	r0, r5
   158ec:	ebfffedc 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   158f0:	e3500000 	cmp	r0, #0
   158f4:	0affff60 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   158f8:	e3e03000 	mvn	r3, #0
   158fc:	e3a02010 	mov	r2, #16
   15900:	e3a01014 	mov	r1, #20
   15904:	e1a00005 	mov	r0, r5
   15908:	ebfffed5 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1590c:	e3500000 	cmp	r0, #0
   15910:	1a00000c 	bne	15948 <CLAN7800Device::Configure()+0x370>
   15914:	eb0042dd 	bl	26490 <CLogger::Get()>
   15918:	e59f3124 	ldr	r3, [pc, #292]	; 15a44 <CLAN7800Device::Configure()+0x46c>
   1591c:	e3a02001 	mov	r2, #1
   15920:	e59f110c 	ldr	r1, [pc, #268]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15924:	eb004216 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15928:	e3a06000 	mov	r6, #0
   1592c:	eaffff53 	b	15680 <CLAN7800Device::Configure()+0xa8>
   15930:	eb0042d6 	bl	26490 <CLogger::Get()>
   15934:	e59f310c 	ldr	r3, [pc, #268]	; 15a48 <CLAN7800Device::Configure()+0x470>
   15938:	e3a02001 	mov	r2, #1
   1593c:	e59f10f0 	ldr	r1, [pc, #240]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15940:	eb00420f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15944:	eaffff4d 	b	15680 <CLAN7800Device::Configure()+0xa8>
   15948:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   1594c:	e3a03064 	mov	r3, #100	; 0x64
   15950:	e3a01014 	mov	r1, #20
   15954:	e88d000c 	stm	sp, {r2, r3}
   15958:	e1a00005 	mov	r0, r5
   1595c:	e3a03080 	mov	r3, #128	; 0x80
   15960:	e3a02090 	mov	r2, #144	; 0x90
   15964:	ebfffdc8 	bl	1508c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15968:	e3500000 	cmp	r0, #0
   1596c:	0affffe8 	beq	15914 <CLAN7800Device::Configure()+0x33c>
   15970:	e3e03000 	mvn	r3, #0
   15974:	e3a02b06 	mov	r2, #6144	; 0x1800
   15978:	e3a01c01 	mov	r1, #256	; 0x100
   1597c:	e1a00005 	mov	r0, r5
   15980:	ebfffeb7 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15984:	e3500000 	cmp	r0, #0
   15988:	0affff3b 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   1598c:	e3e03000 	mvn	r3, #0
   15990:	e3a02001 	mov	r2, #1
   15994:	e3a01f42 	mov	r1, #264	; 0x108
   15998:	e1a00005 	mov	r0, r5
   1599c:	ebfffeb0 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   159a0:	e3500000 	cmp	r0, #0
   159a4:	0affff34 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   159a8:	e3e03000 	mvn	r3, #0
   159ac:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   159b0:	e3a010c4 	mov	r1, #196	; 0xc4
   159b4:	e1a00005 	mov	r0, r5
   159b8:	ebfffea9 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   159bc:	e3500000 	cmp	r0, #0
   159c0:	0affff2d 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   159c4:	e59f3080 	ldr	r3, [pc, #128]	; 15a4c <CLAN7800Device::Configure()+0x474>
   159c8:	e59f2080 	ldr	r2, [pc, #128]	; 15a50 <CLAN7800Device::Configure()+0x478>
   159cc:	e3a01f41 	mov	r1, #260	; 0x104
   159d0:	e1a00005 	mov	r0, r5
   159d4:	ebfffea2 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   159d8:	e3500000 	cmp	r0, #0
   159dc:	0affff26 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   159e0:	e3e03000 	mvn	r3, #0
   159e4:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   159e8:	e3a010c0 	mov	r1, #192	; 0xc0
   159ec:	e1a00005 	mov	r0, r5
   159f0:	ebfffe9b 	bl	15464 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   159f4:	e3500000 	cmp	r0, #0
   159f8:	0affff1f 	beq	1567c <CLAN7800Device::Configure()+0xa4>
   159fc:	e1a00005 	mov	r0, r5
   15a00:	ebfffe7d 	bl	153fc <CLAN7800Device::InitPHY()>
   15a04:	e2506000 	subs	r6, r0, #0
   15a08:	0a000002 	beq	15a18 <CLAN7800Device::Configure()+0x440>
   15a0c:	e2850010 	add	r0, r5, #16
   15a10:	eb00537a 	bl	2a800 <CNetDevice::AddNetDevice()>
   15a14:	eaffff19 	b	15680 <CLAN7800Device::Configure()+0xa8>
   15a18:	eb00429c 	bl	26490 <CLogger::Get()>
   15a1c:	e59f3030 	ldr	r3, [pc, #48]	; 15a54 <CLAN7800Device::Configure()+0x47c>
   15a20:	e3a02001 	mov	r2, #1
   15a24:	e59f1008 	ldr	r1, [pc, #8]	; 15a34 <CLAN7800Device::Configure()+0x45c>
   15a28:	eb0041d5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a2c:	eaffff13 	b	15680 <CLAN7800Device::Configure()+0xa8>
   15a30:	00042ce4 	.word	0x00042ce4
   15a34:	00042b5c 	.word	0x00042b5c
   15a38:	00042cac 	.word	0x00042cac
   15a3c:	00041a90 	.word	0x00041a90
   15a40:	00000402 	.word	0x00000402
   15a44:	00042cfc 	.word	0x00042cfc
   15a48:	00042cbc 	.word	0x00042cbc
   15a4c:	c000ffff 	.word	0xc000ffff
   15a50:	05ee0001 	.word	0x05ee0001
   15a54:	00042cd4 	.word	0x00042cd4

00015a58 <CNetDevice::GetType()>:
   15a58:	e3a00000 	mov	r0, #0
   15a5c:	e12fff1e 	bx	lr

00015a60 <CNetDevice::IsSendFrameAdvisable()>:
   15a60:	e3a00001 	mov	r0, #1
   15a64:	e12fff1e 	bx	lr

00015a68 <CNetDevice::UpdatePHY()>:
   15a68:	e3a00000 	mov	r0, #0
   15a6c:	e12fff1e 	bx	lr

00015a70 <CSMSC951xDevice::GetMACAddress() const>:
   15a70:	e280001c 	add	r0, r0, #28
   15a74:	e12fff1e 	bx	lr

00015a78 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   15a78:	e2400010 	sub	r0, r0, #16
   15a7c:	eafffffb 	b	15a70 <CSMSC951xDevice::GetMACAddress() const>

00015a80 <CSMSC951xDevice::~CSMSC951xDevice()>:
   15a80:	e92d4070 	push	{r4, r5, r6, lr}
   15a84:	e59f3074 	ldr	r3, [pc, #116]	; 15b00 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   15a88:	e5905018 	ldr	r5, [r0, #24]
   15a8c:	e2832040 	add	r2, r3, #64	; 0x40
   15a90:	e3550000 	cmp	r5, #0
   15a94:	e1a04000 	mov	r4, r0
   15a98:	e5803000 	str	r3, [r0]
   15a9c:	e5802010 	str	r2, [r0, #16]
   15aa0:	0a000004 	beq	15ab8 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   15aa4:	e1a00005 	mov	r0, r5
   15aa8:	ebffe34e 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   15aac:	e1a00005 	mov	r0, r5
   15ab0:	e3a01014 	mov	r1, #20
   15ab4:	eb0053ac 	bl	2a96c <operator delete(void*, unsigned int)>
   15ab8:	e3a03000 	mov	r3, #0
   15abc:	e5945014 	ldr	r5, [r4, #20]
   15ac0:	e5843018 	str	r3, [r4, #24]
   15ac4:	e1550003 	cmp	r5, r3
   15ac8:	0a000004 	beq	15ae0 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   15acc:	e1a00005 	mov	r0, r5
   15ad0:	ebffe344 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   15ad4:	e1a00005 	mov	r0, r5
   15ad8:	e3a01014 	mov	r1, #20
   15adc:	eb0053a2 	bl	2a96c <operator delete(void*, unsigned int)>
   15ae0:	e3a03000 	mov	r3, #0
   15ae4:	e284001c 	add	r0, r4, #28
   15ae8:	e5843014 	str	r3, [r4, #20]
   15aec:	eb0052ab 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   15af0:	e1a00004 	mov	r0, r4
   15af4:	ebffe3a7 	bl	e998 <CUSBFunction::~CUSBFunction()>
   15af8:	e1a00004 	mov	r0, r4
   15afc:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b00:	00042d18 	.word	0x00042d18

00015b04 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   15b04:	e2400010 	sub	r0, r0, #16
   15b08:	eaffffdc 	b	15a80 <CSMSC951xDevice::~CSMSC951xDevice()>

00015b0c <CSMSC951xDevice::~CSMSC951xDevice()>:
   15b0c:	e92d4010 	push	{r4, lr}
   15b10:	e1a04000 	mov	r4, r0
   15b14:	ebffffd9 	bl	15a80 <CSMSC951xDevice::~CSMSC951xDevice()>
   15b18:	e1a00004 	mov	r0, r4
   15b1c:	e3a01024 	mov	r1, #36	; 0x24
   15b20:	eb005391 	bl	2a96c <operator delete(void*, unsigned int)>
   15b24:	e1a00004 	mov	r0, r4
   15b28:	e8bd8010 	pop	{r4, pc}

00015b2c <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   15b2c:	e2400010 	sub	r0, r0, #16
   15b30:	eafffff5 	b	15b0c <CSMSC951xDevice::~CSMSC951xDevice()>

00015b34 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   15b34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15b38:	e5903014 	ldr	r3, [r0, #20]
   15b3c:	e24dd030 	sub	sp, sp, #48	; 0x30
   15b40:	e3530000 	cmp	r3, #0
   15b44:	0a000036 	beq	15c24 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   15b48:	e3510000 	cmp	r1, #0
   15b4c:	e1a04001 	mov	r4, r1
   15b50:	0a000037 	beq	15c34 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   15b54:	e3a06000 	mov	r6, #0
   15b58:	e1a05000 	mov	r5, r0
   15b5c:	e1a01003 	mov	r1, r3
   15b60:	e1a07002 	mov	r7, r2
   15b64:	e3a03d19 	mov	r3, #1600	; 0x640
   15b68:	e1a02004 	mov	r2, r4
   15b6c:	e58d6000 	str	r6, [sp]
   15b70:	e28d0008 	add	r0, sp, #8
   15b74:	ebfff862 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15b78:	e1a00005 	mov	r0, r5
   15b7c:	ebffe488 	bl	eda4 <CUSBFunction::GetHost() const>
   15b80:	e5903000 	ldr	r3, [r0]
   15b84:	e1a02006 	mov	r2, r6
   15b88:	e5933008 	ldr	r3, [r3, #8]
   15b8c:	e28d1008 	add	r1, sp, #8
   15b90:	e12fff33 	blx	r3
   15b94:	e2505000 	subs	r5, r0, #0
   15b98:	0a00001b 	beq	15c0c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   15b9c:	e28d0008 	add	r0, sp, #8
   15ba0:	ebfff88a 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   15ba4:	e3500003 	cmp	r0, #3
   15ba8:	9a000017 	bls	15c0c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   15bac:	e5948000 	ldr	r8, [r4]
   15bb0:	e59f30cc 	ldr	r3, [pc, #204]	; 15c84 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   15bb4:	e0033008 	and	r3, r3, r8
   15bb8:	e3530000 	cmp	r3, #0
   15bbc:	1a000020 	bne	15c44 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   15bc0:	e59f20c0 	ldr	r2, [pc, #192]	; 15c88 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   15bc4:	e2400004 	sub	r0, r0, #4
   15bc8:	e0022828 	and	r2, r2, r8, lsr #16
   15bcc:	e1520000 	cmp	r2, r0
   15bd0:	1a000027 	bne	15c74 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   15bd4:	e3520004 	cmp	r2, #4
   15bd8:	9a000021 	bls	15c64 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   15bdc:	e2426004 	sub	r6, r2, #4
   15be0:	e1a02006 	mov	r2, r6
   15be4:	e2841004 	add	r1, r4, #4
   15be8:	e1a00004 	mov	r0, r4
   15bec:	eb005177 	bl	2a1d0 <memcpy>
   15bf0:	e3570000 	cmp	r7, #0
   15bf4:	15876000 	strne	r6, [r7]
   15bf8:	1a000004 	bne	15c10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   15bfc:	e59f2088 	ldr	r2, [pc, #136]	; 15c8c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   15c00:	e59f1088 	ldr	r1, [pc, #136]	; 15c90 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15c04:	e59f0088 	ldr	r0, [pc, #136]	; 15c94 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   15c08:	eb00392d 	bl	240c4 <assertion_failed>
   15c0c:	e3a05000 	mov	r5, #0
   15c10:	e28d0008 	add	r0, sp, #8
   15c14:	ebfff85b 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   15c18:	e1a00005 	mov	r0, r5
   15c1c:	e28dd030 	add	sp, sp, #48	; 0x30
   15c20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15c24:	e59f206c 	ldr	r2, [pc, #108]	; 15c98 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   15c28:	e59f1060 	ldr	r1, [pc, #96]	; 15c90 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15c2c:	e59f0068 	ldr	r0, [pc, #104]	; 15c9c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   15c30:	eb003923 	bl	240c4 <assertion_failed>
   15c34:	e3a02f45 	mov	r2, #276	; 0x114
   15c38:	e59f1050 	ldr	r1, [pc, #80]	; 15c90 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15c3c:	e59f005c 	ldr	r0, [pc, #92]	; 15ca0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   15c40:	eb00391f 	bl	240c4 <assertion_failed>
   15c44:	eb004211 	bl	26490 <CLogger::Get()>
   15c48:	e58d8000 	str	r8, [sp]
   15c4c:	e59f3050 	ldr	r3, [pc, #80]	; 15ca4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   15c50:	e3a02002 	mov	r2, #2
   15c54:	e59f104c 	ldr	r1, [pc, #76]	; 15ca8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   15c58:	e1a05006 	mov	r5, r6
   15c5c:	eb004148 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c60:	eaffffea 	b	15c10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   15c64:	e3a02f4b 	mov	r2, #300	; 0x12c
   15c68:	e59f1020 	ldr	r1, [pc, #32]	; 15c90 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15c6c:	e59f0038 	ldr	r0, [pc, #56]	; 15cac <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   15c70:	eb003913 	bl	240c4 <assertion_failed>
   15c74:	e59f2034 	ldr	r2, [pc, #52]	; 15cb0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   15c78:	e59f1010 	ldr	r1, [pc, #16]	; 15c90 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15c7c:	e59f0030 	ldr	r0, [pc, #48]	; 15cb4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   15c80:	eb00390f 	bl	240c4 <assertion_failed>
   15c84:	400090de 	.word	0x400090de
   15c88:	00003fff 	.word	0x00003fff
   15c8c:	00000137 	.word	0x00000137
   15c90:	00042d94 	.word	0x00042d94
   15c94:	00042be4 	.word	0x00042be4
   15c98:	00000113 	.word	0x00000113
   15c9c:	00042b70 	.word	0x00042b70
   15ca0:	000423b8 	.word	0x000423b8
   15ca4:	00042b88 	.word	0x00042b88
   15ca8:	00042d80 	.word	0x00042d80
   15cac:	00042bd0 	.word	0x00042bd0
   15cb0:	0000012b 	.word	0x0000012b
   15cb4:	00042da4 	.word	0x00042da4

00015cb8 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   15cb8:	e2400010 	sub	r0, r0, #16
   15cbc:	eaffff9c 	b	15b34 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

00015cc0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   15cc0:	e3520d19 	cmp	r2, #1600	; 0x640
   15cc4:	8a00001d 	bhi	15d40 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   15cc8:	e92d4030 	push	{r4, r5, lr}
   15ccc:	e3510000 	cmp	r1, #0
   15cd0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   15cd4:	e24dd00c 	sub	sp, sp, #12
   15cd8:	e1a05000 	mov	r5, r0
   15cdc:	0a00001d 	beq	15d58 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   15ce0:	e1a04002 	mov	r4, r2
   15ce4:	e28d0018 	add	r0, sp, #24
   15ce8:	e2403008 	sub	r3, r0, #8
   15cec:	e58d300c 	str	r3, [sp, #12]
   15cf0:	eb005136 	bl	2a1d0 <memcpy>
   15cf4:	e5952018 	ldr	r2, [r5, #24]
   15cf8:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   15cfc:	e3520000 	cmp	r2, #0
   15d00:	e58d4014 	str	r4, [sp, #20]
   15d04:	e58d3010 	str	r3, [sp, #16]
   15d08:	0a00000e 	beq	15d48 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   15d0c:	e1a00005 	mov	r0, r5
   15d10:	ebffe423 	bl	eda4 <CUSBFunction::GetHost() const>
   15d14:	e3a0c000 	mov	ip, #0
   15d18:	e5951018 	ldr	r1, [r5, #24]
   15d1c:	e2843008 	add	r3, r4, #8
   15d20:	e59d200c 	ldr	r2, [sp, #12]
   15d24:	e58dc000 	str	ip, [sp]
   15d28:	ebfff055 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15d2c:	e1e00000 	mvn	r0, r0
   15d30:	e1a00fa0 	lsr	r0, r0, #31
   15d34:	e28dde65 	add	sp, sp, #1616	; 0x650
   15d38:	e28dd00c 	add	sp, sp, #12
   15d3c:	e8bd8030 	pop	{r4, r5, pc}
   15d40:	e3a00000 	mov	r0, #0
   15d44:	e12fff1e 	bx	lr
   15d48:	e59f2018 	ldr	r2, [pc, #24]	; 15d68 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   15d4c:	e59f1018 	ldr	r1, [pc, #24]	; 15d6c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   15d50:	e59f0018 	ldr	r0, [pc, #24]	; 15d70 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   15d54:	eb0038da 	bl	240c4 <assertion_failed>
   15d58:	e59f2014 	ldr	r2, [pc, #20]	; 15d74 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   15d5c:	e59f1008 	ldr	r1, [pc, #8]	; 15d6c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   15d60:	e59f0010 	ldr	r0, [pc, #16]	; 15d78 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   15d64:	eb0038d6 	bl	240c4 <assertion_failed>
   15d68:	0000010d 	.word	0x0000010d
   15d6c:	00042d94 	.word	0x00042d94
   15d70:	00042bf8 	.word	0x00042bf8
   15d74:	00000106 	.word	0x00000106
   15d78:	000423b8 	.word	0x000423b8

00015d7c <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   15d7c:	e2400010 	sub	r0, r0, #16
   15d80:	eaffffce 	b	15cc0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

00015d84 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   15d84:	e92d4010 	push	{r4, lr}
   15d88:	e1a04000 	mov	r4, r0
   15d8c:	ebffe392 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15d90:	e3a02000 	mov	r2, #0
   15d94:	e59f3024 	ldr	r3, [pc, #36]	; 15dc0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   15d98:	e5842014 	str	r2, [r4, #20]
   15d9c:	e2831008 	add	r1, r3, #8
   15da0:	e2833048 	add	r3, r3, #72	; 0x48
   15da4:	e5841000 	str	r1, [r4]
   15da8:	e5843010 	str	r3, [r4, #16]
   15dac:	e5842018 	str	r2, [r4, #24]
   15db0:	e284001c 	add	r0, r4, #28
   15db4:	eb0051f6 	bl	2a594 <CMACAddress::CMACAddress()>
   15db8:	e1a00004 	mov	r0, r4
   15dbc:	e8bd8010 	pop	{r4, pc}
   15dc0:	00042d10 	.word	0x00042d10

00015dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   15dc4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15dc8:	e24dd01c 	sub	sp, sp, #28
   15dcc:	e28d5018 	add	r5, sp, #24
   15dd0:	e5252004 	str	r2, [r5, #-4]!
   15dd4:	e1a04001 	mov	r4, r1
   15dd8:	e1a07000 	mov	r7, r0
   15ddc:	ebffe3f0 	bl	eda4 <CUSBFunction::GetHost() const>
   15de0:	e1a06000 	mov	r6, r0
   15de4:	e1a00007 	mov	r0, r7
   15de8:	ebffe3e2 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   15dec:	e3a02004 	mov	r2, #4
   15df0:	e3a03000 	mov	r3, #0
   15df4:	e6ff4074 	uxth	r4, r4
   15df8:	e1a01000 	mov	r1, r0
   15dfc:	e58d200c 	str	r2, [sp, #12]
   15e00:	e58d3000 	str	r3, [sp]
   15e04:	e58d5008 	str	r5, [sp, #8]
   15e08:	e58d4004 	str	r4, [sp, #4]
   15e0c:	e1a00006 	mov	r0, r6
   15e10:	e3a030a0 	mov	r3, #160	; 0xa0
   15e14:	e3a02040 	mov	r2, #64	; 0x40
   15e18:	ebffefb3 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15e1c:	e1e00000 	mvn	r0, r0
   15e20:	e1a00fa0 	lsr	r0, r0, #31
   15e24:	e28dd01c 	add	sp, sp, #28
   15e28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015e2c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   15e2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15e30:	e24dd014 	sub	sp, sp, #20
   15e34:	e1a06002 	mov	r6, r2
   15e38:	e1a04001 	mov	r4, r1
   15e3c:	e1a07000 	mov	r7, r0
   15e40:	ebffe3d7 	bl	eda4 <CUSBFunction::GetHost() const>
   15e44:	e1a05000 	mov	r5, r0
   15e48:	e1a00007 	mov	r0, r7
   15e4c:	ebffe3c9 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   15e50:	e3a0c004 	mov	ip, #4
   15e54:	e3a03000 	mov	r3, #0
   15e58:	e6ff4074 	uxth	r4, r4
   15e5c:	e1a01000 	mov	r1, r0
   15e60:	e58d3000 	str	r3, [sp]
   15e64:	e58d6008 	str	r6, [sp, #8]
   15e68:	e58d4004 	str	r4, [sp, #4]
   15e6c:	e1a00005 	mov	r0, r5
   15e70:	e58dc00c 	str	ip, [sp, #12]
   15e74:	e3a030a1 	mov	r3, #161	; 0xa1
   15e78:	e3a020c0 	mov	r2, #192	; 0xc0
   15e7c:	ebffef9a 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15e80:	e2400004 	sub	r0, r0, #4
   15e84:	e16f0f10 	clz	r0, r0
   15e88:	e1a002a0 	lsr	r0, r0, #5
   15e8c:	e28dd014 	add	sp, sp, #20
   15e90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015e94 <CSMSC951xDevice::PHYWaitNotBusy()>:
   15e94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15e98:	e24dd00c 	sub	sp, sp, #12
   15e9c:	e1a06000 	mov	r6, r0
   15ea0:	eb004e46 	bl	297c0 <CTimer::Get()>
   15ea4:	e2504000 	subs	r4, r0, #0
   15ea8:	0a000014 	beq	15f00 <CSMSC951xDevice::PHYWaitNotBusy()+0x6c>
   15eac:	eb004b8d 	bl	28ce8 <CTimer::GetTicks() const>
   15eb0:	e3a07f45 	mov	r7, #276	; 0x114
   15eb4:	e1a05000 	mov	r5, r0
   15eb8:	ea000008 	b	15ee0 <CSMSC951xDevice::PHYWaitNotBusy()+0x4c>
   15ebc:	e28d2004 	add	r2, sp, #4
   15ec0:	e1a01007 	mov	r1, r7
   15ec4:	e1a00006 	mov	r0, r6
   15ec8:	ebffffd7 	bl	15e2c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15ecc:	e3500000 	cmp	r0, #0
   15ed0:	0a000007 	beq	15ef4 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   15ed4:	e59d3004 	ldr	r3, [sp, #4]
   15ed8:	e3130001 	tst	r3, #1
   15edc:	0a000005 	beq	15ef8 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   15ee0:	e1a00004 	mov	r0, r4
   15ee4:	eb004b7f 	bl	28ce8 <CTimer::GetTicks() const>
   15ee8:	e0400005 	sub	r0, r0, r5
   15eec:	e3500063 	cmp	r0, #99	; 0x63
   15ef0:	9afffff1 	bls	15ebc <CSMSC951xDevice::PHYWaitNotBusy()+0x28>
   15ef4:	e3a00000 	mov	r0, #0
   15ef8:	e28dd00c 	add	sp, sp, #12
   15efc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15f00:	e59f2008 	ldr	r2, [pc, #8]	; 15f10 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   15f04:	e59f1008 	ldr	r1, [pc, #8]	; 15f14 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   15f08:	e59f0008 	ldr	r0, [pc, #8]	; 15f18 <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   15f0c:	eb00386c 	bl	240c4 <assertion_failed>
   15f10:	0000018e 	.word	0x0000018e
   15f14:	00042d94 	.word	0x00042d94
   15f18:	00042c48 	.word	0x00042c48

00015f1c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   15f1c:	e351001f 	cmp	r1, #31
   15f20:	e92d4070 	push	{r4, r5, r6, lr}
   15f24:	ca000017 	bgt	15f88 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   15f28:	e1a04001 	mov	r4, r1
   15f2c:	e1a06002 	mov	r6, r2
   15f30:	e1a05000 	mov	r5, r0
   15f34:	ebffffd6 	bl	15e94 <CSMSC951xDevice::PHYWaitNotBusy()>
   15f38:	e3500000 	cmp	r0, #0
   15f3c:	1a000001 	bne	15f48 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   15f40:	e3a00000 	mov	r0, #0
   15f44:	e8bd8070 	pop	{r4, r5, r6, pc}
   15f48:	e1a02006 	mov	r2, r6
   15f4c:	e3a01f46 	mov	r1, #280	; 0x118
   15f50:	e1a00005 	mov	r0, r5
   15f54:	ebffff9a 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15f58:	e3500000 	cmp	r0, #0
   15f5c:	0afffff7 	beq	15f40 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   15f60:	e59f2030 	ldr	r2, [pc, #48]	; 15f98 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   15f64:	e3a01f45 	mov	r1, #276	; 0x114
   15f68:	e1822304 	orr	r2, r2, r4, lsl #6
   15f6c:	e1a00005 	mov	r0, r5
   15f70:	ebffff93 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15f74:	e3500000 	cmp	r0, #0
   15f78:	0afffff0 	beq	15f40 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   15f7c:	e1a00005 	mov	r0, r5
   15f80:	e8bd4070 	pop	{r4, r5, r6, lr}
   15f84:	eaffffc2 	b	15e94 <CSMSC951xDevice::PHYWaitNotBusy()>
   15f88:	e59f200c 	ldr	r2, [pc, #12]	; 15f9c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   15f8c:	e59f100c 	ldr	r1, [pc, #12]	; 15fa0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   15f90:	e59f000c 	ldr	r0, [pc, #12]	; 15fa4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   15f94:	eb00384a 	bl	240c4 <assertion_failed>
   15f98:	00000803 	.word	0x00000803
   15f9c:	00000162 	.word	0x00000162
   15fa0:	00042d94 	.word	0x00042d94
   15fa4:	00042c54 	.word	0x00042c54

00015fa8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   15fa8:	e92d4070 	push	{r4, r5, r6, lr}
   15fac:	e351001f 	cmp	r1, #31
   15fb0:	e24dd008 	sub	sp, sp, #8
   15fb4:	ca000023 	bgt	16048 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   15fb8:	e1a04001 	mov	r4, r1
   15fbc:	e1a06002 	mov	r6, r2
   15fc0:	e1a05000 	mov	r5, r0
   15fc4:	ebffffb2 	bl	15e94 <CSMSC951xDevice::PHYWaitNotBusy()>
   15fc8:	e3500000 	cmp	r0, #0
   15fcc:	1a000001 	bne	15fd8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   15fd0:	e28dd008 	add	sp, sp, #8
   15fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   15fd8:	e59f2078 	ldr	r2, [pc, #120]	; 16058 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   15fdc:	e3a01f45 	mov	r1, #276	; 0x114
   15fe0:	e1822304 	orr	r2, r2, r4, lsl #6
   15fe4:	e1a00005 	mov	r0, r5
   15fe8:	ebffff75 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15fec:	e3500000 	cmp	r0, #0
   15ff0:	1a000002 	bne	16000 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x58>
   15ff4:	e3a00000 	mov	r0, #0
   15ff8:	e28dd008 	add	sp, sp, #8
   15ffc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16000:	e1a00005 	mov	r0, r5
   16004:	ebffffa2 	bl	15e94 <CSMSC951xDevice::PHYWaitNotBusy()>
   16008:	e3500000 	cmp	r0, #0
   1600c:	0afffff8 	beq	15ff4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   16010:	e1a00005 	mov	r0, r5
   16014:	e28d2004 	add	r2, sp, #4
   16018:	e3a01f46 	mov	r1, #280	; 0x118
   1601c:	ebffff82 	bl	15e2c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16020:	e3500000 	cmp	r0, #0
   16024:	0afffff2 	beq	15ff4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   16028:	e3560000 	cmp	r6, #0
   1602c:	159d3004 	ldrne	r3, [sp, #4]
   16030:	11c630b0 	strhne	r3, [r6]
   16034:	1affffe5 	bne	15fd0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   16038:	e59f201c 	ldr	r2, [pc, #28]	; 1605c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   1603c:	e59f101c 	ldr	r1, [pc, #28]	; 16060 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   16040:	e59f001c 	ldr	r0, [pc, #28]	; 16064 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   16044:	eb00381e 	bl	240c4 <assertion_failed>
   16048:	e59f2018 	ldr	r2, [pc, #24]	; 16068 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   1604c:	e59f100c 	ldr	r1, [pc, #12]	; 16060 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   16050:	e59f0014 	ldr	r0, [pc, #20]	; 1606c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   16054:	eb00381a 	bl	240c4 <assertion_failed>
   16058:	00000801 	.word	0x00000801
   1605c:	00000185 	.word	0x00000185
   16060:	00042d94 	.word	0x00042d94
   16064:	00042c64 	.word	0x00042c64
   16068:	00000175 	.word	0x00000175
   1606c:	00042c54 	.word	0x00042c54

00016070 <CSMSC951xDevice::IsLinkUp()>:
   16070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16074:	e24dd00c 	sub	sp, sp, #12
   16078:	e28d2006 	add	r2, sp, #6
   1607c:	e3a01001 	mov	r1, #1
   16080:	ebffffc8 	bl	15fa8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   16084:	e3500000 	cmp	r0, #0
   16088:	11dd00b6 	ldrhne	r0, [sp, #6]
   1608c:	11a00120 	lsrne	r0, r0, #2
   16090:	12000001 	andne	r0, r0, #1
   16094:	e28dd00c 	add	sp, sp, #12
   16098:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001609c <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   1609c:	e2400010 	sub	r0, r0, #16
   160a0:	eafffff2 	b	16070 <CSMSC951xDevice::IsLinkUp()>

000160a4 <CSMSC951xDevice::GetLinkSpeed()>:
   160a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   160a8:	e24dd00c 	sub	sp, sp, #12
   160ac:	e28d2006 	add	r2, sp, #6
   160b0:	e3a0101f 	mov	r1, #31
   160b4:	ebffffbb 	bl	15fa8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   160b8:	e3500000 	cmp	r0, #0
   160bc:	1a000002 	bne	160cc <CSMSC951xDevice::GetLinkSpeed()+0x28>
   160c0:	e3a00006 	mov	r0, #6
   160c4:	e28dd00c 	add	sp, sp, #12
   160c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   160cc:	e1dd30b6 	ldrh	r3, [sp, #6]
   160d0:	e3130a01 	tst	r3, #4096	; 0x1000
   160d4:	0afffff9 	beq	160c0 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   160d8:	e1a03143 	asr	r3, r3, #2
   160dc:	e2033007 	and	r3, r3, #7
   160e0:	e2433001 	sub	r3, r3, #1
   160e4:	e3530005 	cmp	r3, #5
   160e8:	8afffff4 	bhi	160c0 <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   160ec:	e59f2008 	ldr	r2, [pc, #8]	; 160fc <CSMSC951xDevice::GetLinkSpeed()+0x58>
   160f0:	e0823003 	add	r3, r2, r3
   160f4:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   160f8:	eafffff1 	b	160c4 <CSMSC951xDevice::GetLinkSpeed()+0x20>
   160fc:	00042d10 	.word	0x00042d10

00016100 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   16100:	e2400010 	sub	r0, r0, #16
   16104:	eaffffe6 	b	160a4 <CSMSC951xDevice::GetLinkSpeed()>

00016108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   16108:	e92d4030 	push	{r4, r5, lr}
   1610c:	e1a04002 	mov	r4, r2
   16110:	e24dd014 	sub	sp, sp, #20
   16114:	e1a05001 	mov	r5, r1
   16118:	e28d200c 	add	r2, sp, #12
   1611c:	e1a01004 	mov	r1, r4
   16120:	ebffff41 	bl	15e2c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16124:	e3500000 	cmp	r0, #0
   16128:	0a000008 	beq	16150 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   1612c:	eb0040d7 	bl	26490 <CLogger::Get()>
   16130:	e59d300c 	ldr	r3, [sp, #12]
   16134:	e3a02004 	mov	r2, #4
   16138:	e88d0028 	stm	sp, {r3, r5}
   1613c:	e59f102c 	ldr	r1, [pc, #44]	; 16170 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   16140:	e59f302c 	ldr	r3, [pc, #44]	; 16174 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   16144:	eb00400e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16148:	e28dd014 	add	sp, sp, #20
   1614c:	e8bd8030 	pop	{r4, r5, pc}
   16150:	eb0040ce 	bl	26490 <CLogger::Get()>
   16154:	e58d4000 	str	r4, [sp]
   16158:	e59f3018 	ldr	r3, [pc, #24]	; 16178 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   1615c:	e3a02001 	mov	r2, #1
   16160:	e59f1008 	ldr	r1, [pc, #8]	; 16170 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   16164:	eb004006 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16168:	e28dd014 	add	sp, sp, #20
   1616c:	e8bd8030 	pop	{r4, r5, pc}
   16170:	00042d80 	.word	0x00042d80
   16174:	00042dc4 	.word	0x00042dc4
   16178:	00042c2c 	.word	0x00042c2c

0001617c <CSMSC951xDevice::DumpRegs()>:
   1617c:	e92d4010 	push	{r4, lr}
   16180:	e1a04000 	mov	r4, r0
   16184:	e3a02000 	mov	r2, #0
   16188:	e59f1134 	ldr	r1, [pc, #308]	; 162c4 <CSMSC951xDevice::DumpRegs()+0x148>
   1618c:	ebffffdd 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16190:	e1a00004 	mov	r0, r4
   16194:	e3a02008 	mov	r2, #8
   16198:	e59f1128 	ldr	r1, [pc, #296]	; 162c8 <CSMSC951xDevice::DumpRegs()+0x14c>
   1619c:	ebffffd9 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161a0:	e1a00004 	mov	r0, r4
   161a4:	e3a0200c 	mov	r2, #12
   161a8:	e59f111c 	ldr	r1, [pc, #284]	; 162cc <CSMSC951xDevice::DumpRegs()+0x150>
   161ac:	ebffffd5 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161b0:	e1a00004 	mov	r0, r4
   161b4:	e3a02010 	mov	r2, #16
   161b8:	e59f1110 	ldr	r1, [pc, #272]	; 162d0 <CSMSC951xDevice::DumpRegs()+0x154>
   161bc:	ebffffd1 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161c0:	e1a00004 	mov	r0, r4
   161c4:	e3a02014 	mov	r2, #20
   161c8:	e59f1104 	ldr	r1, [pc, #260]	; 162d4 <CSMSC951xDevice::DumpRegs()+0x158>
   161cc:	ebffffcd 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161d0:	e1a00004 	mov	r0, r4
   161d4:	e3a02018 	mov	r2, #24
   161d8:	e59f10f8 	ldr	r1, [pc, #248]	; 162d8 <CSMSC951xDevice::DumpRegs()+0x15c>
   161dc:	ebffffc9 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161e0:	e1a00004 	mov	r0, r4
   161e4:	e3a02020 	mov	r2, #32
   161e8:	e59f10ec 	ldr	r1, [pc, #236]	; 162dc <CSMSC951xDevice::DumpRegs()+0x160>
   161ec:	ebffffc5 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   161f0:	e1a00004 	mov	r0, r4
   161f4:	e3a02024 	mov	r2, #36	; 0x24
   161f8:	e59f10e0 	ldr	r1, [pc, #224]	; 162e0 <CSMSC951xDevice::DumpRegs()+0x164>
   161fc:	ebffffc1 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16200:	e1a00004 	mov	r0, r4
   16204:	e3a02028 	mov	r2, #40	; 0x28
   16208:	e59f10d4 	ldr	r1, [pc, #212]	; 162e4 <CSMSC951xDevice::DumpRegs()+0x168>
   1620c:	ebffffbd 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16210:	e1a00004 	mov	r0, r4
   16214:	e3a0202c 	mov	r2, #44	; 0x2c
   16218:	e59f10c8 	ldr	r1, [pc, #200]	; 162e8 <CSMSC951xDevice::DumpRegs()+0x16c>
   1621c:	ebffffb9 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16220:	e1a00004 	mov	r0, r4
   16224:	e3a02038 	mov	r2, #56	; 0x38
   16228:	e59f10bc 	ldr	r1, [pc, #188]	; 162ec <CSMSC951xDevice::DumpRegs()+0x170>
   1622c:	ebffffb5 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16230:	e1a00004 	mov	r0, r4
   16234:	e3a02068 	mov	r2, #104	; 0x68
   16238:	e59f10b0 	ldr	r1, [pc, #176]	; 162f0 <CSMSC951xDevice::DumpRegs()+0x174>
   1623c:	ebffffb1 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16240:	e1a00004 	mov	r0, r4
   16244:	e3a0206c 	mov	r2, #108	; 0x6c
   16248:	e59f10a4 	ldr	r1, [pc, #164]	; 162f4 <CSMSC951xDevice::DumpRegs()+0x178>
   1624c:	ebffffad 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16250:	e1a00004 	mov	r0, r4
   16254:	e3a02c01 	mov	r2, #256	; 0x100
   16258:	e59f1098 	ldr	r1, [pc, #152]	; 162f8 <CSMSC951xDevice::DumpRegs()+0x17c>
   1625c:	ebffffa9 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16260:	e1a00004 	mov	r0, r4
   16264:	e3a02f41 	mov	r2, #260	; 0x104
   16268:	e59f108c 	ldr	r1, [pc, #140]	; 162fc <CSMSC951xDevice::DumpRegs()+0x180>
   1626c:	ebffffa5 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16270:	e1a00004 	mov	r0, r4
   16274:	e3a02f42 	mov	r2, #264	; 0x108
   16278:	e59f1080 	ldr	r1, [pc, #128]	; 16300 <CSMSC951xDevice::DumpRegs()+0x184>
   1627c:	ebffffa1 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16280:	e1a00004 	mov	r0, r4
   16284:	e3a02f43 	mov	r2, #268	; 0x10c
   16288:	e59f1074 	ldr	r1, [pc, #116]	; 16304 <CSMSC951xDevice::DumpRegs()+0x188>
   1628c:	ebffff9d 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16290:	e1a00004 	mov	r0, r4
   16294:	e3a02e11 	mov	r2, #272	; 0x110
   16298:	e59f1068 	ldr	r1, [pc, #104]	; 16308 <CSMSC951xDevice::DumpRegs()+0x18c>
   1629c:	ebffff99 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   162a0:	e1a00004 	mov	r0, r4
   162a4:	e3a02f47 	mov	r2, #284	; 0x11c
   162a8:	e59f105c 	ldr	r1, [pc, #92]	; 1630c <CSMSC951xDevice::DumpRegs()+0x190>
   162ac:	ebffff95 	bl	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   162b0:	e1a00004 	mov	r0, r4
   162b4:	e8bd4010 	pop	{r4, lr}
   162b8:	e3a02f4b 	mov	r2, #300	; 0x12c
   162bc:	e59f104c 	ldr	r1, [pc, #76]	; 16310 <CSMSC951xDevice::DumpRegs()+0x194>
   162c0:	eaffff90 	b	16108 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   162c4:	00042dcc 	.word	0x00042dcc
   162c8:	00042dd4 	.word	0x00042dd4
   162cc:	00042ddc 	.word	0x00042ddc
   162d0:	00042de4 	.word	0x00042de4
   162d4:	00042dec 	.word	0x00042dec
   162d8:	00042df4 	.word	0x00042df4
   162dc:	00042e00 	.word	0x00042e00
   162e0:	00042e08 	.word	0x00042e08
   162e4:	00042e0c 	.word	0x00042e0c
   162e8:	00042e18 	.word	0x00042e18
   162ec:	00042e20 	.word	0x00042e20
   162f0:	00042e2c 	.word	0x00042e2c
   162f4:	00042e38 	.word	0x00042e38
   162f8:	00042e44 	.word	0x00042e44
   162fc:	00042e4c 	.word	0x00042e4c
   16300:	00042e54 	.word	0x00042e54
   16304:	00042e5c 	.word	0x00042e5c
   16308:	00042e64 	.word	0x00042e64
   1630c:	00042e6c 	.word	0x00042e6c
   16310:	00042e74 	.word	0x00042e74

00016314 <CSMSC951xDevice::Configure()>:
   16314:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16318:	e3a06000 	mov	r6, #0
   1631c:	e24dd040 	sub	sp, sp, #64	; 0x40
   16320:	e1a01006 	mov	r1, r6
   16324:	e1a05000 	mov	r5, r0
   16328:	e28d0014 	add	r0, sp, #20
   1632c:	eb003785 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16330:	e28d0014 	add	r0, sp, #20
   16334:	e58d6000 	str	r6, [sp]
   16338:	e3a03014 	mov	r3, #20
   1633c:	e28d202c 	add	r2, sp, #44	; 0x2c
   16340:	e59f1274 	ldr	r1, [pc, #628]	; 165bc <CSMSC951xDevice::Configure()+0x2a8>
   16344:	eb00378b 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16348:	e2504000 	subs	r4, r0, #0
   1634c:	0a00003c 	beq	16444 <CSMSC951xDevice::Configure()+0x130>
   16350:	e285701c 	add	r7, r5, #28
   16354:	e28d1038 	add	r1, sp, #56	; 0x38
   16358:	e1a00007 	mov	r0, r7
   1635c:	eb0050ad 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   16360:	e28d001c 	add	r0, sp, #28
   16364:	eb00442e 	bl	27424 <CString::CString()>
   16368:	e28d101c 	add	r1, sp, #28
   1636c:	e1a00007 	mov	r0, r7
   16370:	eb005101 	bl	2a77c <CMACAddress::Format(CString*) const>
   16374:	eb004045 	bl	26490 <CLogger::Get()>
   16378:	e1a04000 	mov	r4, r0
   1637c:	e28d001c 	add	r0, sp, #28
   16380:	eb00443d 	bl	2747c <CString::operator char const*() const>
   16384:	e59f3234 	ldr	r3, [pc, #564]	; 165c0 <CSMSC951xDevice::Configure()+0x2ac>
   16388:	e58d0000 	str	r0, [sp]
   1638c:	e3a02004 	mov	r2, #4
   16390:	e1a00004 	mov	r0, r4
   16394:	e59f1228 	ldr	r1, [pc, #552]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   16398:	eb003f79 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1639c:	e1a00005 	mov	r0, r5
   163a0:	ebffe25d 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   163a4:	e3500003 	cmp	r0, #3
   163a8:	03a06005 	moveq	r6, #5
   163ac:	03a08014 	moveq	r8, #20
   163b0:	0a00000e 	beq	163f0 <CSMSC951xDevice::Configure()+0xdc>
   163b4:	e1a00005 	mov	r0, r5
   163b8:	e59f1204 	ldr	r1, [pc, #516]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   163bc:	e1a04006 	mov	r4, r6
   163c0:	ebffe28d 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   163c4:	e28d001c 	add	r0, sp, #28
   163c8:	eb0043e2 	bl	27358 <CString::~CString()>
   163cc:	e28d0014 	add	r0, sp, #20
   163d0:	eb003763 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   163d4:	e1a00004 	mov	r0, r4
   163d8:	e28dd040 	add	sp, sp, #64	; 0x40
   163dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163e0:	e5d43003 	ldrb	r3, [r4, #3]
   163e4:	e203303f 	and	r3, r3, #63	; 0x3f
   163e8:	e3530002 	cmp	r3, #2
   163ec:	0a00001a 	beq	1645c <CSMSC951xDevice::Configure()+0x148>
   163f0:	e1a01006 	mov	r1, r6
   163f4:	e1a00005 	mov	r0, r5
   163f8:	ebffe274 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   163fc:	e2504000 	subs	r4, r0, #0
   16400:	1afffff6 	bne	163e0 <CSMSC951xDevice::Configure()+0xcc>
   16404:	e5953014 	ldr	r3, [r5, #20]
   16408:	e1a00005 	mov	r0, r5
   1640c:	e3530000 	cmp	r3, #0
   16410:	0a000022 	beq	164a0 <CSMSC951xDevice::Configure()+0x18c>
   16414:	e5953018 	ldr	r3, [r5, #24]
   16418:	e3530000 	cmp	r3, #0
   1641c:	0a00001f 	beq	164a0 <CSMSC951xDevice::Configure()+0x18c>
   16420:	ebffe185 	bl	ea3c <CUSBFunction::Configure()>
   16424:	e2504000 	subs	r4, r0, #0
   16428:	1a000020 	bne	164b0 <CSMSC951xDevice::Configure()+0x19c>
   1642c:	eb004017 	bl	26490 <CLogger::Get()>
   16430:	e59f3190 	ldr	r3, [pc, #400]	; 165c8 <CSMSC951xDevice::Configure()+0x2b4>
   16434:	e3a02001 	mov	r2, #1
   16438:	e59f1184 	ldr	r1, [pc, #388]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   1643c:	eb003f50 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16440:	eaffffdf 	b	163c4 <CSMSC951xDevice::Configure()+0xb0>
   16444:	eb004011 	bl	26490 <CLogger::Get()>
   16448:	e59f317c 	ldr	r3, [pc, #380]	; 165cc <CSMSC951xDevice::Configure()+0x2b8>
   1644c:	e3a02001 	mov	r2, #1
   16450:	e59f116c 	ldr	r1, [pc, #364]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   16454:	eb003f4a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16458:	eaffffdb 	b	163cc <CSMSC951xDevice::Configure()+0xb8>
   1645c:	e1d430d2 	ldrsb	r3, [r4, #2]
   16460:	e3530000 	cmp	r3, #0
   16464:	ba000024 	blt	164fc <CSMSC951xDevice::Configure()+0x1e8>
   16468:	e5953018 	ldr	r3, [r5, #24]
   1646c:	e1a00005 	mov	r0, r5
   16470:	e3530000 	cmp	r3, #0
   16474:	1a000009 	bne	164a0 <CSMSC951xDevice::Configure()+0x18c>
   16478:	ebffe233 	bl	ed4c <CUSBFunction::GetDevice() const>
   1647c:	e1a0a000 	mov	sl, r0
   16480:	e1a00008 	mov	r0, r8
   16484:	eb00512a 	bl	2a934 <operator new(unsigned int)>
   16488:	e1a09000 	mov	r9, r0
   1648c:	e1a02004 	mov	r2, r4
   16490:	e1a0100a 	mov	r1, sl
   16494:	ebffe069 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16498:	e5859018 	str	r9, [r5, #24]
   1649c:	eaffffd3 	b	163f0 <CSMSC951xDevice::Configure()+0xdc>
   164a0:	e59f111c 	ldr	r1, [pc, #284]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   164a4:	ebffe254 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   164a8:	e3a04000 	mov	r4, #0
   164ac:	eaffffc4 	b	163c4 <CSMSC951xDevice::Configure()+0xb0>
   164b0:	e1a00007 	mov	r0, r7
   164b4:	e28d100c 	add	r1, sp, #12
   164b8:	eb005080 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   164bc:	e5dd2011 	ldrb	r2, [sp, #17]
   164c0:	e5dd3010 	ldrb	r3, [sp, #16]
   164c4:	e3a01f41 	mov	r1, #260	; 0x104
   164c8:	e1832402 	orr	r2, r3, r2, lsl #8
   164cc:	e1a00005 	mov	r0, r5
   164d0:	e59d400c 	ldr	r4, [sp, #12]
   164d4:	ebfffe3a 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   164d8:	e3500000 	cmp	r0, #0
   164dc:	1a000014 	bne	16534 <CSMSC951xDevice::Configure()+0x220>
   164e0:	eb003fea 	bl	26490 <CLogger::Get()>
   164e4:	e59f30e4 	ldr	r3, [pc, #228]	; 165d0 <CSMSC951xDevice::Configure()+0x2bc>
   164e8:	e3a02001 	mov	r2, #1
   164ec:	e59f10d0 	ldr	r1, [pc, #208]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   164f0:	eb003f23 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   164f4:	e3a04000 	mov	r4, #0
   164f8:	eaffffb1 	b	163c4 <CSMSC951xDevice::Configure()+0xb0>
   164fc:	e5953014 	ldr	r3, [r5, #20]
   16500:	e1a00005 	mov	r0, r5
   16504:	e3530000 	cmp	r3, #0
   16508:	1affffe4 	bne	164a0 <CSMSC951xDevice::Configure()+0x18c>
   1650c:	ebffe20e 	bl	ed4c <CUSBFunction::GetDevice() const>
   16510:	e1a0a000 	mov	sl, r0
   16514:	e1a00008 	mov	r0, r8
   16518:	eb005105 	bl	2a934 <operator new(unsigned int)>
   1651c:	e1a09000 	mov	r9, r0
   16520:	e1a02004 	mov	r2, r4
   16524:	e1a0100a 	mov	r1, sl
   16528:	ebffe044 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1652c:	e5859014 	str	r9, [r5, #20]
   16530:	eaffffae 	b	163f0 <CSMSC951xDevice::Configure()+0xdc>
   16534:	e1a02004 	mov	r2, r4
   16538:	e3a01f42 	mov	r1, #264	; 0x108
   1653c:	e1a00005 	mov	r0, r5
   16540:	ebfffe1f 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16544:	e3500000 	cmp	r0, #0
   16548:	0affffe4 	beq	164e0 <CSMSC951xDevice::Configure()+0x1cc>
   1654c:	e59f2080 	ldr	r2, [pc, #128]	; 165d4 <CSMSC951xDevice::Configure()+0x2c0>
   16550:	e3a01024 	mov	r1, #36	; 0x24
   16554:	e1a00005 	mov	r0, r5
   16558:	ebfffe19 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1655c:	e3500000 	cmp	r0, #0
   16560:	1a000006 	bne	16580 <CSMSC951xDevice::Configure()+0x26c>
   16564:	eb003fc9 	bl	26490 <CLogger::Get()>
   16568:	e59f3068 	ldr	r3, [pc, #104]	; 165d8 <CSMSC951xDevice::Configure()+0x2c4>
   1656c:	e3a02001 	mov	r2, #1
   16570:	e59f104c 	ldr	r1, [pc, #76]	; 165c4 <CSMSC951xDevice::Configure()+0x2b0>
   16574:	eb003f02 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16578:	e3a04000 	mov	r4, #0
   1657c:	eaffff90 	b	163c4 <CSMSC951xDevice::Configure()+0xb0>
   16580:	e59f2054 	ldr	r2, [pc, #84]	; 165dc <CSMSC951xDevice::Configure()+0x2c8>
   16584:	e3a01c01 	mov	r1, #256	; 0x100
   16588:	e1a00005 	mov	r0, r5
   1658c:	ebfffe0c 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16590:	e3500000 	cmp	r0, #0
   16594:	0afffff2 	beq	16564 <CSMSC951xDevice::Configure()+0x250>
   16598:	e3a02004 	mov	r2, #4
   1659c:	e3a01010 	mov	r1, #16
   165a0:	e1a00005 	mov	r0, r5
   165a4:	ebfffe06 	bl	15dc4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   165a8:	e2504000 	subs	r4, r0, #0
   165ac:	0affffec 	beq	16564 <CSMSC951xDevice::Configure()+0x250>
   165b0:	e2850010 	add	r0, r5, #16
   165b4:	eb005091 	bl	2a800 <CNetDevice::AddNetDevice()>
   165b8:	eaffff81 	b	163c4 <CSMSC951xDevice::Configure()+0xb0>
   165bc:	00010003 	.word	0x00010003
   165c0:	00042c98 	.word	0x00042c98
   165c4:	00042d80 	.word	0x00042d80
   165c8:	00041a90 	.word	0x00041a90
   165cc:	00042e7c 	.word	0x00042e7c
   165d0:	00042e94 	.word	0x00042e94
   165d4:	01110000 	.word	0x01110000
   165d8:	00042eac 	.word	0x00042eac
   165dc:	0080000c 	.word	0x0080000c

000165e0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   165e0:	e3a03000 	mov	r3, #0
   165e4:	e92d4070 	push	{r4, r5, r6, lr}
   165e8:	e1a04000 	mov	r4, r0
   165ec:	e5900020 	ldr	r0, [r0, #32]
   165f0:	e59f20a0 	ldr	r2, [pc, #160]	; 16698 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   165f4:	e1500003 	cmp	r0, r3
   165f8:	e5842000 	str	r2, [r4]
   165fc:	e5843024 	str	r3, [r4, #36]	; 0x24
   16600:	0a000000 	beq	16608 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16604:	eb0050d2 	bl	2a954 <operator delete[](void*)>
   16608:	e3a03000 	mov	r3, #0
   1660c:	e5945018 	ldr	r5, [r4, #24]
   16610:	e5843020 	str	r3, [r4, #32]
   16614:	e1550003 	cmp	r5, r3
   16618:	0a000004 	beq	16630 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   1661c:	e1a00005 	mov	r0, r5
   16620:	ebffe070 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   16624:	e1a00005 	mov	r0, r5
   16628:	e3a01014 	mov	r1, #20
   1662c:	eb0050ce 	bl	2a96c <operator delete(void*, unsigned int)>
   16630:	e3a03000 	mov	r3, #0
   16634:	e5945014 	ldr	r5, [r4, #20]
   16638:	e5843018 	str	r3, [r4, #24]
   1663c:	e1550003 	cmp	r5, r3
   16640:	0a000004 	beq	16658 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16644:	e1a00005 	mov	r0, r5
   16648:	ebffe066 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   1664c:	e1a00005 	mov	r0, r5
   16650:	e3a01014 	mov	r1, #20
   16654:	eb0050c4 	bl	2a96c <operator delete(void*, unsigned int)>
   16658:	e3a03000 	mov	r3, #0
   1665c:	e5945010 	ldr	r5, [r4, #16]
   16660:	e5843014 	str	r3, [r4, #20]
   16664:	e1550003 	cmp	r5, r3
   16668:	0a000004 	beq	16680 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   1666c:	e1a00005 	mov	r0, r5
   16670:	ebffe05c 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   16674:	e1a00005 	mov	r0, r5
   16678:	e3a01014 	mov	r1, #20
   1667c:	eb0050ba 	bl	2a96c <operator delete(void*, unsigned int)>
   16680:	e3a03000 	mov	r3, #0
   16684:	e1a00004 	mov	r0, r4
   16688:	e5843010 	str	r3, [r4, #16]
   1668c:	ebffe0c1 	bl	e998 <CUSBFunction::~CUSBFunction()>
   16690:	e1a00004 	mov	r0, r4
   16694:	e8bd8070 	pop	{r4, r5, r6, pc}
   16698:	00042ec8 	.word	0x00042ec8

0001669c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1669c:	e92d4010 	push	{r4, lr}
   166a0:	e1a04000 	mov	r4, r0
   166a4:	ebffffcd 	bl	165e0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   166a8:	e1a00004 	mov	r0, r4
   166ac:	e3a01028 	mov	r1, #40	; 0x28
   166b0:	eb0050ad 	bl	2a96c <operator delete(void*, unsigned int)>
   166b4:	e1a00004 	mov	r0, r4
   166b8:	e8bd8010 	pop	{r4, pc}

000166bc <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   166bc:	e92d4010 	push	{r4, lr}
   166c0:	e1a04000 	mov	r4, r0
   166c4:	ebffe144 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   166c8:	e3a03000 	mov	r3, #0
   166cc:	e59f2020 	ldr	r2, [pc, #32]	; 166f4 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   166d0:	e5843010 	str	r3, [r4, #16]
   166d4:	e5842000 	str	r2, [r4]
   166d8:	e5843014 	str	r3, [r4, #20]
   166dc:	e5843018 	str	r3, [r4, #24]
   166e0:	e584301c 	str	r3, [r4, #28]
   166e4:	e5843020 	str	r3, [r4, #32]
   166e8:	e5843024 	str	r3, [r4, #36]	; 0x24
   166ec:	e1a00004 	mov	r0, r4
   166f0:	e8bd8010 	pop	{r4, pc}
   166f4:	00042ec8 	.word	0x00042ec8

000166f8 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   166f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   166fc:	e24dd014 	sub	sp, sp, #20
   16700:	e1a06001 	mov	r6, r1
   16704:	e1a04002 	mov	r4, r2
   16708:	e1a07000 	mov	r7, r0
   1670c:	ebffe1a4 	bl	eda4 <CUSBFunction::GetHost() const>
   16710:	e1a05000 	mov	r5, r0
   16714:	e1a00007 	mov	r0, r7
   16718:	ebffe196 	bl	ed78 <CUSBFunction::GetEndpoint0() const>
   1671c:	e3a03000 	mov	r3, #0
   16720:	e6ff4074 	uxth	r4, r4
   16724:	e1a01000 	mov	r1, r0
   16728:	e58d6008 	str	r6, [sp, #8]
   1672c:	e58d400c 	str	r4, [sp, #12]
   16730:	e1a00005 	mov	r0, r5
   16734:	e58d3004 	str	r3, [sp, #4]
   16738:	e58d3000 	str	r3, [sp]
   1673c:	e3a02020 	mov	r2, #32
   16740:	ebffed69 	bl	11cec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16744:	e1e00000 	mvn	r0, r0
   16748:	e1a00fa0 	lsr	r0, r0, #31
   1674c:	e28dd014 	add	sp, sp, #20
   16750:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016754 <CUSBBluetoothDevice::StartRequest()>:
   16754:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16758:	e1a04000 	mov	r4, r0
   1675c:	e5900010 	ldr	r0, [r0, #16]
   16760:	e24dd00c 	sub	sp, sp, #12
   16764:	e3500000 	cmp	r0, #0
   16768:	0a00001e 	beq	167e8 <CUSBBluetoothDevice::StartRequest()+0x94>
   1676c:	e5943020 	ldr	r3, [r4, #32]
   16770:	e3530000 	cmp	r3, #0
   16774:	0a00001f 	beq	167f8 <CUSBBluetoothDevice::StartRequest()+0xa4>
   16778:	e594501c 	ldr	r5, [r4, #28]
   1677c:	e3550000 	cmp	r5, #0
   16780:	1a000020 	bne	16808 <CUSBBluetoothDevice::StartRequest()+0xb4>
   16784:	ebffe02c 	bl	e83c <CUSBEndpoint::GetMaxPacketSize() const>
   16788:	e1a07000 	mov	r7, r0
   1678c:	e3a00028 	mov	r0, #40	; 0x28
   16790:	ebfff5e0 	bl	13f18 <CUSBRequest::operator new(unsigned int)>
   16794:	e1a06000 	mov	r6, r0
   16798:	e5942020 	ldr	r2, [r4, #32]
   1679c:	e5941010 	ldr	r1, [r4, #16]
   167a0:	e1a03007 	mov	r3, r7
   167a4:	e58d5000 	str	r5, [sp]
   167a8:	ebfff555 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   167ac:	e1a03004 	mov	r3, r4
   167b0:	e1a02005 	mov	r2, r5
   167b4:	e1a00006 	mov	r0, r6
   167b8:	e59f1058 	ldr	r1, [pc, #88]	; 16818 <CUSBBluetoothDevice::StartRequest()+0xc4>
   167bc:	e584601c 	str	r6, [r4, #28]
   167c0:	ebfff5b3 	bl	13e94 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   167c4:	e1a00004 	mov	r0, r4
   167c8:	ebffe175 	bl	eda4 <CUSBFunction::GetHost() const>
   167cc:	e1a02005 	mov	r2, r5
   167d0:	e5903000 	ldr	r3, [r0]
   167d4:	e594101c 	ldr	r1, [r4, #28]
   167d8:	e593300c 	ldr	r3, [r3, #12]
   167dc:	e28dd00c 	add	sp, sp, #12
   167e0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   167e4:	e12fff13 	bx	r3
   167e8:	e3a020a3 	mov	r2, #163	; 0xa3
   167ec:	e59f1028 	ldr	r1, [pc, #40]	; 1681c <CUSBBluetoothDevice::StartRequest()+0xc8>
   167f0:	e59f0028 	ldr	r0, [pc, #40]	; 16820 <CUSBBluetoothDevice::StartRequest()+0xcc>
   167f4:	eb003632 	bl	240c4 <assertion_failed>
   167f8:	e3a020a4 	mov	r2, #164	; 0xa4
   167fc:	e59f1018 	ldr	r1, [pc, #24]	; 1681c <CUSBBluetoothDevice::StartRequest()+0xc8>
   16800:	e59f001c 	ldr	r0, [pc, #28]	; 16824 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16804:	eb00362e 	bl	240c4 <assertion_failed>
   16808:	e3a020a6 	mov	r2, #166	; 0xa6
   1680c:	e59f1008 	ldr	r1, [pc, #8]	; 1681c <CUSBBluetoothDevice::StartRequest()+0xc8>
   16810:	e59f0010 	ldr	r0, [pc, #16]	; 16828 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16814:	eb00362a 	bl	240c4 <assertion_failed>
   16818:	0001697c 	.word	0x0001697c
   1681c:	00042ef4 	.word	0x00042ef4
   16820:	00042f08 	.word	0x00042f08
   16824:	00042f24 	.word	0x00042f24
   16828:	000421f4 	.word	0x000421f4

0001682c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   1682c:	e3510000 	cmp	r1, #0
   16830:	e5801024 	str	r1, [r0, #36]	; 0x24
   16834:	0a000000 	beq	1683c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16838:	eaffffc5 	b	16754 <CUSBBluetoothDevice::StartRequest()>
   1683c:	e92d4010 	push	{r4, lr}
   16840:	e3a0209c 	mov	r2, #156	; 0x9c
   16844:	e59f1004 	ldr	r1, [pc, #4]	; 16850 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16848:	e59f0004 	ldr	r0, [pc, #4]	; 16854 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   1684c:	eb00361c 	bl	240c4 <assertion_failed>
   16850:	00042ef4 	.word	0x00042ef4
   16854:	00042f38 	.word	0x00042f38

00016858 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16858:	e92d4070 	push	{r4, r5, r6, lr}
   1685c:	e2515000 	subs	r5, r1, #0
   16860:	0a000031 	beq	1692c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16864:	e590301c 	ldr	r3, [r0, #28]
   16868:	e1a04000 	mov	r4, r0
   1686c:	e1550003 	cmp	r5, r3
   16870:	1a000031 	bne	1693c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16874:	e5903020 	ldr	r3, [r0, #32]
   16878:	e3530000 	cmp	r3, #0
   1687c:	0a000032 	beq	1694c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16880:	e1a00005 	mov	r0, r5
   16884:	ebfff54f 	bl	13dc8 <CUSBRequest::GetStatus() const>
   16888:	e3500000 	cmp	r0, #0
   1688c:	0a00001c 	beq	16904 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16890:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16894:	e3560000 	cmp	r6, #0
   16898:	0a00001f 	beq	1691c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   1689c:	e1a00005 	mov	r0, r5
   168a0:	e5945020 	ldr	r5, [r4, #32]
   168a4:	ebfff549 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   168a8:	e1a01000 	mov	r1, r0
   168ac:	e1a00005 	mov	r0, r5
   168b0:	e12fff36 	blx	r6
   168b4:	e594501c 	ldr	r5, [r4, #28]
   168b8:	e3550000 	cmp	r5, #0
   168bc:	0a000004 	beq	168d4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   168c0:	e1a00005 	mov	r0, r5
   168c4:	ebfff52f 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   168c8:	e1a00005 	mov	r0, r5
   168cc:	e3a01028 	mov	r1, #40	; 0x28
   168d0:	ebfff5a5 	bl	13f6c <CUSBRequest::operator delete(void*, unsigned int)>
   168d4:	e3a03000 	mov	r3, #0
   168d8:	e1a00004 	mov	r0, r4
   168dc:	e584301c 	str	r3, [r4, #28]
   168e0:	ebffff9b 	bl	16754 <CUSBBluetoothDevice::StartRequest()>
   168e4:	e3500000 	cmp	r0, #0
   168e8:	18bd8070 	popne	{r4, r5, r6, pc}
   168ec:	eb003ee7 	bl	26490 <CLogger::Get()>
   168f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   168f4:	e59f3060 	ldr	r3, [pc, #96]	; 1695c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   168f8:	e3a02001 	mov	r2, #1
   168fc:	e59f105c 	ldr	r1, [pc, #92]	; 16960 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16900:	ea003e1f 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16904:	eb003ee1 	bl	26490 <CLogger::Get()>
   16908:	e59f3054 	ldr	r3, [pc, #84]	; 16964 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   1690c:	e3a02002 	mov	r2, #2
   16910:	e59f1048 	ldr	r1, [pc, #72]	; 16960 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   16914:	eb003e1a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16918:	eaffffe5 	b	168b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   1691c:	e3a020b8 	mov	r2, #184	; 0xb8
   16920:	e59f1040 	ldr	r1, [pc, #64]	; 16968 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16924:	e59f0040 	ldr	r0, [pc, #64]	; 1696c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   16928:	eb0035e5 	bl	240c4 <assertion_failed>
   1692c:	e3a020b2 	mov	r2, #178	; 0xb2
   16930:	e59f1030 	ldr	r1, [pc, #48]	; 16968 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16934:	e59f0034 	ldr	r0, [pc, #52]	; 16970 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   16938:	eb0035e1 	bl	240c4 <assertion_failed>
   1693c:	e3a020b3 	mov	r2, #179	; 0xb3
   16940:	e59f1020 	ldr	r1, [pc, #32]	; 16968 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16944:	e59f0028 	ldr	r0, [pc, #40]	; 16974 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   16948:	eb0035dd 	bl	240c4 <assertion_failed>
   1694c:	e3a020b4 	mov	r2, #180	; 0xb4
   16950:	e59f1010 	ldr	r1, [pc, #16]	; 16968 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   16954:	e59f001c 	ldr	r0, [pc, #28]	; 16978 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   16958:	eb0035d9 	bl	240c4 <assertion_failed>
   1695c:	00042228 	.word	0x00042228
   16960:	00042eec 	.word	0x00042eec
   16964:	00042f50 	.word	0x00042f50
   16968:	00042ef4 	.word	0x00042ef4
   1696c:	00042f38 	.word	0x00042f38
   16970:	000409ac 	.word	0x000409ac
   16974:	00042218 	.word	0x00042218
   16978:	00042f24 	.word	0x00042f24

0001697c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1697c:	e3520000 	cmp	r2, #0
   16980:	0a000002 	beq	16990 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   16984:	e1a01000 	mov	r1, r0
   16988:	e1a00002 	mov	r0, r2
   1698c:	eaffffb1 	b	16858 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   16990:	e92d4010 	push	{r4, lr}
   16994:	e3a020cc 	mov	r2, #204	; 0xcc
   16998:	e59f1004 	ldr	r1, [pc, #4]	; 169a4 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1699c:	e59f0004 	ldr	r0, [pc, #4]	; 169a8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   169a0:	eb0035c7 	bl	240c4 <assertion_failed>
   169a4:	00042ef4 	.word	0x00042ef4
   169a8:	000408c0 	.word	0x000408c0

000169ac <CUSBBluetoothDevice::Configure()>:
   169ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   169b0:	e24dd014 	sub	sp, sp, #20
   169b4:	e1a05000 	mov	r5, r0
   169b8:	ebffe157 	bl	ef1c <CUSBFunction::GetInterfaceNumber() const>
   169bc:	e2506000 	subs	r6, r0, #0
   169c0:	1a000043 	bne	16ad4 <CUSBBluetoothDevice::Configure()+0x128>
   169c4:	e1a00005 	mov	r0, r5
   169c8:	ebffe0d3 	bl	ed1c <CUSBFunction::GetNumEndpoints() const>
   169cc:	e3500003 	cmp	r0, #3
   169d0:	03a06005 	moveq	r6, #5
   169d4:	03a07014 	moveq	r7, #20
   169d8:	1a000037 	bne	16abc <CUSBBluetoothDevice::Configure()+0x110>
   169dc:	e1a01006 	mov	r1, r6
   169e0:	e1a00005 	mov	r0, r5
   169e4:	ebffe0f9 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   169e8:	e2504000 	subs	r4, r0, #0
   169ec:	0a000041 	beq	16af8 <CUSBBluetoothDevice::Configure()+0x14c>
   169f0:	e5d42003 	ldrb	r2, [r4, #3]
   169f4:	e202203f 	and	r2, r2, #63	; 0x3f
   169f8:	e3520002 	cmp	r2, #2
   169fc:	0a00000f 	beq	16a40 <CUSBBluetoothDevice::Configure()+0x94>
   16a00:	e3520003 	cmp	r2, #3
   16a04:	1afffff4 	bne	169dc <CUSBBluetoothDevice::Configure()+0x30>
   16a08:	e5953010 	ldr	r3, [r5, #16]
   16a0c:	e1a00005 	mov	r0, r5
   16a10:	e3530000 	cmp	r3, #0
   16a14:	1a000060 	bne	16b9c <CUSBBluetoothDevice::Configure()+0x1f0>
   16a18:	ebffe0cb 	bl	ed4c <CUSBFunction::GetDevice() const>
   16a1c:	e1a09000 	mov	r9, r0
   16a20:	e1a00007 	mov	r0, r7
   16a24:	eb004fc2 	bl	2a934 <operator new(unsigned int)>
   16a28:	e1a08000 	mov	r8, r0
   16a2c:	e1a02004 	mov	r2, r4
   16a30:	e1a01009 	mov	r1, r9
   16a34:	ebffdf01 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16a38:	e5858010 	str	r8, [r5, #16]
   16a3c:	eaffffe6 	b	169dc <CUSBBluetoothDevice::Configure()+0x30>
   16a40:	e1d430d2 	ldrsb	r3, [r4, #2]
   16a44:	e3530000 	cmp	r3, #0
   16a48:	ba00000d 	blt	16a84 <CUSBBluetoothDevice::Configure()+0xd8>
   16a4c:	e5953018 	ldr	r3, [r5, #24]
   16a50:	e1a00005 	mov	r0, r5
   16a54:	e3530000 	cmp	r3, #0
   16a58:	1a00004f 	bne	16b9c <CUSBBluetoothDevice::Configure()+0x1f0>
   16a5c:	ebffe0ba 	bl	ed4c <CUSBFunction::GetDevice() const>
   16a60:	e1a09000 	mov	r9, r0
   16a64:	e1a00007 	mov	r0, r7
   16a68:	eb004fb1 	bl	2a934 <operator new(unsigned int)>
   16a6c:	e1a08000 	mov	r8, r0
   16a70:	e1a02004 	mov	r2, r4
   16a74:	e1a01009 	mov	r1, r9
   16a78:	ebffdef0 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16a7c:	e5858018 	str	r8, [r5, #24]
   16a80:	eaffffd5 	b	169dc <CUSBBluetoothDevice::Configure()+0x30>
   16a84:	e5953014 	ldr	r3, [r5, #20]
   16a88:	e1a00005 	mov	r0, r5
   16a8c:	e3530000 	cmp	r3, #0
   16a90:	1a000041 	bne	16b9c <CUSBBluetoothDevice::Configure()+0x1f0>
   16a94:	ebffe0ac 	bl	ed4c <CUSBFunction::GetDevice() const>
   16a98:	e1a09000 	mov	r9, r0
   16a9c:	e1a00007 	mov	r0, r7
   16aa0:	eb004fa3 	bl	2a934 <operator new(unsigned int)>
   16aa4:	e1a08000 	mov	r8, r0
   16aa8:	e1a02004 	mov	r2, r4
   16aac:	e1a01009 	mov	r1, r9
   16ab0:	ebffdee2 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16ab4:	e5858014 	str	r8, [r5, #20]
   16ab8:	eaffffc7 	b	169dc <CUSBBluetoothDevice::Configure()+0x30>
   16abc:	e1a00005 	mov	r0, r5
   16ac0:	e59f1104 	ldr	r1, [pc, #260]	; 16bcc <CUSBBluetoothDevice::Configure()+0x220>
   16ac4:	ebffe0cc 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   16ac8:	e1a00006 	mov	r0, r6
   16acc:	e28dd014 	add	sp, sp, #20
   16ad0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ad4:	e3a06000 	mov	r6, #0
   16ad8:	eb003e6c 	bl	26490 <CLogger::Get()>
   16adc:	e59f30ec 	ldr	r3, [pc, #236]	; 16bd0 <CUSBBluetoothDevice::Configure()+0x224>
   16ae0:	e3a02002 	mov	r2, #2
   16ae4:	e59f10e0 	ldr	r1, [pc, #224]	; 16bcc <CUSBBluetoothDevice::Configure()+0x220>
   16ae8:	eb003da5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16aec:	e1a00006 	mov	r0, r6
   16af0:	e28dd014 	add	sp, sp, #20
   16af4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16af8:	e5953014 	ldr	r3, [r5, #20]
   16afc:	e3530000 	cmp	r3, #0
   16b00:	0a000024 	beq	16b98 <CUSBBluetoothDevice::Configure()+0x1ec>
   16b04:	e5953018 	ldr	r3, [r5, #24]
   16b08:	e3530000 	cmp	r3, #0
   16b0c:	0a000021 	beq	16b98 <CUSBBluetoothDevice::Configure()+0x1ec>
   16b10:	e5953010 	ldr	r3, [r5, #16]
   16b14:	e3530000 	cmp	r3, #0
   16b18:	0a00001e 	beq	16b98 <CUSBBluetoothDevice::Configure()+0x1ec>
   16b1c:	e1a00005 	mov	r0, r5
   16b20:	ebffdfc5 	bl	ea3c <CUSBFunction::Configure()>
   16b24:	e2506000 	subs	r6, r0, #0
   16b28:	0a000021 	beq	16bb4 <CUSBBluetoothDevice::Configure()+0x208>
   16b2c:	e5950010 	ldr	r0, [r5, #16]
   16b30:	ebffdf41 	bl	e83c <CUSBEndpoint::GetMaxPacketSize() const>
   16b34:	eb004f7f 	bl	2a938 <operator new[](unsigned int)>
   16b38:	e5850020 	str	r0, [r5, #32]
   16b3c:	e1a0000d 	mov	r0, sp
   16b40:	eb004237 	bl	27424 <CString::CString()>
   16b44:	e59f3088 	ldr	r3, [pc, #136]	; 16bd4 <CUSBBluetoothDevice::Configure()+0x228>
   16b48:	e59f1088 	ldr	r1, [pc, #136]	; 16bd8 <CUSBBluetoothDevice::Configure()+0x22c>
   16b4c:	e5932000 	ldr	r2, [r3]
   16b50:	e1a0000d 	mov	r0, sp
   16b54:	e282c001 	add	ip, r2, #1
   16b58:	e583c000 	str	ip, [r3]
   16b5c:	eb004773 	bl	28930 <CString::Format(char const*, ...)>
   16b60:	eb003831 	bl	24c2c <CDeviceNameService::Get()>
   16b64:	e1a07000 	mov	r7, r0
   16b68:	e1a0000d 	mov	r0, sp
   16b6c:	eb004242 	bl	2747c <CString::operator char const*() const>
   16b70:	e1a03004 	mov	r3, r4
   16b74:	e1a01000 	mov	r1, r0
   16b78:	e1a02005 	mov	r2, r5
   16b7c:	e1a00007 	mov	r0, r7
   16b80:	eb00376f 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   16b84:	e1a0000d 	mov	r0, sp
   16b88:	eb0041f2 	bl	27358 <CString::~CString()>
   16b8c:	e1a00006 	mov	r0, r6
   16b90:	e28dd014 	add	sp, sp, #20
   16b94:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b98:	e1a00005 	mov	r0, r5
   16b9c:	e3a06000 	mov	r6, #0
   16ba0:	e59f1024 	ldr	r1, [pc, #36]	; 16bcc <CUSBBluetoothDevice::Configure()+0x220>
   16ba4:	ebffe094 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   16ba8:	e1a00006 	mov	r0, r6
   16bac:	e28dd014 	add	sp, sp, #20
   16bb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16bb4:	eb003e35 	bl	26490 <CLogger::Get()>
   16bb8:	e59f301c 	ldr	r3, [pc, #28]	; 16bdc <CUSBBluetoothDevice::Configure()+0x230>
   16bbc:	e3a02001 	mov	r2, #1
   16bc0:	e59f1004 	ldr	r1, [pc, #4]	; 16bcc <CUSBBluetoothDevice::Configure()+0x220>
   16bc4:	eb003d6e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16bc8:	eaffffbe 	b	16ac8 <CUSBBluetoothDevice::Configure()+0x11c>
   16bcc:	00042eec 	.word	0x00042eec
   16bd0:	00042f60 	.word	0x00042f60
   16bd4:	00049994 	.word	0x00049994
   16bd8:	00042f84 	.word	0x00042f84
   16bdc:	00041a90 	.word	0x00041a90

00016be0 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   16be0:	e280001c 	add	r0, r0, #28
   16be4:	e12fff1e 	bx	lr

00016be8 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   16be8:	e2400010 	sub	r0, r0, #16
   16bec:	eafffffb 	b	16be0 <CUSBCDCEthernetDevice::GetMACAddress() const>

00016bf0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16bf0:	e92d4070 	push	{r4, r5, r6, lr}
   16bf4:	e59f3074 	ldr	r3, [pc, #116]	; 16c70 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   16bf8:	e5905018 	ldr	r5, [r0, #24]
   16bfc:	e2832038 	add	r2, r3, #56	; 0x38
   16c00:	e3550000 	cmp	r5, #0
   16c04:	e1a04000 	mov	r4, r0
   16c08:	e5803000 	str	r3, [r0]
   16c0c:	e5802010 	str	r2, [r0, #16]
   16c10:	0a000004 	beq	16c28 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   16c14:	e1a00005 	mov	r0, r5
   16c18:	ebffdef2 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   16c1c:	e1a00005 	mov	r0, r5
   16c20:	e3a01014 	mov	r1, #20
   16c24:	eb004f50 	bl	2a96c <operator delete(void*, unsigned int)>
   16c28:	e3a03000 	mov	r3, #0
   16c2c:	e5945014 	ldr	r5, [r4, #20]
   16c30:	e5843018 	str	r3, [r4, #24]
   16c34:	e1550003 	cmp	r5, r3
   16c38:	0a000004 	beq	16c50 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   16c3c:	e1a00005 	mov	r0, r5
   16c40:	ebffdee8 	bl	e7e8 <CUSBEndpoint::~CUSBEndpoint()>
   16c44:	e1a00005 	mov	r0, r5
   16c48:	e3a01014 	mov	r1, #20
   16c4c:	eb004f46 	bl	2a96c <operator delete(void*, unsigned int)>
   16c50:	e3a03000 	mov	r3, #0
   16c54:	e284001c 	add	r0, r4, #28
   16c58:	e5843014 	str	r3, [r4, #20]
   16c5c:	eb004e4f 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   16c60:	e1a00004 	mov	r0, r4
   16c64:	ebffdf4b 	bl	e998 <CUSBFunction::~CUSBFunction()>
   16c68:	e1a00004 	mov	r0, r4
   16c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c70:	00042f94 	.word	0x00042f94

00016c74 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16c74:	e2400010 	sub	r0, r0, #16
   16c78:	eaffffdc 	b	16bf0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00016c7c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16c7c:	e92d4010 	push	{r4, lr}
   16c80:	e1a04000 	mov	r4, r0
   16c84:	ebffffd9 	bl	16bf0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   16c88:	e1a00004 	mov	r0, r4
   16c8c:	e3a01024 	mov	r1, #36	; 0x24
   16c90:	eb004f35 	bl	2a96c <operator delete(void*, unsigned int)>
   16c94:	e1a00004 	mov	r0, r4
   16c98:	e8bd8010 	pop	{r4, pc}

00016c9c <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16c9c:	e2400010 	sub	r0, r0, #16
   16ca0:	eafffff5 	b	16c7c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00016ca4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   16ca4:	e92d4070 	push	{r4, r5, r6, lr}
   16ca8:	e5903014 	ldr	r3, [r0, #20]
   16cac:	e24dd030 	sub	sp, sp, #48	; 0x30
   16cb0:	e3530000 	cmp	r3, #0
   16cb4:	0a000026 	beq	16d54 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   16cb8:	e3510000 	cmp	r1, #0
   16cbc:	0a000028 	beq	16d64 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   16cc0:	e3a05000 	mov	r5, #0
   16cc4:	e1a04000 	mov	r4, r0
   16cc8:	e1a06002 	mov	r6, r2
   16ccc:	e58d5000 	str	r5, [sp]
   16cd0:	e1a02001 	mov	r2, r1
   16cd4:	e28d0008 	add	r0, sp, #8
   16cd8:	e1a01003 	mov	r1, r3
   16cdc:	e3a03d19 	mov	r3, #1600	; 0x640
   16ce0:	ebfff407 	bl	13d04 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16ce4:	e28d0008 	add	r0, sp, #8
   16ce8:	ebfff485 	bl	13f04 <CUSBRequest::SetCompleteOnNAK()>
   16cec:	e1a00004 	mov	r0, r4
   16cf0:	ebffe02b 	bl	eda4 <CUSBFunction::GetHost() const>
   16cf4:	e5903000 	ldr	r3, [r0]
   16cf8:	e1a02005 	mov	r2, r5
   16cfc:	e5933008 	ldr	r3, [r3, #8]
   16d00:	e28d1008 	add	r1, sp, #8
   16d04:	e12fff33 	blx	r3
   16d08:	e2504000 	subs	r4, r0, #0
   16d0c:	0a00000a 	beq	16d3c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   16d10:	e28d0008 	add	r0, sp, #8
   16d14:	ebfff42d 	bl	13dd0 <CUSBRequest::GetResultLength() const>
   16d18:	e3500000 	cmp	r0, #0
   16d1c:	0a000006 	beq	16d3c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   16d20:	e3560000 	cmp	r6, #0
   16d24:	15860000 	strne	r0, [r6]
   16d28:	1a000004 	bne	16d40 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>
   16d2c:	e3a020c3 	mov	r2, #195	; 0xc3
   16d30:	e59f103c 	ldr	r1, [pc, #60]	; 16d74 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   16d34:	e59f003c 	ldr	r0, [pc, #60]	; 16d78 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   16d38:	eb0034e1 	bl	240c4 <assertion_failed>
   16d3c:	e3a04000 	mov	r4, #0
   16d40:	e28d0008 	add	r0, sp, #8
   16d44:	ebfff40f 	bl	13d88 <CUSBRequest::~CUSBRequest()>
   16d48:	e1a00004 	mov	r0, r4
   16d4c:	e28dd030 	add	sp, sp, #48	; 0x30
   16d50:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d54:	e3a020b2 	mov	r2, #178	; 0xb2
   16d58:	e59f1014 	ldr	r1, [pc, #20]	; 16d74 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   16d5c:	e59f0018 	ldr	r0, [pc, #24]	; 16d7c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   16d60:	eb0034d7 	bl	240c4 <assertion_failed>
   16d64:	e3a020b3 	mov	r2, #179	; 0xb3
   16d68:	e59f1004 	ldr	r1, [pc, #4]	; 16d74 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   16d6c:	e59f000c 	ldr	r0, [pc, #12]	; 16d80 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   16d70:	eb0034d3 	bl	240c4 <assertion_failed>
   16d74:	00042ffc 	.word	0x00042ffc
   16d78:	00042be4 	.word	0x00042be4
   16d7c:	00042b70 	.word	0x00042b70
   16d80:	000423b8 	.word	0x000423b8

00016d84 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   16d84:	e2400010 	sub	r0, r0, #16
   16d88:	eaffffc5 	b	16ca4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

00016d8c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16d8c:	e92d4070 	push	{r4, r5, r6, lr}
   16d90:	e5903018 	ldr	r3, [r0, #24]
   16d94:	e24dd008 	sub	sp, sp, #8
   16d98:	e3530000 	cmp	r3, #0
   16d9c:	0a000011 	beq	16de8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   16da0:	e3510000 	cmp	r1, #0
   16da4:	e1a05001 	mov	r5, r1
   16da8:	0a000012 	beq	16df8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   16dac:	e3520d19 	cmp	r2, #1600	; 0x640
   16db0:	e1a06002 	mov	r6, r2
   16db4:	8a000013 	bhi	16e08 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   16db8:	e1a04000 	mov	r4, r0
   16dbc:	ebffdff8 	bl	eda4 <CUSBFunction::GetHost() const>
   16dc0:	e3a0c000 	mov	ip, #0
   16dc4:	e5941018 	ldr	r1, [r4, #24]
   16dc8:	e1a03006 	mov	r3, r6
   16dcc:	e1a02005 	mov	r2, r5
   16dd0:	e58dc000 	str	ip, [sp]
   16dd4:	ebffec2a 	bl	11e84 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16dd8:	e1e00000 	mvn	r0, r0
   16ddc:	e1a00fa0 	lsr	r0, r0, #31
   16de0:	e28dd008 	add	sp, sp, #8
   16de4:	e8bd8070 	pop	{r4, r5, r6, pc}
   16de8:	e3a020aa 	mov	r2, #170	; 0xaa
   16dec:	e59f1024 	ldr	r1, [pc, #36]	; 16e18 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   16df0:	e59f0024 	ldr	r0, [pc, #36]	; 16e1c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   16df4:	eb0034b2 	bl	240c4 <assertion_failed>
   16df8:	e3a020ab 	mov	r2, #171	; 0xab
   16dfc:	e59f1014 	ldr	r1, [pc, #20]	; 16e18 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   16e00:	e59f0018 	ldr	r0, [pc, #24]	; 16e20 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   16e04:	eb0034ae 	bl	240c4 <assertion_failed>
   16e08:	e3a020ac 	mov	r2, #172	; 0xac
   16e0c:	e59f1004 	ldr	r1, [pc, #4]	; 16e18 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   16e10:	e59f000c 	ldr	r0, [pc, #12]	; 16e24 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   16e14:	eb0034aa 	bl	240c4 <assertion_failed>
   16e18:	00042ffc 	.word	0x00042ffc
   16e1c:	00042bf8 	.word	0x00042bf8
   16e20:	000423b8 	.word	0x000423b8
   16e24:	00043010 	.word	0x00043010

00016e28 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16e28:	e2400010 	sub	r0, r0, #16
   16e2c:	eaffffd6 	b	16d8c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

00016e30 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   16e30:	e92d4010 	push	{r4, lr}
   16e34:	e1a04000 	mov	r4, r0
   16e38:	ebffdf67 	bl	ebdc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16e3c:	e3a02000 	mov	r2, #0
   16e40:	e59f3024 	ldr	r3, [pc, #36]	; 16e6c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   16e44:	e5842014 	str	r2, [r4, #20]
   16e48:	e2831008 	add	r1, r3, #8
   16e4c:	e2833040 	add	r3, r3, #64	; 0x40
   16e50:	e5841000 	str	r1, [r4]
   16e54:	e5843010 	str	r3, [r4, #16]
   16e58:	e5842018 	str	r2, [r4, #24]
   16e5c:	e284001c 	add	r0, r4, #28
   16e60:	eb004dcb 	bl	2a594 <CMACAddress::CMACAddress()>
   16e64:	e1a00004 	mov	r0, r4
   16e68:	e8bd8010 	pop	{r4, pc}
   16e6c:	00042f8c 	.word	0x00042f8c

00016e70 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   16e70:	e92d4030 	push	{r4, r5, lr}
   16e74:	e24dd01c 	sub	sp, sp, #28
   16e78:	e1a04001 	mov	r4, r1
   16e7c:	e1a05000 	mov	r5, r0
   16e80:	ebffdfb1 	bl	ed4c <CUSBFunction::GetDevice() const>
   16e84:	e1a01000 	mov	r1, r0
   16e88:	e28d000c 	add	r0, sp, #12
   16e8c:	eb00021c 	bl	17704 <CUSBString::CUSBString(CUSBDevice*)>
   16e90:	e3540000 	cmp	r4, #0
   16e94:	1a000005 	bne	16eb0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   16e98:	e3a04000 	mov	r4, #0
   16e9c:	e28d000c 	add	r0, sp, #12
   16ea0:	eb00025a 	bl	17810 <CUSBString::~CUSBString()>
   16ea4:	e1a00004 	mov	r0, r4
   16ea8:	e28dd01c 	add	sp, sp, #28
   16eac:	e8bd8030 	pop	{r4, r5, pc}
   16eb0:	e28d000c 	add	r0, sp, #12
   16eb4:	eb0002ec 	bl	17a6c <CUSBString::GetLanguageID()>
   16eb8:	e1a01004 	mov	r1, r4
   16ebc:	e1a02000 	mov	r2, r0
   16ec0:	e28d000c 	add	r0, sp, #12
   16ec4:	eb000261 	bl	17850 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   16ec8:	e2504000 	subs	r4, r0, #0
   16ecc:	0afffff1 	beq	16e98 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16ed0:	e28d000c 	add	r0, sp, #12
   16ed4:	eb0002e2 	bl	17a64 <CUSBString::Get() const>
   16ed8:	e3500000 	cmp	r0, #0
   16edc:	0a00001b 	beq	16f50 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   16ee0:	e2801002 	add	r1, r0, #2
   16ee4:	e28dc003 	add	ip, sp, #3
   16ee8:	e280000e 	add	r0, r0, #14
   16eec:	e15130d2 	ldrsb	r3, [r1, #-2]
   16ef0:	e3530039 	cmp	r3, #57	; 0x39
   16ef4:	c2433007 	subgt	r3, r3, #7
   16ef8:	c6af3073 	sxtbgt	r3, r3
   16efc:	e2433030 	sub	r3, r3, #48	; 0x30
   16f00:	e6ef2073 	uxtb	r2, r3
   16f04:	e352000f 	cmp	r2, #15
   16f08:	8affffe2 	bhi	16e98 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16f0c:	e15130d1 	ldrsb	r3, [r1, #-1]
   16f10:	e3530039 	cmp	r3, #57	; 0x39
   16f14:	c2433007 	subgt	r3, r3, #7
   16f18:	c6af3073 	sxtbgt	r3, r3
   16f1c:	e2433030 	sub	r3, r3, #48	; 0x30
   16f20:	e6ef3073 	uxtb	r3, r3
   16f24:	e353000f 	cmp	r3, #15
   16f28:	8affffda 	bhi	16e98 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   16f2c:	e2811002 	add	r1, r1, #2
   16f30:	e1833202 	orr	r3, r3, r2, lsl #4
   16f34:	e1500001 	cmp	r0, r1
   16f38:	e5ec3001 	strb	r3, [ip, #1]!
   16f3c:	1affffea 	bne	16eec <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   16f40:	e285001c 	add	r0, r5, #28
   16f44:	e28d1004 	add	r1, sp, #4
   16f48:	eb004db2 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   16f4c:	eaffffd2 	b	16e9c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   16f50:	e3a020d3 	mov	r2, #211	; 0xd3
   16f54:	e59f1004 	ldr	r1, [pc, #4]	; 16f60 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   16f58:	e59f0004 	ldr	r0, [pc, #4]	; 16f64 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   16f5c:	eb003458 	bl	240c4 <assertion_failed>
   16f60:	00042ffc 	.word	0x00042ffc
   16f64:	00043030 	.word	0x00043030

00016f68 <CUSBCDCEthernetDevice::Configure()>:
   16f68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   16f6c:	e1a05000 	mov	r5, r0
   16f70:	e24dd01c 	sub	sp, sp, #28
   16f74:	e3a06024 	mov	r6, #36	; 0x24
   16f78:	ea000002 	b	16f88 <CUSBCDCEthernetDevice::Configure()+0x20>
   16f7c:	e5d43002 	ldrb	r3, [r4, #2]
   16f80:	e353000f 	cmp	r3, #15
   16f84:	0a00000a 	beq	16fb4 <CUSBCDCEthernetDevice::Configure()+0x4c>
   16f88:	e1a01006 	mov	r1, r6
   16f8c:	e1a00005 	mov	r0, r5
   16f90:	ebffdf8e 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   16f94:	e2504000 	subs	r4, r0, #0
   16f98:	1afffff7 	bne	16f7c <CUSBCDCEthernetDevice::Configure()+0x14>
   16f9c:	e1a00005 	mov	r0, r5
   16fa0:	e59f11f0 	ldr	r1, [pc, #496]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   16fa4:	ebffdf94 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   16fa8:	e1a00004 	mov	r0, r4
   16fac:	e28dd01c 	add	sp, sp, #28
   16fb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16fb4:	e3a06004 	mov	r6, #4
   16fb8:	e1a01006 	mov	r1, r6
   16fbc:	e1a00005 	mov	r0, r5
   16fc0:	ebffdf82 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   16fc4:	e2503000 	subs	r3, r0, #0
   16fc8:	0a00003c 	beq	170c0 <CUSBCDCEthernetDevice::Configure()+0x158>
   16fcc:	e5d32005 	ldrb	r2, [r3, #5]
   16fd0:	e352000a 	cmp	r2, #10
   16fd4:	1afffff7 	bne	16fb8 <CUSBCDCEthernetDevice::Configure()+0x50>
   16fd8:	e5d32006 	ldrb	r2, [r3, #6]
   16fdc:	e3520000 	cmp	r2, #0
   16fe0:	1afffff4 	bne	16fb8 <CUSBCDCEthernetDevice::Configure()+0x50>
   16fe4:	e5d32007 	ldrb	r2, [r3, #7]
   16fe8:	e3520000 	cmp	r2, #0
   16fec:	1afffff1 	bne	16fb8 <CUSBCDCEthernetDevice::Configure()+0x50>
   16ff0:	e5d33004 	ldrb	r3, [r3, #4]
   16ff4:	e3530001 	cmp	r3, #1
   16ff8:	daffffee 	ble	16fb8 <CUSBCDCEthernetDevice::Configure()+0x50>
   16ffc:	e5d41003 	ldrb	r1, [r4, #3]
   17000:	e1a00005 	mov	r0, r5
   17004:	ebffff99 	bl	16e70 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   17008:	e2504000 	subs	r4, r0, #0
   1700c:	0a000043 	beq	17120 <CUSBCDCEthernetDevice::Configure()+0x1b8>
   17010:	e28d0008 	add	r0, sp, #8
   17014:	eb004102 	bl	27424 <CString::CString()>
   17018:	e28d1008 	add	r1, sp, #8
   1701c:	e285001c 	add	r0, r5, #28
   17020:	eb004dd5 	bl	2a77c <CMACAddress::Format(CString*) const>
   17024:	eb003d19 	bl	26490 <CLogger::Get()>
   17028:	e1a04000 	mov	r4, r0
   1702c:	e28d0008 	add	r0, sp, #8
   17030:	eb004111 	bl	2747c <CString::operator char const*() const>
   17034:	e59f3160 	ldr	r3, [pc, #352]	; 1719c <CUSBCDCEthernetDevice::Configure()+0x234>
   17038:	e58d0000 	str	r0, [sp]
   1703c:	e3a02004 	mov	r2, #4
   17040:	e1a00004 	mov	r0, r4
   17044:	e59f114c 	ldr	r1, [pc, #332]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   17048:	eb003c4d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1704c:	e3a06005 	mov	r6, #5
   17050:	e3a07014 	mov	r7, #20
   17054:	ea000003 	b	17068 <CUSBCDCEthernetDevice::Configure()+0x100>
   17058:	e5d43003 	ldrb	r3, [r4, #3]
   1705c:	e203303f 	and	r3, r3, #63	; 0x3f
   17060:	e3530002 	cmp	r3, #2
   17064:	0a00001c 	beq	170dc <CUSBCDCEthernetDevice::Configure()+0x174>
   17068:	e1a01006 	mov	r1, r6
   1706c:	e1a00005 	mov	r0, r5
   17070:	ebffdf56 	bl	edd0 <CUSBFunction::GetDescriptor(unsigned char)>
   17074:	e2504000 	subs	r4, r0, #0
   17078:	1afffff6 	bne	17058 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1707c:	e5953014 	ldr	r3, [r5, #20]
   17080:	e1a00005 	mov	r0, r5
   17084:	e3530000 	cmp	r3, #0
   17088:	0a000030 	beq	17150 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   1708c:	e5953018 	ldr	r3, [r5, #24]
   17090:	e3530000 	cmp	r3, #0
   17094:	0a00002d 	beq	17150 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   17098:	ebffde67 	bl	ea3c <CUSBFunction::Configure()>
   1709c:	e2504000 	subs	r4, r0, #0
   170a0:	0a000024 	beq	17138 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   170a4:	e2850010 	add	r0, r5, #16
   170a8:	eb004dd4 	bl	2a800 <CNetDevice::AddNetDevice()>
   170ac:	e28d0008 	add	r0, sp, #8
   170b0:	eb0040a8 	bl	27358 <CString::~CString()>
   170b4:	e1a00004 	mov	r0, r4
   170b8:	e28dd01c 	add	sp, sp, #28
   170bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   170c0:	e1a04003 	mov	r4, r3
   170c4:	e1a00005 	mov	r0, r5
   170c8:	e59f10c8 	ldr	r1, [pc, #200]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   170cc:	ebffdf4a 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   170d0:	e1a00004 	mov	r0, r4
   170d4:	e28dd01c 	add	sp, sp, #28
   170d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   170dc:	e1d430d2 	ldrsb	r3, [r4, #2]
   170e0:	e3530000 	cmp	r3, #0
   170e4:	ba00001d 	blt	17160 <CUSBCDCEthernetDevice::Configure()+0x1f8>
   170e8:	e5953018 	ldr	r3, [r5, #24]
   170ec:	e1a00005 	mov	r0, r5
   170f0:	e3530000 	cmp	r3, #0
   170f4:	1a000015 	bne	17150 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   170f8:	ebffdf13 	bl	ed4c <CUSBFunction::GetDevice() const>
   170fc:	e1a09000 	mov	r9, r0
   17100:	e1a00007 	mov	r0, r7
   17104:	eb004e0a 	bl	2a934 <operator new(unsigned int)>
   17108:	e1a08000 	mov	r8, r0
   1710c:	e1a02004 	mov	r2, r4
   17110:	e1a01009 	mov	r1, r9
   17114:	ebffdd49 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17118:	e5858018 	str	r8, [r5, #24]
   1711c:	eaffffd1 	b	17068 <CUSBCDCEthernetDevice::Configure()+0x100>
   17120:	eb003cda 	bl	26490 <CLogger::Get()>
   17124:	e59f3074 	ldr	r3, [pc, #116]	; 171a0 <CUSBCDCEthernetDevice::Configure()+0x238>
   17128:	e3a02001 	mov	r2, #1
   1712c:	e59f1064 	ldr	r1, [pc, #100]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   17130:	eb003c13 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17134:	eaffff9b 	b	16fa8 <CUSBCDCEthernetDevice::Configure()+0x40>
   17138:	eb003cd4 	bl	26490 <CLogger::Get()>
   1713c:	e59f3060 	ldr	r3, [pc, #96]	; 171a4 <CUSBCDCEthernetDevice::Configure()+0x23c>
   17140:	e3a02001 	mov	r2, #1
   17144:	e59f104c 	ldr	r1, [pc, #76]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   17148:	eb003c0d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1714c:	eaffffd6 	b	170ac <CUSBCDCEthernetDevice::Configure()+0x144>
   17150:	e59f1040 	ldr	r1, [pc, #64]	; 17198 <CUSBCDCEthernetDevice::Configure()+0x230>
   17154:	ebffdf28 	bl	edfc <CUSBFunction::ConfigurationError(char const*) const>
   17158:	e3a04000 	mov	r4, #0
   1715c:	eaffffd2 	b	170ac <CUSBCDCEthernetDevice::Configure()+0x144>
   17160:	e5953014 	ldr	r3, [r5, #20]
   17164:	e1a00005 	mov	r0, r5
   17168:	e3530000 	cmp	r3, #0
   1716c:	1afffff7 	bne	17150 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   17170:	ebffdef5 	bl	ed4c <CUSBFunction::GetDevice() const>
   17174:	e1a09000 	mov	r9, r0
   17178:	e1a00007 	mov	r0, r7
   1717c:	eb004dec 	bl	2a934 <operator new(unsigned int)>
   17180:	e1a08000 	mov	r8, r0
   17184:	e1a02004 	mov	r2, r4
   17188:	e1a01009 	mov	r1, r9
   1718c:	ebffdd2b 	bl	e640 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17190:	e5858014 	str	r8, [r5, #20]
   17194:	eaffffb3 	b	17068 <CUSBCDCEthernetDevice::Configure()+0x100>
   17198:	00042ff4 	.word	0x00042ff4
   1719c:	00042c98 	.word	0x00042c98
   171a0:	00042e7c 	.word	0x00042e7c
   171a4:	00041a90 	.word	0x00041a90

000171a8 <CNetDevice::IsLinkUp()>:
   171a8:	e3a00001 	mov	r0, #1
   171ac:	e12fff1e 	bx	lr

000171b0 <CNetDevice::GetLinkSpeed()>:
   171b0:	e3a00006 	mov	r0, #6
   171b4:	e12fff1e 	bx	lr

000171b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   171b8:	e3a0c000 	mov	ip, #0
   171bc:	e0813002 	add	r3, r1, r2
   171c0:	e151000c 	cmp	r1, ip
   171c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   171c8:	e8800006 	stm	r0, {r1, r2}
   171cc:	e5801010 	str	r1, [r0, #16]
   171d0:	e5801018 	str	r1, [r0, #24]
   171d4:	e580300c 	str	r3, [r0, #12]
   171d8:	e5c0c008 	strb	ip, [r0, #8]
   171dc:	e580c014 	str	ip, [r0, #20]
   171e0:	0a000030 	beq	172a8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   171e4:	e242c004 	sub	ip, r2, #4
   171e8:	e35c0f7f 	cmp	ip, #508	; 0x1fc
   171ec:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   171f0:	e5d1c000 	ldrb	ip, [r1]
   171f4:	e35c0009 	cmp	ip, #9
   171f8:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   171fc:	e5d1c001 	ldrb	ip, [r1, #1]
   17200:	e35c0002 	cmp	ip, #2
   17204:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   17208:	e5d1c002 	ldrb	ip, [r1, #2]
   1720c:	e5d1e003 	ldrb	lr, [r1, #3]
   17210:	e18cc40e 	orr	ip, ip, lr, lsl #8
   17214:	e15c0002 	cmp	ip, r2
   17218:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   1721c:	e3a05000 	mov	r5, #0
   17220:	3081300c 	addcc	r3, r1, ip
   17224:	3580300c 	strcc	r3, [r0, #12]
   17228:	e1a04005 	mov	r4, r5
   1722c:	e3a06009 	mov	r6, #9
   17230:	e3a08007 	mov	r8, #7
   17234:	e3a07001 	mov	r7, #1
   17238:	ea000005 	b	17254 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   1723c:	e3520005 	cmp	r2, #5
   17240:	0a000020 	beq	172c8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   17244:	e3520002 	cmp	r2, #2
   17248:	0a00001a 	beq	172b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x100>
   1724c:	e1a0100c 	mov	r1, ip
   17250:	e1a04002 	mov	r4, r2
   17254:	e2812002 	add	r2, r1, #2
   17258:	e1530002 	cmp	r3, r2
   1725c:	9a000020 	bls	172e4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   17260:	e5d1e000 	ldrb	lr, [r1]
   17264:	e5d12001 	ldrb	r2, [r1, #1]
   17268:	e081c00e 	add	ip, r1, lr
   1726c:	e15c0003 	cmp	ip, r3
   17270:	8a00000a 	bhi	172a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17274:	e3520004 	cmp	r2, #4
   17278:	1affffef 	bne	1723c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x84>
   1727c:	e3540000 	cmp	r4, #0
   17280:	0a000006 	beq	172a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17284:	e5d15005 	ldrb	r5, [r1, #5]
   17288:	e1a04006 	mov	r4, r6
   1728c:	e2455001 	sub	r5, r5, #1
   17290:	e16f5f15 	clz	r5, r5
   17294:	e1a052a5 	lsr	r5, r5, #5
   17298:	e15e0004 	cmp	lr, r4
   1729c:	0affffea 	beq	1724c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   172a0:	e5801018 	str	r1, [r0, #24]
   172a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   172a8:	e3a02024 	mov	r2, #36	; 0x24
   172ac:	e59f1044 	ldr	r1, [pc, #68]	; 172f8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x140>
   172b0:	e59f0044 	ldr	r0, [pc, #68]	; 172fc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   172b4:	eb003382 	bl	240c4 <assertion_failed>
   172b8:	e3540000 	cmp	r4, #0
   172bc:	1afffff7 	bne	172a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   172c0:	e1a04006 	mov	r4, r6
   172c4:	eafffff3 	b	17298 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   172c8:	e31400fd 	tst	r4, #253	; 0xfd
   172cc:	0afffff3 	beq	172a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   172d0:	e3550000 	cmp	r5, #0
   172d4:	11a04006 	movne	r4, r6
   172d8:	11a05007 	movne	r5, r7
   172dc:	01a04008 	moveq	r4, r8
   172e0:	eaffffec 	b	17298 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   172e4:	e1510003 	cmp	r1, r3
   172e8:	1affffec 	bne	172a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   172ec:	e3a03001 	mov	r3, #1
   172f0:	e5c03008 	strb	r3, [r0, #8]
   172f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   172f8:	00043040 	.word	0x00043040
   172fc:	00043054 	.word	0x00043054

00017300 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   17300:	e3510000 	cmp	r1, #0
   17304:	e92d4070 	push	{r4, r5, r6, lr}
   17308:	0a00000d 	beq	17344 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   1730c:	e8910044 	ldm	r1, {r2, r6}
   17310:	e5d15008 	ldrb	r5, [r1, #8]
   17314:	e591400c 	ldr	r4, [r1, #12]
   17318:	e591e010 	ldr	lr, [r1, #16]
   1731c:	e591c014 	ldr	ip, [r1, #20]
   17320:	e5802000 	str	r2, [r0]
   17324:	e5912018 	ldr	r2, [r1, #24]
   17328:	e5806004 	str	r6, [r0, #4]
   1732c:	e5c05008 	strb	r5, [r0, #8]
   17330:	e580400c 	str	r4, [r0, #12]
   17334:	e580e010 	str	lr, [r0, #16]
   17338:	e580c014 	str	ip, [r0, #20]
   1733c:	e5802018 	str	r2, [r0, #24]
   17340:	e8bd8070 	pop	{r4, r5, r6, pc}
   17344:	e3a02082 	mov	r2, #130	; 0x82
   17348:	e59f1004 	ldr	r1, [pc, #4]	; 17354 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   1734c:	e59f0004 	ldr	r0, [pc, #4]	; 17358 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   17350:	eb00335b 	bl	240c4 <assertion_failed>
   17354:	00043040 	.word	0x00043040
   17358:	00043064 	.word	0x00043064

0001735c <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   1735c:	e12fff1e 	bx	lr

00017360 <CUSBConfigurationParser::IsValid() const>:
   17360:	e5d00008 	ldrb	r0, [r0, #8]
   17364:	e12fff1e 	bx	lr

00017368 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   17368:	e5d03008 	ldrb	r3, [r0, #8]
   1736c:	e92d4070 	push	{r4, r5, r6, lr}
   17370:	e3530000 	cmp	r3, #0
   17374:	0a00002a 	beq	17424 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xbc>
   17378:	e590c010 	ldr	ip, [r0, #16]
   1737c:	e590e00c 	ldr	lr, [r0, #12]
   17380:	e15c000e 	cmp	ip, lr
   17384:	2a000022 	bcs	17414 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   17388:	e5dc3000 	ldrb	r3, [ip]
   1738c:	e5dc2001 	ldrb	r2, [ip, #1]
   17390:	e08c3003 	add	r3, ip, r3
   17394:	e153000e 	cmp	r3, lr
   17398:	8a000018 	bhi	17400 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   1739c:	e2415005 	sub	r5, r1, #5
   173a0:	e16f5f15 	clz	r5, r5
   173a4:	e3520004 	cmp	r2, #4
   173a8:	03510005 	cmpeq	r1, #5
   173ac:	e1a052a5 	lsr	r5, r5, #5
   173b0:	0a000017 	beq	17414 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   173b4:	e1510002 	cmp	r1, r2
   173b8:	1a000008 	bne	173e0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   173bc:	ea000020 	b	17444 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   173c0:	e35c0004 	cmp	ip, #4
   173c4:	13a04000 	movne	r4, #0
   173c8:	02054001 	andeq	r4, r5, #1
   173cc:	e3540000 	cmp	r4, #0
   173d0:	1a00000e 	bne	17410 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   173d4:	e15c0001 	cmp	ip, r1
   173d8:	0a000015 	beq	17434 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   173dc:	e1a03002 	mov	r3, r2
   173e0:	e153000e 	cmp	r3, lr
   173e4:	2a000009 	bcs	17410 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   173e8:	e5d32000 	ldrb	r2, [r3]
   173ec:	e5d3c001 	ldrb	ip, [r3, #1]
   173f0:	e0832002 	add	r2, r3, r2
   173f4:	e152000e 	cmp	r2, lr
   173f8:	9afffff0 	bls	173c0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x58>
   173fc:	e5803010 	str	r3, [r0, #16]
   17400:	e3a020a9 	mov	r2, #169	; 0xa9
   17404:	e59f1040 	ldr	r1, [pc, #64]	; 1744c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   17408:	e59f0040 	ldr	r0, [pc, #64]	; 17450 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe8>
   1740c:	eb00332c 	bl	240c4 <assertion_failed>
   17410:	e5803010 	str	r3, [r0, #16]
   17414:	e3a0c000 	mov	ip, #0
   17418:	e580c014 	str	ip, [r0, #20]
   1741c:	e1a0000c 	mov	r0, ip
   17420:	e8bd8070 	pop	{r4, r5, r6, pc}
   17424:	e3a0209f 	mov	r2, #159	; 0x9f
   17428:	e59f101c 	ldr	r1, [pc, #28]	; 1744c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   1742c:	e59f0020 	ldr	r0, [pc, #32]	; 17454 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xec>
   17430:	eb003323 	bl	240c4 <assertion_failed>
   17434:	e1a0c003 	mov	ip, r3
   17438:	e5802010 	str	r2, [r0, #16]
   1743c:	e580c018 	str	ip, [r0, #24]
   17440:	eafffff4 	b	17418 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb0>
   17444:	e1a02003 	mov	r2, r3
   17448:	eafffffa 	b	17438 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd0>
   1744c:	00043040 	.word	0x00043040
   17450:	00043074 	.word	0x00043074
   17454:	00041070 	.word	0x00041070

00017458 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   17458:	e5d03008 	ldrb	r3, [r0, #8]
   1745c:	e92d4010 	push	{r4, lr}
   17460:	e3530000 	cmp	r3, #0
   17464:	0a000006 	beq	17484 <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   17468:	e5900014 	ldr	r0, [r0, #20]
   1746c:	e3500000 	cmp	r0, #0
   17470:	18bd8010 	popne	{r4, pc}
   17474:	e3a020c8 	mov	r2, #200	; 0xc8
   17478:	e59f1014 	ldr	r1, [pc, #20]	; 17494 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   1747c:	e59f0014 	ldr	r0, [pc, #20]	; 17498 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   17480:	eb00330f 	bl	240c4 <assertion_failed>
   17484:	e3a020c7 	mov	r2, #199	; 0xc7
   17488:	e59f1004 	ldr	r1, [pc, #4]	; 17494 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   1748c:	e59f0008 	ldr	r0, [pc, #8]	; 1749c <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17490:	eb00330b 	bl	240c4 <assertion_failed>
   17494:	00043040 	.word	0x00043040
   17498:	00043090 	.word	0x00043090
   1749c:	00041070 	.word	0x00041070

000174a0 <CUSBConfigurationParser::Error(char const*) const>:
   174a0:	e92d4030 	push	{r4, r5, lr}
   174a4:	e2515000 	subs	r5, r1, #0
   174a8:	e24dd00c 	sub	sp, sp, #12
   174ac:	0a00000e 	beq	174ec <CUSBConfigurationParser::Error(char const*) const+0x4c>
   174b0:	e1a04000 	mov	r4, r0
   174b4:	eb003bf5 	bl	26490 <CLogger::Get()>
   174b8:	e5941000 	ldr	r1, [r4]
   174bc:	e5942018 	ldr	r2, [r4, #24]
   174c0:	e59f3034 	ldr	r3, [pc, #52]	; 174fc <CUSBConfigurationParser::Error(char const*) const+0x5c>
   174c4:	e0422001 	sub	r2, r2, r1
   174c8:	e58d2000 	str	r2, [sp]
   174cc:	e1a01005 	mov	r1, r5
   174d0:	e3a02001 	mov	r2, #1
   174d4:	eb003b2a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   174d8:	e8940003 	ldm	r4, {r0, r1}
   174dc:	e1a02005 	mov	r2, r5
   174e0:	e28dd00c 	add	sp, sp, #12
   174e4:	e8bd4030 	pop	{r4, r5, lr}
   174e8:	ea003469 	b	24694 <debug_hexdump(void const*, unsigned int, char const*)>
   174ec:	e3a020cf 	mov	r2, #207	; 0xcf
   174f0:	e59f1008 	ldr	r1, [pc, #8]	; 17500 <CUSBConfigurationParser::Error(char const*) const+0x60>
   174f4:	e59f0008 	ldr	r0, [pc, #8]	; 17504 <CUSBConfigurationParser::Error(char const*) const+0x64>
   174f8:	eb0032f1 	bl	240c4 <assertion_failed>
   174fc:	000430ac 	.word	0x000430ac
   17500:	00043040 	.word	0x00043040
   17504:	00041af8 	.word	0x00041af8

00017508 <CUSBGamePadDevice::GetInitialState()>:
   17508:	e2800024 	add	r0, r0, #36	; 0x24
   1750c:	e12fff1e 	bx	lr

00017510 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17510:	e3510000 	cmp	r1, #0
   17514:	012fff1e 	bxeq	lr
   17518:	e280cf4a 	add	ip, r0, #296	; 0x128
   1751c:	e1dcc0b0 	ldrh	ip, [ip]
   17520:	e92d4070 	push	{r4, r5, r6, lr}
   17524:	e15c0002 	cmp	ip, r2
   17528:	e1a04000 	mov	r4, r0
   1752c:	18bd8070 	popne	{r4, r5, r6, pc}
   17530:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   17534:	e3520000 	cmp	r2, #0
   17538:	08bd8070 	popeq	{r4, r5, r6, pc}
   1753c:	e1a05000 	mov	r5, r0
   17540:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17544:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17548:	e12fff33 	blx	r3
   1754c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17550:	e1a01005 	mov	r1, r5
   17554:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17558:	e2400001 	sub	r0, r0, #1
   1755c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17560:	e12fff13 	bx	r3

00017564 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17564:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17568:	e92d4010 	push	{r4, lr}
   1756c:	e3530000 	cmp	r3, #0
   17570:	1a000006 	bne	17590 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17574:	e3510000 	cmp	r1, #0
   17578:	e5801124 	str	r1, [r0, #292]	; 0x124
   1757c:	18bd8010 	popne	{r4, pc}
   17580:	e3a0204d 	mov	r2, #77	; 0x4d
   17584:	e59f1014 	ldr	r1, [pc, #20]	; 175a0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17588:	e59f0014 	ldr	r0, [pc, #20]	; 175a4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   1758c:	eb0032cc 	bl	240c4 <assertion_failed>
   17590:	e3a0204b 	mov	r2, #75	; 0x4b
   17594:	e59f1004 	ldr	r1, [pc, #4]	; 175a0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17598:	e59f0008 	ldr	r0, [pc, #8]	; 175a8 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   1759c:	eb0032c8 	bl	240c4 <assertion_failed>
   175a0:	00043138 	.word	0x00043138
   175a4:	00043160 	.word	0x00043160
   175a8:	00043148 	.word	0x00043148

000175ac <CUSBGamePadDevice::Configure()>:
   175ac:	e92d4030 	push	{r4, r5, lr}
   175b0:	e2803f4a 	add	r3, r0, #296	; 0x128
   175b4:	e1d310b0 	ldrh	r1, [r3]
   175b8:	e24dd00c 	sub	sp, sp, #12
   175bc:	e3510000 	cmp	r1, #0
   175c0:	0a00001a 	beq	17630 <CUSBGamePadDevice::Configure()+0x84>
   175c4:	e1a04000 	mov	r4, r0
   175c8:	ebffe81b 	bl	1163c <CUSBHIDDevice::Configure(unsigned int)>
   175cc:	e2505000 	subs	r5, r0, #0
   175d0:	0a00000e 	beq	17610 <CUSBGamePadDevice::Configure()+0x64>
   175d4:	e59f2064 	ldr	r2, [pc, #100]	; 17640 <CUSBGamePadDevice::Configure()+0x94>
   175d8:	e5923000 	ldr	r3, [r2]
   175dc:	e584312c 	str	r3, [r4, #300]	; 0x12c
   175e0:	e2833001 	add	r3, r3, #1
   175e4:	e5823000 	str	r3, [r2]
   175e8:	eb00358f 	bl	24c2c <CDeviceNameService::Get()>
   175ec:	e3a03000 	mov	r3, #0
   175f0:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   175f4:	e59f1048 	ldr	r1, [pc, #72]	; 17644 <CUSBGamePadDevice::Configure()+0x98>
   175f8:	e58d3000 	str	r3, [sp]
   175fc:	e1a03004 	mov	r3, r4
   17600:	eb003596 	bl	24c60 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17604:	e1a00005 	mov	r0, r5
   17608:	e28dd00c 	add	sp, sp, #12
   1760c:	e8bd8030 	pop	{r4, r5, pc}
   17610:	eb003b9e 	bl	26490 <CLogger::Get()>
   17614:	e59f302c 	ldr	r3, [pc, #44]	; 17648 <CUSBGamePadDevice::Configure()+0x9c>
   17618:	e3a02001 	mov	r2, #1
   1761c:	e59f1028 	ldr	r1, [pc, #40]	; 1764c <CUSBGamePadDevice::Configure()+0xa0>
   17620:	eb003ad7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17624:	e1a00005 	mov	r0, r5
   17628:	e28dd00c 	add	sp, sp, #12
   1762c:	e8bd8030 	pop	{r4, r5, pc}
   17630:	e3a02035 	mov	r2, #53	; 0x35
   17634:	e59f1014 	ldr	r1, [pc, #20]	; 17650 <CUSBGamePadDevice::Configure()+0xa4>
   17638:	e59f0014 	ldr	r0, [pc, #20]	; 17654 <CUSBGamePadDevice::Configure()+0xa8>
   1763c:	eb0032a0 	bl	240c4 <assertion_failed>
   17640:	00049998 	.word	0x00049998
   17644:	000430e4 	.word	0x000430e4
   17648:	000422c4 	.word	0x000422c4
   1764c:	000430dc 	.word	0x000430dc
   17650:	00043138 	.word	0x00043138
   17654:	00041dc0 	.word	0x00041dc0

00017658 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17658:	e92d4010 	push	{r4, lr}
   1765c:	e3a02000 	mov	r2, #0
   17660:	e1a04000 	mov	r4, r0
   17664:	ebffe7b5 	bl	11540 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17668:	e3a03000 	mov	r3, #0
   1766c:	e59f1028 	ldr	r1, [pc, #40]	; 1769c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   17670:	e2842f4a 	add	r2, r4, #296	; 0x128
   17674:	e5841000 	str	r1, [r4]
   17678:	e5843124 	str	r3, [r4, #292]	; 0x124
   1767c:	e1a01003 	mov	r1, r3
   17680:	e1c230b0 	strh	r3, [r2]
   17684:	e2840024 	add	r0, r4, #36	; 0x24
   17688:	e584312c 	str	r3, [r4, #300]	; 0x12c
   1768c:	e3a02c01 	mov	r2, #256	; 0x100
   17690:	eb004857 	bl	297f4 <memset>
   17694:	e1a00004 	mov	r0, r4
   17698:	e8bd8010 	pop	{r4, pc}
   1769c:	000430f4 	.word	0x000430f4

000176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   176a0:	e92d4070 	push	{r4, r5, r6, lr}
   176a4:	e3a06000 	mov	r6, #0
   176a8:	e1a04000 	mov	r4, r0
   176ac:	e59f502c 	ldr	r5, [pc, #44]	; 176e0 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   176b0:	e5806124 	str	r6, [r0, #292]	; 0x124
   176b4:	e2853018 	add	r3, r5, #24
   176b8:	e5803000 	str	r3, [r0]
   176bc:	eb00355a 	bl	24c2c <CDeviceNameService::Get()>
   176c0:	e1a03006 	mov	r3, r6
   176c4:	e2851008 	add	r1, r5, #8
   176c8:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   176cc:	eb00357d 	bl	24cc8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   176d0:	e1a00004 	mov	r0, r4
   176d4:	ebffe7ad 	bl	11590 <CUSBHIDDevice::~CUSBHIDDevice()>
   176d8:	e1a00004 	mov	r0, r4
   176dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   176e0:	000430dc 	.word	0x000430dc

000176e4 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   176e4:	e92d4010 	push	{r4, lr}
   176e8:	e1a04000 	mov	r4, r0
   176ec:	ebffffeb 	bl	176a0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   176f0:	e1a00004 	mov	r0, r4
   176f4:	e3a01e13 	mov	r1, #304	; 0x130
   176f8:	eb004c9b 	bl	2a96c <operator delete(void*, unsigned int)>
   176fc:	e1a00004 	mov	r0, r4
   17700:	e8bd8010 	pop	{r4, pc}

00017704 <CUSBString::CUSBString(CUSBDevice*)>:
   17704:	e3a03000 	mov	r3, #0
   17708:	e92d4070 	push	{r4, r5, r6, lr}
   1770c:	e880000a 	stm	r0, {r1, r3}
   17710:	e1a04000 	mov	r4, r0
   17714:	e3a00010 	mov	r0, #16
   17718:	eb004c85 	bl	2a934 <operator new(unsigned int)>
   1771c:	e1a05000 	mov	r5, r0
   17720:	eb003f3f 	bl	27424 <CString::CString()>
   17724:	e5943000 	ldr	r3, [r4]
   17728:	e5845008 	str	r5, [r4, #8]
   1772c:	e3530000 	cmp	r3, #0
   17730:	0a000001 	beq	1773c <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17734:	e1a00004 	mov	r0, r4
   17738:	e8bd8070 	pop	{r4, r5, r6, pc}
   1773c:	e3a02023 	mov	r2, #35	; 0x23
   17740:	e59f1004 	ldr	r1, [pc, #4]	; 1774c <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17744:	e59f0004 	ldr	r0, [pc, #4]	; 17750 <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17748:	eb00325d 	bl	240c4 <assertion_failed>
   1774c:	00043178 	.word	0x00043178
   17750:	00041290 	.word	0x00041290

00017754 <CUSBString::CUSBString(CUSBString*)>:
   17754:	e3a03000 	mov	r3, #0
   17758:	e92d4070 	push	{r4, r5, r6, lr}
   1775c:	e5803004 	str	r3, [r0, #4]
   17760:	e1a04000 	mov	r4, r0
   17764:	e3a00010 	mov	r0, #16
   17768:	e1a05001 	mov	r5, r1
   1776c:	eb004c70 	bl	2a934 <operator new(unsigned int)>
   17770:	e1a06000 	mov	r6, r0
   17774:	eb003f2a 	bl	27424 <CString::CString()>
   17778:	e3550000 	cmp	r5, #0
   1777c:	e5846008 	str	r6, [r4, #8]
   17780:	0a000012 	beq	177d0 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17784:	e895000c 	ldm	r5, {r2, r3}
   17788:	e3530000 	cmp	r3, #0
   1778c:	e5842000 	str	r2, [r4]
   17790:	0a000008 	beq	177b8 <CUSBString::CUSBString(CUSBString*)+0x64>
   17794:	e5d30000 	ldrb	r0, [r3]
   17798:	eb004c66 	bl	2a938 <operator new[](unsigned int)>
   1779c:	e5840004 	str	r0, [r4, #4]
   177a0:	e5951004 	ldr	r1, [r5, #4]
   177a4:	e5d12000 	ldrb	r2, [r1]
   177a8:	eb004a88 	bl	2a1d0 <memcpy>
   177ac:	e5943008 	ldr	r3, [r4, #8]
   177b0:	e3530000 	cmp	r3, #0
   177b4:	0a000009 	beq	177e0 <CUSBString::CUSBString(CUSBString*)+0x8c>
   177b8:	e5953008 	ldr	r3, [r5, #8]
   177bc:	e3530000 	cmp	r3, #0
   177c0:	0a00000a 	beq	177f0 <CUSBString::CUSBString(CUSBString*)+0x9c>
   177c4:	e5843008 	str	r3, [r4, #8]
   177c8:	e1a00004 	mov	r0, r4
   177cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   177d0:	e3a0202b 	mov	r2, #43	; 0x2b
   177d4:	e59f1024 	ldr	r1, [pc, #36]	; 17800 <CUSBString::CUSBString(CUSBString*)+0xac>
   177d8:	e59f0024 	ldr	r0, [pc, #36]	; 17804 <CUSBString::CUSBString(CUSBString*)+0xb0>
   177dc:	eb003238 	bl	240c4 <assertion_failed>
   177e0:	e3a02035 	mov	r2, #53	; 0x35
   177e4:	e59f1014 	ldr	r1, [pc, #20]	; 17800 <CUSBString::CUSBString(CUSBString*)+0xac>
   177e8:	e59f0018 	ldr	r0, [pc, #24]	; 17808 <CUSBString::CUSBString(CUSBString*)+0xb4>
   177ec:	eb003234 	bl	240c4 <assertion_failed>
   177f0:	e3a02036 	mov	r2, #54	; 0x36
   177f4:	e59f1004 	ldr	r1, [pc, #4]	; 17800 <CUSBString::CUSBString(CUSBString*)+0xac>
   177f8:	e59f000c 	ldr	r0, [pc, #12]	; 1780c <CUSBString::CUSBString(CUSBString*)+0xb8>
   177fc:	eb003230 	bl	240c4 <assertion_failed>
   17800:	00043178 	.word	0x00043178
   17804:	000417b4 	.word	0x000417b4
   17808:	00043188 	.word	0x00043188
   1780c:	00043198 	.word	0x00043198

00017810 <CUSBString::~CUSBString()>:
   17810:	e92d4010 	push	{r4, lr}
   17814:	e1a04000 	mov	r4, r0
   17818:	e5900008 	ldr	r0, [r0, #8]
   1781c:	e3500000 	cmp	r0, #0
   17820:	0a000002 	beq	17830 <CUSBString::~CUSBString()+0x20>
   17824:	e5903000 	ldr	r3, [r0]
   17828:	e5933004 	ldr	r3, [r3, #4]
   1782c:	e12fff33 	blx	r3
   17830:	e3a03000 	mov	r3, #0
   17834:	e5940004 	ldr	r0, [r4, #4]
   17838:	e5843008 	str	r3, [r4, #8]
   1783c:	e1500003 	cmp	r0, r3
   17840:	0a000000 	beq	17848 <CUSBString::~CUSBString()+0x38>
   17844:	eb004c42 	bl	2a954 <operator delete[](void*)>
   17848:	e1a00004 	mov	r0, r4
   1784c:	e8bd8010 	pop	{r4, pc}

00017850 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17850:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17854:	e2516000 	subs	r6, r1, #0
   17858:	e28db020 	add	fp, sp, #32
   1785c:	e24dd014 	sub	sp, sp, #20
   17860:	0a000052 	beq	179b0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x160>
   17864:	e1a04000 	mov	r4, r0
   17868:	e5900004 	ldr	r0, [r0, #4]
   1786c:	e1a07002 	mov	r7, r2
   17870:	e3500000 	cmp	r0, #0
   17874:	0a000000 	beq	1787c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17878:	eb004c35 	bl	2a954 <operator delete[](void*)>
   1787c:	e3a00004 	mov	r0, #4
   17880:	eb004c2c 	bl	2a938 <operator new[](unsigned int)>
   17884:	e5943000 	ldr	r3, [r4]
   17888:	e5840004 	str	r0, [r4, #4]
   1788c:	e3530000 	cmp	r3, #0
   17890:	0a00004a 	beq	179c0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   17894:	e1a00003 	mov	r0, r3
   17898:	ebffd7a3 	bl	d72c <CUSBDevice::GetHost() const>
   1789c:	e1a05000 	mov	r5, r0
   178a0:	e5940000 	ldr	r0, [r4]
   178a4:	ebffd795 	bl	d700 <CUSBDevice::GetEndpoint0() const>
   178a8:	e3a08080 	mov	r8, #128	; 0x80
   178ac:	e3a02004 	mov	r2, #4
   178b0:	e5943004 	ldr	r3, [r4, #4]
   178b4:	e1a01000 	mov	r1, r0
   178b8:	e98d0104 	stmib	sp, {r2, r8}
   178bc:	e58d3000 	str	r3, [sp]
   178c0:	e58d700c 	str	r7, [sp, #12]
   178c4:	e1a00005 	mov	r0, r5
   178c8:	e1a03006 	mov	r3, r6
   178cc:	e3a02003 	mov	r2, #3
   178d0:	ebffe937 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   178d4:	e3500000 	cmp	r0, #0
   178d8:	ba000008 	blt	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   178dc:	e5940004 	ldr	r0, [r4, #4]
   178e0:	e5d05000 	ldrb	r5, [r0]
   178e4:	e3550001 	cmp	r5, #1
   178e8:	da000004 	ble	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   178ec:	e3150001 	tst	r5, #1
   178f0:	1a000002 	bne	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   178f4:	e5d09001 	ldrb	r9, [r0, #1]
   178f8:	e3590003 	cmp	r9, #3
   178fc:	0a000002 	beq	1790c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   17900:	e3a00000 	mov	r0, #0
   17904:	e24bd020 	sub	sp, fp, #32
   17908:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1790c:	e3550004 	cmp	r5, #4
   17910:	ca00002e 	bgt	179d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x180>
   17914:	e3550002 	cmp	r5, #2
   17918:	0a000049 	beq	17a44 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1f4>
   1791c:	e2455002 	sub	r5, r5, #2
   17920:	e1a0e0c5 	asr	lr, r5, #1
   17924:	e28e3008 	add	r3, lr, #8
   17928:	e3c33007 	bic	r3, r3, #7
   1792c:	e35e0000 	cmp	lr, #0
   17930:	e04dd003 	sub	sp, sp, r3
   17934:	e28d6010 	add	r6, sp, #16
   17938:	13a02000 	movne	r2, #0
   1793c:	128d100f 	addne	r1, sp, #15
   17940:	0a00000a 	beq	17970 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x120>
   17944:	e080c082 	add	ip, r0, r2, lsl #1
   17948:	e5dc3002 	ldrb	r3, [ip, #2]
   1794c:	e5dcc003 	ldrb	ip, [ip, #3]
   17950:	e2822001 	add	r2, r2, #1
   17954:	e183340c 	orr	r3, r3, ip, lsl #8
   17958:	e243c020 	sub	ip, r3, #32
   1795c:	e35c005e 	cmp	ip, #94	; 0x5e
   17960:	83a0305f 	movhi	r3, #95	; 0x5f
   17964:	e15e0002 	cmp	lr, r2
   17968:	e5e13001 	strb	r3, [r1, #1]!
   1796c:	1afffff4 	bne	17944 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf4>
   17970:	e3a03000 	mov	r3, #0
   17974:	e5940008 	ldr	r0, [r4, #8]
   17978:	e7c630c5 	strb	r3, [r6, r5, asr #1]
   1797c:	e1500003 	cmp	r0, r3
   17980:	0a000002 	beq	17990 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   17984:	e5903000 	ldr	r3, [r0]
   17988:	e5933004 	ldr	r3, [r3, #4]
   1798c:	e12fff33 	blx	r3
   17990:	e3a00010 	mov	r0, #16
   17994:	eb004be6 	bl	2a934 <operator new(unsigned int)>
   17998:	e1a05000 	mov	r5, r0
   1799c:	e1a01006 	mov	r1, r6
   179a0:	eb003ea5 	bl	2743c <CString::CString(char const*)>
   179a4:	e5845008 	str	r5, [r4, #8]
   179a8:	e3a00001 	mov	r0, #1
   179ac:	eaffffd4 	b	17904 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   179b0:	e3a02047 	mov	r2, #71	; 0x47
   179b4:	e59f1098 	ldr	r1, [pc, #152]	; 17a54 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   179b8:	e59f0098 	ldr	r0, [pc, #152]	; 17a58 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x208>
   179bc:	eb0031c0 	bl	240c4 <assertion_failed>
   179c0:	e3a0204d 	mov	r2, #77	; 0x4d
   179c4:	e59f1088 	ldr	r1, [pc, #136]	; 17a54 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   179c8:	e59f008c 	ldr	r0, [pc, #140]	; 17a5c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x20c>
   179cc:	eb0031bc 	bl	240c4 <assertion_failed>
   179d0:	e3a01002 	mov	r1, #2
   179d4:	eb004be4 	bl	2a96c <operator delete(void*, unsigned int)>
   179d8:	e1a00005 	mov	r0, r5
   179dc:	eb004bd5 	bl	2a938 <operator new[](unsigned int)>
   179e0:	e5840004 	str	r0, [r4, #4]
   179e4:	e5940000 	ldr	r0, [r4]
   179e8:	ebffd74f 	bl	d72c <CUSBDevice::GetHost() const>
   179ec:	e1a0a000 	mov	sl, r0
   179f0:	e5940000 	ldr	r0, [r4]
   179f4:	ebffd741 	bl	d700 <CUSBDevice::GetEndpoint0() const>
   179f8:	e594c004 	ldr	ip, [r4, #4]
   179fc:	e1a01000 	mov	r1, r0
   17a00:	e58d700c 	str	r7, [sp, #12]
   17a04:	e1a0000a 	mov	r0, sl
   17a08:	e98d0120 	stmib	sp, {r5, r8}
   17a0c:	e1a03006 	mov	r3, r6
   17a10:	e1a02009 	mov	r2, r9
   17a14:	e58dc000 	str	ip, [sp]
   17a18:	ebffe8e5 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17a1c:	e1550000 	cmp	r5, r0
   17a20:	1affffb6 	bne	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17a24:	e5940004 	ldr	r0, [r4, #4]
   17a28:	e5d03000 	ldrb	r3, [r0]
   17a2c:	e1530005 	cmp	r3, r5
   17a30:	1affffb2 	bne	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17a34:	e5d03001 	ldrb	r3, [r0, #1]
   17a38:	e3530003 	cmp	r3, #3
   17a3c:	1affffaf 	bne	17900 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   17a40:	eaffffb5 	b	1791c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   17a44:	e3a02075 	mov	r2, #117	; 0x75
   17a48:	e59f1004 	ldr	r1, [pc, #4]	; 17a54 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   17a4c:	e59f000c 	ldr	r0, [pc, #12]	; 17a60 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   17a50:	eb00319b 	bl	240c4 <assertion_failed>
   17a54:	00043178 	.word	0x00043178
   17a58:	000431b0 	.word	0x000431b0
   17a5c:	00041290 	.word	0x00041290
   17a60:	000431bc 	.word	0x000431bc

00017a64 <CUSBString::Get() const>:
   17a64:	e5900008 	ldr	r0, [r0, #8]
   17a68:	ea003e83 	b	2747c <CString::operator char const*() const>

00017a6c <CUSBString::GetLanguageID()>:
   17a6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a70:	e1a05000 	mov	r5, r0
   17a74:	e24dd010 	sub	sp, sp, #16
   17a78:	e3a00004 	mov	r0, #4
   17a7c:	eb004bad 	bl	2a938 <operator new[](unsigned int)>
   17a80:	e1a04000 	mov	r4, r0
   17a84:	e5950000 	ldr	r0, [r5]
   17a88:	e3500000 	cmp	r0, #0
   17a8c:	0a00004c 	beq	17bc4 <CUSBString::GetLanguageID()+0x158>
   17a90:	ebffd725 	bl	d72c <CUSBDevice::GetHost() const>
   17a94:	e1a06000 	mov	r6, r0
   17a98:	e5950000 	ldr	r0, [r5]
   17a9c:	ebffd717 	bl	d700 <CUSBDevice::GetEndpoint0() const>
   17aa0:	e3a07080 	mov	r7, #128	; 0x80
   17aa4:	e3a03000 	mov	r3, #0
   17aa8:	e3a02004 	mov	r2, #4
   17aac:	e1a01000 	mov	r1, r0
   17ab0:	e98d0084 	stmib	sp, {r2, r7}
   17ab4:	e58d4000 	str	r4, [sp]
   17ab8:	e1a00006 	mov	r0, r6
   17abc:	e58d300c 	str	r3, [sp, #12]
   17ac0:	e3a02003 	mov	r2, #3
   17ac4:	ebffe8ba 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17ac8:	e3500000 	cmp	r0, #0
   17acc:	ba000002 	blt	17adc <CUSBString::GetLanguageID()+0x70>
   17ad0:	e5d46000 	ldrb	r6, [r4]
   17ad4:	e3560003 	cmp	r6, #3
   17ad8:	ca000005 	bgt	17af4 <CUSBString::GetLanguageID()+0x88>
   17adc:	e1a00004 	mov	r0, r4
   17ae0:	eb004b9b 	bl	2a954 <operator delete[](void*)>
   17ae4:	e59f50f4 	ldr	r5, [pc, #244]	; 17be0 <CUSBString::GetLanguageID()+0x174>
   17ae8:	e1a00005 	mov	r0, r5
   17aec:	e28dd010 	add	sp, sp, #16
   17af0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17af4:	e2168001 	ands	r8, r6, #1
   17af8:	1afffff7 	bne	17adc <CUSBString::GetLanguageID()+0x70>
   17afc:	e5d49001 	ldrb	r9, [r4, #1]
   17b00:	e3590003 	cmp	r9, #3
   17b04:	1afffff4 	bne	17adc <CUSBString::GetLanguageID()+0x70>
   17b08:	e3560004 	cmp	r6, #4
   17b0c:	0a000019 	beq	17b78 <CUSBString::GetLanguageID()+0x10c>
   17b10:	e1a00004 	mov	r0, r4
   17b14:	eb004b8e 	bl	2a954 <operator delete[](void*)>
   17b18:	e1a00006 	mov	r0, r6
   17b1c:	eb004b85 	bl	2a938 <operator new[](unsigned int)>
   17b20:	e1a04000 	mov	r4, r0
   17b24:	e5950000 	ldr	r0, [r5]
   17b28:	ebffd6ff 	bl	d72c <CUSBDevice::GetHost() const>
   17b2c:	e1a0a000 	mov	sl, r0
   17b30:	e5950000 	ldr	r0, [r5]
   17b34:	ebffd6f1 	bl	d700 <CUSBDevice::GetEndpoint0() const>
   17b38:	e58d4000 	str	r4, [sp]
   17b3c:	e1a01000 	mov	r1, r0
   17b40:	e58d800c 	str	r8, [sp, #12]
   17b44:	e1a0000a 	mov	r0, sl
   17b48:	e98d00c0 	stmib	sp, {r6, r7}
   17b4c:	e1a03008 	mov	r3, r8
   17b50:	e1a02009 	mov	r2, r9
   17b54:	ebffe896 	bl	11db4 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17b58:	e1560000 	cmp	r6, r0
   17b5c:	1affffde 	bne	17adc <CUSBString::GetLanguageID()+0x70>
   17b60:	e5d43000 	ldrb	r3, [r4]
   17b64:	e1530006 	cmp	r3, r6
   17b68:	1affffdb 	bne	17adc <CUSBString::GetLanguageID()+0x70>
   17b6c:	e5d43001 	ldrb	r3, [r4, #1]
   17b70:	e3530003 	cmp	r3, #3
   17b74:	1affffd8 	bne	17adc <CUSBString::GetLanguageID()+0x70>
   17b78:	e3a02000 	mov	r2, #0
   17b7c:	e2466002 	sub	r6, r6, #2
   17b80:	e59f5058 	ldr	r5, [pc, #88]	; 17be0 <CUSBString::GetLanguageID()+0x174>
   17b84:	e1a060c6 	asr	r6, r6, #1
   17b88:	e0841082 	add	r1, r4, r2, lsl #1
   17b8c:	e5d13002 	ldrb	r3, [r1, #2]
   17b90:	e5d11003 	ldrb	r1, [r1, #3]
   17b94:	e1833401 	orr	r3, r3, r1, lsl #8
   17b98:	e1530005 	cmp	r3, r5
   17b9c:	0a00000c 	beq	17bd4 <CUSBString::GetLanguageID()+0x168>
   17ba0:	e2822001 	add	r2, r2, #1
   17ba4:	e1560002 	cmp	r6, r2
   17ba8:	8afffff6 	bhi	17b88 <CUSBString::GetLanguageID()+0x11c>
   17bac:	e5d43002 	ldrb	r3, [r4, #2]
   17bb0:	e5d42003 	ldrb	r2, [r4, #3]
   17bb4:	e1a00004 	mov	r0, r4
   17bb8:	e1835402 	orr	r5, r3, r2, lsl #8
   17bbc:	eb004b64 	bl	2a954 <operator delete[](void*)>
   17bc0:	eaffffc8 	b	17ae8 <CUSBString::GetLanguageID()+0x7c>
   17bc4:	e3a0209a 	mov	r2, #154	; 0x9a
   17bc8:	e59f1014 	ldr	r1, [pc, #20]	; 17be4 <CUSBString::GetLanguageID()+0x178>
   17bcc:	e59f0014 	ldr	r0, [pc, #20]	; 17be8 <CUSBString::GetLanguageID()+0x17c>
   17bd0:	eb00313b 	bl	240c4 <assertion_failed>
   17bd4:	e1a00004 	mov	r0, r4
   17bd8:	eb004b5d 	bl	2a954 <operator delete[](void*)>
   17bdc:	eaffffc1 	b	17ae8 <CUSBString::GetLanguageID()+0x7c>
   17be0:	00000409 	.word	0x00000409
   17be4:	00043178 	.word	0x00043178
   17be8:	00041290 	.word	0x00041290

00017bec <CKeyboardBehaviour::CKeyboardBehaviour()>:
   17bec:	e92d4010 	push	{r4, lr}
   17bf0:	e3a03000 	mov	r3, #0
   17bf4:	e1a04000 	mov	r4, r0
   17bf8:	e2800014 	add	r0, r0, #20
   17bfc:	e5843000 	str	r3, [r4]
   17c00:	e5843004 	str	r3, [r4, #4]
   17c04:	e5843008 	str	r3, [r4, #8]
   17c08:	e5c4300c 	strb	r3, [r4, #12]
   17c0c:	e5c4300d 	strb	r3, [r4, #13]
   17c10:	e5843010 	str	r3, [r4, #16]
   17c14:	eb000180 	bl	1821c <CKeyMap::CKeyMap()>
   17c18:	e1a00004 	mov	r0, r4
   17c1c:	e8bd8010 	pop	{r4, pc}

00017c20 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   17c20:	e92d4010 	push	{r4, lr}
   17c24:	e3a03000 	mov	r3, #0
   17c28:	e1a04000 	mov	r4, r0
   17c2c:	e2800014 	add	r0, r0, #20
   17c30:	e5843000 	str	r3, [r4]
   17c34:	e5843004 	str	r3, [r4, #4]
   17c38:	e5843008 	str	r3, [r4, #8]
   17c3c:	eb0000b2 	bl	17f0c <CKeyMap::~CKeyMap()>
   17c40:	e1a00004 	mov	r0, r4
   17c44:	e8bd8010 	pop	{r4, pc}

00017c48 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   17c48:	e3510000 	cmp	r1, #0
   17c4c:	0a000001 	beq	17c58 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   17c50:	e5801000 	str	r1, [r0]
   17c54:	e12fff1e 	bx	lr
   17c58:	e92d4010 	push	{r4, lr}
   17c5c:	e3a0202f 	mov	r2, #47	; 0x2f
   17c60:	e59f1004 	ldr	r1, [pc, #4]	; 17c6c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   17c64:	e59f0004 	ldr	r0, [pc, #4]	; 17c70 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   17c68:	eb003115 	bl	240c4 <assertion_failed>
   17c6c:	000431d8 	.word	0x000431d8
   17c70:	000431f0 	.word	0x000431f0

00017c74 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   17c74:	e3510000 	cmp	r1, #0
   17c78:	0a000001 	beq	17c84 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   17c7c:	e5801004 	str	r1, [r0, #4]
   17c80:	e12fff1e 	bx	lr
   17c84:	e92d4010 	push	{r4, lr}
   17c88:	e3a02035 	mov	r2, #53	; 0x35
   17c8c:	e59f1004 	ldr	r1, [pc, #4]	; 17c98 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   17c90:	e59f0004 	ldr	r0, [pc, #4]	; 17c9c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   17c94:	eb00310a 	bl	240c4 <assertion_failed>
   17c98:	000431d8 	.word	0x000431d8
   17c9c:	00043208 	.word	0x00043208

00017ca0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   17ca0:	e3510000 	cmp	r1, #0
   17ca4:	0a000001 	beq	17cb0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   17ca8:	e5801008 	str	r1, [r0, #8]
   17cac:	e12fff1e 	bx	lr
   17cb0:	e92d4010 	push	{r4, lr}
   17cb4:	e3a0203b 	mov	r2, #59	; 0x3b
   17cb8:	e59f1004 	ldr	r1, [pc, #4]	; 17cc4 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   17cbc:	e59f0004 	ldr	r0, [pc, #4]	; 17cc8 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   17cc0:	eb0030ff 	bl	240c4 <assertion_failed>
   17cc4:	000431d8 	.word	0x000431d8
   17cc8:	00043224 	.word	0x00043224

00017ccc <CKeyboardBehaviour::GetLEDStatus() const>:
   17ccc:	e2800014 	add	r0, r0, #20
   17cd0:	ea000124 	b	18168 <CKeyMap::GetLEDStatus() const>

00017cd4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   17cd4:	e92d4070 	push	{r4, r5, r6, lr}
   17cd8:	e5d0600c 	ldrb	r6, [r0, #12]
   17cdc:	e2805014 	add	r5, r0, #20
   17ce0:	e24dd008 	sub	sp, sp, #8
   17ce4:	e1a04000 	mov	r4, r0
   17ce8:	e1a02006 	mov	r2, r6
   17cec:	e1a00005 	mov	r0, r5
   17cf0:	eb0000a9 	bl	17f9c <CKeyMap::Translate(unsigned char, unsigned char)>
   17cf4:	e2403e13 	sub	r3, r0, #304	; 0x130
   17cf8:	e2433003 	sub	r3, r3, #3
   17cfc:	e353000f 	cmp	r3, #15
   17d00:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17d04:	ea00001d 	b	17d80 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   17d08:	00017d60 	.word	0x00017d60
   17d0c:	00017d60 	.word	0x00017d60
   17d10:	00017d60 	.word	0x00017d60
   17d14:	00017d48 	.word	0x00017d48
   17d18:	00017d48 	.word	0x00017d48
   17d1c:	00017d48 	.word	0x00017d48
   17d20:	00017d48 	.word	0x00017d48
   17d24:	00017d48 	.word	0x00017d48
   17d28:	00017d48 	.word	0x00017d48
   17d2c:	00017d48 	.word	0x00017d48
   17d30:	00017d48 	.word	0x00017d48
   17d34:	00017d48 	.word	0x00017d48
   17d38:	00017d48 	.word	0x00017d48
   17d3c:	00017d48 	.word	0x00017d48
   17d40:	00017d48 	.word	0x00017d48
   17d44:	00017d68 	.word	0x00017d68
   17d48:	e5943004 	ldr	r3, [r4, #4]
   17d4c:	e3530000 	cmp	r3, #0
   17d50:	0a000002 	beq	17d60 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17d54:	e2400f4d 	sub	r0, r0, #308	; 0x134
   17d58:	e2400002 	sub	r0, r0, #2
   17d5c:	e12fff33 	blx	r3
   17d60:	e28dd008 	add	sp, sp, #8
   17d64:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d68:	e5943008 	ldr	r3, [r4, #8]
   17d6c:	e3530000 	cmp	r3, #0
   17d70:	0afffffa 	beq	17d60 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17d74:	e12fff33 	blx	r3
   17d78:	e28dd008 	add	sp, sp, #8
   17d7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d80:	e1a01000 	mov	r1, r0
   17d84:	e1a02006 	mov	r2, r6
   17d88:	e1a00005 	mov	r0, r5
   17d8c:	e28d3004 	add	r3, sp, #4
   17d90:	eb0000c4 	bl	180a8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   17d94:	e3500000 	cmp	r0, #0
   17d98:	0afffff0 	beq	17d60 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17d9c:	e5943000 	ldr	r3, [r4]
   17da0:	e3530000 	cmp	r3, #0
   17da4:	0affffed 	beq	17d60 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17da8:	e12fff33 	blx	r3
   17dac:	e28dd008 	add	sp, sp, #8
   17db0:	e8bd8070 	pop	{r4, r5, r6, pc}

00017db4 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   17db4:	e241c080 	sub	ip, r1, #128	; 0x80
   17db8:	e6ef307c 	uxtb	r3, ip
   17dbc:	e3530007 	cmp	r3, #7
   17dc0:	e1a03000 	mov	r3, r0
   17dc4:	8a000004 	bhi	17ddc <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   17dc8:	e3a01001 	mov	r1, #1
   17dcc:	e5d0200c 	ldrb	r2, [r0, #12]
   17dd0:	e182cc11 	orr	ip, r2, r1, lsl ip
   17dd4:	e5c0c00c 	strb	ip, [r0, #12]
   17dd8:	e12fff1e 	bx	lr
   17ddc:	e5d0c00d 	ldrb	ip, [r0, #13]
   17de0:	e15c0001 	cmp	ip, r1
   17de4:	012fff1e 	bxeq	lr
   17de8:	e5c3100d 	strb	r1, [r3, #13]
   17dec:	eaffffb8 	b	17cd4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

00017df0 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   17df0:	e2413080 	sub	r3, r1, #128	; 0x80
   17df4:	e6ef2073 	uxtb	r2, r3
   17df8:	e3520007 	cmp	r2, #7
   17dfc:	8a000004 	bhi	17e14 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   17e00:	e3a01001 	mov	r1, #1
   17e04:	e5d0200c 	ldrb	r2, [r0, #12]
   17e08:	e1c23311 	bic	r3, r2, r1, lsl r3
   17e0c:	e5c0300c 	strb	r3, [r0, #12]
   17e10:	e12fff1e 	bx	lr
   17e14:	e5d0300d 	ldrb	r3, [r0, #13]
   17e18:	e1530001 	cmp	r3, r1
   17e1c:	112fff1e 	bxne	lr
   17e20:	e5903010 	ldr	r3, [r0, #16]
   17e24:	e92d4010 	push	{r4, lr}
   17e28:	e3530000 	cmp	r3, #0
   17e2c:	e1a04000 	mov	r4, r0
   17e30:	1a000002 	bne	17e40 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   17e34:	e3a03000 	mov	r3, #0
   17e38:	e5c4300d 	strb	r3, [r4, #13]
   17e3c:	e8bd8010 	pop	{r4, pc}
   17e40:	eb00465e 	bl	297c0 <CTimer::Get()>
   17e44:	e5941010 	ldr	r1, [r4, #16]
   17e48:	eb0044eb 	bl	291fc <CTimer::CancelKernelTimer(unsigned int)>
   17e4c:	e3a03000 	mov	r3, #0
   17e50:	e5843010 	str	r3, [r4, #16]
   17e54:	eafffff6 	b	17e34 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00017e58 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   17e58:	e92d4010 	push	{r4, lr}
   17e5c:	e5903010 	ldr	r3, [r0, #16]
   17e60:	e24dd008 	sub	sp, sp, #8
   17e64:	e1530001 	cmp	r3, r1
   17e68:	1a000013 	bne	17ebc <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   17e6c:	e5d0100d 	ldrb	r1, [r0, #13]
   17e70:	e1a04000 	mov	r4, r0
   17e74:	e3510000 	cmp	r1, #0
   17e78:	1a000001 	bne	17e84 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   17e7c:	e28dd008 	add	sp, sp, #8
   17e80:	e8bd8010 	pop	{r4, pc}
   17e84:	ebffff92 	bl	17cd4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   17e88:	eb00464c 	bl	297c0 <CTimer::Get()>
   17e8c:	e58d4000 	str	r4, [sp]
   17e90:	e3a03000 	mov	r3, #0
   17e94:	e59f2030 	ldr	r2, [pc, #48]	; 17ecc <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   17e98:	e3a01008 	mov	r1, #8
   17e9c:	eb004487 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   17ea0:	e3500000 	cmp	r0, #0
   17ea4:	e5840010 	str	r0, [r4, #16]
   17ea8:	1afffff3 	bne	17e7c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   17eac:	e3a020b7 	mov	r2, #183	; 0xb7
   17eb0:	e59f1018 	ldr	r1, [pc, #24]	; 17ed0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   17eb4:	e59f0018 	ldr	r0, [pc, #24]	; 17ed4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   17eb8:	eb003081 	bl	240c4 <assertion_failed>
   17ebc:	e3a020b0 	mov	r2, #176	; 0xb0
   17ec0:	e59f1008 	ldr	r1, [pc, #8]	; 17ed0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   17ec4:	e59f000c 	ldr	r0, [pc, #12]	; 17ed8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   17ec8:	eb00307d 	bl	240c4 <assertion_failed>
   17ecc:	00017edc 	.word	0x00017edc
   17ed0:	000431d8 	.word	0x000431d8
   17ed4:	000426e8 	.word	0x000426e8
   17ed8:	0004323c 	.word	0x0004323c

00017edc <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   17edc:	e3520000 	cmp	r2, #0
   17ee0:	0a000002 	beq	17ef0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   17ee4:	e1a01000 	mov	r1, r0
   17ee8:	e1a00002 	mov	r0, r2
   17eec:	eaffffd9 	b	17e58 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   17ef0:	e92d4010 	push	{r4, lr}
   17ef4:	e3a020be 	mov	r2, #190	; 0xbe
   17ef8:	e59f1004 	ldr	r1, [pc, #4]	; 17f04 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   17efc:	e59f0004 	ldr	r0, [pc, #4]	; 17f08 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   17f00:	eb00306f 	bl	240c4 <assertion_failed>
   17f04:	000431d8 	.word	0x000431d8
   17f08:	000408c0 	.word	0x000408c0

00017f0c <CKeyMap::~CKeyMap()>:
   17f0c:	e12fff1e 	bx	lr

00017f10 <CKeyMap::ClearTable(unsigned char)>:
   17f10:	e3510003 	cmp	r1, #3
   17f14:	ca000009 	bgt	17f40 <CKeyMap::ClearTable(unsigned char)+0x30>
   17f18:	e3a0c000 	mov	ip, #0
   17f1c:	e1a03081 	lsl	r3, r1, #1
   17f20:	e2832b01 	add	r2, r3, #1024	; 0x400
   17f24:	e0802002 	add	r2, r0, r2
   17f28:	e0803003 	add	r3, r0, r3
   17f2c:	e0c3c0b8 	strh	ip, [r3], #8
   17f30:	e1530002 	cmp	r3, r2
   17f34:	1afffffc 	bne	17f2c <CKeyMap::ClearTable(unsigned char)+0x1c>
   17f38:	e3a00001 	mov	r0, #1
   17f3c:	e12fff1e 	bx	lr
   17f40:	e3a00000 	mov	r0, #0
   17f44:	e12fff1e 	bx	lr

00017f48 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   17f48:	e16fcf12 	clz	ip, r2
   17f4c:	e1a0c2ac 	lsr	ip, ip, #5
   17f50:	e3510003 	cmp	r1, #3
   17f54:	c38cc001 	orrgt	ip, ip, #1
   17f58:	e35c0000 	cmp	ip, #0
   17f5c:	1a00000a 	bne	17f8c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   17f60:	e352007f 	cmp	r2, #127	; 0x7f
   17f64:	ca000009 	bgt	17f90 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   17f68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17f6c:	e59fe024 	ldr	lr, [pc, #36]	; 17f98 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   17f70:	e153000e 	cmp	r3, lr
   17f74:	d3a0c001 	movle	ip, #1
   17f78:	d0811102 	addle	r1, r1, r2, lsl #2
   17f7c:	d1a01081 	lslle	r1, r1, #1
   17f80:	d18030b1 	strhle	r3, [r0, r1]
   17f84:	e1a0000c 	mov	r0, ip
   17f88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17f8c:	e3a0c000 	mov	ip, #0
   17f90:	e1a0000c 	mov	r0, ip
   17f94:	e12fff1e 	bx	lr
   17f98:	00000132 	.word	0x00000132

00017f9c <CKeyMap::Translate(unsigned char, unsigned char)>:
   17f9c:	e6af3071 	sxtb	r3, r1
   17fa0:	e3530000 	cmp	r3, #0
   17fa4:	da000023 	ble	18038 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   17fa8:	e1a03181 	lsl	r3, r1, #3
   17fac:	e19030b3 	ldrh	r3, [r0, r3]
   17fb0:	e3530f42 	cmp	r3, #264	; 0x108
   17fb4:	0a000022 	beq	18044 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   17fb8:	e243cf43 	sub	ip, r3, #268	; 0x10c
   17fbc:	e24cc003 	sub	ip, ip, #3
   17fc0:	e35c000b 	cmp	ip, #11
   17fc4:	8a000003 	bhi	17fd8 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   17fc8:	e3120004 	tst	r2, #4
   17fcc:	12833027 	addne	r3, r3, #39	; 0x27
   17fd0:	16ff3073 	uxthne	r3, r3
   17fd4:	1a000018 	bne	1803c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17fd8:	e312008c 	tst	r2, #140	; 0x8c
   17fdc:	1a000015 	bne	18038 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   17fe0:	e2413053 	sub	r3, r1, #83	; 0x53
   17fe4:	e3530010 	cmp	r3, #16
   17fe8:	9a00001b 	bls	1805c <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   17fec:	e3120040 	tst	r2, #64	; 0x40
   17ff0:	0a000025 	beq	1808c <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   17ff4:	e3120022 	tst	r2, #34	; 0x22
   17ff8:	13a03003 	movne	r3, #3
   17ffc:	03a03002 	moveq	r3, #2
   18000:	e0831101 	add	r1, r3, r1, lsl #2
   18004:	e1a01081 	lsl	r1, r1, #1
   18008:	e19030b1 	ldrh	r3, [r0, r1]
   1800c:	e59f2088 	ldr	r2, [pc, #136]	; 1809c <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   18010:	e1530002 	cmp	r3, r2
   18014:	0a000017 	beq	18078 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   18018:	e3530e12 	cmp	r3, #288	; 0x120
   1801c:	0a000010 	beq	18064 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   18020:	e3530f47 	cmp	r3, #284	; 0x11c
   18024:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   18028:	02833017 	addeq	r3, r3, #23
   1802c:	02222001 	eoreq	r2, r2, #1
   18030:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   18034:	ea000000 	b	1803c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18038:	e3a03000 	mov	r3, #0
   1803c:	e1a00003 	mov	r0, r3
   18040:	e12fff1e 	bx	lr
   18044:	e3120011 	tst	r2, #17
   18048:	0affffe2 	beq	17fd8 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   1804c:	e3120004 	tst	r2, #4
   18050:	159f3048 	ldrne	r3, [pc, #72]	; 180a0 <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   18054:	1afffff8 	bne	1803c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18058:	eaffffde 	b	17fd8 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   1805c:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   18060:	eaffffe6 	b	18000 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   18064:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   18068:	e3a03f4d 	mov	r3, #308	; 0x134
   1806c:	e2222001 	eor	r2, r2, #1
   18070:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   18074:	eafffff0 	b	1803c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18078:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   1807c:	e59f3020 	ldr	r3, [pc, #32]	; 180a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   18080:	e2222001 	eor	r2, r2, #1
   18084:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   18088:	eaffffeb 	b	1803c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   1808c:	e3120022 	tst	r2, #34	; 0x22
   18090:	13a03001 	movne	r3, #1
   18094:	03a03000 	moveq	r3, #0
   18098:	eaffffd8 	b	18000 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   1809c:	0000011e 	.word	0x0000011e
   180a0:	00000142 	.word	0x00000142
   180a4:	00000135 	.word	0x00000135

000180a8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   180a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   180ac:	e241c021 	sub	ip, r1, #33	; 0x21
   180b0:	e59fe0a8 	ldr	lr, [pc, #168]	; 18160 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   180b4:	e6ffc07c 	uxth	ip, ip
   180b8:	e15c000e 	cmp	ip, lr
   180bc:	8a000025 	bhi	18158 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   180c0:	e241cc01 	sub	ip, r1, #256	; 0x100
   180c4:	e6ffe07c 	uxth	lr, ip
   180c8:	e35e0032 	cmp	lr, #50	; 0x32
   180cc:	9a00001e 	bls	1814c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   180d0:	e3120011 	tst	r2, #17
   180d4:	e6af2071 	sxtb	r2, r1
   180d8:	0a000009 	beq	18104 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   180dc:	e6ef1071 	uxtb	r1, r1
   180e0:	e2412061 	sub	r2, r1, #97	; 0x61
   180e4:	e3520019 	cmp	r2, #25
   180e8:	8a00001a 	bhi	18158 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   180ec:	e3a02000 	mov	r2, #0
   180f0:	e2411060 	sub	r1, r1, #96	; 0x60
   180f4:	e5c31000 	strb	r1, [r3]
   180f8:	e5c32001 	strb	r2, [r3, #1]
   180fc:	e1a00003 	mov	r0, r3
   18100:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18104:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   18108:	e3500000 	cmp	r0, #0
   1810c:	0a000009 	beq	18138 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   18110:	e6ef1071 	uxtb	r1, r1
   18114:	e2410041 	sub	r0, r1, #65	; 0x41
   18118:	e3500019 	cmp	r0, #25
   1811c:	92811020 	addls	r1, r1, #32
   18120:	96af2071 	sxtbls	r2, r1
   18124:	9a000003 	bls	18138 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   18128:	e2410061 	sub	r0, r1, #97	; 0x61
   1812c:	e3500019 	cmp	r0, #25
   18130:	92411020 	subls	r1, r1, #32
   18134:	96af2071 	sxtbls	r2, r1
   18138:	e3a01000 	mov	r1, #0
   1813c:	e5c32000 	strb	r2, [r3]
   18140:	e5c31001 	strb	r1, [r3, #1]
   18144:	e1a00003 	mov	r0, r3
   18148:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1814c:	e59f3010 	ldr	r3, [pc, #16]	; 18164 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   18150:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   18154:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18158:	e3a00000 	mov	r0, #0
   1815c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18160:	00000111 	.word	0x00000111
   18164:	0004999c 	.word	0x0004999c

00018168 <CKeyMap::GetLEDStatus() const>:
   18168:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   1816c:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   18170:	e3530000 	cmp	r3, #0
   18174:	13a03002 	movne	r3, #2
   18178:	03a03000 	moveq	r3, #0
   1817c:	e3520000 	cmp	r2, #0
   18180:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   18184:	13833001 	orrne	r3, r3, #1
   18188:	e3520000 	cmp	r2, #0
   1818c:	13833004 	orrne	r3, r3, #4
   18190:	e1a00003 	mov	r0, r3
   18194:	e12fff1e 	bx	lr

00018198 <CKeyMap::LookupDefaultMap(char const*)>:
   18198:	e92d4070 	push	{r4, r5, r6, lr}
   1819c:	e59f4064 	ldr	r4, [pc, #100]	; 18208 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   181a0:	e1a06000 	mov	r6, r0
   181a4:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   181a8:	e3500000 	cmp	r0, #0
   181ac:	0a000013 	beq	18200 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   181b0:	e3560000 	cmp	r6, #0
   181b4:	13a05000 	movne	r5, #0
   181b8:	128440d0 	addne	r4, r4, #208	; 0xd0
   181bc:	1a000004 	bne	181d4 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   181c0:	ea00000a 	b	181f0 <CKeyMap::LookupDefaultMap(char const*)+0x58>
   181c4:	e4940004 	ldr	r0, [r4], #4
   181c8:	e2855001 	add	r5, r5, #1
   181cc:	e3500000 	cmp	r0, #0
   181d0:	0a00000a 	beq	18200 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   181d4:	e1a01006 	mov	r1, r6
   181d8:	eb0045e1 	bl	29964 <strcmp>
   181dc:	e3500000 	cmp	r0, #0
   181e0:	1afffff7 	bne	181c4 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   181e4:	e59f0020 	ldr	r0, [pc, #32]	; 1820c <CKeyMap::LookupDefaultMap(char const*)+0x74>
   181e8:	e0800505 	add	r0, r0, r5, lsl #10
   181ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   181f0:	e59f2018 	ldr	r2, [pc, #24]	; 18210 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   181f4:	e59f1018 	ldr	r1, [pc, #24]	; 18214 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   181f8:	e59f0018 	ldr	r0, [pc, #24]	; 18218 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   181fc:	eb002fb0 	bl	240c4 <assertion_failed>
   18200:	e3a00000 	mov	r0, #0
   18204:	e8bd8070 	pop	{r4, r5, r6, pc}
   18208:	0004999c 	.word	0x0004999c
   1820c:	00043250 	.word	0x00043250
   18210:	0000013f 	.word	0x0000013f
   18214:	00044a50 	.word	0x00044a50
   18218:	00044a5c 	.word	0x00044a5c

0001821c <CKeyMap::CKeyMap()>:
   1821c:	e3a03000 	mov	r3, #0
   18220:	e3a02001 	mov	r2, #1
   18224:	e92d4010 	push	{r4, lr}
   18228:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   1822c:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   18230:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   18234:	e1a04000 	mov	r4, r0
   18238:	eb003653 	bl	25b8c <CKernelOptions::Get()>
   1823c:	eb003643 	bl	25b50 <CKernelOptions::GetKeyMap() const>
   18240:	e3500000 	cmp	r0, #0
   18244:	0a00000f 	beq	18288 <CKeyMap::CKeyMap()+0x6c>
   18248:	ebffffd2 	bl	18198 <CKeyMap::LookupDefaultMap(char const*)>
   1824c:	e2501000 	subs	r1, r0, #0
   18250:	0a000004 	beq	18268 <CKeyMap::CKeyMap()+0x4c>
   18254:	e3a02b01 	mov	r2, #1024	; 0x400
   18258:	e1a00004 	mov	r0, r4
   1825c:	eb0047db 	bl	2a1d0 <memcpy>
   18260:	e1a00004 	mov	r0, r4
   18264:	e8bd8010 	pop	{r4, pc}
   18268:	e59f0028 	ldr	r0, [pc, #40]	; 18298 <CKeyMap::CKeyMap()+0x7c>
   1826c:	ebffffc9 	bl	18198 <CKeyMap::LookupDefaultMap(char const*)>
   18270:	e2501000 	subs	r1, r0, #0
   18274:	1afffff6 	bne	18254 <CKeyMap::CKeyMap()+0x38>
   18278:	e3a02080 	mov	r2, #128	; 0x80
   1827c:	e59f1018 	ldr	r1, [pc, #24]	; 1829c <CKeyMap::CKeyMap()+0x80>
   18280:	e59f0018 	ldr	r0, [pc, #24]	; 182a0 <CKeyMap::CKeyMap()+0x84>
   18284:	eb002f8e 	bl	240c4 <assertion_failed>
   18288:	e3a0207a 	mov	r2, #122	; 0x7a
   1828c:	e59f1008 	ldr	r1, [pc, #8]	; 1829c <CKeyMap::CKeyMap()+0x80>
   18290:	e59f000c 	ldr	r0, [pc, #12]	; 182a4 <CKeyMap::CKeyMap()+0x88>
   18294:	eb002f8a 	bl	240c4 <assertion_failed>
   18298:	00044a6c 	.word	0x00044a6c
   1829c:	00044a50 	.word	0x00044a50
   182a0:	00044a70 	.word	0x00044a70
   182a4:	00044a5c 	.word	0x00044a5c

000182a8 <CMouseDevice::~CMouseDevice()>:
   182a8:	e92d4070 	push	{r4, r5, r6, lr}
   182ac:	e3a06000 	mov	r6, #0
   182b0:	e1a04000 	mov	r4, r0
   182b4:	e59f5034 	ldr	r5, [pc, #52]	; 182f0 <CMouseDevice::~CMouseDevice()+0x48>
   182b8:	e5806020 	str	r6, [r0, #32]
   182bc:	e2853008 	add	r3, r5, #8
   182c0:	e5803000 	str	r3, [r0]
   182c4:	eb003258 	bl	24c2c <CDeviceNameService::Get()>
   182c8:	e1a03006 	mov	r3, r6
   182cc:	e2851020 	add	r1, r5, #32
   182d0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   182d4:	eb00327b 	bl	24cc8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   182d8:	e2840004 	add	r0, r4, #4
   182dc:	eb00005f 	bl	18460 <CMouseBehaviour::~CMouseBehaviour()>
   182e0:	e1a00004 	mov	r0, r4
   182e4:	eb003159 	bl	24850 <CDevice::~CDevice()>
   182e8:	e1a00004 	mov	r0, r4
   182ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   182f0:	00044b58 	.word	0x00044b58

000182f4 <CMouseDevice::~CMouseDevice()>:
   182f4:	e92d4010 	push	{r4, lr}
   182f8:	e1a04000 	mov	r4, r0
   182fc:	ebffffe9 	bl	182a8 <CMouseDevice::~CMouseDevice()>
   18300:	e1a00004 	mov	r0, r4
   18304:	e3a01028 	mov	r1, #40	; 0x28
   18308:	eb004997 	bl	2a96c <operator delete(void*, unsigned int)>
   1830c:	e1a00004 	mov	r0, r4
   18310:	e8bd8010 	pop	{r4, pc}

00018314 <CMouseDevice::CMouseDevice()>:
   18314:	e92d4070 	push	{r4, r5, r6, lr}
   18318:	e1a04000 	mov	r4, r0
   1831c:	e24dd008 	sub	sp, sp, #8
   18320:	eb003158 	bl	24888 <CDevice::CDevice()>
   18324:	e1a00004 	mov	r0, r4
   18328:	e3a06000 	mov	r6, #0
   1832c:	e59f5044 	ldr	r5, [pc, #68]	; 18378 <CMouseDevice::CMouseDevice()+0x64>
   18330:	e2853008 	add	r3, r5, #8
   18334:	e4803004 	str	r3, [r0], #4
   18338:	eb00003e 	bl	18438 <CMouseBehaviour::CMouseBehaviour()>
   1833c:	e59f2038 	ldr	r2, [pc, #56]	; 1837c <CMouseDevice::CMouseDevice()+0x68>
   18340:	e5846020 	str	r6, [r4, #32]
   18344:	e5923000 	ldr	r3, [r2]
   18348:	e5843024 	str	r3, [r4, #36]	; 0x24
   1834c:	e2833001 	add	r3, r3, #1
   18350:	e5823000 	str	r3, [r2]
   18354:	eb003234 	bl	24c2c <CDeviceNameService::Get()>
   18358:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1835c:	e2851020 	add	r1, r5, #32
   18360:	e58d6000 	str	r6, [sp]
   18364:	e1a03004 	mov	r3, r4
   18368:	eb00323c 	bl	24c60 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1836c:	e1a00004 	mov	r0, r4
   18370:	e28dd008 	add	sp, sp, #8
   18374:	e8bd8070 	pop	{r4, r5, r6, pc}
   18378:	00044b58 	.word	0x00044b58
   1837c:	00049a84 	.word	0x00049a84

00018380 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   18380:	e2800004 	add	r0, r0, #4
   18384:	ea000036 	b	18464 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00018388 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18388:	e2800004 	add	r0, r0, #4
   1838c:	ea00007c 	b	18584 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018390 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18390:	e2800004 	add	r0, r0, #4
   18394:	ea000106 	b	187b4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00018398 <CMouseDevice::ShowCursor(bool)>:
   18398:	e2800004 	add	r0, r0, #4
   1839c:	ea000128 	b	18844 <CMouseBehaviour::ShowCursor(bool)>

000183a0 <CMouseDevice::UpdateCursor()>:
   183a0:	e5903020 	ldr	r3, [r0, #32]
   183a4:	e3530000 	cmp	r3, #0
   183a8:	112fff1e 	bxne	lr
   183ac:	e2800004 	add	r0, r0, #4
   183b0:	ea00013e 	b	188b0 <CMouseBehaviour::UpdateCursor()>

000183b4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   183b4:	e5903020 	ldr	r3, [r0, #32]
   183b8:	e92d4010 	push	{r4, lr}
   183bc:	e3530000 	cmp	r3, #0
   183c0:	1a000006 	bne	183e0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   183c4:	e3510000 	cmp	r1, #0
   183c8:	e5801020 	str	r1, [r0, #32]
   183cc:	18bd8010 	popne	{r4, pc}
   183d0:	e3a0204a 	mov	r2, #74	; 0x4a
   183d4:	e59f1014 	ldr	r1, [pc, #20]	; 183f0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   183d8:	e59f0014 	ldr	r0, [pc, #20]	; 183f4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   183dc:	eb002f38 	bl	240c4 <assertion_failed>
   183e0:	e3a02048 	mov	r2, #72	; 0x48
   183e4:	e59f1004 	ldr	r1, [pc, #4]	; 183f0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   183e8:	e59f0008 	ldr	r0, [pc, #8]	; 183f8 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   183ec:	eb002f34 	bl	240c4 <assertion_failed>
   183f0:	00044b80 	.word	0x00044b80
   183f4:	00043160 	.word	0x00043160
   183f8:	00043148 	.word	0x00043148

000183fc <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   183fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18400:	e1a04000 	mov	r4, r0
   18404:	e2800004 	add	r0, r0, #4
   18408:	e1a07003 	mov	r7, r3
   1840c:	e1a05001 	mov	r5, r1
   18410:	e1a06002 	mov	r6, r2
   18414:	eb00006c 	bl	185cc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   18418:	e5943020 	ldr	r3, [r4, #32]
   1841c:	e3530000 	cmp	r3, #0
   18420:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18424:	e1a02007 	mov	r2, r7
   18428:	e1a01006 	mov	r1, r6
   1842c:	e1a00005 	mov	r0, r5
   18430:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18434:	e12fff13 	bx	r3

00018438 <CMouseBehaviour::CMouseBehaviour()>:
   18438:	e3a02000 	mov	r2, #0
   1843c:	e5802000 	str	r2, [r0]
   18440:	e5802004 	str	r2, [r0, #4]
   18444:	e5802008 	str	r2, [r0, #8]
   18448:	e580200c 	str	r2, [r0, #12]
   1844c:	e5c02010 	strb	r2, [r0, #16]
   18450:	e5c02011 	strb	r2, [r0, #17]
   18454:	e5802014 	str	r2, [r0, #20]
   18458:	e5802018 	str	r2, [r0, #24]
   1845c:	e12fff1e 	bx	lr

00018460 <CMouseBehaviour::~CMouseBehaviour()>:
   18460:	e12fff1e 	bx	lr

00018464 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18464:	e92d4010 	push	{r4, lr}
   18468:	e5903000 	ldr	r3, [r0]
   1846c:	e24dd038 	sub	sp, sp, #56	; 0x38
   18470:	e3530000 	cmp	r3, #0
   18474:	1a00002b 	bne	18528 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18478:	e3510000 	cmp	r1, #0
   1847c:	e5801000 	str	r1, [r0]
   18480:	0a00002c 	beq	18538 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18484:	e5904004 	ldr	r4, [r0, #4]
   18488:	e3540000 	cmp	r4, #0
   1848c:	1a00002d 	bne	18548 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18490:	e3520000 	cmp	r2, #0
   18494:	e5802004 	str	r2, [r0, #4]
   18498:	0a00002e 	beq	18558 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   1849c:	e2811001 	add	r1, r1, #1
   184a0:	e2822001 	add	r2, r2, #1
   184a4:	e1a020a2 	lsr	r2, r2, #1
   184a8:	e1a010a1 	lsr	r1, r1, #1
   184ac:	e5801008 	str	r1, [r0, #8]
   184b0:	e580200c 	str	r2, [r0, #12]
   184b4:	e1a01004 	mov	r1, r4
   184b8:	e28d000c 	add	r0, sp, #12
   184bc:	eb002f21 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   184c0:	e3a03018 	mov	r3, #24
   184c4:	e3a0e010 	mov	lr, #16
   184c8:	e59fc098 	ldr	ip, [pc, #152]	; 18568 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   184cc:	e58d3000 	str	r3, [sp]
   184d0:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   184d4:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   184d8:	e3a03024 	mov	r3, #36	; 0x24
   184dc:	e28d2014 	add	r2, sp, #20
   184e0:	e59f1084 	ldr	r1, [pc, #132]	; 1856c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   184e4:	e28d000c 	add	r0, sp, #12
   184e8:	e58d4028 	str	r4, [sp, #40]	; 0x28
   184ec:	e58d4030 	str	r4, [sp, #48]	; 0x30
   184f0:	e58d4034 	str	r4, [sp, #52]	; 0x34
   184f4:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   184f8:	e58de020 	str	lr, [sp, #32]
   184fc:	e58de024 	str	lr, [sp, #36]	; 0x24
   18500:	eb002f1c 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18504:	e2504000 	subs	r4, r0, #0
   18508:	159d4020 	ldrne	r4, [sp, #32]
   1850c:	e28d000c 	add	r0, sp, #12
   18510:	116f4f14 	clzne	r4, r4
   18514:	11a042a4 	lsrne	r4, r4, #5
   18518:	eb002f11 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   1851c:	e1a00004 	mov	r0, r4
   18520:	e28dd038 	add	sp, sp, #56	; 0x38
   18524:	e8bd8010 	pop	{r4, pc}
   18528:	e3a0204c 	mov	r2, #76	; 0x4c
   1852c:	e59f103c 	ldr	r1, [pc, #60]	; 18570 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18530:	e59f003c 	ldr	r0, [pc, #60]	; 18574 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18534:	eb002ee2 	bl	240c4 <assertion_failed>
   18538:	e3a0204e 	mov	r2, #78	; 0x4e
   1853c:	e59f102c 	ldr	r1, [pc, #44]	; 18570 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18540:	e59f0030 	ldr	r0, [pc, #48]	; 18578 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18544:	eb002ede 	bl	240c4 <assertion_failed>
   18548:	e3a02050 	mov	r2, #80	; 0x50
   1854c:	e59f101c 	ldr	r1, [pc, #28]	; 18570 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18550:	e59f0024 	ldr	r0, [pc, #36]	; 1857c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18554:	eb002eda 	bl	240c4 <assertion_failed>
   18558:	e3a02052 	mov	r2, #82	; 0x52
   1855c:	e59f100c 	ldr	r1, [pc, #12]	; 18570 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18560:	e59f0018 	ldr	r0, [pc, #24]	; 18580 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18564:	eb002ed6 	bl	240c4 <assertion_failed>
   18568:	00044b8c 	.word	0x00044b8c
   1856c:	00008010 	.word	0x00008010
   18570:	00044f8c 	.word	0x00044f8c
   18574:	00044fa0 	.word	0x00044fa0
   18578:	00044fb4 	.word	0x00044fb4
   1857c:	00044fc8 	.word	0x00044fc8
   18580:	00044fe0 	.word	0x00044fe0

00018584 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18584:	e5903018 	ldr	r3, [r0, #24]
   18588:	e92d4010 	push	{r4, lr}
   1858c:	e3530000 	cmp	r3, #0
   18590:	1a000006 	bne	185b0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18594:	e3510000 	cmp	r1, #0
   18598:	e5801018 	str	r1, [r0, #24]
   1859c:	18bd8010 	popne	{r4, pc}
   185a0:	e3a02070 	mov	r2, #112	; 0x70
   185a4:	e59f1014 	ldr	r1, [pc, #20]	; 185c0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   185a8:	e59f0014 	ldr	r0, [pc, #20]	; 185c4 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   185ac:	eb002ec4 	bl	240c4 <assertion_failed>
   185b0:	e3a0206e 	mov	r2, #110	; 0x6e
   185b4:	e59f1004 	ldr	r1, [pc, #4]	; 185c0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   185b8:	e59f0008 	ldr	r0, [pc, #8]	; 185c8 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   185bc:	eb002ec0 	bl	240c4 <assertion_failed>
   185c0:	00044f8c 	.word	0x00044f8c
   185c4:	00042f38 	.word	0x00042f38
   185c8:	00044ff4 	.word	0x00044ff4

000185cc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   185cc:	e590c000 	ldr	ip, [r0]
   185d0:	e35c0000 	cmp	ip, #0
   185d4:	012fff1e 	bxeq	lr
   185d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185dc:	e590e004 	ldr	lr, [r0, #4]
   185e0:	e35e0000 	cmp	lr, #0
   185e4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   185e8:	e1a04000 	mov	r4, r0
   185ec:	e1a05001 	mov	r5, r1
   185f0:	e0822182 	add	r2, r2, r2, lsl #3
   185f4:	e59f113c 	ldr	r1, [pc, #316]	; 18738 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   185f8:	e1a02082 	lsl	r2, r2, #1
   185fc:	e0833183 	add	r3, r3, r3, lsl #3
   18600:	e0c60291 	smull	r0, r6, r1, r2
   18604:	e1a03083 	lsl	r3, r3, #1
   18608:	e0c10391 	smull	r0, r1, r1, r3
   1860c:	e1a02fc2 	asr	r2, r2, #31
   18610:	e5940008 	ldr	r0, [r4, #8]
   18614:	e0622146 	rsb	r2, r2, r6, asr #2
   18618:	e1a03fc3 	asr	r3, r3, #31
   1861c:	e0633141 	rsb	r3, r3, r1, asr #2
   18620:	e0822000 	add	r2, r2, r0
   18624:	e594100c 	ldr	r1, [r4, #12]
   18628:	e15c0002 	cmp	ip, r2
   1862c:	e0813003 	add	r3, r1, r3
   18630:	9a00002c 	bls	186e8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   18634:	e15e0003 	cmp	lr, r3
   18638:	e584300c 	str	r3, [r4, #12]
   1863c:	e5842008 	str	r2, [r4, #8]
   18640:	8a000037 	bhi	18724 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18644:	e1500002 	cmp	r0, r2
   18648:	e584100c 	str	r1, [r4, #12]
   1864c:	0a000008 	beq	18674 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18650:	e3a03001 	mov	r3, #1
   18654:	e5946018 	ldr	r6, [r4, #24]
   18658:	e5c43010 	strb	r3, [r4, #16]
   1865c:	e3560000 	cmp	r6, #0
   18660:	0a000027 	beq	18704 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18664:	e594300c 	ldr	r3, [r4, #12]
   18668:	e1a01005 	mov	r1, r5
   1866c:	e3a00000 	mov	r0, #0
   18670:	e12fff36 	blx	r6
   18674:	e5943014 	ldr	r3, [r4, #20]
   18678:	e1550003 	cmp	r5, r3
   1867c:	0a000020 	beq	18704 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18680:	e5942018 	ldr	r2, [r4, #24]
   18684:	e3520000 	cmp	r2, #0
   18688:	0a00001d 	beq	18704 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   1868c:	e3a06000 	mov	r6, #0
   18690:	e3a07001 	mov	r7, #1
   18694:	e1a01617 	lsl	r1, r7, r6
   18698:	e1110003 	tst	r1, r3
   1869c:	e3a08002 	mov	r8, #2
   186a0:	0a000008 	beq	186c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   186a4:	e1150001 	tst	r5, r1
   186a8:	0a000017 	beq	1870c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   186ac:	e2866001 	add	r6, r6, #1
   186b0:	e3560003 	cmp	r6, #3
   186b4:	0a000012 	beq	18704 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   186b8:	e5943014 	ldr	r3, [r4, #20]
   186bc:	e1a01617 	lsl	r1, r7, r6
   186c0:	e1110003 	tst	r1, r3
   186c4:	1afffff6 	bne	186a4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   186c8:	e1150001 	tst	r5, r1
   186cc:	0afffff6 	beq	186ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   186d0:	e5949018 	ldr	r9, [r4, #24]
   186d4:	e594300c 	ldr	r3, [r4, #12]
   186d8:	e5942008 	ldr	r2, [r4, #8]
   186dc:	e1a00007 	mov	r0, r7
   186e0:	e12fff39 	blx	r9
   186e4:	eafffff0 	b	186ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   186e8:	e15e0003 	cmp	lr, r3
   186ec:	e584300c 	str	r3, [r4, #12]
   186f0:	9a00000e 	bls	18730 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   186f4:	e1510003 	cmp	r1, r3
   186f8:	11a02000 	movne	r2, r0
   186fc:	1affffd3 	bne	18650 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   18700:	eaffffdb 	b	18674 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18704:	e5845014 	str	r5, [r4, #20]
   18708:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1870c:	e5949018 	ldr	r9, [r4, #24]
   18710:	e594300c 	ldr	r3, [r4, #12]
   18714:	e5942008 	ldr	r2, [r4, #8]
   18718:	e1a00008 	mov	r0, r8
   1871c:	e12fff39 	blx	r9
   18720:	eaffffe1 	b	186ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18724:	e1500002 	cmp	r0, r2
   18728:	1affffc8 	bne	18650 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   1872c:	eafffff0 	b	186f4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18730:	e584100c 	str	r1, [r4, #12]
   18734:	eaffffce 	b	18674 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18738:	66666667 	.word	0x66666667

0001873c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   1873c:	e92d4070 	push	{r4, r5, r6, lr}
   18740:	e24dd030 	sub	sp, sp, #48	; 0x30
   18744:	e1a05000 	mov	r5, r0
   18748:	e1a04001 	mov	r4, r1
   1874c:	e28d000c 	add	r0, sp, #12
   18750:	e3a01000 	mov	r1, #0
   18754:	e1a06002 	mov	r6, r2
   18758:	eb002e7a 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1875c:	e3a03010 	mov	r3, #16
   18760:	e3a0c001 	mov	ip, #1
   18764:	e58d3000 	str	r3, [sp]
   18768:	e28d2014 	add	r2, sp, #20
   1876c:	e3a0301c 	mov	r3, #28
   18770:	e59f1038 	ldr	r1, [pc, #56]	; 187b0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18774:	e28d000c 	add	r0, sp, #12
   18778:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1877c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18780:	e58d6020 	str	r6, [sp, #32]
   18784:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18788:	eb002e7a 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1878c:	e2504000 	subs	r4, r0, #0
   18790:	159d4020 	ldrne	r4, [sp, #32]
   18794:	e28d000c 	add	r0, sp, #12
   18798:	116f4f14 	clzne	r4, r4
   1879c:	11a042a4 	lsrne	r4, r4, #5
   187a0:	eb002e6f 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   187a4:	e1a00004 	mov	r0, r4
   187a8:	e28dd030 	add	sp, sp, #48	; 0x30
   187ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   187b0:	00008011 	.word	0x00008011

000187b4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   187b4:	e5903000 	ldr	r3, [r0]
   187b8:	e92d4010 	push	{r4, lr}
   187bc:	e3530000 	cmp	r3, #0
   187c0:	0a000014 	beq	18818 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   187c4:	e590c004 	ldr	ip, [r0, #4]
   187c8:	e35c0000 	cmp	ip, #0
   187cc:	0a000015 	beq	18828 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   187d0:	e1530001 	cmp	r3, r1
   187d4:	815c0002 	cmphi	ip, r2
   187d8:	e1a0e001 	mov	lr, r1
   187dc:	9a000006 	bls	187fc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x48>
   187e0:	e5d03011 	ldrb	r3, [r0, #17]
   187e4:	e5801008 	str	r1, [r0, #8]
   187e8:	e3530000 	cmp	r3, #0
   187ec:	e580200c 	str	r2, [r0, #12]
   187f0:	1a000003 	bne	18804 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   187f4:	e3a00001 	mov	r0, #1
   187f8:	e8bd8010 	pop	{r4, pc}
   187fc:	e3a00000 	mov	r0, #0
   18800:	e8bd8010 	pop	{r4, pc}
   18804:	e1a01002 	mov	r1, r2
   18808:	e1a0000e 	mov	r0, lr
   1880c:	e8bd4010 	pop	{r4, lr}
   18810:	e3a02001 	mov	r2, #1
   18814:	eaffffc8 	b	1873c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18818:	e3a02075 	mov	r2, #117	; 0x75
   1881c:	e59f1014 	ldr	r1, [pc, #20]	; 18838 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18820:	e59f0014 	ldr	r0, [pc, #20]	; 1883c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18824:	eb002e26 	bl	240c4 <assertion_failed>
   18828:	e3a02076 	mov	r2, #118	; 0x76
   1882c:	e59f1004 	ldr	r1, [pc, #4]	; 18838 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18830:	e59f0008 	ldr	r0, [pc, #8]	; 18840 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18834:	eb002e22 	bl	240c4 <assertion_failed>
   18838:	00044f8c 	.word	0x00044f8c
   1883c:	00044fb4 	.word	0x00044fb4
   18840:	00044fe0 	.word	0x00044fe0

00018844 <CMouseBehaviour::ShowCursor(bool)>:
   18844:	e1a02001 	mov	r2, r1
   18848:	e5903008 	ldr	r3, [r0, #8]
   1884c:	e5901000 	ldr	r1, [r0]
   18850:	e92d4010 	push	{r4, lr}
   18854:	e1530001 	cmp	r3, r1
   18858:	e5d04011 	ldrb	r4, [r0, #17]
   1885c:	e5c02011 	strb	r2, [r0, #17]
   18860:	2a000007 	bcs	18884 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18864:	e590100c 	ldr	r1, [r0, #12]
   18868:	e5900004 	ldr	r0, [r0, #4]
   1886c:	e1510000 	cmp	r1, r0
   18870:	2a000007 	bcs	18894 <CMouseBehaviour::ShowCursor(bool)+0x50>
   18874:	e1a00003 	mov	r0, r3
   18878:	ebffffaf 	bl	1873c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1887c:	e1a00004 	mov	r0, r4
   18880:	e8bd8010 	pop	{r4, pc}
   18884:	e3a0208d 	mov	r2, #141	; 0x8d
   18888:	e59f1014 	ldr	r1, [pc, #20]	; 188a4 <CMouseBehaviour::ShowCursor(bool)+0x60>
   1888c:	e59f0014 	ldr	r0, [pc, #20]	; 188a8 <CMouseBehaviour::ShowCursor(bool)+0x64>
   18890:	eb002e0b 	bl	240c4 <assertion_failed>
   18894:	e3a0208e 	mov	r2, #142	; 0x8e
   18898:	e59f1004 	ldr	r1, [pc, #4]	; 188a4 <CMouseBehaviour::ShowCursor(bool)+0x60>
   1889c:	e59f0008 	ldr	r0, [pc, #8]	; 188ac <CMouseBehaviour::ShowCursor(bool)+0x68>
   188a0:	eb002e07 	bl	240c4 <assertion_failed>
   188a4:	00044f8c 	.word	0x00044f8c
   188a8:	0004500c 	.word	0x0004500c
   188ac:	00045028 	.word	0x00045028

000188b0 <CMouseBehaviour::UpdateCursor()>:
   188b0:	e5d03011 	ldrb	r3, [r0, #17]
   188b4:	e3530000 	cmp	r3, #0
   188b8:	012fff1e 	bxeq	lr
   188bc:	e5d03010 	ldrb	r3, [r0, #16]
   188c0:	e3530000 	cmp	r3, #0
   188c4:	012fff1e 	bxeq	lr
   188c8:	e3a03000 	mov	r3, #0
   188cc:	e590100c 	ldr	r1, [r0, #12]
   188d0:	e5c03010 	strb	r3, [r0, #16]
   188d4:	e3a02001 	mov	r2, #1
   188d8:	e5900008 	ldr	r0, [r0, #8]
   188dc:	eaffff96 	b	1873c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

000188e0 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   188e0:	e92d4010 	push	{r4, lr}
   188e4:	e1a04000 	mov	r4, r0
   188e8:	e4801004 	str	r1, [r0], #4
   188ec:	e1a01002 	mov	r1, r2
   188f0:	eb003ad1 	bl	2743c <CString::CString(char const*)>
   188f4:	e3a03000 	mov	r3, #0
   188f8:	e1a00004 	mov	r0, r4
   188fc:	e5843014 	str	r3, [r4, #20]
   18900:	e5843018 	str	r3, [r4, #24]
   18904:	e584301c 	str	r3, [r4, #28]
   18908:	e5843020 	str	r3, [r4, #32]
   1890c:	e8bd8010 	pop	{r4, pc}

00018910 <CPartitionManager::~CPartitionManager()>:
   18910:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18914:	e3a05000 	mov	r5, #0
   18918:	e1a06000 	mov	r6, r0
   1891c:	e1a0b005 	mov	fp, r5
   18920:	e3a0a001 	mov	sl, #1
   18924:	e24dd014 	sub	sp, sp, #20
   18928:	e2808004 	add	r8, r0, #4
   1892c:	e2804014 	add	r4, r0, #20
   18930:	e2807024 	add	r7, r0, #36	; 0x24
   18934:	e5943000 	ldr	r3, [r4]
   18938:	e3530000 	cmp	r3, #0
   1893c:	0a00001a 	beq	189ac <CPartitionManager::~CPartitionManager()+0x9c>
   18940:	e1a0000d 	mov	r0, sp
   18944:	eb003ab6 	bl	27424 <CString::CString()>
   18948:	e1a00008 	mov	r0, r8
   1894c:	eb003aca 	bl	2747c <CString::operator char const*() const>
   18950:	e2855001 	add	r5, r5, #1
   18954:	e1a02000 	mov	r2, r0
   18958:	e1a03005 	mov	r3, r5
   1895c:	e59f1070 	ldr	r1, [pc, #112]	; 189d4 <CPartitionManager::~CPartitionManager()+0xc4>
   18960:	e1a0000d 	mov	r0, sp
   18964:	eb003ff1 	bl	28930 <CString::Format(char const*, ...)>
   18968:	eb0030af 	bl	24c2c <CDeviceNameService::Get()>
   1896c:	e1a09000 	mov	r9, r0
   18970:	e1a0000d 	mov	r0, sp
   18974:	eb003ac0 	bl	2747c <CString::operator char const*() const>
   18978:	e1a0200a 	mov	r2, sl
   1897c:	e1a01000 	mov	r1, r0
   18980:	e1a00009 	mov	r0, r9
   18984:	eb00301b 	bl	249f8 <CDeviceNameService::RemoveDevice(char const*, bool)>
   18988:	e5940000 	ldr	r0, [r4]
   1898c:	e3500000 	cmp	r0, #0
   18990:	0a000002 	beq	189a0 <CPartitionManager::~CPartitionManager()+0x90>
   18994:	e5903000 	ldr	r3, [r0]
   18998:	e5933004 	ldr	r3, [r3, #4]
   1899c:	e12fff33 	blx	r3
   189a0:	e584b000 	str	fp, [r4]
   189a4:	e1a0000d 	mov	r0, sp
   189a8:	eb003a6a 	bl	27358 <CString::~CString()>
   189ac:	e2844004 	add	r4, r4, #4
   189b0:	e1540007 	cmp	r4, r7
   189b4:	1affffde 	bne	18934 <CPartitionManager::~CPartitionManager()+0x24>
   189b8:	e3a03000 	mov	r3, #0
   189bc:	e1a00008 	mov	r0, r8
   189c0:	e5863000 	str	r3, [r6]
   189c4:	eb003a63 	bl	27358 <CString::~CString()>
   189c8:	e1a00006 	mov	r0, r6
   189cc:	e28dd014 	add	sp, sp, #20
   189d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189d4:	0004504c 	.word	0x0004504c

000189d8 <CPartitionManager::Initialize()>:
   189d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189dc:	e1a06000 	mov	r6, r0
   189e0:	e5900000 	ldr	r0, [r0]
   189e4:	e3a03000 	mov	r3, #0
   189e8:	e5901000 	ldr	r1, [r0]
   189ec:	e24ddf89 	sub	sp, sp, #548	; 0x224
   189f0:	e3a02000 	mov	r2, #0
   189f4:	e5911010 	ldr	r1, [r1, #16]
   189f8:	e12fff31 	blx	r1
   189fc:	e1903001 	orrs	r3, r0, r1
   18a00:	0a000007 	beq	18a24 <CPartitionManager::Initialize()+0x4c>
   18a04:	eb0036a1 	bl	26490 <CLogger::Get()>
   18a08:	e59f31e0 	ldr	r3, [pc, #480]	; 18bf0 <CPartitionManager::Initialize()+0x218>
   18a0c:	e3a02001 	mov	r2, #1
   18a10:	e59f11dc 	ldr	r1, [pc, #476]	; 18bf4 <CPartitionManager::Initialize()+0x21c>
   18a14:	eb0035da 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18a18:	e3a00000 	mov	r0, #0
   18a1c:	e28ddf89 	add	sp, sp, #548	; 0x224
   18a20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a24:	e5960000 	ldr	r0, [r6]
   18a28:	e28d1020 	add	r1, sp, #32
   18a2c:	e5903000 	ldr	r3, [r0]
   18a30:	e3a02c02 	mov	r2, #512	; 0x200
   18a34:	e5933008 	ldr	r3, [r3, #8]
   18a38:	e12fff33 	blx	r3
   18a3c:	e3500c02 	cmp	r0, #512	; 0x200
   18a40:	1affffef 	bne	18a04 <CPartitionManager::Initialize()+0x2c>
   18a44:	e28d3f87 	add	r3, sp, #540	; 0x21c
   18a48:	e2833002 	add	r3, r3, #2
   18a4c:	e1d320b0 	ldrh	r2, [r3]
   18a50:	e59f31a0 	ldr	r3, [pc, #416]	; 18bf8 <CPartitionManager::Initialize()+0x220>
   18a54:	e1520003 	cmp	r2, r3
   18a58:	1a00002e 	bne	18b18 <CPartitionManager::Initialize()+0x140>
   18a5c:	e3a04000 	mov	r4, #0
   18a60:	e3a0a020 	mov	sl, #32
   18a64:	e1a09004 	mov	r9, r4
   18a68:	e1a08004 	mov	r8, r4
   18a6c:	e59f7188 	ldr	r7, [pc, #392]	; 18bfc <CPartitionManager::Initialize()+0x224>
   18a70:	e2865014 	add	r5, r6, #20
   18a74:	e286b004 	add	fp, r6, #4
   18a78:	e28d3020 	add	r3, sp, #32
   18a7c:	e0833204 	add	r3, r3, r4, lsl #4
   18a80:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   18a84:	e352000f 	cmp	r2, #15
   18a88:	91e03237 	mvnls	r3, r7, lsr r2
   18a8c:	81a03008 	movhi	r3, r8
   18a90:	92033001 	andls	r3, r3, #1
   18a94:	92233001 	eorls	r3, r3, #1
   18a98:	e35200ef 	cmp	r2, #239	; 0xef
   18a9c:	03833001 	orreq	r3, r3, #1
   18aa0:	e3530000 	cmp	r3, #0
   18aa4:	1a00000c 	bne	18adc <CPartitionManager::Initialize()+0x104>
   18aa8:	e28d2e22 	add	r2, sp, #544	; 0x220
   18aac:	e284301c 	add	r3, r4, #28
   18ab0:	e0823203 	add	r3, r2, r3, lsl #4
   18ab4:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   18ab8:	e15120b2 	ldrh	r2, [r1, #-2]
   18abc:	e1d100b0 	ldrh	r0, [r1]
   18ac0:	e1922800 	orrs	r2, r2, r0, lsl #16
   18ac4:	0a000004 	beq	18adc <CPartitionManager::Initialize()+0x104>
   18ac8:	e2433f7d 	sub	r3, r3, #500	; 0x1f4
   18acc:	e15320b2 	ldrh	r2, [r3, #-2]
   18ad0:	e1d300b0 	ldrh	r0, [r3]
   18ad4:	e1922800 	orrs	r2, r2, r0, lsl #16
   18ad8:	1a000016 	bne	18b38 <CPartitionManager::Initialize()+0x160>
   18adc:	e2844001 	add	r4, r4, #1
   18ae0:	e3540004 	cmp	r4, #4
   18ae4:	e2855004 	add	r5, r5, #4
   18ae8:	1affffe2 	bne	18a78 <CPartitionManager::Initialize()+0xa0>
   18aec:	e3590000 	cmp	r9, #0
   18af0:	13a00001 	movne	r0, #1
   18af4:	1affffc8 	bne	18a1c <CPartitionManager::Initialize()+0x44>
   18af8:	eb003664 	bl	26490 <CLogger::Get()>
   18afc:	e59f30fc 	ldr	r3, [pc, #252]	; 18c00 <CPartitionManager::Initialize()+0x228>
   18b00:	e3a02002 	mov	r2, #2
   18b04:	e59f10e8 	ldr	r1, [pc, #232]	; 18bf4 <CPartitionManager::Initialize()+0x21c>
   18b08:	eb00359d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18b0c:	e3a00001 	mov	r0, #1
   18b10:	e28ddf89 	add	sp, sp, #548	; 0x224
   18b14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b18:	eb00365c 	bl	26490 <CLogger::Get()>
   18b1c:	e59f30e0 	ldr	r3, [pc, #224]	; 18c04 <CPartitionManager::Initialize()+0x22c>
   18b20:	e3a02002 	mov	r2, #2
   18b24:	e59f10c8 	ldr	r1, [pc, #200]	; 18bf4 <CPartitionManager::Initialize()+0x21c>
   18b28:	eb003595 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18b2c:	e3a00001 	mov	r0, #1
   18b30:	e28ddf89 	add	sp, sp, #548	; 0x224
   18b34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b38:	e5952000 	ldr	r2, [r5]
   18b3c:	e3520000 	cmp	r2, #0
   18b40:	1a000026 	bne	18be0 <CPartitionManager::Initialize()+0x208>
   18b44:	e1a0000a 	mov	r0, sl
   18b48:	e58d300c 	str	r3, [sp, #12]
   18b4c:	e58d1008 	str	r1, [sp, #8]
   18b50:	eb004777 	bl	2a934 <operator new(unsigned int)>
   18b54:	e59d300c 	ldr	r3, [sp, #12]
   18b58:	e59d1008 	ldr	r1, [sp, #8]
   18b5c:	e58d0004 	str	r0, [sp, #4]
   18b60:	e153c0b2 	ldrh	ip, [r3, #-2]
   18b64:	e15120b2 	ldrh	r2, [r1, #-2]
   18b68:	e1d330b0 	ldrh	r3, [r3]
   18b6c:	e1d110b0 	ldrh	r1, [r1]
   18b70:	e18c3803 	orr	r3, ip, r3, lsl #16
   18b74:	e1822801 	orr	r2, r2, r1, lsl #16
   18b78:	e5961000 	ldr	r1, [r6]
   18b7c:	eb0000b8 	bl	18e64 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   18b80:	e59d3004 	ldr	r3, [sp, #4]
   18b84:	e28d0010 	add	r0, sp, #16
   18b88:	e5853000 	str	r3, [r5]
   18b8c:	eb003a24 	bl	27424 <CString::CString()>
   18b90:	e1a0000b 	mov	r0, fp
   18b94:	eb003a38 	bl	2747c <CString::operator char const*() const>
   18b98:	e2899001 	add	r9, r9, #1
   18b9c:	e1a02000 	mov	r2, r0
   18ba0:	e1a03009 	mov	r3, r9
   18ba4:	e59f105c 	ldr	r1, [pc, #92]	; 18c08 <CPartitionManager::Initialize()+0x230>
   18ba8:	e28d0010 	add	r0, sp, #16
   18bac:	eb003f5f 	bl	28930 <CString::Format(char const*, ...)>
   18bb0:	eb00301d 	bl	24c2c <CDeviceNameService::Get()>
   18bb4:	e58d0004 	str	r0, [sp, #4]
   18bb8:	e28d0010 	add	r0, sp, #16
   18bbc:	eb003a2e 	bl	2747c <CString::operator char const*() const>
   18bc0:	e3a03001 	mov	r3, #1
   18bc4:	e1a01000 	mov	r1, r0
   18bc8:	e5952000 	ldr	r2, [r5]
   18bcc:	e59d0004 	ldr	r0, [sp, #4]
   18bd0:	eb002f5b 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18bd4:	e28d0010 	add	r0, sp, #16
   18bd8:	eb0039de 	bl	27358 <CString::~CString()>
   18bdc:	eaffffbe 	b	18adc <CPartitionManager::Initialize()+0x104>
   18be0:	e3a02078 	mov	r2, #120	; 0x78
   18be4:	e59f1020 	ldr	r1, [pc, #32]	; 18c0c <CPartitionManager::Initialize()+0x234>
   18be8:	e59f0020 	ldr	r0, [pc, #32]	; 18c10 <CPartitionManager::Initialize()+0x238>
   18bec:	eb002d34 	bl	240c4 <assertion_failed>
   18bf0:	000450bc 	.word	0x000450bc
   18bf4:	00045044 	.word	0x00045044
   18bf8:	0000aa55 	.word	0x0000aa55
   18bfc:	00008021 	.word	0x00008021
   18c00:	00045098 	.word	0x00045098
   18c04:	00045054 	.word	0x00045054
   18c08:	0004504c 	.word	0x0004504c
   18c0c:	00045068 	.word	0x00045068
   18c10:	00045080 	.word	0x00045080

00018c14 <CPartition::~CPartition()>:
   18c14:	e3a02000 	mov	r2, #0
   18c18:	e92d4010 	push	{r4, lr}
   18c1c:	e1a04000 	mov	r4, r0
   18c20:	e59f3010 	ldr	r3, [pc, #16]	; 18c38 <CPartition::~CPartition()+0x24>
   18c24:	e5802004 	str	r2, [r0, #4]
   18c28:	e5803000 	str	r3, [r0]
   18c2c:	eb002f07 	bl	24850 <CDevice::~CDevice()>
   18c30:	e1a00004 	mov	r0, r4
   18c34:	e8bd8010 	pop	{r4, pc}
   18c38:	000450d4 	.word	0x000450d4

00018c3c <CPartition::~CPartition()>:
   18c3c:	e3a02000 	mov	r2, #0
   18c40:	e92d4010 	push	{r4, lr}
   18c44:	e1a04000 	mov	r4, r0
   18c48:	e59f301c 	ldr	r3, [pc, #28]	; 18c6c <CPartition::~CPartition()+0x30>
   18c4c:	e5802004 	str	r2, [r0, #4]
   18c50:	e5803000 	str	r3, [r0]
   18c54:	eb002efd 	bl	24850 <CDevice::~CDevice()>
   18c58:	e1a00004 	mov	r0, r4
   18c5c:	e3a01020 	mov	r1, #32
   18c60:	eb004741 	bl	2a96c <operator delete(void*, unsigned int)>
   18c64:	e1a00004 	mov	r0, r4
   18c68:	e8bd8010 	pop	{r4, pc}
   18c6c:	000450d4 	.word	0x000450d4

00018c70 <CPartition::Read(void*, unsigned int)>:
   18c70:	e5d03018 	ldrb	r3, [r0, #24]
   18c74:	e3530000 	cmp	r3, #0
   18c78:	1a00001a 	bne	18ce8 <CPartition::Read(void*, unsigned int)+0x78>
   18c7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c80:	e1c061d0 	ldrd	r6, [r0, #16]
   18c84:	e3a05000 	mov	r5, #0
   18c88:	e3a09000 	mov	r9, #0
   18c8c:	e59f4064 	ldr	r4, [pc, #100]	; 18cf8 <CPartition::Read(void*, unsigned int)+0x88>
   18c90:	e590800c 	ldr	r8, [r0, #12]
   18c94:	e0944002 	adds	r4, r4, r2
   18c98:	e2a55000 	adc	r5, r5, #0
   18c9c:	e0944006 	adds	r4, r4, r6
   18ca0:	e0a55007 	adc	r5, r5, r7
   18ca4:	e1a064a4 	lsr	r6, r4, #9
   18ca8:	e1a074a5 	lsr	r7, r5, #9
   18cac:	e1866b85 	orr	r6, r6, r5, lsl #23
   18cb0:	e1570009 	cmp	r7, r9
   18cb4:	01560008 	cmpeq	r6, r8
   18cb8:	8a00000c 	bhi	18cf0 <CPartition::Read(void*, unsigned int)+0x80>
   18cbc:	e5900004 	ldr	r0, [r0, #4]
   18cc0:	e3500000 	cmp	r0, #0
   18cc4:	0a000003 	beq	18cd8 <CPartition::Read(void*, unsigned int)+0x68>
   18cc8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ccc:	e5903000 	ldr	r3, [r0]
   18cd0:	e5933008 	ldr	r3, [r3, #8]
   18cd4:	e12fff13 	bx	r3
   18cd8:	e3a02035 	mov	r2, #53	; 0x35
   18cdc:	e59f1018 	ldr	r1, [pc, #24]	; 18cfc <CPartition::Read(void*, unsigned int)+0x8c>
   18ce0:	e59f0018 	ldr	r0, [pc, #24]	; 18d00 <CPartition::Read(void*, unsigned int)+0x90>
   18ce4:	eb002cf6 	bl	240c4 <assertion_failed>
   18ce8:	e3e00000 	mvn	r0, #0
   18cec:	e12fff1e 	bx	lr
   18cf0:	e3e00000 	mvn	r0, #0
   18cf4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cf8:	000001ff 	.word	0x000001ff
   18cfc:	000450ec 	.word	0x000450ec
   18d00:	00041290 	.word	0x00041290

00018d04 <CPartition::Write(void const*, unsigned int)>:
   18d04:	e5d03018 	ldrb	r3, [r0, #24]
   18d08:	e3530000 	cmp	r3, #0
   18d0c:	1a00001a 	bne	18d7c <CPartition::Write(void const*, unsigned int)+0x78>
   18d10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d14:	e1c061d0 	ldrd	r6, [r0, #16]
   18d18:	e3a05000 	mov	r5, #0
   18d1c:	e3a09000 	mov	r9, #0
   18d20:	e59f4064 	ldr	r4, [pc, #100]	; 18d8c <CPartition::Write(void const*, unsigned int)+0x88>
   18d24:	e590800c 	ldr	r8, [r0, #12]
   18d28:	e0944002 	adds	r4, r4, r2
   18d2c:	e2a55000 	adc	r5, r5, #0
   18d30:	e0944006 	adds	r4, r4, r6
   18d34:	e0a55007 	adc	r5, r5, r7
   18d38:	e1a064a4 	lsr	r6, r4, #9
   18d3c:	e1a074a5 	lsr	r7, r5, #9
   18d40:	e1866b85 	orr	r6, r6, r5, lsl #23
   18d44:	e1570009 	cmp	r7, r9
   18d48:	01560008 	cmpeq	r6, r8
   18d4c:	8a00000c 	bhi	18d84 <CPartition::Write(void const*, unsigned int)+0x80>
   18d50:	e5900004 	ldr	r0, [r0, #4]
   18d54:	e3500000 	cmp	r0, #0
   18d58:	0a000003 	beq	18d6c <CPartition::Write(void const*, unsigned int)+0x68>
   18d5c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d60:	e5903000 	ldr	r3, [r0]
   18d64:	e593300c 	ldr	r3, [r3, #12]
   18d68:	e12fff13 	bx	r3
   18d6c:	e3a02047 	mov	r2, #71	; 0x47
   18d70:	e59f1018 	ldr	r1, [pc, #24]	; 18d90 <CPartition::Write(void const*, unsigned int)+0x8c>
   18d74:	e59f0018 	ldr	r0, [pc, #24]	; 18d94 <CPartition::Write(void const*, unsigned int)+0x90>
   18d78:	eb002cd1 	bl	240c4 <assertion_failed>
   18d7c:	e3e00000 	mvn	r0, #0
   18d80:	e12fff1e 	bx	lr
   18d84:	e3e00000 	mvn	r0, #0
   18d88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d8c:	000001ff 	.word	0x000001ff
   18d90:	000450ec 	.word	0x000450ec
   18d94:	00041290 	.word	0x00041290

00018d98 <CPartition::Seek(unsigned long long)>:
   18d98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d9c:	e3a05000 	mov	r5, #0
   18da0:	e3a01001 	mov	r1, #1
   18da4:	e59f40ac 	ldr	r4, [pc, #172]	; 18e58 <CPartition::Seek(unsigned long long)+0xc0>
   18da8:	e0055003 	and	r5, r5, r3
   18dac:	e0044002 	and	r4, r4, r2
   18db0:	e194c005 	orrs	ip, r4, r5
   18db4:	e5c01018 	strb	r1, [r0, #24]
   18db8:	0a000002 	beq	18dc8 <CPartition::Seek(unsigned long long)+0x30>
   18dbc:	e3e00000 	mvn	r0, #0
   18dc0:	e1a01000 	mov	r1, r0
   18dc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18dc8:	e3a07000 	mov	r7, #0
   18dcc:	e590600c 	ldr	r6, [r0, #12]
   18dd0:	e1a044a2 	lsr	r4, r2, #9
   18dd4:	e1a054a3 	lsr	r5, r3, #9
   18dd8:	e1844b83 	orr	r4, r4, r3, lsl #23
   18ddc:	e1550007 	cmp	r5, r7
   18de0:	01540006 	cmpeq	r4, r6
   18de4:	2afffff4 	bcs	18dbc <CPartition::Seek(unsigned long long)+0x24>
   18de8:	e1a04000 	mov	r4, r0
   18dec:	e9900003 	ldmib	r0, {r0, r1}
   18df0:	e1a08481 	lsl	r8, r1, #9
   18df4:	e0988002 	adds	r8, r8, r2
   18df8:	e1a09ba1 	lsr	r9, r1, #23
   18dfc:	e0a99003 	adc	r9, r9, r3
   18e00:	e3500000 	cmp	r0, #0
   18e04:	e1a06002 	mov	r6, r2
   18e08:	e1a07003 	mov	r7, r3
   18e0c:	0a00000d 	beq	18e48 <CPartition::Seek(unsigned long long)+0xb0>
   18e10:	e5903000 	ldr	r3, [r0]
   18e14:	e1a02008 	mov	r2, r8
   18e18:	e5931010 	ldr	r1, [r3, #16]
   18e1c:	e1a03009 	mov	r3, r9
   18e20:	e12fff31 	blx	r1
   18e24:	e1590001 	cmp	r9, r1
   18e28:	01580000 	cmpeq	r8, r0
   18e2c:	1affffe2 	bne	18dbc <CPartition::Seek(unsigned long long)+0x24>
   18e30:	e3a03000 	mov	r3, #0
   18e34:	e1a00006 	mov	r0, r6
   18e38:	e1a01007 	mov	r1, r7
   18e3c:	e1c461f0 	strd	r6, [r4, #16]
   18e40:	e5c43018 	strb	r3, [r4, #24]
   18e44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e48:	e3a02059 	mov	r2, #89	; 0x59
   18e4c:	e59f1008 	ldr	r1, [pc, #8]	; 18e5c <CPartition::Seek(unsigned long long)+0xc4>
   18e50:	e59f0008 	ldr	r0, [pc, #8]	; 18e60 <CPartition::Seek(unsigned long long)+0xc8>
   18e54:	eb002c9a 	bl	240c4 <assertion_failed>
   18e58:	000001ff 	.word	0x000001ff
   18e5c:	000450ec 	.word	0x000450ec
   18e60:	00041290 	.word	0x00041290

00018e64 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   18e64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e68:	e1a05001 	mov	r5, r1
   18e6c:	e1a04000 	mov	r4, r0
   18e70:	e1a09002 	mov	r9, r2
   18e74:	e1a08003 	mov	r8, r3
   18e78:	e3a06000 	mov	r6, #0
   18e7c:	eb002e81 	bl	24888 <CDevice::CDevice()>
   18e80:	e3a07000 	mov	r7, #0
   18e84:	e3a01001 	mov	r1, #1
   18e88:	e59f0030 	ldr	r0, [pc, #48]	; 18ec0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   18e8c:	e3550000 	cmp	r5, #0
   18e90:	e9840220 	stmib	r4, {r5, r9}
   18e94:	e584800c 	str	r8, [r4, #12]
   18e98:	e5840000 	str	r0, [r4]
   18e9c:	e1c461f0 	strd	r6, [r4, #16]
   18ea0:	e5c41018 	strb	r1, [r4, #24]
   18ea4:	0a000001 	beq	18eb0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   18ea8:	e1a00004 	mov	r0, r4
   18eac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18eb0:	e3a0201f 	mov	r2, #31
   18eb4:	e59f1008 	ldr	r1, [pc, #8]	; 18ec4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   18eb8:	e59f0008 	ldr	r0, [pc, #8]	; 18ec8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   18ebc:	eb002c80 	bl	240c4 <assertion_failed>
   18ec0:	000450d4 	.word	0x000450d4
   18ec4:	000450ec 	.word	0x000450ec
   18ec8:	00041290 	.word	0x00041290

00018ecc <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   18ecc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ed0:	e1a04000 	mov	r4, r0
   18ed4:	e1a08001 	mov	r8, r1
   18ed8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   18edc:	e59fc10c 	ldr	ip, [pc, #268]	; 18ff0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x124>
   18ee0:	e3510000 	cmp	r1, #0
   18ee4:	01a0100c 	moveq	r1, ip
   18ee8:	e2805010 	add	r5, r0, #16
   18eec:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   18ef0:	e1a09003 	mov	r9, r3
   18ef4:	e280603c 	add	r6, r0, #60	; 0x3c
   18ef8:	e1a0a002 	mov	sl, r2
   18efc:	eb00394e 	bl	2743c <CString::CString(char const*)>
   18f00:	e1a00005 	mov	r0, r5
   18f04:	eb001da4 	bl	2059c <CNetConfig::CNetConfig()>
   18f08:	e1a02007 	mov	r2, r7
   18f0c:	e1a01005 	mov	r1, r5
   18f10:	e1a00006 	mov	r0, r6
   18f14:	e2847060 	add	r7, r4, #96	; 0x60
   18f18:	eb0008d1 	bl	1b264 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   18f1c:	e1a02006 	mov	r2, r6
   18f20:	e1a01005 	mov	r1, r5
   18f24:	e2846098 	add	r6, r4, #152	; 0x98
   18f28:	e1a00007 	mov	r0, r7
   18f2c:	eb0006fa 	bl	1ab1c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   18f30:	e1a02007 	mov	r2, r7
   18f34:	e1a01005 	mov	r1, r5
   18f38:	e1a00006 	mov	r0, r6
   18f3c:	eb0004b7 	bl	1a220 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   18f40:	e1a02006 	mov	r2, r6
   18f44:	e1a01005 	mov	r1, r5
   18f48:	e28400d8 	add	r0, r4, #216	; 0xd8
   18f4c:	eb0000ef 	bl	19310 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   18f50:	e3a00000 	mov	r0, #0
   18f54:	e16f1f18 	clz	r1, r8
   18f58:	e59f3094 	ldr	r3, [pc, #148]	; 18ff4 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   18f5c:	e1a012a1 	lsr	r1, r1, #5
   18f60:	e5932000 	ldr	r2, [r3]
   18f64:	e5840128 	str	r0, [r4, #296]	; 0x128
   18f68:	e1520000 	cmp	r2, r0
   18f6c:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   18f70:	1a00001a 	bne	18fe0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x114>
   18f74:	e1a00005 	mov	r0, r5
   18f78:	e5834000 	str	r4, [r3]
   18f7c:	eb001d4d 	bl	204b8 <CNetConfig::SetDHCP(bool)>
   18f80:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   18f84:	e3530000 	cmp	r3, #0
   18f88:	0a000001 	beq	18f94 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   18f8c:	e1a00004 	mov	r0, r4
   18f90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f94:	e1a01008 	mov	r1, r8
   18f98:	e1a00005 	mov	r0, r5
   18f9c:	eb001d9d 	bl	20618 <CNetConfig::SetIPAddress(unsigned char const*)>
   18fa0:	e1a0100a 	mov	r1, sl
   18fa4:	e1a00005 	mov	r0, r5
   18fa8:	eb001da1 	bl	20634 <CNetConfig::SetNetMask(unsigned char const*)>
   18fac:	e3590000 	cmp	r9, #0
   18fb0:	0a000002 	beq	18fc0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf4>
   18fb4:	e1a01009 	mov	r1, r9
   18fb8:	e1a00005 	mov	r0, r5
   18fbc:	eb001d43 	bl	204d0 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   18fc0:	e59d3020 	ldr	r3, [sp, #32]
   18fc4:	e3530000 	cmp	r3, #0
   18fc8:	0affffef 	beq	18f8c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc0>
   18fcc:	e1a00005 	mov	r0, r5
   18fd0:	e1a01003 	mov	r1, r3
   18fd4:	eb001d3f 	bl	204d8 <CNetConfig::SetDNSServer(unsigned char const*)>
   18fd8:	e1a00004 	mov	r0, r4
   18fdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fe0:	e3a02026 	mov	r2, #38	; 0x26
   18fe4:	e59f100c 	ldr	r1, [pc, #12]	; 18ff8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   18fe8:	e59f000c 	ldr	r0, [pc, #12]	; 18ffc <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   18fec:	eb002c34 	bl	240c4 <assertion_failed>
   18ff0:	00049280 	.word	0x00049280
   18ff4:	00050148 	.word	0x00050148
   18ff8:	000450fc 	.word	0x000450fc
   18ffc:	00045110 	.word	0x00045110

00019000 <CNetSubSystem::Process()>:
   19000:	e59f3034 	ldr	r3, [pc, #52]	; 1903c <CNetSubSystem::Process()+0x3c>
   19004:	e5933000 	ldr	r3, [r3]
   19008:	e3530000 	cmp	r3, #0
   1900c:	012fff1e 	bxeq	lr
   19010:	e92d4010 	push	{r4, lr}
   19014:	e1a04000 	mov	r4, r0
   19018:	e280003c 	add	r0, r0, #60	; 0x3c
   1901c:	eb0008f6 	bl	1b3fc <CNetDeviceLayer::Process()>
   19020:	e2840060 	add	r0, r4, #96	; 0x60
   19024:	eb00071d 	bl	1aca0 <CLinkLayer::Process()>
   19028:	e2840098 	add	r0, r4, #152	; 0x98
   1902c:	eb0004cb 	bl	1a360 <CNetworkLayer::Process()>
   19030:	e28400d8 	add	r0, r4, #216	; 0xd8
   19034:	e8bd4010 	pop	{r4, lr}
   19038:	ea0003b5 	b	19f14 <CTransportLayer::Process()>
   1903c:	00050148 	.word	0x00050148

00019040 <CNetSubSystem::GetConfig()>:
   19040:	e2800010 	add	r0, r0, #16
   19044:	e12fff1e 	bx	lr

00019048 <CNetSubSystem::GetNetDeviceLayer()>:
   19048:	e280003c 	add	r0, r0, #60	; 0x3c
   1904c:	e12fff1e 	bx	lr

00019050 <CNetSubSystem::GetLinkLayer()>:
   19050:	e2800060 	add	r0, r0, #96	; 0x60
   19054:	e12fff1e 	bx	lr

00019058 <CNetSubSystem::GetTransportLayer()>:
   19058:	e28000d8 	add	r0, r0, #216	; 0xd8
   1905c:	e12fff1e 	bx	lr

00019060 <CNetSubSystem::IsRunning() const>:
   19060:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   19064:	e3530000 	cmp	r3, #0
   19068:	0a000003 	beq	1907c <CNetSubSystem::IsRunning() const+0x1c>
   1906c:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   19070:	e3500000 	cmp	r0, #0
   19074:	0a000002 	beq	19084 <CNetSubSystem::IsRunning() const+0x24>
   19078:	ea002072 	b	21248 <CDHCPClient::IsBound() const>
   1907c:	e3a00001 	mov	r0, #1
   19080:	e12fff1e 	bx	lr
   19084:	e92d4010 	push	{r4, lr}
   19088:	e3a0209d 	mov	r2, #157	; 0x9d
   1908c:	e59f1004 	ldr	r1, [pc, #4]	; 19098 <CNetSubSystem::IsRunning() const+0x38>
   19090:	e59f0004 	ldr	r0, [pc, #4]	; 1909c <CNetSubSystem::IsRunning() const+0x3c>
   19094:	eb002c0a 	bl	240c4 <assertion_failed>
   19098:	000450fc 	.word	0x000450fc
   1909c:	00045120 	.word	0x00045120

000190a0 <CNetSubSystem::Initialize(bool)>:
   190a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   190a4:	e2805010 	add	r5, r0, #16
   190a8:	e1a04000 	mov	r4, r0
   190ac:	e1a00005 	mov	r0, r5
   190b0:	e1a06001 	mov	r6, r1
   190b4:	eb001d09 	bl	204e0 <CNetConfig::GetIPAddress() const>
   190b8:	eb001e43 	bl	209cc <CIPAddress::IsNull() const>
   190bc:	e1a01000 	mov	r1, r0
   190c0:	e1a00005 	mov	r0, r5
   190c4:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   190c8:	eb001cfa 	bl	204b8 <CNetConfig::SetDHCP(bool)>
   190cc:	e1a01006 	mov	r1, r6
   190d0:	e284003c 	add	r0, r4, #60	; 0x3c
   190d4:	eb000878 	bl	1b2bc <CNetDeviceLayer::Initialize(bool)>
   190d8:	e3500000 	cmp	r0, #0
   190dc:	1a000002 	bne	190ec <CNetSubSystem::Initialize(bool)+0x4c>
   190e0:	e3a05000 	mov	r5, #0
   190e4:	e1a00005 	mov	r0, r5
   190e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   190ec:	e2845060 	add	r5, r4, #96	; 0x60
   190f0:	e1a00005 	mov	r0, r5
   190f4:	eb0006be 	bl	1abf4 <CLinkLayer::Initialize()>
   190f8:	e3500000 	cmp	r0, #0
   190fc:	0afffff7 	beq	190e0 <CNetSubSystem::Initialize(bool)+0x40>
   19100:	e2847098 	add	r7, r4, #152	; 0x98
   19104:	e1a00007 	mov	r0, r7
   19108:	eb00047b 	bl	1a2fc <CNetworkLayer::Initialize()>
   1910c:	e3500000 	cmp	r0, #0
   19110:	0afffff2 	beq	190e0 <CNetSubSystem::Initialize(bool)+0x40>
   19114:	e1a00005 	mov	r0, r5
   19118:	e1a01007 	mov	r1, r7
   1911c:	eb0006cd 	bl	1ac58 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   19120:	e28400d8 	add	r0, r4, #216	; 0xd8
   19124:	eb00009f 	bl	193a8 <CTransportLayer::Initialize()>
   19128:	e2505000 	subs	r5, r0, #0
   1912c:	0affffeb 	beq	190e0 <CNetSubSystem::Initialize(bool)+0x40>
   19130:	e3a000e0 	mov	r0, #224	; 0xe0
   19134:	eb0045fe 	bl	2a934 <operator new(unsigned int)>
   19138:	e1a01004 	mov	r1, r4
   1913c:	eb000068 	bl	192e4 <CNetTask::CNetTask(CNetSubSystem*)>
   19140:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19144:	e3530000 	cmp	r3, #0
   19148:	0a00000c 	beq	19180 <CNetSubSystem::Initialize(bool)+0xe0>
   1914c:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   19150:	e3530000 	cmp	r3, #0
   19154:	1a000013 	bne	191a8 <CNetSubSystem::Initialize(bool)+0x108>
   19158:	e1a00004 	mov	r0, r4
   1915c:	eb0038c6 	bl	2747c <CString::operator char const*() const>
   19160:	e1a08000 	mov	r8, r0
   19164:	e3a00e1e 	mov	r0, #480	; 0x1e0
   19168:	eb0045f1 	bl	2a934 <operator new(unsigned int)>
   1916c:	e1a07000 	mov	r7, r0
   19170:	e1a02008 	mov	r2, r8
   19174:	e1a01004 	mov	r1, r4
   19178:	eb001ffc 	bl	21170 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   1917c:	e5847128 	str	r7, [r4, #296]	; 0x128
   19180:	e3560000 	cmp	r6, #0
   19184:	1a000002 	bne	19194 <CNetSubSystem::Initialize(bool)+0xf4>
   19188:	eaffffd5 	b	190e4 <CNetSubSystem::Initialize(bool)+0x44>
   1918c:	eb002b1e 	bl	23e0c <CScheduler::Get()>
   19190:	eb002a8a 	bl	23bc0 <CScheduler::Yield()>
   19194:	e1a00004 	mov	r0, r4
   19198:	ebffffb0 	bl	19060 <CNetSubSystem::IsRunning() const>
   1919c:	e3500000 	cmp	r0, #0
   191a0:	0afffff9 	beq	1918c <CNetSubSystem::Initialize(bool)+0xec>
   191a4:	eaffffce 	b	190e4 <CNetSubSystem::Initialize(bool)+0x44>
   191a8:	e3a02060 	mov	r2, #96	; 0x60
   191ac:	e59f1004 	ldr	r1, [pc, #4]	; 191b8 <CNetSubSystem::Initialize(bool)+0x118>
   191b0:	e59f0004 	ldr	r0, [pc, #4]	; 191bc <CNetSubSystem::Initialize(bool)+0x11c>
   191b4:	eb002bc2 	bl	240c4 <assertion_failed>
   191b8:	000450fc 	.word	0x000450fc
   191bc:	00045134 	.word	0x00045134

000191c0 <CNetSubSystem::Get()>:
   191c0:	e59f3020 	ldr	r3, [pc, #32]	; 191e8 <CNetSubSystem::Get()+0x28>
   191c4:	e5930000 	ldr	r0, [r3]
   191c8:	e3500000 	cmp	r0, #0
   191cc:	0a000000 	beq	191d4 <CNetSubSystem::Get()+0x14>
   191d0:	e12fff1e 	bx	lr
   191d4:	e92d4010 	push	{r4, lr}
   191d8:	e3a020a3 	mov	r2, #163	; 0xa3
   191dc:	e59f1008 	ldr	r1, [pc, #8]	; 191ec <CNetSubSystem::Get()+0x2c>
   191e0:	e59f0008 	ldr	r0, [pc, #8]	; 191f0 <CNetSubSystem::Get()+0x30>
   191e4:	eb002bb6 	bl	240c4 <assertion_failed>
   191e8:	00050148 	.word	0x00050148
   191ec:	000450fc 	.word	0x000450fc
   191f0:	00045148 	.word	0x00045148

000191f4 <CNetSubSystem::~CNetSubSystem()>:
   191f4:	e92d4010 	push	{r4, lr}
   191f8:	e3a02000 	mov	r2, #0
   191fc:	e1a04000 	mov	r4, r0
   19200:	e59f3038 	ldr	r3, [pc, #56]	; 19240 <CNetSubSystem::~CNetSubSystem()+0x4c>
   19204:	e28000d8 	add	r0, r0, #216	; 0xd8
   19208:	e5832000 	str	r2, [r3]
   1920c:	eb000336 	bl	19eec <CTransportLayer::~CTransportLayer()>
   19210:	e2840098 	add	r0, r4, #152	; 0x98
   19214:	eb000420 	bl	1a29c <CNetworkLayer::~CNetworkLayer()>
   19218:	e2840060 	add	r0, r4, #96	; 0x60
   1921c:	eb00065d 	bl	1ab98 <CLinkLayer::~CLinkLayer()>
   19220:	e284003c 	add	r0, r4, #60	; 0x3c
   19224:	eb000819 	bl	1b290 <CNetDeviceLayer::~CNetDeviceLayer()>
   19228:	e2840010 	add	r0, r4, #16
   1922c:	eb001c93 	bl	20480 <CNetConfig::~CNetConfig()>
   19230:	e1a00004 	mov	r0, r4
   19234:	eb003847 	bl	27358 <CString::~CString()>
   19238:	e1a00004 	mov	r0, r4
   1923c:	e8bd8010 	pop	{r4, pc}
   19240:	00050148 	.word	0x00050148

00019244 <CNetTask::~CNetTask()>:
   19244:	e3a02000 	mov	r2, #0
   19248:	e92d4010 	push	{r4, lr}
   1924c:	e1a04000 	mov	r4, r0
   19250:	e59f3010 	ldr	r3, [pc, #16]	; 19268 <CNetTask::~CNetTask()+0x24>
   19254:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19258:	e5803000 	str	r3, [r0]
   1925c:	eb0028f4 	bl	23634 <CTask::~CTask()>
   19260:	e1a00004 	mov	r0, r4
   19264:	e8bd8010 	pop	{r4, pc}
   19268:	00045160 	.word	0x00045160

0001926c <CNetTask::~CNetTask()>:
   1926c:	e3a02000 	mov	r2, #0
   19270:	e92d4010 	push	{r4, lr}
   19274:	e1a04000 	mov	r4, r0
   19278:	e59f301c 	ldr	r3, [pc, #28]	; 1929c <CNetTask::~CNetTask()+0x30>
   1927c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19280:	e5803000 	str	r3, [r0]
   19284:	eb0028ea 	bl	23634 <CTask::~CTask()>
   19288:	e1a00004 	mov	r0, r4
   1928c:	e3a010e0 	mov	r1, #224	; 0xe0
   19290:	eb0045b5 	bl	2a96c <operator delete(void*, unsigned int)>
   19294:	e1a00004 	mov	r0, r4
   19298:	e8bd8010 	pop	{r4, pc}
   1929c:	00045160 	.word	0x00045160

000192a0 <CNetTask::Run()>:
   192a0:	e92d4010 	push	{r4, lr}
   192a4:	e1a04000 	mov	r4, r0
   192a8:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   192ac:	e3500000 	cmp	r0, #0
   192b0:	0a000005 	beq	192cc <CNetTask::Run()+0x2c>
   192b4:	ebffff51 	bl	19000 <CNetSubSystem::Process()>
   192b8:	eb002ad3 	bl	23e0c <CScheduler::Get()>
   192bc:	eb002a3f 	bl	23bc0 <CScheduler::Yield()>
   192c0:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   192c4:	e3500000 	cmp	r0, #0
   192c8:	1afffff9 	bne	192b4 <CNetTask::Run()+0x14>
   192cc:	e3a02026 	mov	r2, #38	; 0x26
   192d0:	e59f1004 	ldr	r1, [pc, #4]	; 192dc <CNetTask::Run()+0x3c>
   192d4:	e59f0004 	ldr	r0, [pc, #4]	; 192e0 <CNetTask::Run()+0x40>
   192d8:	eb002b79 	bl	240c4 <assertion_failed>
   192dc:	0004516c 	.word	0x0004516c
   192e0:	00045178 	.word	0x00045178

000192e4 <CNetTask::CNetTask(CNetSubSystem*)>:
   192e4:	e92d4070 	push	{r4, r5, r6, lr}
   192e8:	e1a04000 	mov	r4, r0
   192ec:	e1a05001 	mov	r5, r1
   192f0:	e3a01902 	mov	r1, #32768	; 0x8000
   192f4:	eb002921 	bl	23780 <CTask::CTask(unsigned int)>
   192f8:	e59f300c 	ldr	r3, [pc, #12]	; 1930c <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   192fc:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   19300:	e5843000 	str	r3, [r4]
   19304:	e1a00004 	mov	r0, r4
   19308:	e8bd8070 	pop	{r4, r5, r6, pc}
   1930c:	00045160 	.word	0x00045160

00019310 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   19310:	e92d4070 	push	{r4, r5, r6, lr}
   19314:	e1a06002 	mov	r6, r2
   19318:	e3a02064 	mov	r2, #100	; 0x64
   1931c:	e1a04000 	mov	r4, r0
   19320:	e5801000 	str	r1, [r0]
   19324:	e1a05001 	mov	r5, r1
   19328:	e5806004 	str	r6, [r0, #4]
   1932c:	e1a01002 	mov	r1, r2
   19330:	e2800008 	add	r0, r0, #8
   19334:	eb00375c 	bl	270ac <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19338:	e3a03000 	mov	r3, #0
   1933c:	e59f0054 	ldr	r0, [pc, #84]	; 19398 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   19340:	e584301c 	str	r3, [r4, #28]
   19344:	e1c401b8 	strh	r0, [r4, #24]
   19348:	e1a02006 	mov	r2, r6
   1934c:	e1a01005 	mov	r1, r5
   19350:	e2840020 	add	r0, r4, #32
   19354:	eb001b88 	bl	2017c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   19358:	e5943000 	ldr	r3, [r4]
   1935c:	e3530000 	cmp	r3, #0
   19360:	0a000004 	beq	19378 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   19364:	e5943004 	ldr	r3, [r4, #4]
   19368:	e3530000 	cmp	r3, #0
   1936c:	0a000005 	beq	19388 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   19370:	e1a00004 	mov	r0, r4
   19374:	e8bd8070 	pop	{r4, r5, r6, pc}
   19378:	e3a02025 	mov	r2, #37	; 0x25
   1937c:	e59f1018 	ldr	r1, [pc, #24]	; 1939c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19380:	e59f0018 	ldr	r0, [pc, #24]	; 193a0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   19384:	eb002b4e 	bl	240c4 <assertion_failed>
   19388:	e3a02026 	mov	r2, #38	; 0x26
   1938c:	e59f1008 	ldr	r1, [pc, #8]	; 1939c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19390:	e59f000c 	ldr	r0, [pc, #12]	; 193a4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   19394:	eb002b4a 	bl	240c4 <assertion_failed>
   19398:	ffffea60 	.word	0xffffea60
   1939c:	00045190 	.word	0x00045190
   193a0:	000451a4 	.word	0x000451a4
   193a4:	000451b8 	.word	0x000451b8

000193a8 <CTransportLayer::Initialize()>:
   193a8:	e3a00001 	mov	r0, #1
   193ac:	e12fff1e 	bx	lr

000193b0 <CTransportLayer::Bind(unsigned short, int)>:
   193b0:	e3520011 	cmp	r2, #17
   193b4:	1a00004d 	bne	194f0 <CTransportLayer::Bind(unsigned short, int)+0x140>
   193b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   193bc:	e1a06000 	mov	r6, r0
   193c0:	e590001c 	ldr	r0, [r0, #28]
   193c4:	e1a07001 	mov	r7, r1
   193c8:	e3500000 	cmp	r0, #0
   193cc:	1a000038 	bne	194b4 <CTransportLayer::Bind(unsigned short, int)+0x104>
   193d0:	e3a04000 	mov	r4, #0
   193d4:	e2865008 	add	r5, r6, #8
   193d8:	ea000006 	b	193f8 <CTransportLayer::Bind(unsigned short, int)+0x48>
   193dc:	e1a01004 	mov	r1, r4
   193e0:	e1a00005 	mov	r0, r5
   193e4:	eb003758 	bl	2714c <CPtrArray::operator[](unsigned int)>
   193e8:	e5903000 	ldr	r3, [r0]
   193ec:	e3530000 	cmp	r3, #0
   193f0:	0a000004 	beq	19408 <CTransportLayer::Bind(unsigned short, int)+0x58>
   193f4:	e2844001 	add	r4, r4, #1
   193f8:	e1a00005 	mov	r0, r5
   193fc:	eb003750 	bl	27144 <CPtrArray::GetCount() const>
   19400:	e1540000 	cmp	r4, r0
   19404:	3afffff4 	bcc	193dc <CTransportLayer::Bind(unsigned short, int)+0x2c>
   19408:	e1a00005 	mov	r0, r5
   1940c:	eb00374c 	bl	27144 <CPtrArray::GetCount() const>
   19410:	e1540000 	cmp	r4, r0
   19414:	2a000021 	bcs	194a0 <CTransportLayer::Bind(unsigned short, int)+0xf0>
   19418:	e3570000 	cmp	r7, #0
   1941c:	0a00001a 	beq	1948c <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19420:	e5963000 	ldr	r3, [r6]
   19424:	e3530000 	cmp	r3, #0
   19428:	0a000028 	beq	194d0 <CTransportLayer::Bind(unsigned short, int)+0x120>
   1942c:	e5963004 	ldr	r3, [r6, #4]
   19430:	e3530000 	cmp	r3, #0
   19434:	0a000029 	beq	194e0 <CTransportLayer::Bind(unsigned short, int)+0x130>
   19438:	e3a00048 	mov	r0, #72	; 0x48
   1943c:	eb00453c 	bl	2a934 <operator new(unsigned int)>
   19440:	e8960006 	ldm	r6, {r1, r2}
   19444:	e1a03007 	mov	r3, r7
   19448:	e1a08000 	mov	r8, r0
   1944c:	eb0010f5 	bl	1d828 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19450:	e1a01004 	mov	r1, r4
   19454:	e1a00005 	mov	r0, r5
   19458:	eb00373b 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1945c:	e1a01004 	mov	r1, r4
   19460:	e5808000 	str	r8, [r0]
   19464:	e1a00005 	mov	r0, r5
   19468:	eb003737 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1946c:	e5903000 	ldr	r3, [r0]
   19470:	e3530000 	cmp	r3, #0
   19474:	0a00001f 	beq	194f8 <CTransportLayer::Bind(unsigned short, int)+0x148>
   19478:	e596301c 	ldr	r3, [r6, #28]
   1947c:	e3530000 	cmp	r3, #0
   19480:	1a000010 	bne	194c8 <CTransportLayer::Bind(unsigned short, int)+0x118>
   19484:	e1a00004 	mov	r0, r4
   19488:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1948c:	e596301c 	ldr	r3, [r6, #28]
   19490:	e3530000 	cmp	r3, #0
   19494:	1a000008 	bne	194bc <CTransportLayer::Bind(unsigned short, int)+0x10c>
   19498:	e3e00000 	mvn	r0, #0
   1949c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   194a0:	e3a01000 	mov	r1, #0
   194a4:	e1a00005 	mov	r0, r5
   194a8:	eb00375f 	bl	2722c <CPtrArray::Append(void*)>
   194ac:	e1a04000 	mov	r4, r0
   194b0:	eaffffd8 	b	19418 <CTransportLayer::Bind(unsigned short, int)+0x68>
   194b4:	eb004850 	bl	2b5fc <EnterCritical>
   194b8:	eaffffc4 	b	193d0 <CTransportLayer::Bind(unsigned short, int)+0x20>
   194bc:	eb004879 	bl	2b6a8 <LeaveCritical>
   194c0:	e3e00000 	mvn	r0, #0
   194c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   194c8:	eb004876 	bl	2b6a8 <LeaveCritical>
   194cc:	eaffffec 	b	19484 <CTransportLayer::Bind(unsigned short, int)+0xd4>
   194d0:	e3a020ad 	mov	r2, #173	; 0xad
   194d4:	e59f102c 	ldr	r1, [pc, #44]	; 19508 <CTransportLayer::Bind(unsigned short, int)+0x158>
   194d8:	e59f002c 	ldr	r0, [pc, #44]	; 1950c <CTransportLayer::Bind(unsigned short, int)+0x15c>
   194dc:	eb002af8 	bl	240c4 <assertion_failed>
   194e0:	e3a020ae 	mov	r2, #174	; 0xae
   194e4:	e59f101c 	ldr	r1, [pc, #28]	; 19508 <CTransportLayer::Bind(unsigned short, int)+0x158>
   194e8:	e59f0020 	ldr	r0, [pc, #32]	; 19510 <CTransportLayer::Bind(unsigned short, int)+0x160>
   194ec:	eb002af4 	bl	240c4 <assertion_failed>
   194f0:	e3e00000 	mvn	r0, #0
   194f4:	e12fff1e 	bx	lr
   194f8:	e3a020b0 	mov	r2, #176	; 0xb0
   194fc:	e59f1004 	ldr	r1, [pc, #4]	; 19508 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19500:	e59f000c 	ldr	r0, [pc, #12]	; 19514 <CTransportLayer::Bind(unsigned short, int)+0x164>
   19504:	eb002aee 	bl	240c4 <assertion_failed>
   19508:	00045190 	.word	0x00045190
   1950c:	000451a4 	.word	0x000451a4
   19510:	000451b8 	.word	0x000451b8
   19514:	000451d0 	.word	0x000451d0

00019518 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19518:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1951c:	e1a08000 	mov	r8, r0
   19520:	e590001c 	ldr	r0, [r0, #28]
   19524:	e24dd014 	sub	sp, sp, #20
   19528:	e3500000 	cmp	r0, #0
   1952c:	e58d1008 	str	r1, [sp, #8]
   19530:	e58d200c 	str	r2, [sp, #12]
   19534:	e1a06003 	mov	r6, r3
   19538:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   1953c:	1a000072 	bne	1970c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19540:	e3a07000 	mov	r7, #0
   19544:	e2885008 	add	r5, r8, #8
   19548:	ea000006 	b	19568 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   1954c:	e1a01007 	mov	r1, r7
   19550:	e1a00005 	mov	r0, r5
   19554:	eb0036fc 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19558:	e5903000 	ldr	r3, [r0]
   1955c:	e3530000 	cmp	r3, #0
   19560:	0a000004 	beq	19578 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19564:	e2877001 	add	r7, r7, #1
   19568:	e1a00005 	mov	r0, r5
   1956c:	eb0036f4 	bl	27144 <CPtrArray::GetCount() const>
   19570:	e1570000 	cmp	r7, r0
   19574:	3afffff4 	bcc	1954c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19578:	e1a00005 	mov	r0, r5
   1957c:	eb0036f0 	bl	27144 <CPtrArray::GetCount() const>
   19580:	e1570000 	cmp	r7, r0
   19584:	2a00005b 	bcs	196f8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e0>
   19588:	e3560000 	cmp	r6, #0
   1958c:	1a000026 	bne	1962c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19590:	e59fa200 	ldr	sl, [pc, #512]	; 19798 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x280>
   19594:	e59fb200 	ldr	fp, [pc, #512]	; 1979c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19598:	e1d861b8 	ldrh	r6, [r8, #24]
   1959c:	e3a04000 	mov	r4, #0
   195a0:	e2863001 	add	r3, r6, #1
   195a4:	e6ff3073 	uxth	r3, r3
   195a8:	e153000a 	cmp	r3, sl
   195ac:	91c831b8 	strhls	r3, [r8, #24]
   195b0:	81c8b1b8 	strhhi	fp, [r8, #24]
   195b4:	ea000000 	b	195bc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   195b8:	e2844001 	add	r4, r4, #1
   195bc:	e1a00005 	mov	r0, r5
   195c0:	eb0036df 	bl	27144 <CPtrArray::GetCount() const>
   195c4:	e1540000 	cmp	r4, r0
   195c8:	2a000013 	bcs	1961c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   195cc:	e1a01004 	mov	r1, r4
   195d0:	e1a00005 	mov	r0, r5
   195d4:	eb0036dc 	bl	2714c <CPtrArray::operator[](unsigned int)>
   195d8:	e5903000 	ldr	r3, [r0]
   195dc:	e3530000 	cmp	r3, #0
   195e0:	0afffff4 	beq	195b8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   195e4:	e1a01004 	mov	r1, r4
   195e8:	e1a00005 	mov	r0, r5
   195ec:	eb0036d6 	bl	2714c <CPtrArray::operator[](unsigned int)>
   195f0:	e5900000 	ldr	r0, [r0]
   195f4:	eb000e0c 	bl	1ce2c <CNetConnection::GetOwnPort() const>
   195f8:	e1560000 	cmp	r6, r0
   195fc:	1affffed 	bne	195b8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19600:	e1a01004 	mov	r1, r4
   19604:	e1a00005 	mov	r0, r5
   19608:	eb0036cf 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1960c:	e5900000 	ldr	r0, [r0]
   19610:	eb000e10 	bl	1ce58 <CNetConnection::GetProtocol() const>
   19614:	e1500009 	cmp	r0, r9
   19618:	1affffe6 	bne	195b8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1961c:	e1a00005 	mov	r0, r5
   19620:	eb0036c7 	bl	27144 <CPtrArray::GetCount() const>
   19624:	e1540000 	cmp	r4, r0
   19628:	3affffda 	bcc	19598 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1962c:	e5983000 	ldr	r3, [r8]
   19630:	e3530000 	cmp	r3, #0
   19634:	0a000049 	beq	19760 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x248>
   19638:	e5983004 	ldr	r3, [r8, #4]
   1963c:	e3530000 	cmp	r3, #0
   19640:	0a00004a 	beq	19770 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   19644:	e3590006 	cmp	r9, #6
   19648:	0a000031 	beq	19714 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1fc>
   1964c:	e3590011 	cmp	r9, #17
   19650:	1a000022 	bne	196e0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   19654:	e3a00048 	mov	r0, #72	; 0x48
   19658:	eb0044b5 	bl	2a934 <operator new(unsigned int)>
   1965c:	e59d300c 	ldr	r3, [sp, #12]
   19660:	e5982004 	ldr	r2, [r8, #4]
   19664:	e58d6004 	str	r6, [sp, #4]
   19668:	e5981000 	ldr	r1, [r8]
   1966c:	e58d3000 	str	r3, [sp]
   19670:	e59d3008 	ldr	r3, [sp, #8]
   19674:	e1a04000 	mov	r4, r0
   19678:	eb00104f 	bl	1d7bc <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   1967c:	e1a01007 	mov	r1, r7
   19680:	e1a00005 	mov	r0, r5
   19684:	eb0036b0 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19688:	e598301c 	ldr	r3, [r8, #28]
   1968c:	e5804000 	str	r4, [r0]
   19690:	e3530000 	cmp	r3, #0
   19694:	1a00002f 	bne	19758 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   19698:	e1a01007 	mov	r1, r7
   1969c:	e1a00005 	mov	r0, r5
   196a0:	eb0036a9 	bl	2714c <CPtrArray::operator[](unsigned int)>
   196a4:	e5903000 	ldr	r3, [r0]
   196a8:	e3530000 	cmp	r3, #0
   196ac:	0a000035 	beq	19788 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   196b0:	e1a01007 	mov	r1, r7
   196b4:	e1a00005 	mov	r0, r5
   196b8:	eb0036a3 	bl	2714c <CPtrArray::operator[](unsigned int)>
   196bc:	e5900000 	ldr	r0, [r0]
   196c0:	e5903000 	ldr	r3, [r0]
   196c4:	e5933008 	ldr	r3, [r3, #8]
   196c8:	e12fff33 	blx	r3
   196cc:	e3500000 	cmp	r0, #0
   196d0:	ba000005 	blt	196ec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   196d4:	e1a00007 	mov	r0, r7
   196d8:	e28dd014 	add	sp, sp, #20
   196dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e0:	e598301c 	ldr	r3, [r8, #28]
   196e4:	e3530000 	cmp	r3, #0
   196e8:	1a000024 	bne	19780 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   196ec:	e3e00000 	mvn	r0, #0
   196f0:	e28dd014 	add	sp, sp, #20
   196f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196f8:	e3a01000 	mov	r1, #0
   196fc:	e1a00005 	mov	r0, r5
   19700:	eb0036c9 	bl	2722c <CPtrArray::Append(void*)>
   19704:	e1a07000 	mov	r7, r0
   19708:	eaffff9e 	b	19588 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   1970c:	eb0047ba 	bl	2b5fc <EnterCritical>
   19710:	eaffff8a 	b	19540 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19714:	e3a000e0 	mov	r0, #224	; 0xe0
   19718:	eb004485 	bl	2a934 <operator new(unsigned int)>
   1971c:	e59d300c 	ldr	r3, [sp, #12]
   19720:	e5982004 	ldr	r2, [r8, #4]
   19724:	e58d6004 	str	r6, [sp, #4]
   19728:	e5981000 	ldr	r1, [r8]
   1972c:	e58d3000 	str	r3, [sp]
   19730:	e59d3008 	ldr	r3, [sp, #8]
   19734:	e1a04000 	mov	r4, r0
   19738:	eb0012ba 	bl	1e228 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   1973c:	e1a01007 	mov	r1, r7
   19740:	e1a00005 	mov	r0, r5
   19744:	eb003680 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19748:	e598301c 	ldr	r3, [r8, #28]
   1974c:	e5804000 	str	r4, [r0]
   19750:	e3530000 	cmp	r3, #0
   19754:	0affffcf 	beq	19698 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19758:	eb0047d2 	bl	2b6a8 <LeaveCritical>
   1975c:	eaffffcd 	b	19698 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19760:	e3a020e1 	mov	r2, #225	; 0xe1
   19764:	e59f1034 	ldr	r1, [pc, #52]	; 197a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19768:	e59f0034 	ldr	r0, [pc, #52]	; 197a4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   1976c:	eb002a54 	bl	240c4 <assertion_failed>
   19770:	e3a020e2 	mov	r2, #226	; 0xe2
   19774:	e59f1024 	ldr	r1, [pc, #36]	; 197a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19778:	e59f0028 	ldr	r0, [pc, #40]	; 197a8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   1977c:	eb002a50 	bl	240c4 <assertion_failed>
   19780:	eb0047c8 	bl	2b6a8 <LeaveCritical>
   19784:	eaffffd8 	b	196ec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   19788:	e3a020f4 	mov	r2, #244	; 0xf4
   1978c:	e59f100c 	ldr	r1, [pc, #12]	; 197a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19790:	e59f0014 	ldr	r0, [pc, #20]	; 197ac <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19794:	eb002a4a 	bl	240c4 <assertion_failed>
   19798:	0000ee47 	.word	0x0000ee47
   1979c:	ffffea60 	.word	0xffffea60
   197a0:	00045190 	.word	0x00045190
   197a4:	000451a4 	.word	0x000451a4
   197a8:	000451b8 	.word	0x000451b8
   197ac:	000451d0 	.word	0x000451d0

000197b0 <CTransportLayer::Listen(unsigned short, int)>:
   197b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   197b4:	e1a06000 	mov	r6, r0
   197b8:	e590001c 	ldr	r0, [r0, #28]
   197bc:	e1a07001 	mov	r7, r1
   197c0:	e3500000 	cmp	r0, #0
   197c4:	e1a08002 	mov	r8, r2
   197c8:	1a00001f 	bne	1984c <CTransportLayer::Listen(unsigned short, int)+0x9c>
   197cc:	e3a04000 	mov	r4, #0
   197d0:	e2865008 	add	r5, r6, #8
   197d4:	ea000006 	b	197f4 <CTransportLayer::Listen(unsigned short, int)+0x44>
   197d8:	e1a01004 	mov	r1, r4
   197dc:	e1a00005 	mov	r0, r5
   197e0:	eb003659 	bl	2714c <CPtrArray::operator[](unsigned int)>
   197e4:	e5903000 	ldr	r3, [r0]
   197e8:	e3530000 	cmp	r3, #0
   197ec:	0a000004 	beq	19804 <CTransportLayer::Listen(unsigned short, int)+0x54>
   197f0:	e2844001 	add	r4, r4, #1
   197f4:	e1a00005 	mov	r0, r5
   197f8:	eb003651 	bl	27144 <CPtrArray::GetCount() const>
   197fc:	e1540000 	cmp	r4, r0
   19800:	3afffff4 	bcc	197d8 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19804:	e1a00005 	mov	r0, r5
   19808:	eb00364d 	bl	27144 <CPtrArray::GetCount() const>
   1980c:	e1540000 	cmp	r4, r0
   19810:	2a000008 	bcs	19838 <CTransportLayer::Listen(unsigned short, int)+0x88>
   19814:	e3570000 	cmp	r7, #0
   19818:	0a000001 	beq	19824 <CTransportLayer::Listen(unsigned short, int)+0x74>
   1981c:	e3580006 	cmp	r8, #6
   19820:	0a00000e 	beq	19860 <CTransportLayer::Listen(unsigned short, int)+0xb0>
   19824:	e596301c 	ldr	r3, [r6, #28]
   19828:	e3530000 	cmp	r3, #0
   1982c:	1a000008 	bne	19854 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   19830:	e3e00000 	mvn	r0, #0
   19834:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19838:	e3a01000 	mov	r1, #0
   1983c:	e1a00005 	mov	r0, r5
   19840:	eb003679 	bl	2722c <CPtrArray::Append(void*)>
   19844:	e1a04000 	mov	r4, r0
   19848:	eafffff1 	b	19814 <CTransportLayer::Listen(unsigned short, int)+0x64>
   1984c:	eb00476a 	bl	2b5fc <EnterCritical>
   19850:	eaffffdd 	b	197cc <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19854:	eb004793 	bl	2b6a8 <LeaveCritical>
   19858:	e3e00000 	mvn	r0, #0
   1985c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19860:	e5963000 	ldr	r3, [r6]
   19864:	e3530000 	cmp	r3, #0
   19868:	0a000019 	beq	198d4 <CTransportLayer::Listen(unsigned short, int)+0x124>
   1986c:	e5963004 	ldr	r3, [r6, #4]
   19870:	e3530000 	cmp	r3, #0
   19874:	0a00001a 	beq	198e4 <CTransportLayer::Listen(unsigned short, int)+0x134>
   19878:	e3a000e0 	mov	r0, #224	; 0xe0
   1987c:	eb00442c 	bl	2a934 <operator new(unsigned int)>
   19880:	e8960006 	ldm	r6, {r1, r2}
   19884:	e1a03007 	mov	r3, r7
   19888:	e1a08000 	mov	r8, r0
   1988c:	eb0010a8 	bl	1db34 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19890:	e1a01004 	mov	r1, r4
   19894:	e1a00005 	mov	r0, r5
   19898:	eb00362b 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1989c:	e1a01004 	mov	r1, r4
   198a0:	e5808000 	str	r8, [r0]
   198a4:	e1a00005 	mov	r0, r5
   198a8:	eb003627 	bl	2714c <CPtrArray::operator[](unsigned int)>
   198ac:	e5903000 	ldr	r3, [r0]
   198b0:	e3530000 	cmp	r3, #0
   198b4:	0a00000e 	beq	198f4 <CTransportLayer::Listen(unsigned short, int)+0x144>
   198b8:	e596301c 	ldr	r3, [r6, #28]
   198bc:	e3530000 	cmp	r3, #0
   198c0:	1a000001 	bne	198cc <CTransportLayer::Listen(unsigned short, int)+0x11c>
   198c4:	e1a00004 	mov	r0, r4
   198c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   198cc:	eb004775 	bl	2b6a8 <LeaveCritical>
   198d0:	eafffffb 	b	198c4 <CTransportLayer::Listen(unsigned short, int)+0x114>
   198d4:	e59f2028 	ldr	r2, [pc, #40]	; 19904 <CTransportLayer::Listen(unsigned short, int)+0x154>
   198d8:	e59f1028 	ldr	r1, [pc, #40]	; 19908 <CTransportLayer::Listen(unsigned short, int)+0x158>
   198dc:	e59f0028 	ldr	r0, [pc, #40]	; 1990c <CTransportLayer::Listen(unsigned short, int)+0x15c>
   198e0:	eb0029f7 	bl	240c4 <assertion_failed>
   198e4:	e59f2024 	ldr	r2, [pc, #36]	; 19910 <CTransportLayer::Listen(unsigned short, int)+0x160>
   198e8:	e59f1018 	ldr	r1, [pc, #24]	; 19908 <CTransportLayer::Listen(unsigned short, int)+0x158>
   198ec:	e59f0020 	ldr	r0, [pc, #32]	; 19914 <CTransportLayer::Listen(unsigned short, int)+0x164>
   198f0:	eb0029f3 	bl	240c4 <assertion_failed>
   198f4:	e59f201c 	ldr	r2, [pc, #28]	; 19918 <CTransportLayer::Listen(unsigned short, int)+0x168>
   198f8:	e59f1008 	ldr	r1, [pc, #8]	; 19908 <CTransportLayer::Listen(unsigned short, int)+0x158>
   198fc:	e59f0018 	ldr	r0, [pc, #24]	; 1991c <CTransportLayer::Listen(unsigned short, int)+0x16c>
   19900:	eb0029ef 	bl	240c4 <assertion_failed>
   19904:	0000011e 	.word	0x0000011e
   19908:	00045190 	.word	0x00045190
   1990c:	000451a4 	.word	0x000451a4
   19910:	0000011f 	.word	0x0000011f
   19914:	000451b8 	.word	0x000451b8
   19918:	00000121 	.word	0x00000121
   1991c:	000451d0 	.word	0x000451d0

00019920 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   19920:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19924:	e2535000 	subs	r5, r3, #0
   19928:	ba00001c 	blt	199a0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   1992c:	e2804008 	add	r4, r0, #8
   19930:	e1a00004 	mov	r0, r4
   19934:	e1a06001 	mov	r6, r1
   19938:	e1a07002 	mov	r7, r2
   1993c:	eb003600 	bl	27144 <CPtrArray::GetCount() const>
   19940:	e1550000 	cmp	r5, r0
   19944:	ba000001 	blt	19950 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x30>
   19948:	e3e00000 	mvn	r0, #0
   1994c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19950:	e1a01005 	mov	r1, r5
   19954:	e1a00004 	mov	r0, r4
   19958:	eb0035fb 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1995c:	e5903000 	ldr	r3, [r0]
   19960:	e3530000 	cmp	r3, #0
   19964:	0afffff7 	beq	19948 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x28>
   19968:	e3560000 	cmp	r6, #0
   1996c:	0a00000f 	beq	199b0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x90>
   19970:	e3570000 	cmp	r7, #0
   19974:	0a000011 	beq	199c0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   19978:	e1a01005 	mov	r1, r5
   1997c:	e1a00004 	mov	r0, r4
   19980:	eb0035f1 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19984:	e5900000 	ldr	r0, [r0]
   19988:	e1a02007 	mov	r2, r7
   1998c:	e5903000 	ldr	r3, [r0]
   19990:	e1a01006 	mov	r1, r6
   19994:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19998:	e593300c 	ldr	r3, [r3, #12]
   1999c:	e12fff13 	bx	r3
   199a0:	e59f2028 	ldr	r2, [pc, #40]	; 199d0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb0>
   199a4:	e59f1028 	ldr	r1, [pc, #40]	; 199d4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   199a8:	e59f0028 	ldr	r0, [pc, #40]	; 199d8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb8>
   199ac:	eb0029c4 	bl	240c4 <assertion_failed>
   199b0:	e59f2024 	ldr	r2, [pc, #36]	; 199dc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   199b4:	e59f1018 	ldr	r1, [pc, #24]	; 199d4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   199b8:	e59f0020 	ldr	r0, [pc, #32]	; 199e0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   199bc:	eb0029c0 	bl	240c4 <assertion_failed>
   199c0:	e59f201c 	ldr	r2, [pc, #28]	; 199e4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   199c4:	e59f1008 	ldr	r1, [pc, #8]	; 199d4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   199c8:	e59f0018 	ldr	r0, [pc, #24]	; 199e8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   199cc:	eb0029bc 	bl	240c4 <assertion_failed>
   199d0:	0000012a 	.word	0x0000012a
   199d4:	00045190 	.word	0x00045190
   199d8:	000451e8 	.word	0x000451e8
   199dc:	00000131 	.word	0x00000131
   199e0:	000451fc 	.word	0x000451fc
   199e4:	00000132 	.word	0x00000132
   199e8:	0004520c 	.word	0x0004520c

000199ec <CTransportLayer::Disconnect(int)>:
   199ec:	e92d4070 	push	{r4, r5, r6, lr}
   199f0:	e2515000 	subs	r5, r1, #0
   199f4:	ba000014 	blt	19a4c <CTransportLayer::Disconnect(int)+0x60>
   199f8:	e2804008 	add	r4, r0, #8
   199fc:	e1a00004 	mov	r0, r4
   19a00:	eb0035cf 	bl	27144 <CPtrArray::GetCount() const>
   19a04:	e1550000 	cmp	r5, r0
   19a08:	ba000001 	blt	19a14 <CTransportLayer::Disconnect(int)+0x28>
   19a0c:	e3e00000 	mvn	r0, #0
   19a10:	e8bd8070 	pop	{r4, r5, r6, pc}
   19a14:	e1a01005 	mov	r1, r5
   19a18:	e1a00004 	mov	r0, r4
   19a1c:	eb0035ca 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19a20:	e5903000 	ldr	r3, [r0]
   19a24:	e3530000 	cmp	r3, #0
   19a28:	0afffff7 	beq	19a0c <CTransportLayer::Disconnect(int)+0x20>
   19a2c:	e1a01005 	mov	r1, r5
   19a30:	e1a00004 	mov	r0, r4
   19a34:	eb0035c4 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19a38:	e8bd4070 	pop	{r4, r5, r6, lr}
   19a3c:	e5900000 	ldr	r0, [r0]
   19a40:	e5903000 	ldr	r3, [r0]
   19a44:	e5933010 	ldr	r3, [r3, #16]
   19a48:	e12fff13 	bx	r3
   19a4c:	e3a02f4e 	mov	r2, #312	; 0x138
   19a50:	e59f1004 	ldr	r1, [pc, #4]	; 19a5c <CTransportLayer::Disconnect(int)+0x70>
   19a54:	e59f0004 	ldr	r0, [pc, #4]	; 19a60 <CTransportLayer::Disconnect(int)+0x74>
   19a58:	eb002999 	bl	240c4 <assertion_failed>
   19a5c:	00045190 	.word	0x00045190
   19a60:	000451e8 	.word	0x000451e8

00019a64 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   19a64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19a68:	e59d5018 	ldr	r5, [sp, #24]
   19a6c:	e3550000 	cmp	r5, #0
   19a70:	ba00001f 	blt	19af4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x90>
   19a74:	e2804008 	add	r4, r0, #8
   19a78:	e1a00004 	mov	r0, r4
   19a7c:	e1a06001 	mov	r6, r1
   19a80:	e1a07002 	mov	r7, r2
   19a84:	e1a08003 	mov	r8, r3
   19a88:	eb0035ad 	bl	27144 <CPtrArray::GetCount() const>
   19a8c:	e1550000 	cmp	r5, r0
   19a90:	ba000001 	blt	19a9c <CTransportLayer::Send(void const*, unsigned int, int, int)+0x38>
   19a94:	e3e00000 	mvn	r0, #0
   19a98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19a9c:	e1a01005 	mov	r1, r5
   19aa0:	e1a00004 	mov	r0, r4
   19aa4:	eb0035a8 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19aa8:	e5903000 	ldr	r3, [r0]
   19aac:	e3530000 	cmp	r3, #0
   19ab0:	0afffff7 	beq	19a94 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x30>
   19ab4:	e3560000 	cmp	r6, #0
   19ab8:	0a000011 	beq	19b04 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   19abc:	e3570000 	cmp	r7, #0
   19ac0:	0a000013 	beq	19b14 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   19ac4:	e1a01005 	mov	r1, r5
   19ac8:	e1a00004 	mov	r0, r4
   19acc:	eb00359e 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19ad0:	e5900000 	ldr	r0, [r0]
   19ad4:	e1a03008 	mov	r3, r8
   19ad8:	e590c000 	ldr	ip, [r0]
   19adc:	e1a02007 	mov	r2, r7
   19ae0:	e59ce014 	ldr	lr, [ip, #20]
   19ae4:	e1a01006 	mov	r1, r6
   19ae8:	e1a0c00e 	mov	ip, lr
   19aec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19af0:	e12fff1c 	bx	ip
   19af4:	e3a02f51 	mov	r2, #324	; 0x144
   19af8:	e59f1024 	ldr	r1, [pc, #36]	; 19b24 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   19afc:	e59f0024 	ldr	r0, [pc, #36]	; 19b28 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc4>
   19b00:	eb00296f 	bl	240c4 <assertion_failed>
   19b04:	e59f2020 	ldr	r2, [pc, #32]	; 19b2c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc8>
   19b08:	e59f1014 	ldr	r1, [pc, #20]	; 19b24 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   19b0c:	e59f001c 	ldr	r0, [pc, #28]	; 19b30 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   19b10:	eb00296b 	bl	240c4 <assertion_failed>
   19b14:	e3a02f53 	mov	r2, #332	; 0x14c
   19b18:	e59f1004 	ldr	r1, [pc, #4]	; 19b24 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   19b1c:	e59f0010 	ldr	r0, [pc, #16]	; 19b34 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   19b20:	eb002967 	bl	240c4 <assertion_failed>
   19b24:	00045190 	.word	0x00045190
   19b28:	000451e8 	.word	0x000451e8
   19b2c:	0000014b 	.word	0x0000014b
   19b30:	00045220 	.word	0x00045220
   19b34:	0004522c 	.word	0x0004522c

00019b38 <CTransportLayer::Receive(void*, int, int)>:
   19b38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19b3c:	e2535000 	subs	r5, r3, #0
   19b40:	ba00001a 	blt	19bb0 <CTransportLayer::Receive(void*, int, int)+0x78>
   19b44:	e2804008 	add	r4, r0, #8
   19b48:	e1a00004 	mov	r0, r4
   19b4c:	e1a06001 	mov	r6, r1
   19b50:	e1a07002 	mov	r7, r2
   19b54:	eb00357a 	bl	27144 <CPtrArray::GetCount() const>
   19b58:	e1550000 	cmp	r5, r0
   19b5c:	ba000001 	blt	19b68 <CTransportLayer::Receive(void*, int, int)+0x30>
   19b60:	e3e00000 	mvn	r0, #0
   19b64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19b68:	e1a01005 	mov	r1, r5
   19b6c:	e1a00004 	mov	r0, r4
   19b70:	eb003575 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19b74:	e5903000 	ldr	r3, [r0]
   19b78:	e3530000 	cmp	r3, #0
   19b7c:	0afffff7 	beq	19b60 <CTransportLayer::Receive(void*, int, int)+0x28>
   19b80:	e3560000 	cmp	r6, #0
   19b84:	0a00000d 	beq	19bc0 <CTransportLayer::Receive(void*, int, int)+0x88>
   19b88:	e1a01005 	mov	r1, r5
   19b8c:	e1a00004 	mov	r0, r4
   19b90:	eb00356d 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19b94:	e5900000 	ldr	r0, [r0]
   19b98:	e1a02007 	mov	r2, r7
   19b9c:	e5903000 	ldr	r3, [r0]
   19ba0:	e1a01006 	mov	r1, r6
   19ba4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19ba8:	e5933018 	ldr	r3, [r3, #24]
   19bac:	e12fff13 	bx	r3
   19bb0:	e59f2018 	ldr	r2, [pc, #24]	; 19bd0 <CTransportLayer::Receive(void*, int, int)+0x98>
   19bb4:	e59f1018 	ldr	r1, [pc, #24]	; 19bd4 <CTransportLayer::Receive(void*, int, int)+0x9c>
   19bb8:	e59f0018 	ldr	r0, [pc, #24]	; 19bd8 <CTransportLayer::Receive(void*, int, int)+0xa0>
   19bbc:	eb002940 	bl	240c4 <assertion_failed>
   19bc0:	e59f2014 	ldr	r2, [pc, #20]	; 19bdc <CTransportLayer::Receive(void*, int, int)+0xa4>
   19bc4:	e59f1008 	ldr	r1, [pc, #8]	; 19bd4 <CTransportLayer::Receive(void*, int, int)+0x9c>
   19bc8:	e59f0010 	ldr	r0, [pc, #16]	; 19be0 <CTransportLayer::Receive(void*, int, int)+0xa8>
   19bcc:	eb00293c 	bl	240c4 <assertion_failed>
   19bd0:	00000152 	.word	0x00000152
   19bd4:	00045190 	.word	0x00045190
   19bd8:	000451e8 	.word	0x000451e8
   19bdc:	00000159 	.word	0x00000159
   19be0:	000423b8 	.word	0x000423b8

00019be4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   19be4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19be8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   19bec:	e59d9020 	ldr	r9, [sp, #32]
   19bf0:	e3550000 	cmp	r5, #0
   19bf4:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   19bf8:	ba000021 	blt	19c84 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa0>
   19bfc:	e2804008 	add	r4, r0, #8
   19c00:	e1a00004 	mov	r0, r4
   19c04:	e1a06001 	mov	r6, r1
   19c08:	e1a07002 	mov	r7, r2
   19c0c:	e1a08003 	mov	r8, r3
   19c10:	eb00354b 	bl	27144 <CPtrArray::GetCount() const>
   19c14:	e1550000 	cmp	r5, r0
   19c18:	ba000001 	blt	19c24 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x40>
   19c1c:	e3e00000 	mvn	r0, #0
   19c20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c24:	e1a01005 	mov	r1, r5
   19c28:	e1a00004 	mov	r0, r4
   19c2c:	eb003546 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19c30:	e5903000 	ldr	r3, [r0]
   19c34:	e3530000 	cmp	r3, #0
   19c38:	0afffff7 	beq	19c1c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x38>
   19c3c:	e3560000 	cmp	r6, #0
   19c40:	0a000013 	beq	19c94 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   19c44:	e3570000 	cmp	r7, #0
   19c48:	0a000015 	beq	19ca4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   19c4c:	e1a01005 	mov	r1, r5
   19c50:	e1a00004 	mov	r0, r4
   19c54:	eb00353c 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19c58:	e5900000 	ldr	r0, [r0]
   19c5c:	e1a03008 	mov	r3, r8
   19c60:	e590c000 	ldr	ip, [r0]
   19c64:	e58da024 	str	sl, [sp, #36]	; 0x24
   19c68:	e58d9020 	str	r9, [sp, #32]
   19c6c:	e59ce01c 	ldr	lr, [ip, #28]
   19c70:	e1a02007 	mov	r2, r7
   19c74:	e1a01006 	mov	r1, r6
   19c78:	e1a0c00e 	mov	ip, lr
   19c7c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c80:	e12fff1c 	bx	ip
   19c84:	e3a02e16 	mov	r2, #352	; 0x160
   19c88:	e59f1024 	ldr	r1, [pc, #36]	; 19cb4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19c8c:	e59f0024 	ldr	r0, [pc, #36]	; 19cb8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd4>
   19c90:	eb00290b 	bl	240c4 <assertion_failed>
   19c94:	e59f2020 	ldr	r2, [pc, #32]	; 19cbc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd8>
   19c98:	e59f1014 	ldr	r1, [pc, #20]	; 19cb4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19c9c:	e59f001c 	ldr	r0, [pc, #28]	; 19cc0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   19ca0:	eb002907 	bl	240c4 <assertion_failed>
   19ca4:	e3a02f5a 	mov	r2, #360	; 0x168
   19ca8:	e59f1004 	ldr	r1, [pc, #4]	; 19cb4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19cac:	e59f0010 	ldr	r0, [pc, #16]	; 19cc4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   19cb0:	eb002903 	bl	240c4 <assertion_failed>
   19cb4:	00045190 	.word	0x00045190
   19cb8:	000451e8 	.word	0x000451e8
   19cbc:	00000167 	.word	0x00000167
   19cc0:	00045220 	.word	0x00045220
   19cc4:	0004522c 	.word	0x0004522c

00019cc8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   19cc8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ccc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   19cd0:	e59d9020 	ldr	r9, [sp, #32]
   19cd4:	e3550000 	cmp	r5, #0
   19cd8:	ba00001e 	blt	19d58 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x90>
   19cdc:	e2804008 	add	r4, r0, #8
   19ce0:	e1a00004 	mov	r0, r4
   19ce4:	e1a06001 	mov	r6, r1
   19ce8:	e1a07002 	mov	r7, r2
   19cec:	e1a08003 	mov	r8, r3
   19cf0:	eb003513 	bl	27144 <CPtrArray::GetCount() const>
   19cf4:	e1550000 	cmp	r5, r0
   19cf8:	ba000001 	blt	19d04 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x3c>
   19cfc:	e3e00000 	mvn	r0, #0
   19d00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d04:	e1a01005 	mov	r1, r5
   19d08:	e1a00004 	mov	r0, r4
   19d0c:	eb00350e 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19d10:	e5903000 	ldr	r3, [r0]
   19d14:	e3530000 	cmp	r3, #0
   19d18:	0afffff7 	beq	19cfc <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x34>
   19d1c:	e3560000 	cmp	r6, #0
   19d20:	0a000010 	beq	19d68 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   19d24:	e1a01005 	mov	r1, r5
   19d28:	e1a00004 	mov	r0, r4
   19d2c:	eb003506 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19d30:	e5900000 	ldr	r0, [r0]
   19d34:	e1a03008 	mov	r3, r8
   19d38:	e590c000 	ldr	ip, [r0]
   19d3c:	e58d9020 	str	r9, [sp, #32]
   19d40:	e59ce020 	ldr	lr, [ip, #32]
   19d44:	e1a02007 	mov	r2, r7
   19d48:	e1a01006 	mov	r1, r6
   19d4c:	e1a0c00e 	mov	ip, lr
   19d50:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d54:	e12fff1c 	bx	ip
   19d58:	e3a02e17 	mov	r2, #368	; 0x170
   19d5c:	e59f1014 	ldr	r1, [pc, #20]	; 19d78 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   19d60:	e59f0014 	ldr	r0, [pc, #20]	; 19d7c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb4>
   19d64:	eb0028d6 	bl	240c4 <assertion_failed>
   19d68:	e59f2010 	ldr	r2, [pc, #16]	; 19d80 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   19d6c:	e59f1004 	ldr	r1, [pc, #4]	; 19d78 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   19d70:	e59f000c 	ldr	r0, [pc, #12]	; 19d84 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   19d74:	eb0028d2 	bl	240c4 <assertion_failed>
   19d78:	00045190 	.word	0x00045190
   19d7c:	000451e8 	.word	0x000451e8
   19d80:	00000177 	.word	0x00000177
   19d84:	000423b8 	.word	0x000423b8

00019d88 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   19d88:	e92d4070 	push	{r4, r5, r6, lr}
   19d8c:	e2525000 	subs	r5, r2, #0
   19d90:	ba000016 	blt	19df0 <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   19d94:	e2804008 	add	r4, r0, #8
   19d98:	e1a00004 	mov	r0, r4
   19d9c:	e1a06001 	mov	r6, r1
   19da0:	eb0034e7 	bl	27144 <CPtrArray::GetCount() const>
   19da4:	e1550000 	cmp	r5, r0
   19da8:	ba000001 	blt	19db4 <CTransportLayer::SetOptionBroadcast(bool, int)+0x2c>
   19dac:	e3e00000 	mvn	r0, #0
   19db0:	e8bd8070 	pop	{r4, r5, r6, pc}
   19db4:	e1a01005 	mov	r1, r5
   19db8:	e1a00004 	mov	r0, r4
   19dbc:	eb0034e2 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19dc0:	e5903000 	ldr	r3, [r0]
   19dc4:	e3530000 	cmp	r3, #0
   19dc8:	0afffff7 	beq	19dac <CTransportLayer::SetOptionBroadcast(bool, int)+0x24>
   19dcc:	e1a01005 	mov	r1, r5
   19dd0:	e1a00004 	mov	r0, r4
   19dd4:	eb0034dc 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19dd8:	e5900000 	ldr	r0, [r0]
   19ddc:	e1a01006 	mov	r1, r6
   19de0:	e8bd4070 	pop	{r4, r5, r6, lr}
   19de4:	e5903000 	ldr	r3, [r0]
   19de8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   19dec:	e12fff13 	bx	r3
   19df0:	e59f2008 	ldr	r2, [pc, #8]	; 19e00 <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   19df4:	e59f1008 	ldr	r1, [pc, #8]	; 19e04 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   19df8:	e59f0008 	ldr	r0, [pc, #8]	; 19e08 <CTransportLayer::SetOptionBroadcast(bool, int)+0x80>
   19dfc:	eb0028b0 	bl	240c4 <assertion_failed>
   19e00:	0000017e 	.word	0x0000017e
   19e04:	00045190 	.word	0x00045190
   19e08:	000451e8 	.word	0x000451e8

00019e0c <CTransportLayer::IsConnected(int) const>:
   19e0c:	e92d4070 	push	{r4, r5, r6, lr}
   19e10:	e2515000 	subs	r5, r1, #0
   19e14:	ba000012 	blt	19e64 <CTransportLayer::IsConnected(int) const+0x58>
   19e18:	e2804008 	add	r4, r0, #8
   19e1c:	e1a00004 	mov	r0, r4
   19e20:	eb0034c7 	bl	27144 <CPtrArray::GetCount() const>
   19e24:	e1550000 	cmp	r5, r0
   19e28:	ba000001 	blt	19e34 <CTransportLayer::IsConnected(int) const+0x28>
   19e2c:	e3a00000 	mov	r0, #0
   19e30:	e8bd8070 	pop	{r4, r5, r6, pc}
   19e34:	e1a01005 	mov	r1, r5
   19e38:	e1a00004 	mov	r0, r4
   19e3c:	eb0034de 	bl	271bc <CPtrArray::operator[](unsigned int) const>
   19e40:	e3500000 	cmp	r0, #0
   19e44:	0afffff8 	beq	19e2c <CTransportLayer::IsConnected(int) const+0x20>
   19e48:	e1a01005 	mov	r1, r5
   19e4c:	e1a00004 	mov	r0, r4
   19e50:	eb0034d9 	bl	271bc <CPtrArray::operator[](unsigned int) const>
   19e54:	e8bd4070 	pop	{r4, r5, r6, lr}
   19e58:	e5903000 	ldr	r3, [r0]
   19e5c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   19e60:	e12fff13 	bx	r3
   19e64:	e59f2008 	ldr	r2, [pc, #8]	; 19e74 <CTransportLayer::IsConnected(int) const+0x68>
   19e68:	e59f1008 	ldr	r1, [pc, #8]	; 19e78 <CTransportLayer::IsConnected(int) const+0x6c>
   19e6c:	e59f0008 	ldr	r0, [pc, #8]	; 19e7c <CTransportLayer::IsConnected(int) const+0x70>
   19e70:	eb002893 	bl	240c4 <assertion_failed>
   19e74:	0000018a 	.word	0x0000018a
   19e78:	00045190 	.word	0x00045190
   19e7c:	000451e8 	.word	0x000451e8

00019e80 <CTransportLayer::GetForeignIP(int) const>:
   19e80:	e92d4070 	push	{r4, r5, r6, lr}
   19e84:	e2515000 	subs	r5, r1, #0
   19e88:	ba000010 	blt	19ed0 <CTransportLayer::GetForeignIP(int) const+0x50>
   19e8c:	e2804008 	add	r4, r0, #8
   19e90:	e1a00004 	mov	r0, r4
   19e94:	eb0034aa 	bl	27144 <CPtrArray::GetCount() const>
   19e98:	e1550000 	cmp	r5, r0
   19e9c:	ba000001 	blt	19ea8 <CTransportLayer::GetForeignIP(int) const+0x28>
   19ea0:	e3a00000 	mov	r0, #0
   19ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   19ea8:	e1a01005 	mov	r1, r5
   19eac:	e1a00004 	mov	r0, r4
   19eb0:	eb0034c1 	bl	271bc <CPtrArray::operator[](unsigned int) const>
   19eb4:	e3500000 	cmp	r0, #0
   19eb8:	0afffff8 	beq	19ea0 <CTransportLayer::GetForeignIP(int) const+0x20>
   19ebc:	e1a01005 	mov	r1, r5
   19ec0:	e1a00004 	mov	r0, r4
   19ec4:	eb0034bc 	bl	271bc <CPtrArray::operator[](unsigned int) const>
   19ec8:	e8bd4070 	pop	{r4, r5, r6, lr}
   19ecc:	ea000bd4 	b	1ce24 <CNetConnection::GetForeignIP() const>
   19ed0:	e59f2008 	ldr	r2, [pc, #8]	; 19ee0 <CTransportLayer::GetForeignIP(int) const+0x60>
   19ed4:	e59f1008 	ldr	r1, [pc, #8]	; 19ee4 <CTransportLayer::GetForeignIP(int) const+0x64>
   19ed8:	e59f0008 	ldr	r0, [pc, #8]	; 19ee8 <CTransportLayer::GetForeignIP(int) const+0x68>
   19edc:	eb002878 	bl	240c4 <assertion_failed>
   19ee0:	00000196 	.word	0x00000196
   19ee4:	00045190 	.word	0x00045190
   19ee8:	000451e8 	.word	0x000451e8

00019eec <CTransportLayer::~CTransportLayer()>:
   19eec:	e3a03000 	mov	r3, #0
   19ef0:	e92d4010 	push	{r4, lr}
   19ef4:	e1a04000 	mov	r4, r0
   19ef8:	e5803004 	str	r3, [r0, #4]
   19efc:	e4803020 	str	r3, [r0], #32
   19f00:	eb00188a 	bl	20130 <CTCPRejector::~CTCPRejector()>
   19f04:	e2840008 	add	r0, r4, #8
   19f08:	eb003482 	bl	27118 <CPtrArray::~CPtrArray()>
   19f0c:	e1a00004 	mov	r0, r4
   19f10:	e8bd8010 	pop	{r4, pc}

00019f14 <CTransportLayer::Process()>:
   19f14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f18:	e1a07000 	mov	r7, r0
   19f1c:	e24dde67 	sub	sp, sp, #1648	; 0x670
   19f20:	e24dd004 	sub	sp, sp, #4
   19f24:	e28d0020 	add	r0, sp, #32
   19f28:	e28d6028 	add	r6, sp, #40	; 0x28
   19f2c:	eb0019c7 	bl	20650 <CIPAddress::CIPAddress()>
   19f30:	e1a00006 	mov	r0, r6
   19f34:	eb0019c5 	bl	20650 <CIPAddress::CIPAddress()>
   19f38:	e5970004 	ldr	r0, [r7, #4]
   19f3c:	e3500000 	cmp	r0, #0
   19f40:	12874008 	addne	r4, r7, #8
   19f44:	128d801c 	addne	r8, sp, #28
   19f48:	12879020 	addne	r9, r7, #32
   19f4c:	0a0000a5 	beq	1a1e8 <CTransportLayer::Process()+0x2d4>
   19f50:	e88d0140 	stm	sp, {r6, r8}
   19f54:	e28d3020 	add	r3, sp, #32
   19f58:	e28d2018 	add	r2, sp, #24
   19f5c:	e28d1030 	add	r1, sp, #48	; 0x30
   19f60:	eb00022c 	bl	1a818 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   19f64:	e3500000 	cmp	r0, #0
   19f68:	0a000021 	beq	19ff4 <CTransportLayer::Process()+0xe0>
   19f6c:	e3a05000 	mov	r5, #0
   19f70:	ea000015 	b	19fcc <CTransportLayer::Process()+0xb8>
   19f74:	e1a01005 	mov	r1, r5
   19f78:	e1a00004 	mov	r0, r4
   19f7c:	eb003472 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19f80:	e5903000 	ldr	r3, [r0]
   19f84:	e3530000 	cmp	r3, #0
   19f88:	0a00000e 	beq	19fc8 <CTransportLayer::Process()+0xb4>
   19f8c:	e1a01005 	mov	r1, r5
   19f90:	e1a00004 	mov	r0, r4
   19f94:	eb00346c 	bl	2714c <CPtrArray::operator[](unsigned int)>
   19f98:	e5900000 	ldr	r0, [r0]
   19f9c:	e59d101c 	ldr	r1, [sp, #28]
   19fa0:	e5903000 	ldr	r3, [r0]
   19fa4:	e58d1004 	str	r1, [sp, #4]
   19fa8:	e58d6000 	str	r6, [sp]
   19fac:	e593a034 	ldr	sl, [r3, #52]	; 0x34
   19fb0:	e59d2018 	ldr	r2, [sp, #24]
   19fb4:	e28d3020 	add	r3, sp, #32
   19fb8:	e28d1030 	add	r1, sp, #48	; 0x30
   19fbc:	e12fff3a 	blx	sl
   19fc0:	e3500000 	cmp	r0, #0
   19fc4:	1a000004 	bne	19fdc <CTransportLayer::Process()+0xc8>
   19fc8:	e2855001 	add	r5, r5, #1
   19fcc:	e1a00004 	mov	r0, r4
   19fd0:	eb00345b 	bl	27144 <CPtrArray::GetCount() const>
   19fd4:	e1550000 	cmp	r5, r0
   19fd8:	3affffe5 	bcc	19f74 <CTransportLayer::Process()+0x60>
   19fdc:	e1a00004 	mov	r0, r4
   19fe0:	eb003457 	bl	27144 <CPtrArray::GetCount() const>
   19fe4:	e1550000 	cmp	r5, r0
   19fe8:	2a000064 	bcs	1a180 <CTransportLayer::Process()+0x26c>
   19fec:	e5970004 	ldr	r0, [r7, #4]
   19ff0:	eaffffd6 	b	19f50 <CTransportLayer::Process()+0x3c>
   19ff4:	e28da016 	add	sl, sp, #22
   19ff8:	e28d9014 	add	r9, sp, #20
   19ffc:	e5970004 	ldr	r0, [r7, #4]
   1a000:	e1a03006 	mov	r3, r6
   1a004:	e58d8008 	str	r8, [sp, #8]
   1a008:	e88d0600 	stm	sp, {r9, sl}
   1a00c:	e28d2020 	add	r2, sp, #32
   1a010:	e28d1013 	add	r1, sp, #19
   1a014:	eb000246 	bl	1a934 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a018:	e3500000 	cmp	r0, #0
   1a01c:	0a00001c 	beq	1a094 <CTransportLayer::Process()+0x180>
   1a020:	e3a05000 	mov	r5, #0
   1a024:	e1a00004 	mov	r0, r4
   1a028:	eb003445 	bl	27144 <CPtrArray::GetCount() const>
   1a02c:	e1550000 	cmp	r5, r0
   1a030:	2afffff1 	bcs	19ffc <CTransportLayer::Process()+0xe8>
   1a034:	e1a01005 	mov	r1, r5
   1a038:	e1a00004 	mov	r0, r4
   1a03c:	eb003442 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a040:	e5903000 	ldr	r3, [r0]
   1a044:	e3530000 	cmp	r3, #0
   1a048:	0a00000f 	beq	1a08c <CTransportLayer::Process()+0x178>
   1a04c:	e1a01005 	mov	r1, r5
   1a050:	e1a00004 	mov	r0, r4
   1a054:	eb00343c 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a058:	e1dd21b4 	ldrh	r2, [sp, #20]
   1a05c:	e5900000 	ldr	r0, [r0]
   1a060:	e59de01c 	ldr	lr, [sp, #28]
   1a064:	e1ddc1b6 	ldrh	ip, [sp, #22]
   1a068:	e5903000 	ldr	r3, [r0]
   1a06c:	e88d5004 	stm	sp, {r2, ip, lr}
   1a070:	e5dd1013 	ldrb	r1, [sp, #19]
   1a074:	e593b038 	ldr	fp, [r3, #56]	; 0x38
   1a078:	e28d2020 	add	r2, sp, #32
   1a07c:	e1a03006 	mov	r3, r6
   1a080:	e12fff3b 	blx	fp
   1a084:	e3500000 	cmp	r0, #0
   1a088:	1affffdb 	bne	19ffc <CTransportLayer::Process()+0xe8>
   1a08c:	e2855001 	add	r5, r5, #1
   1a090:	eaffffe3 	b	1a024 <CTransportLayer::Process()+0x110>
   1a094:	e1a05000 	mov	r5, r0
   1a098:	e1a08000 	mov	r8, r0
   1a09c:	ea000005 	b	1a0b8 <CTransportLayer::Process()+0x1a4>
   1a0a0:	eb003429 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a0a4:	e5900000 	ldr	r0, [r0]
   1a0a8:	e5903000 	ldr	r3, [r0]
   1a0ac:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a0b0:	e12fff33 	blx	r3
   1a0b4:	e2855001 	add	r5, r5, #1
   1a0b8:	e1a00004 	mov	r0, r4
   1a0bc:	eb003420 	bl	27144 <CPtrArray::GetCount() const>
   1a0c0:	e1550000 	cmp	r5, r0
   1a0c4:	2a00001c 	bcs	1a13c <CTransportLayer::Process()+0x228>
   1a0c8:	e1a01005 	mov	r1, r5
   1a0cc:	e1a00004 	mov	r0, r4
   1a0d0:	eb00341d 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a0d4:	e5903000 	ldr	r3, [r0]
   1a0d8:	e3530000 	cmp	r3, #0
   1a0dc:	0afffff4 	beq	1a0b4 <CTransportLayer::Process()+0x1a0>
   1a0e0:	e1a01005 	mov	r1, r5
   1a0e4:	e1a00004 	mov	r0, r4
   1a0e8:	eb003417 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a0ec:	e5900000 	ldr	r0, [r0]
   1a0f0:	e5903000 	ldr	r3, [r0]
   1a0f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a0f8:	e12fff33 	blx	r3
   1a0fc:	e3500000 	cmp	r0, #0
   1a100:	e1a01005 	mov	r1, r5
   1a104:	e1a00004 	mov	r0, r4
   1a108:	0affffe4 	beq	1a0a0 <CTransportLayer::Process()+0x18c>
   1a10c:	eb00340e 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a110:	e5900000 	ldr	r0, [r0]
   1a114:	e3500000 	cmp	r0, #0
   1a118:	0a000002 	beq	1a128 <CTransportLayer::Process()+0x214>
   1a11c:	e5903000 	ldr	r3, [r0]
   1a120:	e5933004 	ldr	r3, [r3, #4]
   1a124:	e12fff33 	blx	r3
   1a128:	e1a01005 	mov	r1, r5
   1a12c:	e1a00004 	mov	r0, r4
   1a130:	eb003405 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a134:	e5808000 	str	r8, [r0]
   1a138:	eaffffdd 	b	1a0b4 <CTransportLayer::Process()+0x1a0>
   1a13c:	e597001c 	ldr	r0, [r7, #28]
   1a140:	e3500000 	cmp	r0, #0
   1a144:	1a000025 	bne	1a1e0 <CTransportLayer::Process()+0x2cc>
   1a148:	e1a00004 	mov	r0, r4
   1a14c:	eb0033fc 	bl	27144 <CPtrArray::GetCount() const>
   1a150:	e3500000 	cmp	r0, #0
   1a154:	1a000014 	bne	1a1ac <CTransportLayer::Process()+0x298>
   1a158:	e597301c 	ldr	r3, [r7, #28]
   1a15c:	e3530000 	cmp	r3, #0
   1a160:	1a00000f 	bne	1a1a4 <CTransportLayer::Process()+0x290>
   1a164:	e1a00006 	mov	r0, r6
   1a168:	eb00194e 	bl	206a8 <CIPAddress::~CIPAddress()>
   1a16c:	e28d0020 	add	r0, sp, #32
   1a170:	eb00194c 	bl	206a8 <CIPAddress::~CIPAddress()>
   1a174:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a178:	e28dd004 	add	sp, sp, #4
   1a17c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a180:	e59d301c 	ldr	r3, [sp, #28]
   1a184:	e59d2018 	ldr	r2, [sp, #24]
   1a188:	e58d3004 	str	r3, [sp, #4]
   1a18c:	e58d6000 	str	r6, [sp]
   1a190:	e28d3020 	add	r3, sp, #32
   1a194:	e28d1030 	add	r1, sp, #48	; 0x30
   1a198:	e1a00009 	mov	r0, r9
   1a19c:	eb001838 	bl	20284 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a1a0:	eaffff91 	b	19fec <CTransportLayer::Process()+0xd8>
   1a1a4:	eb00453f 	bl	2b6a8 <LeaveCritical>
   1a1a8:	eaffffed 	b	1a164 <CTransportLayer::Process()+0x250>
   1a1ac:	e2405001 	sub	r5, r0, #1
   1a1b0:	e1a01005 	mov	r1, r5
   1a1b4:	e1a00004 	mov	r0, r4
   1a1b8:	eb0033e3 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1a1bc:	e5903000 	ldr	r3, [r0]
   1a1c0:	e3530000 	cmp	r3, #0
   1a1c4:	1affffe3 	bne	1a158 <CTransportLayer::Process()+0x244>
   1a1c8:	e2455001 	sub	r5, r5, #1
   1a1cc:	e1a00004 	mov	r0, r4
   1a1d0:	eb003453 	bl	27324 <CPtrArray::RemoveLast()>
   1a1d4:	e3750001 	cmn	r5, #1
   1a1d8:	0affffde 	beq	1a158 <CTransportLayer::Process()+0x244>
   1a1dc:	eafffff3 	b	1a1b0 <CTransportLayer::Process()+0x29c>
   1a1e0:	eb004505 	bl	2b5fc <EnterCritical>
   1a1e4:	eaffffd7 	b	1a148 <CTransportLayer::Process()+0x234>
   1a1e8:	e3a0203a 	mov	r2, #58	; 0x3a
   1a1ec:	e59f1004 	ldr	r1, [pc, #4]	; 1a1f8 <CTransportLayer::Process()+0x2e4>
   1a1f0:	e59f0004 	ldr	r0, [pc, #4]	; 1a1fc <CTransportLayer::Process()+0x2e8>
   1a1f4:	eb0027b2 	bl	240c4 <assertion_failed>
   1a1f8:	00045190 	.word	0x00045190
   1a1fc:	000451b8 	.word	0x000451b8

0001a200 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>:
   1a200:	e92d4010 	push	{r4, lr}
   1a204:	e59f2008 	ldr	r2, [pc, #8]	; 1a214 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x14>
   1a208:	e59f1008 	ldr	r1, [pc, #8]	; 1a218 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x18>
   1a20c:	e59f0008 	ldr	r0, [pc, #8]	; 1a21c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x1c>
   1a210:	eb0027ab 	bl	240c4 <assertion_failed>
   1a214:	0000012b 	.word	0x0000012b
   1a218:	00045238 	.word	0x00045238
   1a21c:	0004524c 	.word	0x0004524c

0001a220 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1a220:	e3a03000 	mov	r3, #0
   1a224:	e92d4010 	push	{r4, lr}
   1a228:	e1a04000 	mov	r4, r0
   1a22c:	e880000e 	stm	r0, {r1, r2, r3}
   1a230:	e280000c 	add	r0, r0, #12
   1a234:	eb001a51 	bl	20b80 <CNetQueue::CNetQueue()>
   1a238:	e2840018 	add	r0, r4, #24
   1a23c:	eb001a4f 	bl	20b80 <CNetQueue::CNetQueue()>
   1a240:	e2840024 	add	r0, r4, #36	; 0x24
   1a244:	eb001a4d 	bl	20b80 <CNetQueue::CNetQueue()>
   1a248:	e2840030 	add	r0, r4, #48	; 0x30
   1a24c:	eb000a04 	bl	1ca64 <CRouteCache::CRouteCache()>
   1a250:	e5943000 	ldr	r3, [r4]
   1a254:	e3530000 	cmp	r3, #0
   1a258:	0a000004 	beq	1a270 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1a25c:	e5943004 	ldr	r3, [r4, #4]
   1a260:	e3530000 	cmp	r3, #0
   1a264:	0a000005 	beq	1a280 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1a268:	e1a00004 	mov	r0, r4
   1a26c:	e8bd8010 	pop	{r4, pc}
   1a270:	e3a0201f 	mov	r2, #31
   1a274:	e59f1014 	ldr	r1, [pc, #20]	; 1a290 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a278:	e59f0014 	ldr	r0, [pc, #20]	; 1a294 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1a27c:	eb002790 	bl	240c4 <assertion_failed>
   1a280:	e3a02020 	mov	r2, #32
   1a284:	e59f1004 	ldr	r1, [pc, #4]	; 1a290 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a288:	e59f0008 	ldr	r0, [pc, #8]	; 1a298 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1a28c:	eb00278c 	bl	240c4 <assertion_failed>
   1a290:	00045238 	.word	0x00045238
   1a294:	000451a4 	.word	0x000451a4
   1a298:	00045260 	.word	0x00045260

0001a29c <CNetworkLayer::~CNetworkLayer()>:
   1a29c:	e92d4070 	push	{r4, r5, r6, lr}
   1a2a0:	e5905008 	ldr	r5, [r0, #8]
   1a2a4:	e1a04000 	mov	r4, r0
   1a2a8:	e3550000 	cmp	r5, #0
   1a2ac:	0a000004 	beq	1a2c4 <CNetworkLayer::~CNetworkLayer()+0x28>
   1a2b0:	e1a00005 	mov	r0, r5
   1a2b4:	eb000850 	bl	1c3fc <CICMPHandler::~CICMPHandler()>
   1a2b8:	e1a00005 	mov	r0, r5
   1a2bc:	e3a01010 	mov	r1, #16
   1a2c0:	eb0041a9 	bl	2a96c <operator delete(void*, unsigned int)>
   1a2c4:	e3a03000 	mov	r3, #0
   1a2c8:	e1a00004 	mov	r0, r4
   1a2cc:	e5843008 	str	r3, [r4, #8]
   1a2d0:	e5843004 	str	r3, [r4, #4]
   1a2d4:	e4803030 	str	r3, [r0], #48	; 0x30
   1a2d8:	eb0009fb 	bl	1cacc <CRouteCache::~CRouteCache()>
   1a2dc:	e2840024 	add	r0, r4, #36	; 0x24
   1a2e0:	eb001a60 	bl	20c68 <CNetQueue::~CNetQueue()>
   1a2e4:	e2840018 	add	r0, r4, #24
   1a2e8:	eb001a5e 	bl	20c68 <CNetQueue::~CNetQueue()>
   1a2ec:	e284000c 	add	r0, r4, #12
   1a2f0:	eb001a5c 	bl	20c68 <CNetQueue::~CNetQueue()>
   1a2f4:	e1a00004 	mov	r0, r4
   1a2f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a2fc <CNetworkLayer::Initialize()>:
   1a2fc:	e92d4030 	push	{r4, r5, lr}
   1a300:	e5903008 	ldr	r3, [r0, #8]
   1a304:	e24dd00c 	sub	sp, sp, #12
   1a308:	e3530000 	cmp	r3, #0
   1a30c:	1a00000d 	bne	1a348 <CNetworkLayer::Initialize()+0x4c>
   1a310:	e1a04000 	mov	r4, r0
   1a314:	e3a00010 	mov	r0, #16
   1a318:	eb004185 	bl	2a934 <operator new(unsigned int)>
   1a31c:	e1a02004 	mov	r2, r4
   1a320:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1a324:	e2843018 	add	r3, r4, #24
   1a328:	e58d2000 	str	r2, [sp]
   1a32c:	e1a02004 	mov	r2, r4
   1a330:	e1a05000 	mov	r5, r0
   1a334:	eb000810 	bl	1c37c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1a338:	e3a00001 	mov	r0, #1
   1a33c:	e5845008 	str	r5, [r4, #8]
   1a340:	e28dd00c 	add	sp, sp, #12
   1a344:	e8bd8030 	pop	{r4, r5, pc}
   1a348:	e3a0202e 	mov	r2, #46	; 0x2e
   1a34c:	e59f1004 	ldr	r1, [pc, #4]	; 1a358 <CNetworkLayer::Initialize()+0x5c>
   1a350:	e59f0004 	ldr	r0, [pc, #4]	; 1a35c <CNetworkLayer::Initialize()+0x60>
   1a354:	eb00275a 	bl	240c4 <assertion_failed>
   1a358:	00045238 	.word	0x00045238
   1a35c:	00045274 	.word	0x00045274

0001a360 <CNetworkLayer::Process()>:
   1a360:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a364:	e1a05000 	mov	r5, r0
   1a368:	e5900000 	ldr	r0, [r0]
   1a36c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1a370:	e3500000 	cmp	r0, #0
   1a374:	e24dd00c 	sub	sp, sp, #12
   1a378:	0a000062 	beq	1a508 <CNetworkLayer::Process()+0x1a8>
   1a37c:	eb001857 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1a380:	e2507000 	subs	r7, r0, #0
   1a384:	0a000063 	beq	1a518 <CNetworkLayer::Process()+0x1b8>
   1a388:	e5950004 	ldr	r0, [r5, #4]
   1a38c:	e3500000 	cmp	r0, #0
   1a390:	0a000069 	beq	1a53c <CNetworkLayer::Process()+0x1dc>
   1a394:	e28d3018 	add	r3, sp, #24
   1a398:	e28d6010 	add	r6, sp, #16
   1a39c:	e283b00c 	add	fp, r3, #12
   1a3a0:	e3a0a009 	mov	sl, #9
   1a3a4:	e3a08004 	mov	r8, #4
   1a3a8:	e285900c 	add	r9, r5, #12
   1a3ac:	ea000000 	b	1a3b4 <CNetworkLayer::Process()+0x54>
   1a3b0:	e5950004 	ldr	r0, [r5, #4]
   1a3b4:	e28d200c 	add	r2, sp, #12
   1a3b8:	e28d1018 	add	r1, sp, #24
   1a3bc:	eb00031a 	bl	1b02c <CLinkLayer::Receive(void*, unsigned int*)>
   1a3c0:	e3500000 	cmp	r0, #0
   1a3c4:	0a000048 	beq	1a4ec <CNetworkLayer::Process()+0x18c>
   1a3c8:	e59d300c 	ldr	r3, [sp, #12]
   1a3cc:	e3530014 	cmp	r3, #20
   1a3d0:	9afffff6 	bls	1a3b0 <CNetworkLayer::Process()+0x50>
   1a3d4:	e5dd4018 	ldrb	r4, [sp, #24]
   1a3d8:	e204400f 	and	r4, r4, #15
   1a3dc:	e2442005 	sub	r2, r4, #5
   1a3e0:	e3520001 	cmp	r2, #1
   1a3e4:	8afffff1 	bhi	1a3b0 <CNetworkLayer::Process()+0x50>
   1a3e8:	e1a04104 	lsl	r4, r4, #2
   1a3ec:	e1530004 	cmp	r3, r4
   1a3f0:	9affffee 	bls	1a3b0 <CNetworkLayer::Process()+0x50>
   1a3f4:	e1a01004 	mov	r1, r4
   1a3f8:	e28d0018 	add	r0, sp, #24
   1a3fc:	eb001b2a 	bl	210ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1a400:	e3500000 	cmp	r0, #0
   1a404:	1affffe9 	bne	1a3b0 <CNetworkLayer::Process()+0x50>
   1a408:	e5dd3018 	ldrb	r3, [sp, #24]
   1a40c:	e1a03243 	asr	r3, r3, #4
   1a410:	e3530004 	cmp	r3, #4
   1a414:	1affffe5 	bne	1a3b0 <CNetworkLayer::Process()+0x50>
   1a418:	e28d1028 	add	r1, sp, #40	; 0x28
   1a41c:	e1a00006 	mov	r0, r6
   1a420:	eb001921 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1a424:	e1a00007 	mov	r0, r7
   1a428:	eb001967 	bl	209cc <CIPAddress::IsNull() const>
   1a42c:	e3500000 	cmp	r0, #0
   1a430:	1a00003c 	bne	1a528 <CNetworkLayer::Process()+0x1c8>
   1a434:	e1a01006 	mov	r1, r6
   1a438:	e1a00007 	mov	r0, r7
   1a43c:	eb0018b2 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1a440:	e3500000 	cmp	r0, #0
   1a444:	1a000044 	bne	1a55c <CNetworkLayer::Process()+0x1fc>
   1a448:	e1dd31be 	ldrh	r3, [sp, #30]
   1a44c:	e3130020 	tst	r3, #32
   1a450:	1a000022 	bne	1a4e0 <CNetworkLayer::Process()+0x180>
   1a454:	e6bf3fb3 	rev16	r3, r3
   1a458:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1a45c:	e3530000 	cmp	r3, #0
   1a460:	1a00001e 	bne	1a4e0 <CNetworkLayer::Process()+0x180>
   1a464:	e1dd31ba 	ldrh	r3, [sp, #26]
   1a468:	e59d200c 	ldr	r2, [sp, #12]
   1a46c:	e6bf3fb3 	rev16	r3, r3
   1a470:	e6ff3073 	uxth	r3, r3
   1a474:	e1530002 	cmp	r3, r2
   1a478:	8a000018 	bhi	1a4e0 <CNetworkLayer::Process()+0x180>
   1a47c:	e1a0000a 	mov	r0, sl
   1a480:	e58d300c 	str	r3, [sp, #12]
   1a484:	eb00412a 	bl	2a934 <operator new(unsigned int)>
   1a488:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1a48c:	e58d0004 	str	r0, [sp, #4]
   1a490:	e1a02008 	mov	r2, r8
   1a494:	e4c01001 	strb	r1, [r0], #1
   1a498:	e1a0100b 	mov	r1, fp
   1a49c:	eb003f4b 	bl	2a1d0 <memcpy>
   1a4a0:	e59d3004 	ldr	r3, [sp, #4]
   1a4a4:	e1a02008 	mov	r2, r8
   1a4a8:	e28d1028 	add	r1, sp, #40	; 0x28
   1a4ac:	e2830005 	add	r0, r3, #5
   1a4b0:	eb003f46 	bl	2a1d0 <memcpy>
   1a4b4:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1a4b8:	e59d200c 	ldr	r2, [sp, #12]
   1a4bc:	e3510001 	cmp	r1, #1
   1a4c0:	e28d1018 	add	r1, sp, #24
   1a4c4:	e0422004 	sub	r2, r2, r4
   1a4c8:	e59d3004 	ldr	r3, [sp, #4]
   1a4cc:	e0811004 	add	r1, r1, r4
   1a4d0:	02850018 	addeq	r0, r5, #24
   1a4d4:	11a00009 	movne	r0, r9
   1a4d8:	e58d200c 	str	r2, [sp, #12]
   1a4dc:	eb0019e6 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a4e0:	e1a00006 	mov	r0, r6
   1a4e4:	eb00186f 	bl	206a8 <CIPAddress::~CIPAddress()>
   1a4e8:	eaffffb0 	b	1a3b0 <CNetworkLayer::Process()+0x50>
   1a4ec:	e5950008 	ldr	r0, [r5, #8]
   1a4f0:	e3500000 	cmp	r0, #0
   1a4f4:	0a000014 	beq	1a54c <CNetworkLayer::Process()+0x1ec>
   1a4f8:	eb0007fe 	bl	1c4f8 <CICMPHandler::Process()>
   1a4fc:	e28dde65 	add	sp, sp, #1616	; 0x650
   1a500:	e28dd00c 	add	sp, sp, #12
   1a504:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a508:	e3a02037 	mov	r2, #55	; 0x37
   1a50c:	e59f1074 	ldr	r1, [pc, #116]	; 1a588 <CNetworkLayer::Process()+0x228>
   1a510:	e59f0074 	ldr	r0, [pc, #116]	; 1a58c <CNetworkLayer::Process()+0x22c>
   1a514:	eb0026ea 	bl	240c4 <assertion_failed>
   1a518:	e3a02039 	mov	r2, #57	; 0x39
   1a51c:	e59f1064 	ldr	r1, [pc, #100]	; 1a588 <CNetworkLayer::Process()+0x228>
   1a520:	e59f0068 	ldr	r0, [pc, #104]	; 1a590 <CNetworkLayer::Process()+0x230>
   1a524:	eb0026e6 	bl	240c4 <assertion_failed>
   1a528:	e1a00006 	mov	r0, r6
   1a52c:	eb001934 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1a530:	e3500000 	cmp	r0, #0
   1a534:	1affffc3 	bne	1a448 <CNetworkLayer::Process()+0xe8>
   1a538:	eaffffe8 	b	1a4e0 <CNetworkLayer::Process()+0x180>
   1a53c:	e3a0203d 	mov	r2, #61	; 0x3d
   1a540:	e59f1040 	ldr	r1, [pc, #64]	; 1a588 <CNetworkLayer::Process()+0x228>
   1a544:	e59f0048 	ldr	r0, [pc, #72]	; 1a594 <CNetworkLayer::Process()+0x234>
   1a548:	eb0026dd 	bl	240c4 <assertion_failed>
   1a54c:	e3a0208a 	mov	r2, #138	; 0x8a
   1a550:	e59f1030 	ldr	r1, [pc, #48]	; 1a588 <CNetworkLayer::Process()+0x228>
   1a554:	e59f003c 	ldr	r0, [pc, #60]	; 1a598 <CNetworkLayer::Process()+0x238>
   1a558:	eb0026d9 	bl	240c4 <assertion_failed>
   1a55c:	e1a00006 	mov	r0, r6
   1a560:	eb001927 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1a564:	e3500000 	cmp	r0, #0
   1a568:	1affffb6 	bne	1a448 <CNetworkLayer::Process()+0xe8>
   1a56c:	e5950000 	ldr	r0, [r5]
   1a570:	eb0017e4 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1a574:	e1a01006 	mov	r1, r6
   1a578:	eb001863 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1a57c:	e3500000 	cmp	r0, #0
   1a580:	1affffd6 	bne	1a4e0 <CNetworkLayer::Process()+0x180>
   1a584:	eaffffaf 	b	1a448 <CNetworkLayer::Process()+0xe8>
   1a588:	00045238 	.word	0x00045238
   1a58c:	000451a4 	.word	0x000451a4
   1a590:	00045288 	.word	0x00045288
   1a594:	00045260 	.word	0x00045260
   1a598:	0004524c 	.word	0x0004524c

0001a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1a59c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a0:	e59fc254 	ldr	ip, [pc, #596]	; 1a7fc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x260>
   1a5a4:	e243e001 	sub	lr, r3, #1
   1a5a8:	e28db020 	add	fp, sp, #32
   1a5ac:	e15e000c 	cmp	lr, ip
   1a5b0:	e24dd014 	sub	sp, sp, #20
   1a5b4:	8a00004b 	bhi	1a6e8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   1a5b8:	e1a06000 	mov	r6, r0
   1a5bc:	e3a0a000 	mov	sl, #0
   1a5c0:	e3a0c040 	mov	ip, #64	; 0x40
   1a5c4:	e3a0e045 	mov	lr, #69	; 0x45
   1a5c8:	e2838014 	add	r8, r3, #20
   1a5cc:	e1a07002 	mov	r7, r2
   1a5d0:	e1a05001 	mov	r5, r1
   1a5d4:	e6bf2fb8 	rev16	r2, r8
   1a5d8:	e283101b 	add	r1, r3, #27
   1a5dc:	e6ff2072 	uxth	r2, r2
   1a5e0:	e3c11007 	bic	r1, r1, #7
   1a5e4:	e04dd001 	sub	sp, sp, r1
   1a5e8:	e1a00422 	lsr	r0, r2, #8
   1a5ec:	e5cd0003 	strb	r0, [sp, #3]
   1a5f0:	e5960000 	ldr	r0, [r6]
   1a5f4:	e1a04003 	mov	r4, r3
   1a5f8:	e5db3004 	ldrb	r3, [fp, #4]
   1a5fc:	e150000a 	cmp	r0, sl
   1a600:	e5cd2002 	strb	r2, [sp, #2]
   1a604:	e5cd3009 	strb	r3, [sp, #9]
   1a608:	e5cde000 	strb	lr, [sp]
   1a60c:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   1a610:	e5cda001 	strb	sl, [sp, #1]
   1a614:	e5cda004 	strb	sl, [sp, #4]
   1a618:	e5cda005 	strb	sl, [sp, #5]
   1a61c:	e5cda007 	strb	sl, [sp, #7]
   1a620:	e5cdc006 	strb	ip, [sp, #6]
   1a624:	e5cdc008 	strb	ip, [sp, #8]
   1a628:	0a000044 	beq	1a740 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a4>
   1a62c:	eb0017ab 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1a630:	e2509000 	subs	r9, r0, #0
   1a634:	0a00002f 	beq	1a6f8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x15c>
   1a638:	e28d100c 	add	r1, sp, #12
   1a63c:	eb0018cb 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1a640:	e28d1010 	add	r1, sp, #16
   1a644:	e1a00005 	mov	r0, r5
   1a648:	eb0018c8 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1a64c:	e3a01014 	mov	r1, #20
   1a650:	e1a0000d 	mov	r0, sp
   1a654:	e5cda00a 	strb	sl, [sp, #10]
   1a658:	e5cda00b 	strb	sl, [sp, #11]
   1a65c:	eb001a92 	bl	210ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1a660:	e3570000 	cmp	r7, #0
   1a664:	e1a03420 	lsr	r3, r0, #8
   1a668:	e5cd000a 	strb	r0, [sp, #10]
   1a66c:	e5cd300b 	strb	r3, [sp, #11]
   1a670:	0a00003a 	beq	1a760 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c4>
   1a674:	e1a02004 	mov	r2, r4
   1a678:	e1a01007 	mov	r1, r7
   1a67c:	e28d0014 	add	r0, sp, #20
   1a680:	eb003ed2 	bl	2a1d0 <memcpy>
   1a684:	e1a00009 	mov	r0, r9
   1a688:	eb0018cf 	bl	209cc <CIPAddress::IsNull() const>
   1a68c:	e3500000 	cmp	r0, #0
   1a690:	1a00001c 	bne	1a708 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x16c>
   1a694:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1a698:	eb0017ec 	bl	20650 <CIPAddress::CIPAddress()>
   1a69c:	e5960000 	ldr	r0, [r6]
   1a6a0:	eb001792 	bl	204f0 <CNetConfig::GetNetMask() const>
   1a6a4:	e1a01005 	mov	r1, r5
   1a6a8:	e1a02000 	mov	r2, r0
   1a6ac:	e1a00009 	mov	r0, r9
   1a6b0:	eb001905 	bl	20acc <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1a6b4:	e2504000 	subs	r4, r0, #0
   1a6b8:	0a00002c 	beq	1a770 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d4>
   1a6bc:	e5960004 	ldr	r0, [r6, #4]
   1a6c0:	e3500000 	cmp	r0, #0
   1a6c4:	0a000021 	beq	1a750 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1a6c8:	e1a03008 	mov	r3, r8
   1a6cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a6d0:	e1a01005 	mov	r1, r5
   1a6d4:	eb0001ea 	bl	1ae84 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1a6d8:	e1a04000 	mov	r4, r0
   1a6dc:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1a6e0:	eb0017f0 	bl	206a8 <CIPAddress::~CIPAddress()>
   1a6e4:	ea000000 	b	1a6ec <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x150>
   1a6e8:	e3a04000 	mov	r4, #0
   1a6ec:	e1a00004 	mov	r0, r4
   1a6f0:	e24bd020 	sub	sp, fp, #32
   1a6f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6f8:	e3a020a4 	mov	r2, #164	; 0xa4
   1a6fc:	e59f10fc 	ldr	r1, [pc, #252]	; 1a800 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1a700:	e59f00fc 	ldr	r0, [pc, #252]	; 1a804 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x268>
   1a704:	eb00266e 	bl	240c4 <assertion_failed>
   1a708:	e1a00005 	mov	r0, r5
   1a70c:	eb0018bc 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1a710:	e2504000 	subs	r4, r0, #0
   1a714:	1affffde 	bne	1a694 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf8>
   1a718:	e5960008 	ldr	r0, [r6, #8]
   1a71c:	e3500000 	cmp	r0, #0
   1a720:	0a00001d 	beq	1a79c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1a724:	e1a03008 	mov	r3, r8
   1a728:	e1a0200d 	mov	r2, sp
   1a72c:	e1a01004 	mov	r1, r4
   1a730:	eb000864 	bl	1c8c8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1a734:	e1a00004 	mov	r0, r4
   1a738:	e24bd020 	sub	sp, fp, #32
   1a73c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a740:	e3a020a2 	mov	r2, #162	; 0xa2
   1a744:	e59f10b4 	ldr	r1, [pc, #180]	; 1a800 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1a748:	e59f00b8 	ldr	r0, [pc, #184]	; 1a808 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x26c>
   1a74c:	eb00265c 	bl	240c4 <assertion_failed>
   1a750:	e3a020d0 	mov	r2, #208	; 0xd0
   1a754:	e59f10a4 	ldr	r1, [pc, #164]	; 1a800 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1a758:	e59f00ac 	ldr	r0, [pc, #172]	; 1a80c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   1a75c:	eb002658 	bl	240c4 <assertion_failed>
   1a760:	e3a020ad 	mov	r2, #173	; 0xad
   1a764:	e59f1094 	ldr	r1, [pc, #148]	; 1a800 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1a768:	e59f00a0 	ldr	r0, [pc, #160]	; 1a810 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x274>
   1a76c:	eb002654 	bl	240c4 <assertion_failed>
   1a770:	e1a00005 	mov	r0, r5
   1a774:	eb001871 	bl	20940 <CIPAddress::Get() const>
   1a778:	e1a01000 	mov	r1, r0
   1a77c:	e2860030 	add	r0, r6, #48	; 0x30
   1a780:	eb000912 	bl	1cbd0 <CRouteCache::GetRoute(unsigned char const*) const>
   1a784:	e2501000 	subs	r1, r0, #0
   1a788:	0a000004 	beq	1a7a0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x204>
   1a78c:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1a790:	eb001835 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1a794:	e24b502c 	sub	r5, fp, #44	; 0x2c
   1a798:	eaffffc7 	b	1a6bc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x120>
   1a79c:	ebfffe97 	bl	1a200 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>
   1a7a0:	e5960000 	ldr	r0, [r6]
   1a7a4:	eb001753 	bl	204f8 <CNetConfig::GetDefaultGateway() const>
   1a7a8:	e1a05000 	mov	r5, r0
   1a7ac:	eb001886 	bl	209cc <CIPAddress::IsNull() const>
   1a7b0:	e3500000 	cmp	r0, #0
   1a7b4:	0a000007 	beq	1a7d8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   1a7b8:	e5960008 	ldr	r0, [r6, #8]
   1a7bc:	e3500000 	cmp	r0, #0
   1a7c0:	0afffff5 	beq	1a79c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1a7c4:	e1a03008 	mov	r3, r8
   1a7c8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a7cc:	e1a01004 	mov	r1, r4
   1a7d0:	eb00083c 	bl	1c8c8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1a7d4:	eaffffc0 	b	1a6dc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   1a7d8:	e5960004 	ldr	r0, [r6, #4]
   1a7dc:	e3500000 	cmp	r0, #0
   1a7e0:	0affffda 	beq	1a750 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1a7e4:	e3550000 	cmp	r5, #0
   1a7e8:	1affffb6 	bne	1a6c8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x12c>
   1a7ec:	e3a020d1 	mov	r2, #209	; 0xd1
   1a7f0:	e59f1008 	ldr	r1, [pc, #8]	; 1a800 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1a7f4:	e59f0018 	ldr	r0, [pc, #24]	; 1a814 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1a7f8:	eb002631 	bl	240c4 <assertion_failed>
   1a7fc:	0000062b 	.word	0x0000062b
   1a800:	00045238 	.word	0x00045238
   1a804:	00045288 	.word	0x00045288
   1a808:	000451a4 	.word	0x000451a4
   1a80c:	00045260 	.word	0x00045260
   1a810:	0004529c 	.word	0x0004529c
   1a814:	000452ac 	.word	0x000452ac

0001a818 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1a818:	e92d4030 	push	{r4, r5, lr}
   1a81c:	e3510000 	cmp	r1, #0
   1a820:	e24dd00c 	sub	sp, sp, #12
   1a824:	0a000023 	beq	1a8b8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1a828:	e3520000 	cmp	r2, #0
   1a82c:	e1a04002 	mov	r4, r2
   1a830:	0a000024 	beq	1a8c8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1a834:	e280000c 	add	r0, r0, #12
   1a838:	e28d2004 	add	r2, sp, #4
   1a83c:	e1a05003 	mov	r5, r3
   1a840:	eb001953 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1a844:	e3500000 	cmp	r0, #0
   1a848:	e5840000 	str	r0, [r4]
   1a84c:	0a000017 	beq	1a8b0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1a850:	e59d4004 	ldr	r4, [sp, #4]
   1a854:	e3540000 	cmp	r4, #0
   1a858:	0a00001e 	beq	1a8d8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1a85c:	e59d301c 	ldr	r3, [sp, #28]
   1a860:	e3530000 	cmp	r3, #0
   1a864:	0a00001f 	beq	1a8e8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1a868:	e5d43000 	ldrb	r3, [r4]
   1a86c:	e59d201c 	ldr	r2, [sp, #28]
   1a870:	e3550000 	cmp	r5, #0
   1a874:	e5823000 	str	r3, [r2]
   1a878:	0a00001e 	beq	1a8f8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1a87c:	e1a00005 	mov	r0, r5
   1a880:	e2841001 	add	r1, r4, #1
   1a884:	eb0017f8 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1a888:	e59d3018 	ldr	r3, [sp, #24]
   1a88c:	e3530000 	cmp	r3, #0
   1a890:	0a00001c 	beq	1a908 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1a894:	e2841005 	add	r1, r4, #5
   1a898:	e59d0018 	ldr	r0, [sp, #24]
   1a89c:	eb0017f2 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1a8a0:	e1a00004 	mov	r0, r4
   1a8a4:	e3a01009 	mov	r1, #9
   1a8a8:	eb00402f 	bl	2a96c <operator delete(void*, unsigned int)>
   1a8ac:	e3a00001 	mov	r0, #1
   1a8b0:	e28dd00c 	add	sp, sp, #12
   1a8b4:	e8bd8030 	pop	{r4, r5, pc}
   1a8b8:	e3a020d9 	mov	r2, #217	; 0xd9
   1a8bc:	e59f1054 	ldr	r1, [pc, #84]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a8c0:	e59f0054 	ldr	r0, [pc, #84]	; 1a91c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1a8c4:	eb0025fe 	bl	240c4 <assertion_failed>
   1a8c8:	e3a020da 	mov	r2, #218	; 0xda
   1a8cc:	e59f1044 	ldr	r1, [pc, #68]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a8d0:	e59f0048 	ldr	r0, [pc, #72]	; 1a920 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1a8d4:	eb0025fa 	bl	240c4 <assertion_failed>
   1a8d8:	e3a020e2 	mov	r2, #226	; 0xe2
   1a8dc:	e59f1034 	ldr	r1, [pc, #52]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a8e0:	e59f003c 	ldr	r0, [pc, #60]	; 1a924 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1a8e4:	eb0025f6 	bl	240c4 <assertion_failed>
   1a8e8:	e3a020e4 	mov	r2, #228	; 0xe4
   1a8ec:	e59f1024 	ldr	r1, [pc, #36]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a8f0:	e59f0030 	ldr	r0, [pc, #48]	; 1a928 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1a8f4:	eb0025f2 	bl	240c4 <assertion_failed>
   1a8f8:	e3a020e7 	mov	r2, #231	; 0xe7
   1a8fc:	e59f1014 	ldr	r1, [pc, #20]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a900:	e59f0024 	ldr	r0, [pc, #36]	; 1a92c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1a904:	eb0025ee 	bl	240c4 <assertion_failed>
   1a908:	e3a020ea 	mov	r2, #234	; 0xea
   1a90c:	e59f1004 	ldr	r1, [pc, #4]	; 1a918 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a910:	e59f0018 	ldr	r0, [pc, #24]	; 1a930 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1a914:	eb0025ea 	bl	240c4 <assertion_failed>
   1a918:	00045238 	.word	0x00045238
   1a91c:	000423b8 	.word	0x000423b8
   1a920:	00042be4 	.word	0x00042be4
   1a924:	00045220 	.word	0x00045220
   1a928:	000452bc 	.word	0x000452bc
   1a92c:	000452cc 	.word	0x000452cc
   1a930:	000452dc 	.word	0x000452dc

0001a934 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1a934:	e92d4070 	push	{r4, r5, r6, lr}
   1a938:	e24dd010 	sub	sp, sp, #16
   1a93c:	e1a04001 	mov	r4, r1
   1a940:	e1a05002 	mov	r5, r2
   1a944:	e2800024 	add	r0, r0, #36	; 0x24
   1a948:	e3a02000 	mov	r2, #0
   1a94c:	e1a0100d 	mov	r1, sp
   1a950:	e1a06003 	mov	r6, r3
   1a954:	eb00190e 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1a958:	e3500000 	cmp	r0, #0
   1a95c:	0a000022 	beq	1a9ec <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   1a960:	e350000e 	cmp	r0, #14
   1a964:	1a000026 	bne	1aa04 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd0>
   1a968:	e3540000 	cmp	r4, #0
   1a96c:	0a000020 	beq	1a9f4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc0>
   1a970:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1a974:	e5dd3000 	ldrb	r3, [sp]
   1a978:	e3520000 	cmp	r2, #0
   1a97c:	e5c43000 	strb	r3, [r4]
   1a980:	0a000023 	beq	1aa14 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe0>
   1a984:	e5dd3001 	ldrb	r3, [sp, #1]
   1a988:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1a98c:	e3550000 	cmp	r5, #0
   1a990:	e5823000 	str	r3, [r2]
   1a994:	0a000022 	beq	1aa24 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xf0>
   1a998:	e1a00005 	mov	r0, r5
   1a99c:	e28d1002 	add	r1, sp, #2
   1a9a0:	eb0017b1 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1a9a4:	e3560000 	cmp	r6, #0
   1a9a8:	0a000021 	beq	1aa34 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x100>
   1a9ac:	e1a00006 	mov	r0, r6
   1a9b0:	e28d1006 	add	r1, sp, #6
   1a9b4:	eb0017ac 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1a9b8:	e59d3020 	ldr	r3, [sp, #32]
   1a9bc:	e3530000 	cmp	r3, #0
   1a9c0:	0a00001f 	beq	1aa44 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x110>
   1a9c4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1a9c8:	e1dd30ba 	ldrh	r3, [sp, #10]
   1a9cc:	e3520000 	cmp	r2, #0
   1a9d0:	e59d2020 	ldr	r2, [sp, #32]
   1a9d4:	e1c230b0 	strh	r3, [r2]
   1a9d8:	0a00001d 	beq	1aa54 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   1a9dc:	e3a00001 	mov	r0, #1
   1a9e0:	e1dd30bc 	ldrh	r3, [sp, #12]
   1a9e4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1a9e8:	e1c230b0 	strh	r3, [r2]
   1a9ec:	e28dd010 	add	sp, sp, #16
   1a9f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a9f4:	e3a02c01 	mov	r2, #256	; 0x100
   1a9f8:	e59f1064 	ldr	r1, [pc, #100]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1a9fc:	e59f0064 	ldr	r0, [pc, #100]	; 1aa68 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1aa00:	eb0025af 	bl	240c4 <assertion_failed>
   1aa04:	e3a020fe 	mov	r2, #254	; 0xfe
   1aa08:	e59f1054 	ldr	r1, [pc, #84]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa0c:	e59f0058 	ldr	r0, [pc, #88]	; 1aa6c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1aa10:	eb0025ab 	bl	240c4 <assertion_failed>
   1aa14:	e59f2054 	ldr	r2, [pc, #84]	; 1aa70 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1aa18:	e59f1044 	ldr	r1, [pc, #68]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa1c:	e59f0050 	ldr	r0, [pc, #80]	; 1aa74 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1aa20:	eb0025a7 	bl	240c4 <assertion_failed>
   1aa24:	e59f204c 	ldr	r2, [pc, #76]	; 1aa78 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1aa28:	e59f1034 	ldr	r1, [pc, #52]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa2c:	e59f0048 	ldr	r0, [pc, #72]	; 1aa7c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1aa30:	eb0025a3 	bl	240c4 <assertion_failed>
   1aa34:	e59f2044 	ldr	r2, [pc, #68]	; 1aa80 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1aa38:	e59f1024 	ldr	r1, [pc, #36]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa3c:	e59f0040 	ldr	r0, [pc, #64]	; 1aa84 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1aa40:	eb00259f 	bl	240c4 <assertion_failed>
   1aa44:	e3a02f43 	mov	r2, #268	; 0x10c
   1aa48:	e59f1014 	ldr	r1, [pc, #20]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa4c:	e59f0034 	ldr	r0, [pc, #52]	; 1aa88 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1aa50:	eb00259b 	bl	240c4 <assertion_failed>
   1aa54:	e59f2030 	ldr	r2, [pc, #48]	; 1aa8c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1aa58:	e59f1004 	ldr	r1, [pc, #4]	; 1aa64 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1aa5c:	e59f002c 	ldr	r0, [pc, #44]	; 1aa90 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x15c>
   1aa60:	eb002597 	bl	240c4 <assertion_failed>
   1aa64:	00045238 	.word	0x00045238
   1aa68:	0004530c 	.word	0x0004530c
   1aa6c:	000452ec 	.word	0x000452ec
   1aa70:	00000103 	.word	0x00000103
   1aa74:	000452bc 	.word	0x000452bc
   1aa78:	00000106 	.word	0x00000106
   1aa7c:	000452cc 	.word	0x000452cc
   1aa80:	00000109 	.word	0x00000109
   1aa84:	000452dc 	.word	0x000452dc
   1aa88:	00045318 	.word	0x00045318
   1aa8c:	0000010f 	.word	0x0000010f
   1aa90:	00045328 	.word	0x00045328

0001aa94 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1aa94:	e2800030 	add	r0, r0, #48	; 0x30
   1aa98:	ea000812 	b	1cae8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001aa9c <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1aa9c:	e92d4010 	push	{r4, lr}
   1aaa0:	e1a04000 	mov	r4, r0
   1aaa4:	e2800030 	add	r0, r0, #48	; 0x30
   1aaa8:	eb000848 	bl	1cbd0 <CRouteCache::GetRoute(unsigned char const*) const>
   1aaac:	e3500000 	cmp	r0, #0
   1aab0:	18bd8010 	popne	{r4, pc}
   1aab4:	e5940000 	ldr	r0, [r4]
   1aab8:	e3500000 	cmp	r0, #0
   1aabc:	0a000004 	beq	1aad4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1aac0:	eb00168c 	bl	204f8 <CNetConfig::GetDefaultGateway() const>
   1aac4:	e3500000 	cmp	r0, #0
   1aac8:	0a000005 	beq	1aae4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1aacc:	e8bd4010 	pop	{r4, lr}
   1aad0:	ea00179a 	b	20940 <CIPAddress::Get() const>
   1aad4:	e59f2018 	ldr	r2, [pc, #24]	; 1aaf4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1aad8:	e59f1018 	ldr	r1, [pc, #24]	; 1aaf8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1aadc:	e59f0018 	ldr	r0, [pc, #24]	; 1aafc <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1aae0:	eb002577 	bl	240c4 <assertion_failed>
   1aae4:	e3a02f49 	mov	r2, #292	; 0x124
   1aae8:	e59f1008 	ldr	r1, [pc, #8]	; 1aaf8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1aaec:	e59f000c 	ldr	r0, [pc, #12]	; 1ab00 <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1aaf0:	eb002573 	bl	240c4 <assertion_failed>
   1aaf4:	00000122 	.word	0x00000122
   1aaf8:	00045238 	.word	0x00045238
   1aafc:	000451a4 	.word	0x000451a4
   1ab00:	0004533c 	.word	0x0004533c

0001ab04 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1ab04:	e5900008 	ldr	r0, [r0, #8]
   1ab08:	e3500000 	cmp	r0, #0
   1ab0c:	0a000000 	beq	1ab14 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1ab10:	ea00076c 	b	1c8c8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1ab14:	e92d4010 	push	{r4, lr}
   1ab18:	ebfffdb8 	bl	1a200 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001ab1c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1ab1c:	e92d4070 	push	{r4, r5, r6, lr}
   1ab20:	e3a05000 	mov	r5, #0
   1ab24:	e1a04000 	mov	r4, r0
   1ab28:	e8800026 	stm	r0, {r1, r2, r5}
   1ab2c:	e580500c 	str	r5, [r0, #12]
   1ab30:	e2800010 	add	r0, r0, #16
   1ab34:	eb001811 	bl	20b80 <CNetQueue::CNetQueue()>
   1ab38:	e284001c 	add	r0, r4, #28
   1ab3c:	eb00180f 	bl	20b80 <CNetQueue::CNetQueue()>
   1ab40:	e2840028 	add	r0, r4, #40	; 0x28
   1ab44:	eb00180d 	bl	20b80 <CNetQueue::CNetQueue()>
   1ab48:	e5943000 	ldr	r3, [r4]
   1ab4c:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1ab50:	e1530005 	cmp	r3, r5
   1ab54:	0a000004 	beq	1ab6c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1ab58:	e5943004 	ldr	r3, [r4, #4]
   1ab5c:	e3530000 	cmp	r3, #0
   1ab60:	0a000005 	beq	1ab7c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1ab64:	e1a00004 	mov	r0, r4
   1ab68:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ab6c:	e3a02025 	mov	r2, #37	; 0x25
   1ab70:	e59f1014 	ldr	r1, [pc, #20]	; 1ab8c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1ab74:	e59f0014 	ldr	r0, [pc, #20]	; 1ab90 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1ab78:	eb002551 	bl	240c4 <assertion_failed>
   1ab7c:	e3a02026 	mov	r2, #38	; 0x26
   1ab80:	e59f1004 	ldr	r1, [pc, #4]	; 1ab8c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1ab84:	e59f0008 	ldr	r0, [pc, #8]	; 1ab94 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1ab88:	eb00254d 	bl	240c4 <assertion_failed>
   1ab8c:	00045354 	.word	0x00045354
   1ab90:	000451a4 	.word	0x000451a4
   1ab94:	00045364 	.word	0x00045364

0001ab98 <CLinkLayer::~CLinkLayer()>:
   1ab98:	e92d4070 	push	{r4, r5, r6, lr}
   1ab9c:	e590500c 	ldr	r5, [r0, #12]
   1aba0:	e1a04000 	mov	r4, r0
   1aba4:	e3550000 	cmp	r5, #0
   1aba8:	0a000004 	beq	1abc0 <CLinkLayer::~CLinkLayer()+0x28>
   1abac:	e1a00005 	mov	r0, r5
   1abb0:	eb00030e 	bl	1b7f0 <CARPHandler::~CARPHandler()>
   1abb4:	e1a00005 	mov	r0, r5
   1abb8:	e3a01f93 	mov	r1, #588	; 0x24c
   1abbc:	eb003f6a 	bl	2a96c <operator delete(void*, unsigned int)>
   1abc0:	e3a03000 	mov	r3, #0
   1abc4:	e1a00004 	mov	r0, r4
   1abc8:	e584300c 	str	r3, [r4, #12]
   1abcc:	e5843008 	str	r3, [r4, #8]
   1abd0:	e5843004 	str	r3, [r4, #4]
   1abd4:	e4803028 	str	r3, [r0], #40	; 0x28
   1abd8:	eb001822 	bl	20c68 <CNetQueue::~CNetQueue()>
   1abdc:	e284001c 	add	r0, r4, #28
   1abe0:	eb001820 	bl	20c68 <CNetQueue::~CNetQueue()>
   1abe4:	e2840010 	add	r0, r4, #16
   1abe8:	eb00181e 	bl	20c68 <CNetQueue::~CNetQueue()>
   1abec:	e1a00004 	mov	r0, r4
   1abf0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001abf4 <CLinkLayer::Initialize()>:
   1abf4:	e92d4030 	push	{r4, r5, lr}
   1abf8:	e5903000 	ldr	r3, [r0]
   1abfc:	e24dd00c 	sub	sp, sp, #12
   1ac00:	e3530000 	cmp	r3, #0
   1ac04:	0a00000d 	beq	1ac40 <CLinkLayer::Initialize()+0x4c>
   1ac08:	e1a04000 	mov	r4, r0
   1ac0c:	e3a00f93 	mov	r0, #588	; 0x24c
   1ac10:	eb003f47 	bl	2a934 <operator new(unsigned int)>
   1ac14:	e1a03004 	mov	r3, r4
   1ac18:	e4931010 	ldr	r1, [r3], #16
   1ac1c:	e5942004 	ldr	r2, [r4, #4]
   1ac20:	e58d3000 	str	r3, [sp]
   1ac24:	e1a03004 	mov	r3, r4
   1ac28:	e1a05000 	mov	r5, r0
   1ac2c:	eb0002c9 	bl	1b758 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1ac30:	e3a00001 	mov	r0, #1
   1ac34:	e584500c 	str	r5, [r4, #12]
   1ac38:	e28dd00c 	add	sp, sp, #12
   1ac3c:	e8bd8030 	pop	{r4, r5, pc}
   1ac40:	e3a02035 	mov	r2, #53	; 0x35
   1ac44:	e59f1004 	ldr	r1, [pc, #4]	; 1ac50 <CLinkLayer::Initialize()+0x5c>
   1ac48:	e59f0004 	ldr	r0, [pc, #4]	; 1ac54 <CLinkLayer::Initialize()+0x60>
   1ac4c:	eb00251c 	bl	240c4 <assertion_failed>
   1ac50:	00045354 	.word	0x00045354
   1ac54:	000451a4 	.word	0x000451a4

0001ac58 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1ac58:	e5903008 	ldr	r3, [r0, #8]
   1ac5c:	e92d4010 	push	{r4, lr}
   1ac60:	e3530000 	cmp	r3, #0
   1ac64:	1a000006 	bne	1ac84 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1ac68:	e3510000 	cmp	r1, #0
   1ac6c:	e5801008 	str	r1, [r0, #8]
   1ac70:	18bd8010 	popne	{r4, pc}
   1ac74:	e3a02040 	mov	r2, #64	; 0x40
   1ac78:	e59f1014 	ldr	r1, [pc, #20]	; 1ac94 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1ac7c:	e59f0014 	ldr	r0, [pc, #20]	; 1ac98 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1ac80:	eb00250f 	bl	240c4 <assertion_failed>
   1ac84:	e3a0203e 	mov	r2, #62	; 0x3e
   1ac88:	e59f1004 	ldr	r1, [pc, #4]	; 1ac94 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1ac8c:	e59f0008 	ldr	r0, [pc, #8]	; 1ac9c <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1ac90:	eb00250b 	bl	240c4 <assertion_failed>
   1ac94:	00045354 	.word	0x00045354
   1ac98:	000451b8 	.word	0x000451b8
   1ac9c:	00045378 	.word	0x00045378

0001aca0 <CLinkLayer::Process()>:
   1aca0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aca4:	e1a04000 	mov	r4, r0
   1aca8:	e5900004 	ldr	r0, [r0, #4]
   1acac:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1acb0:	e3500000 	cmp	r0, #0
   1acb4:	e24dd00c 	sub	sp, sp, #12
   1acb8:	0a00004a 	beq	1ade8 <CLinkLayer::Process()+0x148>
   1acbc:	eb000214 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   1acc0:	e2506000 	subs	r6, r0, #0
   1acc4:	0a00004f 	beq	1ae08 <CLinkLayer::Process()+0x168>
   1acc8:	e5940004 	ldr	r0, [r4, #4]
   1accc:	e3500000 	cmp	r0, #0
   1acd0:	0a000050 	beq	1ae18 <CLinkLayer::Process()+0x178>
   1acd4:	e28d3018 	add	r3, sp, #24
   1acd8:	e28d5010 	add	r5, sp, #16
   1acdc:	e283700e 	add	r7, r3, #14
   1ace0:	e284a01c 	add	sl, r4, #28
   1ace4:	e3a09000 	mov	r9, #0
   1ace8:	e59f8178 	ldr	r8, [pc, #376]	; 1ae68 <CLinkLayer::Process()+0x1c8>
   1acec:	e3a0b006 	mov	fp, #6
   1acf0:	ea000000 	b	1acf8 <CLinkLayer::Process()+0x58>
   1acf4:	e5940004 	ldr	r0, [r4, #4]
   1acf8:	e28d200c 	add	r2, sp, #12
   1acfc:	e28d1018 	add	r1, sp, #24
   1ad00:	eb000213 	bl	1b554 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1ad04:	e3500000 	cmp	r0, #0
   1ad08:	0a00002f 	beq	1adcc <CLinkLayer::Process()+0x12c>
   1ad0c:	e59d300c 	ldr	r3, [sp, #12]
   1ad10:	e3530d19 	cmp	r3, #1600	; 0x640
   1ad14:	8a000019 	bhi	1ad80 <CLinkLayer::Process()+0xe0>
   1ad18:	e353000e 	cmp	r3, #14
   1ad1c:	9afffff4 	bls	1acf4 <CLinkLayer::Process()+0x54>
   1ad20:	e28d1018 	add	r1, sp, #24
   1ad24:	e1a00005 	mov	r0, r5
   1ad28:	eb003e4a 	bl	2a658 <CMACAddress::CMACAddress(unsigned char const*)>
   1ad2c:	e1a01006 	mov	r1, r6
   1ad30:	e1a00005 	mov	r0, r5
   1ad34:	eb003e32 	bl	2a604 <CMACAddress::operator!=(CMACAddress const&) const>
   1ad38:	e3500000 	cmp	r0, #0
   1ad3c:	1a000018 	bne	1ada4 <CLinkLayer::Process()+0x104>
   1ad40:	e59d200c 	ldr	r2, [sp, #12]
   1ad44:	e242200e 	sub	r2, r2, #14
   1ad48:	e3520000 	cmp	r2, #0
   1ad4c:	e58d200c 	str	r2, [sp, #12]
   1ad50:	0a000028 	beq	1adf8 <CLinkLayer::Process()+0x158>
   1ad54:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1ad58:	e3530008 	cmp	r3, #8
   1ad5c:	0a000015 	beq	1adb8 <CLinkLayer::Process()+0x118>
   1ad60:	e1530008 	cmp	r3, r8
   1ad64:	0a000009 	beq	1ad90 <CLinkLayer::Process()+0xf0>
   1ad68:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1ad6c:	e1520003 	cmp	r2, r3
   1ad70:	0a00002c 	beq	1ae28 <CLinkLayer::Process()+0x188>
   1ad74:	e1a00005 	mov	r0, r5
   1ad78:	eb003e08 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   1ad7c:	eaffffdc 	b	1acf4 <CLinkLayer::Process()+0x54>
   1ad80:	e3a0204e 	mov	r2, #78	; 0x4e
   1ad84:	e59f10e0 	ldr	r1, [pc, #224]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1ad88:	e59f00e0 	ldr	r0, [pc, #224]	; 1ae70 <CLinkLayer::Process()+0x1d0>
   1ad8c:	eb0024cc 	bl	240c4 <assertion_failed>
   1ad90:	e1a03009 	mov	r3, r9
   1ad94:	e1a01007 	mov	r1, r7
   1ad98:	e2840010 	add	r0, r4, #16
   1ad9c:	eb0017b6 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ada0:	eafffff3 	b	1ad74 <CLinkLayer::Process()+0xd4>
   1ada4:	e1a00005 	mov	r0, r5
   1ada8:	eb003e5b 	bl	2a71c <CMACAddress::IsBroadcast() const>
   1adac:	e3500000 	cmp	r0, #0
   1adb0:	1affffe2 	bne	1ad40 <CLinkLayer::Process()+0xa0>
   1adb4:	eaffffee 	b	1ad74 <CLinkLayer::Process()+0xd4>
   1adb8:	e1a03009 	mov	r3, r9
   1adbc:	e1a01007 	mov	r1, r7
   1adc0:	e1a0000a 	mov	r0, sl
   1adc4:	eb0017ac 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1adc8:	eaffffe9 	b	1ad74 <CLinkLayer::Process()+0xd4>
   1adcc:	e594000c 	ldr	r0, [r4, #12]
   1add0:	e3500000 	cmp	r0, #0
   1add4:	0a00001f 	beq	1ae58 <CLinkLayer::Process()+0x1b8>
   1add8:	eb000385 	bl	1bbf4 <CARPHandler::Process()>
   1addc:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ade0:	e28dd00c 	add	sp, sp, #12
   1ade4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ade8:	e3a02045 	mov	r2, #69	; 0x45
   1adec:	e59f1078 	ldr	r1, [pc, #120]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1adf0:	e59f007c 	ldr	r0, [pc, #124]	; 1ae74 <CLinkLayer::Process()+0x1d4>
   1adf4:	eb0024b2 	bl	240c4 <assertion_failed>
   1adf8:	e3a0205d 	mov	r2, #93	; 0x5d
   1adfc:	e59f1068 	ldr	r1, [pc, #104]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1ae00:	e59f0070 	ldr	r0, [pc, #112]	; 1ae78 <CLinkLayer::Process()+0x1d8>
   1ae04:	eb0024ae 	bl	240c4 <assertion_failed>
   1ae08:	e3a02047 	mov	r2, #71	; 0x47
   1ae0c:	e59f1058 	ldr	r1, [pc, #88]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1ae10:	e59f0064 	ldr	r0, [pc, #100]	; 1ae7c <CLinkLayer::Process()+0x1dc>
   1ae14:	eb0024aa 	bl	240c4 <assertion_failed>
   1ae18:	e3a02049 	mov	r2, #73	; 0x49
   1ae1c:	e59f1048 	ldr	r1, [pc, #72]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1ae20:	e59f004c 	ldr	r0, [pc, #76]	; 1ae74 <CLinkLayer::Process()+0x1d4>
   1ae24:	eb0024a6 	bl	240c4 <assertion_failed>
   1ae28:	e1a0000b 	mov	r0, fp
   1ae2c:	eb003ec0 	bl	2a934 <operator new(unsigned int)>
   1ae30:	e1a0200b 	mov	r2, fp
   1ae34:	e28d101e 	add	r1, sp, #30
   1ae38:	e58d0004 	str	r0, [sp, #4]
   1ae3c:	eb003ce3 	bl	2a1d0 <memcpy>
   1ae40:	e59d3004 	ldr	r3, [sp, #4]
   1ae44:	e59d200c 	ldr	r2, [sp, #12]
   1ae48:	e1a01007 	mov	r1, r7
   1ae4c:	e2840028 	add	r0, r4, #40	; 0x28
   1ae50:	eb001789 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ae54:	eaffffc6 	b	1ad74 <CLinkLayer::Process()+0xd4>
   1ae58:	e3a02077 	mov	r2, #119	; 0x77
   1ae5c:	e59f1008 	ldr	r1, [pc, #8]	; 1ae6c <CLinkLayer::Process()+0x1cc>
   1ae60:	e59f0018 	ldr	r0, [pc, #24]	; 1ae80 <CLinkLayer::Process()+0x1e0>
   1ae64:	eb002496 	bl	240c4 <assertion_failed>
   1ae68:	00000608 	.word	0x00000608
   1ae6c:	00045354 	.word	0x00045354
   1ae70:	00043010 	.word	0x00043010
   1ae74:	00045364 	.word	0x00045364
   1ae78:	0004522c 	.word	0x0004522c
   1ae7c:	00045390 	.word	0x00045390
   1ae80:	000453a4 	.word	0x000453a4

0001ae84 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1ae84:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ae88:	e59fc180 	ldr	ip, [pc, #384]	; 1b010 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1ae8c:	e243e001 	sub	lr, r3, #1
   1ae90:	e28db01c 	add	fp, sp, #28
   1ae94:	e15e000c 	cmp	lr, ip
   1ae98:	e24dd010 	sub	sp, sp, #16
   1ae9c:	8a000034 	bhi	1af74 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1aea0:	e1a04003 	mov	r4, r3
   1aea4:	e1a05000 	mov	r5, r0
   1aea8:	e2833015 	add	r3, r3, #21
   1aeac:	e5900004 	ldr	r0, [r0, #4]
   1aeb0:	e3c33007 	bic	r3, r3, #7
   1aeb4:	e04dd003 	sub	sp, sp, r3
   1aeb8:	e3500000 	cmp	r0, #0
   1aebc:	e1a06002 	mov	r6, r2
   1aec0:	e1a07001 	mov	r7, r1
   1aec4:	e28d8008 	add	r8, sp, #8
   1aec8:	e284900e 	add	r9, r4, #14
   1aecc:	0a00003f 	beq	1afd0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1aed0:	eb00018f 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   1aed4:	e3500000 	cmp	r0, #0
   1aed8:	0a000028 	beq	1af80 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1aedc:	e28d100e 	add	r1, sp, #14
   1aee0:	eb003df6 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1aee4:	e3a02000 	mov	r2, #0
   1aee8:	e3a03008 	mov	r3, #8
   1aeec:	e1560002 	cmp	r6, r2
   1aef0:	e5c8200d 	strb	r2, [r8, #13]
   1aef4:	e5c8300c 	strb	r3, [r8, #12]
   1aef8:	0a000038 	beq	1afe0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1aefc:	e1a02004 	mov	r2, r4
   1af00:	e1a01006 	mov	r1, r6
   1af04:	e28d0016 	add	r0, sp, #22
   1af08:	eb003cb0 	bl	2a1d0 <memcpy>
   1af0c:	e5953000 	ldr	r3, [r5]
   1af10:	e3530000 	cmp	r3, #0
   1af14:	0a000035 	beq	1aff0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1af18:	e595300c 	ldr	r3, [r5, #12]
   1af1c:	e3530000 	cmp	r3, #0
   1af20:	0a000036 	beq	1b000 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1af24:	e24b0024 	sub	r0, fp, #36	; 0x24
   1af28:	eb003d99 	bl	2a594 <CMACAddress::CMACAddress()>
   1af2c:	e1a00007 	mov	r0, r7
   1af30:	eb0016b3 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1af34:	e3500000 	cmp	r0, #0
   1af38:	0a000014 	beq	1af90 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x10c>
   1af3c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1af40:	eb003dc9 	bl	2a66c <CMACAddress::SetBroadcast()>
   1af44:	e1a01008 	mov	r1, r8
   1af48:	e24b0024 	sub	r0, fp, #36	; 0x24
   1af4c:	eb003ddb 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1af50:	e1a02009 	mov	r2, r9
   1af54:	e1a01008 	mov	r1, r8
   1af58:	e5950004 	ldr	r0, [r5, #4]
   1af5c:	eb000179 	bl	1b548 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1af60:	e24b0024 	sub	r0, fp, #36	; 0x24
   1af64:	eb003d8d 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   1af68:	e3a00001 	mov	r0, #1
   1af6c:	e24bd01c 	sub	sp, fp, #28
   1af70:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af74:	e3a00000 	mov	r0, #0
   1af78:	e24bd01c 	sub	sp, fp, #28
   1af7c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1af80:	e3a02089 	mov	r2, #137	; 0x89
   1af84:	e59f1088 	ldr	r1, [pc, #136]	; 1b014 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1af88:	e59f0088 	ldr	r0, [pc, #136]	; 1b018 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1af8c:	eb00244c 	bl	240c4 <assertion_failed>
   1af90:	e5950000 	ldr	r0, [r5]
   1af94:	eb00155b 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1af98:	e1a01000 	mov	r1, r0
   1af9c:	e1a00007 	mov	r0, r7
   1afa0:	eb0015c1 	bl	206ac <CIPAddress::operator==(CIPAddress const&) const>
   1afa4:	e3500000 	cmp	r0, #0
   1afa8:	1affffe3 	bne	1af3c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1afac:	e595000c 	ldr	r0, [r5, #12]
   1afb0:	e1a01007 	mov	r1, r7
   1afb4:	e58d9000 	str	r9, [sp]
   1afb8:	e1a03008 	mov	r3, r8
   1afbc:	e24b2024 	sub	r2, fp, #36	; 0x24
   1afc0:	eb000417 	bl	1c024 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1afc4:	e3500000 	cmp	r0, #0
   1afc8:	1affffdd 	bne	1af44 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1afcc:	eaffffe3 	b	1af60 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1afd0:	e3a02087 	mov	r2, #135	; 0x87
   1afd4:	e59f1038 	ldr	r1, [pc, #56]	; 1b014 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1afd8:	e59f003c 	ldr	r0, [pc, #60]	; 1b01c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1afdc:	eb002438 	bl	240c4 <assertion_failed>
   1afe0:	e3a0208e 	mov	r2, #142	; 0x8e
   1afe4:	e59f1028 	ldr	r1, [pc, #40]	; 1b014 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1afe8:	e59f0030 	ldr	r0, [pc, #48]	; 1b020 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1afec:	eb002434 	bl	240c4 <assertion_failed>
   1aff0:	e3a02092 	mov	r2, #146	; 0x92
   1aff4:	e59f1018 	ldr	r1, [pc, #24]	; 1b014 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1aff8:	e59f0024 	ldr	r0, [pc, #36]	; 1b024 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1affc:	eb002430 	bl	240c4 <assertion_failed>
   1b000:	e3a02093 	mov	r2, #147	; 0x93
   1b004:	e59f1008 	ldr	r1, [pc, #8]	; 1b014 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b008:	e59f0018 	ldr	r0, [pc, #24]	; 1b028 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b00c:	eb00242c 	bl	240c4 <assertion_failed>
   1b010:	00000631 	.word	0x00000631
   1b014:	00045354 	.word	0x00045354
   1b018:	00045390 	.word	0x00045390
   1b01c:	00045364 	.word	0x00045364
   1b020:	000453b8 	.word	0x000453b8
   1b024:	000451a4 	.word	0x000451a4
   1b028:	000453a4 	.word	0x000453a4

0001b02c <CLinkLayer::Receive(void*, unsigned int*)>:
   1b02c:	e3510000 	cmp	r1, #0
   1b030:	e92d4010 	push	{r4, lr}
   1b034:	0a000009 	beq	1b060 <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b038:	e3520000 	cmp	r2, #0
   1b03c:	e1a04002 	mov	r4, r2
   1b040:	0a00000a 	beq	1b070 <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b044:	e3a02000 	mov	r2, #0
   1b048:	e280001c 	add	r0, r0, #28
   1b04c:	eb001750 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1b050:	e5840000 	str	r0, [r4]
   1b054:	e2900000 	adds	r0, r0, #0
   1b058:	13a00001 	movne	r0, #1
   1b05c:	e8bd8010 	pop	{r4, pc}
   1b060:	e3a020a9 	mov	r2, #169	; 0xa9
   1b064:	e59f1014 	ldr	r1, [pc, #20]	; 1b080 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b068:	e59f0014 	ldr	r0, [pc, #20]	; 1b084 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b06c:	eb002414 	bl	240c4 <assertion_failed>
   1b070:	e3a020aa 	mov	r2, #170	; 0xaa
   1b074:	e59f1004 	ldr	r1, [pc, #4]	; 1b080 <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b078:	e59f0008 	ldr	r0, [pc, #8]	; 1b088 <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b07c:	eb002410 	bl	240c4 <assertion_failed>
   1b080:	00045354 	.word	0x00045354
   1b084:	000423b8 	.word	0x000423b8
   1b088:	00042be4 	.word	0x00042be4

0001b08c <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b08c:	e3510000 	cmp	r1, #0
   1b090:	e92d4010 	push	{r4, lr}
   1b094:	0a000007 	beq	1b0b8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b098:	e3520000 	cmp	r2, #0
   1b09c:	0a000009 	beq	1b0c8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b0a0:	e5900004 	ldr	r0, [r0, #4]
   1b0a4:	e3500000 	cmp	r0, #0
   1b0a8:	0a00000a 	beq	1b0d8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b0ac:	eb000125 	bl	1b548 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b0b0:	e3a00001 	mov	r0, #1
   1b0b4:	e8bd8010 	pop	{r4, pc}
   1b0b8:	e3a020b2 	mov	r2, #178	; 0xb2
   1b0bc:	e59f1024 	ldr	r1, [pc, #36]	; 1b0e8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b0c0:	e59f0024 	ldr	r0, [pc, #36]	; 1b0ec <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b0c4:	eb0023fe 	bl	240c4 <assertion_failed>
   1b0c8:	e3a020b3 	mov	r2, #179	; 0xb3
   1b0cc:	e59f1014 	ldr	r1, [pc, #20]	; 1b0e8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b0d0:	e59f0018 	ldr	r0, [pc, #24]	; 1b0f0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b0d4:	eb0023fa 	bl	240c4 <assertion_failed>
   1b0d8:	e3a020b4 	mov	r2, #180	; 0xb4
   1b0dc:	e59f1004 	ldr	r1, [pc, #4]	; 1b0e8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b0e0:	e59f000c 	ldr	r0, [pc, #12]	; 1b0f4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b0e4:	eb0023f6 	bl	240c4 <assertion_failed>
   1b0e8:	00045354 	.word	0x00045354
   1b0ec:	000453c8 	.word	0x000453c8
   1b0f0:	0004522c 	.word	0x0004522c
   1b0f4:	00045364 	.word	0x00045364

0001b0f8 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b0f8:	e92d4030 	push	{r4, r5, lr}
   1b0fc:	e3510000 	cmp	r1, #0
   1b100:	e24dd00c 	sub	sp, sp, #12
   1b104:	0a000017 	beq	1b168 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b108:	e3520000 	cmp	r2, #0
   1b10c:	e1a04002 	mov	r4, r2
   1b110:	0a000018 	beq	1b178 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x80>
   1b114:	e2800028 	add	r0, r0, #40	; 0x28
   1b118:	e28d2004 	add	r2, sp, #4
   1b11c:	e1a05003 	mov	r5, r3
   1b120:	eb00171b 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1b124:	e3500000 	cmp	r0, #0
   1b128:	e5840000 	str	r0, [r4]
   1b12c:	0a00000b 	beq	1b160 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b130:	e3550000 	cmp	r5, #0
   1b134:	e59d4004 	ldr	r4, [sp, #4]
   1b138:	0a000004 	beq	1b150 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b13c:	e3540000 	cmp	r4, #0
   1b140:	0a000010 	beq	1b188 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x90>
   1b144:	e1a00005 	mov	r0, r5
   1b148:	e1a01004 	mov	r1, r4
   1b14c:	eb003d31 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   1b150:	e1a00004 	mov	r0, r4
   1b154:	e3a01006 	mov	r1, #6
   1b158:	eb003e03 	bl	2a96c <operator delete(void*, unsigned int)>
   1b15c:	e3a00001 	mov	r0, #1
   1b160:	e28dd00c 	add	sp, sp, #12
   1b164:	e8bd8030 	pop	{r4, r5, pc}
   1b168:	e3a020bd 	mov	r2, #189	; 0xbd
   1b16c:	e59f1024 	ldr	r1, [pc, #36]	; 1b198 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b170:	e59f0024 	ldr	r0, [pc, #36]	; 1b19c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b174:	eb0023d2 	bl	240c4 <assertion_failed>
   1b178:	e3a020be 	mov	r2, #190	; 0xbe
   1b17c:	e59f1014 	ldr	r1, [pc, #20]	; 1b198 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b180:	e59f0018 	ldr	r0, [pc, #24]	; 1b1a0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa8>
   1b184:	eb0023ce 	bl	240c4 <assertion_failed>
   1b188:	e3a020c9 	mov	r2, #201	; 0xc9
   1b18c:	e59f1004 	ldr	r1, [pc, #4]	; 1b198 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b190:	e59f000c 	ldr	r0, [pc, #12]	; 1b1a4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   1b194:	eb0023ca 	bl	240c4 <assertion_failed>
   1b198:	00045354 	.word	0x00045354
   1b19c:	000423b8 	.word	0x000423b8
   1b1a0:	00042be4 	.word	0x00042be4
   1b1a4:	00045220 	.word	0x00045220

0001b1a8 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b1a8:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b1ac:	e3530000 	cmp	r3, #0
   1b1b0:	1a000005 	bne	1b1cc <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b1b4:	e3510000 	cmp	r1, #0
   1b1b8:	0a000005 	beq	1b1d4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b1bc:	e6bf1fb1 	rev16	r1, r1
   1b1c0:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b1c4:	e3a00001 	mov	r0, #1
   1b1c8:	e12fff1e 	bx	lr
   1b1cc:	e3a00000 	mov	r0, #0
   1b1d0:	e12fff1e 	bx	lr
   1b1d4:	e92d4010 	push	{r4, lr}
   1b1d8:	e3a020d9 	mov	r2, #217	; 0xd9
   1b1dc:	e59f1004 	ldr	r1, [pc, #4]	; 1b1e8 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b1e0:	e59f0004 	ldr	r0, [pc, #4]	; 1b1ec <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b1e4:	eb0023b6 	bl	240c4 <assertion_failed>
   1b1e8:	00045354 	.word	0x00045354
   1b1ec:	000453d4 	.word	0x000453d4

0001b1f0 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b1f0:	e3510000 	cmp	r1, #0
   1b1f4:	e92d4010 	push	{r4, lr}
   1b1f8:	0a000009 	beq	1b224 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b1fc:	e352000e 	cmp	r2, #14
   1b200:	9a00000b 	bls	1b234 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1b204:	e5900008 	ldr	r0, [r0, #8]
   1b208:	e3500000 	cmp	r0, #0
   1b20c:	0a00000c 	beq	1b244 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1b210:	e8bd4010 	pop	{r4, lr}
   1b214:	e242300e 	sub	r3, r2, #14
   1b218:	e281200e 	add	r2, r1, #14
   1b21c:	e3a01001 	mov	r1, #1
   1b220:	eafffe37 	b	1ab04 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1b224:	e3a020e1 	mov	r2, #225	; 0xe1
   1b228:	e59f1024 	ldr	r1, [pc, #36]	; 1b254 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b22c:	e59f0024 	ldr	r0, [pc, #36]	; 1b258 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1b230:	eb0023a3 	bl	240c4 <assertion_failed>
   1b234:	e3a020e2 	mov	r2, #226	; 0xe2
   1b238:	e59f1014 	ldr	r1, [pc, #20]	; 1b254 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b23c:	e59f0018 	ldr	r0, [pc, #24]	; 1b25c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1b240:	eb00239f 	bl	240c4 <assertion_failed>
   1b244:	e3a020e3 	mov	r2, #227	; 0xe3
   1b248:	e59f1004 	ldr	r1, [pc, #4]	; 1b254 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b24c:	e59f000c 	ldr	r0, [pc, #12]	; 1b260 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1b250:	eb00239b 	bl	240c4 <assertion_failed>
   1b254:	00045354 	.word	0x00045354
   1b258:	000453e8 	.word	0x000453e8
   1b25c:	000453fc 	.word	0x000453fc
   1b260:	000451b8 	.word	0x000451b8

0001b264 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1b264:	e3a03000 	mov	r3, #0
   1b268:	e92d4010 	push	{r4, lr}
   1b26c:	e1a04000 	mov	r4, r0
   1b270:	e5c02000 	strb	r2, [r0]
   1b274:	e980000a 	stmib	r0, {r1, r3}
   1b278:	e280000c 	add	r0, r0, #12
   1b27c:	eb00163f 	bl	20b80 <CNetQueue::CNetQueue()>
   1b280:	e2840018 	add	r0, r4, #24
   1b284:	eb00163d 	bl	20b80 <CNetQueue::CNetQueue()>
   1b288:	e1a00004 	mov	r0, r4
   1b28c:	e8bd8010 	pop	{r4, pc}

0001b290 <CNetDeviceLayer::~CNetDeviceLayer()>:
   1b290:	e92d4010 	push	{r4, lr}
   1b294:	e3a03000 	mov	r3, #0
   1b298:	e1a04000 	mov	r4, r0
   1b29c:	e2800018 	add	r0, r0, #24
   1b2a0:	e5843008 	str	r3, [r4, #8]
   1b2a4:	e5843004 	str	r3, [r4, #4]
   1b2a8:	eb00166e 	bl	20c68 <CNetQueue::~CNetQueue()>
   1b2ac:	e284000c 	add	r0, r4, #12
   1b2b0:	eb00166c 	bl	20c68 <CNetQueue::~CNetQueue()>
   1b2b4:	e1a00004 	mov	r0, r4
   1b2b8:	e8bd8010 	pop	{r4, pc}

0001b2bc <CNetDeviceLayer::Initialize(bool)>:
   1b2bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b2c0:	e5903008 	ldr	r3, [r0, #8]
   1b2c4:	e24dd00c 	sub	sp, sp, #12
   1b2c8:	e3530000 	cmp	r3, #0
   1b2cc:	1a000039 	bne	1b3b8 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1b2d0:	e1a04000 	mov	r4, r0
   1b2d4:	e5d00000 	ldrb	r0, [r0]
   1b2d8:	e1a06001 	mov	r6, r1
   1b2dc:	eb003d5f 	bl	2a860 <CNetDevice::GetNetDevice(TNetDeviceType)>
   1b2e0:	e3500000 	cmp	r0, #0
   1b2e4:	e1a05000 	mov	r5, r0
   1b2e8:	e5840008 	str	r0, [r4, #8]
   1b2ec:	0a000035 	beq	1b3c8 <CNetDeviceLayer::Initialize(bool)+0x10c>
   1b2f0:	e3a000e0 	mov	r0, #224	; 0xe0
   1b2f4:	eb003d8e 	bl	2a934 <operator new(unsigned int)>
   1b2f8:	e5941008 	ldr	r1, [r4, #8]
   1b2fc:	eb0000dd 	bl	1b678 <CPHYTask::CPHYTask(CNetDevice*)>
   1b300:	e3560000 	cmp	r6, #0
   1b304:	1a000003 	bne	1b318 <CNetDeviceLayer::Initialize(bool)+0x5c>
   1b308:	e3a05001 	mov	r5, #1
   1b30c:	e1a00005 	mov	r0, r5
   1b310:	e28dd00c 	add	sp, sp, #12
   1b314:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b318:	eb003928 	bl	297c0 <CTimer::Get()>
   1b31c:	eb003671 	bl	28ce8 <CTimer::GetTicks() const>
   1b320:	e59f60b8 	ldr	r6, [pc, #184]	; 1b3e0 <CNetDeviceLayer::Initialize(bool)+0x124>
   1b324:	e1a07000 	mov	r7, r0
   1b328:	ea000005 	b	1b344 <CNetDeviceLayer::Initialize(bool)+0x88>
   1b32c:	e5940008 	ldr	r0, [r4, #8]
   1b330:	e5903000 	ldr	r3, [r0]
   1b334:	e593301c 	ldr	r3, [r3, #28]
   1b338:	e12fff33 	blx	r3
   1b33c:	e2505000 	subs	r5, r0, #0
   1b340:	1a00000a 	bne	1b370 <CNetDeviceLayer::Initialize(bool)+0xb4>
   1b344:	eb00391d 	bl	297c0 <CTimer::Get()>
   1b348:	eb003666 	bl	28ce8 <CTimer::GetTicks() const>
   1b34c:	e0400007 	sub	r0, r0, r7
   1b350:	e1500006 	cmp	r0, r6
   1b354:	9afffff4 	bls	1b32c <CNetDeviceLayer::Initialize(bool)+0x70>
   1b358:	eb002c4c 	bl	26490 <CLogger::Get()>
   1b35c:	e59f3080 	ldr	r3, [pc, #128]	; 1b3e4 <CNetDeviceLayer::Initialize(bool)+0x128>
   1b360:	e3a02002 	mov	r2, #2
   1b364:	e59f107c 	ldr	r1, [pc, #124]	; 1b3e8 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1b368:	eb002b85 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b36c:	eaffffe5 	b	1b308 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1b370:	e5940008 	ldr	r0, [r4, #8]
   1b374:	e5903000 	ldr	r3, [r0]
   1b378:	e5933020 	ldr	r3, [r3, #32]
   1b37c:	e12fff33 	blx	r3
   1b380:	e3500006 	cmp	r0, #6
   1b384:	e1a04000 	mov	r4, r0
   1b388:	0affffde 	beq	1b308 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1b38c:	eb002c3f 	bl	26490 <CLogger::Get()>
   1b390:	e1a06000 	mov	r6, r0
   1b394:	e1a00004 	mov	r0, r4
   1b398:	eb003d21 	bl	2a824 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1b39c:	e59f3048 	ldr	r3, [pc, #72]	; 1b3ec <CNetDeviceLayer::Initialize(bool)+0x130>
   1b3a0:	e58d0000 	str	r0, [sp]
   1b3a4:	e3a02003 	mov	r2, #3
   1b3a8:	e1a00006 	mov	r0, r6
   1b3ac:	e59f1034 	ldr	r1, [pc, #52]	; 1b3e8 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1b3b0:	eb002b73 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b3b4:	eaffffd4 	b	1b30c <CNetDeviceLayer::Initialize(bool)+0x50>
   1b3b8:	e3a02033 	mov	r2, #51	; 0x33
   1b3bc:	e59f102c 	ldr	r1, [pc, #44]	; 1b3f0 <CNetDeviceLayer::Initialize(bool)+0x134>
   1b3c0:	e59f002c 	ldr	r0, [pc, #44]	; 1b3f4 <CNetDeviceLayer::Initialize(bool)+0x138>
   1b3c4:	eb00233e 	bl	240c4 <assertion_failed>
   1b3c8:	eb002c30 	bl	26490 <CLogger::Get()>
   1b3cc:	e59f3024 	ldr	r3, [pc, #36]	; 1b3f8 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1b3d0:	e3a02001 	mov	r2, #1
   1b3d4:	e59f100c 	ldr	r1, [pc, #12]	; 1b3e8 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1b3d8:	eb002b69 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b3dc:	eaffffca 	b	1b30c <CNetDeviceLayer::Initialize(bool)+0x50>
   1b3e0:	0000018f 	.word	0x0000018f
   1b3e4:	00045454 	.word	0x00045454
   1b3e8:	00045420 	.word	0x00045420
   1b3ec:	00045464 	.word	0x00045464
   1b3f0:	00045428 	.word	0x00045428
   1b3f4:	0004116c 	.word	0x0004116c
   1b3f8:	00045438 	.word	0x00045438

0001b3fc <CNetDeviceLayer::Process()>:
   1b3fc:	e92d4070 	push	{r4, r5, r6, lr}
   1b400:	e1a04000 	mov	r4, r0
   1b404:	e5900008 	ldr	r0, [r0, #8]
   1b408:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1b40c:	e3500000 	cmp	r0, #0
   1b410:	e24dd008 	sub	sp, sp, #8
   1b414:	0a000035 	beq	1b4f0 <CNetDeviceLayer::Process()+0xf4>
   1b418:	e3a05000 	mov	r5, #0
   1b41c:	e284600c 	add	r6, r4, #12
   1b420:	e5903000 	ldr	r3, [r0]
   1b424:	e5933010 	ldr	r3, [r3, #16]
   1b428:	e12fff33 	blx	r3
   1b42c:	e3500000 	cmp	r0, #0
   1b430:	1a000015 	bne	1b48c <CNetDeviceLayer::Process()+0x90>
   1b434:	e3a06000 	mov	r6, #0
   1b438:	e2845018 	add	r5, r4, #24
   1b43c:	ea000003 	b	1b450 <CNetDeviceLayer::Process()+0x54>
   1b440:	e1a03006 	mov	r3, r6
   1b444:	e28d1008 	add	r1, sp, #8
   1b448:	e1a00005 	mov	r0, r5
   1b44c:	eb00160a 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b450:	e5940008 	ldr	r0, [r4, #8]
   1b454:	e28d2004 	add	r2, sp, #4
   1b458:	e5903000 	ldr	r3, [r0]
   1b45c:	e28d1008 	add	r1, sp, #8
   1b460:	e5933018 	ldr	r3, [r3, #24]
   1b464:	e12fff33 	blx	r3
   1b468:	e3500000 	cmp	r0, #0
   1b46c:	0a00001c 	beq	1b4e4 <CNetDeviceLayer::Process()+0xe8>
   1b470:	e59d2004 	ldr	r2, [sp, #4]
   1b474:	e3520000 	cmp	r2, #0
   1b478:	1afffff0 	bne	1b440 <CNetDeviceLayer::Process()+0x44>
   1b47c:	e3a0206d 	mov	r2, #109	; 0x6d
   1b480:	e59f1078 	ldr	r1, [pc, #120]	; 1b500 <CNetDeviceLayer::Process()+0x104>
   1b484:	e59f0078 	ldr	r0, [pc, #120]	; 1b504 <CNetDeviceLayer::Process()+0x108>
   1b488:	eb00230d 	bl	240c4 <assertion_failed>
   1b48c:	e1a02005 	mov	r2, r5
   1b490:	e28d1008 	add	r1, sp, #8
   1b494:	e1a00006 	mov	r0, r6
   1b498:	eb00163d 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1b49c:	e3500000 	cmp	r0, #0
   1b4a0:	e1a02000 	mov	r2, r0
   1b4a4:	e58d0004 	str	r0, [sp, #4]
   1b4a8:	0affffe1 	beq	1b434 <CNetDeviceLayer::Process()+0x38>
   1b4ac:	e5940008 	ldr	r0, [r4, #8]
   1b4b0:	e28d1008 	add	r1, sp, #8
   1b4b4:	e5903000 	ldr	r3, [r0]
   1b4b8:	e5933014 	ldr	r3, [r3, #20]
   1b4bc:	e12fff33 	blx	r3
   1b4c0:	e3500000 	cmp	r0, #0
   1b4c4:	15940008 	ldrne	r0, [r4, #8]
   1b4c8:	1affffd4 	bne	1b420 <CNetDeviceLayer::Process()+0x24>
   1b4cc:	eb002bef 	bl	26490 <CLogger::Get()>
   1b4d0:	e59f3030 	ldr	r3, [pc, #48]	; 1b508 <CNetDeviceLayer::Process()+0x10c>
   1b4d4:	e3a02002 	mov	r2, #2
   1b4d8:	e59f102c 	ldr	r1, [pc, #44]	; 1b50c <CNetDeviceLayer::Process()+0x110>
   1b4dc:	eb002b28 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b4e0:	eaffffd3 	b	1b434 <CNetDeviceLayer::Process()+0x38>
   1b4e4:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1b4e8:	e28dd008 	add	sp, sp, #8
   1b4ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b4f0:	e3a0205c 	mov	r2, #92	; 0x5c
   1b4f4:	e59f1004 	ldr	r1, [pc, #4]	; 1b500 <CNetDeviceLayer::Process()+0x104>
   1b4f8:	e59f0010 	ldr	r0, [pc, #16]	; 1b510 <CNetDeviceLayer::Process()+0x114>
   1b4fc:	eb0022f0 	bl	240c4 <assertion_failed>
   1b500:	00045428 	.word	0x00045428
   1b504:	0004522c 	.word	0x0004522c
   1b508:	00045470 	.word	0x00045470
   1b50c:	00045420 	.word	0x00045420
   1b510:	00041290 	.word	0x00041290

0001b514 <CNetDeviceLayer::GetMACAddress() const>:
   1b514:	e5900008 	ldr	r0, [r0, #8]
   1b518:	e3500000 	cmp	r0, #0
   1b51c:	0a000002 	beq	1b52c <CNetDeviceLayer::GetMACAddress() const+0x18>
   1b520:	e5903000 	ldr	r3, [r0]
   1b524:	e593300c 	ldr	r3, [r3, #12]
   1b528:	e12fff13 	bx	r3
   1b52c:	e92d4010 	push	{r4, lr}
   1b530:	e3a02074 	mov	r2, #116	; 0x74
   1b534:	e59f1004 	ldr	r1, [pc, #4]	; 1b540 <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1b538:	e59f0004 	ldr	r0, [pc, #4]	; 1b544 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1b53c:	eb0022e0 	bl	240c4 <assertion_failed>
   1b540:	00045428 	.word	0x00045428
   1b544:	00041290 	.word	0x00041290

0001b548 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1b548:	e280000c 	add	r0, r0, #12
   1b54c:	e3a03000 	mov	r3, #0
   1b550:	ea0015c9 	b	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001b554 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1b554:	e92d4010 	push	{r4, lr}
   1b558:	e2800018 	add	r0, r0, #24
   1b55c:	e1a04002 	mov	r4, r2
   1b560:	e3a02000 	mov	r2, #0
   1b564:	eb00160a 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1b568:	e3500000 	cmp	r0, #0
   1b56c:	08bd8010 	popeq	{r4, pc}
   1b570:	e3540000 	cmp	r4, #0
   1b574:	0a000002 	beq	1b584 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1b578:	e5840000 	str	r0, [r4]
   1b57c:	e3a00001 	mov	r0, #1
   1b580:	e8bd8010 	pop	{r4, pc}
   1b584:	e3a02085 	mov	r2, #133	; 0x85
   1b588:	e59f1004 	ldr	r1, [pc, #4]	; 1b594 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1b58c:	e59f0004 	ldr	r0, [pc, #4]	; 1b598 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1b590:	eb0022cb 	bl	240c4 <assertion_failed>
   1b594:	00045428 	.word	0x00045428
   1b598:	00042be4 	.word	0x00042be4

0001b59c <CPHYTask::~CPHYTask()>:
   1b59c:	e3a02000 	mov	r2, #0
   1b5a0:	e92d4010 	push	{r4, lr}
   1b5a4:	e1a04000 	mov	r4, r0
   1b5a8:	e59f3010 	ldr	r3, [pc, #16]	; 1b5c0 <CPHYTask::~CPHYTask()+0x24>
   1b5ac:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1b5b0:	e5803000 	str	r3, [r0]
   1b5b4:	eb00201e 	bl	23634 <CTask::~CTask()>
   1b5b8:	e1a00004 	mov	r0, r4
   1b5bc:	e8bd8010 	pop	{r4, pc}
   1b5c0:	00045488 	.word	0x00045488

0001b5c4 <CPHYTask::~CPHYTask()>:
   1b5c4:	e3a02000 	mov	r2, #0
   1b5c8:	e92d4010 	push	{r4, lr}
   1b5cc:	e1a04000 	mov	r4, r0
   1b5d0:	e59f301c 	ldr	r3, [pc, #28]	; 1b5f4 <CPHYTask::~CPHYTask()+0x30>
   1b5d4:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1b5d8:	e5803000 	str	r3, [r0]
   1b5dc:	eb002014 	bl	23634 <CTask::~CTask()>
   1b5e0:	e1a00004 	mov	r0, r4
   1b5e4:	e3a010e0 	mov	r1, #224	; 0xe0
   1b5e8:	eb003cdf 	bl	2a96c <operator delete(void*, unsigned int)>
   1b5ec:	e1a00004 	mov	r0, r4
   1b5f0:	e8bd8010 	pop	{r4, pc}
   1b5f4:	00045488 	.word	0x00045488

0001b5f8 <CPHYTask::Run()>:
   1b5f8:	e92d4070 	push	{r4, r5, r6, lr}
   1b5fc:	e1a04000 	mov	r4, r0
   1b600:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1b604:	e3500000 	cmp	r0, #0
   1b608:	0a000013 	beq	1b65c <CPHYTask::Run()+0x64>
   1b60c:	e5903000 	ldr	r3, [r0]
   1b610:	e59f5054 	ldr	r5, [pc, #84]	; 1b66c <CPHYTask::Run()+0x74>
   1b614:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1b618:	e1530005 	cmp	r3, r5
   1b61c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b620:	e3a06e7d 	mov	r6, #2000	; 0x7d0
   1b624:	ea000003 	b	1b638 <CPHYTask::Run()+0x40>
   1b628:	e5903000 	ldr	r3, [r0]
   1b62c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1b630:	e1530005 	cmp	r3, r5
   1b634:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b638:	e12fff33 	blx	r3
   1b63c:	e3500000 	cmp	r0, #0
   1b640:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b644:	eb0021f0 	bl	23e0c <CScheduler::Get()>
   1b648:	e1a01006 	mov	r1, r6
   1b64c:	eb0021ca 	bl	23d7c <CScheduler::MsSleep(unsigned int)>
   1b650:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1b654:	e3500000 	cmp	r0, #0
   1b658:	1afffff2 	bne	1b628 <CPHYTask::Run()+0x30>
   1b65c:	e3a02026 	mov	r2, #38	; 0x26
   1b660:	e59f1008 	ldr	r1, [pc, #8]	; 1b670 <CPHYTask::Run()+0x78>
   1b664:	e59f0008 	ldr	r0, [pc, #8]	; 1b674 <CPHYTask::Run()+0x7c>
   1b668:	eb002295 	bl	240c4 <assertion_failed>
   1b66c:	00015a68 	.word	0x00015a68
   1b670:	00045494 	.word	0x00045494
   1b674:	00041290 	.word	0x00041290

0001b678 <CPHYTask::CPHYTask(CNetDevice*)>:
   1b678:	e92d4070 	push	{r4, r5, r6, lr}
   1b67c:	e1a04000 	mov	r4, r0
   1b680:	e1a05001 	mov	r5, r1
   1b684:	e3a01902 	mov	r1, #32768	; 0x8000
   1b688:	eb00203c 	bl	23780 <CTask::CTask(unsigned int)>
   1b68c:	e59f300c 	ldr	r3, [pc, #12]	; 1b6a0 <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1b690:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1b694:	e5843000 	str	r3, [r4]
   1b698:	e1a00004 	mov	r0, r4
   1b69c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b6a0:	00045488 	.word	0x00045488

0001b6a4 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1b6a4:	e92d4070 	push	{r4, r5, r6, lr}
   1b6a8:	e2524000 	subs	r4, r2, #0
   1b6ac:	0a00001d 	beq	1b728 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   1b6b0:	e5943010 	ldr	r3, [r4, #16]
   1b6b4:	e1a05001 	mov	r5, r1
   1b6b8:	e1510003 	cmp	r1, r3
   1b6bc:	2a00001d 	bcs	1b738 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x94>
   1b6c0:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1b6c4:	e3500000 	cmp	r0, #0
   1b6c8:	1a000006 	bne	1b6e8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1b6cc:	e1a01181 	lsl	r1, r1, #3
   1b6d0:	e0413005 	sub	r3, r1, r5
   1b6d4:	e0843103 	add	r3, r4, r3, lsl #2
   1b6d8:	e5d33014 	ldrb	r3, [r3, #20]
   1b6dc:	e3530001 	cmp	r3, #1
   1b6e0:	0a000008 	beq	1b708 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x64>
   1b6e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b6e8:	eb003fc3 	bl	2b5fc <EnterCritical>
   1b6ec:	e1a01185 	lsl	r1, r5, #3
   1b6f0:	e0413005 	sub	r3, r1, r5
   1b6f4:	e0843103 	add	r3, r4, r3, lsl #2
   1b6f8:	e5d33014 	ldrb	r3, [r3, #20]
   1b6fc:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1b700:	e3530001 	cmp	r3, #1
   1b704:	1a000003 	bne	1b718 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   1b708:	e3a03002 	mov	r3, #2
   1b70c:	e0411005 	sub	r1, r1, r5
   1b710:	e0844311 	add	r4, r4, r1, lsl r3
   1b714:	e5c43014 	strb	r3, [r4, #20]
   1b718:	e3500000 	cmp	r0, #0
   1b71c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b720:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b724:	ea003fdf 	b	2b6a8 <LeaveCritical>
   1b728:	e59f2018 	ldr	r2, [pc, #24]	; 1b748 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1b72c:	e59f1018 	ldr	r1, [pc, #24]	; 1b74c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1b730:	e59f0018 	ldr	r0, [pc, #24]	; 1b750 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xac>
   1b734:	eb002262 	bl	240c4 <assertion_failed>
   1b738:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1b73c:	e59f1008 	ldr	r1, [pc, #8]	; 1b74c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1b740:	e59f000c 	ldr	r0, [pc, #12]	; 1b754 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xb0>
   1b744:	eb00225e 	bl	240c4 <assertion_failed>
   1b748:	000001a9 	.word	0x000001a9
   1b74c:	000454a0 	.word	0x000454a0
   1b750:	000408c0 	.word	0x000408c0
   1b754:	000454b0 	.word	0x000454b0

0001b758 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1b758:	e92d4070 	push	{r4, r5, r6, lr}
   1b75c:	e3a0e000 	mov	lr, #0
   1b760:	e3a05001 	mov	r5, #1
   1b764:	e59d4010 	ldr	r4, [sp, #16]
   1b768:	e151000e 	cmp	r1, lr
   1b76c:	e880000e 	stm	r0, {r1, r2, r3}
   1b770:	e5805244 	str	r5, [r0, #580]	; 0x244
   1b774:	e580400c 	str	r4, [r0, #12]
   1b778:	e580e010 	str	lr, [r0, #16]
   1b77c:	e580e248 	str	lr, [r0, #584]	; 0x248
   1b780:	0a000009 	beq	1b7ac <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x54>
   1b784:	e3520000 	cmp	r2, #0
   1b788:	0a00000b 	beq	1b7bc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x64>
   1b78c:	e3530000 	cmp	r3, #0
   1b790:	0a00000d 	beq	1b7cc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   1b794:	e3540000 	cmp	r4, #0
   1b798:	18bd8070 	popne	{r4, r5, r6, pc}
   1b79c:	e3a02045 	mov	r2, #69	; 0x45
   1b7a0:	e59f1034 	ldr	r1, [pc, #52]	; 1b7dc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1b7a4:	e59f0034 	ldr	r0, [pc, #52]	; 1b7e0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1b7a8:	eb002245 	bl	240c4 <assertion_failed>
   1b7ac:	e3a02042 	mov	r2, #66	; 0x42
   1b7b0:	e59f1024 	ldr	r1, [pc, #36]	; 1b7dc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1b7b4:	e59f0028 	ldr	r0, [pc, #40]	; 1b7e4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1b7b8:	eb002241 	bl	240c4 <assertion_failed>
   1b7bc:	e3a02043 	mov	r2, #67	; 0x43
   1b7c0:	e59f1014 	ldr	r1, [pc, #20]	; 1b7dc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1b7c4:	e59f001c 	ldr	r0, [pc, #28]	; 1b7e8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1b7c8:	eb00223d 	bl	240c4 <assertion_failed>
   1b7cc:	e3a02044 	mov	r2, #68	; 0x44
   1b7d0:	e59f1004 	ldr	r1, [pc, #4]	; 1b7dc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1b7d4:	e59f0010 	ldr	r0, [pc, #16]	; 1b7ec <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1b7d8:	eb002239 	bl	240c4 <assertion_failed>
   1b7dc:	000454a0 	.word	0x000454a0
   1b7e0:	000454cc 	.word	0x000454cc
   1b7e4:	000451a4 	.word	0x000451a4
   1b7e8:	00045364 	.word	0x00045364
   1b7ec:	00045260 	.word	0x00045260

0001b7f0 <CARPHandler::~CARPHandler()>:
   1b7f0:	e5903010 	ldr	r3, [r0, #16]
   1b7f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b7f8:	e3530000 	cmp	r3, #0
   1b7fc:	e1a08000 	mov	r8, r0
   1b800:	0a000011 	beq	1b84c <CARPHandler::~CARPHandler()+0x5c>
   1b804:	e3a06000 	mov	r6, #0
   1b808:	e1a04000 	mov	r4, r0
   1b80c:	e1a07006 	mov	r7, r6
   1b810:	e3a0900c 	mov	r9, #12
   1b814:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1b818:	e2866001 	add	r6, r6, #1
   1b81c:	e3550000 	cmp	r5, #0
   1b820:	0a000005 	beq	1b83c <CARPHandler::~CARPHandler()+0x4c>
   1b824:	e1a00005 	mov	r0, r5
   1b828:	eb00150e 	bl	20c68 <CNetQueue::~CNetQueue()>
   1b82c:	e1a01009 	mov	r1, r9
   1b830:	e1a00005 	mov	r0, r5
   1b834:	eb003c4c 	bl	2a96c <operator delete(void*, unsigned int)>
   1b838:	e5983010 	ldr	r3, [r8, #16]
   1b83c:	e1530006 	cmp	r3, r6
   1b840:	e584702c 	str	r7, [r4, #44]	; 0x2c
   1b844:	e284401c 	add	r4, r4, #28
   1b848:	8afffff1 	bhi	1b814 <CARPHandler::~CARPHandler()+0x24>
   1b84c:	e1a00008 	mov	r0, r8
   1b850:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001b854 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1b854:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b858:	e1a06000 	mov	r6, r0
   1b85c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1b860:	e1a09001 	mov	r9, r1
   1b864:	e3500000 	cmp	r0, #0
   1b868:	e1a08002 	mov	r8, r2
   1b86c:	1a000023 	bne	1b900 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xac>
   1b870:	e5961010 	ldr	r1, [r6, #16]
   1b874:	e3510000 	cmp	r1, #0
   1b878:	0a00001f 	beq	1b8fc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1b87c:	e3a05000 	mov	r5, #0
   1b880:	e1a04005 	mov	r4, r5
   1b884:	ea000006 	b	1b8a4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1b888:	e5d33014 	ldrb	r3, [r3, #20]
   1b88c:	e3530002 	cmp	r3, #2
   1b890:	0a000009 	beq	1b8bc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   1b894:	e2844001 	add	r4, r4, #1
   1b898:	e1510004 	cmp	r1, r4
   1b89c:	e285501c 	add	r5, r5, #28
   1b8a0:	9a000010 	bls	1b8e8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1b8a4:	e1a07184 	lsl	r7, r4, #3
   1b8a8:	e0473004 	sub	r3, r7, r4
   1b8ac:	e0863103 	add	r3, r6, r3, lsl #2
   1b8b0:	e5d32014 	ldrb	r2, [r3, #20]
   1b8b4:	e3520001 	cmp	r2, #1
   1b8b8:	1afffff2 	bne	1b888 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   1b8bc:	e2851015 	add	r1, r5, #21
   1b8c0:	e0861001 	add	r1, r6, r1
   1b8c4:	e1a00009 	mov	r0, r9
   1b8c8:	eb0013a6 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   1b8cc:	e3500000 	cmp	r0, #0
   1b8d0:	1a00000f 	bne	1b914 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   1b8d4:	e5961010 	ldr	r1, [r6, #16]
   1b8d8:	e2844001 	add	r4, r4, #1
   1b8dc:	e1510004 	cmp	r1, r4
   1b8e0:	e285501c 	add	r5, r5, #28
   1b8e4:	8affffee 	bhi	1b8a4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1b8e8:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1b8ec:	e3530000 	cmp	r3, #0
   1b8f0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b8f4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8f8:	ea003f6a 	b	2b6a8 <LeaveCritical>
   1b8fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b900:	eb003f3d 	bl	2b5fc <EnterCritical>
   1b904:	e5961010 	ldr	r1, [r6, #16]
   1b908:	e3510000 	cmp	r1, #0
   1b90c:	1affffda 	bne	1b87c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1b910:	eafffff4 	b	1b8e8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1b914:	e0474004 	sub	r4, r7, r4
   1b918:	e0864104 	add	r4, r6, r4, lsl #2
   1b91c:	eb0037a7 	bl	297c0 <CTimer::Get()>
   1b920:	e5941020 	ldr	r1, [r4, #32]
   1b924:	eb003634 	bl	291fc <CTimer::CancelKernelTimer(unsigned int)>
   1b928:	e2851019 	add	r1, r5, #25
   1b92c:	e0861001 	add	r1, r6, r1
   1b930:	e1a00008 	mov	r0, r8
   1b934:	eb003b61 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1b938:	e3a03003 	mov	r3, #3
   1b93c:	e5c43014 	strb	r3, [r4, #20]
   1b940:	eaffffe8 	b	1b8e8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>

0001b944 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1b944:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b948:	e1a09000 	mov	r9, r0
   1b94c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1b950:	e24dd00c 	sub	sp, sp, #12
   1b954:	e3500000 	cmp	r0, #0
   1b958:	e1a07001 	mov	r7, r1
   1b95c:	e1a08002 	mov	r8, r2
   1b960:	1a000038 	bne	1ba48 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x104>
   1b964:	e5992010 	ldr	r2, [r9, #16]
   1b968:	e3520000 	cmp	r2, #0
   1b96c:	e1a05002 	mov	r5, r2
   1b970:	0a00004c 	beq	1baa8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x164>
   1b974:	e3a04000 	mov	r4, #0
   1b978:	e3a05014 	mov	r5, #20
   1b97c:	e2896015 	add	r6, r9, #21
   1b980:	ea000005 	b	1b99c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1b984:	e3550014 	cmp	r5, #20
   1b988:	01a05004 	moveq	r5, r4
   1b98c:	e2844001 	add	r4, r4, #1
   1b990:	e1520004 	cmp	r2, r4
   1b994:	e286601c 	add	r6, r6, #28
   1b998:	9a00000e 	bls	1b9d8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1b99c:	e0643184 	rsb	r3, r4, r4, lsl #3
   1b9a0:	e0893103 	add	r3, r9, r3, lsl #2
   1b9a4:	e5d33014 	ldrb	r3, [r3, #20]
   1b9a8:	e3530000 	cmp	r3, #0
   1b9ac:	0afffff4 	beq	1b984 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x40>
   1b9b0:	e1a01006 	mov	r1, r6
   1b9b4:	e1a00007 	mov	r0, r7
   1b9b8:	eb00136a 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   1b9bc:	e3500000 	cmp	r0, #0
   1b9c0:	1a000018 	bne	1ba28 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1b9c4:	e5992010 	ldr	r2, [r9, #16]
   1b9c8:	e2844001 	add	r4, r4, #1
   1b9cc:	e1520004 	cmp	r2, r4
   1b9d0:	e286601c 	add	r6, r6, #28
   1b9d4:	8afffff0 	bhi	1b99c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1b9d8:	e3550014 	cmp	r5, #20
   1b9dc:	0a00001b 	beq	1ba50 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1b9e0:	e1a0a185 	lsl	sl, r5, #3
   1b9e4:	e04a6005 	sub	r6, sl, r5
   1b9e8:	e1a06106 	lsl	r6, r6, #2
   1b9ec:	e286b015 	add	fp, r6, #21
   1b9f0:	e2866019 	add	r6, r6, #25
   1b9f4:	e089100b 	add	r1, r9, fp
   1b9f8:	e1a00007 	mov	r0, r7
   1b9fc:	eb0013db 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1ba00:	e0891006 	add	r1, r9, r6
   1ba04:	e1a00008 	mov	r0, r8
   1ba08:	eb003b2c 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1ba0c:	eb00376b 	bl	297c0 <CTimer::Get()>
   1ba10:	eb0034b4 	bl	28ce8 <CTimer::GetTicks() const>
   1ba14:	e3a02004 	mov	r2, #4
   1ba18:	e04a3005 	sub	r3, sl, r5
   1ba1c:	e0893103 	add	r3, r9, r3, lsl #2
   1ba20:	e5830028 	str	r0, [r3, #40]	; 0x28
   1ba24:	e5c32014 	strb	r2, [r3, #20]
   1ba28:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1ba2c:	e3530000 	cmp	r3, #0
   1ba30:	1a000001 	bne	1ba3c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1ba34:	e28dd00c 	add	sp, sp, #12
   1ba38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba3c:	e28dd00c 	add	sp, sp, #12
   1ba40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba44:	ea003f17 	b	2b6a8 <LeaveCritical>
   1ba48:	eb003eeb 	bl	2b5fc <EnterCritical>
   1ba4c:	eaffffc4 	b	1b964 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x20>
   1ba50:	e3520014 	cmp	r2, #20
   1ba54:	0afffff3 	beq	1ba28 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1ba58:	e1a05002 	mov	r5, r2
   1ba5c:	e0626182 	rsb	r6, r2, r2, lsl #3
   1ba60:	e1a06106 	lsl	r6, r6, #2
   1ba64:	e286b015 	add	fp, r6, #21
   1ba68:	e2866019 	add	r6, r6, #25
   1ba6c:	e3a03000 	mov	r3, #0
   1ba70:	e1a0a182 	lsl	sl, r2, #3
   1ba74:	e04a2002 	sub	r2, sl, r2
   1ba78:	e0894102 	add	r4, r9, r2, lsl #2
   1ba7c:	e5c43014 	strb	r3, [r4, #20]
   1ba80:	e3a0000c 	mov	r0, #12
   1ba84:	eb003baa 	bl	2a934 <operator new(unsigned int)>
   1ba88:	e58d0004 	str	r0, [sp, #4]
   1ba8c:	eb00143b 	bl	20b80 <CNetQueue::CNetQueue()>
   1ba90:	e5993010 	ldr	r3, [r9, #16]
   1ba94:	e59d2004 	ldr	r2, [sp, #4]
   1ba98:	e2833001 	add	r3, r3, #1
   1ba9c:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1baa0:	e5893010 	str	r3, [r9, #16]
   1baa4:	eaffffd2 	b	1b9f4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   1baa8:	e3a06019 	mov	r6, #25
   1baac:	e3a0b015 	mov	fp, #21
   1bab0:	eaffffed 	b	1ba6c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x128>

0001bab4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1bab4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1bab8:	e1a04000 	mov	r4, r0
   1babc:	e5900000 	ldr	r0, [r0]
   1bac0:	e24dd034 	sub	sp, sp, #52	; 0x34
   1bac4:	e3500000 	cmp	r0, #0
   1bac8:	0a000031 	beq	1bb94 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe0>
   1bacc:	e1a05001 	mov	r5, r1
   1bad0:	e1a08002 	mov	r8, r2
   1bad4:	e1a06003 	mov	r6, r3
   1bad8:	eb001280 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1badc:	e2509000 	subs	r9, r0, #0
   1bae0:	0a00002f 	beq	1bba4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf0>
   1bae4:	e5940004 	ldr	r0, [r4, #4]
   1bae8:	e3500000 	cmp	r0, #0
   1baec:	0a000030 	beq	1bbb4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   1baf0:	ebfffe87 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   1baf4:	e2507000 	subs	r7, r0, #0
   1baf8:	0a000031 	beq	1bbc4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1bafc:	e28d1004 	add	r1, sp, #4
   1bb00:	e1a00006 	mov	r0, r6
   1bb04:	eb003aed 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1bb08:	e28d100a 	add	r1, sp, #10
   1bb0c:	e1a00007 	mov	r0, r7
   1bb10:	eb003aea 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1bb14:	e3a03c01 	mov	r3, #256	; 0x100
   1bb18:	e3550000 	cmp	r5, #0
   1bb1c:	e3a01008 	mov	r1, #8
   1bb20:	13a05c01 	movne	r5, #256	; 0x100
   1bb24:	03a05c02 	moveq	r5, #512	; 0x200
   1bb28:	e3a0c006 	mov	ip, #6
   1bb2c:	e3a02004 	mov	r2, #4
   1bb30:	e1cd31b2 	strh	r3, [sp, #18]
   1bb34:	e59f3098 	ldr	r3, [pc, #152]	; 1bbd4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1bb38:	e1a00007 	mov	r0, r7
   1bb3c:	e1cd11b4 	strh	r1, [sp, #20]
   1bb40:	e28d101a 	add	r1, sp, #26
   1bb44:	e5cdc016 	strb	ip, [sp, #22]
   1bb48:	e5cd2017 	strb	r2, [sp, #23]
   1bb4c:	e1cd31b0 	strh	r3, [sp, #16]
   1bb50:	e1cd51b8 	strh	r5, [sp, #24]
   1bb54:	eb003ad9 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1bb58:	e1a00009 	mov	r0, r9
   1bb5c:	e28d1020 	add	r1, sp, #32
   1bb60:	eb001382 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1bb64:	e1a00006 	mov	r0, r6
   1bb68:	e28d1024 	add	r1, sp, #36	; 0x24
   1bb6c:	eb003ad3 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   1bb70:	e1a00008 	mov	r0, r8
   1bb74:	e28d102a 	add	r1, sp, #42	; 0x2a
   1bb78:	eb00137c 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1bb7c:	e28d1004 	add	r1, sp, #4
   1bb80:	e5940004 	ldr	r0, [r4, #4]
   1bb84:	e3a0202a 	mov	r2, #42	; 0x2a
   1bb88:	ebfffe6e 	bl	1b548 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1bb8c:	e28dd034 	add	sp, sp, #52	; 0x34
   1bb90:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bb94:	e59f203c 	ldr	r2, [pc, #60]	; 1bbd8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1bb98:	e59f103c 	ldr	r1, [pc, #60]	; 1bbdc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1bb9c:	e59f003c 	ldr	r0, [pc, #60]	; 1bbe0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x12c>
   1bba0:	eb002147 	bl	240c4 <assertion_failed>
   1bba4:	e3a02f63 	mov	r2, #396	; 0x18c
   1bba8:	e59f102c 	ldr	r1, [pc, #44]	; 1bbdc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1bbac:	e59f0030 	ldr	r0, [pc, #48]	; 1bbe4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x130>
   1bbb0:	eb002143 	bl	240c4 <assertion_failed>
   1bbb4:	e59f202c 	ldr	r2, [pc, #44]	; 1bbe8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x134>
   1bbb8:	e59f101c 	ldr	r1, [pc, #28]	; 1bbdc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1bbbc:	e59f0028 	ldr	r0, [pc, #40]	; 1bbec <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x138>
   1bbc0:	eb00213f 	bl	240c4 <assertion_failed>
   1bbc4:	e3a02e19 	mov	r2, #400	; 0x190
   1bbc8:	e59f100c 	ldr	r1, [pc, #12]	; 1bbdc <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1bbcc:	e59f001c 	ldr	r0, [pc, #28]	; 1bbf0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x13c>
   1bbd0:	eb00213b 	bl	240c4 <assertion_failed>
   1bbd4:	00000608 	.word	0x00000608
   1bbd8:	0000018a 	.word	0x0000018a
   1bbdc:	000454a0 	.word	0x000454a0
   1bbe0:	000451a4 	.word	0x000451a4
   1bbe4:	00045288 	.word	0x00045288
   1bbe8:	0000018e 	.word	0x0000018e
   1bbec:	00045364 	.word	0x00045364
   1bbf0:	00045390 	.word	0x00045390

0001bbf4 <CARPHandler::Process()>:
   1bbf4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbf8:	e1a04000 	mov	r4, r0
   1bbfc:	e5900000 	ldr	r0, [r0]
   1bc00:	e24dde66 	sub	sp, sp, #1632	; 0x660
   1bc04:	e3500000 	cmp	r0, #0
   1bc08:	e24dd004 	sub	sp, sp, #4
   1bc0c:	0a0000d7 	beq	1bf70 <CARPHandler::Process()+0x37c>
   1bc10:	eb001232 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1bc14:	e2507000 	subs	r7, r0, #0
   1bc18:	0a0000d8 	beq	1bf80 <CARPHandler::Process()+0x38c>
   1bc1c:	e594000c 	ldr	r0, [r4, #12]
   1bc20:	e3500000 	cmp	r0, #0
   1bc24:	0a0000d9 	beq	1bf90 <CARPHandler::Process()+0x39c>
   1bc28:	e28d3020 	add	r3, sp, #32
   1bc2c:	e28db038 	add	fp, sp, #56	; 0x38
   1bc30:	e283a008 	add	sl, r3, #8
   1bc34:	e283900e 	add	r9, r3, #14
   1bc38:	e2438008 	sub	r8, r3, #8
   1bc3c:	e3a05000 	mov	r5, #0
   1bc40:	ea000000 	b	1bc48 <CARPHandler::Process()+0x54>
   1bc44:	e594000c 	ldr	r0, [r4, #12]
   1bc48:	e1a02005 	mov	r2, r5
   1bc4c:	e28d1020 	add	r1, sp, #32
   1bc50:	eb00144f 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1bc54:	e3500000 	cmp	r0, #0
   1bc58:	0a00002a 	beq	1bd08 <CARPHandler::Process()+0x114>
   1bc5c:	e350001b 	cmp	r0, #27
   1bc60:	9afffff7 	bls	1bc44 <CARPHandler::Process()+0x50>
   1bc64:	e1dd32b0 	ldrh	r3, [sp, #32]
   1bc68:	e3530c01 	cmp	r3, #256	; 0x100
   1bc6c:	1afffff4 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bc70:	e1dd32b2 	ldrh	r3, [sp, #34]	; 0x22
   1bc74:	e3530008 	cmp	r3, #8
   1bc78:	1afffff1 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bc7c:	e5dd3024 	ldrb	r3, [sp, #36]	; 0x24
   1bc80:	e3530006 	cmp	r3, #6
   1bc84:	1affffee 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bc88:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   1bc8c:	e3530004 	cmp	r3, #4
   1bc90:	1affffeb 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bc94:	e1a00007 	mov	r0, r7
   1bc98:	eb00134b 	bl	209cc <CIPAddress::IsNull() const>
   1bc9c:	e3500000 	cmp	r0, #0
   1bca0:	1affffe7 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bca4:	e1a0100b 	mov	r1, fp
   1bca8:	e1a00007 	mov	r0, r7
   1bcac:	eb0012c4 	bl	207c4 <CIPAddress::operator!=(unsigned char const*) const>
   1bcb0:	e3500000 	cmp	r0, #0
   1bcb4:	1affffe2 	bne	1bc44 <CARPHandler::Process()+0x50>
   1bcb8:	e1a0100a 	mov	r1, sl
   1bcbc:	e28d0010 	add	r0, sp, #16
   1bcc0:	eb003a64 	bl	2a658 <CMACAddress::CMACAddress(unsigned char const*)>
   1bcc4:	e1a01009 	mov	r1, r9
   1bcc8:	e1a00008 	mov	r0, r8
   1bccc:	eb0012f6 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1bcd0:	e1dd32b6 	ldrh	r3, [sp, #38]	; 0x26
   1bcd4:	e3530c01 	cmp	r3, #256	; 0x100
   1bcd8:	0a0000be 	beq	1bfd8 <CARPHandler::Process()+0x3e4>
   1bcdc:	e3530c02 	cmp	r3, #512	; 0x200
   1bce0:	1a000003 	bne	1bcf4 <CARPHandler::Process()+0x100>
   1bce4:	e28d2010 	add	r2, sp, #16
   1bce8:	e1a01008 	mov	r1, r8
   1bcec:	e1a00004 	mov	r0, r4
   1bcf0:	ebfffed7 	bl	1b854 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1bcf4:	e1a00008 	mov	r0, r8
   1bcf8:	eb00126a 	bl	206a8 <CIPAddress::~CIPAddress()>
   1bcfc:	e28d0010 	add	r0, sp, #16
   1bd00:	eb003a26 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   1bd04:	eaffffce 	b	1bc44 <CARPHandler::Process()+0x50>
   1bd08:	e5943008 	ldr	r3, [r4, #8]
   1bd0c:	e3530000 	cmp	r3, #0
   1bd10:	0a0000a2 	beq	1bfa0 <CARPHandler::Process()+0x3ac>
   1bd14:	e5943004 	ldr	r3, [r4, #4]
   1bd18:	e3530000 	cmp	r3, #0
   1bd1c:	0a0000a3 	beq	1bfb0 <CARPHandler::Process()+0x3bc>
   1bd20:	e5942010 	ldr	r2, [r4, #16]
   1bd24:	e3520000 	cmp	r2, #0
   1bd28:	0a00002a 	beq	1bdd8 <CARPHandler::Process()+0x1e4>
   1bd2c:	e1a06000 	mov	r6, r0
   1bd30:	e1a07000 	mov	r7, r0
   1bd34:	e28d3018 	add	r3, sp, #24
   1bd38:	e2845015 	add	r5, r4, #21
   1bd3c:	e58d300c 	str	r3, [sp, #12]
   1bd40:	e1a08186 	lsl	r8, r6, #3
   1bd44:	e0489006 	sub	r9, r8, r6
   1bd48:	e0849109 	add	r9, r4, r9, lsl #2
   1bd4c:	e5d93014 	ldrb	r3, [r9, #20]
   1bd50:	e6ef3073 	uxtb	r3, r3
   1bd54:	e3530002 	cmp	r3, #2
   1bd58:	0a000049 	beq	1be84 <CARPHandler::Process()+0x290>
   1bd5c:	e3530003 	cmp	r3, #3
   1bd60:	1a000018 	bne	1bdc8 <CARPHandler::Process()+0x1d4>
   1bd64:	e5950017 	ldr	r0, [r5, #23]
   1bd68:	e3500000 	cmp	r0, #0
   1bd6c:	0a000077 	beq	1bf50 <CARPHandler::Process()+0x35c>
   1bd70:	e285a004 	add	sl, r5, #4
   1bd74:	e3a09006 	mov	r9, #6
   1bd78:	ea000008 	b	1bda0 <CARPHandler::Process()+0x1ac>
   1bd7c:	e1a02009 	mov	r2, r9
   1bd80:	e1a0100a 	mov	r1, sl
   1bd84:	e28d0020 	add	r0, sp, #32
   1bd88:	eb003910 	bl	2a1d0 <memcpy>
   1bd8c:	e5940004 	ldr	r0, [r4, #4]
   1bd90:	e1a0200b 	mov	r2, fp
   1bd94:	e28d1020 	add	r1, sp, #32
   1bd98:	ebfffdea 	bl	1b548 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1bd9c:	e5950017 	ldr	r0, [r5, #23]
   1bda0:	e1a02007 	mov	r2, r7
   1bda4:	e28d1020 	add	r1, sp, #32
   1bda8:	eb0013f9 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1bdac:	e250b000 	subs	fp, r0, #0
   1bdb0:	1afffff1 	bne	1bd7c <CARPHandler::Process()+0x188>
   1bdb4:	e3a03004 	mov	r3, #4
   1bdb8:	e0488006 	sub	r8, r8, r6
   1bdbc:	e0848108 	add	r8, r4, r8, lsl #2
   1bdc0:	e5c83014 	strb	r3, [r8, #20]
   1bdc4:	e5942010 	ldr	r2, [r4, #16]
   1bdc8:	e2866001 	add	r6, r6, #1
   1bdcc:	e1520006 	cmp	r2, r6
   1bdd0:	e285501c 	add	r5, r5, #28
   1bdd4:	8affffd9 	bhi	1bd40 <CARPHandler::Process()+0x14c>
   1bdd8:	eb003678 	bl	297c0 <CTimer::Get()>
   1bddc:	eb0033c1 	bl	28ce8 <CTimer::GetTicks() const>
   1bde0:	e5943248 	ldr	r3, [r4, #584]	; 0x248
   1bde4:	e59f2214 	ldr	r2, [pc, #532]	; 1c000 <CARPHandler::Process()+0x40c>
   1bde8:	e0403003 	sub	r3, r0, r3
   1bdec:	e1530002 	cmp	r3, r2
   1bdf0:	e1a06000 	mov	r6, r0
   1bdf4:	9a00001f 	bls	1be78 <CARPHandler::Process()+0x284>
   1bdf8:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1bdfc:	e5846248 	str	r6, [r4, #584]	; 0x248
   1be00:	e3500000 	cmp	r0, #0
   1be04:	1a00006d 	bne	1bfc0 <CARPHandler::Process()+0x3cc>
   1be08:	e594e010 	ldr	lr, [r4, #16]
   1be0c:	e35e0000 	cmp	lr, #0
   1be10:	0a000018 	beq	1be78 <CARPHandler::Process()+0x284>
   1be14:	e3a03000 	mov	r3, #0
   1be18:	e1a01004 	mov	r1, r4
   1be1c:	e1a05003 	mov	r5, r3
   1be20:	ea000003 	b	1be34 <CARPHandler::Process()+0x240>
   1be24:	e2833001 	add	r3, r3, #1
   1be28:	e15e0003 	cmp	lr, r3
   1be2c:	e281101c 	add	r1, r1, #28
   1be30:	9a00000d 	bls	1be6c <CARPHandler::Process()+0x278>
   1be34:	e0632183 	rsb	r2, r3, r3, lsl #3
   1be38:	e0842102 	add	r2, r4, r2, lsl #2
   1be3c:	e5d2c014 	ldrb	ip, [r2, #20]
   1be40:	e35c0004 	cmp	ip, #4
   1be44:	1afffff6 	bne	1be24 <CARPHandler::Process()+0x230>
   1be48:	e591c028 	ldr	ip, [r1, #40]	; 0x28
   1be4c:	e2833001 	add	r3, r3, #1
   1be50:	e28cccea 	add	ip, ip, #59904	; 0xea00
   1be54:	e28cc060 	add	ip, ip, #96	; 0x60
   1be58:	e15c0006 	cmp	ip, r6
   1be5c:	35c25014 	strbcc	r5, [r2, #20]
   1be60:	e15e0003 	cmp	lr, r3
   1be64:	e281101c 	add	r1, r1, #28
   1be68:	8afffff1 	bhi	1be34 <CARPHandler::Process()+0x240>
   1be6c:	e3500000 	cmp	r0, #0
   1be70:	0a000000 	beq	1be78 <CARPHandler::Process()+0x284>
   1be74:	eb003e0b 	bl	2b6a8 <LeaveCritical>
   1be78:	e28dde66 	add	sp, sp, #1632	; 0x660
   1be7c:	e28dd004 	add	sp, sp, #4
   1be80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be84:	e595300f 	ldr	r3, [r5, #15]
   1be88:	e3530002 	cmp	r3, #2
   1be8c:	e2833001 	add	r3, r3, #1
   1be90:	e585300f 	str	r3, [r5, #15]
   1be94:	9a000011 	bls	1bee0 <CARPHandler::Process()+0x2ec>
   1be98:	e5950017 	ldr	r0, [r5, #23]
   1be9c:	e3500000 	cmp	r0, #0
   1bea0:	1a000004 	bne	1beb8 <CARPHandler::Process()+0x2c4>
   1bea4:	ea00002d 	b	1bf60 <CARPHandler::Process()+0x36c>
   1bea8:	e5940008 	ldr	r0, [r4, #8]
   1beac:	e28d1020 	add	r1, sp, #32
   1beb0:	ebfffcce 	bl	1b1f0 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1beb4:	e5950017 	ldr	r0, [r5, #23]
   1beb8:	e1a02007 	mov	r2, r7
   1bebc:	e28d1020 	add	r1, sp, #32
   1bec0:	eb0013b3 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1bec4:	e2502000 	subs	r2, r0, #0
   1bec8:	1afffff6 	bne	1bea8 <CARPHandler::Process()+0x2b4>
   1becc:	e0488006 	sub	r8, r8, r6
   1bed0:	e0848108 	add	r8, r4, r8, lsl #2
   1bed4:	e5c82014 	strb	r2, [r8, #20]
   1bed8:	e5942010 	ldr	r2, [r4, #16]
   1bedc:	eaffffb9 	b	1bdc8 <CARPHandler::Process()+0x1d4>
   1bee0:	e59d800c 	ldr	r8, [sp, #12]
   1bee4:	e1a01005 	mov	r1, r5
   1bee8:	e1a00008 	mov	r0, r8
   1beec:	eb00126e 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1bef0:	e28d0010 	add	r0, sp, #16
   1bef4:	eb0039a6 	bl	2a594 <CMACAddress::CMACAddress()>
   1bef8:	e28d0010 	add	r0, sp, #16
   1befc:	eb0039da 	bl	2a66c <CMACAddress::SetBroadcast()>
   1bf00:	e1a02008 	mov	r2, r8
   1bf04:	e3a01001 	mov	r1, #1
   1bf08:	e28d3010 	add	r3, sp, #16
   1bf0c:	e1a00004 	mov	r0, r4
   1bf10:	ebfffee7 	bl	1bab4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1bf14:	e3a03001 	mov	r3, #1
   1bf18:	e5c93014 	strb	r3, [r9, #20]
   1bf1c:	eb003627 	bl	297c0 <CTimer::Get()>
   1bf20:	e59f20dc 	ldr	r2, [pc, #220]	; 1c004 <CARPHandler::Process()+0x410>
   1bf24:	e1a03006 	mov	r3, r6
   1bf28:	e3a01050 	mov	r1, #80	; 0x50
   1bf2c:	e58d4000 	str	r4, [sp]
   1bf30:	eb003462 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1bf34:	e585000b 	str	r0, [r5, #11]
   1bf38:	e28d0010 	add	r0, sp, #16
   1bf3c:	eb003997 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   1bf40:	e1a00008 	mov	r0, r8
   1bf44:	eb0011d7 	bl	206a8 <CIPAddress::~CIPAddress()>
   1bf48:	e5942010 	ldr	r2, [r4, #16]
   1bf4c:	eaffff9d 	b	1bdc8 <CARPHandler::Process()+0x1d4>
   1bf50:	e3a020aa 	mov	r2, #170	; 0xaa
   1bf54:	e59f10ac 	ldr	r1, [pc, #172]	; 1c008 <CARPHandler::Process()+0x414>
   1bf58:	e59f00ac 	ldr	r0, [pc, #172]	; 1c00c <CARPHandler::Process()+0x418>
   1bf5c:	eb002058 	bl	240c4 <assertion_failed>
   1bf60:	e3a0209f 	mov	r2, #159	; 0x9f
   1bf64:	e59f109c 	ldr	r1, [pc, #156]	; 1c008 <CARPHandler::Process()+0x414>
   1bf68:	e59f009c 	ldr	r0, [pc, #156]	; 1c00c <CARPHandler::Process()+0x418>
   1bf6c:	eb002054 	bl	240c4 <assertion_failed>
   1bf70:	e3a02057 	mov	r2, #87	; 0x57
   1bf74:	e59f108c 	ldr	r1, [pc, #140]	; 1c008 <CARPHandler::Process()+0x414>
   1bf78:	e59f0090 	ldr	r0, [pc, #144]	; 1c010 <CARPHandler::Process()+0x41c>
   1bf7c:	eb002050 	bl	240c4 <assertion_failed>
   1bf80:	e3a02059 	mov	r2, #89	; 0x59
   1bf84:	e59f107c 	ldr	r1, [pc, #124]	; 1c008 <CARPHandler::Process()+0x414>
   1bf88:	e59f0084 	ldr	r0, [pc, #132]	; 1c014 <CARPHandler::Process()+0x420>
   1bf8c:	eb00204c 	bl	240c4 <assertion_failed>
   1bf90:	e3a0205f 	mov	r2, #95	; 0x5f
   1bf94:	e59f106c 	ldr	r1, [pc, #108]	; 1c008 <CARPHandler::Process()+0x414>
   1bf98:	e59f0078 	ldr	r0, [pc, #120]	; 1c018 <CARPHandler::Process()+0x424>
   1bf9c:	eb002048 	bl	240c4 <assertion_failed>
   1bfa0:	e3a02088 	mov	r2, #136	; 0x88
   1bfa4:	e59f105c 	ldr	r1, [pc, #92]	; 1c008 <CARPHandler::Process()+0x414>
   1bfa8:	e59f006c 	ldr	r0, [pc, #108]	; 1c01c <CARPHandler::Process()+0x428>
   1bfac:	eb002044 	bl	240c4 <assertion_failed>
   1bfb0:	e3a02089 	mov	r2, #137	; 0x89
   1bfb4:	e59f104c 	ldr	r1, [pc, #76]	; 1c008 <CARPHandler::Process()+0x414>
   1bfb8:	e59f0060 	ldr	r0, [pc, #96]	; 1c020 <CARPHandler::Process()+0x42c>
   1bfbc:	eb002040 	bl	240c4 <assertion_failed>
   1bfc0:	eb003d8d 	bl	2b5fc <EnterCritical>
   1bfc4:	e594e010 	ldr	lr, [r4, #16]
   1bfc8:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1bfcc:	e35e0000 	cmp	lr, #0
   1bfd0:	1affff8f 	bne	1be14 <CARPHandler::Process()+0x220>
   1bfd4:	eaffffa4 	b	1be6c <CARPHandler::Process()+0x278>
   1bfd8:	e1a02008 	mov	r2, r8
   1bfdc:	e1a01005 	mov	r1, r5
   1bfe0:	e1a00004 	mov	r0, r4
   1bfe4:	e28d3010 	add	r3, sp, #16
   1bfe8:	ebfffeb1 	bl	1bab4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1bfec:	e28d2010 	add	r2, sp, #16
   1bff0:	e1a01008 	mov	r1, r8
   1bff4:	e1a00004 	mov	r0, r4
   1bff8:	ebfffe51 	bl	1b944 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1bffc:	eaffff3c 	b	1bcf4 <CARPHandler::Process()+0x100>
   1c000:	0000176f 	.word	0x0000176f
   1c004:	0001b6a4 	.word	0x0001b6a4
   1c008:	000454a0 	.word	0x000454a0
   1c00c:	000454dc 	.word	0x000454dc
   1c010:	000451a4 	.word	0x000451a4
   1c014:	00045288 	.word	0x00045288
   1c018:	000454cc 	.word	0x000454cc
   1c01c:	00045260 	.word	0x00045260
   1c020:	00045364 	.word	0x00045364

0001c024 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c024:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c028:	e1a05000 	mov	r5, r0
   1c02c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c030:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c034:	e3500000 	cmp	r0, #0
   1c038:	e1a0a001 	mov	sl, r1
   1c03c:	e58d2014 	str	r2, [sp, #20]
   1c040:	e58d3010 	str	r3, [sp, #16]
   1c044:	1a000076 	bne	1c224 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x200>
   1c048:	e5950010 	ldr	r0, [r5, #16]
   1c04c:	e3500000 	cmp	r0, #0
   1c050:	e1a08000 	mov	r8, r0
   1c054:	0a000084 	beq	1c26c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x248>
   1c058:	e3e09000 	mvn	r9, #0
   1c05c:	e3e0b014 	mvn	fp, #20
   1c060:	e3a04000 	mov	r4, #0
   1c064:	e3a08014 	mov	r8, #20
   1c068:	e58d900c 	str	r9, [sp, #12]
   1c06c:	e04bb005 	sub	fp, fp, r5
   1c070:	e2856015 	add	r6, r5, #21
   1c074:	e1a07184 	lsl	r7, r4, #3
   1c078:	e0473004 	sub	r3, r7, r4
   1c07c:	e0853103 	add	r3, r5, r3, lsl #2
   1c080:	e5d33014 	ldrb	r3, [r3, #20]
   1c084:	e3530004 	cmp	r3, #4
   1c088:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c08c:	ea000060 	b	1c214 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f0>
   1c090:	0001c208 	.word	0x0001c208
   1c094:	0001c1ac 	.word	0x0001c1ac
   1c098:	0001c1ac 	.word	0x0001c1ac
   1c09c:	0001c1ac 	.word	0x0001c1ac
   1c0a0:	0001c0a4 	.word	0x0001c0a4
   1c0a4:	e5963013 	ldr	r3, [r6, #19]
   1c0a8:	e1a01006 	mov	r1, r6
   1c0ac:	e1530009 	cmp	r3, r9
   1c0b0:	31a09003 	movcc	r9, r3
   1c0b4:	e59d300c 	ldr	r3, [sp, #12]
   1c0b8:	31a03004 	movcc	r3, r4
   1c0bc:	e1a0000a 	mov	r0, sl
   1c0c0:	e58d300c 	str	r3, [sp, #12]
   1c0c4:	eb0011a7 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   1c0c8:	e3500000 	cmp	r0, #0
   1c0cc:	e08b1006 	add	r1, fp, r6
   1c0d0:	1a000076 	bne	1c2b0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x28c>
   1c0d4:	e5950010 	ldr	r0, [r5, #16]
   1c0d8:	e2844001 	add	r4, r4, #1
   1c0dc:	e1500004 	cmp	r0, r4
   1c0e0:	e286601c 	add	r6, r6, #28
   1c0e4:	8affffe2 	bhi	1c074 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c0e8:	e3580014 	cmp	r8, #20
   1c0ec:	0a00004e 	beq	1c22c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x208>
   1c0f0:	e1a06188 	lsl	r6, r8, #3
   1c0f4:	e0467008 	sub	r7, r6, r8
   1c0f8:	e1a07107 	lsl	r7, r7, #2
   1c0fc:	e2877015 	add	r7, r7, #21
   1c100:	e3a09001 	mov	r9, #1
   1c104:	e0464008 	sub	r4, r6, r8
   1c108:	e0854104 	add	r4, r5, r4, lsl #2
   1c10c:	e1a0000a 	mov	r0, sl
   1c110:	e0851007 	add	r1, r5, r7
   1c114:	e5c49014 	strb	r9, [r4, #20]
   1c118:	eb001214 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1c11c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c120:	e3500000 	cmp	r0, #0
   1c124:	0a000075 	beq	1c300 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1c128:	e59d1010 	ldr	r1, [sp, #16]
   1c12c:	e3a03000 	mov	r3, #0
   1c130:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c134:	eb0012d0 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c138:	eb0035a0 	bl	297c0 <CTimer::Get()>
   1c13c:	eb0032e9 	bl	28ce8 <CTimer::GetTicks() const>
   1c140:	e5849024 	str	r9, [r4, #36]	; 0x24
   1c144:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c148:	eb00359c 	bl	297c0 <CTimer::Get()>
   1c14c:	e1a03008 	mov	r3, r8
   1c150:	e58d5000 	str	r5, [sp]
   1c154:	e59f21f8 	ldr	r2, [pc, #504]	; 1c354 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1c158:	e3a01050 	mov	r1, #80	; 0x50
   1c15c:	eb0033d7 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c160:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c164:	e5840020 	str	r0, [r4, #32]
   1c168:	e3530000 	cmp	r3, #0
   1c16c:	1a00004d 	bne	1c2a8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x284>
   1c170:	e28d0018 	add	r0, sp, #24
   1c174:	eb003906 	bl	2a594 <CMACAddress::CMACAddress()>
   1c178:	e28d0018 	add	r0, sp, #24
   1c17c:	eb00393a 	bl	2a66c <CMACAddress::SetBroadcast()>
   1c180:	e1a0200a 	mov	r2, sl
   1c184:	e28d3018 	add	r3, sp, #24
   1c188:	e1a00005 	mov	r0, r5
   1c18c:	e3a01001 	mov	r1, #1
   1c190:	ebfffe47 	bl	1bab4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c194:	e28d0018 	add	r0, sp, #24
   1c198:	eb003900 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   1c19c:	e3a02000 	mov	r2, #0
   1c1a0:	e1a00002 	mov	r0, r2
   1c1a4:	e28dd024 	add	sp, sp, #36	; 0x24
   1c1a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1ac:	e1a01006 	mov	r1, r6
   1c1b0:	e1a0000a 	mov	r0, sl
   1c1b4:	eb00116b 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   1c1b8:	e3500000 	cmp	r0, #0
   1c1bc:	0affffc4 	beq	1c0d4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb0>
   1c1c0:	e0474004 	sub	r4, r7, r4
   1c1c4:	e0854104 	add	r4, r5, r4, lsl #2
   1c1c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c1cc:	e3500000 	cmp	r0, #0
   1c1d0:	0a000052 	beq	1c320 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c1d4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c1d8:	e59d1010 	ldr	r1, [sp, #16]
   1c1dc:	e3a03000 	mov	r3, #0
   1c1e0:	eb0012a5 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c1e4:	eb003575 	bl	297c0 <CTimer::Get()>
   1c1e8:	eb0032be 	bl	28ce8 <CTimer::GetTicks() const>
   1c1ec:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c1f0:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c1f4:	e3520000 	cmp	r2, #0
   1c1f8:	0affffe8 	beq	1c1a0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c1fc:	eb003d29 	bl	2b6a8 <LeaveCritical>
   1c200:	e3a02000 	mov	r2, #0
   1c204:	eaffffe5 	b	1c1a0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c208:	e3580014 	cmp	r8, #20
   1c20c:	01a08004 	moveq	r8, r4
   1c210:	eaffffb0 	b	1c0d8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb4>
   1c214:	e59f213c 	ldr	r2, [pc, #316]	; 1c358 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1c218:	e59f113c 	ldr	r1, [pc, #316]	; 1c35c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c21c:	e59f013c 	ldr	r0, [pc, #316]	; 1c360 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1c220:	eb001fa7 	bl	240c4 <assertion_failed>
   1c224:	eb003cf4 	bl	2b5fc <EnterCritical>
   1c228:	eaffff86 	b	1c048 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1c22c:	e3500014 	cmp	r0, #20
   1c230:	1a000042 	bne	1c340 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c234:	e59d300c 	ldr	r3, [sp, #12]
   1c238:	e3530013 	cmp	r3, #19
   1c23c:	8a000033 	bhi	1c310 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c240:	e3a02000 	mov	r2, #0
   1c244:	e59d100c 	ldr	r1, [sp, #12]
   1c248:	e1a03181 	lsl	r3, r1, #3
   1c24c:	e0437001 	sub	r7, r3, r1
   1c250:	e1a07107 	lsl	r7, r7, #2
   1c254:	e1a06003 	mov	r6, r3
   1c258:	e0853007 	add	r3, r5, r7
   1c25c:	e1a08001 	mov	r8, r1
   1c260:	e2877015 	add	r7, r7, #21
   1c264:	e5c32014 	strb	r2, [r3, #20]
   1c268:	eaffffa4 	b	1c100 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c26c:	e3a07015 	mov	r7, #21
   1c270:	e3a03000 	mov	r3, #0
   1c274:	e1a06180 	lsl	r6, r0, #3
   1c278:	e0460000 	sub	r0, r6, r0
   1c27c:	e0854100 	add	r4, r5, r0, lsl #2
   1c280:	e5c43014 	strb	r3, [r4, #20]
   1c284:	e3a0000c 	mov	r0, #12
   1c288:	eb0039a9 	bl	2a934 <operator new(unsigned int)>
   1c28c:	e1a09000 	mov	r9, r0
   1c290:	eb00123a 	bl	20b80 <CNetQueue::CNetQueue()>
   1c294:	e5953010 	ldr	r3, [r5, #16]
   1c298:	e584902c 	str	r9, [r4, #44]	; 0x2c
   1c29c:	e2833001 	add	r3, r3, #1
   1c2a0:	e5853010 	str	r3, [r5, #16]
   1c2a4:	eaffff95 	b	1c100 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c2a8:	eb003cfe 	bl	2b6a8 <LeaveCritical>
   1c2ac:	eaffffaf 	b	1c170 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x14c>
   1c2b0:	e59d3014 	ldr	r3, [sp, #20]
   1c2b4:	e3530000 	cmp	r3, #0
   1c2b8:	0a00001c 	beq	1c330 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1c2bc:	e2811019 	add	r1, r1, #25
   1c2c0:	e0851001 	add	r1, r5, r1
   1c2c4:	e58d000c 	str	r0, [sp, #12]
   1c2c8:	e59d0014 	ldr	r0, [sp, #20]
   1c2cc:	eb0038d1 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   1c2d0:	eb00353a 	bl	297c0 <CTimer::Get()>
   1c2d4:	eb003283 	bl	28ce8 <CTimer::GetTicks() const>
   1c2d8:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c2dc:	e0474004 	sub	r4, r7, r4
   1c2e0:	e0855104 	add	r5, r5, r4, lsl #2
   1c2e4:	e3530000 	cmp	r3, #0
   1c2e8:	e5850028 	str	r0, [r5, #40]	; 0x28
   1c2ec:	e59d200c 	ldr	r2, [sp, #12]
   1c2f0:	0affffaa 	beq	1c1a0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c2f4:	eb003ceb 	bl	2b6a8 <LeaveCritical>
   1c2f8:	e59d200c 	ldr	r2, [sp, #12]
   1c2fc:	eaffffa7 	b	1c1a0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c300:	e59f205c 	ldr	r2, [pc, #92]	; 1c364 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1c304:	e59f1050 	ldr	r1, [pc, #80]	; 1c35c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c308:	e59f0058 	ldr	r0, [pc, #88]	; 1c368 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x344>
   1c30c:	eb001f6c 	bl	240c4 <assertion_failed>
   1c310:	e59f2054 	ldr	r2, [pc, #84]	; 1c36c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x348>
   1c314:	e59f1040 	ldr	r1, [pc, #64]	; 1c35c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c318:	e59f0050 	ldr	r0, [pc, #80]	; 1c370 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x34c>
   1c31c:	eb001f68 	bl	240c4 <assertion_failed>
   1c320:	e3a020eb 	mov	r2, #235	; 0xeb
   1c324:	e59f1030 	ldr	r1, [pc, #48]	; 1c35c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c328:	e59f0044 	ldr	r0, [pc, #68]	; 1c374 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x350>
   1c32c:	eb001f64 	bl	240c4 <assertion_failed>
   1c330:	e3a020ff 	mov	r2, #255	; 0xff
   1c334:	e59f1020 	ldr	r1, [pc, #32]	; 1c35c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c338:	e59f0038 	ldr	r0, [pc, #56]	; 1c378 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x354>
   1c33c:	eb001f60 	bl	240c4 <assertion_failed>
   1c340:	e3a0701c 	mov	r7, #28
   1c344:	e0070097 	mul	r7, r7, r0
   1c348:	e1a08000 	mov	r8, r0
   1c34c:	e2877015 	add	r7, r7, #21
   1c350:	eaffffc6 	b	1c270 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24c>
   1c354:	0001b6a4 	.word	0x0001b6a4
   1c358:	0000010a 	.word	0x0000010a
   1c35c:	000454a0 	.word	0x000454a0
   1c360:	000414b4 	.word	0x000414b4
   1c364:	00000129 	.word	0x00000129
   1c368:	000454dc 	.word	0x000454dc
   1c36c:	0000011d 	.word	0x0000011d
   1c370:	00045528 	.word	0x00045528
   1c374:	000454f4 	.word	0x000454f4
   1c378:	00045514 	.word	0x00045514

0001c37c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1c37c:	e92d4010 	push	{r4, lr}
   1c380:	e59de008 	ldr	lr, [sp, #8]
   1c384:	e3510000 	cmp	r1, #0
   1c388:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1c38c:	0a000009 	beq	1c3b8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1c390:	e3520000 	cmp	r2, #0
   1c394:	0a00000b 	beq	1c3c8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1c398:	e3530000 	cmp	r3, #0
   1c39c:	0a00000d 	beq	1c3d8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1c3a0:	e35e0000 	cmp	lr, #0
   1c3a4:	18bd8010 	popne	{r4, pc}
   1c3a8:	e3a0203e 	mov	r2, #62	; 0x3e
   1c3ac:	e59f1034 	ldr	r1, [pc, #52]	; 1c3e8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1c3b0:	e59f0034 	ldr	r0, [pc, #52]	; 1c3ec <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1c3b4:	eb001f42 	bl	240c4 <assertion_failed>
   1c3b8:	e3a0203b 	mov	r2, #59	; 0x3b
   1c3bc:	e59f1024 	ldr	r1, [pc, #36]	; 1c3e8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1c3c0:	e59f0028 	ldr	r0, [pc, #40]	; 1c3f0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1c3c4:	eb001f3e 	bl	240c4 <assertion_failed>
   1c3c8:	e3a0203c 	mov	r2, #60	; 0x3c
   1c3cc:	e59f1014 	ldr	r1, [pc, #20]	; 1c3e8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1c3d0:	e59f001c 	ldr	r0, [pc, #28]	; 1c3f4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1c3d4:	eb001f3a 	bl	240c4 <assertion_failed>
   1c3d8:	e3a0203d 	mov	r2, #61	; 0x3d
   1c3dc:	e59f1004 	ldr	r1, [pc, #4]	; 1c3e8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1c3e0:	e59f0010 	ldr	r0, [pc, #16]	; 1c3f8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1c3e4:	eb001f36 	bl	240c4 <assertion_failed>
   1c3e8:	0004554c 	.word	0x0004554c
   1c3ec:	0004555c 	.word	0x0004555c
   1c3f0:	000451a4 	.word	0x000451a4
   1c3f4:	000451b8 	.word	0x000451b8
   1c3f8:	000454cc 	.word	0x000454cc

0001c3fc <CICMPHandler::~CICMPHandler()>:
   1c3fc:	e12fff1e 	bx	lr

0001c400 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1c400:	e92d4070 	push	{r4, r5, r6, lr}
   1c404:	e3510002 	cmp	r1, #2
   1c408:	e24dd010 	sub	sp, sp, #16
   1c40c:	ca000024 	bgt	1c4a4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1c410:	e3520000 	cmp	r2, #0
   1c414:	e1a05002 	mov	r5, r2
   1c418:	e5cd1000 	strb	r1, [sp]
   1c41c:	0a000024 	beq	1c4b4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1c420:	e1a04003 	mov	r4, r3
   1c424:	e5d23009 	ldrb	r3, [r2, #9]
   1c428:	e2851010 	add	r1, r5, #16
   1c42c:	e3a02004 	mov	r2, #4
   1c430:	e1a06000 	mov	r6, r0
   1c434:	e28d0002 	add	r0, sp, #2
   1c438:	e5cd3001 	strb	r3, [sp, #1]
   1c43c:	eb003763 	bl	2a1d0 <memcpy>
   1c440:	e285100c 	add	r1, r5, #12
   1c444:	e3a02004 	mov	r2, #4
   1c448:	e28d0006 	add	r0, sp, #6
   1c44c:	eb00375f 	bl	2a1d0 <memcpy>
   1c450:	e3540000 	cmp	r4, #0
   1c454:	0a00001a 	beq	1c4c4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1c458:	e5d42002 	ldrb	r2, [r4, #2]
   1c45c:	e5d4c003 	ldrb	ip, [r4, #3]
   1c460:	e5d43000 	ldrb	r3, [r4]
   1c464:	e5d41001 	ldrb	r1, [r4, #1]
   1c468:	e596000c 	ldr	r0, [r6, #12]
   1c46c:	e182240c 	orr	r2, r2, ip, lsl #8
   1c470:	e1833401 	orr	r3, r3, r1, lsl #8
   1c474:	e6bf2fb2 	rev16	r2, r2
   1c478:	e6bf3fb3 	rev16	r3, r3
   1c47c:	e3500000 	cmp	r0, #0
   1c480:	e1cd20ba 	strh	r2, [sp, #10]
   1c484:	e1cd30bc 	strh	r3, [sp, #12]
   1c488:	0a000011 	beq	1c4d4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1c48c:	e1a0100d 	mov	r1, sp
   1c490:	e3a03000 	mov	r3, #0
   1c494:	e3a0200e 	mov	r2, #14
   1c498:	eb0011f7 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c49c:	e28dd010 	add	sp, sp, #16
   1c4a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c4a4:	e3a020ee 	mov	r2, #238	; 0xee
   1c4a8:	e59f1034 	ldr	r1, [pc, #52]	; 1c4e4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1c4ac:	e59f0034 	ldr	r0, [pc, #52]	; 1c4e8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1c4b0:	eb001f03 	bl	240c4 <assertion_failed>
   1c4b4:	e3a020f3 	mov	r2, #243	; 0xf3
   1c4b8:	e59f1024 	ldr	r1, [pc, #36]	; 1c4e4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1c4bc:	e59f0028 	ldr	r0, [pc, #40]	; 1c4ec <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1c4c0:	eb001eff 	bl	240c4 <assertion_failed>
   1c4c4:	e3a020f8 	mov	r2, #248	; 0xf8
   1c4c8:	e59f1014 	ldr	r1, [pc, #20]	; 1c4e4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1c4cc:	e59f001c 	ldr	r0, [pc, #28]	; 1c4f0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1c4d0:	eb001efb 	bl	240c4 <assertion_failed>
   1c4d4:	e3a020fc 	mov	r2, #252	; 0xfc
   1c4d8:	e59f1004 	ldr	r1, [pc, #4]	; 1c4e4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1c4dc:	e59f0010 	ldr	r0, [pc, #16]	; 1c4f4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1c4e0:	eb001ef7 	bl	240c4 <assertion_failed>
   1c4e4:	0004554c 	.word	0x0004554c
   1c4e8:	00045578 	.word	0x00045578
   1c4ec:	00045598 	.word	0x00045598
   1c4f0:	000455a8 	.word	0x000455a8
   1c4f4:	0004555c 	.word	0x0004555c

0001c4f8 <CICMPHandler::Process()>:
   1c4f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4fc:	e1a04000 	mov	r4, r0
   1c500:	e5900008 	ldr	r0, [r0, #8]
   1c504:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1c508:	e3500000 	cmp	r0, #0
   1c50c:	e24dd004 	sub	sp, sp, #4
   1c510:	0a00007e 	beq	1c710 <CICMPHandler::Process()+0x218>
   1c514:	e59fb380 	ldr	fp, [pc, #896]	; 1c89c <CICMPHandler::Process()+0x3a4>
   1c518:	e59f6380 	ldr	r6, [pc, #896]	; 1c8a0 <CICMPHandler::Process()+0x3a8>
   1c51c:	e59fa380 	ldr	sl, [pc, #896]	; 1c8a4 <CICMPHandler::Process()+0x3ac>
   1c520:	e59f9380 	ldr	r9, [pc, #896]	; 1c8a8 <CICMPHandler::Process()+0x3b0>
   1c524:	e28d7048 	add	r7, sp, #72	; 0x48
   1c528:	e28d2014 	add	r2, sp, #20
   1c52c:	e28d1030 	add	r1, sp, #48	; 0x30
   1c530:	eb001217 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1c534:	e2505000 	subs	r5, r0, #0
   1c538:	0a000078 	beq	1c720 <CICMPHandler::Process()+0x228>
   1c53c:	e59d8014 	ldr	r8, [sp, #20]
   1c540:	e3580000 	cmp	r8, #0
   1c544:	0a000050 	beq	1c68c <CICMPHandler::Process()+0x194>
   1c548:	e5d82000 	ldrb	r2, [r8]
   1c54c:	e3520001 	cmp	r2, #1
   1c550:	1a000051 	bne	1c69c <CICMPHandler::Process()+0x1a4>
   1c554:	e2881001 	add	r1, r8, #1
   1c558:	e28d0018 	add	r0, sp, #24
   1c55c:	eb0010d2 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1c560:	e2881005 	add	r1, r8, #5
   1c564:	e28d0020 	add	r0, sp, #32
   1c568:	eb0010cf 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1c56c:	e1a00008 	mov	r0, r8
   1c570:	e3a01009 	mov	r1, #9
   1c574:	eb0038fc 	bl	2a96c <operator delete(void*, unsigned int)>
   1c578:	e5943000 	ldr	r3, [r4]
   1c57c:	e3530000 	cmp	r3, #0
   1c580:	0a000049 	beq	1c6ac <CICMPHandler::Process()+0x1b4>
   1c584:	e28d0020 	add	r0, sp, #32
   1c588:	eb00111d 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1c58c:	e3500000 	cmp	r0, #0
   1c590:	0a000005 	beq	1c5ac <CICMPHandler::Process()+0xb4>
   1c594:	e28d0020 	add	r0, sp, #32
   1c598:	eb001042 	bl	206a8 <CIPAddress::~CIPAddress()>
   1c59c:	e28d0018 	add	r0, sp, #24
   1c5a0:	eb001040 	bl	206a8 <CIPAddress::~CIPAddress()>
   1c5a4:	e5940008 	ldr	r0, [r4, #8]
   1c5a8:	eaffffde 	b	1c528 <CICMPHandler::Process()+0x30>
   1c5ac:	e5940000 	ldr	r0, [r4]
   1c5b0:	eb000fd4 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1c5b4:	e1a01000 	mov	r1, r0
   1c5b8:	e28d0020 	add	r0, sp, #32
   1c5bc:	eb00103a 	bl	206ac <CIPAddress::operator==(CIPAddress const&) const>
   1c5c0:	e3500000 	cmp	r0, #0
   1c5c4:	1afffff2 	bne	1c594 <CICMPHandler::Process()+0x9c>
   1c5c8:	e3550007 	cmp	r5, #7
   1c5cc:	9afffff0 	bls	1c594 <CICMPHandler::Process()+0x9c>
   1c5d0:	e1a01005 	mov	r1, r5
   1c5d4:	e28d0030 	add	r0, sp, #48	; 0x30
   1c5d8:	eb0012b3 	bl	210ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1c5dc:	e3500000 	cmp	r0, #0
   1c5e0:	1affffeb 	bne	1c594 <CICMPHandler::Process()+0x9c>
   1c5e4:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1c5e8:	e3530008 	cmp	r3, #8
   1c5ec:	0a000032 	beq	1c6bc <CICMPHandler::Process()+0x1c4>
   1c5f0:	e355001c 	cmp	r5, #28
   1c5f4:	9affffe6 	bls	1c594 <CICMPHandler::Process()+0x9c>
   1c5f8:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1c5fc:	e203200f 	and	r2, r3, #15
   1c600:	e2421005 	sub	r1, r2, #5
   1c604:	e3510001 	cmp	r1, #1
   1c608:	8affffe1 	bhi	1c594 <CICMPHandler::Process()+0x9c>
   1c60c:	e1a03243 	asr	r3, r3, #4
   1c610:	e3530004 	cmp	r3, #4
   1c614:	1affffde 	bne	1c594 <CICMPHandler::Process()+0x9c>
   1c618:	e5940000 	ldr	r0, [r4]
   1c61c:	e58d200c 	str	r2, [sp, #12]
   1c620:	eb000fae 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1c624:	e28d1044 	add	r1, sp, #68	; 0x44
   1c628:	eb001065 	bl	207c4 <CIPAddress::operator!=(unsigned char const*) const>
   1c62c:	e3500000 	cmp	r0, #0
   1c630:	1affffd7 	bne	1c594 <CICMPHandler::Process()+0x9c>
   1c634:	e59d200c 	ldr	r2, [sp, #12]
   1c638:	e1a02102 	lsl	r2, r2, #2
   1c63c:	e2823010 	add	r3, r2, #16
   1c640:	e1550003 	cmp	r5, r3
   1c644:	3affffd2 	bcc	1c594 <CICMPHandler::Process()+0x9c>
   1c648:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1c64c:	e28d5038 	add	r5, sp, #56	; 0x38
   1c650:	e2433003 	sub	r3, r3, #3
   1c654:	e0855002 	add	r5, r5, r2
   1c658:	e3530009 	cmp	r3, #9
   1c65c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c660:	eaffffcb 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c664:	0001c7b0 	.word	0x0001c7b0
   1c668:	0001c594 	.word	0x0001c594
   1c66c:	0001c760 	.word	0x0001c760
   1c670:	0001c594 	.word	0x0001c594
   1c674:	0001c594 	.word	0x0001c594
   1c678:	0001c594 	.word	0x0001c594
   1c67c:	0001c594 	.word	0x0001c594
   1c680:	0001c594 	.word	0x0001c594
   1c684:	0001c7e4 	.word	0x0001c7e4
   1c688:	0001c72c 	.word	0x0001c72c
   1c68c:	e3a02052 	mov	r2, #82	; 0x52
   1c690:	e59f1214 	ldr	r1, [pc, #532]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c694:	e59f0214 	ldr	r0, [pc, #532]	; 1c8b0 <CICMPHandler::Process()+0x3b8>
   1c698:	eb001e89 	bl	240c4 <assertion_failed>
   1c69c:	e3a02053 	mov	r2, #83	; 0x53
   1c6a0:	e59f1204 	ldr	r1, [pc, #516]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c6a4:	e59f0208 	ldr	r0, [pc, #520]	; 1c8b4 <CICMPHandler::Process()+0x3bc>
   1c6a8:	eb001e85 	bl	240c4 <assertion_failed>
   1c6ac:	e3a0205b 	mov	r2, #91	; 0x5b
   1c6b0:	e59f11f4 	ldr	r1, [pc, #500]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c6b4:	e59f01fc 	ldr	r0, [pc, #508]	; 1c8b8 <CICMPHandler::Process()+0x3c0>
   1c6b8:	eb001e81 	bl	240c4 <assertion_failed>
   1c6bc:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1c6c0:	e3530000 	cmp	r3, #0
   1c6c4:	1affffb2 	bne	1c594 <CICMPHandler::Process()+0x9c>
   1c6c8:	e1a01005 	mov	r1, r5
   1c6cc:	e28d0030 	add	r0, sp, #48	; 0x30
   1c6d0:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
   1c6d4:	e5cd3031 	strb	r3, [sp, #49]	; 0x31
   1c6d8:	e1cd33b2 	strh	r3, [sp, #50]	; 0x32
   1c6dc:	eb001272 	bl	210ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1c6e0:	e5942004 	ldr	r2, [r4, #4]
   1c6e4:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1c6e8:	e3520000 	cmp	r2, #0
   1c6ec:	0a000049 	beq	1c818 <CICMPHandler::Process()+0x320>
   1c6f0:	e3a01001 	mov	r1, #1
   1c6f4:	e1a03005 	mov	r3, r5
   1c6f8:	e58d1000 	str	r1, [sp]
   1c6fc:	e1a00002 	mov	r0, r2
   1c700:	e28d1018 	add	r1, sp, #24
   1c704:	e28d2030 	add	r2, sp, #48	; 0x30
   1c708:	ebfff7a3 	bl	1a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1c70c:	eaffffa0 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c710:	e3a0204e 	mov	r2, #78	; 0x4e
   1c714:	e59f1190 	ldr	r1, [pc, #400]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c718:	e59f019c 	ldr	r0, [pc, #412]	; 1c8bc <CICMPHandler::Process()+0x3c4>
   1c71c:	eb001e68 	bl	240c4 <assertion_failed>
   1c720:	e28dde67 	add	sp, sp, #1648	; 0x670
   1c724:	e28dd004 	add	sp, sp, #4
   1c728:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c72c:	eb002757 	bl	26490 <CLogger::Get()>
   1c730:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1c734:	e1a0300b 	mov	r3, fp
   1c738:	e58d2000 	str	r2, [sp]
   1c73c:	e1a01006 	mov	r1, r6
   1c740:	e3a02002 	mov	r2, #2
   1c744:	eb00268e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c748:	e1a03005 	mov	r3, r5
   1c74c:	e28d2038 	add	r2, sp, #56	; 0x38
   1c750:	e3a01002 	mov	r1, #2
   1c754:	e1a00004 	mov	r0, r4
   1c758:	ebffff28 	bl	1c400 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1c75c:	eaffff8c 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c760:	e28d0028 	add	r0, sp, #40	; 0x28
   1c764:	e28d1034 	add	r1, sp, #52	; 0x34
   1c768:	eb00104f 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1c76c:	e5943004 	ldr	r3, [r4, #4]
   1c770:	e3530000 	cmp	r3, #0
   1c774:	0a000044 	beq	1c88c <CICMPHandler::Process()+0x394>
   1c778:	e5940000 	ldr	r0, [r4]
   1c77c:	eb000f57 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1c780:	e1a05000 	mov	r5, r0
   1c784:	e5940000 	ldr	r0, [r4]
   1c788:	eb000f58 	bl	204f0 <CNetConfig::GetNetMask() const>
   1c78c:	e1a01005 	mov	r1, r5
   1c790:	e1a02000 	mov	r2, r0
   1c794:	e28d0028 	add	r0, sp, #40	; 0x28
   1c798:	eb0010cb 	bl	20acc <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1c79c:	e3500000 	cmp	r0, #0
   1c7a0:	1a000020 	bne	1c828 <CICMPHandler::Process()+0x330>
   1c7a4:	e28d0028 	add	r0, sp, #40	; 0x28
   1c7a8:	eb000fbe 	bl	206a8 <CIPAddress::~CIPAddress()>
   1c7ac:	eaffff78 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c7b0:	eb002736 	bl	26490 <CLogger::Get()>
   1c7b4:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1c7b8:	e1a01006 	mov	r1, r6
   1c7bc:	e58d2000 	str	r2, [sp]
   1c7c0:	e59f30f8 	ldr	r3, [pc, #248]	; 1c8c0 <CICMPHandler::Process()+0x3c8>
   1c7c4:	e3a02004 	mov	r2, #4
   1c7c8:	eb00266d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c7cc:	e1a03005 	mov	r3, r5
   1c7d0:	e28d2038 	add	r2, sp, #56	; 0x38
   1c7d4:	e3a01000 	mov	r1, #0
   1c7d8:	e1a00004 	mov	r0, r4
   1c7dc:	ebffff07 	bl	1c400 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1c7e0:	eaffff6b 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c7e4:	eb002729 	bl	26490 <CLogger::Get()>
   1c7e8:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1c7ec:	e1a0300a 	mov	r3, sl
   1c7f0:	e58d2000 	str	r2, [sp]
   1c7f4:	e1a01006 	mov	r1, r6
   1c7f8:	e3a02002 	mov	r2, #2
   1c7fc:	eb002660 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c800:	e1a03005 	mov	r3, r5
   1c804:	e28d2038 	add	r2, sp, #56	; 0x38
   1c808:	e3a01001 	mov	r1, #1
   1c80c:	e1a00004 	mov	r0, r4
   1c810:	ebfffefa 	bl	1c400 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1c814:	eaffff5e 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c818:	e3a02078 	mov	r2, #120	; 0x78
   1c81c:	e59f1088 	ldr	r1, [pc, #136]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c820:	e59f009c 	ldr	r0, [pc, #156]	; 1c8c4 <CICMPHandler::Process()+0x3cc>
   1c824:	eb001e26 	bl	240c4 <assertion_failed>
   1c828:	e1a01007 	mov	r1, r7
   1c82c:	e5940004 	ldr	r0, [r4, #4]
   1c830:	ebfff899 	bl	1aa9c <CNetworkLayer::GetGateway(unsigned char const*) const>
   1c834:	e1a01000 	mov	r1, r0
   1c838:	e28d0018 	add	r0, sp, #24
   1c83c:	eb000fe0 	bl	207c4 <CIPAddress::operator!=(unsigned char const*) const>
   1c840:	e3500000 	cmp	r0, #0
   1c844:	1affffd6 	bne	1c7a4 <CICMPHandler::Process()+0x2ac>
   1c848:	eb002710 	bl	26490 <CLogger::Get()>
   1c84c:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1c850:	e1a03009 	mov	r3, r9
   1c854:	e1a01006 	mov	r1, r6
   1c858:	e58d2000 	str	r2, [sp]
   1c85c:	e3a02004 	mov	r2, #4
   1c860:	eb002647 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c864:	e28d0028 	add	r0, sp, #40	; 0x28
   1c868:	e5945004 	ldr	r5, [r4, #4]
   1c86c:	eb001033 	bl	20940 <CIPAddress::Get() const>
   1c870:	e1a01007 	mov	r1, r7
   1c874:	e1a02000 	mov	r2, r0
   1c878:	e1a00005 	mov	r0, r5
   1c87c:	ebfff884 	bl	1aa94 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1c880:	e28d0028 	add	r0, sp, #40	; 0x28
   1c884:	eb000f87 	bl	206a8 <CIPAddress::~CIPAddress()>
   1c888:	eaffff41 	b	1c594 <CICMPHandler::Process()+0x9c>
   1c88c:	e3a020a7 	mov	r2, #167	; 0xa7
   1c890:	e59f1014 	ldr	r1, [pc, #20]	; 1c8ac <CICMPHandler::Process()+0x3b4>
   1c894:	e59f0028 	ldr	r0, [pc, #40]	; 1c8c4 <CICMPHandler::Process()+0x3cc>
   1c898:	eb001e09 	bl	240c4 <assertion_failed>
   1c89c:	00045618 	.word	0x00045618
   1c8a0:	00045544 	.word	0x00045544
   1c8a4:	00045604 	.word	0x00045604
   1c8a8:	00045630 	.word	0x00045630
   1c8ac:	0004554c 	.word	0x0004554c
   1c8b0:	00045220 	.word	0x00045220
   1c8b4:	000455c0 	.word	0x000455c0
   1c8b8:	000451a4 	.word	0x000451a4
   1c8bc:	000454cc 	.word	0x000454cc
   1c8c0:	000455e4 	.word	0x000455e4
   1c8c4:	000451b8 	.word	0x000451b8

0001c8c8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1c8c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c8cc:	e2525000 	subs	r5, r2, #0
   1c8d0:	e24dd020 	sub	sp, sp, #32
   1c8d4:	0a00003e 	beq	1c9d4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x10c>
   1c8d8:	e3530014 	cmp	r3, #20
   1c8dc:	e1a06003 	mov	r6, r3
   1c8e0:	9a00003f 	bls	1c9e4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   1c8e4:	e1a08001 	mov	r8, r1
   1c8e8:	e5d51000 	ldrb	r1, [r5]
   1c8ec:	e201200f 	and	r2, r1, #15
   1c8f0:	e2423005 	sub	r3, r2, #5
   1c8f4:	e3530001 	cmp	r3, #1
   1c8f8:	8a00003d 	bhi	1c9f4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x12c>
   1c8fc:	e1a01241 	asr	r1, r1, #4
   1c900:	e3510004 	cmp	r1, #4
   1c904:	e1a04102 	lsl	r4, r2, #2
   1c908:	1a00003d 	bne	1ca04 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x13c>
   1c90c:	e1a07000 	mov	r7, r0
   1c910:	e5900000 	ldr	r0, [r0]
   1c914:	eb000ef1 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1c918:	e285100c 	add	r1, r5, #12
   1c91c:	eb000f91 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   1c920:	e3500000 	cmp	r0, #0
   1c924:	0a00003a 	beq	1ca14 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   1c928:	e2843008 	add	r3, r4, #8
   1c92c:	e1560003 	cmp	r6, r3
   1c930:	3a00003b 	bcc	1ca24 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x15c>
   1c934:	e3580000 	cmp	r8, #0
   1c938:	e0854004 	add	r4, r5, r4
   1c93c:	0a000022 	beq	1c9cc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x104>
   1c940:	e59f30ec 	ldr	r3, [pc, #236]	; 1ca34 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x16c>
   1c944:	e59f20ec 	ldr	r2, [pc, #236]	; 1ca38 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1c948:	e3580001 	cmp	r8, #1
   1c94c:	01a08003 	moveq	r8, r3
   1c950:	11a08002 	movne	r8, r2
   1c954:	e28d0010 	add	r0, sp, #16
   1c958:	eb002ab1 	bl	27424 <CString::CString()>
   1c95c:	e2851010 	add	r1, r5, #16
   1c960:	e28d0008 	add	r0, sp, #8
   1c964:	eb000fd0 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   1c968:	e28d1010 	add	r1, sp, #16
   1c96c:	e28d0008 	add	r0, sp, #8
   1c970:	eb001034 	bl	20a48 <CIPAddress::Format(CString*) const>
   1c974:	eb0026c5 	bl	26490 <CLogger::Get()>
   1c978:	e1a06000 	mov	r6, r0
   1c97c:	e28d0010 	add	r0, sp, #16
   1c980:	eb002abd 	bl	2747c <CString::operator char const*() const>
   1c984:	e58d8000 	str	r8, [sp]
   1c988:	e58d0004 	str	r0, [sp, #4]
   1c98c:	e59f30a8 	ldr	r3, [pc, #168]	; 1ca3c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1c990:	e1a00006 	mov	r0, r6
   1c994:	e3a02004 	mov	r2, #4
   1c998:	e59f10a0 	ldr	r1, [pc, #160]	; 1ca40 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1c99c:	eb0025f8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c9a0:	e1a03004 	mov	r3, r4
   1c9a4:	e1a02005 	mov	r2, r5
   1c9a8:	e3a01000 	mov	r1, #0
   1c9ac:	e1a00007 	mov	r0, r7
   1c9b0:	ebfffe92 	bl	1c400 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1c9b4:	e28d0008 	add	r0, sp, #8
   1c9b8:	eb000f3a 	bl	206a8 <CIPAddress::~CIPAddress()>
   1c9bc:	e28d0010 	add	r0, sp, #16
   1c9c0:	eb002a64 	bl	27358 <CString::~CString()>
   1c9c4:	e28dd020 	add	sp, sp, #32
   1c9c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c9cc:	e59f8070 	ldr	r8, [pc, #112]	; 1ca44 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1c9d0:	eaffffdf 	b	1c954 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1c9d4:	e3a020c9 	mov	r2, #201	; 0xc9
   1c9d8:	e59f1068 	ldr	r1, [pc, #104]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1c9dc:	e59f0068 	ldr	r0, [pc, #104]	; 1ca4c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1c9e0:	eb001db7 	bl	240c4 <assertion_failed>
   1c9e4:	e3a020ca 	mov	r2, #202	; 0xca
   1c9e8:	e59f1058 	ldr	r1, [pc, #88]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1c9ec:	e59f005c 	ldr	r0, [pc, #92]	; 1ca50 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1c9f0:	eb001db3 	bl	240c4 <assertion_failed>
   1c9f4:	e3a020cf 	mov	r2, #207	; 0xcf
   1c9f8:	e59f1048 	ldr	r1, [pc, #72]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1c9fc:	e59f0050 	ldr	r0, [pc, #80]	; 1ca54 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1ca00:	eb001daf 	bl	240c4 <assertion_failed>
   1ca04:	e3a020d2 	mov	r2, #210	; 0xd2
   1ca08:	e59f1038 	ldr	r1, [pc, #56]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1ca0c:	e59f0044 	ldr	r0, [pc, #68]	; 1ca58 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1ca10:	eb001dab 	bl	240c4 <assertion_failed>
   1ca14:	e3a020d3 	mov	r2, #211	; 0xd3
   1ca18:	e59f1028 	ldr	r1, [pc, #40]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1ca1c:	e59f0038 	ldr	r0, [pc, #56]	; 1ca5c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1ca20:	eb001da7 	bl	240c4 <assertion_failed>
   1ca24:	e3a020d4 	mov	r2, #212	; 0xd4
   1ca28:	e59f1018 	ldr	r1, [pc, #24]	; 1ca48 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1ca2c:	e59f002c 	ldr	r0, [pc, #44]	; 1ca60 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1ca30:	eb001da3 	bl	240c4 <assertion_failed>
   1ca34:	0004564c 	.word	0x0004564c
   1ca38:	00049280 	.word	0x00049280
   1ca3c:	00045794 	.word	0x00045794
   1ca40:	00045544 	.word	0x00045544
   1ca44:	00045640 	.word	0x00045640
   1ca48:	0004554c 	.word	0x0004554c
   1ca4c:	00045654 	.word	0x00045654
   1ca50:	0004566c 	.word	0x0004566c
   1ca54:	0004568c 	.word	0x0004568c
   1ca58:	000456ec 	.word	0x000456ec
   1ca5c:	00045718 	.word	0x00045718
   1ca60:	00045754 	.word	0x00045754

0001ca64 <CRouteCache::CRouteCache()>:
   1ca64:	e3a02064 	mov	r2, #100	; 0x64
   1ca68:	e92d4010 	push	{r4, lr}
   1ca6c:	e1a04000 	mov	r4, r0
   1ca70:	e1a01002 	mov	r1, r2
   1ca74:	eb00298c 	bl	270ac <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1ca78:	e1a00004 	mov	r0, r4
   1ca7c:	e8bd8010 	pop	{r4, pc}

0001ca80 <CRouteCache::Flush()>:
   1ca80:	e92d4070 	push	{r4, r5, r6, lr}
   1ca84:	e1a05000 	mov	r5, r0
   1ca88:	eb0029ad 	bl	27144 <CPtrArray::GetCount() const>
   1ca8c:	e3500000 	cmp	r0, #0
   1ca90:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ca94:	e3a06008 	mov	r6, #8
   1ca98:	e2404001 	sub	r4, r0, #1
   1ca9c:	e1a01004 	mov	r1, r4
   1caa0:	e1a00005 	mov	r0, r5
   1caa4:	eb0029a8 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1caa8:	e1a01006 	mov	r1, r6
   1caac:	e5900000 	ldr	r0, [r0]
   1cab0:	eb0037ad 	bl	2a96c <operator delete(void*, unsigned int)>
   1cab4:	e2444001 	sub	r4, r4, #1
   1cab8:	e1a00005 	mov	r0, r5
   1cabc:	eb002a18 	bl	27324 <CPtrArray::RemoveLast()>
   1cac0:	e3740001 	cmn	r4, #1
   1cac4:	1afffff4 	bne	1ca9c <CRouteCache::Flush()+0x1c>
   1cac8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cacc <CRouteCache::~CRouteCache()>:
   1cacc:	e92d4010 	push	{r4, lr}
   1cad0:	e1a04000 	mov	r4, r0
   1cad4:	ebffffe9 	bl	1ca80 <CRouteCache::Flush()>
   1cad8:	e1a00004 	mov	r0, r4
   1cadc:	eb00298d 	bl	27118 <CPtrArray::~CPtrArray()>
   1cae0:	e1a00004 	mov	r0, r4
   1cae4:	e8bd8010 	pop	{r4, pc}

0001cae8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1cae8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1caec:	e2517000 	subs	r7, r1, #0
   1caf0:	0a00002a 	beq	1cba0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb8>
   1caf4:	e3520000 	cmp	r2, #0
   1caf8:	e1a0a002 	mov	sl, r2
   1cafc:	0a00002b 	beq	1cbb0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc8>
   1cb00:	e1a06000 	mov	r6, r0
   1cb04:	eb00298e 	bl	27144 <CPtrArray::GetCount() const>
   1cb08:	e2509000 	subs	r9, r0, #0
   1cb0c:	0a000015 	beq	1cb68 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1cb10:	e3a04000 	mov	r4, #0
   1cb14:	e3a08004 	mov	r8, #4
   1cb18:	ea000008 	b	1cb40 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x58>
   1cb1c:	e1a02008 	mov	r2, r8
   1cb20:	e1a01007 	mov	r1, r7
   1cb24:	e1a00005 	mov	r0, r5
   1cb28:	eb00336c 	bl	298e0 <memcmp>
   1cb2c:	e3500000 	cmp	r0, #0
   1cb30:	0a000015 	beq	1cb8c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa4>
   1cb34:	e2844001 	add	r4, r4, #1
   1cb38:	e1590004 	cmp	r9, r4
   1cb3c:	0a000009 	beq	1cb68 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1cb40:	e1a01004 	mov	r1, r4
   1cb44:	e1a00006 	mov	r0, r6
   1cb48:	eb00297f 	bl	2714c <CPtrArray::operator[](unsigned int)>
   1cb4c:	e5905000 	ldr	r5, [r0]
   1cb50:	e3550000 	cmp	r5, #0
   1cb54:	1afffff0 	bne	1cb1c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x34>
   1cb58:	e3a0203e 	mov	r2, #62	; 0x3e
   1cb5c:	e59f105c 	ldr	r1, [pc, #92]	; 1cbc0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1cb60:	e59f005c 	ldr	r0, [pc, #92]	; 1cbc4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1cb64:	eb001d56 	bl	240c4 <assertion_failed>
   1cb68:	e3a00008 	mov	r0, #8
   1cb6c:	eb003770 	bl	2a934 <operator new(unsigned int)>
   1cb70:	e1a05000 	mov	r5, r0
   1cb74:	e1a01007 	mov	r1, r7
   1cb78:	e3a02004 	mov	r2, #4
   1cb7c:	eb003593 	bl	2a1d0 <memcpy>
   1cb80:	e1a01005 	mov	r1, r5
   1cb84:	e1a00006 	mov	r0, r6
   1cb88:	eb0029a7 	bl	2722c <CPtrArray::Append(void*)>
   1cb8c:	e1a0100a 	mov	r1, sl
   1cb90:	e2850004 	add	r0, r5, #4
   1cb94:	e3a02004 	mov	r2, #4
   1cb98:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb9c:	ea00358b 	b	2a1d0 <memcpy>
   1cba0:	e3a02035 	mov	r2, #53	; 0x35
   1cba4:	e59f1014 	ldr	r1, [pc, #20]	; 1cbc0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1cba8:	e59f0018 	ldr	r0, [pc, #24]	; 1cbc8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1cbac:	eb001d44 	bl	240c4 <assertion_failed>
   1cbb0:	e3a02036 	mov	r2, #54	; 0x36
   1cbb4:	e59f1004 	ldr	r1, [pc, #4]	; 1cbc0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1cbb8:	e59f000c 	ldr	r0, [pc, #12]	; 1cbcc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe4>
   1cbbc:	eb001d40 	bl	240c4 <assertion_failed>
   1cbc0:	000457b4 	.word	0x000457b4
   1cbc4:	000457e4 	.word	0x000457e4
   1cbc8:	000457c4 	.word	0x000457c4
   1cbcc:	000457d4 	.word	0x000457d4

0001cbd0 <CRouteCache::GetRoute(unsigned char const*) const>:
   1cbd0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cbd4:	e2517000 	subs	r7, r1, #0
   1cbd8:	0a00001b 	beq	1cc4c <CRouteCache::GetRoute(unsigned char const*) const+0x7c>
   1cbdc:	e1a05000 	mov	r5, r0
   1cbe0:	eb002957 	bl	27144 <CPtrArray::GetCount() const>
   1cbe4:	e2509000 	subs	r9, r0, #0
   1cbe8:	13a04000 	movne	r4, #0
   1cbec:	13a08004 	movne	r8, #4
   1cbf0:	1a000008 	bne	1cc18 <CRouteCache::GetRoute(unsigned char const*) const+0x48>
   1cbf4:	ea000010 	b	1cc3c <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1cbf8:	e1a02008 	mov	r2, r8
   1cbfc:	e1a01007 	mov	r1, r7
   1cc00:	eb003336 	bl	298e0 <memcmp>
   1cc04:	e3500000 	cmp	r0, #0
   1cc08:	0a00000d 	beq	1cc44 <CRouteCache::GetRoute(unsigned char const*) const+0x74>
   1cc0c:	e2844001 	add	r4, r4, #1
   1cc10:	e1590004 	cmp	r9, r4
   1cc14:	0a000008 	beq	1cc3c <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1cc18:	e1a01004 	mov	r1, r4
   1cc1c:	e1a00005 	mov	r0, r5
   1cc20:	eb002965 	bl	271bc <CPtrArray::operator[](unsigned int) const>
   1cc24:	e2506000 	subs	r6, r0, #0
   1cc28:	1afffff2 	bne	1cbf8 <CRouteCache::GetRoute(unsigned char const*) const+0x28>
   1cc2c:	e3a0205d 	mov	r2, #93	; 0x5d
   1cc30:	e59f1024 	ldr	r1, [pc, #36]	; 1cc5c <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1cc34:	e59f0024 	ldr	r0, [pc, #36]	; 1cc60 <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1cc38:	eb001d21 	bl	240c4 <assertion_failed>
   1cc3c:	e3a00000 	mov	r0, #0
   1cc40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc44:	e2860004 	add	r0, r6, #4
   1cc48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc4c:	e3a02057 	mov	r2, #87	; 0x57
   1cc50:	e59f1004 	ldr	r1, [pc, #4]	; 1cc5c <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1cc54:	e59f0008 	ldr	r0, [pc, #8]	; 1cc64 <CRouteCache::GetRoute(unsigned char const*) const+0x94>
   1cc58:	eb001d19 	bl	240c4 <assertion_failed>
   1cc5c:	000457b4 	.word	0x000457b4
   1cc60:	000457e4 	.word	0x000457e4
   1cc64:	000457c4 	.word	0x000457c4

0001cc68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1cc68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cc6c:	e1a05003 	mov	r5, r3
   1cc70:	e1a04000 	mov	r4, r0
   1cc74:	e1a07001 	mov	r7, r1
   1cc78:	e59f3088 	ldr	r3, [pc, #136]	; 1cd08 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1cc7c:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1cc80:	e1dd92b0 	ldrh	r9, [sp, #32]
   1cc84:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1cc88:	e5802008 	str	r2, [r0, #8]
   1cc8c:	e5803000 	str	r3, [r0]
   1cc90:	e5801004 	str	r1, [r0, #4]
   1cc94:	e1a01005 	mov	r1, r5
   1cc98:	e280000c 	add	r0, r0, #12
   1cc9c:	eb000e72 	bl	2066c <CIPAddress::CIPAddress(CIPAddress const&)>
   1cca0:	e1c491b4 	strh	r9, [r4, #20]
   1cca4:	e1c481b6 	strh	r8, [r4, #22]
   1cca8:	e5846018 	str	r6, [r4, #24]
   1ccac:	e1a00007 	mov	r0, r7
   1ccb0:	eb000e0a 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1ccb4:	e1a03006 	mov	r3, r6
   1ccb8:	e1a01000 	mov	r1, r0
   1ccbc:	e1a02005 	mov	r2, r5
   1ccc0:	e284001c 	add	r0, r4, #28
   1ccc4:	eb001084 	bl	20edc <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1ccc8:	e5943004 	ldr	r3, [r4, #4]
   1cccc:	e3530000 	cmp	r3, #0
   1ccd0:	0a000004 	beq	1cce8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1ccd4:	e5943008 	ldr	r3, [r4, #8]
   1ccd8:	e3530000 	cmp	r3, #0
   1ccdc:	0a000005 	beq	1ccf8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1cce0:	e1a00004 	mov	r0, r4
   1cce4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cce8:	e3a02025 	mov	r2, #37	; 0x25
   1ccec:	e59f1018 	ldr	r1, [pc, #24]	; 1cd0c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1ccf0:	e59f0018 	ldr	r0, [pc, #24]	; 1cd10 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1ccf4:	eb001cf2 	bl	240c4 <assertion_failed>
   1ccf8:	e3a02026 	mov	r2, #38	; 0x26
   1ccfc:	e59f1008 	ldr	r1, [pc, #8]	; 1cd0c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1cd00:	e59f000c 	ldr	r0, [pc, #12]	; 1cd14 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1cd04:	eb001cee 	bl	240c4 <assertion_failed>
   1cd08:	000457f8 	.word	0x000457f8
   1cd0c:	00045834 	.word	0x00045834
   1cd10:	000451a4 	.word	0x000451a4
   1cd14:	000451b8 	.word	0x000451b8

0001cd18 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1cd18:	e92d4070 	push	{r4, r5, r6, lr}
   1cd1c:	e1a05001 	mov	r5, r1
   1cd20:	e59f1078 	ldr	r1, [pc, #120]	; 1cda0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x88>
   1cd24:	e1a04000 	mov	r4, r0
   1cd28:	e8800022 	stm	r0, {r1, r5}
   1cd2c:	e5802008 	str	r2, [r0, #8]
   1cd30:	e280000c 	add	r0, r0, #12
   1cd34:	e1a06003 	mov	r6, r3
   1cd38:	eb000e44 	bl	20650 <CIPAddress::CIPAddress()>
   1cd3c:	e3a02000 	mov	r2, #0
   1cd40:	e1c461b6 	strh	r6, [r4, #22]
   1cd44:	e1c421b4 	strh	r2, [r4, #20]
   1cd48:	e1a00005 	mov	r0, r5
   1cd4c:	eb000de3 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1cd50:	e59d2010 	ldr	r2, [sp, #16]
   1cd54:	e1a01000 	mov	r1, r0
   1cd58:	e284001c 	add	r0, r4, #28
   1cd5c:	eb001052 	bl	20eac <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1cd60:	e5943004 	ldr	r3, [r4, #4]
   1cd64:	e3530000 	cmp	r3, #0
   1cd68:	0a000004 	beq	1cd80 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   1cd6c:	e5943008 	ldr	r3, [r4, #8]
   1cd70:	e3530000 	cmp	r3, #0
   1cd74:	0a000005 	beq	1cd90 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x78>
   1cd78:	e1a00004 	mov	r0, r4
   1cd7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cd80:	e3a02033 	mov	r2, #51	; 0x33
   1cd84:	e59f1018 	ldr	r1, [pc, #24]	; 1cda4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1cd88:	e59f0018 	ldr	r0, [pc, #24]	; 1cda8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1cd8c:	eb001ccc 	bl	240c4 <assertion_failed>
   1cd90:	e3a02034 	mov	r2, #52	; 0x34
   1cd94:	e59f1008 	ldr	r1, [pc, #8]	; 1cda4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1cd98:	e59f000c 	ldr	r0, [pc, #12]	; 1cdac <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1cd9c:	eb001cc8 	bl	240c4 <assertion_failed>
   1cda0:	000457f8 	.word	0x000457f8
   1cda4:	00045834 	.word	0x00045834
   1cda8:	000451a4 	.word	0x000451a4
   1cdac:	000451b8 	.word	0x000451b8

0001cdb0 <CNetConnection::~CNetConnection()>:
   1cdb0:	e3a03000 	mov	r3, #0
   1cdb4:	e92d4010 	push	{r4, lr}
   1cdb8:	e1a04000 	mov	r4, r0
   1cdbc:	e59f201c 	ldr	r2, [pc, #28]	; 1cde0 <CNetConnection::~CNetConnection()+0x30>
   1cdc0:	e5803008 	str	r3, [r0, #8]
   1cdc4:	e880000c 	stm	r0, {r2, r3}
   1cdc8:	e280001c 	add	r0, r0, #28
   1cdcc:	eb001053 	bl	20f20 <CChecksumCalculator::~CChecksumCalculator()>
   1cdd0:	e284000c 	add	r0, r4, #12
   1cdd4:	eb000e33 	bl	206a8 <CIPAddress::~CIPAddress()>
   1cdd8:	e1a00004 	mov	r0, r4
   1cddc:	e8bd8010 	pop	{r4, pc}
   1cde0:	000457f8 	.word	0x000457f8

0001cde4 <CNetConnection::~CNetConnection()>:
   1cde4:	e3a03000 	mov	r3, #0
   1cde8:	e92d4010 	push	{r4, lr}
   1cdec:	e1a04000 	mov	r4, r0
   1cdf0:	e59f2028 	ldr	r2, [pc, #40]	; 1ce20 <CNetConnection::~CNetConnection()+0x3c>
   1cdf4:	e5803008 	str	r3, [r0, #8]
   1cdf8:	e880000c 	stm	r0, {r2, r3}
   1cdfc:	e280001c 	add	r0, r0, #28
   1ce00:	eb001046 	bl	20f20 <CChecksumCalculator::~CChecksumCalculator()>
   1ce04:	e284000c 	add	r0, r4, #12
   1ce08:	eb000e26 	bl	206a8 <CIPAddress::~CIPAddress()>
   1ce0c:	e1a00004 	mov	r0, r4
   1ce10:	e3a0102c 	mov	r1, #44	; 0x2c
   1ce14:	eb0036d4 	bl	2a96c <operator delete(void*, unsigned int)>
   1ce18:	e1a00004 	mov	r0, r4
   1ce1c:	e8bd8010 	pop	{r4, pc}
   1ce20:	000457f8 	.word	0x000457f8

0001ce24 <CNetConnection::GetForeignIP() const>:
   1ce24:	e280000c 	add	r0, r0, #12
   1ce28:	ea000ec4 	b	20940 <CIPAddress::Get() const>

0001ce2c <CNetConnection::GetOwnPort() const>:
   1ce2c:	e1d001b6 	ldrh	r0, [r0, #22]
   1ce30:	e3500000 	cmp	r0, #0
   1ce34:	0a000000 	beq	1ce3c <CNetConnection::GetOwnPort() const+0x10>
   1ce38:	e12fff1e 	bx	lr
   1ce3c:	e92d4010 	push	{r4, lr}
   1ce40:	e3a02044 	mov	r2, #68	; 0x44
   1ce44:	e59f1004 	ldr	r1, [pc, #4]	; 1ce50 <CNetConnection::GetOwnPort() const+0x24>
   1ce48:	e59f0004 	ldr	r0, [pc, #4]	; 1ce54 <CNetConnection::GetOwnPort() const+0x28>
   1ce4c:	eb001c9c 	bl	240c4 <assertion_failed>
   1ce50:	00045834 	.word	0x00045834
   1ce54:	00045848 	.word	0x00045848

0001ce58 <CNetConnection::GetProtocol() const>:
   1ce58:	e5900018 	ldr	r0, [r0, #24]
   1ce5c:	e12fff1e 	bx	lr

0001ce60 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1ce60:	e3e00000 	mvn	r0, #0
   1ce64:	e12fff1e 	bx	lr

0001ce68 <CUDPConnection::Close()>:
   1ce68:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1ce6c:	e3530000 	cmp	r3, #0
   1ce70:	13a03000 	movne	r3, #0
   1ce74:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1ce78:	11a00003 	movne	r0, r3
   1ce7c:	03e00000 	mvneq	r0, #0
   1ce80:	e12fff1e 	bx	lr

0001ce84 <CUDPConnection::SetOptionBroadcast(bool)>:
   1ce84:	e5c01040 	strb	r1, [r0, #64]	; 0x40
   1ce88:	e3a00000 	mov	r0, #0
   1ce8c:	e12fff1e 	bx	lr

0001ce90 <CUDPConnection::IsConnected() const>:
   1ce90:	e3a00000 	mov	r0, #0
   1ce94:	e12fff1e 	bx	lr

0001ce98 <CUDPConnection::IsTerminated() const>:
   1ce98:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1ce9c:	e2200001 	eor	r0, r0, #1
   1cea0:	e12fff1e 	bx	lr

0001cea4 <CUDPConnection::Process()>:
   1cea4:	e12fff1e 	bx	lr

0001cea8 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1cea8:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ceac:	e28db01c 	add	fp, sp, #28
   1ceb0:	e24dd008 	sub	sp, sp, #8
   1ceb4:	e5906044 	ldr	r6, [r0, #68]	; 0x44
   1ceb8:	e3560000 	cmp	r6, #0
   1cebc:	b3a03000 	movlt	r3, #0
   1cec0:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1cec4:	ba00004d 	blt	1d000 <CUDPConnection::Send(void const*, unsigned int, int)+0x158>
   1cec8:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1cecc:	e35c0000 	cmp	ip, #0
   1ced0:	0a000059 	beq	1d03c <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1ced4:	e3d33040 	bics	r3, r3, #64	; 0x40
   1ced8:	1a000057 	bne	1d03c <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1cedc:	e59f3198 	ldr	r3, [pc, #408]	; 1d07c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1cee0:	e242c001 	sub	ip, r2, #1
   1cee4:	e15c0003 	cmp	ip, r3
   1cee8:	e2827008 	add	r7, r2, #8
   1ceec:	8a000052 	bhi	1d03c <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1cef0:	e5903004 	ldr	r3, [r0, #4]
   1cef4:	e1a06002 	mov	r6, r2
   1cef8:	e3530000 	cmp	r3, #0
   1cefc:	e1a08001 	mov	r8, r1
   1cf00:	e1a04000 	mov	r4, r0
   1cf04:	0a000050 	beq	1d04c <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1cf08:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1cf0c:	e3530000 	cmp	r3, #0
   1cf10:	0a00003d 	beq	1d00c <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1cf14:	e3a01000 	mov	r1, #0
   1cf18:	e1d431b6 	ldrh	r3, [r4, #22]
   1cf1c:	e1d401b4 	ldrh	r0, [r4, #20]
   1cf20:	e2872007 	add	r2, r7, #7
   1cf24:	e3c22007 	bic	r2, r2, #7
   1cf28:	e6bf3fb3 	rev16	r3, r3
   1cf2c:	e04dd002 	sub	sp, sp, r2
   1cf30:	e6ff3073 	uxth	r3, r3
   1cf34:	e6bf0fb0 	rev16	r0, r0
   1cf38:	e6bf2fb7 	rev16	r2, r7
   1cf3c:	e28d5008 	add	r5, sp, #8
   1cf40:	e1a0c423 	lsr	ip, r3, #8
   1cf44:	e6ff0070 	uxth	r0, r0
   1cf48:	e6ff2072 	uxth	r2, r2
   1cf4c:	e5cd3008 	strb	r3, [sp, #8]
   1cf50:	e1580001 	cmp	r8, r1
   1cf54:	e5c5c001 	strb	ip, [r5, #1]
   1cf58:	e1a03422 	lsr	r3, r2, #8
   1cf5c:	e1a0c420 	lsr	ip, r0, #8
   1cf60:	e5c50002 	strb	r0, [r5, #2]
   1cf64:	e5c5c003 	strb	ip, [r5, #3]
   1cf68:	e5c52004 	strb	r2, [r5, #4]
   1cf6c:	e5c53005 	strb	r3, [r5, #5]
   1cf70:	e5c51006 	strb	r1, [r5, #6]
   1cf74:	e5c51007 	strb	r1, [r5, #7]
   1cf78:	0a000037 	beq	1d05c <CUDPConnection::Send(void const*, unsigned int, int)+0x1b4>
   1cf7c:	e1a02006 	mov	r2, r6
   1cf80:	e1a01008 	mov	r1, r8
   1cf84:	e2850008 	add	r0, r5, #8
   1cf88:	eb003490 	bl	2a1d0 <memcpy>
   1cf8c:	e5940004 	ldr	r0, [r4, #4]
   1cf90:	eb000d52 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1cf94:	e284801c 	add	r8, r4, #28
   1cf98:	e1a01000 	mov	r1, r0
   1cf9c:	e284900c 	add	r9, r4, #12
   1cfa0:	e1a00008 	mov	r0, r8
   1cfa4:	eb000fde 	bl	20f24 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1cfa8:	e1a00008 	mov	r0, r8
   1cfac:	e1a01009 	mov	r1, r9
   1cfb0:	eb000fdf 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1cfb4:	e1a02007 	mov	r2, r7
   1cfb8:	e1a01005 	mov	r1, r5
   1cfbc:	e1a00008 	mov	r0, r8
   1cfc0:	eb001007 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1cfc4:	e594c008 	ldr	ip, [r4, #8]
   1cfc8:	e1a03420 	lsr	r3, r0, #8
   1cfcc:	e35c0000 	cmp	ip, #0
   1cfd0:	e5c50006 	strb	r0, [r5, #6]
   1cfd4:	e5c53007 	strb	r3, [r5, #7]
   1cfd8:	0a000023 	beq	1d06c <CUDPConnection::Send(void const*, unsigned int, int)+0x1c4>
   1cfdc:	e3a0e011 	mov	lr, #17
   1cfe0:	e1a03007 	mov	r3, r7
   1cfe4:	e1a02005 	mov	r2, r5
   1cfe8:	e1a01009 	mov	r1, r9
   1cfec:	e1a0000c 	mov	r0, ip
   1cff0:	e58de000 	str	lr, [sp]
   1cff4:	ebfff568 	bl	1a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1cff8:	e3500000 	cmp	r0, #0
   1cffc:	0a00000e 	beq	1d03c <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d000:	e1a00006 	mov	r0, r6
   1d004:	e24bd01c 	sub	sp, fp, #28
   1d008:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d00c:	e280500c 	add	r5, r0, #12
   1d010:	e1a00005 	mov	r0, r5
   1d014:	eb000e7a 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1d018:	e3500000 	cmp	r0, #0
   1d01c:	1a000006 	bne	1d03c <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d020:	e5940004 	ldr	r0, [r4, #4]
   1d024:	eb000d37 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1d028:	e1a01000 	mov	r1, r0
   1d02c:	e1a00005 	mov	r0, r5
   1d030:	eb000d9d 	bl	206ac <CIPAddress::operator==(CIPAddress const&) const>
   1d034:	e3500000 	cmp	r0, #0
   1d038:	0affffb5 	beq	1cf14 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d03c:	e3e06000 	mvn	r6, #0
   1d040:	e1a00006 	mov	r0, r6
   1d044:	e24bd01c 	sub	sp, fp, #28
   1d048:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d04c:	e3a0207b 	mov	r2, #123	; 0x7b
   1d050:	e59f1028 	ldr	r1, [pc, #40]	; 1d080 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d054:	e59f0028 	ldr	r0, [pc, #40]	; 1d084 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d058:	eb001c19 	bl	240c4 <assertion_failed>
   1d05c:	e3a0208b 	mov	r2, #139	; 0x8b
   1d060:	e59f1018 	ldr	r1, [pc, #24]	; 1d080 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d064:	e59f001c 	ldr	r0, [pc, #28]	; 1d088 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e0>
   1d068:	eb001c15 	bl	240c4 <assertion_failed>
   1d06c:	e3a02093 	mov	r2, #147	; 0x93
   1d070:	e59f1008 	ldr	r1, [pc, #8]	; 1d080 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d074:	e59f0010 	ldr	r0, [pc, #16]	; 1d08c <CUDPConnection::Send(void const*, unsigned int, int)+0x1e4>
   1d078:	eb001c11 	bl	240c4 <assertion_failed>
   1d07c:	00000637 	.word	0x00000637
   1d080:	0004589c 	.word	0x0004589c
   1d084:	000451a4 	.word	0x000451a4
   1d088:	00045220 	.word	0x00045220
   1d08c:	000451b8 	.word	0x000451b8

0001d090 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d090:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d094:	e28db018 	add	fp, sp, #24
   1d098:	e24dd00c 	sub	sp, sp, #12
   1d09c:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d0a0:	e1a04000 	mov	r4, r0
   1d0a4:	e35c0000 	cmp	ip, #0
   1d0a8:	b3a03000 	movlt	r3, #0
   1d0ac:	e1db60b8 	ldrh	r6, [fp, #8]
   1d0b0:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d0b4:	ba00004c 	blt	1d1ec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x15c>
   1d0b8:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d0bc:	e35c0000 	cmp	ip, #0
   1d0c0:	1a000054 	bne	1d218 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d0c4:	e1a0e003 	mov	lr, r3
   1d0c8:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d0cc:	1a00004d 	bne	1d208 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d0d0:	e1a05002 	mov	r5, r2
   1d0d4:	e59f31a8 	ldr	r3, [pc, #424]	; 1d284 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1d0d8:	e2422001 	sub	r2, r2, #1
   1d0dc:	e1520003 	cmp	r2, r3
   1d0e0:	e2858008 	add	r8, r5, #8
   1d0e4:	8a000047 	bhi	1d208 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d0e8:	e5903004 	ldr	r3, [r0, #4]
   1d0ec:	e3530000 	cmp	r3, #0
   1d0f0:	0a00004f 	beq	1d234 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1d0f4:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d0f8:	e1a07001 	mov	r7, r1
   1d0fc:	e3530000 	cmp	r3, #0
   1d100:	0a00003c 	beq	1d1f8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x168>
   1d104:	e3a00000 	mov	r0, #0
   1d108:	e1d411b6 	ldrh	r1, [r4, #22]
   1d10c:	e2883007 	add	r3, r8, #7
   1d110:	e3c33007 	bic	r3, r3, #7
   1d114:	e04dd003 	sub	sp, sp, r3
   1d118:	e6bf6fb6 	rev16	r6, r6
   1d11c:	e6bf1fb1 	rev16	r1, r1
   1d120:	e6bf3fb8 	rev16	r3, r8
   1d124:	e6ff2076 	uxth	r2, r6
   1d128:	e6ff1071 	uxth	r1, r1
   1d12c:	e28d6008 	add	r6, sp, #8
   1d130:	e6ff3073 	uxth	r3, r3
   1d134:	e5cd1008 	strb	r1, [sp, #8]
   1d138:	e1a0c421 	lsr	ip, r1, #8
   1d13c:	e5c62002 	strb	r2, [r6, #2]
   1d140:	e1a01422 	lsr	r1, r2, #8
   1d144:	e1570000 	cmp	r7, r0
   1d148:	e1a02423 	lsr	r2, r3, #8
   1d14c:	e5c6c001 	strb	ip, [r6, #1]
   1d150:	e5c61003 	strb	r1, [r6, #3]
   1d154:	e5c63004 	strb	r3, [r6, #4]
   1d158:	e5c62005 	strb	r2, [r6, #5]
   1d15c:	e5c60006 	strb	r0, [r6, #6]
   1d160:	e5c60007 	strb	r0, [r6, #7]
   1d164:	0a000036 	beq	1d244 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d168:	e1a02005 	mov	r2, r5
   1d16c:	e1a01007 	mov	r1, r7
   1d170:	e2860008 	add	r0, r6, #8
   1d174:	eb003415 	bl	2a1d0 <memcpy>
   1d178:	e5940004 	ldr	r0, [r4, #4]
   1d17c:	eb000cd7 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1d180:	e284701c 	add	r7, r4, #28
   1d184:	e1a01000 	mov	r1, r0
   1d188:	e1a00007 	mov	r0, r7
   1d18c:	eb000f64 	bl	20f24 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d190:	e59b1004 	ldr	r1, [fp, #4]
   1d194:	e1a00007 	mov	r0, r7
   1d198:	eb000f65 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d19c:	e1a01006 	mov	r1, r6
   1d1a0:	e1a02008 	mov	r2, r8
   1d1a4:	e1a00007 	mov	r0, r7
   1d1a8:	eb000f8d 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d1ac:	e5941008 	ldr	r1, [r4, #8]
   1d1b0:	e1a03420 	lsr	r3, r0, #8
   1d1b4:	e3510000 	cmp	r1, #0
   1d1b8:	e5c60006 	strb	r0, [r6, #6]
   1d1bc:	e5c63007 	strb	r3, [r6, #7]
   1d1c0:	0a00002b 	beq	1d274 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e4>
   1d1c4:	e3a0c011 	mov	ip, #17
   1d1c8:	e1a00001 	mov	r0, r1
   1d1cc:	e1a03008 	mov	r3, r8
   1d1d0:	e1a02006 	mov	r2, r6
   1d1d4:	e58dc000 	str	ip, [sp]
   1d1d8:	e59b1004 	ldr	r1, [fp, #4]
   1d1dc:	ebfff4ee 	bl	1a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d1e0:	e3500000 	cmp	r0, #0
   1d1e4:	0a000007 	beq	1d208 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d1e8:	e1a0c005 	mov	ip, r5
   1d1ec:	e1a0000c 	mov	r0, ip
   1d1f0:	e24bd018 	sub	sp, fp, #24
   1d1f4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d1f8:	e59b0004 	ldr	r0, [fp, #4]
   1d1fc:	eb000e00 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1d200:	e3500000 	cmp	r0, #0
   1d204:	0a000012 	beq	1d254 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1d208:	e3e0c000 	mvn	ip, #0
   1d20c:	e1a0000c 	mov	r0, ip
   1d210:	e24bd018 	sub	sp, fp, #24
   1d214:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d218:	e590c000 	ldr	ip, [r0]
   1d21c:	e59c4014 	ldr	r4, [ip, #20]
   1d220:	e12fff34 	blx	r4
   1d224:	e1a0c000 	mov	ip, r0
   1d228:	e1a0000c 	mov	r0, ip
   1d22c:	e24bd018 	sub	sp, fp, #24
   1d230:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d234:	e3a020e4 	mov	r2, #228	; 0xe4
   1d238:	e59f1048 	ldr	r1, [pc, #72]	; 1d288 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d23c:	e59f0048 	ldr	r0, [pc, #72]	; 1d28c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1d240:	eb001b9f 	bl	240c4 <assertion_failed>
   1d244:	e3a020f4 	mov	r2, #244	; 0xf4
   1d248:	e59f1038 	ldr	r1, [pc, #56]	; 1d288 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d24c:	e59f003c 	ldr	r0, [pc, #60]	; 1d290 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x200>
   1d250:	eb001b9b 	bl	240c4 <assertion_failed>
   1d254:	e5940004 	ldr	r0, [r4, #4]
   1d258:	eb000caa 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1d25c:	e1a01000 	mov	r1, r0
   1d260:	e59b0004 	ldr	r0, [fp, #4]
   1d264:	eb000d10 	bl	206ac <CIPAddress::operator==(CIPAddress const&) const>
   1d268:	e3500000 	cmp	r0, #0
   1d26c:	1affffe5 	bne	1d208 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d270:	eaffffa3 	b	1d104 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d274:	e3a020fc 	mov	r2, #252	; 0xfc
   1d278:	e59f1008 	ldr	r1, [pc, #8]	; 1d288 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d27c:	e59f0010 	ldr	r0, [pc, #16]	; 1d294 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x204>
   1d280:	eb001b8f 	bl	240c4 <assertion_failed>
   1d284:	00000637 	.word	0x00000637
   1d288:	0004589c 	.word	0x0004589c
   1d28c:	000451a4 	.word	0x000451a4
   1d290:	00045220 	.word	0x00045220
   1d294:	000451b8 	.word	0x000451b8

0001d298 <CUDPConnection::Receive(void*, int)>:
   1d298:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1d29c:	e3530000 	cmp	r3, #0
   1d2a0:	ba000028 	blt	1d348 <CUDPConnection::Receive(void*, int)+0xb0>
   1d2a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d2a8:	e1a08002 	mov	r8, r2
   1d2ac:	e1a04001 	mov	r4, r1
   1d2b0:	e1a05000 	mov	r5, r0
   1d2b4:	e24dd00c 	sub	sp, sp, #12
   1d2b8:	e280602c 	add	r6, r0, #44	; 0x2c
   1d2bc:	e2807038 	add	r7, r0, #56	; 0x38
   1d2c0:	e3540000 	cmp	r4, #0
   1d2c4:	0a00001b 	beq	1d338 <CUDPConnection::Receive(void*, int)+0xa0>
   1d2c8:	e28d2004 	add	r2, sp, #4
   1d2cc:	e1a01004 	mov	r1, r4
   1d2d0:	e1a00006 	mov	r0, r6
   1d2d4:	eb000eae 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1d2d8:	e2509000 	subs	r9, r0, #0
   1d2dc:	1a00000c 	bne	1d314 <CUDPConnection::Receive(void*, int)+0x7c>
   1d2e0:	e3580040 	cmp	r8, #64	; 0x40
   1d2e4:	0a00001b 	beq	1d358 <CUDPConnection::Receive(void*, int)+0xc0>
   1d2e8:	e1a00007 	mov	r0, r7
   1d2ec:	eb001aee 	bl	23eac <CSynchronizationEvent::Clear()>
   1d2f0:	e1a00007 	mov	r0, r7
   1d2f4:	eb001afd 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1d2f8:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   1d2fc:	e3530000 	cmp	r3, #0
   1d300:	aaffffee 	bge	1d2c0 <CUDPConnection::Receive(void*, int)+0x28>
   1d304:	e5859044 	str	r9, [r5, #68]	; 0x44
   1d308:	e1a00003 	mov	r0, r3
   1d30c:	e28dd00c 	add	sp, sp, #12
   1d310:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d314:	e59d0004 	ldr	r0, [sp, #4]
   1d318:	e3500000 	cmp	r0, #0
   1d31c:	0a00000f 	beq	1d360 <CUDPConnection::Receive(void*, int)+0xc8>
   1d320:	e3a01006 	mov	r1, #6
   1d324:	eb003590 	bl	2a96c <operator delete(void*, unsigned int)>
   1d328:	e1a03009 	mov	r3, r9
   1d32c:	e1a00003 	mov	r0, r3
   1d330:	e28dd00c 	add	sp, sp, #12
   1d334:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d338:	e3a020a7 	mov	r2, #167	; 0xa7
   1d33c:	e59f102c 	ldr	r1, [pc, #44]	; 1d370 <CUDPConnection::Receive(void*, int)+0xd8>
   1d340:	e59f002c 	ldr	r0, [pc, #44]	; 1d374 <CUDPConnection::Receive(void*, int)+0xdc>
   1d344:	eb001b5e 	bl	240c4 <assertion_failed>
   1d348:	e3a02000 	mov	r2, #0
   1d34c:	e5802044 	str	r2, [r0, #68]	; 0x44
   1d350:	e1a00003 	mov	r0, r3
   1d354:	e12fff1e 	bx	lr
   1d358:	e1a03009 	mov	r3, r9
   1d35c:	eaffffe9 	b	1d308 <CUDPConnection::Receive(void*, int)+0x70>
   1d360:	e3a020bf 	mov	r2, #191	; 0xbf
   1d364:	e59f1004 	ldr	r1, [pc, #4]	; 1d370 <CUDPConnection::Receive(void*, int)+0xd8>
   1d368:	e59f0008 	ldr	r0, [pc, #8]	; 1d378 <CUDPConnection::Receive(void*, int)+0xe0>
   1d36c:	eb001b54 	bl	240c4 <assertion_failed>
   1d370:	0004589c 	.word	0x0004589c
   1d374:	000423b8 	.word	0x000423b8
   1d378:	00045220 	.word	0x00045220

0001d37c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1d37c:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d380:	e35c0000 	cmp	ip, #0
   1d384:	ba00002c 	blt	1d43c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xc0>
   1d388:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d38c:	e1a09003 	mov	r9, r3
   1d390:	e1a08002 	mov	r8, r2
   1d394:	e1a04001 	mov	r4, r1
   1d398:	e1a05000 	mov	r5, r0
   1d39c:	e24dd008 	sub	sp, sp, #8
   1d3a0:	e280602c 	add	r6, r0, #44	; 0x2c
   1d3a4:	e2807038 	add	r7, r0, #56	; 0x38
   1d3a8:	e3540000 	cmp	r4, #0
   1d3ac:	0a00001e 	beq	1d42c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1d3b0:	e28d2004 	add	r2, sp, #4
   1d3b4:	e1a01004 	mov	r1, r4
   1d3b8:	e1a00006 	mov	r0, r6
   1d3bc:	eb000e74 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1d3c0:	e250a000 	subs	sl, r0, #0
   1d3c4:	1a00000a 	bne	1d3f4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1d3c8:	e3580040 	cmp	r8, #64	; 0x40
   1d3cc:	0a00001e 	beq	1d44c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   1d3d0:	e1a00007 	mov	r0, r7
   1d3d4:	eb001ab4 	bl	23eac <CSynchronizationEvent::Clear()>
   1d3d8:	e1a00007 	mov	r0, r7
   1d3dc:	eb001ac3 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1d3e0:	e595c044 	ldr	ip, [r5, #68]	; 0x44
   1d3e4:	e35c0000 	cmp	ip, #0
   1d3e8:	aaffffee 	bge	1d3a8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1d3ec:	e585a044 	str	sl, [r5, #68]	; 0x44
   1d3f0:	ea00000a 	b	1d420 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1d3f4:	e59d4004 	ldr	r4, [sp, #4]
   1d3f8:	e3540000 	cmp	r4, #0
   1d3fc:	0a00001b 	beq	1d470 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   1d400:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1d404:	e3590000 	cmp	r9, #0
   1d408:	13530000 	cmpne	r3, #0
   1d40c:	1a000010 	bne	1d454 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   1d410:	e1a00004 	mov	r0, r4
   1d414:	e3a01006 	mov	r1, #6
   1d418:	eb003553 	bl	2a96c <operator delete(void*, unsigned int)>
   1d41c:	e1a0c00a 	mov	ip, sl
   1d420:	e1a0000c 	mov	r0, ip
   1d424:	e28dd008 	add	sp, sp, #8
   1d428:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d42c:	e3a02e11 	mov	r2, #272	; 0x110
   1d430:	e59f1048 	ldr	r1, [pc, #72]	; 1d480 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1d434:	e59f0048 	ldr	r0, [pc, #72]	; 1d484 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x108>
   1d438:	eb001b21 	bl	240c4 <assertion_failed>
   1d43c:	e3a03000 	mov	r3, #0
   1d440:	e5803044 	str	r3, [r0, #68]	; 0x44
   1d444:	e1a0000c 	mov	r0, ip
   1d448:	e12fff1e 	bx	lr
   1d44c:	e1a0c00a 	mov	ip, sl
   1d450:	eafffff2 	b	1d420 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1d454:	e1a00009 	mov	r0, r9
   1d458:	e1a01004 	mov	r1, r4
   1d45c:	eb000d02 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   1d460:	e1d430b4 	ldrh	r3, [r4, #4]
   1d464:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1d468:	e1c230b0 	strh	r3, [r2]
   1d46c:	eaffffe7 	b	1d410 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x94>
   1d470:	e3a02f4a 	mov	r2, #296	; 0x128
   1d474:	e59f1004 	ldr	r1, [pc, #4]	; 1d480 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1d478:	e59f0008 	ldr	r0, [pc, #8]	; 1d488 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1d47c:	eb001b10 	bl	240c4 <assertion_failed>
   1d480:	0004589c 	.word	0x0004589c
   1d484:	000423b8 	.word	0x000423b8
   1d488:	00045220 	.word	0x00045220

0001d48c <CUDPConnection::Connect()>:
   1d48c:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d490:	e3530000 	cmp	r3, #0
   1d494:	0a000001 	beq	1d4a0 <CUDPConnection::Connect()+0x14>
   1d498:	e3a00000 	mov	r0, #0
   1d49c:	e12fff1e 	bx	lr
   1d4a0:	e92d4010 	push	{r4, lr}
   1d4a4:	e3a02049 	mov	r2, #73	; 0x49
   1d4a8:	e59f1004 	ldr	r1, [pc, #4]	; 1d4b4 <CUDPConnection::Connect()+0x28>
   1d4ac:	e59f0004 	ldr	r0, [pc, #4]	; 1d4b8 <CUDPConnection::Connect()+0x2c>
   1d4b0:	eb001b03 	bl	240c4 <assertion_failed>
   1d4b4:	0004589c 	.word	0x0004589c
   1d4b8:	000458b0 	.word	0x000458b0

0001d4bc <CUDPConnection::~CUDPConnection()>:
   1d4bc:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1d4c0:	e59f3040 	ldr	r3, [pc, #64]	; 1d508 <CUDPConnection::~CUDPConnection()+0x4c>
   1d4c4:	e3520000 	cmp	r2, #0
   1d4c8:	e92d4010 	push	{r4, lr}
   1d4cc:	e5803000 	str	r3, [r0]
   1d4d0:	1a000008 	bne	1d4f8 <CUDPConnection::~CUDPConnection()+0x3c>
   1d4d4:	e1a04000 	mov	r4, r0
   1d4d8:	e2800038 	add	r0, r0, #56	; 0x38
   1d4dc:	eb001a65 	bl	23e78 <CSynchronizationEvent::~CSynchronizationEvent()>
   1d4e0:	e284002c 	add	r0, r4, #44	; 0x2c
   1d4e4:	eb000ddf 	bl	20c68 <CNetQueue::~CNetQueue()>
   1d4e8:	e1a00004 	mov	r0, r4
   1d4ec:	ebfffe2f 	bl	1cdb0 <CNetConnection::~CNetConnection()>
   1d4f0:	e1a00004 	mov	r0, r4
   1d4f4:	e8bd8010 	pop	{r4, pc}
   1d4f8:	e3a02044 	mov	r2, #68	; 0x44
   1d4fc:	e59f1008 	ldr	r1, [pc, #8]	; 1d50c <CUDPConnection::~CUDPConnection()+0x50>
   1d500:	e59f0008 	ldr	r0, [pc, #8]	; 1d510 <CUDPConnection::~CUDPConnection()+0x54>
   1d504:	eb001aee 	bl	240c4 <assertion_failed>
   1d508:	00045860 	.word	0x00045860
   1d50c:	0004589c 	.word	0x0004589c
   1d510:	000458b8 	.word	0x000458b8

0001d514 <CUDPConnection::~CUDPConnection()>:
   1d514:	e92d4010 	push	{r4, lr}
   1d518:	e1a04000 	mov	r4, r0
   1d51c:	ebffffe6 	bl	1d4bc <CUDPConnection::~CUDPConnection()>
   1d520:	e1a00004 	mov	r0, r4
   1d524:	e3a01048 	mov	r1, #72	; 0x48
   1d528:	eb00350f 	bl	2a96c <operator delete(void*, unsigned int)>
   1d52c:	e1a00004 	mov	r0, r4
   1d530:	e8bd8010 	pop	{r4, pc}

0001d534 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1d534:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d538:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1d53c:	e35c0011 	cmp	ip, #17
   1d540:	0a000001 	beq	1d54c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1d544:	e3a00000 	mov	r0, #0
   1d548:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d54c:	e3520008 	cmp	r2, #8
   1d550:	9a000055 	bls	1d6ac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1d554:	e5d1c002 	ldrb	ip, [r1, #2]
   1d558:	e5d14003 	ldrb	r4, [r1, #3]
   1d55c:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1d560:	e18cc404 	orr	ip, ip, r4, lsl #8
   1d564:	e6bfcfbc 	rev16	ip, ip
   1d568:	e6ffc07c 	uxth	ip, ip
   1d56c:	e15e000c 	cmp	lr, ip
   1d570:	1afffff3 	bne	1d544 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d574:	e1a06003 	mov	r6, r3
   1d578:	e5903004 	ldr	r3, [r0, #4]
   1d57c:	e1a05002 	mov	r5, r2
   1d580:	e3530000 	cmp	r3, #0
   1d584:	e1a04001 	mov	r4, r1
   1d588:	e1a08000 	mov	r8, r0
   1d58c:	0a000054 	beq	1d6e4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1b0>
   1d590:	e5d17000 	ldrb	r7, [r1]
   1d594:	e5d12001 	ldrb	r2, [r1, #1]
   1d598:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d59c:	e1877402 	orr	r7, r7, r2, lsl #8
   1d5a0:	e6bf7fb7 	rev16	r7, r7
   1d5a4:	e3530000 	cmp	r3, #0
   1d5a8:	e6ff3077 	uxth	r3, r7
   1d5ac:	0a000013 	beq	1d600 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1d5b0:	e1d021b4 	ldrh	r2, [r0, #20]
   1d5b4:	e1520003 	cmp	r2, r3
   1d5b8:	1affffe1 	bne	1d544 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d5bc:	e280900c 	add	r9, r0, #12
   1d5c0:	e1a00009 	mov	r0, r9
   1d5c4:	e1a01006 	mov	r1, r6
   1d5c8:	eb000c4f 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1d5cc:	e3500000 	cmp	r0, #0
   1d5d0:	0a00000a 	beq	1d600 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1d5d4:	e1a00009 	mov	r0, r9
   1d5d8:	eb000d09 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1d5dc:	e3500000 	cmp	r0, #0
   1d5e0:	1a000006 	bne	1d600 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1d5e4:	e5980004 	ldr	r0, [r8, #4]
   1d5e8:	eb000bc6 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1d5ec:	e1a01000 	mov	r1, r0
   1d5f0:	e1a00009 	mov	r0, r9
   1d5f4:	eb000c44 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1d5f8:	e3500000 	cmp	r0, #0
   1d5fc:	1affffd0 	bne	1d544 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1d600:	e5d43004 	ldrb	r3, [r4, #4]
   1d604:	e5d42005 	ldrb	r2, [r4, #5]
   1d608:	e1833402 	orr	r3, r3, r2, lsl #8
   1d60c:	e6bf3fb3 	rev16	r3, r3
   1d610:	e6ff3073 	uxth	r3, r3
   1d614:	e1550003 	cmp	r5, r3
   1d618:	3a000023 	bcc	1d6ac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1d61c:	e5d43006 	ldrb	r3, [r4, #6]
   1d620:	e5d42007 	ldrb	r2, [r4, #7]
   1d624:	e1933402 	orrs	r3, r3, r2, lsl #8
   1d628:	1a000012 	bne	1d678 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x144>
   1d62c:	e5d83040 	ldrb	r3, [r8, #64]	; 0x40
   1d630:	e3530000 	cmp	r3, #0
   1d634:	0a00001e 	beq	1d6b4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1d638:	e3a00006 	mov	r0, #6
   1d63c:	eb0034bc 	bl	2a934 <operator new(unsigned int)>
   1d640:	e1a09000 	mov	r9, r0
   1d644:	e1a01000 	mov	r1, r0
   1d648:	e1a00006 	mov	r0, r6
   1d64c:	eb000cc7 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   1d650:	e288002c 	add	r0, r8, #44	; 0x2c
   1d654:	e1a03009 	mov	r3, r9
   1d658:	e2452008 	sub	r2, r5, #8
   1d65c:	e2841008 	add	r1, r4, #8
   1d660:	e1c970b4 	strh	r7, [r9, #4]
   1d664:	eb000d84 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1d668:	e2880038 	add	r0, r8, #56	; 0x38
   1d66c:	eb001a11 	bl	23eb8 <CSynchronizationEvent::Set()>
   1d670:	e3a00001 	mov	r0, #1
   1d674:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d678:	e288901c 	add	r9, r8, #28
   1d67c:	e1a00009 	mov	r0, r9
   1d680:	e1a01006 	mov	r1, r6
   1d684:	eb000e26 	bl	20f24 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d688:	e59d1020 	ldr	r1, [sp, #32]
   1d68c:	e1a00009 	mov	r0, r9
   1d690:	eb000e27 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d694:	e1a02005 	mov	r2, r5
   1d698:	e1a01004 	mov	r1, r4
   1d69c:	e1a00009 	mov	r0, r9
   1d6a0:	eb000e4f 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d6a4:	e3500000 	cmp	r0, #0
   1d6a8:	0affffdf 	beq	1d62c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xf8>
   1d6ac:	e3e00000 	mvn	r0, #0
   1d6b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d6b4:	e59d0020 	ldr	r0, [sp, #32]
   1d6b8:	eb000cd1 	bl	20a04 <CIPAddress::IsBroadcast() const>
   1d6bc:	e3500000 	cmp	r0, #0
   1d6c0:	1affffea 	bne	1d670 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1d6c4:	e5980004 	ldr	r0, [r8, #4]
   1d6c8:	eb000b8e 	bl	20508 <CNetConfig::GetBroadcastAddress() const>
   1d6cc:	e1a01000 	mov	r1, r0
   1d6d0:	e59d0020 	ldr	r0, [sp, #32]
   1d6d4:	eb000bf4 	bl	206ac <CIPAddress::operator==(CIPAddress const&) const>
   1d6d8:	e3500000 	cmp	r0, #0
   1d6dc:	1affffe3 	bne	1d670 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1d6e0:	eaffffd4 	b	1d638 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   1d6e4:	e59f2008 	ldr	r2, [pc, #8]	; 1d6f4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1d6e8:	e59f1008 	ldr	r1, [pc, #8]	; 1d6f8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   1d6ec:	e59f0008 	ldr	r0, [pc, #8]	; 1d6fc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c8>
   1d6f0:	eb001a73 	bl	240c4 <assertion_failed>
   1d6f4:	0000015e 	.word	0x0000015e
   1d6f8:	0004589c 	.word	0x0004589c
   1d6fc:	000451a4 	.word	0x000451a4

0001d700 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1d700:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d704:	e59d1020 	ldr	r1, [sp, #32]
   1d708:	e1dd71b8 	ldrh	r7, [sp, #24]
   1d70c:	e3510011 	cmp	r1, #17
   1d710:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1d714:	0a000001 	beq	1d720 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1d718:	e3a00000 	mov	r0, #0
   1d71c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d720:	e1d011b6 	ldrh	r1, [r0, #22]
   1d724:	e151000c 	cmp	r1, ip
   1d728:	1afffffa 	bne	1d718 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1d72c:	e1a04000 	mov	r4, r0
   1d730:	e5900004 	ldr	r0, [r0, #4]
   1d734:	e1a05003 	mov	r5, r3
   1d738:	e3500000 	cmp	r0, #0
   1d73c:	e1a06002 	mov	r6, r2
   1d740:	0a000016 	beq	1d7a0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d744:	eb000b65 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1d748:	e1a01000 	mov	r1, r0
   1d74c:	e1a00005 	mov	r0, r5
   1d750:	eb000bed 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1d754:	e3500000 	cmp	r0, #0
   1d758:	1affffee 	bne	1d718 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1d75c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1d760:	e3530000 	cmp	r3, #0
   1d764:	0a000007 	beq	1d788 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1d768:	e1d431b4 	ldrh	r3, [r4, #20]
   1d76c:	e1530007 	cmp	r3, r7
   1d770:	1affffe8 	bne	1d718 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1d774:	e1a01006 	mov	r1, r6
   1d778:	e284000c 	add	r0, r4, #12
   1d77c:	eb000be2 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1d780:	e3500000 	cmp	r0, #0
   1d784:	1affffe3 	bne	1d718 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1d788:	e3e03000 	mvn	r3, #0
   1d78c:	e2840038 	add	r0, r4, #56	; 0x38
   1d790:	e5843044 	str	r3, [r4, #68]	; 0x44
   1d794:	eb0019c7 	bl	23eb8 <CSynchronizationEvent::Set()>
   1d798:	e3a00001 	mov	r0, #1
   1d79c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d7a0:	e59f2008 	ldr	r2, [pc, #8]	; 1d7b0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1d7a4:	e59f1008 	ldr	r1, [pc, #8]	; 1d7b4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1d7a8:	e59f0008 	ldr	r0, [pc, #8]	; 1d7b8 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1d7ac:	eb001a44 	bl	240c4 <assertion_failed>
   1d7b0:	000001a7 	.word	0x000001a7
   1d7b4:	0004589c 	.word	0x0004589c
   1d7b8:	000451a4 	.word	0x000451a4

0001d7bc <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1d7bc:	e92d4010 	push	{r4, lr}
   1d7c0:	e3a04011 	mov	r4, #17
   1d7c4:	e24dd010 	sub	sp, sp, #16
   1d7c8:	e1dde1b8 	ldrh	lr, [sp, #24]
   1d7cc:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1d7d0:	e58de000 	str	lr, [sp]
   1d7d4:	e58dc004 	str	ip, [sp, #4]
   1d7d8:	e58d4008 	str	r4, [sp, #8]
   1d7dc:	e1a04000 	mov	r4, r0
   1d7e0:	ebfffd20 	bl	1cc68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1d7e4:	e3a03001 	mov	r3, #1
   1d7e8:	e59f2034 	ldr	r2, [pc, #52]	; 1d824 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1d7ec:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1d7f0:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1d7f4:	e5842000 	str	r2, [r4]
   1d7f8:	e284002c 	add	r0, r4, #44	; 0x2c
   1d7fc:	eb000cdf 	bl	20b80 <CNetQueue::CNetQueue()>
   1d800:	e2840038 	add	r0, r4, #56	; 0x38
   1d804:	e3a01000 	mov	r1, #0
   1d808:	eb001996 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d80c:	e3a03000 	mov	r3, #0
   1d810:	e1a00004 	mov	r0, r4
   1d814:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1d818:	e5843044 	str	r3, [r4, #68]	; 0x44
   1d81c:	e28dd010 	add	sp, sp, #16
   1d820:	e8bd8010 	pop	{r4, pc}
   1d824:	00045860 	.word	0x00045860

0001d828 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1d828:	e3a0c011 	mov	ip, #17
   1d82c:	e92d4030 	push	{r4, r5, lr}
   1d830:	e24dd00c 	sub	sp, sp, #12
   1d834:	e58dc000 	str	ip, [sp]
   1d838:	e1a04000 	mov	r4, r0
   1d83c:	e3a05000 	mov	r5, #0
   1d840:	ebfffd34 	bl	1cd18 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1d844:	e3a02001 	mov	r2, #1
   1d848:	e59f3030 	ldr	r3, [pc, #48]	; 1d880 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1d84c:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1d850:	e5843000 	str	r3, [r4]
   1d854:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1d858:	e284002c 	add	r0, r4, #44	; 0x2c
   1d85c:	eb000cc7 	bl	20b80 <CNetQueue::CNetQueue()>
   1d860:	e1a01005 	mov	r1, r5
   1d864:	e2840038 	add	r0, r4, #56	; 0x38
   1d868:	eb00197e 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d86c:	e1a00004 	mov	r0, r4
   1d870:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1d874:	e5845044 	str	r5, [r4, #68]	; 0x44
   1d878:	e28dd00c 	add	sp, sp, #12
   1d87c:	e8bd8030 	pop	{r4, r5, pc}
   1d880:	00045860 	.word	0x00045860

0001d884 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d884:	e590c000 	ldr	ip, [r0]
   1d888:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1d88c:	e59ce014 	ldr	lr, [ip, #20]
   1d890:	e1a0c00e 	mov	ip, lr
   1d894:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1d898:	e12fff1c 	bx	ip

0001d89c <CTCPConnection::SetOptionBroadcast(bool)>:
   1d89c:	e3a00000 	mov	r0, #0
   1d8a0:	e12fff1e 	bx	lr

0001d8a4 <CTCPConnection::IsConnected() const>:
   1d8a4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d8a8:	e3530002 	cmp	r3, #2
   1d8ac:	da000003 	ble	1d8c0 <CTCPConnection::IsConnected() const+0x1c>
   1d8b0:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1d8b4:	e250000a 	subs	r0, r0, #10
   1d8b8:	13a00001 	movne	r0, #1
   1d8bc:	e12fff1e 	bx	lr
   1d8c0:	e3a00000 	mov	r0, #0
   1d8c4:	e12fff1e 	bx	lr

0001d8c8 <CTCPConnection::IsTerminated() const>:
   1d8c8:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1d8cc:	e16f0f10 	clz	r0, r0
   1d8d0:	e1a002a0 	lsr	r0, r0, #5
   1d8d4:	e12fff1e 	bx	lr

0001d8d8 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1d8d8:	e590c000 	ldr	ip, [r0]
   1d8dc:	e92d4070 	push	{r4, r5, r6, lr}
   1d8e0:	e1a05003 	mov	r5, r3
   1d8e4:	e59c3018 	ldr	r3, [ip, #24]
   1d8e8:	e1a06000 	mov	r6, r0
   1d8ec:	e59d4010 	ldr	r4, [sp, #16]
   1d8f0:	e12fff33 	blx	r3
   1d8f4:	e3500000 	cmp	r0, #0
   1d8f8:	d8bd8070 	pople	{r4, r5, r6, pc}
   1d8fc:	e3550000 	cmp	r5, #0
   1d900:	13540000 	cmpne	r4, #0
   1d904:	13a00001 	movne	r0, #1
   1d908:	03a00000 	moveq	r0, #0
   1d90c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d910:	e1a00005 	mov	r0, r5
   1d914:	e286100c 	add	r1, r6, #12
   1d918:	eb000be8 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1d91c:	e1d631b4 	ldrh	r3, [r6, #20]
   1d920:	e3a00000 	mov	r0, #0
   1d924:	e1c430b0 	strh	r3, [r4]
   1d928:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d92c <CTCPConnection::Send(void const*, unsigned int, int)>:
   1d92c:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1d930:	1a000040 	bne	1da38 <CTCPConnection::Send(void const*, unsigned int, int)+0x10c>
   1d934:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d938:	e1a04001 	mov	r4, r1
   1d93c:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   1d940:	e3510000 	cmp	r1, #0
   1d944:	ba000030 	blt	1da0c <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1d948:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1d94c:	e6ef1071 	uxtb	r1, r1
   1d950:	e351000a 	cmp	r1, #10
   1d954:	9a00001c 	bls	1d9cc <CTCPConnection::Send(void const*, unsigned int, int)+0xa0>
   1d958:	e3540000 	cmp	r4, #0
   1d95c:	e1a08002 	mov	r8, r2
   1d960:	e1a09000 	mov	r9, r0
   1d964:	e1a0a003 	mov	sl, r3
   1d968:	0a000029 	beq	1da14 <CTCPConnection::Send(void const*, unsigned int, int)+0xe8>
   1d96c:	e3520d19 	cmp	r2, #1600	; 0x640
   1d970:	9a00002b 	bls	1da24 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1d974:	e1a05002 	mov	r5, r2
   1d978:	e3a0b000 	mov	fp, #0
   1d97c:	e3a07d19 	mov	r7, #1600	; 0x640
   1d980:	e2806030 	add	r6, r0, #48	; 0x30
   1d984:	e1a01004 	mov	r1, r4
   1d988:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1d98c:	e1a0300b 	mov	r3, fp
   1d990:	e1a02007 	mov	r2, r7
   1d994:	e1a00006 	mov	r0, r6
   1d998:	eb000cb7 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1d99c:	e3550d19 	cmp	r5, #1600	; 0x640
   1d9a0:	e2844d19 	add	r4, r4, #1600	; 0x640
   1d9a4:	8afffff6 	bhi	1d984 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1d9a8:	e1a02005 	mov	r2, r5
   1d9ac:	e1a01004 	mov	r1, r4
   1d9b0:	e1a00006 	mov	r0, r6
   1d9b4:	e3a03000 	mov	r3, #0
   1d9b8:	eb000caf 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1d9bc:	e31a0040 	tst	sl, #64	; 0x40
   1d9c0:	0a000007 	beq	1d9e4 <CTCPConnection::Send(void const*, unsigned int, int)+0xb8>
   1d9c4:	e1a00008 	mov	r0, r8
   1d9c8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9cc:	e3a0e001 	mov	lr, #1
   1d9d0:	e59fc068 	ldr	ip, [pc, #104]	; 1da40 <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1d9d4:	e01c111e 	ands	r1, ip, lr, lsl r1
   1d9d8:	0affffde 	beq	1d958 <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1d9dc:	e3e00000 	mvn	r0, #0
   1d9e0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9e4:	e2894070 	add	r4, r9, #112	; 0x70
   1d9e8:	e1a00004 	mov	r0, r4
   1d9ec:	eb00192e 	bl	23eac <CSynchronizationEvent::Clear()>
   1d9f0:	e1a00004 	mov	r0, r4
   1d9f4:	eb00193d 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1d9f8:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
   1d9fc:	e3530000 	cmp	r3, #0
   1da00:	aaffffef 	bge	1d9c4 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1da04:	e599002c 	ldr	r0, [r9, #44]	; 0x2c
   1da08:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1da10:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da14:	e3a02d06 	mov	r2, #384	; 0x180
   1da18:	e59f1024 	ldr	r1, [pc, #36]	; 1da44 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1da1c:	e59f0024 	ldr	r0, [pc, #36]	; 1da48 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1da20:	eb0019a7 	bl	240c4 <assertion_failed>
   1da24:	e3520000 	cmp	r2, #0
   1da28:	0affffe3 	beq	1d9bc <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1da2c:	e1a05002 	mov	r5, r2
   1da30:	e2806030 	add	r6, r0, #48	; 0x30
   1da34:	eaffffdb 	b	1d9a8 <CTCPConnection::Send(void const*, unsigned int, int)+0x7c>
   1da38:	e3e00000 	mvn	r0, #0
   1da3c:	e12fff1e 	bx	lr
   1da40:	00000763 	.word	0x00000763
   1da44:	00045938 	.word	0x00045938
   1da48:	00045220 	.word	0x00045220

0001da4c <CTCPConnection::Receive(void*, int)>:
   1da4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da50:	e3d23040 	bics	r3, r2, #64	; 0x40
   1da54:	e24dd00c 	sub	sp, sp, #12
   1da58:	e58d3004 	str	r3, [sp, #4]
   1da5c:	1a00002e 	bne	1db1c <CTCPConnection::Receive(void*, int)+0xd0>
   1da60:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1da64:	e3530000 	cmp	r3, #0
   1da68:	ba000026 	blt	1db08 <CTCPConnection::Receive(void*, int)+0xbc>
   1da6c:	e1a07001 	mov	r7, r1
   1da70:	e1a04000 	mov	r4, r0
   1da74:	e59d9004 	ldr	r9, [sp, #4]
   1da78:	e3a0b001 	mov	fp, #1
   1da7c:	e59fa0ac 	ldr	sl, [pc, #172]	; 1db30 <CTCPConnection::Receive(void*, int)+0xe4>
   1da80:	e2026040 	and	r6, r2, #64	; 0x40
   1da84:	e280803c 	add	r8, r0, #60	; 0x3c
   1da88:	e2805068 	add	r5, r0, #104	; 0x68
   1da8c:	ea00000e 	b	1dacc <CTCPConnection::Receive(void*, int)+0x80>
   1da90:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1da94:	e6ef3073 	uxtb	r3, r3
   1da98:	e353000a 	cmp	r3, #10
   1da9c:	8a000001 	bhi	1daa8 <CTCPConnection::Receive(void*, int)+0x5c>
   1daa0:	e01a331b 	ands	r3, sl, fp, lsl r3
   1daa4:	1a00001c 	bne	1db1c <CTCPConnection::Receive(void*, int)+0xd0>
   1daa8:	e3560000 	cmp	r6, #0
   1daac:	1a00000d 	bne	1dae8 <CTCPConnection::Receive(void*, int)+0x9c>
   1dab0:	e1a00005 	mov	r0, r5
   1dab4:	eb0018fc 	bl	23eac <CSynchronizationEvent::Clear()>
   1dab8:	e1a00005 	mov	r0, r5
   1dabc:	eb00190b 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1dac0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1dac4:	e3530000 	cmp	r3, #0
   1dac8:	ba000009 	blt	1daf4 <CTCPConnection::Receive(void*, int)+0xa8>
   1dacc:	e1a02009 	mov	r2, r9
   1dad0:	e1a01007 	mov	r1, r7
   1dad4:	e1a00008 	mov	r0, r8
   1dad8:	eb000cad 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1dadc:	e3500000 	cmp	r0, #0
   1dae0:	0affffea 	beq	1da90 <CTCPConnection::Receive(void*, int)+0x44>
   1dae4:	e58d0004 	str	r0, [sp, #4]
   1dae8:	e59d0004 	ldr	r0, [sp, #4]
   1daec:	e28dd00c 	add	sp, sp, #12
   1daf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1daf8:	e58d3004 	str	r3, [sp, #4]
   1dafc:	e59d0004 	ldr	r0, [sp, #4]
   1db00:	e28dd00c 	add	sp, sp, #12
   1db04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db08:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1db0c:	e58d3004 	str	r3, [sp, #4]
   1db10:	e59d0004 	ldr	r0, [sp, #4]
   1db14:	e28dd00c 	add	sp, sp, #12
   1db18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db1c:	e3e03000 	mvn	r3, #0
   1db20:	e58d3004 	str	r3, [sp, #4]
   1db24:	e59d0004 	ldr	r0, [sp, #4]
   1db28:	e28dd00c 	add	sp, sp, #12
   1db2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db30:	000007e3 	.word	0x000007e3

0001db34 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1db34:	e3a0c006 	mov	ip, #6
   1db38:	e92d4070 	push	{r4, r5, r6, lr}
   1db3c:	e1a04000 	mov	r4, r0
   1db40:	e3a05000 	mov	r5, #0
   1db44:	e3a06001 	mov	r6, #1
   1db48:	e24dd008 	sub	sp, sp, #8
   1db4c:	e58dc000 	str	ip, [sp]
   1db50:	ebfffc70 	bl	1cd18 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1db54:	e59f30b0 	ldr	r3, [pc, #176]	; 1dc0c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1db58:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1db5c:	e5843000 	str	r3, [r4]
   1db60:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1db64:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1db68:	e2840030 	add	r0, r4, #48	; 0x30
   1db6c:	eb000c03 	bl	20b80 <CNetQueue::CNetQueue()>
   1db70:	e284003c 	add	r0, r4, #60	; 0x3c
   1db74:	eb000c01 	bl	20b80 <CNetQueue::CNetQueue()>
   1db78:	e2840048 	add	r0, r4, #72	; 0x48
   1db7c:	e3a01801 	mov	r1, #65536	; 0x10000
   1db80:	eb0007c0 	bl	1fa88 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1db84:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1db88:	e1a01005 	mov	r1, r5
   1db8c:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1db90:	e2840068 	add	r0, r4, #104	; 0x68
   1db94:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1db98:	e5845060 	str	r5, [r4, #96]	; 0x60
   1db9c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1dba0:	eb0018b0 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dba4:	e1a01005 	mov	r1, r5
   1dba8:	e2840070 	add	r0, r4, #112	; 0x70
   1dbac:	eb0018ad 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dbb0:	eb002f02 	bl	297c0 <CTimer::Get()>
   1dbb4:	e3a02f86 	mov	r2, #536	; 0x218
   1dbb8:	e59f3050 	ldr	r3, [pc, #80]	; 1dc10 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1dbbc:	e5840078 	str	r0, [r4, #120]	; 0x78
   1dbc0:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1dbc4:	e5843094 	str	r3, [r4, #148]	; 0x94
   1dbc8:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1dbcc:	e5846088 	str	r6, [r4, #136]	; 0x88
   1dbd0:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1dbd4:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1dbd8:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1dbdc:	e28400b8 	add	r0, r4, #184	; 0xb8
   1dbe0:	eb000893 	bl	1fe34 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1dbe4:	e1a00004 	mov	r0, r4
   1dbe8:	e59f2024 	ldr	r2, [pc, #36]	; 1dc14 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1dbec:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1dbf0:	e5923000 	ldr	r3, [r2]
   1dbf4:	e5845080 	str	r5, [r4, #128]	; 0x80
   1dbf8:	e0833006 	add	r3, r3, r6
   1dbfc:	e5845084 	str	r5, [r4, #132]	; 0x84
   1dc00:	e5823000 	str	r3, [r2]
   1dc04:	e28dd008 	add	sp, sp, #8
   1dc08:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc0c:	000458cc 	.word	0x000458cc
   1dc10:	00003908 	.word	0x00003908
   1dc14:	0005014c 	.word	0x0005014c

0001dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1dc18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dc1c:	e2017c02 	and	r7, r1, #512	; 0x200
   1dc20:	e3570000 	cmp	r7, #0
   1dc24:	13a0e018 	movne	lr, #24
   1dc28:	03a0e014 	moveq	lr, #20
   1dc2c:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1dc30:	e24dd008 	sub	sp, sp, #8
   1dc34:	e59dc664 	ldr	ip, [sp, #1636]	; 0x664
   1dc38:	13a05006 	movne	r5, #6
   1dc3c:	03a05005 	moveq	r5, #5
   1dc40:	e09c600e 	adds	r6, ip, lr
   1dc44:	2a00003f 	bcs	1dd48 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x130>
   1dc48:	e1d081b6 	ldrh	r8, [r0, #22]
   1dc4c:	e1a04000 	mov	r4, r0
   1dc50:	e1d001b4 	ldrh	r0, [r0, #20]
   1dc54:	e6bf2f32 	rev	r2, r2
   1dc58:	e6bf8fb8 	rev16	r8, r8
   1dc5c:	e6bf0fb0 	rev16	r0, r0
   1dc60:	e58d200c 	str	r2, [sp, #12]
   1dc64:	e2112a01 	ands	r2, r1, #4096	; 0x1000
   1dc68:	e1cd80b8 	strh	r8, [sp, #8]
   1dc6c:	e1cd00ba 	strh	r0, [sp, #10]
   1dc70:	01a03002 	moveq	r3, r2
   1dc74:	1a000031 	bne	1dd40 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   1dc78:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   1dc7c:	e1d429b8 	ldrh	r2, [r4, #152]	; 0x98
   1dc80:	e1811205 	orr	r1, r1, r5, lsl #4
   1dc84:	e6bf0fb0 	rev16	r0, r0
   1dc88:	e6bf2fb2 	rev16	r2, r2
   1dc8c:	e3570000 	cmp	r7, #0
   1dc90:	e1cd11b4 	strh	r1, [sp, #20]
   1dc94:	e58d3010 	str	r3, [sp, #16]
   1dc98:	e1cd01b6 	strh	r0, [sp, #22]
   1dc9c:	e1cd21ba 	strh	r2, [sp, #26]
   1dca0:	1a00001d 	bne	1dd1c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1dca4:	e35c0000 	cmp	ip, #0
   1dca8:	0a000007 	beq	1dccc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1dcac:	e59d3660 	ldr	r3, [sp, #1632]	; 0x660
   1dcb0:	e3530000 	cmp	r3, #0
   1dcb4:	0a00002b 	beq	1dd68 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1dcb8:	e28d3008 	add	r3, sp, #8
   1dcbc:	e1a0200c 	mov	r2, ip
   1dcc0:	e083000e 	add	r0, r3, lr
   1dcc4:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   1dcc8:	eb003140 	bl	2a1d0 <memcpy>
   1dccc:	e3a03000 	mov	r3, #0
   1dcd0:	e1a02006 	mov	r2, r6
   1dcd4:	e28d1008 	add	r1, sp, #8
   1dcd8:	e284001c 	add	r0, r4, #28
   1dcdc:	e1cd31b8 	strh	r3, [sp, #24]
   1dce0:	eb000cbf 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1dce4:	e594c008 	ldr	ip, [r4, #8]
   1dce8:	e1cd01b8 	strh	r0, [sp, #24]
   1dcec:	e35c0000 	cmp	ip, #0
   1dcf0:	0a000018 	beq	1dd58 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1dcf4:	e3a0e006 	mov	lr, #6
   1dcf8:	e1a03006 	mov	r3, r6
   1dcfc:	e28d2008 	add	r2, sp, #8
   1dd00:	e284100c 	add	r1, r4, #12
   1dd04:	e1a0000c 	mov	r0, ip
   1dd08:	e58de000 	str	lr, [sp]
   1dd0c:	ebfff222 	bl	1a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1dd10:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1dd14:	e28dd008 	add	sp, sp, #8
   1dd18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dd1c:	e3a00002 	mov	r0, #2
   1dd20:	e3a01004 	mov	r1, #4
   1dd24:	e3a02005 	mov	r2, #5
   1dd28:	e3e0304b 	mvn	r3, #75	; 0x4b
   1dd2c:	e5cd001c 	strb	r0, [sp, #28]
   1dd30:	e5cd101d 	strb	r1, [sp, #29]
   1dd34:	e5cd201e 	strb	r2, [sp, #30]
   1dd38:	e5cd301f 	strb	r3, [sp, #31]
   1dd3c:	eaffffd8 	b	1dca4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x8c>
   1dd40:	e6bf3f33 	rev	r3, r3
   1dd44:	eaffffcb 	b	1dc78 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1dd48:	e59f2028 	ldr	r2, [pc, #40]	; 1dd78 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x160>
   1dd4c:	e59f1028 	ldr	r1, [pc, #40]	; 1dd7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1dd50:	e59f0028 	ldr	r0, [pc, #40]	; 1dd80 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x168>
   1dd54:	eb0018da 	bl	240c4 <assertion_failed>
   1dd58:	e59f2024 	ldr	r2, [pc, #36]	; 1dd84 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x16c>
   1dd5c:	e59f1018 	ldr	r1, [pc, #24]	; 1dd7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1dd60:	e59f0020 	ldr	r0, [pc, #32]	; 1dd88 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x170>
   1dd64:	eb0018d6 	bl	240c4 <assertion_failed>
   1dd68:	e59f201c 	ldr	r2, [pc, #28]	; 1dd8c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x174>
   1dd6c:	e59f1008 	ldr	r1, [pc, #8]	; 1dd7c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1dd70:	e59f0018 	ldr	r0, [pc, #24]	; 1dd90 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x178>
   1dd74:	eb0018d2 	bl	240c4 <assertion_failed>
   1dd78:	00000557 	.word	0x00000557
   1dd7c:	00045938 	.word	0x00045938
   1dd80:	0004594c 	.word	0x0004594c
   1dd84:	00000587 	.word	0x00000587
   1dd88:	000451b8 	.word	0x000451b8
   1dd8c:	00000571 	.word	0x00000571
   1dd90:	00045220 	.word	0x00045220

0001dd94 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1dd94:	e3510000 	cmp	r1, #0
   1dd98:	e92d4010 	push	{r4, lr}
   1dd9c:	0a000021 	beq	1de28 <CTCPConnection::ScanOptions(TTCPHeader*)+0x94>
   1dda0:	e5d1300c 	ldrb	r3, [r1, #12]
   1dda4:	e59fe08c 	ldr	lr, [pc, #140]	; 1de38 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa4>
   1dda8:	e1a03223 	lsr	r3, r3, #4
   1ddac:	e0813103 	add	r3, r1, r3, lsl #2
   1ddb0:	e2811014 	add	r1, r1, #20
   1ddb4:	e2812002 	add	r2, r1, #2
   1ddb8:	e1530002 	cmp	r3, r2
   1ddbc:	38bd8010 	popcc	{r4, pc}
   1ddc0:	e5d12000 	ldrb	r2, [r1]
   1ddc4:	e3520001 	cmp	r2, #1
   1ddc8:	0a000007 	beq	1ddec <CTCPConnection::ScanOptions(TTCPHeader*)+0x58>
   1ddcc:	38bd8010 	popcc	{r4, pc}
   1ddd0:	e3520002 	cmp	r2, #2
   1ddd4:	e5d12001 	ldrb	r2, [r1, #1]
   1ddd8:	1a000001 	bne	1dde4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1dddc:	e3520004 	cmp	r2, #4
   1dde0:	0a000003 	beq	1ddf4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x60>
   1dde4:	e0811002 	add	r1, r1, r2
   1dde8:	eafffff1 	b	1ddb4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1ddec:	e2811001 	add	r1, r1, #1
   1ddf0:	eaffffef 	b	1ddb4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1ddf4:	e281c004 	add	ip, r1, #4
   1ddf8:	e153000c 	cmp	r3, ip
   1ddfc:	3afffff8 	bcc	1dde4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1de00:	e5d14002 	ldrb	r4, [r1, #2]
   1de04:	e5d1c003 	ldrb	ip, [r1, #3]
   1de08:	e18cc404 	orr	ip, ip, r4, lsl #8
   1de0c:	e28cc014 	add	ip, ip, #20
   1de10:	e15c000e 	cmp	ip, lr
   1de14:	21a0c00e 	movcs	ip, lr
   1de18:	e24cc014 	sub	ip, ip, #20
   1de1c:	e35c0009 	cmp	ip, #9
   1de20:	81c0cbb4 	strhhi	ip, [r0, #180]	; 0xb4
   1de24:	eaffffee 	b	1dde4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1de28:	e59f200c 	ldr	r2, [pc, #12]	; 1de3c <CTCPConnection::ScanOptions(TTCPHeader*)+0xa8>
   1de2c:	e59f100c 	ldr	r1, [pc, #12]	; 1de40 <CTCPConnection::ScanOptions(TTCPHeader*)+0xac>
   1de30:	e59f000c 	ldr	r0, [pc, #12]	; 1de44 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb0>
   1de34:	eb0018a2 	bl	240c4 <assertion_failed>
   1de38:	000005c8 	.word	0x000005c8
   1de3c:	0000058d 	.word	0x0000058d
   1de40:	00045938 	.word	0x00045938
   1de44:	0004596c 	.word	0x0004596c

0001de48 <CTCPConnection::CalculateISN()>:
   1de48:	e92d4070 	push	{r4, r5, r6, lr}
   1de4c:	e1a05000 	mov	r5, r0
   1de50:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1de54:	e3500000 	cmp	r0, #0
   1de58:	0a00000d 	beq	1de94 <CTCPConnection::CalculateISN()+0x4c>
   1de5c:	eb002ba5 	bl	28cf8 <CTimer::GetTime() const>
   1de60:	e1a04000 	mov	r4, r0
   1de64:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1de68:	eb002b9e 	bl	28ce8 <CTimer::GetTicks() const>
   1de6c:	e3a02064 	mov	r2, #100	; 0x64
   1de70:	e59f302c 	ldr	r3, [pc, #44]	; 1dea4 <CTCPConnection::CalculateISN()+0x5c>
   1de74:	e0831093 	umull	r1, r3, r3, r0
   1de78:	e1a032a3 	lsr	r3, r3, #5
   1de7c:	e0030392 	mul	r3, r2, r3
   1de80:	e0400003 	sub	r0, r0, r3
   1de84:	e0200492 	mla	r0, r2, r4, r0
   1de88:	e0800080 	add	r0, r0, r0, lsl #1
   1de8c:	e0600180 	rsb	r0, r0, r0, lsl #3
   1de90:	e8bd8070 	pop	{r4, r5, r6, pc}
   1de94:	e59f200c 	ldr	r2, [pc, #12]	; 1dea8 <CTCPConnection::CalculateISN()+0x60>
   1de98:	e59f100c 	ldr	r1, [pc, #12]	; 1deac <CTCPConnection::CalculateISN()+0x64>
   1de9c:	e59f000c 	ldr	r0, [pc, #12]	; 1deb0 <CTCPConnection::CalculateISN()+0x68>
   1dea0:	eb001887 	bl	240c4 <assertion_failed>
   1dea4:	51eb851f 	.word	0x51eb851f
   1dea8:	000005b6 	.word	0x000005b6
   1deac:	00045938 	.word	0x00045938
   1deb0:	00040910 	.word	0x00040910

0001deb4 <CTCPConnection::StopTimer(unsigned int)>:
   1deb4:	e3510002 	cmp	r1, #2
   1deb8:	e92d4070 	push	{r4, r5, r6, lr}
   1debc:	8a00001c 	bhi	1df34 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1dec0:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1dec4:	e1a05000 	mov	r5, r0
   1dec8:	e3530000 	cmp	r3, #0
   1decc:	0a00001c 	beq	1df44 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1ded0:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ded4:	e281401e 	add	r4, r1, #30
   1ded8:	e3500000 	cmp	r0, #0
   1dedc:	1a000004 	bne	1def4 <CTCPConnection::StopTimer(unsigned int)+0x40>
   1dee0:	e0852104 	add	r2, r5, r4, lsl #2
   1dee4:	e5921004 	ldr	r1, [r2, #4]
   1dee8:	e3510000 	cmp	r1, #0
   1deec:	1a000006 	bne	1df0c <CTCPConnection::StopTimer(unsigned int)+0x58>
   1def0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1def4:	eb0035c0 	bl	2b5fc <EnterCritical>
   1def8:	e0853104 	add	r3, r5, r4, lsl #2
   1defc:	e5931004 	ldr	r1, [r3, #4]
   1df00:	e3510000 	cmp	r1, #0
   1df04:	0a000005 	beq	1df20 <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1df08:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1df0c:	e1a00003 	mov	r0, r3
   1df10:	eb002cb9 	bl	291fc <CTimer::CancelKernelTimer(unsigned int)>
   1df14:	e3a03000 	mov	r3, #0
   1df18:	e0851104 	add	r1, r5, r4, lsl #2
   1df1c:	e5813004 	str	r3, [r1, #4]
   1df20:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1df24:	e3530000 	cmp	r3, #0
   1df28:	08bd8070 	popeq	{r4, r5, r6, pc}
   1df2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1df30:	ea0035dc 	b	2b6a8 <LeaveCritical>
   1df34:	e59f2018 	ldr	r2, [pc, #24]	; 1df54 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1df38:	e59f1018 	ldr	r1, [pc, #24]	; 1df58 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1df3c:	e59f0018 	ldr	r0, [pc, #24]	; 1df5c <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1df40:	eb00185f 	bl	240c4 <assertion_failed>
   1df44:	e59f2014 	ldr	r2, [pc, #20]	; 1df60 <CTCPConnection::StopTimer(unsigned int)+0xac>
   1df48:	e59f1008 	ldr	r1, [pc, #8]	; 1df58 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1df4c:	e59f0010 	ldr	r0, [pc, #16]	; 1df64 <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1df50:	eb00185b 	bl	240c4 <assertion_failed>
   1df54:	000005c9 	.word	0x000005c9
   1df58:	00045938 	.word	0x00045938
   1df5c:	0004597c 	.word	0x0004597c
   1df60:	000005ca 	.word	0x000005ca
   1df64:	00040910 	.word	0x00040910

0001df68 <CTCPConnection::~CTCPConnection()>:
   1df68:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1df6c:	e59f30bc 	ldr	r3, [pc, #188]	; 1e030 <CTCPConnection::~CTCPConnection()+0xc8>
   1df70:	e21110ff 	ands	r1, r1, #255	; 0xff
   1df74:	e92d4070 	push	{r4, r5, r6, lr}
   1df78:	e5803000 	str	r3, [r0]
   1df7c:	1a000023 	bne	1e010 <CTCPConnection::~CTCPConnection()+0xa8>
   1df80:	e1a04000 	mov	r4, r0
   1df84:	ebffffca 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1df88:	e3a01001 	mov	r1, #1
   1df8c:	e1a00004 	mov	r0, r4
   1df90:	ebffffc7 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1df94:	e2845068 	add	r5, r4, #104	; 0x68
   1df98:	e3a01002 	mov	r1, #2
   1df9c:	e1a00004 	mov	r0, r4
   1dfa0:	ebffffc3 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1dfa4:	e2846070 	add	r6, r4, #112	; 0x70
   1dfa8:	e1a00005 	mov	r0, r5
   1dfac:	eb0017c1 	bl	23eb8 <CSynchronizationEvent::Set()>
   1dfb0:	e1a00006 	mov	r0, r6
   1dfb4:	eb0017bf 	bl	23eb8 <CSynchronizationEvent::Set()>
   1dfb8:	e59f2074 	ldr	r2, [pc, #116]	; 1e034 <CTCPConnection::~CTCPConnection()+0xcc>
   1dfbc:	e5923000 	ldr	r3, [r2]
   1dfc0:	e3530000 	cmp	r3, #0
   1dfc4:	0a000015 	beq	1e020 <CTCPConnection::~CTCPConnection()+0xb8>
   1dfc8:	e2433001 	sub	r3, r3, #1
   1dfcc:	e28400b8 	add	r0, r4, #184	; 0xb8
   1dfd0:	e5823000 	str	r3, [r2]
   1dfd4:	eb0007ad 	bl	1fe90 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1dfd8:	e1a00006 	mov	r0, r6
   1dfdc:	eb0017a5 	bl	23e78 <CSynchronizationEvent::~CSynchronizationEvent()>
   1dfe0:	e1a00005 	mov	r0, r5
   1dfe4:	eb0017a3 	bl	23e78 <CSynchronizationEvent::~CSynchronizationEvent()>
   1dfe8:	e2840048 	add	r0, r4, #72	; 0x48
   1dfec:	eb0006b9 	bl	1fad8 <CRetransmissionQueue::~CRetransmissionQueue()>
   1dff0:	e284003c 	add	r0, r4, #60	; 0x3c
   1dff4:	eb000b1b 	bl	20c68 <CNetQueue::~CNetQueue()>
   1dff8:	e2840030 	add	r0, r4, #48	; 0x30
   1dffc:	eb000b19 	bl	20c68 <CNetQueue::~CNetQueue()>
   1e000:	e1a00004 	mov	r0, r4
   1e004:	ebfffb69 	bl	1cdb0 <CNetConnection::~CNetConnection()>
   1e008:	e1a00004 	mov	r0, r4
   1e00c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e010:	e3a020d1 	mov	r2, #209	; 0xd1
   1e014:	e59f101c 	ldr	r1, [pc, #28]	; 1e038 <CTCPConnection::~CTCPConnection()+0xd0>
   1e018:	e59f001c 	ldr	r0, [pc, #28]	; 1e03c <CTCPConnection::~CTCPConnection()+0xd4>
   1e01c:	eb001828 	bl	240c4 <assertion_failed>
   1e020:	e3a020dc 	mov	r2, #220	; 0xdc
   1e024:	e59f100c 	ldr	r1, [pc, #12]	; 1e038 <CTCPConnection::~CTCPConnection()+0xd0>
   1e028:	e59f0010 	ldr	r0, [pc, #16]	; 1e040 <CTCPConnection::~CTCPConnection()+0xd8>
   1e02c:	eb001824 	bl	240c4 <assertion_failed>
   1e030:	000458cc 	.word	0x000458cc
   1e034:	0005014c 	.word	0x0005014c
   1e038:	00045938 	.word	0x00045938
   1e03c:	00045998 	.word	0x00045998
   1e040:	000459b4 	.word	0x000459b4

0001e044 <CTCPConnection::~CTCPConnection()>:
   1e044:	e92d4010 	push	{r4, lr}
   1e048:	e1a04000 	mov	r4, r0
   1e04c:	ebffffc5 	bl	1df68 <CTCPConnection::~CTCPConnection()>
   1e050:	e1a00004 	mov	r0, r4
   1e054:	e3a010e0 	mov	r1, #224	; 0xe0
   1e058:	eb003243 	bl	2a96c <operator delete(void*, unsigned int)>
   1e05c:	e1a00004 	mov	r0, r4
   1e060:	e8bd8010 	pop	{r4, pc}

0001e064 <CTCPConnection::Close()>:
   1e064:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e068:	e3530000 	cmp	r3, #0
   1e06c:	ba000036 	blt	1e14c <CTCPConnection::Close()+0xe8>
   1e070:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e074:	e92d4010 	push	{r4, lr}
   1e078:	e1a04000 	mov	r4, r0
   1e07c:	e353000a 	cmp	r3, #10
   1e080:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e084:	ea000013 	b	1e0d8 <CTCPConnection::Close()+0x74>
   1e088:	0001e0f4 	.word	0x0001e0f4
   1e08c:	0001e0fc 	.word	0x0001e0fc
   1e090:	0001e0fc 	.word	0x0001e0fc
   1e094:	0001e11c 	.word	0x0001e11c
   1e098:	0001e11c 	.word	0x0001e11c
   1e09c:	0001e0d8 	.word	0x0001e0d8
   1e0a0:	0001e0d8 	.word	0x0001e0d8
   1e0a4:	0001e0b4 	.word	0x0001e0b4
   1e0a8:	0001e0f4 	.word	0x0001e0f4
   1e0ac:	0001e0f4 	.word	0x0001e0f4
   1e0b0:	0001e0f4 	.word	0x0001e0f4
   1e0b4:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e0b8:	e3530000 	cmp	r3, #0
   1e0bc:	1a000028 	bne	1e164 <CTCPConnection::Close()+0x100>
   1e0c0:	e3a01005 	mov	r1, #5
   1e0c4:	e3a02009 	mov	r2, #9
   1e0c8:	e3a03001 	mov	r3, #1
   1e0cc:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e0d0:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e0d4:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e0d8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e0dc:	e3530000 	cmp	r3, #0
   1e0e0:	ba000001 	blt	1e0ec <CTCPConnection::Close()+0x88>
   1e0e4:	e3a00000 	mov	r0, #0
   1e0e8:	e8bd8010 	pop	{r4, pc}
   1e0ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e0f0:	e8bd8010 	pop	{r4, pc}
   1e0f4:	e3e00000 	mvn	r0, #0
   1e0f8:	e8bd8010 	pop	{r4, pc}
   1e0fc:	e3a01001 	mov	r1, #1
   1e100:	ebffff6b 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1e104:	e3a03000 	mov	r3, #0
   1e108:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e10c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e110:	e3530000 	cmp	r3, #0
   1e114:	aafffff2 	bge	1e0e4 <CTCPConnection::Close()+0x80>
   1e118:	eafffff3 	b	1e0ec <CTCPConnection::Close()+0x88>
   1e11c:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e120:	e3530000 	cmp	r3, #0
   1e124:	1a00000a 	bne	1e154 <CTCPConnection::Close()+0xf0>
   1e128:	e3a03005 	mov	r3, #5
   1e12c:	e3a02001 	mov	r2, #1
   1e130:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e134:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e138:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e13c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e140:	e3530000 	cmp	r3, #0
   1e144:	aaffffe6 	bge	1e0e4 <CTCPConnection::Close()+0x80>
   1e148:	eaffffe7 	b	1e0ec <CTCPConnection::Close()+0x88>
   1e14c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e150:	e12fff1e 	bx	lr
   1e154:	e3a02d05 	mov	r2, #320	; 0x140
   1e158:	e59f1014 	ldr	r1, [pc, #20]	; 1e174 <CTCPConnection::Close()+0x110>
   1e15c:	e59f0014 	ldr	r0, [pc, #20]	; 1e178 <CTCPConnection::Close()+0x114>
   1e160:	eb0017d7 	bl	240c4 <assertion_failed>
   1e164:	e59f2010 	ldr	r2, [pc, #16]	; 1e17c <CTCPConnection::Close()+0x118>
   1e168:	e59f1004 	ldr	r1, [pc, #4]	; 1e174 <CTCPConnection::Close()+0x110>
   1e16c:	e59f0004 	ldr	r0, [pc, #4]	; 1e178 <CTCPConnection::Close()+0x114>
   1e170:	eb0017d3 	bl	240c4 <assertion_failed>
   1e174:	00045938 	.word	0x00045938
   1e178:	000459c8 	.word	0x000459c8
   1e17c:	0000014b 	.word	0x0000014b

0001e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e180:	e92d4070 	push	{r4, r5, r6, lr}
   1e184:	e3510002 	cmp	r1, #2
   1e188:	e24dd008 	sub	sp, sp, #8
   1e18c:	8a000012 	bhi	1e1dc <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e190:	e3520000 	cmp	r2, #0
   1e194:	e1a06002 	mov	r6, r2
   1e198:	0a000013 	beq	1e1ec <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e19c:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e1a0:	e1a04000 	mov	r4, r0
   1e1a4:	e3530000 	cmp	r3, #0
   1e1a8:	0a000013 	beq	1e1fc <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e1ac:	e1a05001 	mov	r5, r1
   1e1b0:	ebffff3f 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1e1b4:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e1b8:	e1a01006 	mov	r1, r6
   1e1bc:	e58d4000 	str	r4, [sp]
   1e1c0:	e1a03005 	mov	r3, r5
   1e1c4:	e59f2040 	ldr	r2, [pc, #64]	; 1e20c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e1c8:	eb002bbc 	bl	290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e1cc:	e0844105 	add	r4, r4, r5, lsl #2
   1e1d0:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1e1d4:	e28dd008 	add	sp, sp, #8
   1e1d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e1dc:	e59f202c 	ldr	r2, [pc, #44]	; 1e210 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e1e0:	e59f102c 	ldr	r1, [pc, #44]	; 1e214 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e1e4:	e59f002c 	ldr	r0, [pc, #44]	; 1e218 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e1e8:	eb0017b5 	bl	240c4 <assertion_failed>
   1e1ec:	e59f2028 	ldr	r2, [pc, #40]	; 1e21c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e1f0:	e59f101c 	ldr	r1, [pc, #28]	; 1e214 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e1f4:	e59f0024 	ldr	r0, [pc, #36]	; 1e220 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e1f8:	eb0017b1 	bl	240c4 <assertion_failed>
   1e1fc:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e200:	e59f100c 	ldr	r1, [pc, #12]	; 1e214 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e204:	e59f0018 	ldr	r0, [pc, #24]	; 1e224 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e208:	eb0017ad 	bl	240c4 <assertion_failed>
   1e20c:	0001fa38 	.word	0x0001fa38
   1e210:	000005be 	.word	0x000005be
   1e214:	00045938 	.word	0x00045938
   1e218:	0004597c 	.word	0x0004597c
   1e21c:	000005bf 	.word	0x000005bf
   1e220:	000459d8 	.word	0x000459d8
   1e224:	00040910 	.word	0x00040910

0001e228 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e228:	e3a0c006 	mov	ip, #6
   1e22c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e230:	e1a04000 	mov	r4, r0
   1e234:	e3a05000 	mov	r5, #0
   1e238:	e3a06001 	mov	r6, #1
   1e23c:	e24dd014 	sub	sp, sp, #20
   1e240:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e244:	e58dc008 	str	ip, [sp, #8]
   1e248:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e24c:	e58de000 	str	lr, [sp]
   1e250:	e58dc004 	str	ip, [sp, #4]
   1e254:	ebfffa83 	bl	1cc68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e258:	e59f3134 	ldr	r3, [pc, #308]	; 1e394 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x16c>
   1e25c:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e260:	e5843000 	str	r3, [r4]
   1e264:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e268:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e26c:	e2840030 	add	r0, r4, #48	; 0x30
   1e270:	eb000a42 	bl	20b80 <CNetQueue::CNetQueue()>
   1e274:	e284003c 	add	r0, r4, #60	; 0x3c
   1e278:	eb000a40 	bl	20b80 <CNetQueue::CNetQueue()>
   1e27c:	e3a01801 	mov	r1, #65536	; 0x10000
   1e280:	e2840048 	add	r0, r4, #72	; 0x48
   1e284:	eb0005ff 	bl	1fa88 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e288:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e28c:	e1a01005 	mov	r1, r5
   1e290:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e294:	e2840068 	add	r0, r4, #104	; 0x68
   1e298:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e29c:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e2a0:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e2a4:	eb0016ef 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2a8:	e1a01005 	mov	r1, r5
   1e2ac:	e2840070 	add	r0, r4, #112	; 0x70
   1e2b0:	eb0016ec 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2b4:	eb002d41 	bl	297c0 <CTimer::Get()>
   1e2b8:	e3a02f86 	mov	r2, #536	; 0x218
   1e2bc:	e59f30d4 	ldr	r3, [pc, #212]	; 1e398 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x170>
   1e2c0:	e28470b8 	add	r7, r4, #184	; 0xb8
   1e2c4:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e2c8:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e2cc:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e2d0:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e2d4:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e2d8:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e2dc:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e2e0:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e2e4:	e1a00007 	mov	r0, r7
   1e2e8:	eb0006d1 	bl	1fe34 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e2ec:	e59f20a8 	ldr	r2, [pc, #168]	; 1e39c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   1e2f0:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e2f4:	e5923000 	ldr	r3, [r2]
   1e2f8:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e2fc:	e0833006 	add	r3, r3, r6
   1e300:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e304:	e1a00004 	mov	r0, r4
   1e308:	e5823000 	str	r3, [r2]
   1e30c:	ebfffecd 	bl	1de48 <CTCPConnection::CalculateISN()>
   1e310:	e1a01000 	mov	r1, r0
   1e314:	e1a00007 	mov	r0, r7
   1e318:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1e31c:	eb0006de 	bl	1fe9c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1e320:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1e324:	e1a03005 	mov	r3, r5
   1e328:	e0821006 	add	r1, r2, r6
   1e32c:	e58d5004 	str	r5, [sp, #4]
   1e330:	e58d5000 	str	r5, [sp]
   1e334:	e1a00004 	mov	r0, r4
   1e338:	e5841090 	str	r1, [r4, #144]	; 0x90
   1e33c:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1e340:	e3a01c02 	mov	r1, #512	; 0x200
   1e344:	ebfffe33 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e348:	e1500005 	cmp	r0, r5
   1e34c:	0a00000d 	beq	1e388 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x160>
   1e350:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1e354:	e1a02006 	mov	r2, r6
   1e358:	e1a00007 	mov	r0, r7
   1e35c:	eb0006eb 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e360:	e3a02002 	mov	r2, #2
   1e364:	e3a03005 	mov	r3, #5
   1e368:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1e36c:	e1a00007 	mov	r0, r7
   1e370:	e5843060 	str	r3, [r4, #96]	; 0x60
   1e374:	eb0006c6 	bl	1fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e378:	e1a01006 	mov	r1, r6
   1e37c:	e1a02000 	mov	r2, r0
   1e380:	e1a00004 	mov	r0, r4
   1e384:	ebffff7d 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e388:	e1a00004 	mov	r0, r4
   1e38c:	e28dd014 	add	sp, sp, #20
   1e390:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e394:	000458cc 	.word	0x000458cc
   1e398:	00003908 	.word	0x00003908
   1e39c:	0005014c 	.word	0x0005014c

0001e3a0 <CTCPConnection::Process()>:
   1e3a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3a4:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1e3a8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e3ac:	e3530000 	cmp	r3, #0
   1e3b0:	e24dd00c 	sub	sp, sp, #12
   1e3b4:	e1a05000 	mov	r5, r0
   1e3b8:	1a000085 	bne	1e5d4 <CTCPConnection::Process()+0x234>
   1e3bc:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e3c0:	e6ef3073 	uxtb	r3, r3
   1e3c4:	e353000a 	cmp	r3, #10
   1e3c8:	9a00001c 	bls	1e440 <CTCPConnection::Process()+0xa0>
   1e3cc:	e2856048 	add	r6, r5, #72	; 0x48
   1e3d0:	e3a07000 	mov	r7, #0
   1e3d4:	e59f42f0 	ldr	r4, [pc, #752]	; 1e6cc <CTCPConnection::Process()+0x32c>
   1e3d8:	e2858030 	add	r8, r5, #48	; 0x30
   1e3dc:	e1a00006 	mov	r0, r6
   1e3e0:	eb0005c9 	bl	1fb0c <CRetransmissionQueue::GetFreeSpace() const>
   1e3e4:	e1500004 	cmp	r0, r4
   1e3e8:	8a000065 	bhi	1e584 <CTCPConnection::Process()+0x1e4>
   1e3ec:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e3f0:	e3530004 	cmp	r3, #4
   1e3f4:	0a00007f 	beq	1e5f8 <CTCPConnection::Process()+0x258>
   1e3f8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e3fc:	e3530007 	cmp	r3, #7
   1e400:	0a00007c 	beq	1e5f8 <CTCPConnection::Process()+0x258>
   1e404:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1e408:	e3530000 	cmp	r3, #0
   1e40c:	1a000082 	bne	1e61c <CTCPConnection::Process()+0x27c>
   1e410:	e3a0aa01 	mov	sl, #4096	; 0x1000
   1e414:	e3a09001 	mov	r9, #1
   1e418:	e28d8008 	add	r8, sp, #8
   1e41c:	e285b030 	add	fp, r5, #48	; 0x30
   1e420:	e28570b8 	add	r7, r5, #184	; 0xb8
   1e424:	e1a00006 	mov	r0, r6
   1e428:	eb000608 	bl	1fc50 <CRetransmissionQueue::GetBytesAvailable() const>
   1e42c:	e3500000 	cmp	r0, #0
   1e430:	1a000029 	bne	1e4dc <CTCPConnection::Process()+0x13c>
   1e434:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e438:	e28dd00c 	add	sp, sp, #12
   1e43c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e440:	e3a07001 	mov	r7, #1
   1e444:	e59f4284 	ldr	r4, [pc, #644]	; 1e6d0 <CTCPConnection::Process()+0x330>
   1e448:	e1a03317 	lsl	r3, r7, r3
   1e44c:	e0044003 	and	r4, r4, r3
   1e450:	e3540000 	cmp	r4, #0
   1e454:	1afffff6 	bne	1e434 <CTCPConnection::Process()+0x94>
   1e458:	e2131e3b 	ands	r1, r3, #944	; 0x3b0
   1e45c:	1a000075 	bne	1e638 <CTCPConnection::Process()+0x298>
   1e460:	e313000c 	tst	r3, #12
   1e464:	0affffd8 	beq	1e3cc <CTCPConnection::Process()+0x2c>
   1e468:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1e46c:	e3530000 	cmp	r3, #0
   1e470:	0affffef 	beq	1e434 <CTCPConnection::Process()+0x94>
   1e474:	e5c0105d 	strb	r1, [r0, #93]	; 0x5d
   1e478:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e47c:	e28540b8 	add	r4, r5, #184	; 0xb8
   1e480:	e3530002 	cmp	r3, #2
   1e484:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1e488:	159020a4 	ldrne	r2, [r0, #164]	; 0xa4
   1e48c:	058d1004 	streq	r1, [sp, #4]
   1e490:	058d1000 	streq	r1, [sp]
   1e494:	01a03001 	moveq	r3, r1
   1e498:	159030a8 	ldrne	r3, [r0, #168]	; 0xa8
   1e49c:	03a01c02 	moveq	r1, #512	; 0x200
   1e4a0:	158d1004 	strne	r1, [sp, #4]
   1e4a4:	158d1000 	strne	r1, [sp]
   1e4a8:	13a01c12 	movne	r1, #4608	; 0x1200
   1e4ac:	ebfffdd9 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e4b0:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1e4b4:	e1a00004 	mov	r0, r4
   1e4b8:	e3a02001 	mov	r2, #1
   1e4bc:	eb000693 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e4c0:	e1a00004 	mov	r0, r4
   1e4c4:	eb000672 	bl	1fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e4c8:	e3a01001 	mov	r1, #1
   1e4cc:	e1a02000 	mov	r2, r0
   1e4d0:	e1a00005 	mov	r0, r5
   1e4d4:	ebffff29 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e4d8:	eaffffd5 	b	1e434 <CTCPConnection::Process()+0x94>
   1e4dc:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e4e0:	e5954094 	ldr	r4, [r5, #148]	; 0x94
   1e4e4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e4e8:	e0834004 	add	r4, r3, r4
   1e4ec:	e0543002 	subs	r3, r4, r2
   1e4f0:	0affffcf 	beq	1e434 <CTCPConnection::Process()+0x94>
   1e4f4:	e1d54bb4 	ldrh	r4, [r5, #180]	; 0xb4
   1e4f8:	e1540003 	cmp	r4, r3
   1e4fc:	21a04003 	movcs	r4, r3
   1e500:	e1540000 	cmp	r4, r0
   1e504:	21a04000 	movcs	r4, r0
   1e508:	e3540d19 	cmp	r4, #1600	; 0x640
   1e50c:	8a00002c 	bhi	1e5c4 <CTCPConnection::Process()+0x224>
   1e510:	e1a02004 	mov	r2, r4
   1e514:	e1a01008 	mov	r1, r8
   1e518:	e1a00006 	mov	r0, r6
   1e51c:	eb0005ea 	bl	1fccc <CRetransmissionQueue::Read(void*, unsigned int)>
   1e520:	e1a00006 	mov	r0, r6
   1e524:	eb000572 	bl	1faf4 <CRetransmissionQueue::IsEmpty() const>
   1e528:	e3500000 	cmp	r0, #0
   1e52c:	1a00001e 	bne	1e5ac <CTCPConnection::Process()+0x20c>
   1e530:	e1a0100a 	mov	r1, sl
   1e534:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e538:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e53c:	e1a00005 	mov	r0, r5
   1e540:	e58d4004 	str	r4, [sp, #4]
   1e544:	e58d8000 	str	r8, [sp]
   1e548:	ebfffdb2 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e54c:	e1a02004 	mov	r2, r4
   1e550:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1e554:	e1a00007 	mov	r0, r7
   1e558:	eb00066c 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e55c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e560:	e1a00007 	mov	r0, r7
   1e564:	e0834004 	add	r4, r3, r4
   1e568:	e5854090 	str	r4, [r5, #144]	; 0x90
   1e56c:	eb000648 	bl	1fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e570:	e1a01009 	mov	r1, r9
   1e574:	e1a02000 	mov	r2, r0
   1e578:	e1a00005 	mov	r0, r5
   1e57c:	ebfffeff 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e580:	eaffffa7 	b	1e424 <CTCPConnection::Process()+0x84>
   1e584:	e1a02007 	mov	r2, r7
   1e588:	e28d1008 	add	r1, sp, #8
   1e58c:	e1a00008 	mov	r0, r8
   1e590:	eb0009ff 	bl	20d94 <CNetQueue::Dequeue(void*, void**)>
   1e594:	e2502000 	subs	r2, r0, #0
   1e598:	0affff93 	beq	1e3ec <CTCPConnection::Process()+0x4c>
   1e59c:	e28d1008 	add	r1, sp, #8
   1e5a0:	e1a00006 	mov	r0, r6
   1e5a4:	eb000578 	bl	1fb8c <CRetransmissionQueue::Write(void const*, unsigned int)>
   1e5a8:	eaffff8b 	b	1e3dc <CTCPConnection::Process()+0x3c>
   1e5ac:	e1a0000b 	mov	r0, fp
   1e5b0:	eb000977 	bl	20b94 <CNetQueue::IsEmpty() const>
   1e5b4:	e3500000 	cmp	r0, #0
   1e5b8:	0affffdc 	beq	1e530 <CTCPConnection::Process()+0x190>
   1e5bc:	e3a01b06 	mov	r1, #6144	; 0x1800
   1e5c0:	eaffffdb 	b	1e534 <CTCPConnection::Process()+0x194>
   1e5c4:	e59f2108 	ldr	r2, [pc, #264]	; 1e6d4 <CTCPConnection::Process()+0x334>
   1e5c8:	e59f1108 	ldr	r1, [pc, #264]	; 1e6d8 <CTCPConnection::Process()+0x338>
   1e5cc:	e59f0108 	ldr	r0, [pc, #264]	; 1e6dc <CTCPConnection::Process()+0x33c>
   1e5d0:	eb0016bb 	bl	240c4 <assertion_failed>
   1e5d4:	e3e02000 	mvn	r2, #0
   1e5d8:	e3a03000 	mov	r3, #0
   1e5dc:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1e5e0:	e2800068 	add	r0, r0, #104	; 0x68
   1e5e4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e5e8:	eb001632 	bl	23eb8 <CSynchronizationEvent::Set()>
   1e5ec:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e5f0:	e28dd00c 	add	sp, sp, #12
   1e5f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f8:	e2850030 	add	r0, r5, #48	; 0x30
   1e5fc:	eb000964 	bl	20b94 <CNetQueue::IsEmpty() const>
   1e600:	e3500000 	cmp	r0, #0
   1e604:	0affff7e 	beq	1e404 <CTCPConnection::Process()+0x64>
   1e608:	e2850070 	add	r0, r5, #112	; 0x70
   1e60c:	eb001629 	bl	23eb8 <CSynchronizationEvent::Set()>
   1e610:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1e614:	e3530000 	cmp	r3, #0
   1e618:	0affff7c 	beq	1e410 <CTCPConnection::Process()+0x70>
   1e61c:	e3a03000 	mov	r3, #0
   1e620:	e1a00006 	mov	r0, r6
   1e624:	e5c5305c 	strb	r3, [r5, #92]	; 0x5c
   1e628:	eb0005f9 	bl	1fe14 <CRetransmissionQueue::Reset()>
   1e62c:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e630:	e5853090 	str	r3, [r5, #144]	; 0x90
   1e634:	eaffff75 	b	1e410 <CTCPConnection::Process()+0x70>
   1e638:	e2806048 	add	r6, r0, #72	; 0x48
   1e63c:	e1a00006 	mov	r0, r6
   1e640:	eb00052b 	bl	1faf4 <CRetransmissionQueue::IsEmpty() const>
   1e644:	e3500000 	cmp	r0, #0
   1e648:	0affff60 	beq	1e3d0 <CTCPConnection::Process()+0x30>
   1e64c:	e2850030 	add	r0, r5, #48	; 0x30
   1e650:	eb00094f 	bl	20b94 <CNetQueue::IsEmpty() const>
   1e654:	e3500000 	cmp	r0, #0
   1e658:	0affff5c 	beq	1e3d0 <CTCPConnection::Process()+0x30>
   1e65c:	e5d5305e 	ldrb	r3, [r5, #94]	; 0x5e
   1e660:	e3530000 	cmp	r3, #0
   1e664:	0affff59 	beq	1e3d0 <CTCPConnection::Process()+0x30>
   1e668:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e66c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e670:	e28580b8 	add	r8, r5, #184	; 0xb8
   1e674:	e58d4004 	str	r4, [sp, #4]
   1e678:	e58d4000 	str	r4, [sp]
   1e67c:	e3a01c11 	mov	r1, #4352	; 0x1100
   1e680:	e1a00005 	mov	r0, r5
   1e684:	ebfffd63 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e688:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1e68c:	e1a00008 	mov	r0, r8
   1e690:	e1a02007 	mov	r2, r7
   1e694:	eb00061d 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e698:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e69c:	e5d5205f 	ldrb	r2, [r5, #95]	; 0x5f
   1e6a0:	e2833001 	add	r3, r3, #1
   1e6a4:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1e6a8:	e1a00008 	mov	r0, r8
   1e6ac:	e5853090 	str	r3, [r5, #144]	; 0x90
   1e6b0:	e5c5405e 	strb	r4, [r5, #94]	; 0x5e
   1e6b4:	eb0005f6 	bl	1fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e6b8:	e1a01007 	mov	r1, r7
   1e6bc:	e1a02000 	mov	r2, r0
   1e6c0:	e1a00005 	mov	r0, r5
   1e6c4:	ebfffead 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e6c8:	eaffff40 	b	1e3d0 <CTCPConnection::Process()+0x30>
   1e6cc:	0000063f 	.word	0x0000063f
   1e6d0:	00000443 	.word	0x00000443
   1e6d4:	0000025b 	.word	0x0000025b
   1e6d8:	00045938 	.word	0x00045938
   1e6dc:	00043010 	.word	0x00043010

0001e6e0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1e6e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e6e4:	e59d1020 	ldr	r1, [sp, #32]
   1e6e8:	e1dd61b8 	ldrh	r6, [sp, #24]
   1e6ec:	e3510006 	cmp	r1, #6
   1e6f0:	e1dd71bc 	ldrh	r7, [sp, #28]
   1e6f4:	0a000001 	beq	1e700 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1e6f8:	e3a00000 	mov	r0, #0
   1e6fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e700:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e704:	e3510001 	cmp	r1, #1
   1e708:	dafffffa 	ble	1e6f8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1e70c:	e1a01002 	mov	r1, r2
   1e710:	e1a04000 	mov	r4, r0
   1e714:	e280000c 	add	r0, r0, #12
   1e718:	e1a05003 	mov	r5, r3
   1e71c:	eb0007fa 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1e720:	e3500000 	cmp	r0, #0
   1e724:	1afffff3 	bne	1e6f8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1e728:	e1d431b4 	ldrh	r3, [r4, #20]
   1e72c:	e1530006 	cmp	r3, r6
   1e730:	1afffff0 	bne	1e6f8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1e734:	e5940004 	ldr	r0, [r4, #4]
   1e738:	e3500000 	cmp	r0, #0
   1e73c:	0a000017 	beq	1e7a0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1e740:	eb000766 	bl	204e0 <CNetConfig::GetIPAddress() const>
   1e744:	e1a01000 	mov	r1, r0
   1e748:	e1a00005 	mov	r0, r5
   1e74c:	eb0007ee 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1e750:	e3500000 	cmp	r0, #0
   1e754:	1affffe7 	bne	1e6f8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1e758:	e1d431b6 	ldrh	r3, [r4, #22]
   1e75c:	e1530007 	cmp	r3, r7
   1e760:	1affffe4 	bne	1e6f8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1e764:	e3e03000 	mvn	r3, #0
   1e768:	e1a00004 	mov	r0, r4
   1e76c:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1e770:	e3a01001 	mov	r1, #1
   1e774:	ebfffdce 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1e778:	e3a0300a 	mov	r3, #10
   1e77c:	e59f202c 	ldr	r2, [pc, #44]	; 1e7b0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1e780:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e784:	e3a01002 	mov	r1, #2
   1e788:	e1a00004 	mov	r0, r4
   1e78c:	ebfffe7b 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e790:	e2840068 	add	r0, r4, #104	; 0x68
   1e794:	eb0015c7 	bl	23eb8 <CSynchronizationEvent::Set()>
   1e798:	e3a00001 	mov	r0, #1
   1e79c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e7a0:	e59f200c 	ldr	r2, [pc, #12]	; 1e7b4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1e7a4:	e59f100c 	ldr	r1, [pc, #12]	; 1e7b8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1e7a8:	e59f000c 	ldr	r0, [pc, #12]	; 1e7bc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1e7ac:	eb001644 	bl	240c4 <assertion_failed>
   1e7b0:	00001770 	.word	0x00001770
   1e7b4:	00000539 	.word	0x00000539
   1e7b8:	00045938 	.word	0x00045938
   1e7bc:	000451a4 	.word	0x000451a4

0001e7c0 <CTCPConnection::DumpStatus()>:
   1e7c0:	e92d4070 	push	{r4, r5, r6, lr}
   1e7c4:	e1a04000 	mov	r4, r0
   1e7c8:	e24dd020 	sub	sp, sp, #32
   1e7cc:	eb001f2f 	bl	26490 <CLogger::Get()>
   1e7d0:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1e7d4:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1e7d8:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1e7dc:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1e7e0:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1e7e4:	e5d4602a 	ldrb	r6, [r4, #42]	; 0x2a
   1e7e8:	e1d451b4 	ldrh	r5, [r4, #20]
   1e7ec:	e041100c 	sub	r1, r1, ip
   1e7f0:	e042200c 	sub	r2, r2, ip
   1e7f4:	e043300e 	sub	r3, r3, lr
   1e7f8:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   1e7fc:	e594e0ac 	ldr	lr, [r4, #172]	; 0xac
   1e800:	e58d1008 	str	r1, [sp, #8]
   1e804:	e58d2004 	str	r2, [sp, #4]
   1e808:	e58d3010 	str	r3, [sp, #16]
   1e80c:	e58d6000 	str	r6, [sp]
   1e810:	e58d5018 	str	r5, [sp, #24]
   1e814:	e58de014 	str	lr, [sp, #20]
   1e818:	e58dc00c 	str	ip, [sp, #12]
   1e81c:	e59f3010 	ldr	r3, [pc, #16]	; 1e834 <CTCPConnection::DumpStatus()+0x74>
   1e820:	e3a02004 	mov	r2, #4
   1e824:	e59f100c 	ldr	r1, [pc, #12]	; 1e838 <CTCPConnection::DumpStatus()+0x78>
   1e828:	eb001e55 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e82c:	e28dd020 	add	sp, sp, #32
   1e830:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e834:	000459e0 	.word	0x000459e0
   1e838:	00045908 	.word	0x00045908

0001e83c <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1e83c:	e92d4070 	push	{r4, r5, r6, lr}
   1e840:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e844:	e24dd010 	sub	sp, sp, #16
   1e848:	e353000a 	cmp	r3, #10
   1e84c:	8a000015 	bhi	1e8a8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1e850:	e351000a 	cmp	r1, #10
   1e854:	e1a04001 	mov	r4, r1
   1e858:	8a000016 	bhi	1e8b8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1e85c:	e1a05000 	mov	r5, r0
   1e860:	e1a06002 	mov	r6, r2
   1e864:	eb001f09 	bl	26490 <CLogger::Get()>
   1e868:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e86c:	e59f1054 	ldr	r1, [pc, #84]	; 1e8c8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1e870:	e58d6008 	str	r6, [sp, #8]
   1e874:	e081c104 	add	ip, r1, r4, lsl #2
   1e878:	e0813103 	add	r3, r1, r3, lsl #2
   1e87c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1e880:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1e884:	e2811044 	add	r1, r1, #68	; 0x44
   1e888:	e88d000c 	stm	sp, {r2, r3}
   1e88c:	e59f3038 	ldr	r3, [pc, #56]	; 1e8cc <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1e890:	e3a02004 	mov	r2, #4
   1e894:	eb001e3a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e898:	e1a00004 	mov	r0, r4
   1e89c:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1e8a0:	e28dd010 	add	sp, sp, #16
   1e8a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e8a8:	e59f2020 	ldr	r2, [pc, #32]	; 1e8d0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1e8ac:	e59f1020 	ldr	r1, [pc, #32]	; 1e8d4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1e8b0:	e59f0020 	ldr	r0, [pc, #32]	; 1e8d8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1e8b4:	eb001602 	bl	240c4 <assertion_failed>
   1e8b8:	e59f201c 	ldr	r2, [pc, #28]	; 1e8dc <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1e8bc:	e59f1010 	ldr	r1, [pc, #16]	; 1e8d4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1e8c0:	e59f0018 	ldr	r0, [pc, #24]	; 1e8e0 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1e8c4:	eb0015fe 	bl	240c4 <assertion_failed>
   1e8c8:	000458c4 	.word	0x000458c4
   1e8cc:	00045a7c 	.word	0x00045a7c
   1e8d0:	00000647 	.word	0x00000647
   1e8d4:	00045938 	.word	0x00045938
   1e8d8:	00045a18 	.word	0x00045a18
   1e8dc:	00000648 	.word	0x00000648
   1e8e0:	00045a4c 	.word	0x00045a4c

0001e8e4 <CTCPConnection::UnexpectedState(unsigned int)>:
   1e8e4:	e92d4030 	push	{r4, r5, lr}
   1e8e8:	e1a05000 	mov	r5, r0
   1e8ec:	e1a04001 	mov	r4, r1
   1e8f0:	e24dd00c 	sub	sp, sp, #12
   1e8f4:	ebffffb1 	bl	1e7c0 <CTCPConnection::DumpStatus()>
   1e8f8:	eb001ee4 	bl	26490 <CLogger::Get()>
   1e8fc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e900:	e3a02000 	mov	r2, #0
   1e904:	e88d0018 	stm	sp, {r3, r4}
   1e908:	e59f100c 	ldr	r1, [pc, #12]	; 1e91c <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1e90c:	e59f300c 	ldr	r3, [pc, #12]	; 1e920 <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1e910:	eb001e1b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e914:	e28dd00c 	add	sp, sp, #12
   1e918:	e8bd8030 	pop	{r4, r5, pc}
   1e91c:	00045908 	.word	0x00045908
   1e920:	00045a98 	.word	0x00045a98

0001e924 <CTCPConnection::Connect()>:
   1e924:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1e928:	e92d4070 	push	{r4, r5, r6, lr}
   1e92c:	e3520000 	cmp	r2, #0
   1e930:	e1a04000 	mov	r4, r0
   1e934:	ba00000d 	blt	1e970 <CTCPConnection::Connect()+0x4c>
   1e938:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e93c:	e6ef3073 	uxtb	r3, r3
   1e940:	e353000a 	cmp	r3, #10
   1e944:	8a000009 	bhi	1e970 <CTCPConnection::Connect()+0x4c>
   1e948:	e3a02001 	mov	r2, #1
   1e94c:	e59f1058 	ldr	r1, [pc, #88]	; 1e9ac <CTCPConnection::Connect()+0x88>
   1e950:	e1a02312 	lsl	r2, r2, r3
   1e954:	e0011002 	and	r1, r1, r2
   1e958:	e3510000 	cmp	r1, #0
   1e95c:	1a00000e 	bne	1e99c <CTCPConnection::Connect()+0x78>
   1e960:	e3530000 	cmp	r3, #0
   1e964:	0a00000a 	beq	1e994 <CTCPConnection::Connect()+0x70>
   1e968:	e312000c 	tst	r2, #12
   1e96c:	1a000001 	bne	1e978 <CTCPConnection::Connect()+0x54>
   1e970:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e974:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e978:	e2805068 	add	r5, r0, #104	; 0x68
   1e97c:	e1a00005 	mov	r0, r5
   1e980:	eb001549 	bl	23eac <CSynchronizationEvent::Clear()>
   1e984:	e1a00005 	mov	r0, r5
   1e988:	eb001558 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1e98c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e990:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e994:	e3e00000 	mvn	r0, #0
   1e998:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e99c:	e3a010f9 	mov	r1, #249	; 0xf9
   1e9a0:	ebffffcf 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1e9a4:	e3e00000 	mvn	r0, #0
   1e9a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e9ac:	000007e2 	.word	0x000007e2

0001e9b0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1e9b0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e9b4:	e3530000 	cmp	r3, #0
   1e9b8:	ba000028 	blt	1ea60 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1e9bc:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e9c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e9c4:	e1a06002 	mov	r6, r2
   1e9c8:	e1a05001 	mov	r5, r1
   1e9cc:	e1a04000 	mov	r4, r0
   1e9d0:	e353000a 	cmp	r3, #10
   1e9d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e9d8:	ea000015 	b	1ea34 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1e9dc:	0001ea08 	.word	0x0001ea08
   1e9e0:	0001ea20 	.word	0x0001ea20
   1e9e4:	0001ea10 	.word	0x0001ea10
   1e9e8:	0001ea34 	.word	0x0001ea34
   1e9ec:	0001ea34 	.word	0x0001ea34
   1e9f0:	0001ea08 	.word	0x0001ea08
   1e9f4:	0001ea08 	.word	0x0001ea08
   1e9f8:	0001ea08 	.word	0x0001ea08
   1e9fc:	0001ea08 	.word	0x0001ea08
   1ea00:	0001ea08 	.word	0x0001ea08
   1ea04:	0001ea08 	.word	0x0001ea08
   1ea08:	e3e00000 	mvn	r0, #0
   1ea0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ea10:	e59f1070 	ldr	r1, [pc, #112]	; 1ea88 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd8>
   1ea14:	ebffffb2 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1ea18:	e3e00000 	mvn	r0, #0
   1ea1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ea20:	e2807068 	add	r7, r0, #104	; 0x68
   1ea24:	e1a00007 	mov	r0, r7
   1ea28:	eb00151f 	bl	23eac <CSynchronizationEvent::Clear()>
   1ea2c:	e1a00007 	mov	r0, r7
   1ea30:	eb00152e 	bl	23ef0 <CSynchronizationEvent::Wait()>
   1ea34:	e3550000 	cmp	r5, #0
   1ea38:	0a00000a 	beq	1ea68 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1ea3c:	e1a00005 	mov	r0, r5
   1ea40:	e284100c 	add	r1, r4, #12
   1ea44:	eb00079d 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1ea48:	e3560000 	cmp	r6, #0
   1ea4c:	0a000009 	beq	1ea78 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xc8>
   1ea50:	e1d431b4 	ldrh	r3, [r4, #20]
   1ea54:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ea58:	e1c630b0 	strh	r3, [r6]
   1ea5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ea60:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ea64:	e12fff1e 	bx	lr
   1ea68:	e59f201c 	ldr	r2, [pc, #28]	; 1ea8c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1ea6c:	e59f101c 	ldr	r1, [pc, #28]	; 1ea90 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1ea70:	e59f001c 	ldr	r0, [pc, #28]	; 1ea94 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe4>
   1ea74:	eb001592 	bl	240c4 <assertion_failed>
   1ea78:	e59f2018 	ldr	r2, [pc, #24]	; 1ea98 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe8>
   1ea7c:	e59f100c 	ldr	r1, [pc, #12]	; 1ea90 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1ea80:	e59f0014 	ldr	r0, [pc, #20]	; 1ea9c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1ea84:	eb00158e 	bl	240c4 <assertion_failed>
   1ea88:	0000010d 	.word	0x0000010d
   1ea8c:	00000123 	.word	0x00000123
   1ea90:	00045938 	.word	0x00045938
   1ea94:	000451fc 	.word	0x000451fc
   1ea98:	00000126 	.word	0x00000126
   1ea9c:	0004520c 	.word	0x0004520c

0001eaa0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1eaa0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaa4:	e24dd024 	sub	sp, sp, #36	; 0x24
   1eaa8:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1eaac:	e35c0006 	cmp	ip, #6
   1eab0:	0a000002 	beq	1eac0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1eab4:	e3a00000 	mov	r0, #0
   1eab8:	e28dd024 	add	sp, sp, #36	; 0x24
   1eabc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eac0:	e3520013 	cmp	r2, #19
   1eac4:	9a0000e5 	bls	1ee60 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c0>
   1eac8:	e3510000 	cmp	r1, #0
   1eacc:	e1a07003 	mov	r7, r3
   1ead0:	e1a06002 	mov	r6, r2
   1ead4:	e1a04001 	mov	r4, r1
   1ead8:	e1a05000 	mov	r5, r0
   1eadc:	0a0000db 	beq	1ee50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3b0>
   1eae0:	e5d13002 	ldrb	r3, [r1, #2]
   1eae4:	e5d11003 	ldrb	r1, [r1, #3]
   1eae8:	e1d021b6 	ldrh	r2, [r0, #22]
   1eaec:	e1833401 	orr	r3, r3, r1, lsl #8
   1eaf0:	e6bf3fb3 	rev16	r3, r3
   1eaf4:	e6ff3073 	uxth	r3, r3
   1eaf8:	e1520003 	cmp	r2, r3
   1eafc:	1affffec 	bne	1eab4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1eb00:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1eb04:	e3530001 	cmp	r3, #1
   1eb08:	0a00004a 	beq	1ec38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1eb0c:	e1a01007 	mov	r1, r7
   1eb10:	e280000c 	add	r0, r0, #12
   1eb14:	eb0006fc 	bl	2070c <CIPAddress::operator!=(CIPAddress const&) const>
   1eb18:	e3500000 	cmp	r0, #0
   1eb1c:	1affffe4 	bne	1eab4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1eb20:	e5d43000 	ldrb	r3, [r4]
   1eb24:	e5d41001 	ldrb	r1, [r4, #1]
   1eb28:	e1d521b4 	ldrh	r2, [r5, #20]
   1eb2c:	e1833401 	orr	r3, r3, r1, lsl #8
   1eb30:	e6bf3fb3 	rev16	r3, r3
   1eb34:	e6ff3073 	uxth	r3, r3
   1eb38:	e1520003 	cmp	r2, r3
   1eb3c:	0285a01c 	addeq	sl, r5, #28
   1eb40:	1affffdb 	bne	1eab4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1eb44:	e1a02006 	mov	r2, r6
   1eb48:	e1a01004 	mov	r1, r4
   1eb4c:	e1a0000a 	mov	r0, sl
   1eb50:	eb000923 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1eb54:	e3500000 	cmp	r0, #0
   1eb58:	1affffd5 	bne	1eab4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1eb5c:	e5d43005 	ldrb	r3, [r4, #5]
   1eb60:	e5d42004 	ldrb	r2, [r4, #4]
   1eb64:	e5d48008 	ldrb	r8, [r4, #8]
   1eb68:	e5d4c009 	ldrb	ip, [r4, #9]
   1eb6c:	e5d40006 	ldrb	r0, [r4, #6]
   1eb70:	e5d4100a 	ldrb	r1, [r4, #10]
   1eb74:	e5d4900d 	ldrb	r9, [r4, #13]
   1eb78:	e1822403 	orr	r2, r2, r3, lsl #8
   1eb7c:	e5d4300c 	ldrb	r3, [r4, #12]
   1eb80:	e188840c 	orr	r8, r8, ip, lsl #8
   1eb84:	e1839409 	orr	r9, r3, r9, lsl #8
   1eb88:	e1822800 	orr	r2, r2, r0, lsl #16
   1eb8c:	e1888801 	orr	r8, r8, r1, lsl #16
   1eb90:	e5d40007 	ldrb	r0, [r4, #7]
   1eb94:	e5d4100b 	ldrb	r1, [r4, #11]
   1eb98:	e1a03223 	lsr	r3, r3, #4
   1eb9c:	e1a03103 	lsl	r3, r3, #2
   1eba0:	e0466003 	sub	r6, r6, r3
   1eba4:	e1822c00 	orr	r2, r2, r0, lsl #24
   1eba8:	e1888c01 	orr	r8, r8, r1, lsl #24
   1ebac:	e2191c02 	ands	r1, r9, #512	; 0x200
   1ebb0:	e58d3014 	str	r3, [sp, #20]
   1ebb4:	e6bf2f32 	rev	r2, r2
   1ebb8:	1286b001 	addne	fp, r6, #1
   1ebbc:	01a0b006 	moveq	fp, r6
   1ebc0:	e2193c01 	ands	r3, r9, #256	; 0x100
   1ebc4:	e58d1018 	str	r1, [sp, #24]
   1ebc8:	e58d200c 	str	r2, [sp, #12]
   1ebcc:	e58d301c 	str	r3, [sp, #28]
   1ebd0:	e5d4300e 	ldrb	r3, [r4, #14]
   1ebd4:	e5d4200f 	ldrb	r2, [r4, #15]
   1ebd8:	e1a01004 	mov	r1, r4
   1ebdc:	e1833402 	orr	r3, r3, r2, lsl #8
   1ebe0:	e6bf3fb3 	rev16	r3, r3
   1ebe4:	e6ff3073 	uxth	r3, r3
   1ebe8:	e1a00005 	mov	r0, r5
   1ebec:	e58d3010 	str	r3, [sp, #16]
   1ebf0:	128bb001 	addne	fp, fp, #1
   1ebf4:	ebfffc66 	bl	1dd94 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1ebf8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ebfc:	e6bf8f38 	rev	r8, r8
   1ec00:	e353000a 	cmp	r3, #10
   1ec04:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ec08:	ea000031 	b	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ec0c:	0001edf0 	.word	0x0001edf0
   1ec10:	0001ecdc 	.word	0x0001ecdc
   1ec14:	0001ecb4 	.word	0x0001ecb4
   1ec18:	0001ec58 	.word	0x0001ec58
   1ec1c:	0001ec58 	.word	0x0001ec58
   1ec20:	0001ec58 	.word	0x0001ec58
   1ec24:	0001ec58 	.word	0x0001ec58
   1ec28:	0001ec58 	.word	0x0001ec58
   1ec2c:	0001ec58 	.word	0x0001ec58
   1ec30:	0001ec58 	.word	0x0001ec58
   1ec34:	0001ec58 	.word	0x0001ec58
   1ec38:	e5d4300d 	ldrb	r3, [r4, #13]
   1ec3c:	e3130002 	tst	r3, #2
   1ec40:	0affff9b 	beq	1eab4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1ec44:	e280a01c 	add	sl, r0, #28
   1ec48:	e1a0000a 	mov	r0, sl
   1ec4c:	e1a01007 	mov	r1, r7
   1ec50:	eb0008b7 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1ec54:	eaffffba 	b	1eb44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4>
   1ec58:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1ec5c:	e3530000 	cmp	r3, #0
   1ec60:	0a000080 	beq	1ee68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c8>
   1ec64:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1ec68:	e59d100c 	ldr	r1, [sp, #12]
   1ec6c:	e35b0000 	cmp	fp, #0
   1ec70:	e0421001 	sub	r1, r2, r1
   1ec74:	1a000116 	bne	1f0d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x634>
   1ec78:	e3510000 	cmp	r1, #0
   1ec7c:	da0001ea 	ble	1f42c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x98c>
   1ec80:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ec84:	e3530003 	cmp	r3, #3
   1ec88:	0a00007c 	beq	1ee80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1ec8c:	e3a01000 	mov	r1, #0
   1ec90:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ec94:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ec98:	e1a00005 	mov	r0, r5
   1ec9c:	e58d1004 	str	r1, [sp, #4]
   1eca0:	e58d1000 	str	r1, [sp]
   1eca4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1eca8:	ebfffbda 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ecac:	e3a00001 	mov	r0, #1
   1ecb0:	eaffff80 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ecb4:	e3190a01 	tst	r9, #4096	; 0x1000
   1ecb8:	0a000095 	beq	1ef14 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1ecbc:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1ecc0:	e0433008 	sub	r3, r3, r8
   1ecc4:	e3530000 	cmp	r3, #0
   1ecc8:	ba0001bf 	blt	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x92c>
   1eccc:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1ecd0:	0a0000fc 	beq	1f0c8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x628>
   1ecd4:	e3a00001 	mov	r0, #1
   1ecd8:	eaffff76 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ecdc:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1ece0:	1afffffb 	bne	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ece4:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1ece8:	1a0000e9 	bne	1f094 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5f4>
   1ecec:	e59d3018 	ldr	r3, [sp, #24]
   1ecf0:	e3530000 	cmp	r3, #0
   1ecf4:	0afffff6 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ecf8:	e59f3b30 	ldr	r3, [pc, #2864]	; 1f830 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1ecfc:	e5933000 	ldr	r3, [r3]
   1ed00:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1ed04:	2a0000ce 	bcs	1f044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a4>
   1ed08:	e59d200c 	ldr	r2, [sp, #12]
   1ed0c:	e59d1010 	ldr	r1, [sp, #16]
   1ed10:	e2823001 	add	r3, r2, #1
   1ed14:	e35b0000 	cmp	fp, #0
   1ed18:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1ed1c:	e5851094 	str	r1, [r5, #148]	; 0x94
   1ed20:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1ed24:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1ed28:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1ed2c:	0a0001f9 	beq	1f518 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa78>
   1ed30:	e3560000 	cmp	r6, #0
   1ed34:	0a000005 	beq	1ed50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2b0>
   1ed38:	e59d1014 	ldr	r1, [sp, #20]
   1ed3c:	e1a03009 	mov	r3, r9
   1ed40:	e1a02006 	mov	r2, r6
   1ed44:	e0841001 	add	r1, r4, r1
   1ed48:	e285003c 	add	r0, r5, #60	; 0x3c
   1ed4c:	eb0007ca 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ed50:	e1a00005 	mov	r0, r5
   1ed54:	ebfffc3b 	bl	1de48 <CTCPConnection::CalculateISN()>
   1ed58:	e28560b8 	add	r6, r5, #184	; 0xb8
   1ed5c:	e1a01000 	mov	r1, r0
   1ed60:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1ed64:	e1a00006 	mov	r0, r6
   1ed68:	eb00044b 	bl	1fe9c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1ed6c:	e1a01007 	mov	r1, r7
   1ed70:	e285000c 	add	r0, r5, #12
   1ed74:	eb0006d1 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1ed78:	e5d42001 	ldrb	r2, [r4, #1]
   1ed7c:	e5d43000 	ldrb	r3, [r4]
   1ed80:	e1a01007 	mov	r1, r7
   1ed84:	e1833402 	orr	r3, r3, r2, lsl #8
   1ed88:	e6bf3fb3 	rev16	r3, r3
   1ed8c:	e1a0000a 	mov	r0, sl
   1ed90:	e1c531b4 	strh	r3, [r5, #20]
   1ed94:	eb000866 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1ed98:	e3a01000 	mov	r1, #0
   1ed9c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1eda0:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1eda4:	e1a00005 	mov	r0, r5
   1eda8:	e58d1004 	str	r1, [sp, #4]
   1edac:	e58d1000 	str	r1, [sp]
   1edb0:	e3a01c12 	mov	r1, #4608	; 0x1200
   1edb4:	ebfffb97 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1edb8:	e1a00006 	mov	r0, r6
   1edbc:	e3a02001 	mov	r2, #1
   1edc0:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1edc4:	eb000451 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1edc8:	e3a02003 	mov	r2, #3
   1edcc:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1edd0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1edd4:	e2832001 	add	r2, r3, #1
   1edd8:	e2850068 	add	r0, r5, #104	; 0x68
   1eddc:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1ede0:	e5852090 	str	r2, [r5, #144]	; 0x90
   1ede4:	eb001433 	bl	23eb8 <CSynchronizationEvent::Set()>
   1ede8:	e3a00001 	mov	r0, #1
   1edec:	eaffff31 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1edf0:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1edf4:	1affffb6 	bne	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1edf8:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1edfc:	e1a01007 	mov	r1, r7
   1ee00:	e285000c 	add	r0, r5, #12
   1ee04:	0a000090 	beq	1f04c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   1ee08:	eb0006ac 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1ee0c:	e5d43000 	ldrb	r3, [r4]
   1ee10:	e5d42001 	ldrb	r2, [r4, #1]
   1ee14:	e1a01007 	mov	r1, r7
   1ee18:	e1833402 	orr	r3, r3, r2, lsl #8
   1ee1c:	e6bf3fb3 	rev16	r3, r3
   1ee20:	e1c531b4 	strh	r3, [r5, #20]
   1ee24:	e1a0000a 	mov	r0, sl
   1ee28:	eb000841 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1ee2c:	e1a03006 	mov	r3, r6
   1ee30:	e58d6004 	str	r6, [sp, #4]
   1ee34:	e58d6000 	str	r6, [sp]
   1ee38:	e1a02008 	mov	r2, r8
   1ee3c:	e1a00005 	mov	r0, r5
   1ee40:	e3a01b01 	mov	r1, #1024	; 0x400
   1ee44:	ebfffb73 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ee48:	e3a00001 	mov	r0, #1
   1ee4c:	eaffff19 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ee50:	e3a02f9f 	mov	r2, #636	; 0x27c
   1ee54:	e59f19d8 	ldr	r1, [pc, #2520]	; 1f834 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1ee58:	e59f09d8 	ldr	r0, [pc, #2520]	; 1f838 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd98>
   1ee5c:	eb001498 	bl	240c4 <assertion_failed>
   1ee60:	e3e00000 	mvn	r0, #0
   1ee64:	eaffff13 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ee68:	e35b0000 	cmp	fp, #0
   1ee6c:	1affff83 	bne	1ec80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1ee70:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ee74:	e59d200c 	ldr	r2, [sp, #12]
   1ee78:	e1520003 	cmp	r2, r3
   1ee7c:	1affff7f 	bne	1ec80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1ee80:	e3190b01 	tst	r9, #1024	; 0x400
   1ee84:	0a000054 	beq	1efdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x53c>
   1ee88:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ee8c:	e2433003 	sub	r3, r3, #3
   1ee90:	e3530007 	cmp	r3, #7
   1ee94:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ee98:	ea00015e 	b	1f418 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x978>
   1ee9c:	0001eef4 	.word	0x0001eef4
   1eea0:	0001eebc 	.word	0x0001eebc
   1eea4:	0001eebc 	.word	0x0001eebc
   1eea8:	0001eebc 	.word	0x0001eebc
   1eeac:	0001eebc 	.word	0x0001eebc
   1eeb0:	0001eedc 	.word	0x0001eedc
   1eeb4:	0001eedc 	.word	0x0001eedc
   1eeb8:	0001eedc 	.word	0x0001eedc
   1eebc:	e3e03000 	mvn	r3, #0
   1eec0:	e2850048 	add	r0, r5, #72	; 0x48
   1eec4:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1eec8:	eb0003d4 	bl	1fe20 <CRetransmissionQueue::Flush()>
   1eecc:	e2850030 	add	r0, r5, #48	; 0x30
   1eed0:	eb000733 	bl	20ba4 <CNetQueue::Flush()>
   1eed4:	e285003c 	add	r0, r5, #60	; 0x3c
   1eed8:	eb000731 	bl	20ba4 <CNetQueue::Flush()>
   1eedc:	e3a03000 	mov	r3, #0
   1eee0:	e2850068 	add	r0, r5, #104	; 0x68
   1eee4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1eee8:	eb0013f2 	bl	23eb8 <CSynchronizationEvent::Set()>
   1eeec:	e3a00001 	mov	r0, #1
   1eef0:	eafffef0 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1eef4:	e2850048 	add	r0, r5, #72	; 0x48
   1eef8:	eb0003c8 	bl	1fe20 <CRetransmissionQueue::Flush()>
   1eefc:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1ef00:	e3530000 	cmp	r3, #0
   1ef04:	1a00018b 	bne	1f538 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa98>
   1ef08:	e3a00001 	mov	r0, #1
   1ef0c:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1ef10:	eafffee8 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ef14:	e3190b01 	tst	r9, #1024	; 0x400
   1ef18:	1affff6d 	bne	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ef1c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1ef20:	e3530000 	cmp	r3, #0
   1ef24:	0affff6a 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ef28:	e59d200c 	ldr	r2, [sp, #12]
   1ef2c:	e2823001 	add	r3, r2, #1
   1ef30:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1ef34:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1ef38:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1ef3c:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1ef40:	e0423003 	sub	r3, r2, r3
   1ef44:	e3530000 	cmp	r3, #0
   1ef48:	ba000156 	blt	1f4a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa08>
   1ef4c:	e3a07000 	mov	r7, #0
   1ef50:	e3a03003 	mov	r3, #3
   1ef54:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ef58:	e58d7004 	str	r7, [sp, #4]
   1ef5c:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1ef60:	e58d7000 	str	r7, [sp]
   1ef64:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ef68:	e3a01c12 	mov	r1, #4608	; 0x1200
   1ef6c:	e28580b8 	add	r8, r5, #184	; 0xb8
   1ef70:	e1a00005 	mov	r0, r5
   1ef74:	ebfffb27 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ef78:	e3a02001 	mov	r2, #1
   1ef7c:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1ef80:	e1a00008 	mov	r0, r8
   1ef84:	eb0003e1 	bl	1ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ef88:	e3a03005 	mov	r3, #5
   1ef8c:	e1a00008 	mov	r0, r8
   1ef90:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ef94:	eb0003be 	bl	1fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ef98:	e3a01001 	mov	r1, #1
   1ef9c:	e1a02000 	mov	r2, r0
   1efa0:	e1a00005 	mov	r0, r5
   1efa4:	ebfffc75 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1efa8:	e59d301c 	ldr	r3, [sp, #28]
   1efac:	e1530007 	cmp	r3, r7
   1efb0:	1a000129 	bne	1f45c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9bc>
   1efb4:	e1560007 	cmp	r6, r7
   1efb8:	0affff45 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1efbc:	e59d3014 	ldr	r3, [sp, #20]
   1efc0:	e285003c 	add	r0, r5, #60	; 0x3c
   1efc4:	e0841003 	add	r1, r4, r3
   1efc8:	e1a02006 	mov	r2, r6
   1efcc:	e3a03000 	mov	r3, #0
   1efd0:	eb000729 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1efd4:	e3a00001 	mov	r0, #1
   1efd8:	eafffeb6 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1efdc:	e2193c02 	ands	r3, r9, #512	; 0x200
   1efe0:	e3530000 	cmp	r3, #0
   1efe4:	0a000047 	beq	1f108 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x668>
   1efe8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1efec:	e3530003 	cmp	r3, #3
   1eff0:	0a000128 	beq	1f498 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9f8>
   1eff4:	e3a04000 	mov	r4, #0
   1eff8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1effc:	e3a01b01 	mov	r1, #1024	; 0x400
   1f000:	e1a03004 	mov	r3, r4
   1f004:	e58d4004 	str	r4, [sp, #4]
   1f008:	e58d4000 	str	r4, [sp]
   1f00c:	e1a00005 	mov	r0, r5
   1f010:	ebfffb00 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f014:	e3e03000 	mvn	r3, #0
   1f018:	e2850048 	add	r0, r5, #72	; 0x48
   1f01c:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f020:	eb00037e 	bl	1fe20 <CRetransmissionQueue::Flush()>
   1f024:	e2850030 	add	r0, r5, #48	; 0x30
   1f028:	eb0006dd 	bl	20ba4 <CNetQueue::Flush()>
   1f02c:	e285003c 	add	r0, r5, #60	; 0x3c
   1f030:	eb0006db 	bl	20ba4 <CNetQueue::Flush()>
   1f034:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f038:	e2850068 	add	r0, r5, #104	; 0x68
   1f03c:	eb00139d 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f040:	eaffff23 	b	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f044:	e1a01007 	mov	r1, r7
   1f048:	e285000c 	add	r0, r5, #12
   1f04c:	eb00061b 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1f050:	e5d42001 	ldrb	r2, [r4, #1]
   1f054:	e5d43000 	ldrb	r3, [r4]
   1f058:	e1a01007 	mov	r1, r7
   1f05c:	e1833402 	orr	r3, r3, r2, lsl #8
   1f060:	e6bf3fb3 	rev16	r3, r3
   1f064:	e1a0000a 	mov	r0, sl
   1f068:	e1c531b4 	strh	r3, [r5, #20]
   1f06c:	eb0007b0 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f070:	e59d300c 	ldr	r3, [sp, #12]
   1f074:	e58d9004 	str	r9, [sp, #4]
   1f078:	e58d9000 	str	r9, [sp]
   1f07c:	e083300b 	add	r3, r3, fp
   1f080:	e1a02009 	mov	r2, r9
   1f084:	e1a00005 	mov	r0, r5
   1f088:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f08c:	ebfffae1 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f090:	eaffff0f 	b	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f094:	e1a01007 	mov	r1, r7
   1f098:	e285000c 	add	r0, r5, #12
   1f09c:	e58d300c 	str	r3, [sp, #12]
   1f0a0:	eb000606 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   1f0a4:	e5d40001 	ldrb	r0, [r4, #1]
   1f0a8:	e5d42000 	ldrb	r2, [r4]
   1f0ac:	e1a01007 	mov	r1, r7
   1f0b0:	e1822400 	orr	r2, r2, r0, lsl #8
   1f0b4:	e6bf2fb2 	rev16	r2, r2
   1f0b8:	e1a0000a 	mov	r0, sl
   1f0bc:	e1c521b4 	strh	r2, [r5, #20]
   1f0c0:	eb00079b 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f0c4:	e59d300c 	ldr	r3, [sp, #12]
   1f0c8:	e58d3004 	str	r3, [sp, #4]
   1f0cc:	e58d3000 	str	r3, [sp]
   1f0d0:	eaffff58 	b	1ee38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x398>
   1f0d4:	e3510000 	cmp	r1, #0
   1f0d8:	da0000d9 	ble	1f444 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a4>
   1f0dc:	e59d100c 	ldr	r1, [sp, #12]
   1f0e0:	e081000b 	add	r0, r1, fp
   1f0e4:	e2821001 	add	r1, r2, #1
   1f0e8:	e0411000 	sub	r1, r1, r0
   1f0ec:	e3510000 	cmp	r1, #0
   1f0f0:	cafffee2 	bgt	1ec80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f0f4:	e0833002 	add	r3, r3, r2
   1f0f8:	e1e03003 	mvn	r3, r3
   1f0fc:	e1730000 	cmn	r3, r0
   1f100:	5afffede 	bpl	1ec80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f104:	eaffff5d 	b	1ee80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f108:	e3190a01 	tst	r9, #4096	; 0x1000
   1f10c:	0afffef0 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f110:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f114:	e2433003 	sub	r3, r3, #3
   1f118:	e3530007 	cmp	r3, #7
   1f11c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f120:	ea000100 	b	1f528 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa88>
   1f124:	0001f2f4 	.word	0x0001f2f4
   1f128:	0001f2a4 	.word	0x0001f2a4
   1f12c:	0001f2a4 	.word	0x0001f2a4
   1f130:	0001f2a4 	.word	0x0001f2a4
   1f134:	0001f2a4 	.word	0x0001f2a4
   1f138:	0001f2a4 	.word	0x0001f2a4
   1f13c:	0001f27c 	.word	0x0001f27c
   1f140:	0001f144 	.word	0x0001f144
   1f144:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f148:	e1580003 	cmp	r8, r3
   1f14c:	0a000120 	beq	1f5d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb34>
   1f150:	e35b0000 	cmp	fp, #0
   1f154:	0afffede 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f158:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f15c:	e2433004 	sub	r3, r3, #4
   1f160:	e3530006 	cmp	r3, #6
   1f164:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f168:	ea0000fa 	b	1f558 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab8>
   1f16c:	0001f188 	.word	0x0001f188
   1f170:	0001f188 	.word	0x0001f188
   1f174:	0001f188 	.word	0x0001f188
   1f178:	0001f1f0 	.word	0x0001f1f0
   1f17c:	0001f1f0 	.word	0x0001f1f0
   1f180:	0001f1f0 	.word	0x0001f1f0
   1f184:	0001f1f0 	.word	0x0001f1f0
   1f188:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f18c:	e59d200c 	ldr	r2, [sp, #12]
   1f190:	e1520003 	cmp	r2, r3
   1f194:	1a000105 	bne	1f5b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1f198:	e3560000 	cmp	r6, #0
   1f19c:	0a000013 	beq	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f1a0:	e59d3014 	ldr	r3, [sp, #20]
   1f1a4:	e1a02006 	mov	r2, r6
   1f1a8:	e0841003 	add	r1, r4, r3
   1f1ac:	e285003c 	add	r0, r5, #60	; 0x3c
   1f1b0:	e3a03000 	mov	r3, #0
   1f1b4:	eb0006b0 	bl	20c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f1b8:	e3a02000 	mov	r2, #0
   1f1bc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f1c0:	e58d2004 	str	r2, [sp, #4]
   1f1c4:	e0863003 	add	r3, r6, r3
   1f1c8:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f1cc:	e58d2000 	str	r2, [sp]
   1f1d0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f1d4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f1d8:	e1a00005 	mov	r0, r5
   1f1dc:	ebfffa8d 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f1e0:	e3190b02 	tst	r9, #2048	; 0x800
   1f1e4:	0a000001 	beq	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f1e8:	e2850068 	add	r0, r5, #104	; 0x68
   1f1ec:	eb001331 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f1f0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f1f4:	e3530000 	cmp	r3, #0
   1f1f8:	0afffeb5 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f1fc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f200:	e3530001 	cmp	r3, #1
   1f204:	0afffeb2 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f208:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f20c:	e59d301c 	ldr	r3, [sp, #28]
   1f210:	e3530000 	cmp	r3, #0
   1f214:	13520002 	cmpne	r2, #2
   1f218:	03a02001 	moveq	r2, #1
   1f21c:	13a02000 	movne	r2, #0
   1f220:	0afffeab 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f224:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f228:	e58d2004 	str	r2, [sp, #4]
   1f22c:	e2833001 	add	r3, r3, #1
   1f230:	e58d2000 	str	r2, [sp]
   1f234:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f238:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f23c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f240:	e1a00005 	mov	r0, r5
   1f244:	ebfffa73 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f248:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f24c:	e2433003 	sub	r3, r3, #3
   1f250:	e3530007 	cmp	r3, #7
   1f254:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f258:	ea000143 	b	1f76c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xccc>
   1f25c:	0001f754 	.word	0x0001f754
   1f260:	0001f754 	.word	0x0001f754
   1f264:	0001f780 	.word	0x0001f780
   1f268:	0001f71c 	.word	0x0001f71c
   1f26c:	0001ecd4 	.word	0x0001ecd4
   1f270:	0001ecd4 	.word	0x0001ecd4
   1f274:	0001ecd4 	.word	0x0001ecd4
   1f278:	0001f60c 	.word	0x0001f60c
   1f27c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f280:	e1580003 	cmp	r8, r3
   1f284:	1affffb1 	bne	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f288:	e3a03000 	mov	r3, #0
   1f28c:	e2850068 	add	r0, r5, #104	; 0x68
   1f290:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f294:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f298:	eb001306 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f29c:	e3a00001 	mov	r0, #1
   1f2a0:	eafffe04 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f2a4:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f2a8:	e0532008 	subs	r2, r3, r8
   1f2ac:	4a000112 	bmi	1f6fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc5c>
   1f2b0:	e0483003 	sub	r3, r8, r3
   1f2b4:	e3530000 	cmp	r3, #0
   1f2b8:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1f2bc:	da0000f7 	ble	1f6a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1f2c0:	e0423008 	sub	r3, r2, r8
   1f2c4:	e3530000 	cmp	r3, #0
   1f2c8:	ba0000eb 	blt	1f67c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbdc>
   1f2cc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f2d0:	e2433004 	sub	r3, r3, #4
   1f2d4:	e3530004 	cmp	r3, #4
   1f2d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f2dc:	ea0000e2 	b	1f66c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbcc>
   1f2e0:	0001f150 	.word	0x0001f150
   1f2e4:	0001f36c 	.word	0x0001f36c
   1f2e8:	0001f3b0 	.word	0x0001f3b0
   1f2ec:	0001f150 	.word	0x0001f150
   1f2f0:	0001f324 	.word	0x0001f324
   1f2f4:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f2f8:	e0433008 	sub	r3, r3, r8
   1f2fc:	e3530000 	cmp	r3, #0
   1f300:	da000098 	ble	1f568 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac8>
   1f304:	e3a03000 	mov	r3, #0
   1f308:	e1a02008 	mov	r2, r8
   1f30c:	e58d3004 	str	r3, [sp, #4]
   1f310:	e58d3000 	str	r3, [sp]
   1f314:	e3a01b01 	mov	r1, #1024	; 0x400
   1f318:	e1a00005 	mov	r0, r5
   1f31c:	ebfffa3d 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f320:	eaffff8a 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f324:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f328:	e1580003 	cmp	r8, r3
   1f32c:	1affff87 	bne	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f330:	e1a01008 	mov	r1, r8
   1f334:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f338:	eb000359 	bl	200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f33c:	e3a03000 	mov	r3, #0
   1f340:	e1a00005 	mov	r0, r5
   1f344:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f348:	e3a01001 	mov	r1, #1
   1f34c:	ebfffad8 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f350:	e3a0300a 	mov	r3, #10
   1f354:	e59f24e0 	ldr	r2, [pc, #1248]	; 1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1f358:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f35c:	e3a01002 	mov	r1, #2
   1f360:	e1a00005 	mov	r0, r5
   1f364:	ebfffb85 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f368:	eaffff78 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f36c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f370:	e1580003 	cmp	r8, r3
   1f374:	1affff75 	bne	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f378:	e1a01008 	mov	r1, r8
   1f37c:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f380:	eb000347 	bl	200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f384:	e3a03000 	mov	r3, #0
   1f388:	e3a01001 	mov	r1, #1
   1f38c:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f390:	e1a00005 	mov	r0, r5
   1f394:	ebfffac6 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f398:	e3a03006 	mov	r3, #6
   1f39c:	e59f2498 	ldr	r2, [pc, #1176]	; 1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1f3a0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f3a4:	e3a01002 	mov	r1, #2
   1f3a8:	e1a00005 	mov	r0, r5
   1f3ac:	ebfffb73 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f3b0:	e2850048 	add	r0, r5, #72	; 0x48
   1f3b4:	eb0001ce 	bl	1faf4 <CRetransmissionQueue::IsEmpty() const>
   1f3b8:	e3500000 	cmp	r0, #0
   1f3bc:	0affff63 	beq	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f3c0:	e2850068 	add	r0, r5, #104	; 0x68
   1f3c4:	eb0012bb 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f3c8:	eaffff60 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f3cc:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f3d0:	e0483003 	sub	r3, r8, r3
   1f3d4:	e3530000 	cmp	r3, #0
   1f3d8:	cafffe3b 	bgt	1eccc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x22c>
   1f3dc:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f3e0:	e0433008 	sub	r3, r3, r8
   1f3e4:	e3530000 	cmp	r3, #0
   1f3e8:	cafffe39 	bgt	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f3ec:	e3190b01 	tst	r9, #1024	; 0x400
   1f3f0:	0a00008a 	beq	1f620 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb80>
   1f3f4:	e3a03000 	mov	r3, #0
   1f3f8:	e3e02000 	mvn	r2, #0
   1f3fc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f400:	e2850068 	add	r0, r5, #104	; 0x68
   1f404:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1f408:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1f40c:	eb0012a9 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f410:	e3a00001 	mov	r0, #1
   1f414:	eafffda7 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f418:	e1a00005 	mov	r0, r5
   1f41c:	e59f141c 	ldr	r1, [pc, #1052]	; 1f840 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda0>
   1f420:	ebfffd2f 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f424:	e3a00001 	mov	r0, #1
   1f428:	eafffda2 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f42c:	e0833002 	add	r3, r3, r2
   1f430:	e59d200c 	ldr	r2, [sp, #12]
   1f434:	e0423003 	sub	r3, r2, r3
   1f438:	e3530000 	cmp	r3, #0
   1f43c:	aafffe0f 	bge	1ec80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f440:	eafffe8e 	b	1ee80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f444:	e59d000c 	ldr	r0, [sp, #12]
   1f448:	e0831002 	add	r1, r3, r2
   1f44c:	e0401001 	sub	r1, r0, r1
   1f450:	e3510000 	cmp	r1, #0
   1f454:	aaffff20 	bge	1f0dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x63c>
   1f458:	eafffe88 	b	1ee80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f45c:	e58d7004 	str	r7, [sp, #4]
   1f460:	e58d7000 	str	r7, [sp]
   1f464:	e1a03007 	mov	r3, r7
   1f468:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f46c:	e3a01b01 	mov	r1, #1024	; 0x400
   1f470:	e1a00005 	mov	r0, r5
   1f474:	ebfff9e7 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f478:	e3e03000 	mvn	r3, #0
   1f47c:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1f480:	e2850068 	add	r0, r5, #104	; 0x68
   1f484:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f488:	eb00128a 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f48c:	e3560000 	cmp	r6, #0
   1f490:	0afffe0f 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f494:	eafffec8 	b	1efbc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x51c>
   1f498:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f49c:	e3530000 	cmp	r3, #0
   1f4a0:	1afffed3 	bne	1eff4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x554>
   1f4a4:	eafffe97 	b	1ef08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x468>
   1f4a8:	e3a07000 	mov	r7, #0
   1f4ac:	e3a03004 	mov	r3, #4
   1f4b0:	e3a01001 	mov	r1, #1
   1f4b4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f4b8:	e1a00005 	mov	r0, r5
   1f4bc:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f4c0:	ebfffa7b 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f4c4:	e3a03005 	mov	r3, #5
   1f4c8:	e2850068 	add	r0, r5, #104	; 0x68
   1f4cc:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f4d0:	eb001278 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f4d4:	e59d3010 	ldr	r3, [sp, #16]
   1f4d8:	e58d7004 	str	r7, [sp, #4]
   1f4dc:	e58d7000 	str	r7, [sp]
   1f4e0:	e5853094 	str	r3, [r5, #148]	; 0x94
   1f4e4:	e59d300c 	ldr	r3, [sp, #12]
   1f4e8:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f4ec:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1f4f0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f4f4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f4f8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f4fc:	e1a00005 	mov	r0, r5
   1f500:	ebfff9c4 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f504:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f508:	e1530007 	cmp	r3, r7
   1f50c:	01560007 	cmpeq	r6, r7
   1f510:	1affff0e 	bne	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f514:	eafffdee 	b	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f518:	e59f2324 	ldr	r2, [pc, #804]	; 1f844 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda4>
   1f51c:	e59f1310 	ldr	r1, [pc, #784]	; 1f834 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1f520:	e59f0320 	ldr	r0, [pc, #800]	; 1f848 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda8>
   1f524:	eb0012e6 	bl	240c4 <assertion_failed>
   1f528:	e59f131c 	ldr	r1, [pc, #796]	; 1f84c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdac>
   1f52c:	e1a00005 	mov	r0, r5
   1f530:	ebfffceb 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f534:	eaffff05 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f538:	e3e02000 	mvn	r2, #0
   1f53c:	e3a03000 	mov	r3, #0
   1f540:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1f544:	e2850068 	add	r0, r5, #104	; 0x68
   1f548:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f54c:	eb001259 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f550:	e3a00001 	mov	r0, #1
   1f554:	eafffd57 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f558:	e59f12f0 	ldr	r1, [pc, #752]	; 1f850 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb0>
   1f55c:	e1a00005 	mov	r0, r5
   1f560:	ebfffcdf 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f564:	eaffff21 	b	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f568:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f56c:	e0483003 	sub	r3, r8, r3
   1f570:	e3530000 	cmp	r3, #0
   1f574:	caffff62 	bgt	1f304 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x864>
   1f578:	e59d3010 	ldr	r3, [sp, #16]
   1f57c:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f580:	e5853094 	str	r3, [r5, #148]	; 0x94
   1f584:	e59d300c 	ldr	r3, [sp, #12]
   1f588:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f58c:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1f590:	e1a01008 	mov	r1, r8
   1f594:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f598:	eb0002c1 	bl	200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f59c:	e3a02004 	mov	r2, #4
   1f5a0:	e3a03005 	mov	r3, #5
   1f5a4:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f5a8:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f5ac:	eafffee7 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f5b0:	e3a02000 	mov	r2, #0
   1f5b4:	e58d2004 	str	r2, [sp, #4]
   1f5b8:	e58d2000 	str	r2, [sp]
   1f5bc:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f5c0:	e1a00005 	mov	r0, r5
   1f5c4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f5c8:	ebfff992 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f5cc:	e3a00001 	mov	r0, #1
   1f5d0:	eafffd38 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f5d4:	e3a02000 	mov	r2, #0
   1f5d8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f5dc:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1f5e0:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f5e4:	e58d2004 	str	r2, [sp, #4]
   1f5e8:	e58d2000 	str	r2, [sp]
   1f5ec:	e1a00005 	mov	r0, r5
   1f5f0:	e1a02008 	mov	r2, r8
   1f5f4:	ebfff987 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f5f8:	e59f223c 	ldr	r2, [pc, #572]	; 1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1f5fc:	e3a01002 	mov	r1, #2
   1f600:	e1a00005 	mov	r0, r5
   1f604:	ebfffadd 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f608:	eafffed0 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f60c:	e1a00005 	mov	r0, r5
   1f610:	e59f2224 	ldr	r2, [pc, #548]	; 1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1f614:	e3a01002 	mov	r1, #2
   1f618:	ebfffad8 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f61c:	eafffdac 	b	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f620:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f624:	e3530000 	cmp	r3, #0
   1f628:	0afffda9 	beq	1ecd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f62c:	e59d200c 	ldr	r2, [sp, #12]
   1f630:	e1a01008 	mov	r1, r8
   1f634:	e2823001 	add	r3, r2, #1
   1f638:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f63c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f640:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f644:	eb000296 	bl	200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f648:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1f64c:	e0481001 	sub	r1, r8, r1
   1f650:	e3510001 	cmp	r1, #1
   1f654:	9a000002 	bls	1f664 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc4>
   1f658:	e2411001 	sub	r1, r1, #1
   1f65c:	e2850048 	add	r0, r5, #72	; 0x48
   1f660:	eb0001ca 	bl	1fd90 <CRetransmissionQueue::Advance(unsigned int)>
   1f664:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f668:	eafffe32 	b	1ef38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   1f66c:	e3a01e49 	mov	r1, #1168	; 0x490
   1f670:	e1a00005 	mov	r0, r5
   1f674:	ebfffc9a 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f678:	eafffeb4 	b	1f150 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f67c:	e3a03000 	mov	r3, #0
   1f680:	e58d3004 	str	r3, [sp, #4]
   1f684:	e58d3000 	str	r3, [sp]
   1f688:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f68c:	e1a00005 	mov	r0, r5
   1f690:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f694:	ebfff95f 	bl	1dc18 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f698:	e3a00001 	mov	r0, #1
   1f69c:	eafffd05 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f6a0:	e3520000 	cmp	r2, #0
   1f6a4:	1affff08 	bne	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f6a8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f6ac:	e0483003 	sub	r3, r8, r3
   1f6b0:	e3530000 	cmp	r3, #0
   1f6b4:	caffff04 	bgt	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f6b8:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1f6bc:	e59d100c 	ldr	r1, [sp, #12]
   1f6c0:	e0432001 	sub	r2, r3, r1
   1f6c4:	e3520000 	cmp	r2, #0
   1f6c8:	ba000005 	blt	1f6e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc44>
   1f6cc:	e1510003 	cmp	r1, r3
   1f6d0:	1afffefd 	bne	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f6d4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1f6d8:	e0433008 	sub	r3, r3, r8
   1f6dc:	e3530000 	cmp	r3, #0
   1f6e0:	cafffef9 	bgt	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f6e4:	e59d3010 	ldr	r3, [sp, #16]
   1f6e8:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f6ec:	e5853094 	str	r3, [r5, #148]	; 0x94
   1f6f0:	e59d300c 	ldr	r3, [sp, #12]
   1f6f4:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1f6f8:	eafffef3 	b	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f6fc:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f700:	e0481002 	sub	r1, r8, r2
   1f704:	e3510000 	cmp	r1, #0
   1f708:	da000026 	ble	1f7a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1f70c:	e0483003 	sub	r3, r8, r3
   1f710:	e3530000 	cmp	r3, #0
   1f714:	cafffee9 	bgt	1f2c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x820>
   1f718:	eafffeeb 	b	1f2cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1f71c:	e3a01001 	mov	r1, #1
   1f720:	e1a00005 	mov	r0, r5
   1f724:	ebfff9e2 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f728:	e3a01000 	mov	r1, #0
   1f72c:	e1a00005 	mov	r0, r5
   1f730:	ebfff9df 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f734:	e3a0300a 	mov	r3, #10
   1f738:	e1a00005 	mov	r0, r5
   1f73c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f740:	e59f20f4 	ldr	r2, [pc, #244]	; 1f83c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1f744:	e3a01002 	mov	r1, #2
   1f748:	ebfffa8c 	bl	1e180 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f74c:	e3a00001 	mov	r0, #1
   1f750:	eafffcd8 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f754:	e3a03007 	mov	r3, #7
   1f758:	e2850068 	add	r0, r5, #104	; 0x68
   1f75c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f760:	eb0011d4 	bl	23eb8 <CSynchronizationEvent::Set()>
   1f764:	e3a00001 	mov	r0, #1
   1f768:	eafffcd2 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f76c:	e1a00005 	mov	r0, r5
   1f770:	e59f10dc 	ldr	r1, [pc, #220]	; 1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb4>
   1f774:	ebfffc5a 	bl	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f778:	e3a00001 	mov	r0, #1
   1f77c:	eafffccd 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f780:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f784:	e1580003 	cmp	r8, r3
   1f788:	03a04000 	moveq	r4, #0
   1f78c:	03a01001 	moveq	r1, #1
   1f790:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1f794:	0affffe1 	beq	1f720 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc80>
   1f798:	e3a03008 	mov	r3, #8
   1f79c:	e3a00001 	mov	r0, #1
   1f7a0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f7a4:	eafffcc3 	b	1eab8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f7a8:	e1a01008 	mov	r1, r8
   1f7ac:	e28500b8 	add	r0, r5, #184	; 0xb8
   1f7b0:	eb00023b 	bl	200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1f7b4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f7b8:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1f7bc:	e1580003 	cmp	r8, r3
   1f7c0:	e0487007 	sub	r7, r8, r7
   1f7c4:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1f7c8:	1a000004 	bne	1f7e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd40>
   1f7cc:	e3a01001 	mov	r1, #1
   1f7d0:	e1a00005 	mov	r0, r5
   1f7d4:	ebfff9b6 	bl	1deb4 <CTCPConnection::StopTimer(unsigned int)>
   1f7d8:	e3a03005 	mov	r3, #5
   1f7dc:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f7e0:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f7e4:	e3530005 	cmp	r3, #5
   1f7e8:	0a00000c 	beq	1f820 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1f7ec:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f7f0:	e3530008 	cmp	r3, #8
   1f7f4:	0a000009 	beq	1f820 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1f7f8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f7fc:	e3530004 	cmp	r3, #4
   1f800:	03570001 	cmpeq	r7, #1
   1f804:	0affffab 	beq	1f6b8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1f808:	e3570000 	cmp	r7, #0
   1f80c:	0affffa9 	beq	1f6b8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1f810:	e1a01007 	mov	r1, r7
   1f814:	e2850048 	add	r0, r5, #72	; 0x48
   1f818:	eb00015c 	bl	1fd90 <CRetransmissionQueue::Advance(unsigned int)>
   1f81c:	eaffffa5 	b	1f6b8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1f820:	e3a03000 	mov	r3, #0
   1f824:	e2477001 	sub	r7, r7, #1
   1f828:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f82c:	eafffff1 	b	1f7f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd58>
   1f830:	0005014c 	.word	0x0005014c
   1f834:	00045938 	.word	0x00045938
   1f838:	0004529c 	.word	0x0004529c
   1f83c:	00001770 	.word	0x00001770
   1f840:	000003e3 	.word	0x000003e3
   1f844:	00000301 	.word	0x00000301
   1f848:	00045ab8 	.word	0x00045ab8
   1f84c:	000004a9 	.word	0x000004a9
   1f850:	000004dc 	.word	0x000004dc
   1f854:	00000519 	.word	0x00000519

0001f858 <CTCPConnection::TimerHandler(unsigned int)>:
   1f858:	e3510002 	cmp	r1, #2
   1f85c:	e92d4070 	push	{r4, r5, r6, lr}
   1f860:	8a000040 	bhi	1f968 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1f864:	e1a04000 	mov	r4, r0
   1f868:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1f86c:	e1a05001 	mov	r5, r1
   1f870:	e3500000 	cmp	r0, #0
   1f874:	1a00000d 	bne	1f8b0 <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1f878:	e281301e 	add	r3, r1, #30
   1f87c:	e0843103 	add	r3, r4, r3, lsl #2
   1f880:	e5932004 	ldr	r2, [r3, #4]
   1f884:	e3520000 	cmp	r2, #0
   1f888:	15830004 	strne	r0, [r3, #4]
   1f88c:	0a000006 	beq	1f8ac <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1f890:	e3550001 	cmp	r5, #1
   1f894:	0a00001c 	beq	1f90c <CTCPConnection::TimerHandler(unsigned int)+0xb4>
   1f898:	e3550002 	cmp	r5, #2
   1f89c:	1a00000e 	bne	1f8dc <CTCPConnection::TimerHandler(unsigned int)+0x84>
   1f8a0:	e3a03000 	mov	r3, #0
   1f8a4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1f8a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f8ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f8b0:	eb002f51 	bl	2b5fc <EnterCritical>
   1f8b4:	e285301e 	add	r3, r5, #30
   1f8b8:	e0843103 	add	r3, r4, r3, lsl #2
   1f8bc:	e5932004 	ldr	r2, [r3, #4]
   1f8c0:	e3520000 	cmp	r2, #0
   1f8c4:	1a000008 	bne	1f8ec <CTCPConnection::TimerHandler(unsigned int)+0x94>
   1f8c8:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1f8cc:	e3530000 	cmp	r3, #0
   1f8d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f8d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f8d8:	ea002f72 	b	2b6a8 <LeaveCritical>
   1f8dc:	e59f2124 	ldr	r2, [pc, #292]	; 1fa08 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1f8e0:	e59f1124 	ldr	r1, [pc, #292]	; 1fa0c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1f8e4:	e59f0124 	ldr	r0, [pc, #292]	; 1fa10 <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   1f8e8:	eb0011f5 	bl	240c4 <assertion_failed>
   1f8ec:	e3a01000 	mov	r1, #0
   1f8f0:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1f8f4:	e5831004 	str	r1, [r3, #4]
   1f8f8:	e1520001 	cmp	r2, r1
   1f8fc:	0affffe3 	beq	1f890 <CTCPConnection::TimerHandler(unsigned int)+0x38>
   1f900:	eb002f68 	bl	2b6a8 <LeaveCritical>
   1f904:	e3550001 	cmp	r5, #1
   1f908:	1affffe2 	bne	1f898 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   1f90c:	e28400b8 	add	r0, r4, #184	; 0xb8
   1f910:	eb0001a4 	bl	1ffa8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1f914:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   1f918:	e3530000 	cmp	r3, #0
   1f91c:	e2433001 	sub	r3, r3, #1
   1f920:	e5843060 	str	r3, [r4, #96]	; 0x60
   1f924:	0a000029 	beq	1f9d0 <CTCPConnection::TimerHandler(unsigned int)+0x178>
   1f928:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1f92c:	e353000a 	cmp	r3, #10
   1f930:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f934:	ea00000a 	b	1f964 <CTCPConnection::TimerHandler(unsigned int)+0x10c>
   1f938:	0001f9a8 	.word	0x0001f9a8
   1f93c:	0001f9a8 	.word	0x0001f9a8
   1f940:	0001f9b8 	.word	0x0001f9b8
   1f944:	0001f9b8 	.word	0x0001f9b8
   1f948:	0001f990 	.word	0x0001f990
   1f94c:	0001f978 	.word	0x0001f978
   1f950:	0001f9a8 	.word	0x0001f9a8
   1f954:	0001f990 	.word	0x0001f990
   1f958:	0001f978 	.word	0x0001f978
   1f95c:	0001f978 	.word	0x0001f978
   1f960:	0001f9a8 	.word	0x0001f9a8
   1f964:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f968:	e59f20a4 	ldr	r2, [pc, #164]	; 1fa14 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1f96c:	e59f1098 	ldr	r1, [pc, #152]	; 1fa0c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1f970:	e59f00a0 	ldr	r0, [pc, #160]	; 1fa18 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   1f974:	eb0011d2 	bl	240c4 <assertion_failed>
   1f978:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1f97c:	e3530000 	cmp	r3, #0
   1f980:	1a000014 	bne	1f9d8 <CTCPConnection::TimerHandler(unsigned int)+0x180>
   1f984:	e3a03001 	mov	r3, #1
   1f988:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   1f98c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f990:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1f994:	e3530000 	cmp	r3, #0
   1f998:	1a000012 	bne	1f9e8 <CTCPConnection::TimerHandler(unsigned int)+0x190>
   1f99c:	e3a03001 	mov	r3, #1
   1f9a0:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1f9a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f9a8:	e1a00004 	mov	r0, r4
   1f9ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f9b0:	e59f1064 	ldr	r1, [pc, #100]	; 1fa1c <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   1f9b4:	eafffbca 	b	1e8e4 <CTCPConnection::UnexpectedState(unsigned int)>
   1f9b8:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   1f9bc:	e3530000 	cmp	r3, #0
   1f9c0:	1a00000c 	bne	1f9f8 <CTCPConnection::TimerHandler(unsigned int)+0x1a0>
   1f9c4:	e3a03001 	mov	r3, #1
   1f9c8:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   1f9cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f9d0:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1f9d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f9d8:	e59f2040 	ldr	r2, [pc, #64]	; 1fa20 <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   1f9dc:	e59f1028 	ldr	r1, [pc, #40]	; 1fa0c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1f9e0:	e59f003c 	ldr	r0, [pc, #60]	; 1fa24 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   1f9e4:	eb0011b6 	bl	240c4 <assertion_failed>
   1f9e8:	e59f2038 	ldr	r2, [pc, #56]	; 1fa28 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   1f9ec:	e59f1018 	ldr	r1, [pc, #24]	; 1fa0c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1f9f0:	e59f0034 	ldr	r0, [pc, #52]	; 1fa2c <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   1f9f4:	eb0011b2 	bl	240c4 <assertion_failed>
   1f9f8:	e59f2030 	ldr	r2, [pc, #48]	; 1fa30 <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   1f9fc:	e59f1008 	ldr	r1, [pc, #8]	; 1fa0c <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1fa00:	e59f002c 	ldr	r0, [pc, #44]	; 1fa34 <CTCPConnection::TimerHandler(unsigned int)+0x1dc>
   1fa04:	eb0011ae 	bl	240c4 <assertion_failed>
   1fa08:	00000617 	.word	0x00000617
   1fa0c:	00045938 	.word	0x00045938
   1fa10:	000414b4 	.word	0x000414b4
   1fa14:	000005d9 	.word	0x000005d9
   1fa18:	0004597c 	.word	0x0004597c
   1fa1c:	000005f9 	.word	0x000005f9
   1fa20:	0000060b 	.word	0x0000060b
   1fa24:	000459c8 	.word	0x000459c8
   1fa28:	00000604 	.word	0x00000604
   1fa2c:	00045ad4 	.word	0x00045ad4
   1fa30:	000005fe 	.word	0x000005fe
   1fa34:	00045ac8 	.word	0x00045ac8

0001fa38 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   1fa38:	e2520000 	subs	r0, r2, #0
   1fa3c:	e92d4010 	push	{r4, lr}
   1fa40:	0a000003 	beq	1fa54 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   1fa44:	e3510002 	cmp	r1, #2
   1fa48:	8a000005 	bhi	1fa64 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   1fa4c:	e8bd4010 	pop	{r4, lr}
   1fa50:	eaffff80 	b	1f858 <CTCPConnection::TimerHandler(unsigned int)>
   1fa54:	e59f2018 	ldr	r2, [pc, #24]	; 1fa74 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   1fa58:	e59f1018 	ldr	r1, [pc, #24]	; 1fa78 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1fa5c:	e59f0018 	ldr	r0, [pc, #24]	; 1fa7c <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   1fa60:	eb001197 	bl	240c4 <assertion_failed>
   1fa64:	e59f2014 	ldr	r2, [pc, #20]	; 1fa80 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   1fa68:	e59f1008 	ldr	r1, [pc, #8]	; 1fa78 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1fa6c:	e59f0010 	ldr	r0, [pc, #16]	; 1fa84 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   1fa70:	eb001193 	bl	240c4 <assertion_failed>
   1fa74:	0000061f 	.word	0x0000061f
   1fa78:	00045938 	.word	0x00045938
   1fa7c:	000408c0 	.word	0x000408c0
   1fa80:	00000622 	.word	0x00000622
   1fa84:	0004597c 	.word	0x0004597c

0001fa88 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   1fa88:	e3a03000 	mov	r3, #0
   1fa8c:	e3510001 	cmp	r1, #1
   1fa90:	e92d4010 	push	{r4, lr}
   1fa94:	e880000a 	stm	r0, {r1, r3}
   1fa98:	e5803008 	str	r3, [r0, #8]
   1fa9c:	e580300c 	str	r3, [r0, #12]
   1faa0:	e5803010 	str	r3, [r0, #16]
   1faa4:	9a000005 	bls	1fac0 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   1faa8:	e1a04000 	mov	r4, r0
   1faac:	e1a00001 	mov	r0, r1
   1fab0:	eb002ba0 	bl	2a938 <operator new[](unsigned int)>
   1fab4:	e5840004 	str	r0, [r4, #4]
   1fab8:	e1a00004 	mov	r0, r4
   1fabc:	e8bd8010 	pop	{r4, pc}
   1fac0:	e3a0201e 	mov	r2, #30
   1fac4:	e59f1004 	ldr	r1, [pc, #4]	; 1fad0 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x48>
   1fac8:	e59f0004 	ldr	r0, [pc, #4]	; 1fad4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   1facc:	eb00117c 	bl	240c4 <assertion_failed>
   1fad0:	00045b60 	.word	0x00045b60
   1fad4:	00045b78 	.word	0x00045b78

0001fad8 <CRetransmissionQueue::~CRetransmissionQueue()>:
   1fad8:	e92d4010 	push	{r4, lr}
   1fadc:	e1a04000 	mov	r4, r0
   1fae0:	e3a01001 	mov	r1, #1
   1fae4:	e5900004 	ldr	r0, [r0, #4]
   1fae8:	eb002b9f 	bl	2a96c <operator delete(void*, unsigned int)>
   1faec:	e1a00004 	mov	r0, r4
   1faf0:	e8bd8010 	pop	{r4, pc}

0001faf4 <CRetransmissionQueue::IsEmpty() const>:
   1faf4:	e590200c 	ldr	r2, [r0, #12]
   1faf8:	e5900008 	ldr	r0, [r0, #8]
   1fafc:	e0420000 	sub	r0, r2, r0
   1fb00:	e16f0f10 	clz	r0, r0
   1fb04:	e1a002a0 	lsr	r0, r0, #5
   1fb08:	e12fff1e 	bx	lr

0001fb0c <CRetransmissionQueue::GetFreeSpace() const>:
   1fb0c:	e5903000 	ldr	r3, [r0]
   1fb10:	e92d4010 	push	{r4, lr}
   1fb14:	e3530001 	cmp	r3, #1
   1fb18:	9a00000b 	bls	1fb4c <CRetransmissionQueue::GetFreeSpace() const+0x40>
   1fb1c:	e5902008 	ldr	r2, [r0, #8]
   1fb20:	e1530002 	cmp	r3, r2
   1fb24:	9a00000c 	bls	1fb5c <CRetransmissionQueue::GetFreeSpace() const+0x50>
   1fb28:	e590000c 	ldr	r0, [r0, #12]
   1fb2c:	e1530000 	cmp	r3, r0
   1fb30:	9a00000d 	bls	1fb6c <CRetransmissionQueue::GetFreeSpace() const+0x60>
   1fb34:	e1520000 	cmp	r2, r0
   1fb38:	20833000 	addcs	r3, r3, r0
   1fb3c:	22433001 	subcs	r3, r3, #1
   1fb40:	32403001 	subcc	r3, r0, #1
   1fb44:	e0430002 	sub	r0, r3, r2
   1fb48:	e8bd8010 	pop	{r4, pc}
   1fb4c:	e3a02033 	mov	r2, #51	; 0x33
   1fb50:	e59f1024 	ldr	r1, [pc, #36]	; 1fb7c <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1fb54:	e59f0024 	ldr	r0, [pc, #36]	; 1fb80 <CRetransmissionQueue::GetFreeSpace() const+0x74>
   1fb58:	eb001159 	bl	240c4 <assertion_failed>
   1fb5c:	e3a02034 	mov	r2, #52	; 0x34
   1fb60:	e59f1014 	ldr	r1, [pc, #20]	; 1fb7c <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1fb64:	e59f0018 	ldr	r0, [pc, #24]	; 1fb84 <CRetransmissionQueue::GetFreeSpace() const+0x78>
   1fb68:	eb001155 	bl	240c4 <assertion_failed>
   1fb6c:	e3a02035 	mov	r2, #53	; 0x35
   1fb70:	e59f1004 	ldr	r1, [pc, #4]	; 1fb7c <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1fb74:	e59f000c 	ldr	r0, [pc, #12]	; 1fb88 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   1fb78:	eb001151 	bl	240c4 <assertion_failed>
   1fb7c:	00045b60 	.word	0x00045b60
   1fb80:	00045b78 	.word	0x00045b78
   1fb84:	00045b84 	.word	0x00045b84
   1fb88:	00045b98 	.word	0x00045b98

0001fb8c <CRetransmissionQueue::Write(void const*, unsigned int)>:
   1fb8c:	e92d4070 	push	{r4, r5, r6, lr}
   1fb90:	e2526000 	subs	r6, r2, #0
   1fb94:	0a000018 	beq	1fbfc <CRetransmissionQueue::Write(void const*, unsigned int)+0x70>
   1fb98:	e1a05001 	mov	r5, r1
   1fb9c:	e1a04000 	mov	r4, r0
   1fba0:	ebffffd9 	bl	1fb0c <CRetransmissionQueue::GetFreeSpace() const>
   1fba4:	e1560000 	cmp	r6, r0
   1fba8:	8a000017 	bhi	1fc0c <CRetransmissionQueue::Write(void const*, unsigned int)+0x80>
   1fbac:	e3550000 	cmp	r5, #0
   1fbb0:	0a000019 	beq	1fc1c <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   1fbb4:	e5943004 	ldr	r3, [r4, #4]
   1fbb8:	e3530000 	cmp	r3, #0
   1fbbc:	0a00001a 	beq	1fc2c <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   1fbc0:	e0856006 	add	r6, r5, r6
   1fbc4:	e5941008 	ldr	r1, [r4, #8]
   1fbc8:	ea000000 	b	1fbd0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   1fbcc:	e5943004 	ldr	r3, [r4, #4]
   1fbd0:	e2812001 	add	r2, r1, #1
   1fbd4:	e5842008 	str	r2, [r4, #8]
   1fbd8:	e4d52001 	ldrb	r2, [r5], #1
   1fbdc:	e7c32001 	strb	r2, [r3, r1]
   1fbe0:	e5940008 	ldr	r0, [r4, #8]
   1fbe4:	e5941000 	ldr	r1, [r4]
   1fbe8:	eb007fa9 	bl	3fa94 <__aeabi_uidivmod>
   1fbec:	e1560005 	cmp	r6, r5
   1fbf0:	e5841008 	str	r1, [r4, #8]
   1fbf4:	1afffff4 	bne	1fbcc <CRetransmissionQueue::Write(void const*, unsigned int)+0x40>
   1fbf8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fbfc:	e3a02041 	mov	r2, #65	; 0x41
   1fc00:	e59f1034 	ldr	r1, [pc, #52]	; 1fc3c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1fc04:	e59f0034 	ldr	r0, [pc, #52]	; 1fc40 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   1fc08:	eb00112d 	bl	240c4 <assertion_failed>
   1fc0c:	e3a02042 	mov	r2, #66	; 0x42
   1fc10:	e59f1024 	ldr	r1, [pc, #36]	; 1fc3c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1fc14:	e59f0028 	ldr	r0, [pc, #40]	; 1fc44 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   1fc18:	eb001129 	bl	240c4 <assertion_failed>
   1fc1c:	e3a02045 	mov	r2, #69	; 0x45
   1fc20:	e59f1014 	ldr	r1, [pc, #20]	; 1fc3c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1fc24:	e59f001c 	ldr	r0, [pc, #28]	; 1fc48 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   1fc28:	eb001125 	bl	240c4 <assertion_failed>
   1fc2c:	e3a02046 	mov	r2, #70	; 0x46
   1fc30:	e59f1004 	ldr	r1, [pc, #4]	; 1fc3c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1fc34:	e59f0010 	ldr	r0, [pc, #16]	; 1fc4c <CRetransmissionQueue::Write(void const*, unsigned int)+0xc0>
   1fc38:	eb001121 	bl	240c4 <assertion_failed>
   1fc3c:	00045b60 	.word	0x00045b60
   1fc40:	0004522c 	.word	0x0004522c
   1fc44:	00045bac 	.word	0x00045bac
   1fc48:	00045bc8 	.word	0x00045bc8
   1fc4c:	00043054 	.word	0x00043054

0001fc50 <CRetransmissionQueue::GetBytesAvailable() const>:
   1fc50:	e5903000 	ldr	r3, [r0]
   1fc54:	e92d4010 	push	{r4, lr}
   1fc58:	e3530001 	cmp	r3, #1
   1fc5c:	9a00000a 	bls	1fc8c <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   1fc60:	e5902008 	ldr	r2, [r0, #8]
   1fc64:	e1530002 	cmp	r3, r2
   1fc68:	9a00000b 	bls	1fc9c <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   1fc6c:	e5900010 	ldr	r0, [r0, #16]
   1fc70:	e1530000 	cmp	r3, r0
   1fc74:	9a00000c 	bls	1fcac <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   1fc78:	e1520000 	cmp	r2, r0
   1fc7c:	30833002 	addcc	r3, r3, r2
   1fc80:	30430000 	subcc	r0, r3, r0
   1fc84:	20420000 	subcs	r0, r2, r0
   1fc88:	e8bd8010 	pop	{r4, pc}
   1fc8c:	e3a02051 	mov	r2, #81	; 0x51
   1fc90:	e59f1024 	ldr	r1, [pc, #36]	; 1fcbc <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1fc94:	e59f0024 	ldr	r0, [pc, #36]	; 1fcc0 <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   1fc98:	eb001109 	bl	240c4 <assertion_failed>
   1fc9c:	e3a02052 	mov	r2, #82	; 0x52
   1fca0:	e59f1014 	ldr	r1, [pc, #20]	; 1fcbc <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1fca4:	e59f0018 	ldr	r0, [pc, #24]	; 1fcc4 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   1fca8:	eb001105 	bl	240c4 <assertion_failed>
   1fcac:	e3a02053 	mov	r2, #83	; 0x53
   1fcb0:	e59f1004 	ldr	r1, [pc, #4]	; 1fcbc <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1fcb4:	e59f000c 	ldr	r0, [pc, #12]	; 1fcc8 <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   1fcb8:	eb001101 	bl	240c4 <assertion_failed>
   1fcbc:	00045b60 	.word	0x00045b60
   1fcc0:	00045b78 	.word	0x00045b78
   1fcc4:	00045b84 	.word	0x00045b84
   1fcc8:	00045bd0 	.word	0x00045bd0

0001fccc <CRetransmissionQueue::Read(void*, unsigned int)>:
   1fccc:	e92d4070 	push	{r4, r5, r6, lr}
   1fcd0:	e2526000 	subs	r6, r2, #0
   1fcd4:	0a000018 	beq	1fd3c <CRetransmissionQueue::Read(void*, unsigned int)+0x70>
   1fcd8:	e1a05001 	mov	r5, r1
   1fcdc:	e1a04000 	mov	r4, r0
   1fce0:	ebffffda 	bl	1fc50 <CRetransmissionQueue::GetBytesAvailable() const>
   1fce4:	e1560000 	cmp	r6, r0
   1fce8:	8a000017 	bhi	1fd4c <CRetransmissionQueue::Read(void*, unsigned int)+0x80>
   1fcec:	e3550000 	cmp	r5, #0
   1fcf0:	0a000019 	beq	1fd5c <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   1fcf4:	e5943004 	ldr	r3, [r4, #4]
   1fcf8:	e3530000 	cmp	r3, #0
   1fcfc:	0a00001a 	beq	1fd6c <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   1fd00:	e0856006 	add	r6, r5, r6
   1fd04:	e5941010 	ldr	r1, [r4, #16]
   1fd08:	ea000000 	b	1fd10 <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   1fd0c:	e5943004 	ldr	r3, [r4, #4]
   1fd10:	e2812001 	add	r2, r1, #1
   1fd14:	e5842010 	str	r2, [r4, #16]
   1fd18:	e7d33001 	ldrb	r3, [r3, r1]
   1fd1c:	e4c53001 	strb	r3, [r5], #1
   1fd20:	e5940010 	ldr	r0, [r4, #16]
   1fd24:	e5941000 	ldr	r1, [r4]
   1fd28:	eb007f59 	bl	3fa94 <__aeabi_uidivmod>
   1fd2c:	e1560005 	cmp	r6, r5
   1fd30:	e5841010 	str	r1, [r4, #16]
   1fd34:	1afffff4 	bne	1fd0c <CRetransmissionQueue::Read(void*, unsigned int)+0x40>
   1fd38:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fd3c:	e3a0205f 	mov	r2, #95	; 0x5f
   1fd40:	e59f1034 	ldr	r1, [pc, #52]	; 1fd7c <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1fd44:	e59f0034 	ldr	r0, [pc, #52]	; 1fd80 <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   1fd48:	eb0010dd 	bl	240c4 <assertion_failed>
   1fd4c:	e3a02060 	mov	r2, #96	; 0x60
   1fd50:	e59f1024 	ldr	r1, [pc, #36]	; 1fd7c <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1fd54:	e59f0028 	ldr	r0, [pc, #40]	; 1fd84 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   1fd58:	eb0010d9 	bl	240c4 <assertion_failed>
   1fd5c:	e3a02063 	mov	r2, #99	; 0x63
   1fd60:	e59f1014 	ldr	r1, [pc, #20]	; 1fd7c <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1fd64:	e59f001c 	ldr	r0, [pc, #28]	; 1fd88 <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   1fd68:	eb0010d5 	bl	240c4 <assertion_failed>
   1fd6c:	e3a02064 	mov	r2, #100	; 0x64
   1fd70:	e59f1004 	ldr	r1, [pc, #4]	; 1fd7c <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1fd74:	e59f0010 	ldr	r0, [pc, #16]	; 1fd8c <CRetransmissionQueue::Read(void*, unsigned int)+0xc0>
   1fd78:	eb0010d1 	bl	240c4 <assertion_failed>
   1fd7c:	00045b60 	.word	0x00045b60
   1fd80:	0004522c 	.word	0x0004522c
   1fd84:	00045be8 	.word	0x00045be8
   1fd88:	00045bc8 	.word	0x00045bc8
   1fd8c:	00043054 	.word	0x00043054

0001fd90 <CRetransmissionQueue::Advance(unsigned int)>:
   1fd90:	e5903000 	ldr	r3, [r0]
   1fd94:	e92d4010 	push	{r4, lr}
   1fd98:	e3530001 	cmp	r3, #1
   1fd9c:	9a00000c 	bls	1fdd4 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   1fda0:	e590200c 	ldr	r2, [r0, #12]
   1fda4:	e1a04000 	mov	r4, r0
   1fda8:	e1530002 	cmp	r3, r2
   1fdac:	9a00000c 	bls	1fde4 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   1fdb0:	e1a00001 	mov	r0, r1
   1fdb4:	e5941010 	ldr	r1, [r4, #16]
   1fdb8:	e1530001 	cmp	r3, r1
   1fdbc:	9a00000c 	bls	1fdf4 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   1fdc0:	e1a01003 	mov	r1, r3
   1fdc4:	e0820000 	add	r0, r2, r0
   1fdc8:	eb007f31 	bl	3fa94 <__aeabi_uidivmod>
   1fdcc:	e584100c 	str	r1, [r4, #12]
   1fdd0:	e8bd8010 	pop	{r4, pc}
   1fdd4:	e3a0206f 	mov	r2, #111	; 0x6f
   1fdd8:	e59f1024 	ldr	r1, [pc, #36]	; 1fe04 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1fddc:	e59f0024 	ldr	r0, [pc, #36]	; 1fe08 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   1fde0:	eb0010b7 	bl	240c4 <assertion_failed>
   1fde4:	e3a02070 	mov	r2, #112	; 0x70
   1fde8:	e59f1014 	ldr	r1, [pc, #20]	; 1fe04 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1fdec:	e59f0018 	ldr	r0, [pc, #24]	; 1fe0c <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   1fdf0:	eb0010b3 	bl	240c4 <assertion_failed>
   1fdf4:	e3a02071 	mov	r2, #113	; 0x71
   1fdf8:	e59f1004 	ldr	r1, [pc, #4]	; 1fe04 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1fdfc:	e59f000c 	ldr	r0, [pc, #12]	; 1fe10 <CRetransmissionQueue::Advance(unsigned int)+0x80>
   1fe00:	eb0010af 	bl	240c4 <assertion_failed>
   1fe04:	00045b60 	.word	0x00045b60
   1fe08:	00045b78 	.word	0x00045b78
   1fe0c:	00045b98 	.word	0x00045b98
   1fe10:	00045bd0 	.word	0x00045bd0

0001fe14 <CRetransmissionQueue::Reset()>:
   1fe14:	e590300c 	ldr	r3, [r0, #12]
   1fe18:	e5803010 	str	r3, [r0, #16]
   1fe1c:	e12fff1e 	bx	lr

0001fe20 <CRetransmissionQueue::Flush()>:
   1fe20:	e3a03000 	mov	r3, #0
   1fe24:	e5803008 	str	r3, [r0, #8]
   1fe28:	e580300c 	str	r3, [r0, #12]
   1fe2c:	e5803010 	str	r3, [r0, #16]
   1fe30:	e12fff1e 	bx	lr

0001fe34 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   1fe34:	e92d4010 	push	{r4, lr}
   1fe38:	e1a04000 	mov	r4, r0
   1fe3c:	eb00265f 	bl	297c0 <CTimer::Get()>
   1fe40:	e3a03000 	mov	r3, #0
   1fe44:	e3a02001 	mov	r2, #1
   1fe48:	e3a01f4b 	mov	r1, #300	; 0x12c
   1fe4c:	e1500003 	cmp	r0, r3
   1fe50:	e5840000 	str	r0, [r4]
   1fe54:	e5841008 	str	r1, [r4, #8]
   1fe58:	e5843004 	str	r3, [r4, #4]
   1fe5c:	e5c43018 	strb	r3, [r4, #24]
   1fe60:	e5843020 	str	r3, [r4, #32]
   1fe64:	e5c4200c 	strb	r2, [r4, #12]
   1fe68:	e5842024 	str	r2, [r4, #36]	; 0x24
   1fe6c:	0a000001 	beq	1fe78 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   1fe70:	e1a00004 	mov	r0, r4
   1fe74:	e8bd8010 	pop	{r4, pc}
   1fe78:	e3a02033 	mov	r2, #51	; 0x33
   1fe7c:	e59f1004 	ldr	r1, [pc, #4]	; 1fe88 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   1fe80:	e59f0004 	ldr	r0, [pc, #4]	; 1fe8c <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   1fe84:	eb00108e 	bl	240c4 <assertion_failed>
   1fe88:	00045c08 	.word	0x00045c08
   1fe8c:	00040910 	.word	0x00040910

0001fe90 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   1fe90:	e12fff1e 	bx	lr

0001fe94 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   1fe94:	e5900008 	ldr	r0, [r0, #8]
   1fe98:	e12fff1e 	bx	lr

0001fe9c <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   1fe9c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fea0:	e3530000 	cmp	r3, #0
   1fea4:	1a000007 	bne	1fec8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   1fea8:	e3a0cf4b 	mov	ip, #300	; 0x12c
   1feac:	e3a02001 	mov	r2, #1
   1feb0:	e5801004 	str	r1, [r0, #4]
   1feb4:	e5c03018 	strb	r3, [r0, #24]
   1feb8:	e5803020 	str	r3, [r0, #32]
   1febc:	e580c008 	str	ip, [r0, #8]
   1fec0:	e5c0200c 	strb	r2, [r0, #12]
   1fec4:	e12fff1e 	bx	lr
   1fec8:	e92d4070 	push	{r4, r5, r6, lr}
   1fecc:	e1a04000 	mov	r4, r0
   1fed0:	e1a00003 	mov	r0, r3
   1fed4:	e1a05001 	mov	r5, r1
   1fed8:	eb002dc7 	bl	2b5fc <EnterCritical>
   1fedc:	e3a03000 	mov	r3, #0
   1fee0:	e3a01f4b 	mov	r1, #300	; 0x12c
   1fee4:	e3a02001 	mov	r2, #1
   1fee8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1feec:	e5845004 	str	r5, [r4, #4]
   1fef0:	e1500003 	cmp	r0, r3
   1fef4:	e5841008 	str	r1, [r4, #8]
   1fef8:	e5c4200c 	strb	r2, [r4, #12]
   1fefc:	e5c43018 	strb	r3, [r4, #24]
   1ff00:	e5843020 	str	r3, [r4, #32]
   1ff04:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ff08:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ff0c:	ea002de5 	b	2b6a8 <LeaveCritical>

0001ff10 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   1ff10:	e92d4010 	push	{r4, lr}
   1ff14:	e1a04000 	mov	r4, r0
   1ff18:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1ff1c:	e3500000 	cmp	r0, #0
   1ff20:	1a000012 	bne	1ff70 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   1ff24:	e5d43018 	ldrb	r3, [r4, #24]
   1ff28:	e3530000 	cmp	r3, #0
   1ff2c:	1a00000e 	bne	1ff6c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   1ff30:	e5943020 	ldr	r3, [r4, #32]
   1ff34:	e3530000 	cmp	r3, #0
   1ff38:	1a000006 	bne	1ff58 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1ff3c:	e3a03001 	mov	r3, #1
   1ff40:	e5940000 	ldr	r0, [r4]
   1ff44:	e5c43018 	strb	r3, [r4, #24]
   1ff48:	e3500000 	cmp	r0, #0
   1ff4c:	0a00000f 	beq	1ff90 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   1ff50:	eb002364 	bl	28ce8 <CTimer::GetTicks() const>
   1ff54:	e584001c 	str	r0, [r4, #28]
   1ff58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ff5c:	e3530000 	cmp	r3, #0
   1ff60:	08bd8010 	popeq	{r4, pc}
   1ff64:	e8bd4010 	pop	{r4, lr}
   1ff68:	ea002dce 	b	2b6a8 <LeaveCritical>
   1ff6c:	e8bd8010 	pop	{r4, pc}
   1ff70:	eb002da1 	bl	2b5fc <EnterCritical>
   1ff74:	e5d43018 	ldrb	r3, [r4, #24]
   1ff78:	e3530000 	cmp	r3, #0
   1ff7c:	1afffff5 	bne	1ff58 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1ff80:	e5943020 	ldr	r3, [r4, #32]
   1ff84:	e3530000 	cmp	r3, #0
   1ff88:	1afffff2 	bne	1ff58 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1ff8c:	eaffffea 	b	1ff3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   1ff90:	e3a0205f 	mov	r2, #95	; 0x5f
   1ff94:	e59f1004 	ldr	r1, [pc, #4]	; 1ffa0 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   1ff98:	e59f0004 	ldr	r0, [pc, #4]	; 1ffa4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x94>
   1ff9c:	eb001048 	bl	240c4 <assertion_failed>
   1ffa0:	00045c08 	.word	0x00045c08
   1ffa4:	00040910 	.word	0x00040910

0001ffa8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   1ffa8:	e92d4010 	push	{r4, lr}
   1ffac:	e1a04000 	mov	r4, r0
   1ffb0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1ffb4:	e3500000 	cmp	r0, #0
   1ffb8:	1a000011 	bne	20004 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   1ffbc:	e5943008 	ldr	r3, [r4, #8]
   1ffc0:	e59f2048 	ldr	r2, [pc, #72]	; 20010 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   1ffc4:	e1a03083 	lsl	r3, r3, #1
   1ffc8:	e1530002 	cmp	r3, r2
   1ffcc:	21a03002 	movcs	r3, r2
   1ffd0:	e5942020 	ldr	r2, [r4, #32]
   1ffd4:	e5843008 	str	r3, [r4, #8]
   1ffd8:	e2823001 	add	r3, r2, #1
   1ffdc:	e3530002 	cmp	r3, #2
   1ffe0:	e5843020 	str	r3, [r4, #32]
   1ffe4:	83a03001 	movhi	r3, #1
   1ffe8:	85c4300c 	strbhi	r3, [r4, #12]
   1ffec:	e3a03000 	mov	r3, #0
   1fff0:	e1500003 	cmp	r0, r3
   1fff4:	e5c43018 	strb	r3, [r4, #24]
   1fff8:	08bd8010 	popeq	{r4, pc}
   1fffc:	e8bd4010 	pop	{r4, lr}
   20000:	ea002da8 	b	2b6a8 <LeaveCritical>
   20004:	eb002d7c 	bl	2b5fc <EnterCritical>
   20008:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2000c:	eaffffea 	b	1ffbc <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   20010:	00002ee0 	.word	0x00002ee0

00020014 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   20014:	e5d0300c 	ldrb	r3, [r0, #12]
   20018:	e3530000 	cmp	r3, #0
   2001c:	0a00000e 	beq	2005c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   20020:	e3a02000 	mov	r2, #0
   20024:	e1a030a1 	lsr	r3, r1, #1
   20028:	e5801010 	str	r1, [r0, #16]
   2002c:	e5c0200c 	strb	r2, [r0, #12]
   20030:	e5803014 	str	r3, [r0, #20]
   20034:	e1b03103 	lsls	r3, r3, #2
   20038:	03a03001 	moveq	r3, #1
   2003c:	e0833001 	add	r3, r3, r1
   20040:	e3530063 	cmp	r3, #99	; 0x63
   20044:	9a000012 	bls	20094 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   20048:	e59f1050 	ldr	r1, [pc, #80]	; 200a0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   2004c:	e1530001 	cmp	r3, r1
   20050:	21a03001 	movcs	r3, r1
   20054:	e5803008 	str	r3, [r0, #8]
   20058:	e12fff1e 	bx	lr
   2005c:	e5903010 	ldr	r3, [r0, #16]
   20060:	e5902014 	ldr	r2, [r0, #20]
   20064:	e043c001 	sub	ip, r3, r1
   20068:	e35c0000 	cmp	ip, #0
   2006c:	b26cc000 	rsblt	ip, ip, #0
   20070:	e0633183 	rsb	r3, r3, r3, lsl #3
   20074:	e0822082 	add	r2, r2, r2, lsl #1
   20078:	e0833001 	add	r3, r3, r1
   2007c:	e082200c 	add	r2, r2, ip
   20080:	e1a011a3 	lsr	r1, r3, #3
   20084:	e1a03122 	lsr	r3, r2, #2
   20088:	e5801010 	str	r1, [r0, #16]
   2008c:	e5803014 	str	r3, [r0, #20]
   20090:	eaffffe7 	b	20034 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   20094:	e3a03064 	mov	r3, #100	; 0x64
   20098:	e5803008 	str	r3, [r0, #8]
   2009c:	e12fff1e 	bx	lr
   200a0:	00002ee0 	.word	0x00002ee0

000200a4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   200a4:	e92d4010 	push	{r4, lr}
   200a8:	e1a04000 	mov	r4, r0
   200ac:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   200b0:	e3500000 	cmp	r0, #0
   200b4:	1a000015 	bne	20110 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   200b8:	e5d43018 	ldrb	r3, [r4, #24]
   200bc:	e3530000 	cmp	r3, #0
   200c0:	0a00000a 	beq	200f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   200c4:	e5943020 	ldr	r3, [r4, #32]
   200c8:	e3530000 	cmp	r3, #0
   200cc:	1a000007 	bne	200f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   200d0:	e5940000 	ldr	r0, [r4]
   200d4:	e3500000 	cmp	r0, #0
   200d8:	0a00000e 	beq	20118 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   200dc:	eb002301 	bl	28ce8 <CTimer::GetTicks() const>
   200e0:	e594101c 	ldr	r1, [r4, #28]
   200e4:	e0401001 	sub	r1, r0, r1
   200e8:	e1a00004 	mov	r0, r4
   200ec:	ebffffc8 	bl	20014 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   200f0:	e3a03000 	mov	r3, #0
   200f4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   200f8:	e5c43018 	strb	r3, [r4, #24]
   200fc:	e1520003 	cmp	r2, r3
   20100:	e5843020 	str	r3, [r4, #32]
   20104:	08bd8010 	popeq	{r4, pc}
   20108:	e8bd4010 	pop	{r4, lr}
   2010c:	ea002d65 	b	2b6a8 <LeaveCritical>
   20110:	eb002d39 	bl	2b5fc <EnterCritical>
   20114:	eaffffe7 	b	200b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   20118:	e3a02074 	mov	r2, #116	; 0x74
   2011c:	e59f1004 	ldr	r1, [pc, #4]	; 20128 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x84>
   20120:	e59f0004 	ldr	r0, [pc, #4]	; 2012c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   20124:	eb000fe6 	bl	240c4 <assertion_failed>
   20128:	00045c08 	.word	0x00045c08
   2012c:	00040910 	.word	0x00040910

00020130 <CTCPRejector::~CTCPRejector()>:
   20130:	e92d4010 	push	{r4, lr}
   20134:	e1a04000 	mov	r4, r0
   20138:	e59f300c 	ldr	r3, [pc, #12]	; 2014c <CTCPRejector::~CTCPRejector()+0x1c>
   2013c:	e5803000 	str	r3, [r0]
   20140:	ebfff31a 	bl	1cdb0 <CNetConnection::~CNetConnection()>
   20144:	e1a00004 	mov	r0, r4
   20148:	e8bd8010 	pop	{r4, pc}
   2014c:	00045c28 	.word	0x00045c28

00020150 <CTCPRejector::~CTCPRejector()>:
   20150:	e92d4010 	push	{r4, lr}
   20154:	e1a04000 	mov	r4, r0
   20158:	e59f3018 	ldr	r3, [pc, #24]	; 20178 <CTCPRejector::~CTCPRejector()+0x28>
   2015c:	e5803000 	str	r3, [r0]
   20160:	ebfff312 	bl	1cdb0 <CNetConnection::~CNetConnection()>
   20164:	e1a00004 	mov	r0, r4
   20168:	e3a0102c 	mov	r1, #44	; 0x2c
   2016c:	eb0029fe 	bl	2a96c <operator delete(void*, unsigned int)>
   20170:	e1a00004 	mov	r0, r4
   20174:	e8bd8010 	pop	{r4, pc}
   20178:	00045c28 	.word	0x00045c28

0002017c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   2017c:	e3a03006 	mov	r3, #6
   20180:	e92d4010 	push	{r4, lr}
   20184:	e1a04000 	mov	r4, r0
   20188:	e24dd008 	sub	sp, sp, #8
   2018c:	e58d3000 	str	r3, [sp]
   20190:	e3a03000 	mov	r3, #0
   20194:	ebfff2df 	bl	1cd18 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   20198:	e1a00004 	mov	r0, r4
   2019c:	e59f3008 	ldr	r3, [pc, #8]	; 201ac <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   201a0:	e5843000 	str	r3, [r4]
   201a4:	e28dd008 	add	sp, sp, #8
   201a8:	e8bd8010 	pop	{r4, pc}
   201ac:	00045c28 	.word	0x00045c28

000201b0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   201b0:	e92d4010 	push	{r4, lr}
   201b4:	e3110c02 	tst	r1, #512	; 0x200
   201b8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   201bc:	e24dd008 	sub	sp, sp, #8
   201c0:	1a000024 	bne	20258 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa8>
   201c4:	e211ea01 	ands	lr, r1, #4096	; 0x1000
   201c8:	e1a04000 	mov	r4, r0
   201cc:	01a0300e 	moveq	r3, lr
   201d0:	e3a0e000 	mov	lr, #0
   201d4:	e1d0c1b6 	ldrh	ip, [r0, #22]
   201d8:	e1d001b4 	ldrh	r0, [r0, #20]
   201dc:	e6bf2f32 	rev	r2, r2
   201e0:	e6bfcfbc 	rev16	ip, ip
   201e4:	e6bf0fb0 	rev16	r0, r0
   201e8:	16bf3f33 	revne	r3, r3
   201ec:	e58d200c 	str	r2, [sp, #12]
   201f0:	e1cdc0b8 	strh	ip, [sp, #8]
   201f4:	e1cd00ba 	strh	r0, [sp, #10]
   201f8:	e381c050 	orr	ip, r1, #80	; 0x50
   201fc:	e3a02014 	mov	r2, #20
   20200:	e28d1008 	add	r1, sp, #8
   20204:	e284001c 	add	r0, r4, #28
   20208:	e58d3010 	str	r3, [sp, #16]
   2020c:	e1cdc1b4 	strh	ip, [sp, #20]
   20210:	e1cde1b6 	strh	lr, [sp, #22]
   20214:	e1cde1ba 	strh	lr, [sp, #26]
   20218:	e1cde1b8 	strh	lr, [sp, #24]
   2021c:	eb000370 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20220:	e5943008 	ldr	r3, [r4, #8]
   20224:	e1cd01b8 	strh	r0, [sp, #24]
   20228:	e3530000 	cmp	r3, #0
   2022c:	0a00000d 	beq	20268 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   20230:	e3a0c006 	mov	ip, #6
   20234:	e28d2008 	add	r2, sp, #8
   20238:	e284100c 	add	r1, r4, #12
   2023c:	e1a00003 	mov	r0, r3
   20240:	e58dc000 	str	ip, [sp]
   20244:	e3a03014 	mov	r3, #20
   20248:	ebffe8d3 	bl	1a59c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   2024c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   20250:	e28dd008 	add	sp, sp, #8
   20254:	e8bd8010 	pop	{r4, pc}
   20258:	e3a020a1 	mov	r2, #161	; 0xa1
   2025c:	e59f1014 	ldr	r1, [pc, #20]	; 20278 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   20260:	e59f0014 	ldr	r0, [pc, #20]	; 2027c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xcc>
   20264:	eb000f96 	bl	240c4 <assertion_failed>
   20268:	e3a020c7 	mov	r2, #199	; 0xc7
   2026c:	e59f1004 	ldr	r1, [pc, #4]	; 20278 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   20270:	e59f0008 	ldr	r0, [pc, #8]	; 20280 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xd0>
   20274:	eb000f92 	bl	240c4 <assertion_failed>
   20278:	00045c64 	.word	0x00045c64
   2027c:	00045c74 	.word	0x00045c74
   20280:	000451b8 	.word	0x000451b8

00020284 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   20284:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20288:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   2028c:	e35c0006 	cmp	ip, #6
   20290:	0a000001 	beq	2029c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   20294:	e3a00000 	mov	r0, #0
   20298:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2029c:	e3520013 	cmp	r2, #19
   202a0:	9a00005a 	bls	20410 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   202a4:	e3510000 	cmp	r1, #0
   202a8:	e1a06003 	mov	r6, r3
   202ac:	e1a07002 	mov	r7, r2
   202b0:	e1a04001 	mov	r4, r1
   202b4:	e1a05000 	mov	r5, r0
   202b8:	0a00004c 	beq	203f0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x16c>
   202bc:	e5d43003 	ldrb	r3, [r4, #3]
   202c0:	e5d11002 	ldrb	r1, [r1, #2]
   202c4:	e1811403 	orr	r1, r1, r3, lsl #8
   202c8:	e6bf1fb1 	rev16	r1, r1
   202cc:	e6ff3071 	uxth	r3, r1
   202d0:	e3530000 	cmp	r3, #0
   202d4:	e1c011b6 	strh	r1, [r0, #22]
   202d8:	0a00004c 	beq	20410 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   202dc:	e5900004 	ldr	r0, [r0, #4]
   202e0:	e3500000 	cmp	r0, #0
   202e4:	0a000045 	beq	20400 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   202e8:	eb00007c 	bl	204e0 <CNetConfig::GetIPAddress() const>
   202ec:	eb0001b6 	bl	209cc <CIPAddress::IsNull() const>
   202f0:	e3500000 	cmp	r0, #0
   202f4:	1affffe6 	bne	20294 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   202f8:	e5950004 	ldr	r0, [r5, #4]
   202fc:	eb000077 	bl	204e0 <CNetConfig::GetIPAddress() const>
   20300:	e285801c 	add	r8, r5, #28
   20304:	e1a01000 	mov	r1, r0
   20308:	e1a00008 	mov	r0, r8
   2030c:	eb000304 	bl	20f24 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   20310:	e1a01006 	mov	r1, r6
   20314:	e1a00008 	mov	r0, r8
   20318:	eb000305 	bl	20f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   2031c:	e1a02007 	mov	r2, r7
   20320:	e1a01004 	mov	r1, r4
   20324:	e1a00008 	mov	r0, r8
   20328:	eb00032d 	bl	20fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   2032c:	e3500000 	cmp	r0, #0
   20330:	1affffd7 	bne	20294 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   20334:	e5d40005 	ldrb	r0, [r4, #5]
   20338:	e5d49004 	ldrb	r9, [r4, #4]
   2033c:	e5d43009 	ldrb	r3, [r4, #9]
   20340:	e5d41008 	ldrb	r1, [r4, #8]
   20344:	e1899400 	orr	r9, r9, r0, lsl #8
   20348:	e5d4000a 	ldrb	r0, [r4, #10]
   2034c:	e1811403 	orr	r1, r1, r3, lsl #8
   20350:	e5d4a00d 	ldrb	sl, [r4, #13]
   20354:	e5d4300c 	ldrb	r3, [r4, #12]
   20358:	e5d42006 	ldrb	r2, [r4, #6]
   2035c:	e1811800 	orr	r1, r1, r0, lsl #16
   20360:	e5d4000b 	ldrb	r0, [r4, #11]
   20364:	e183a40a 	orr	sl, r3, sl, lsl #8
   20368:	e1a03223 	lsr	r3, r3, #4
   2036c:	e0477103 	sub	r7, r7, r3, lsl #2
   20370:	e1811c00 	orr	r1, r1, r0, lsl #24
   20374:	e1899802 	orr	r9, r9, r2, lsl #16
   20378:	e31a0c02 	tst	sl, #512	; 0x200
   2037c:	e5d42007 	ldrb	r2, [r4, #7]
   20380:	12877001 	addne	r7, r7, #1
   20384:	e6bf8f31 	rev	r8, r1
   20388:	e31a0c01 	tst	sl, #256	; 0x100
   2038c:	e1a01006 	mov	r1, r6
   20390:	e285000c 	add	r0, r5, #12
   20394:	e1899c02 	orr	r9, r9, r2, lsl #24
   20398:	12877001 	addne	r7, r7, #1
   2039c:	eb000147 	bl	208c0 <CIPAddress::Set(CIPAddress const&)>
   203a0:	e5d42000 	ldrb	r2, [r4]
   203a4:	e5d41001 	ldrb	r1, [r4, #1]
   203a8:	e21a3b01 	ands	r3, sl, #1024	; 0x400
   203ac:	e1822401 	orr	r2, r2, r1, lsl #8
   203b0:	e6bf2fb2 	rev16	r2, r2
   203b4:	e6bf9f39 	rev	r9, r9
   203b8:	e1c521b4 	strh	r2, [r5, #20]
   203bc:	1a000009 	bne	203e8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   203c0:	e21a2a01 	ands	r2, sl, #4096	; 0x1000
   203c4:	00893007 	addeq	r3, r9, r7
   203c8:	01a00005 	moveq	r0, r5
   203cc:	03a01b05 	moveq	r1, #5120	; 0x1400
   203d0:	11a02008 	movne	r2, r8
   203d4:	11a00005 	movne	r0, r5
   203d8:	13a01b01 	movne	r1, #1024	; 0x400
   203dc:	ebffff73 	bl	201b0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   203e0:	e3a00001 	mov	r0, #1
   203e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   203e8:	e3a00001 	mov	r0, #1
   203ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   203f0:	e3a02052 	mov	r2, #82	; 0x52
   203f4:	e59f101c 	ldr	r1, [pc, #28]	; 20418 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   203f8:	e59f001c 	ldr	r0, [pc, #28]	; 2041c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   203fc:	eb000f30 	bl	240c4 <assertion_failed>
   20400:	e3a0205b 	mov	r2, #91	; 0x5b
   20404:	e59f100c 	ldr	r1, [pc, #12]	; 20418 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   20408:	e59f0010 	ldr	r0, [pc, #16]	; 20420 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   2040c:	eb000f2c 	bl	240c4 <assertion_failed>
   20410:	e3e00000 	mvn	r0, #0
   20414:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20418:	00045c64 	.word	0x00045c64
   2041c:	0004529c 	.word	0x0004529c
   20420:	000451a4 	.word	0x000451a4

00020424 <CTCPRejector::Connect()>:
   20424:	e3e00000 	mvn	r0, #0
   20428:	e12fff1e 	bx	lr

0002042c <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   2042c:	e3e00000 	mvn	r0, #0
   20430:	e12fff1e 	bx	lr

00020434 <CTCPRejector::Close()>:
   20434:	e3e00000 	mvn	r0, #0
   20438:	e12fff1e 	bx	lr

0002043c <CTCPRejector::Send(void const*, unsigned int, int)>:
   2043c:	e3e00000 	mvn	r0, #0
   20440:	e12fff1e 	bx	lr

00020444 <CTCPRejector::Receive(void*, int)>:
   20444:	e3e00000 	mvn	r0, #0
   20448:	e12fff1e 	bx	lr

0002044c <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   2044c:	e3e00000 	mvn	r0, #0
   20450:	e12fff1e 	bx	lr

00020454 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   20454:	e3e00000 	mvn	r0, #0
   20458:	e12fff1e 	bx	lr

0002045c <CTCPRejector::SetOptionBroadcast(bool)>:
   2045c:	e3e00000 	mvn	r0, #0
   20460:	e12fff1e 	bx	lr

00020464 <CTCPRejector::IsConnected() const>:
   20464:	e3a00000 	mov	r0, #0
   20468:	e12fff1e 	bx	lr

0002046c <CTCPRejector::IsTerminated() const>:
   2046c:	e3a00000 	mov	r0, #0
   20470:	e12fff1e 	bx	lr

00020474 <CTCPRejector::Process()>:
   20474:	e12fff1e 	bx	lr

00020478 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   20478:	e3a00000 	mov	r0, #0
   2047c:	e12fff1e 	bx	lr

00020480 <CNetConfig::~CNetConfig()>:
   20480:	e92d4010 	push	{r4, lr}
   20484:	e1a04000 	mov	r4, r0
   20488:	e2800024 	add	r0, r0, #36	; 0x24
   2048c:	eb000085 	bl	206a8 <CIPAddress::~CIPAddress()>
   20490:	e284001c 	add	r0, r4, #28
   20494:	eb000083 	bl	206a8 <CIPAddress::~CIPAddress()>
   20498:	e2840014 	add	r0, r4, #20
   2049c:	eb000081 	bl	206a8 <CIPAddress::~CIPAddress()>
   204a0:	e284000c 	add	r0, r4, #12
   204a4:	eb00007f 	bl	206a8 <CIPAddress::~CIPAddress()>
   204a8:	e2840004 	add	r0, r4, #4
   204ac:	eb00007d 	bl	206a8 <CIPAddress::~CIPAddress()>
   204b0:	e1a00004 	mov	r0, r4
   204b4:	e8bd8010 	pop	{r4, pc}

000204b8 <CNetConfig::SetDHCP(bool)>:
   204b8:	e5c01000 	strb	r1, [r0]
   204bc:	e12fff1e 	bx	lr

000204c0 <CNetConfig::SetDefaultGateway(unsigned int)>:
   204c0:	e2800014 	add	r0, r0, #20
   204c4:	ea0000e4 	b	2085c <CIPAddress::Set(unsigned int)>

000204c8 <CNetConfig::SetDNSServer(unsigned int)>:
   204c8:	e280001c 	add	r0, r0, #28
   204cc:	ea0000e2 	b	2085c <CIPAddress::Set(unsigned int)>

000204d0 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   204d0:	e2800014 	add	r0, r0, #20
   204d4:	ea0000e4 	b	2086c <CIPAddress::Set(unsigned char const*)>

000204d8 <CNetConfig::SetDNSServer(unsigned char const*)>:
   204d8:	e280001c 	add	r0, r0, #28
   204dc:	ea0000e2 	b	2086c <CIPAddress::Set(unsigned char const*)>

000204e0 <CNetConfig::GetIPAddress() const>:
   204e0:	e2800004 	add	r0, r0, #4
   204e4:	e12fff1e 	bx	lr

000204e8 <CNetConfig::IsDHCPUsed() const>:
   204e8:	e5d00000 	ldrb	r0, [r0]
   204ec:	e12fff1e 	bx	lr

000204f0 <CNetConfig::GetNetMask() const>:
   204f0:	e280000c 	add	r0, r0, #12
   204f4:	ea000111 	b	20940 <CIPAddress::Get() const>

000204f8 <CNetConfig::GetDefaultGateway() const>:
   204f8:	e2800014 	add	r0, r0, #20
   204fc:	e12fff1e 	bx	lr

00020500 <CNetConfig::GetDNSServer() const>:
   20500:	e280001c 	add	r0, r0, #28
   20504:	e12fff1e 	bx	lr

00020508 <CNetConfig::GetBroadcastAddress() const>:
   20508:	e2800024 	add	r0, r0, #36	; 0x24
   2050c:	e12fff1e 	bx	lr

00020510 <CNetConfig::UpdateBroadcastAddress()>:
   20510:	e92d4010 	push	{r4, lr}
   20514:	e1a04000 	mov	r4, r0
   20518:	e24dd008 	sub	sp, sp, #8
   2051c:	e1a0100d 	mov	r1, sp
   20520:	e2800004 	add	r0, r0, #4
   20524:	eb000111 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20528:	e284000c 	add	r0, r4, #12
   2052c:	e28d1004 	add	r1, sp, #4
   20530:	eb00010e 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20534:	e89d000a 	ldm	sp, {r1, r3}
   20538:	e1e03003 	mvn	r3, r3
   2053c:	e2840024 	add	r0, r4, #36	; 0x24
   20540:	e1831001 	orr	r1, r3, r1
   20544:	eb0000c4 	bl	2085c <CIPAddress::Set(unsigned int)>
   20548:	e28dd008 	add	sp, sp, #8
   2054c:	e8bd8010 	pop	{r4, pc}

00020550 <CNetConfig::Reset()>:
   20550:	e92d4070 	push	{r4, r5, r6, lr}
   20554:	e1a04000 	mov	r4, r0
   20558:	e59f5038 	ldr	r5, [pc, #56]	; 20598 <CNetConfig::Reset()+0x48>
   2055c:	e2800004 	add	r0, r0, #4
   20560:	e1a01005 	mov	r1, r5
   20564:	eb0000c0 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   20568:	e1a01005 	mov	r1, r5
   2056c:	e284000c 	add	r0, r4, #12
   20570:	eb0000bd 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   20574:	e1a01005 	mov	r1, r5
   20578:	e2840014 	add	r0, r4, #20
   2057c:	eb0000ba 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   20580:	e284001c 	add	r0, r4, #28
   20584:	e1a01005 	mov	r1, r5
   20588:	eb0000b7 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   2058c:	e1a00004 	mov	r0, r4
   20590:	e8bd4070 	pop	{r4, r5, r6, lr}
   20594:	eaffffdd 	b	20510 <CNetConfig::UpdateBroadcastAddress()>
   20598:	00045c90 	.word	0x00045c90

0002059c <CNetConfig::CNetConfig()>:
   2059c:	e3a03001 	mov	r3, #1
   205a0:	e92d4010 	push	{r4, lr}
   205a4:	e1a04000 	mov	r4, r0
   205a8:	e4c03004 	strb	r3, [r0], #4
   205ac:	eb000027 	bl	20650 <CIPAddress::CIPAddress()>
   205b0:	e284000c 	add	r0, r4, #12
   205b4:	eb000025 	bl	20650 <CIPAddress::CIPAddress()>
   205b8:	e2840014 	add	r0, r4, #20
   205bc:	eb000023 	bl	20650 <CIPAddress::CIPAddress()>
   205c0:	e284001c 	add	r0, r4, #28
   205c4:	eb000021 	bl	20650 <CIPAddress::CIPAddress()>
   205c8:	e2840024 	add	r0, r4, #36	; 0x24
   205cc:	eb00001f 	bl	20650 <CIPAddress::CIPAddress()>
   205d0:	e1a00004 	mov	r0, r4
   205d4:	ebffffdd 	bl	20550 <CNetConfig::Reset()>
   205d8:	e1a00004 	mov	r0, r4
   205dc:	e8bd8010 	pop	{r4, pc}

000205e0 <CNetConfig::SetIPAddress(unsigned int)>:
   205e0:	e92d4010 	push	{r4, lr}
   205e4:	e1a04000 	mov	r4, r0
   205e8:	e2800004 	add	r0, r0, #4
   205ec:	eb00009a 	bl	2085c <CIPAddress::Set(unsigned int)>
   205f0:	e1a00004 	mov	r0, r4
   205f4:	e8bd4010 	pop	{r4, lr}
   205f8:	eaffffc4 	b	20510 <CNetConfig::UpdateBroadcastAddress()>

000205fc <CNetConfig::SetNetMask(unsigned int)>:
   205fc:	e92d4010 	push	{r4, lr}
   20600:	e1a04000 	mov	r4, r0
   20604:	e280000c 	add	r0, r0, #12
   20608:	eb000093 	bl	2085c <CIPAddress::Set(unsigned int)>
   2060c:	e1a00004 	mov	r0, r4
   20610:	e8bd4010 	pop	{r4, lr}
   20614:	eaffffbd 	b	20510 <CNetConfig::UpdateBroadcastAddress()>

00020618 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20618:	e92d4010 	push	{r4, lr}
   2061c:	e1a04000 	mov	r4, r0
   20620:	e2800004 	add	r0, r0, #4
   20624:	eb000090 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   20628:	e1a00004 	mov	r0, r4
   2062c:	e8bd4010 	pop	{r4, lr}
   20630:	eaffffb6 	b	20510 <CNetConfig::UpdateBroadcastAddress()>

00020634 <CNetConfig::SetNetMask(unsigned char const*)>:
   20634:	e92d4010 	push	{r4, lr}
   20638:	e1a04000 	mov	r4, r0
   2063c:	e280000c 	add	r0, r0, #12
   20640:	eb000089 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   20644:	e1a00004 	mov	r0, r4
   20648:	e8bd4010 	pop	{r4, lr}
   2064c:	eaffffaf 	b	20510 <CNetConfig::UpdateBroadcastAddress()>

00020650 <CIPAddress::CIPAddress()>:
   20650:	e3a02000 	mov	r2, #0
   20654:	e5c02000 	strb	r2, [r0]
   20658:	e12fff1e 	bx	lr

0002065c <CIPAddress::CIPAddress(unsigned int)>:
   2065c:	e3a02001 	mov	r2, #1
   20660:	e5801004 	str	r1, [r0, #4]
   20664:	e5c02000 	strb	r2, [r0]
   20668:	e12fff1e 	bx	lr

0002066c <CIPAddress::CIPAddress(CIPAddress const&)>:
   2066c:	e5d12000 	ldrb	r2, [r1]
   20670:	e3520000 	cmp	r2, #0
   20674:	0a000004 	beq	2068c <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20678:	e3a0c001 	mov	ip, #1
   2067c:	e5912004 	ldr	r2, [r1, #4]
   20680:	e5c0c000 	strb	ip, [r0]
   20684:	e5802004 	str	r2, [r0, #4]
   20688:	e12fff1e 	bx	lr
   2068c:	e92d4010 	push	{r4, lr}
   20690:	e3a0202e 	mov	r2, #46	; 0x2e
   20694:	e59f1004 	ldr	r1, [pc, #4]	; 206a0 <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20698:	e59f0004 	ldr	r0, [pc, #4]	; 206a4 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   2069c:	eb000e88 	bl	240c4 <assertion_failed>
   206a0:	00045c94 	.word	0x00045c94
   206a4:	00045ca4 	.word	0x00045ca4

000206a8 <CIPAddress::~CIPAddress()>:
   206a8:	e12fff1e 	bx	lr

000206ac <CIPAddress::operator==(CIPAddress const&) const>:
   206ac:	e5d03000 	ldrb	r3, [r0]
   206b0:	e92d4010 	push	{r4, lr}
   206b4:	e3530000 	cmp	r3, #0
   206b8:	0a000008 	beq	206e0 <CIPAddress::operator==(CIPAddress const&) const+0x34>
   206bc:	e5d13000 	ldrb	r3, [r1]
   206c0:	e3530000 	cmp	r3, #0
   206c4:	0a000009 	beq	206f0 <CIPAddress::operator==(CIPAddress const&) const+0x44>
   206c8:	e5900004 	ldr	r0, [r0, #4]
   206cc:	e5913004 	ldr	r3, [r1, #4]
   206d0:	e0400003 	sub	r0, r0, r3
   206d4:	e16f0f10 	clz	r0, r0
   206d8:	e1a002a0 	lsr	r0, r0, #5
   206dc:	e8bd8010 	pop	{r4, pc}
   206e0:	e3a0203e 	mov	r2, #62	; 0x3e
   206e4:	e59f1014 	ldr	r1, [pc, #20]	; 20700 <CIPAddress::operator==(CIPAddress const&) const+0x54>
   206e8:	e59f0014 	ldr	r0, [pc, #20]	; 20704 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   206ec:	eb000e74 	bl	240c4 <assertion_failed>
   206f0:	e3a0203f 	mov	r2, #63	; 0x3f
   206f4:	e59f1004 	ldr	r1, [pc, #4]	; 20700 <CIPAddress::operator==(CIPAddress const&) const+0x54>
   206f8:	e59f0008 	ldr	r0, [pc, #8]	; 20708 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   206fc:	eb000e70 	bl	240c4 <assertion_failed>
   20700:	00045c94 	.word	0x00045c94
   20704:	00041070 	.word	0x00041070
   20708:	00045cb8 	.word	0x00045cb8

0002070c <CIPAddress::operator!=(CIPAddress const&) const>:
   2070c:	e5d03000 	ldrb	r3, [r0]
   20710:	e92d4010 	push	{r4, lr}
   20714:	e3530000 	cmp	r3, #0
   20718:	0a000007 	beq	2073c <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   2071c:	e5d13000 	ldrb	r3, [r1]
   20720:	e3530000 	cmp	r3, #0
   20724:	0a000008 	beq	2074c <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20728:	e5900004 	ldr	r0, [r0, #4]
   2072c:	e5913004 	ldr	r3, [r1, #4]
   20730:	e0500003 	subs	r0, r0, r3
   20734:	13a00001 	movne	r0, #1
   20738:	e8bd8010 	pop	{r4, pc}
   2073c:	e3a02045 	mov	r2, #69	; 0x45
   20740:	e59f1014 	ldr	r1, [pc, #20]	; 2075c <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20744:	e59f0014 	ldr	r0, [pc, #20]	; 20760 <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20748:	eb000e5d 	bl	240c4 <assertion_failed>
   2074c:	e3a02046 	mov	r2, #70	; 0x46
   20750:	e59f1004 	ldr	r1, [pc, #4]	; 2075c <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20754:	e59f0008 	ldr	r0, [pc, #8]	; 20764 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20758:	eb000e59 	bl	240c4 <assertion_failed>
   2075c:	00045c94 	.word	0x00045c94
   20760:	00041070 	.word	0x00041070
   20764:	00045cb8 	.word	0x00045cb8

00020768 <CIPAddress::operator==(unsigned char const*) const>:
   20768:	e5d03000 	ldrb	r3, [r0]
   2076c:	e92d4010 	push	{r4, lr}
   20770:	e3530000 	cmp	r3, #0
   20774:	0a000007 	beq	20798 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20778:	e3510000 	cmp	r1, #0
   2077c:	0a000009 	beq	207a8 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20780:	e3a02004 	mov	r2, #4
   20784:	e2800004 	add	r0, r0, #4
   20788:	eb002454 	bl	298e0 <memcmp>
   2078c:	e16f0f10 	clz	r0, r0
   20790:	e1a002a0 	lsr	r0, r0, #5
   20794:	e8bd8010 	pop	{r4, pc}
   20798:	e3a0204c 	mov	r2, #76	; 0x4c
   2079c:	e59f1014 	ldr	r1, [pc, #20]	; 207b8 <CIPAddress::operator==(unsigned char const*) const+0x50>
   207a0:	e59f0014 	ldr	r0, [pc, #20]	; 207bc <CIPAddress::operator==(unsigned char const*) const+0x54>
   207a4:	eb000e46 	bl	240c4 <assertion_failed>
   207a8:	e3a0204d 	mov	r2, #77	; 0x4d
   207ac:	e59f1004 	ldr	r1, [pc, #4]	; 207b8 <CIPAddress::operator==(unsigned char const*) const+0x50>
   207b0:	e59f0008 	ldr	r0, [pc, #8]	; 207c0 <CIPAddress::operator==(unsigned char const*) const+0x58>
   207b4:	eb000e42 	bl	240c4 <assertion_failed>
   207b8:	00045c94 	.word	0x00045c94
   207bc:	00041070 	.word	0x00041070
   207c0:	00045ccc 	.word	0x00045ccc

000207c4 <CIPAddress::operator!=(unsigned char const*) const>:
   207c4:	e92d4010 	push	{r4, lr}
   207c8:	ebffffe6 	bl	20768 <CIPAddress::operator==(unsigned char const*) const>
   207cc:	e2200001 	eor	r0, r0, #1
   207d0:	e6ef0070 	uxtb	r0, r0
   207d4:	e8bd8010 	pop	{r4, pc}

000207d8 <CIPAddress::operator==(unsigned int) const>:
   207d8:	e5d03000 	ldrb	r3, [r0]
   207dc:	e3530000 	cmp	r3, #0
   207e0:	0a000004 	beq	207f8 <CIPAddress::operator==(unsigned int) const+0x20>
   207e4:	e5900004 	ldr	r0, [r0, #4]
   207e8:	e0400001 	sub	r0, r0, r1
   207ec:	e16f0f10 	clz	r0, r0
   207f0:	e1a002a0 	lsr	r0, r0, #5
   207f4:	e12fff1e 	bx	lr
   207f8:	e92d4010 	push	{r4, lr}
   207fc:	e3a02058 	mov	r2, #88	; 0x58
   20800:	e59f1004 	ldr	r1, [pc, #4]	; 2080c <CIPAddress::operator==(unsigned int) const+0x34>
   20804:	e59f0004 	ldr	r0, [pc, #4]	; 20810 <CIPAddress::operator==(unsigned int) const+0x38>
   20808:	eb000e2d 	bl	240c4 <assertion_failed>
   2080c:	00045c94 	.word	0x00045c94
   20810:	00041070 	.word	0x00041070

00020814 <CIPAddress::operator!=(unsigned int) const>:
   20814:	e5d03000 	ldrb	r3, [r0]
   20818:	e3530000 	cmp	r3, #0
   2081c:	0a000003 	beq	20830 <CIPAddress::operator!=(unsigned int) const+0x1c>
   20820:	e5900004 	ldr	r0, [r0, #4]
   20824:	e0500001 	subs	r0, r0, r1
   20828:	13a00001 	movne	r0, #1
   2082c:	e12fff1e 	bx	lr
   20830:	e92d4010 	push	{r4, lr}
   20834:	e3a0205e 	mov	r2, #94	; 0x5e
   20838:	e59f1004 	ldr	r1, [pc, #4]	; 20844 <CIPAddress::operator!=(unsigned int) const+0x30>
   2083c:	e59f0004 	ldr	r0, [pc, #4]	; 20848 <CIPAddress::operator!=(unsigned int) const+0x34>
   20840:	eb000e1f 	bl	240c4 <assertion_failed>
   20844:	00045c94 	.word	0x00045c94
   20848:	00041070 	.word	0x00041070

0002084c <CIPAddress::operator=(unsigned int)>:
   2084c:	e3a02001 	mov	r2, #1
   20850:	e5801004 	str	r1, [r0, #4]
   20854:	e5c02000 	strb	r2, [r0]
   20858:	e12fff1e 	bx	lr

0002085c <CIPAddress::Set(unsigned int)>:
   2085c:	e3a03001 	mov	r3, #1
   20860:	e5801004 	str	r1, [r0, #4]
   20864:	e5c03000 	strb	r3, [r0]
   20868:	e12fff1e 	bx	lr

0002086c <CIPAddress::Set(unsigned char const*)>:
   2086c:	e3510000 	cmp	r1, #0
   20870:	e92d4010 	push	{r4, lr}
   20874:	0a000006 	beq	20894 <CIPAddress::Set(unsigned char const*)+0x28>
   20878:	e3a02004 	mov	r2, #4
   2087c:	e1a04000 	mov	r4, r0
   20880:	e0800002 	add	r0, r0, r2
   20884:	eb002651 	bl	2a1d0 <memcpy>
   20888:	e3a03001 	mov	r3, #1
   2088c:	e5c43000 	strb	r3, [r4]
   20890:	e8bd8010 	pop	{r4, pc}
   20894:	e3a02075 	mov	r2, #117	; 0x75
   20898:	e59f1004 	ldr	r1, [pc, #4]	; 208a4 <CIPAddress::Set(unsigned char const*)+0x38>
   2089c:	e59f0004 	ldr	r0, [pc, #4]	; 208a8 <CIPAddress::Set(unsigned char const*)+0x3c>
   208a0:	eb000e07 	bl	240c4 <assertion_failed>
   208a4:	00045c94 	.word	0x00045c94
   208a8:	00045cdc 	.word	0x00045cdc

000208ac <CIPAddress::CIPAddress(unsigned char const*)>:
   208ac:	e92d4010 	push	{r4, lr}
   208b0:	e1a04000 	mov	r4, r0
   208b4:	ebffffec 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   208b8:	e1a00004 	mov	r0, r4
   208bc:	e8bd8010 	pop	{r4, pc}

000208c0 <CIPAddress::Set(CIPAddress const&)>:
   208c0:	e5d13000 	ldrb	r3, [r1]
   208c4:	e3530000 	cmp	r3, #0
   208c8:	0a000004 	beq	208e0 <CIPAddress::Set(CIPAddress const&)+0x20>
   208cc:	e3a02001 	mov	r2, #1
   208d0:	e5913004 	ldr	r3, [r1, #4]
   208d4:	e5c02000 	strb	r2, [r0]
   208d8:	e5803004 	str	r3, [r0, #4]
   208dc:	e12fff1e 	bx	lr
   208e0:	e92d4010 	push	{r4, lr}
   208e4:	e3a0207e 	mov	r2, #126	; 0x7e
   208e8:	e59f1004 	ldr	r1, [pc, #4]	; 208f4 <CIPAddress::Set(CIPAddress const&)+0x34>
   208ec:	e59f0004 	ldr	r0, [pc, #4]	; 208f8 <CIPAddress::Set(CIPAddress const&)+0x38>
   208f0:	eb000df3 	bl	240c4 <assertion_failed>
   208f4:	00045c94 	.word	0x00045c94
   208f8:	00045ca4 	.word	0x00045ca4

000208fc <CIPAddress::SetBroadcast()>:
   208fc:	e3e02000 	mvn	r2, #0
   20900:	e3a03001 	mov	r3, #1
   20904:	e5802004 	str	r2, [r0, #4]
   20908:	e5c03000 	strb	r3, [r0]
   2090c:	e12fff1e 	bx	lr

00020910 <CIPAddress::operator unsigned int() const>:
   20910:	e5d03000 	ldrb	r3, [r0]
   20914:	e3530000 	cmp	r3, #0
   20918:	0a000001 	beq	20924 <CIPAddress::operator unsigned int() const+0x14>
   2091c:	e5900004 	ldr	r0, [r0, #4]
   20920:	e12fff1e 	bx	lr
   20924:	e92d4010 	push	{r4, lr}
   20928:	e3a0208f 	mov	r2, #143	; 0x8f
   2092c:	e59f1004 	ldr	r1, [pc, #4]	; 20938 <CIPAddress::operator unsigned int() const+0x28>
   20930:	e59f0004 	ldr	r0, [pc, #4]	; 2093c <CIPAddress::operator unsigned int() const+0x2c>
   20934:	eb000de2 	bl	240c4 <assertion_failed>
   20938:	00045c94 	.word	0x00045c94
   2093c:	00041070 	.word	0x00041070

00020940 <CIPAddress::Get() const>:
   20940:	e5d03000 	ldrb	r3, [r0]
   20944:	e3530000 	cmp	r3, #0
   20948:	0a000001 	beq	20954 <CIPAddress::Get() const+0x14>
   2094c:	e2800004 	add	r0, r0, #4
   20950:	e12fff1e 	bx	lr
   20954:	e92d4010 	push	{r4, lr}
   20958:	e3a02095 	mov	r2, #149	; 0x95
   2095c:	e59f1004 	ldr	r1, [pc, #4]	; 20968 <CIPAddress::Get() const+0x28>
   20960:	e59f0004 	ldr	r0, [pc, #4]	; 2096c <CIPAddress::Get() const+0x2c>
   20964:	eb000dd6 	bl	240c4 <assertion_failed>
   20968:	00045c94 	.word	0x00045c94
   2096c:	00041070 	.word	0x00041070

00020970 <CIPAddress::CopyTo(unsigned char*) const>:
   20970:	e5d02000 	ldrb	r2, [r0]
   20974:	e92d4010 	push	{r4, lr}
   20978:	e3520000 	cmp	r2, #0
   2097c:	0a000007 	beq	209a0 <CIPAddress::CopyTo(unsigned char*) const+0x30>
   20980:	e3510000 	cmp	r1, #0
   20984:	e1a03001 	mov	r3, r1
   20988:	0a000008 	beq	209b0 <CIPAddress::CopyTo(unsigned char*) const+0x40>
   2098c:	e8bd4010 	pop	{r4, lr}
   20990:	e2801004 	add	r1, r0, #4
   20994:	e3a02004 	mov	r2, #4
   20998:	e1a00003 	mov	r0, r3
   2099c:	ea00260b 	b	2a1d0 <memcpy>
   209a0:	e3a0209b 	mov	r2, #155	; 0x9b
   209a4:	e59f1014 	ldr	r1, [pc, #20]	; 209c0 <CIPAddress::CopyTo(unsigned char*) const+0x50>
   209a8:	e59f0014 	ldr	r0, [pc, #20]	; 209c4 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   209ac:	eb000dc4 	bl	240c4 <assertion_failed>
   209b0:	e3a0209c 	mov	r2, #156	; 0x9c
   209b4:	e59f1004 	ldr	r1, [pc, #4]	; 209c0 <CIPAddress::CopyTo(unsigned char*) const+0x50>
   209b8:	e59f0008 	ldr	r0, [pc, #8]	; 209c8 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   209bc:	eb000dc0 	bl	240c4 <assertion_failed>
   209c0:	00045c94 	.word	0x00045c94
   209c4:	00041070 	.word	0x00041070
   209c8:	000423b8 	.word	0x000423b8

000209cc <CIPAddress::IsNull() const>:
   209cc:	e5d03000 	ldrb	r3, [r0]
   209d0:	e3530000 	cmp	r3, #0
   209d4:	0a000003 	beq	209e8 <CIPAddress::IsNull() const+0x1c>
   209d8:	e5900004 	ldr	r0, [r0, #4]
   209dc:	e16f0f10 	clz	r0, r0
   209e0:	e1a002a0 	lsr	r0, r0, #5
   209e4:	e12fff1e 	bx	lr
   209e8:	e92d4010 	push	{r4, lr}
   209ec:	e3a020a2 	mov	r2, #162	; 0xa2
   209f0:	e59f1004 	ldr	r1, [pc, #4]	; 209fc <CIPAddress::IsNull() const+0x30>
   209f4:	e59f0004 	ldr	r0, [pc, #4]	; 20a00 <CIPAddress::IsNull() const+0x34>
   209f8:	eb000db1 	bl	240c4 <assertion_failed>
   209fc:	00045c94 	.word	0x00045c94
   20a00:	00041070 	.word	0x00041070

00020a04 <CIPAddress::IsBroadcast() const>:
   20a04:	e5d03000 	ldrb	r3, [r0]
   20a08:	e3530000 	cmp	r3, #0
   20a0c:	0a000004 	beq	20a24 <CIPAddress::IsBroadcast() const+0x20>
   20a10:	e5900004 	ldr	r0, [r0, #4]
   20a14:	e3700001 	cmn	r0, #1
   20a18:	13a00000 	movne	r0, #0
   20a1c:	03a00001 	moveq	r0, #1
   20a20:	e12fff1e 	bx	lr
   20a24:	e92d4010 	push	{r4, lr}
   20a28:	e3a020a8 	mov	r2, #168	; 0xa8
   20a2c:	e59f1004 	ldr	r1, [pc, #4]	; 20a38 <CIPAddress::IsBroadcast() const+0x34>
   20a30:	e59f0004 	ldr	r0, [pc, #4]	; 20a3c <CIPAddress::IsBroadcast() const+0x38>
   20a34:	eb000da2 	bl	240c4 <assertion_failed>
   20a38:	00045c94 	.word	0x00045c94
   20a3c:	00041070 	.word	0x00041070

00020a40 <CIPAddress::GetSize() const>:
   20a40:	e3a00004 	mov	r0, #4
   20a44:	e12fff1e 	bx	lr

00020a48 <CIPAddress::Format(CString*) const>:
   20a48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20a4c:	e5d03000 	ldrb	r3, [r0]
   20a50:	e24dd00c 	sub	sp, sp, #12
   20a54:	e3530000 	cmp	r3, #0
   20a58:	0a00000f 	beq	20a9c <CIPAddress::Format(CString*) const+0x54>
   20a5c:	e3510000 	cmp	r1, #0
   20a60:	0a000011 	beq	20aac <CIPAddress::Format(CString*) const+0x64>
   20a64:	e5902004 	ldr	r2, [r0, #4]
   20a68:	e1a00001 	mov	r0, r1
   20a6c:	e1a01822 	lsr	r1, r2, #16
   20a70:	e1a0cc22 	lsr	ip, r2, #24
   20a74:	e6ef1071 	uxtb	r1, r1
   20a78:	e1a03422 	lsr	r3, r2, #8
   20a7c:	e58d1000 	str	r1, [sp]
   20a80:	e6ef3073 	uxtb	r3, r3
   20a84:	e58dc004 	str	ip, [sp, #4]
   20a88:	e6ef2072 	uxtb	r2, r2
   20a8c:	e59f1028 	ldr	r1, [pc, #40]	; 20abc <CIPAddress::Format(CString*) const+0x74>
   20a90:	eb001fa6 	bl	28930 <CString::Format(char const*, ...)>
   20a94:	e28dd00c 	add	sp, sp, #12
   20a98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20a9c:	e3a020b3 	mov	r2, #179	; 0xb3
   20aa0:	e59f1018 	ldr	r1, [pc, #24]	; 20ac0 <CIPAddress::Format(CString*) const+0x78>
   20aa4:	e59f0018 	ldr	r0, [pc, #24]	; 20ac4 <CIPAddress::Format(CString*) const+0x7c>
   20aa8:	eb000d85 	bl	240c4 <assertion_failed>
   20aac:	e3a020b4 	mov	r2, #180	; 0xb4
   20ab0:	e59f1008 	ldr	r1, [pc, #8]	; 20ac0 <CIPAddress::Format(CString*) const+0x78>
   20ab4:	e59f000c 	ldr	r0, [pc, #12]	; 20ac8 <CIPAddress::Format(CString*) const+0x80>
   20ab8:	eb000d81 	bl	240c4 <assertion_failed>
   20abc:	00045cfc 	.word	0x00045cfc
   20ac0:	00045c94 	.word	0x00045c94
   20ac4:	00041070 	.word	0x00041070
   20ac8:	00045cec 	.word	0x00045cec

00020acc <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   20acc:	e92d4030 	push	{r4, r5, lr}
   20ad0:	e5d13000 	ldrb	r3, [r1]
   20ad4:	e24dd00c 	sub	sp, sp, #12
   20ad8:	e3530000 	cmp	r3, #0
   20adc:	0a000018 	beq	20b44 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   20ae0:	e1a04001 	mov	r4, r1
   20ae4:	e5911004 	ldr	r1, [r1, #4]
   20ae8:	e3710001 	cmn	r1, #1
   20aec:	0a000011 	beq	20b38 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   20af0:	e3520000 	cmp	r2, #0
   20af4:	0a000016 	beq	20b54 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   20af8:	e1a01002 	mov	r1, r2
   20afc:	e3a02004 	mov	r2, #4
   20b00:	e1a05000 	mov	r5, r0
   20b04:	e08d0002 	add	r0, sp, r2
   20b08:	eb0025b0 	bl	2a1d0 <memcpy>
   20b0c:	e5d53000 	ldrb	r3, [r5]
   20b10:	e3530000 	cmp	r3, #0
   20b14:	0a000012 	beq	20b64 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   20b18:	e59d2004 	ldr	r2, [sp, #4]
   20b1c:	e5953004 	ldr	r3, [r5, #4]
   20b20:	e5941004 	ldr	r1, [r4, #4]
   20b24:	e0033002 	and	r3, r3, r2
   20b28:	e0022001 	and	r2, r2, r1
   20b2c:	e0433002 	sub	r3, r3, r2
   20b30:	e16f3f13 	clz	r3, r3
   20b34:	e1a032a3 	lsr	r3, r3, #5
   20b38:	e1a00003 	mov	r0, r3
   20b3c:	e28dd00c 	add	sp, sp, #12
   20b40:	e8bd8030 	pop	{r4, r5, pc}
   20b44:	e3a020a8 	mov	r2, #168	; 0xa8
   20b48:	e59f1024 	ldr	r1, [pc, #36]	; 20b74 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20b4c:	e59f0024 	ldr	r0, [pc, #36]	; 20b78 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   20b50:	eb000d5b 	bl	240c4 <assertion_failed>
   20b54:	e3a020c1 	mov	r2, #193	; 0xc1
   20b58:	e59f1014 	ldr	r1, [pc, #20]	; 20b74 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20b5c:	e59f0018 	ldr	r0, [pc, #24]	; 20b7c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   20b60:	eb000d57 	bl	240c4 <assertion_failed>
   20b64:	e3a020c5 	mov	r2, #197	; 0xc5
   20b68:	e59f1004 	ldr	r1, [pc, #4]	; 20b74 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20b6c:	e59f0004 	ldr	r0, [pc, #4]	; 20b78 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   20b70:	eb000d53 	bl	240c4 <assertion_failed>
   20b74:	00045c94 	.word	0x00045c94
   20b78:	00041070 	.word	0x00041070
   20b7c:	00045d08 	.word	0x00045d08

00020b80 <CNetQueue::CNetQueue()>:
   20b80:	e3a02000 	mov	r2, #0
   20b84:	e5802000 	str	r2, [r0]
   20b88:	e5802004 	str	r2, [r0, #4]
   20b8c:	e5802008 	str	r2, [r0, #8]
   20b90:	e12fff1e 	bx	lr

00020b94 <CNetQueue::IsEmpty() const>:
   20b94:	e5900000 	ldr	r0, [r0]
   20b98:	e16f0f10 	clz	r0, r0
   20b9c:	e1a002a0 	lsr	r0, r0, #5
   20ba0:	e12fff1e 	bx	lr

00020ba4 <CNetQueue::Flush()>:
   20ba4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20ba8:	e5904000 	ldr	r4, [r0]
   20bac:	e3540000 	cmp	r4, #0
   20bb0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20bb4:	e1a05000 	mov	r5, r0
   20bb8:	e3a07000 	mov	r7, #0
   20bbc:	e3a06e65 	mov	r6, #1616	; 0x650
   20bc0:	ea00000f 	b	20c04 <CNetQueue::Flush()+0x60>
   20bc4:	e3540000 	cmp	r4, #0
   20bc8:	0a000014 	beq	20c20 <CNetQueue::Flush()+0x7c>
   20bcc:	e5943004 	ldr	r3, [r4, #4]
   20bd0:	e3530000 	cmp	r3, #0
   20bd4:	e5853000 	str	r3, [r5]
   20bd8:	15837000 	strne	r7, [r3]
   20bdc:	0a000016 	beq	20c3c <CNetQueue::Flush()+0x98>
   20be0:	e5953008 	ldr	r3, [r5, #8]
   20be4:	e3530000 	cmp	r3, #0
   20be8:	1a000010 	bne	20c30 <CNetQueue::Flush()+0x8c>
   20bec:	e1a00004 	mov	r0, r4
   20bf0:	e1a01006 	mov	r1, r6
   20bf4:	eb00275c 	bl	2a96c <operator delete(void*, unsigned int)>
   20bf8:	e5954000 	ldr	r4, [r5]
   20bfc:	e3540000 	cmp	r4, #0
   20c00:	0a00000c 	beq	20c38 <CNetQueue::Flush()+0x94>
   20c04:	e5950008 	ldr	r0, [r5, #8]
   20c08:	e3500000 	cmp	r0, #0
   20c0c:	0affffec 	beq	20bc4 <CNetQueue::Flush()+0x20>
   20c10:	eb002a79 	bl	2b5fc <EnterCritical>
   20c14:	e5954000 	ldr	r4, [r5]
   20c18:	e3540000 	cmp	r4, #0
   20c1c:	1affffea 	bne	20bcc <CNetQueue::Flush()+0x28>
   20c20:	e3a0203a 	mov	r2, #58	; 0x3a
   20c24:	e59f1030 	ldr	r1, [pc, #48]	; 20c5c <CNetQueue::Flush()+0xb8>
   20c28:	e59f0030 	ldr	r0, [pc, #48]	; 20c60 <CNetQueue::Flush()+0xbc>
   20c2c:	eb000d24 	bl	240c4 <assertion_failed>
   20c30:	eb002a9c 	bl	2b6a8 <LeaveCritical>
   20c34:	eaffffec 	b	20bec <CNetQueue::Flush()+0x48>
   20c38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20c3c:	e5952004 	ldr	r2, [r5, #4]
   20c40:	e1540002 	cmp	r4, r2
   20c44:	05853004 	streq	r3, [r5, #4]
   20c48:	0affffe4 	beq	20be0 <CNetQueue::Flush()+0x3c>
   20c4c:	e3a02043 	mov	r2, #67	; 0x43
   20c50:	e59f1004 	ldr	r1, [pc, #4]	; 20c5c <CNetQueue::Flush()+0xb8>
   20c54:	e59f0008 	ldr	r0, [pc, #8]	; 20c64 <CNetQueue::Flush()+0xc0>
   20c58:	eb000d19 	bl	240c4 <assertion_failed>
   20c5c:	00045d18 	.word	0x00045d18
   20c60:	000457e4 	.word	0x000457e4
   20c64:	00045d28 	.word	0x00045d28

00020c68 <CNetQueue::~CNetQueue()>:
   20c68:	e92d4010 	push	{r4, lr}
   20c6c:	e1a04000 	mov	r4, r0
   20c70:	ebffffcb 	bl	20ba4 <CNetQueue::Flush()>
   20c74:	e1a00004 	mov	r0, r4
   20c78:	e8bd8010 	pop	{r4, pc}

00020c7c <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   20c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20c80:	e1a05002 	mov	r5, r2
   20c84:	e1a06000 	mov	r6, r0
   20c88:	e3a00e65 	mov	r0, #1616	; 0x650
   20c8c:	e1a07001 	mov	r7, r1
   20c90:	e1a08003 	mov	r8, r3
   20c94:	eb002726 	bl	2a934 <operator new(unsigned int)>
   20c98:	e3550000 	cmp	r5, #0
   20c9c:	0a000026 	beq	20d3c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   20ca0:	e3550d19 	cmp	r5, #1600	; 0x640
   20ca4:	8a000028 	bhi	20d4c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   20ca8:	e3570000 	cmp	r7, #0
   20cac:	e1a04000 	mov	r4, r0
   20cb0:	e5805008 	str	r5, [r0, #8]
   20cb4:	0a000028 	beq	20d5c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   20cb8:	e1a02005 	mov	r2, r5
   20cbc:	e1a01007 	mov	r1, r7
   20cc0:	e280000c 	add	r0, r0, #12
   20cc4:	eb002541 	bl	2a1d0 <memcpy>
   20cc8:	e5960008 	ldr	r0, [r6, #8]
   20ccc:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   20cd0:	e3500000 	cmp	r0, #0
   20cd4:	1a000012 	bne	20d24 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   20cd8:	e896000a 	ldm	r6, {r1, r3}
   20cdc:	e3a02000 	mov	r2, #0
   20ce0:	e1510002 	cmp	r1, r2
   20ce4:	e5842004 	str	r2, [r4, #4]
   20ce8:	e5843000 	str	r3, [r4]
   20cec:	05864000 	streq	r4, [r6]
   20cf0:	0a000005 	beq	20d0c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   20cf4:	e3530000 	cmp	r3, #0
   20cf8:	0a00001b 	beq	20d6c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   20cfc:	e5932004 	ldr	r2, [r3, #4]
   20d00:	e3520000 	cmp	r2, #0
   20d04:	05834004 	streq	r4, [r3, #4]
   20d08:	1a000007 	bne	20d2c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   20d0c:	e5963008 	ldr	r3, [r6, #8]
   20d10:	e5864004 	str	r4, [r6, #4]
   20d14:	e3530000 	cmp	r3, #0
   20d18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20d1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20d20:	ea002a60 	b	2b6a8 <LeaveCritical>
   20d24:	eb002a34 	bl	2b5fc <EnterCritical>
   20d28:	eaffffea 	b	20cd8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   20d2c:	e3a02067 	mov	r2, #103	; 0x67
   20d30:	e59f1044 	ldr	r1, [pc, #68]	; 20d7c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20d34:	e59f0044 	ldr	r0, [pc, #68]	; 20d80 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   20d38:	eb000ce1 	bl	240c4 <assertion_failed>
   20d3c:	e3a02052 	mov	r2, #82	; 0x52
   20d40:	e59f1034 	ldr	r1, [pc, #52]	; 20d7c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20d44:	e59f0038 	ldr	r0, [pc, #56]	; 20d84 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   20d48:	eb000cdd 	bl	240c4 <assertion_failed>
   20d4c:	e3a02053 	mov	r2, #83	; 0x53
   20d50:	e59f1024 	ldr	r1, [pc, #36]	; 20d7c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20d54:	e59f002c 	ldr	r0, [pc, #44]	; 20d88 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   20d58:	eb000cd9 	bl	240c4 <assertion_failed>
   20d5c:	e3a02056 	mov	r2, #86	; 0x56
   20d60:	e59f1014 	ldr	r1, [pc, #20]	; 20d7c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20d64:	e59f0020 	ldr	r0, [pc, #32]	; 20d8c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   20d68:	eb000cd5 	bl	240c4 <assertion_failed>
   20d6c:	e3a02066 	mov	r2, #102	; 0x66
   20d70:	e59f1004 	ldr	r1, [pc, #4]	; 20d7c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20d74:	e59f0014 	ldr	r0, [pc, #20]	; 20d90 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   20d78:	eb000cd1 	bl	240c4 <assertion_failed>
   20d7c:	00045d18 	.word	0x00045d18
   20d80:	00045d4c 	.word	0x00045d4c
   20d84:	0004522c 	.word	0x0004522c
   20d88:	00043010 	.word	0x00043010
   20d8c:	000423b8 	.word	0x000423b8
   20d90:	00045d3c 	.word	0x00045d3c

00020d94 <CNetQueue::Dequeue(void*, void**)>:
   20d94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20d98:	e5905000 	ldr	r5, [r0]
   20d9c:	e3550000 	cmp	r5, #0
   20da0:	0a000031 	beq	20e6c <CNetQueue::Dequeue(void*, void**)+0xd8>
   20da4:	e1a04000 	mov	r4, r0
   20da8:	e5900008 	ldr	r0, [r0, #8]
   20dac:	e1a06002 	mov	r6, r2
   20db0:	e3500000 	cmp	r0, #0
   20db4:	e1a07001 	mov	r7, r1
   20db8:	1a000019 	bne	20e24 <CNetQueue::Dequeue(void*, void**)+0x90>
   20dbc:	e5953004 	ldr	r3, [r5, #4]
   20dc0:	e3530000 	cmp	r3, #0
   20dc4:	e5843000 	str	r3, [r4]
   20dc8:	0a00001f 	beq	20e4c <CNetQueue::Dequeue(void*, void**)+0xb8>
   20dcc:	e3a02000 	mov	r2, #0
   20dd0:	e5832000 	str	r2, [r3]
   20dd4:	e5943008 	ldr	r3, [r4, #8]
   20dd8:	e3530000 	cmp	r3, #0
   20ddc:	1a000018 	bne	20e44 <CNetQueue::Dequeue(void*, void**)+0xb0>
   20de0:	e5954008 	ldr	r4, [r5, #8]
   20de4:	e3540000 	cmp	r4, #0
   20de8:	0a000022 	beq	20e78 <CNetQueue::Dequeue(void*, void**)+0xe4>
   20dec:	e3540d19 	cmp	r4, #1600	; 0x640
   20df0:	8a000024 	bhi	20e88 <CNetQueue::Dequeue(void*, void**)+0xf4>
   20df4:	e1a02004 	mov	r2, r4
   20df8:	e285100c 	add	r1, r5, #12
   20dfc:	e1a00007 	mov	r0, r7
   20e00:	eb0024f2 	bl	2a1d0 <memcpy>
   20e04:	e3560000 	cmp	r6, #0
   20e08:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   20e0c:	e1a00005 	mov	r0, r5
   20e10:	15863000 	strne	r3, [r6]
   20e14:	e3a01e65 	mov	r1, #1616	; 0x650
   20e18:	eb0026d3 	bl	2a96c <operator delete(void*, unsigned int)>
   20e1c:	e1a00004 	mov	r0, r4
   20e20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20e24:	eb0029f4 	bl	2b5fc <EnterCritical>
   20e28:	e5945000 	ldr	r5, [r4]
   20e2c:	e3550000 	cmp	r5, #0
   20e30:	1affffe1 	bne	20dbc <CNetQueue::Dequeue(void*, void**)+0x28>
   20e34:	e3a02078 	mov	r2, #120	; 0x78
   20e38:	e59f1058 	ldr	r1, [pc, #88]	; 20e98 <CNetQueue::Dequeue(void*, void**)+0x104>
   20e3c:	e59f0058 	ldr	r0, [pc, #88]	; 20e9c <CNetQueue::Dequeue(void*, void**)+0x108>
   20e40:	eb000c9f 	bl	240c4 <assertion_failed>
   20e44:	eb002a17 	bl	2b6a8 <LeaveCritical>
   20e48:	eaffffe4 	b	20de0 <CNetQueue::Dequeue(void*, void**)+0x4c>
   20e4c:	e5942004 	ldr	r2, [r4, #4]
   20e50:	e1520005 	cmp	r2, r5
   20e54:	05843004 	streq	r3, [r4, #4]
   20e58:	0affffdd 	beq	20dd4 <CNetQueue::Dequeue(void*, void**)+0x40>
   20e5c:	e3a02081 	mov	r2, #129	; 0x81
   20e60:	e59f1030 	ldr	r1, [pc, #48]	; 20e98 <CNetQueue::Dequeue(void*, void**)+0x104>
   20e64:	e59f0034 	ldr	r0, [pc, #52]	; 20ea0 <CNetQueue::Dequeue(void*, void**)+0x10c>
   20e68:	eb000c95 	bl	240c4 <assertion_failed>
   20e6c:	e1a04005 	mov	r4, r5
   20e70:	e1a00004 	mov	r0, r4
   20e74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20e78:	e3a02088 	mov	r2, #136	; 0x88
   20e7c:	e59f1014 	ldr	r1, [pc, #20]	; 20e98 <CNetQueue::Dequeue(void*, void**)+0x104>
   20e80:	e59f001c 	ldr	r0, [pc, #28]	; 20ea4 <CNetQueue::Dequeue(void*, void**)+0x110>
   20e84:	eb000c8e 	bl	240c4 <assertion_failed>
   20e88:	e3a02089 	mov	r2, #137	; 0x89
   20e8c:	e59f1004 	ldr	r1, [pc, #4]	; 20e98 <CNetQueue::Dequeue(void*, void**)+0x104>
   20e90:	e59f0010 	ldr	r0, [pc, #16]	; 20ea8 <CNetQueue::Dequeue(void*, void**)+0x114>
   20e94:	eb000c8a 	bl	240c4 <assertion_failed>
   20e98:	00045d18 	.word	0x00045d18
   20e9c:	000457e4 	.word	0x000457e4
   20ea0:	00045d28 	.word	0x00045d28
   20ea4:	00045d60 	.word	0x00045d60
   20ea8:	00045d6c 	.word	0x00045d6c

00020eac <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   20eac:	e92d4070 	push	{r4, r5, r6, lr}
   20eb0:	e1a04000 	mov	r4, r0
   20eb4:	e3a05000 	mov	r5, #0
   20eb8:	e1a06002 	mov	r6, r2
   20ebc:	e1a00001 	mov	r0, r1
   20ec0:	e5c4500c 	strb	r5, [r4, #12]
   20ec4:	e1a01004 	mov	r1, r4
   20ec8:	ebfffea8 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20ecc:	e5c45008 	strb	r5, [r4, #8]
   20ed0:	e5c46009 	strb	r6, [r4, #9]
   20ed4:	e1a00004 	mov	r0, r4
   20ed8:	e8bd8070 	pop	{r4, r5, r6, pc}

00020edc <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   20edc:	e92d4070 	push	{r4, r5, r6, lr}
   20ee0:	e3a0c001 	mov	ip, #1
   20ee4:	e1a04000 	mov	r4, r0
   20ee8:	e1a06002 	mov	r6, r2
   20eec:	e1a00001 	mov	r0, r1
   20ef0:	e5c4c00c 	strb	ip, [r4, #12]
   20ef4:	e1a01004 	mov	r1, r4
   20ef8:	e1a05003 	mov	r5, r3
   20efc:	ebfffe9b 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20f00:	e1a00006 	mov	r0, r6
   20f04:	e2841004 	add	r1, r4, #4
   20f08:	ebfffe98 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20f0c:	e3a02000 	mov	r2, #0
   20f10:	e5c45009 	strb	r5, [r4, #9]
   20f14:	e5c42008 	strb	r2, [r4, #8]
   20f18:	e1a00004 	mov	r0, r4
   20f1c:	e8bd8070 	pop	{r4, r5, r6, pc}

00020f20 <CChecksumCalculator::~CChecksumCalculator()>:
   20f20:	e12fff1e 	bx	lr

00020f24 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   20f24:	e1a03001 	mov	r3, r1
   20f28:	e1a01000 	mov	r1, r0
   20f2c:	e1a00003 	mov	r0, r3
   20f30:	eafffe8e 	b	20970 <CIPAddress::CopyTo(unsigned char*) const>

00020f34 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   20f34:	e92d4010 	push	{r4, lr}
   20f38:	e1a04000 	mov	r4, r0
   20f3c:	e1a00001 	mov	r0, r1
   20f40:	e2841004 	add	r1, r4, #4
   20f44:	ebfffe89 	bl	20970 <CIPAddress::CopyTo(unsigned char*) const>
   20f48:	e3a03001 	mov	r3, #1
   20f4c:	e5c4300c 	strb	r3, [r4, #12]
   20f50:	e8bd8010 	pop	{r4, pc}

00020f54 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   20f54:	e3500000 	cmp	r0, #0
   20f58:	e92d4010 	push	{r4, lr}
   20f5c:	0a000015 	beq	20fb8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   20f60:	e3510000 	cmp	r1, #0
   20f64:	0a000017 	beq	20fc8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   20f68:	e3510001 	cmp	r1, #1
   20f6c:	9a00000c 	bls	20fa4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   20f70:	e1a0c000 	mov	ip, r0
   20f74:	e1a03001 	mov	r3, r1
   20f78:	e2433002 	sub	r3, r3, #2
   20f7c:	e0dce0b2 	ldrh	lr, [ip], #2
   20f80:	e3530001 	cmp	r3, #1
   20f84:	e082200e 	add	r2, r2, lr
   20f88:	8afffffa 	bhi	20f78 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x24>
   20f8c:	e2413002 	sub	r3, r1, #2
   20f90:	e3c33001 	bic	r3, r3, #1
   20f94:	e2833002 	add	r3, r3, #2
   20f98:	e3110001 	tst	r1, #1
   20f9c:	e0800003 	add	r0, r0, r3
   20fa0:	0a000002 	beq	20fb0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   20fa4:	e5d00000 	ldrb	r0, [r0]
   20fa8:	e0800002 	add	r0, r0, r2
   20fac:	e8bd8010 	pop	{r4, pc}
   20fb0:	e1a00002 	mov	r0, r2
   20fb4:	e8bd8010 	pop	{r4, pc}
   20fb8:	e3a02054 	mov	r2, #84	; 0x54
   20fbc:	e59f1014 	ldr	r1, [pc, #20]	; 20fd8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   20fc0:	e59f0014 	ldr	r0, [pc, #20]	; 20fdc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   20fc4:	eb000c3e 	bl	240c4 <assertion_failed>
   20fc8:	e3a02055 	mov	r2, #85	; 0x55
   20fcc:	e59f1004 	ldr	r1, [pc, #4]	; 20fd8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   20fd0:	e59f0008 	ldr	r0, [pc, #8]	; 20fe0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x8c>
   20fd4:	eb000c3a 	bl	240c4 <assertion_failed>
   20fd8:	00045d8c 	.word	0x00045d8c
   20fdc:	00045da4 	.word	0x00045da4
   20fe0:	0004522c 	.word	0x0004522c

00020fe4 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   20fe4:	e5d0300c 	ldrb	r3, [r0, #12]
   20fe8:	e92d4070 	push	{r4, r5, r6, lr}
   20fec:	e3530000 	cmp	r3, #0
   20ff0:	0a00001d 	beq	2106c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x88>
   20ff4:	e1a05001 	mov	r5, r1
   20ff8:	e6bf3fb2 	rev16	r3, r2
   20ffc:	e6ff3073 	uxth	r3, r3
   21000:	e1a04002 	mov	r4, r2
   21004:	e1a02423 	lsr	r2, r3, #8
   21008:	e5c0200b 	strb	r2, [r0, #11]
   2100c:	e5c0300a 	strb	r3, [r0, #10]
   21010:	e3a02000 	mov	r2, #0
   21014:	e3a0100c 	mov	r1, #12
   21018:	ebffffcd 	bl	20f54 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   2101c:	e3550000 	cmp	r5, #0
   21020:	0a000015 	beq	2107c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x98>
   21024:	e3540000 	cmp	r4, #0
   21028:	0a000017 	beq	2108c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   2102c:	e1a02000 	mov	r2, r0
   21030:	e1a01004 	mov	r1, r4
   21034:	e1a00005 	mov	r0, r5
   21038:	ebffffc5 	bl	20f54 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   2103c:	e1a03820 	lsr	r3, r0, #16
   21040:	e3530000 	cmp	r3, #0
   21044:	e6ff3073 	uxth	r3, r3
   21048:	0a000004 	beq	21060 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x7c>
   2104c:	e3a02001 	mov	r2, #1
   21050:	e6f30070 	uxtah	r0, r3, r0
   21054:	e1b03820 	lsrs	r3, r0, #16
   21058:	e1a03002 	mov	r3, r2
   2105c:	1afffffb 	bne	21050 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   21060:	e1e00000 	mvn	r0, r0
   21064:	e6ff0070 	uxth	r0, r0
   21068:	e8bd8070 	pop	{r4, r5, r6, pc}
   2106c:	e3a0203c 	mov	r2, #60	; 0x3c
   21070:	e59f1024 	ldr	r1, [pc, #36]	; 2109c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   21074:	e59f0024 	ldr	r0, [pc, #36]	; 210a0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   21078:	eb000c11 	bl	240c4 <assertion_failed>
   2107c:	e3a02041 	mov	r2, #65	; 0x41
   21080:	e59f1014 	ldr	r1, [pc, #20]	; 2109c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   21084:	e59f0018 	ldr	r0, [pc, #24]	; 210a4 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc0>
   21088:	eb000c0d 	bl	240c4 <assertion_failed>
   2108c:	e3a02042 	mov	r2, #66	; 0x42
   21090:	e59f1004 	ldr	r1, [pc, #4]	; 2109c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   21094:	e59f000c 	ldr	r0, [pc, #12]	; 210a8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc4>
   21098:	eb000c09 	bl	240c4 <assertion_failed>
   2109c:	00045d8c 	.word	0x00045d8c
   210a0:	00045db4 	.word	0x00045db4
   210a4:	000423b8 	.word	0x000423b8
   210a8:	0004522c 	.word	0x0004522c

000210ac <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   210ac:	e3500000 	cmp	r0, #0
   210b0:	e92d4010 	push	{r4, lr}
   210b4:	0a00000f 	beq	210f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x4c>
   210b8:	e3510000 	cmp	r1, #0
   210bc:	0a000011 	beq	21108 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x5c>
   210c0:	e3a02000 	mov	r2, #0
   210c4:	ebffffa2 	bl	20f54 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   210c8:	e1a03820 	lsr	r3, r0, #16
   210cc:	e3530000 	cmp	r3, #0
   210d0:	e6ff3073 	uxth	r3, r3
   210d4:	0a000004 	beq	210ec <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   210d8:	e3a02001 	mov	r2, #1
   210dc:	e6f30070 	uxtah	r0, r3, r0
   210e0:	e1b03820 	lsrs	r3, r0, #16
   210e4:	e1a03002 	mov	r3, r2
   210e8:	1afffffb 	bne	210dc <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x30>
   210ec:	e1e00000 	mvn	r0, r0
   210f0:	e6ff0070 	uxth	r0, r0
   210f4:	e8bd8010 	pop	{r4, pc}
   210f8:	e3a0204a 	mov	r2, #74	; 0x4a
   210fc:	e59f1014 	ldr	r1, [pc, #20]	; 21118 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   21100:	e59f0014 	ldr	r0, [pc, #20]	; 2111c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   21104:	eb000bee 	bl	240c4 <assertion_failed>
   21108:	e3a0204b 	mov	r2, #75	; 0x4b
   2110c:	e59f1004 	ldr	r1, [pc, #4]	; 21118 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   21110:	e59f0008 	ldr	r0, [pc, #8]	; 21120 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x74>
   21114:	eb000bea 	bl	240c4 <assertion_failed>
   21118:	00045d8c 	.word	0x00045d8c
   2111c:	000423b8 	.word	0x000423b8
   21120:	0004522c 	.word	0x0004522c

00021124 <CChecksumCalculator::FoldResult(unsigned int)>:
   21124:	e1a03820 	lsr	r3, r0, #16
   21128:	e3530000 	cmp	r3, #0
   2112c:	e6ff3073 	uxth	r3, r3
   21130:	0a000004 	beq	21148 <CChecksumCalculator::FoldResult(unsigned int)+0x24>
   21134:	e3a02001 	mov	r2, #1
   21138:	e6f30070 	uxtah	r0, r3, r0
   2113c:	e1b03820 	lsrs	r3, r0, #16
   21140:	e1a03002 	mov	r3, r2
   21144:	1afffffb 	bne	21138 <CChecksumCalculator::FoldResult(unsigned int)+0x14>
   21148:	e6ff0070 	uxth	r0, r0
   2114c:	e12fff1e 	bx	lr

00021150 <CDHCPClient::HaltNetwork() [clone .part.0]>:
   21150:	e92d4010 	push	{r4, lr}
   21154:	e59f2008 	ldr	r2, [pc, #8]	; 21164 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   21158:	e59f1008 	ldr	r1, [pc, #8]	; 21168 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   2115c:	e59f0008 	ldr	r0, [pc, #8]	; 2116c <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   21160:	eb000bd7 	bl	240c4 <assertion_failed>
   21164:	000001ae 	.word	0x000001ae
   21168:	00045e0c 	.word	0x00045e0c
   2116c:	000451a4 	.word	0x000451a4

00021170 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   21170:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21174:	e1a04000 	mov	r4, r0
   21178:	e1a05001 	mov	r5, r1
   2117c:	e3a01902 	mov	r1, #32768	; 0x8000
   21180:	e1a06002 	mov	r6, r2
   21184:	eb00097d 	bl	23780 <CTask::CTask(unsigned int)>
   21188:	e59f30a0 	ldr	r3, [pc, #160]	; 21230 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   2118c:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   21190:	e5843000 	str	r3, [r4]
   21194:	e1a00005 	mov	r0, r5
   21198:	ebffdfa8 	bl	19040 <CNetSubSystem::GetConfig()>
   2119c:	e28470e4 	add	r7, r4, #228	; 0xe4
   211a0:	e3560000 	cmp	r6, #0
   211a4:	e59f1088 	ldr	r1, [pc, #136]	; 21234 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   211a8:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   211ac:	11a01006 	movne	r1, r6
   211b0:	e1a00007 	mov	r0, r7
   211b4:	eb0018a0 	bl	2743c <CString::CString(char const*)>
   211b8:	e3a02011 	mov	r2, #17
   211bc:	e1a01005 	mov	r1, r5
   211c0:	e28400f4 	add	r0, r4, #244	; 0xf4
   211c4:	eb00065a 	bl	22b34 <CSocket::CSocket(CNetSubSystem*, int)>
   211c8:	e3a02000 	mov	r2, #0
   211cc:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   211d0:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   211d4:	e1530002 	cmp	r3, r2
   211d8:	0a000008 	beq	21200 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   211dc:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   211e0:	e3530000 	cmp	r3, #0
   211e4:	0a000009 	beq	21210 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   211e8:	e1a00007 	mov	r0, r7
   211ec:	eb0018d0 	bl	27534 <CString::GetLength() const>
   211f0:	e350001e 	cmp	r0, #30
   211f4:	8a000009 	bhi	21220 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   211f8:	e1a00004 	mov	r0, r4
   211fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21200:	e3a02073 	mov	r2, #115	; 0x73
   21204:	e59f102c 	ldr	r1, [pc, #44]	; 21238 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21208:	e59f002c 	ldr	r0, [pc, #44]	; 2123c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   2120c:	eb000bac 	bl	240c4 <assertion_failed>
   21210:	e3a02074 	mov	r2, #116	; 0x74
   21214:	e59f101c 	ldr	r1, [pc, #28]	; 21238 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21218:	e59f0020 	ldr	r0, [pc, #32]	; 21240 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   2121c:	eb000ba8 	bl	240c4 <assertion_failed>
   21220:	e3a02076 	mov	r2, #118	; 0x76
   21224:	e59f100c 	ldr	r1, [pc, #12]	; 21238 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21228:	e59f0014 	ldr	r0, [pc, #20]	; 21244 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   2122c:	eb000ba4 	bl	240c4 <assertion_failed>
   21230:	00045dd0 	.word	0x00045dd0
   21234:	00049280 	.word	0x00049280
   21238:	00045e0c 	.word	0x00045e0c
   2123c:	00045178 	.word	0x00045178
   21240:	000451a4 	.word	0x000451a4
   21244:	00045e1c 	.word	0x00045e1c

00021248 <CDHCPClient::IsBound() const>:
   21248:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   2124c:	e12fff1e 	bx	lr

00021250 <CDHCPClient::HaltNetwork()>:
   21250:	e3a02000 	mov	r2, #0
   21254:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   21258:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   2125c:	e1530002 	cmp	r3, r2
   21260:	0a000001 	beq	2126c <CDHCPClient::HaltNetwork()+0x1c>
   21264:	e1a00003 	mov	r0, r3
   21268:	eafffcb8 	b	20550 <CNetConfig::Reset()>
   2126c:	e92d4010 	push	{r4, lr}
   21270:	ebffffb6 	bl	21150 <CDHCPClient::HaltNetwork() [clone .part.0]>

00021274 <CDHCPClient::CheckConfig()>:
   21274:	e92d4030 	push	{r4, r5, lr}
   21278:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   2127c:	e24dd014 	sub	sp, sp, #20
   21280:	e3530000 	cmp	r3, #0
   21284:	e1a04000 	mov	r4, r0
   21288:	0a00002e 	beq	21348 <CDHCPClient::CheckConfig()+0xd4>
   2128c:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   21290:	e3520000 	cmp	r2, #0
   21294:	0a00002b 	beq	21348 <CDHCPClient::CheckConfig()+0xd4>
   21298:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   2129c:	e3510000 	cmp	r1, #0
   212a0:	0a000028 	beq	21348 <CDHCPClient::CheckConfig()+0xd4>
   212a4:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   212a8:	e3500000 	cmp	r0, #0
   212ac:	0a000025 	beq	21348 <CDHCPClient::CheckConfig()+0xd4>
   212b0:	e0233001 	eor	r3, r3, r1
   212b4:	e1130002 	tst	r3, r2
   212b8:	1a000037 	bne	2139c <CDHCPClient::CheckConfig()+0x128>
   212bc:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   212c0:	e3550000 	cmp	r5, #0
   212c4:	0a000041 	beq	213d0 <CDHCPClient::CheckConfig()+0x15c>
   212c8:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   212cc:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   212d0:	e3520000 	cmp	r2, #0
   212d4:	1a00002b 	bne	21388 <CDHCPClient::CheckConfig()+0x114>
   212d8:	e3530000 	cmp	r3, #0
   212dc:	01a020a5 	lsreq	r2, r5, #1
   212e0:	004531a5 	subeq	r3, r5, r5, lsr #3
   212e4:	10652083 	rsbne	r2, r5, r3, lsl #1
   212e8:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   212ec:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   212f0:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   212f4:	e1550003 	cmp	r5, r3
   212f8:	23a00000 	movcs	r0, #0
   212fc:	33a00001 	movcc	r0, #1
   21300:	e1520003 	cmp	r2, r3
   21304:	83800001 	orrhi	r0, r0, #1
   21308:	e3500000 	cmp	r0, #0
   2130c:	03a00001 	moveq	r0, #1
   21310:	0a00001a 	beq	21380 <CDHCPClient::CheckConfig()+0x10c>
   21314:	eb00145d 	bl	26490 <CLogger::Get()>
   21318:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   2131c:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   21320:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   21324:	e58d1008 	str	r1, [sp, #8]
   21328:	e58d2004 	str	r2, [sp, #4]
   2132c:	e58d3000 	str	r3, [sp]
   21330:	e3a02002 	mov	r2, #2
   21334:	e59f30b0 	ldr	r3, [pc, #176]	; 213ec <CDHCPClient::CheckConfig()+0x178>
   21338:	e59f10b0 	ldr	r1, [pc, #176]	; 213f0 <CDHCPClient::CheckConfig()+0x17c>
   2133c:	eb001390 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21340:	e3a00000 	mov	r0, #0
   21344:	ea00000d 	b	21380 <CDHCPClient::CheckConfig()+0x10c>
   21348:	eb001450 	bl	26490 <CLogger::Get()>
   2134c:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21350:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   21354:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21358:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   2135c:	e58d1008 	str	r1, [sp, #8]
   21360:	e58d2004 	str	r2, [sp, #4]
   21364:	e58d3000 	str	r3, [sp]
   21368:	e58dc00c 	str	ip, [sp, #12]
   2136c:	e59f3080 	ldr	r3, [pc, #128]	; 213f4 <CDHCPClient::CheckConfig()+0x180>
   21370:	e3a02002 	mov	r2, #2
   21374:	e59f1074 	ldr	r1, [pc, #116]	; 213f0 <CDHCPClient::CheckConfig()+0x17c>
   21378:	eb001381 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2137c:	e3a00000 	mov	r0, #0
   21380:	e28dd014 	add	sp, sp, #20
   21384:	e8bd8030 	pop	{r4, r5, pc}
   21388:	e3530000 	cmp	r3, #0
   2138c:	00453002 	subeq	r3, r5, r2
   21390:	008230a3 	addeq	r3, r2, r3, lsr #1
   21394:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21398:	eaffffd5 	b	212f4 <CDHCPClient::CheckConfig()+0x80>
   2139c:	eb00143b 	bl	26490 <CLogger::Get()>
   213a0:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   213a4:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   213a8:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   213ac:	e58d1008 	str	r1, [sp, #8]
   213b0:	e58d2004 	str	r2, [sp, #4]
   213b4:	e58d3000 	str	r3, [sp]
   213b8:	e3a02002 	mov	r2, #2
   213bc:	e59f3034 	ldr	r3, [pc, #52]	; 213f8 <CDHCPClient::CheckConfig()+0x184>
   213c0:	e59f1028 	ldr	r1, [pc, #40]	; 213f0 <CDHCPClient::CheckConfig()+0x17c>
   213c4:	eb00136e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   213c8:	e3a00000 	mov	r0, #0
   213cc:	eaffffeb 	b	21380 <CDHCPClient::CheckConfig()+0x10c>
   213d0:	eb00142e 	bl	26490 <CLogger::Get()>
   213d4:	e59f3020 	ldr	r3, [pc, #32]	; 213fc <CDHCPClient::CheckConfig()+0x188>
   213d8:	e3a02002 	mov	r2, #2
   213dc:	e59f100c 	ldr	r1, [pc, #12]	; 213f0 <CDHCPClient::CheckConfig()+0x17c>
   213e0:	eb001367 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   213e4:	e1a00005 	mov	r0, r5
   213e8:	eaffffe4 	b	21380 <CDHCPClient::CheckConfig()+0x10c>
   213ec:	00045eb0 	.word	0x00045eb0
   213f0:	00045ddc 	.word	0x00045ddc
   213f4:	00045e3c 	.word	0x00045e3c
   213f8:	00045e6c 	.word	0x00045e6c
   213fc:	00045e98 	.word	0x00045e98

00021400 <CDHCPClient::GetUnaligned(void const*)>:
   21400:	e3500000 	cmp	r0, #0
   21404:	0a000001 	beq	21410 <CDHCPClient::GetUnaligned(void const*)+0x10>
   21408:	e5900000 	ldr	r0, [r0]
   2140c:	e12fff1e 	bx	lr
   21410:	e92d4010 	push	{r4, lr}
   21414:	e3a02e36 	mov	r2, #864	; 0x360
   21418:	e59f1004 	ldr	r1, [pc, #4]	; 21424 <CDHCPClient::GetUnaligned(void const*)+0x24>
   2141c:	e59f0004 	ldr	r0, [pc, #4]	; 21428 <CDHCPClient::GetUnaligned(void const*)+0x28>
   21420:	eb000b27 	bl	240c4 <assertion_failed>
   21424:	00045e0c 	.word	0x00045e0c
   21428:	00045ed0 	.word	0x00045ed0

0002142c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   2142c:	e3510000 	cmp	r1, #0
   21430:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21434:	11a07000 	movne	r7, r0
   21438:	11a04001 	movne	r4, r1
   2143c:	10816002 	addne	r6, r1, r2
   21440:	0a000079 	beq	2162c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x200>
   21444:	e2840002 	add	r0, r4, #2
   21448:	e1560000 	cmp	r6, r0
   2144c:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   21450:	e5d43000 	ldrb	r3, [r4]
   21454:	e3530034 	cmp	r3, #52	; 0x34
   21458:	0a000034 	beq	21530 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x104>
   2145c:	8a00000d 	bhi	21498 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   21460:	e3530003 	cmp	r3, #3
   21464:	0a000043 	beq	21578 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21468:	8a00001a 	bhi	214d8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xac>
   2146c:	e3530000 	cmp	r3, #0
   21470:	02844001 	addeq	r4, r4, #1
   21474:	0afffff2 	beq	21444 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21478:	e3530001 	cmp	r3, #1
   2147c:	1a000027 	bne	21520 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21480:	e5d45001 	ldrb	r5, [r4, #1]
   21484:	e3550004 	cmp	r5, #4
   21488:	0a000061 	beq	21614 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1e8>
   2148c:	e2855002 	add	r5, r5, #2
   21490:	e0844005 	add	r4, r4, r5
   21494:	eaffffea 	b	21444 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21498:	e353003a 	cmp	r3, #58	; 0x3a
   2149c:	0a000049 	beq	215c8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x19c>
   214a0:	8a00001a 	bhi	21510 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xe4>
   214a4:	e3530035 	cmp	r3, #53	; 0x35
   214a8:	0a00003e 	beq	215a8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x17c>
   214ac:	e3530036 	cmp	r3, #54	; 0x36
   214b0:	1a00001a 	bne	21520 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   214b4:	e5d45001 	ldrb	r5, [r4, #1]
   214b8:	e3550004 	cmp	r5, #4
   214bc:	1afffff2 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   214c0:	e2843006 	add	r3, r4, #6
   214c4:	e1560003 	cmp	r6, r3
   214c8:	3affffef 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   214cc:	ebffffcb 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   214d0:	e58701d4 	str	r0, [r7, #468]	; 0x1d4
   214d4:	eaffffec 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   214d8:	e3530006 	cmp	r3, #6
   214dc:	0a000043 	beq	215f0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1c4>
   214e0:	e3530033 	cmp	r3, #51	; 0x33
   214e4:	1a00000d 	bne	21520 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   214e8:	e5d45001 	ldrb	r5, [r4, #1]
   214ec:	e3550004 	cmp	r5, #4
   214f0:	1affffe5 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   214f4:	e2843006 	add	r3, r4, #6
   214f8:	e1560003 	cmp	r6, r3
   214fc:	3affffe2 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21500:	ebffffbe 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   21504:	e6bf0f30 	rev	r0, r0
   21508:	e58701cc 	str	r0, [r7, #460]	; 0x1cc
   2150c:	eaffffde 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21510:	e353003b 	cmp	r3, #59	; 0x3b
   21514:	0a00000d 	beq	21550 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x124>
   21518:	e35300ff 	cmp	r3, #255	; 0xff
   2151c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21520:	e5d45001 	ldrb	r5, [r4, #1]
   21524:	e2855002 	add	r5, r5, #2
   21528:	e0844005 	add	r4, r4, r5
   2152c:	eaffffc4 	b	21444 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21530:	e5d45001 	ldrb	r5, [r4, #1]
   21534:	e3550001 	cmp	r5, #1
   21538:	1affffd3 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   2153c:	e2843003 	add	r3, r4, #3
   21540:	e1560003 	cmp	r6, r3
   21544:	25d43002 	ldrbcs	r3, [r4, #2]
   21548:	25c731d0 	strbcs	r3, [r7, #464]	; 0x1d0
   2154c:	eaffffce 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21550:	e5d45001 	ldrb	r5, [r4, #1]
   21554:	e3550004 	cmp	r5, #4
   21558:	1affffcb 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   2155c:	e2843006 	add	r3, r4, #6
   21560:	e1560003 	cmp	r6, r3
   21564:	3affffc8 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21568:	ebffffa4 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   2156c:	e6bf0f30 	rev	r0, r0
   21570:	e58701dc 	str	r0, [r7, #476]	; 0x1dc
   21574:	eaffffc4 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21578:	e5d45001 	ldrb	r5, [r4, #1]
   2157c:	e3550003 	cmp	r5, #3
   21580:	daffffc1 	ble	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21584:	e2843006 	add	r3, r4, #6
   21588:	e1560003 	cmp	r6, r3
   2158c:	3affffbe 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21590:	e59731c4 	ldr	r3, [r7, #452]	; 0x1c4
   21594:	e3530000 	cmp	r3, #0
   21598:	1affffbb 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   2159c:	ebffff97 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   215a0:	e58701c4 	str	r0, [r7, #452]	; 0x1c4
   215a4:	eaffffb8 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215a8:	e5d45001 	ldrb	r5, [r4, #1]
   215ac:	e3550001 	cmp	r5, #1
   215b0:	1affffb5 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215b4:	e2843003 	add	r3, r4, #3
   215b8:	e1560003 	cmp	r6, r3
   215bc:	25d43002 	ldrbcs	r3, [r4, #2]
   215c0:	25c731d1 	strbcs	r3, [r7, #465]	; 0x1d1
   215c4:	eaffffb0 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215c8:	e5d45001 	ldrb	r5, [r4, #1]
   215cc:	e3550004 	cmp	r5, #4
   215d0:	1affffad 	bne	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215d4:	e2843006 	add	r3, r4, #6
   215d8:	e1560003 	cmp	r6, r3
   215dc:	3affffaa 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215e0:	ebffff86 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   215e4:	e6bf0f30 	rev	r0, r0
   215e8:	e58701d8 	str	r0, [r7, #472]	; 0x1d8
   215ec:	eaffffa6 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215f0:	e5d45001 	ldrb	r5, [r4, #1]
   215f4:	e3550003 	cmp	r5, #3
   215f8:	daffffa3 	ble	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   215fc:	e2843006 	add	r3, r4, #6
   21600:	e1560003 	cmp	r6, r3
   21604:	3affffa0 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21608:	ebffff7c 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   2160c:	e58701c8 	str	r0, [r7, #456]	; 0x1c8
   21610:	eaffff9d 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21614:	e2843006 	add	r3, r4, #6
   21618:	e1560003 	cmp	r6, r3
   2161c:	3affff9a 	bcc	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21620:	ebffff76 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   21624:	e58701c0 	str	r0, [r7, #448]	; 0x1c0
   21628:	eaffff97 	b	2148c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   2162c:	e59f2008 	ldr	r2, [pc, #8]	; 2163c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x210>
   21630:	e59f1008 	ldr	r1, [pc, #8]	; 21640 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x214>
   21634:	e59f0008 	ldr	r0, [pc, #8]	; 21644 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   21638:	eb000aa1 	bl	240c4 <assertion_failed>
   2163c:	000002ad 	.word	0x000002ad
   21640:	00045e0c 	.word	0x00045e0c
   21644:	00045edc 	.word	0x00045edc

00021648 <CDHCPClient::GetXID() const>:
   21648:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   2164c:	e92d4010 	push	{r4, lr}
   21650:	e3500000 	cmp	r0, #0
   21654:	0a00000b 	beq	21688 <CDHCPClient::GetXID() const+0x40>
   21658:	ebffde7a 	bl	19048 <CNetSubSystem::GetNetDeviceLayer()>
   2165c:	ebffe7ac 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   21660:	eb00240a 	bl	2a690 <CMACAddress::Get() const>
   21664:	e2504000 	subs	r4, r0, #0
   21668:	0a00000a 	beq	21698 <CDHCPClient::GetXID() const+0x50>
   2166c:	eb002053 	bl	297c0 <CTimer::Get()>
   21670:	e2840002 	add	r0, r4, #2
   21674:	ebffff61 	bl	21400 <CDHCPClient::GetUnaligned(void const*)>
   21678:	e1a04000 	mov	r4, r0
   2167c:	eb001d92 	bl	28ccc <CTimer::GetClockTicks()>
   21680:	e0840000 	add	r0, r4, r0
   21684:	e8bd8010 	pop	{r4, pc}
   21688:	e59f2018 	ldr	r2, [pc, #24]	; 216a8 <CDHCPClient::GetXID() const+0x60>
   2168c:	e59f1018 	ldr	r1, [pc, #24]	; 216ac <CDHCPClient::GetXID() const+0x64>
   21690:	e59f0018 	ldr	r0, [pc, #24]	; 216b0 <CDHCPClient::GetXID() const+0x68>
   21694:	eb000a8a 	bl	240c4 <assertion_failed>
   21698:	e3a02fd6 	mov	r2, #856	; 0x358
   2169c:	e59f1008 	ldr	r1, [pc, #8]	; 216ac <CDHCPClient::GetXID() const+0x64>
   216a0:	e59f000c 	ldr	r0, [pc, #12]	; 216b4 <CDHCPClient::GetXID() const+0x6c>
   216a4:	eb000a86 	bl	240c4 <assertion_failed>
   216a8:	00000356 	.word	0x00000356
   216ac:	00045e0c 	.word	0x00045e0c
   216b0:	00045178 	.word	0x00045178
   216b4:	00045514 	.word	0x00045514

000216b8 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   216b8:	e3500000 	cmp	r0, #0
   216bc:	0a000007 	beq	216e0 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   216c0:	e1a0c421 	lsr	ip, r1, #8
   216c4:	e1a02821 	lsr	r2, r1, #16
   216c8:	e1a03c21 	lsr	r3, r1, #24
   216cc:	e5c01000 	strb	r1, [r0]
   216d0:	e5c0c001 	strb	ip, [r0, #1]
   216d4:	e5c02002 	strb	r2, [r0, #2]
   216d8:	e5c03003 	strb	r3, [r0, #3]
   216dc:	e12fff1e 	bx	lr
   216e0:	e92d4010 	push	{r4, lr}
   216e4:	e59f2008 	ldr	r2, [pc, #8]	; 216f4 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   216e8:	e59f1008 	ldr	r1, [pc, #8]	; 216f8 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   216ec:	e59f0008 	ldr	r0, [pc, #8]	; 216fc <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   216f0:	eb000a73 	bl	240c4 <assertion_failed>
   216f4:	0000036d 	.word	0x0000036d
   216f8:	00045e0c 	.word	0x00045e0c
   216fc:	00045ed0 	.word	0x00045ed0

00021700 <CDHCPClient::~CDHCPClient()>:
   21700:	e3a02000 	mov	r2, #0
   21704:	e92d4010 	push	{r4, lr}
   21708:	e1a04000 	mov	r4, r0
   2170c:	e59f3024 	ldr	r3, [pc, #36]	; 21738 <CDHCPClient::~CDHCPClient()+0x38>
   21710:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21714:	e5803000 	str	r3, [r0]
   21718:	e28000f4 	add	r0, r0, #244	; 0xf4
   2171c:	eb0003f5 	bl	226f8 <CSocket::~CSocket()>
   21720:	e28400e4 	add	r0, r4, #228	; 0xe4
   21724:	eb00170b 	bl	27358 <CString::~CString()>
   21728:	e1a00004 	mov	r0, r4
   2172c:	eb0007c0 	bl	23634 <CTask::~CTask()>
   21730:	e1a00004 	mov	r0, r4
   21734:	e8bd8010 	pop	{r4, pc}
   21738:	00045dd0 	.word	0x00045dd0

0002173c <CDHCPClient::~CDHCPClient()>:
   2173c:	e92d4010 	push	{r4, lr}
   21740:	e1a04000 	mov	r4, r0
   21744:	ebffffed 	bl	21700 <CDHCPClient::~CDHCPClient()>
   21748:	e1a00004 	mov	r0, r4
   2174c:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21750:	eb002485 	bl	2a96c <operator delete(void*, unsigned int)>
   21754:	e1a00004 	mov	r0, r4
   21758:	e8bd8010 	pop	{r4, pc}

0002175c <CDHCPClient::ReceiveMessage()>:
   2175c:	e92d4070 	push	{r4, r5, r6, lr}
   21760:	e24dde23 	sub	sp, sp, #560	; 0x230
   21764:	e1a04000 	mov	r4, r0
   21768:	e3a03040 	mov	r3, #64	; 0x40
   2176c:	e28000f4 	add	r0, r0, #244	; 0xf4
   21770:	e3a02f89 	mov	r2, #548	; 0x224
   21774:	e28d100c 	add	r1, sp, #12
   21778:	eb00046a 	bl	22928 <CSocket::Receive(void*, unsigned int, int)>
   2177c:	e35000ef 	cmp	r0, #239	; 0xef
   21780:	da000002 	ble	21790 <CDHCPClient::ReceiveMessage()+0x34>
   21784:	e5dd300c 	ldrb	r3, [sp, #12]
   21788:	e3530002 	cmp	r3, #2
   2178c:	0a000003 	beq	217a0 <CDHCPClient::ReceiveMessage()+0x44>
   21790:	e3a04000 	mov	r4, #0
   21794:	e1a00004 	mov	r0, r4
   21798:	e28dde23 	add	sp, sp, #560	; 0x230
   2179c:	e8bd8070 	pop	{r4, r5, r6, pc}
   217a0:	e5dd300d 	ldrb	r3, [sp, #13]
   217a4:	e3530001 	cmp	r3, #1
   217a8:	1afffff8 	bne	21790 <CDHCPClient::ReceiveMessage()+0x34>
   217ac:	e5dd300e 	ldrb	r3, [sp, #14]
   217b0:	e3530006 	cmp	r3, #6
   217b4:	1afffff5 	bne	21790 <CDHCPClient::ReceiveMessage()+0x34>
   217b8:	e59d2010 	ldr	r2, [sp, #16]
   217bc:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   217c0:	e1520003 	cmp	r2, r3
   217c4:	1afffff1 	bne	21790 <CDHCPClient::ReceiveMessage()+0x34>
   217c8:	e59f3114 	ldr	r3, [pc, #276]	; 218e4 <CDHCPClient::ReceiveMessage()+0x188>
   217cc:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   217d0:	e1520003 	cmp	r2, r3
   217d4:	1affffed 	bne	21790 <CDHCPClient::ReceiveMessage()+0x34>
   217d8:	e1a05000 	mov	r5, r0
   217dc:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   217e0:	e3500000 	cmp	r0, #0
   217e4:	0a000036 	beq	218c4 <CDHCPClient::ReceiveMessage()+0x168>
   217e8:	ebffde16 	bl	19048 <CNetSubSystem::GetNetDeviceLayer()>
   217ec:	ebffe748 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   217f0:	e2506000 	subs	r6, r0, #0
   217f4:	0a000036 	beq	218d4 <CDHCPClient::ReceiveMessage()+0x178>
   217f8:	e28d1028 	add	r1, sp, #40	; 0x28
   217fc:	e28d0004 	add	r0, sp, #4
   21800:	eb002394 	bl	2a658 <CMACAddress::CMACAddress(unsigned char const*)>
   21804:	e1a01006 	mov	r1, r6
   21808:	e28d0004 	add	r0, sp, #4
   2180c:	eb00237c 	bl	2a604 <CMACAddress::operator!=(CMACAddress const&) const>
   21810:	e3500000 	cmp	r0, #0
   21814:	13a04000 	movne	r4, #0
   21818:	0a000002 	beq	21828 <CDHCPClient::ReceiveMessage()+0xcc>
   2181c:	e28d0004 	add	r0, sp, #4
   21820:	eb00235e 	bl	2a5a0 <CMACAddress::~CMACAddress()>
   21824:	eaffffda 	b	21794 <CDHCPClient::ReceiveMessage()+0x38>
   21828:	e59d301c 	ldr	r3, [sp, #28]
   2182c:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21830:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21834:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21838:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   2183c:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21840:	e5c401d0 	strb	r0, [r4, #464]	; 0x1d0
   21844:	e5c401d1 	strb	r0, [r4, #465]	; 0x1d1
   21848:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   2184c:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21850:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21854:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
   21858:	e28d10fc 	add	r1, sp, #252	; 0xfc
   2185c:	e1a00004 	mov	r0, r4
   21860:	ebfffef1 	bl	2142c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21864:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21868:	e3530002 	cmp	r3, #2
   2186c:	0a00000e 	beq	218ac <CDHCPClient::ReceiveMessage()+0x150>
   21870:	e3530003 	cmp	r3, #3
   21874:	0a000008 	beq	2189c <CDHCPClient::ReceiveMessage()+0x140>
   21878:	e3530001 	cmp	r3, #1
   2187c:	13a04001 	movne	r4, #1
   21880:	1affffe5 	bne	2181c <CDHCPClient::ReceiveMessage()+0xc0>
   21884:	e1a00004 	mov	r0, r4
   21888:	e3a02080 	mov	r2, #128	; 0x80
   2188c:	e28d1078 	add	r1, sp, #120	; 0x78
   21890:	e1a04003 	mov	r4, r3
   21894:	ebfffee4 	bl	2142c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21898:	eaffffdf 	b	2181c <CDHCPClient::ReceiveMessage()+0xc0>
   2189c:	e3a02080 	mov	r2, #128	; 0x80
   218a0:	e28d1078 	add	r1, sp, #120	; 0x78
   218a4:	e1a00004 	mov	r0, r4
   218a8:	ebfffedf 	bl	2142c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   218ac:	e1a00004 	mov	r0, r4
   218b0:	e3a02040 	mov	r2, #64	; 0x40
   218b4:	e28d1038 	add	r1, sp, #56	; 0x38
   218b8:	ebfffedb 	bl	2142c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   218bc:	e3a04001 	mov	r4, #1
   218c0:	eaffffd5 	b	2181c <CDHCPClient::ReceiveMessage()+0xc0>
   218c4:	e59f201c 	ldr	r2, [pc, #28]	; 218e8 <CDHCPClient::ReceiveMessage()+0x18c>
   218c8:	e59f101c 	ldr	r1, [pc, #28]	; 218ec <CDHCPClient::ReceiveMessage()+0x190>
   218cc:	e59f001c 	ldr	r0, [pc, #28]	; 218f0 <CDHCPClient::ReceiveMessage()+0x194>
   218d0:	eb0009fb 	bl	240c4 <assertion_failed>
   218d4:	e59f2018 	ldr	r2, [pc, #24]	; 218f4 <CDHCPClient::ReceiveMessage()+0x198>
   218d8:	e59f100c 	ldr	r1, [pc, #12]	; 218ec <CDHCPClient::ReceiveMessage()+0x190>
   218dc:	e59f0014 	ldr	r0, [pc, #20]	; 218f8 <CDHCPClient::ReceiveMessage()+0x19c>
   218e0:	eb0009f7 	bl	240c4 <assertion_failed>
   218e4:	63538263 	.word	0x63538263
   218e8:	0000027b 	.word	0x0000027b
   218ec:	00045e0c 	.word	0x00045e0c
   218f0:	00045178 	.word	0x00045178
   218f4:	0000027d 	.word	0x0000027d
   218f8:	00045390 	.word	0x00045390

000218fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   218fc:	e92d4070 	push	{r4, r5, r6, lr}
   21900:	e1a04000 	mov	r4, r0
   21904:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   21908:	e1a05001 	mov	r5, r1
   2190c:	e1a06002 	mov	r6, r2
   21910:	e3a01000 	mov	r1, #0
   21914:	e3a02f89 	mov	r2, #548	; 0x224
   21918:	e28d0004 	add	r0, sp, #4
   2191c:	eb001fb4 	bl	297f4 <memset>
   21920:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   21924:	e3a02001 	mov	r2, #1
   21928:	e3530000 	cmp	r3, #0
   2192c:	13a03080 	movne	r3, #128	; 0x80
   21930:	03a03000 	moveq	r3, #0
   21934:	e3a01006 	mov	r1, #6
   21938:	e1cd30be 	strh	r3, [sp, #14]
   2193c:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21940:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21944:	e58d3008 	str	r3, [sp, #8]
   21948:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   2194c:	e3500000 	cmp	r0, #0
   21950:	e58d3010 	str	r3, [sp, #16]
   21954:	e59f30b0 	ldr	r3, [pc, #176]	; 21a0c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   21958:	e5cd2004 	strb	r2, [sp, #4]
   2195c:	e5cd2005 	strb	r2, [sp, #5]
   21960:	e5cd1006 	strb	r1, [sp, #6]
   21964:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   21968:	0a000017 	beq	219cc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xd0>
   2196c:	ebffddb5 	bl	19048 <CNetSubSystem::GetNetDeviceLayer()>
   21970:	ebffe6e7 	bl	1b514 <CNetDeviceLayer::GetMACAddress() const>
   21974:	e3500000 	cmp	r0, #0
   21978:	0a000017 	beq	219dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   2197c:	e28d1020 	add	r1, sp, #32
   21980:	eb00234e 	bl	2a6c0 <CMACAddress::CopyTo(unsigned char*) const>
   21984:	e3550000 	cmp	r5, #0
   21988:	0a000017 	beq	219ec <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   2198c:	e3560f4d 	cmp	r6, #308	; 0x134
   21990:	8a000019 	bhi	219fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x100>
   21994:	e1a02006 	mov	r2, r6
   21998:	e1a01005 	mov	r1, r5
   2199c:	e28d00f4 	add	r0, sp, #244	; 0xf4
   219a0:	eb00220a 	bl	2a1d0 <memcpy>
   219a4:	e28d1004 	add	r1, sp, #4
   219a8:	e28400f4 	add	r0, r4, #244	; 0xf4
   219ac:	e3a03000 	mov	r3, #0
   219b0:	e3a02f89 	mov	r2, #548	; 0x224
   219b4:	eb0003be 	bl	228b4 <CSocket::Send(void const*, unsigned int, int)>
   219b8:	e2400f89 	sub	r0, r0, #548	; 0x224
   219bc:	e16f0f10 	clz	r0, r0
   219c0:	e1a002a0 	lsr	r0, r0, #5
   219c4:	e28ddf8a 	add	sp, sp, #552	; 0x228
   219c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   219cc:	e3a02f96 	mov	r2, #600	; 0x258
   219d0:	e59f1038 	ldr	r1, [pc, #56]	; 21a10 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   219d4:	e59f0038 	ldr	r0, [pc, #56]	; 21a14 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   219d8:	eb0009b9 	bl	240c4 <assertion_failed>
   219dc:	e59f2034 	ldr	r2, [pc, #52]	; 21a18 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   219e0:	e59f1028 	ldr	r1, [pc, #40]	; 21a10 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   219e4:	e59f0030 	ldr	r0, [pc, #48]	; 21a1c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   219e8:	eb0009b5 	bl	240c4 <assertion_failed>
   219ec:	e59f202c 	ldr	r2, [pc, #44]	; 21a20 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   219f0:	e59f1018 	ldr	r1, [pc, #24]	; 21a10 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   219f4:	e59f0028 	ldr	r0, [pc, #40]	; 21a24 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   219f8:	eb0009b1 	bl	240c4 <assertion_failed>
   219fc:	e59f2024 	ldr	r2, [pc, #36]	; 21a28 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   21a00:	e59f1008 	ldr	r1, [pc, #8]	; 21a10 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   21a04:	e59f0020 	ldr	r0, [pc, #32]	; 21a2c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   21a08:	eb0009ad 	bl	240c4 <assertion_failed>
   21a0c:	63538263 	.word	0x63538263
   21a10:	00045e0c 	.word	0x00045e0c
   21a14:	00045178 	.word	0x00045178
   21a18:	0000025a 	.word	0x0000025a
   21a1c:	00045514 	.word	0x00045514
   21a20:	0000025d 	.word	0x0000025d
   21a24:	00045edc 	.word	0x00045edc
   21a28:	0000025e 	.word	0x0000025e
   21a2c:	00045eec 	.word	0x00045eec

00021a30 <CDHCPClient::SendDiscover()>:
   21a30:	e3a01000 	mov	r1, #0
   21a34:	e3a0200c 	mov	r2, #12
   21a38:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   21a3c:	e59f1000 	ldr	r1, [pc]	; 21a44 <CDHCPClient::SendDiscover()+0x14>
   21a40:	eaffffad 	b	218fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21a44:	00045de4 	.word	0x00045de4

00021a48 <CDHCPClient::SendRequest(unsigned int)>:
   21a48:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21a4c:	e3510000 	cmp	r1, #0
   21a50:	e28db01c 	add	fp, sp, #28
   21a54:	e1a06000 	mov	r6, r0
   21a58:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   21a5c:	1a000036 	bne	21b3c <CDHCPClient::SendRequest(unsigned int)+0xf4>
   21a60:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   21a64:	e59f1104 	ldr	r1, [pc, #260]	; 21b70 <CDHCPClient::SendRequest(unsigned int)+0x128>
   21a68:	e1a05822 	lsr	r5, r2, #16
   21a6c:	e1a04c22 	lsr	r4, r2, #24
   21a70:	e5c15007 	strb	r5, [r1, #7]
   21a74:	e5c14008 	strb	r4, [r1, #8]
   21a78:	e3a05018 	mov	r5, #24
   21a7c:	e1a04001 	mov	r4, r1
   21a80:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   21a84:	e1a00422 	lsr	r0, r2, #8
   21a88:	e1a0e423 	lsr	lr, r3, #8
   21a8c:	e1a0c823 	lsr	ip, r3, #16
   21a90:	e5c10006 	strb	r0, [r1, #6]
   21a94:	e1a00c23 	lsr	r0, r3, #24
   21a98:	e5c12005 	strb	r2, [r1, #5]
   21a9c:	e5c1300b 	strb	r3, [r1, #11]
   21aa0:	e5c1e00c 	strb	lr, [r1, #12]
   21aa4:	e5c1c00d 	strb	ip, [r1, #13]
   21aa8:	e5c1000e 	strb	r0, [r1, #14]
   21aac:	e28680e4 	add	r8, r6, #228	; 0xe4
   21ab0:	e1a00008 	mov	r0, r8
   21ab4:	eb00169e 	bl	27534 <CString::GetLength() const>
   21ab8:	e2507000 	subs	r7, r0, #0
   21abc:	0a000021 	beq	21b48 <CDHCPClient::SendRequest(unsigned int)+0x100>
   21ac0:	e35700ff 	cmp	r7, #255	; 0xff
   21ac4:	8a000025 	bhi	21b60 <CDHCPClient::SendRequest(unsigned int)+0x118>
   21ac8:	e085c007 	add	ip, r5, r7
   21acc:	e28c3009 	add	r3, ip, #9
   21ad0:	e3c33007 	bic	r3, r3, #7
   21ad4:	e04dd003 	sub	sp, sp, r3
   21ad8:	e1a01004 	mov	r1, r4
   21adc:	e1a02005 	mov	r2, r5
   21ae0:	e1a0000d 	mov	r0, sp
   21ae4:	e28c9002 	add	r9, ip, #2
   21ae8:	eb0021b8 	bl	2a1d0 <memcpy>
   21aec:	e3a0200c 	mov	r2, #12
   21af0:	e2455001 	sub	r5, r5, #1
   21af4:	e08d3005 	add	r3, sp, r5
   21af8:	e7cd2005 	strb	r2, [sp, r5]
   21afc:	e1a00008 	mov	r0, r8
   21b00:	e5c37001 	strb	r7, [r3, #1]
   21b04:	e2834002 	add	r4, r3, #2
   21b08:	eb00165b 	bl	2747c <CString::operator char const*() const>
   21b0c:	e1a02007 	mov	r2, r7
   21b10:	e1a01000 	mov	r1, r0
   21b14:	e1a00004 	mov	r0, r4
   21b18:	eb0021ac 	bl	2a1d0 <memcpy>
   21b1c:	e3e03000 	mvn	r3, #0
   21b20:	e1a02009 	mov	r2, r9
   21b24:	e1a00006 	mov	r0, r6
   21b28:	e1a0100d 	mov	r1, sp
   21b2c:	e7c43007 	strb	r3, [r4, r7]
   21b30:	ebffff71 	bl	218fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21b34:	e24bd01c 	sub	sp, fp, #28
   21b38:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21b3c:	e3a0500c 	mov	r5, #12
   21b40:	e59f402c 	ldr	r4, [pc, #44]	; 21b74 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   21b44:	eaffffd8 	b	21aac <CDHCPClient::SendRequest(unsigned int)+0x64>
   21b48:	e1a02005 	mov	r2, r5
   21b4c:	e1a01004 	mov	r1, r4
   21b50:	e1a00006 	mov	r0, r6
   21b54:	ebffff68 	bl	218fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21b58:	e24bd01c 	sub	sp, fp, #28
   21b5c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21b60:	e59f2010 	ldr	r2, [pc, #16]	; 21b78 <CDHCPClient::SendRequest(unsigned int)+0x130>
   21b64:	e59f1010 	ldr	r1, [pc, #16]	; 21b7c <CDHCPClient::SendRequest(unsigned int)+0x134>
   21b68:	e59f0010 	ldr	r0, [pc, #16]	; 21b80 <CDHCPClient::SendRequest(unsigned int)+0x138>
   21b6c:	eb000954 	bl	240c4 <assertion_failed>
   21b70:	00049a88 	.word	0x00049a88
   21b74:	00045df0 	.word	0x00045df0
   21b78:	00000231 	.word	0x00000231
   21b7c:	00045e0c 	.word	0x00045e0c
   21b80:	00045f14 	.word	0x00045f14

00021b84 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   21b84:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b88:	e1a04000 	mov	r4, r0
   21b8c:	e1a07001 	mov	r7, r1
   21b90:	e3a0b002 	mov	fp, #2
   21b94:	e24dd014 	sub	sp, sp, #20
   21b98:	e59f8160 	ldr	r8, [pc, #352]	; 21d00 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x17c>
   21b9c:	e59fa160 	ldr	sl, [pc, #352]	; 21d04 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x180>
   21ba0:	e58d200c 	str	r2, [sp, #12]
   21ba4:	e3570000 	cmp	r7, #0
   21ba8:	0a00003f 	beq	21cac <CDHCPClient::SendAndReceive(bool, unsigned int)+0x128>
   21bac:	e59d100c 	ldr	r1, [sp, #12]
   21bb0:	e1a00004 	mov	r0, r4
   21bb4:	ebffffa3 	bl	21a48 <CDHCPClient::SendRequest(unsigned int)>
   21bb8:	e2200001 	eor	r0, r0, #1
   21bbc:	e6ef0070 	uxtb	r0, r0
   21bc0:	e3500000 	cmp	r0, #0
   21bc4:	1a000040 	bne	21ccc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x148>
   21bc8:	eb001efc 	bl	297c0 <CTimer::Get()>
   21bcc:	eb001c45 	bl	28ce8 <CTimer::GetTicks() const>
   21bd0:	e4985004 	ldr	r5, [r8], #4
   21bd4:	e1a06000 	mov	r6, r0
   21bd8:	ea000004 	b	21bf0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   21bdc:	e2433005 	sub	r3, r3, #5
   21be0:	e3530001 	cmp	r3, #1
   21be4:	9a000016 	bls	21c44 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   21be8:	eb000887 	bl	23e0c <CScheduler::Get()>
   21bec:	eb0007f3 	bl	23bc0 <CScheduler::Yield()>
   21bf0:	eb001ef2 	bl	297c0 <CTimer::Get()>
   21bf4:	eb001c3b 	bl	28ce8 <CTimer::GetTicks() const>
   21bf8:	e0400006 	sub	r0, r0, r6
   21bfc:	e1550000 	cmp	r5, r0
   21c00:	9a000012 	bls	21c50 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   21c04:	e1a00004 	mov	r0, r4
   21c08:	ebfffed3 	bl	2175c <CDHCPClient::ReceiveMessage()>
   21c0c:	e2509000 	subs	r9, r0, #0
   21c10:	0afffff4 	beq	21be8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   21c14:	e3570000 	cmp	r7, #0
   21c18:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   21c1c:	1affffee 	bne	21bdc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   21c20:	e3530002 	cmp	r3, #2
   21c24:	1affffef 	bne	21be8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   21c28:	e1a00004 	mov	r0, r4
   21c2c:	ebfffd90 	bl	21274 <CDHCPClient::CheckConfig()>
   21c30:	e3500000 	cmp	r0, #0
   21c34:	0affffeb 	beq	21be8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   21c38:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   21c3c:	e3530000 	cmp	r3, #0
   21c40:	0affffe8 	beq	21be8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   21c44:	e1a00009 	mov	r0, r9
   21c48:	e28dd014 	add	sp, sp, #20
   21c4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c50:	eb00120e 	bl	26490 <CLogger::Get()>
   21c54:	e1a0300a 	mov	r3, sl
   21c58:	e1a0200b 	mov	r2, fp
   21c5c:	e59f10a4 	ldr	r1, [pc, #164]	; 21d08 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   21c60:	eb001147 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21c64:	e59f30a0 	ldr	r3, [pc, #160]	; 21d0c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   21c68:	e1530008 	cmp	r3, r8
   21c6c:	1affffcc 	bne	21ba4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x20>
   21c70:	eb001206 	bl	26490 <CLogger::Get()>
   21c74:	e59f2094 	ldr	r2, [pc, #148]	; 21d10 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   21c78:	e59f1094 	ldr	r1, [pc, #148]	; 21d14 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   21c7c:	e3570000 	cmp	r7, #0
   21c80:	01a07002 	moveq	r7, r2
   21c84:	11a07001 	movne	r7, r1
   21c88:	e3a09000 	mov	r9, #0
   21c8c:	e59f3084 	ldr	r3, [pc, #132]	; 21d18 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   21c90:	e3a02002 	mov	r2, #2
   21c94:	e58d7000 	str	r7, [sp]
   21c98:	e59f1068 	ldr	r1, [pc, #104]	; 21d08 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   21c9c:	eb001138 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21ca0:	e1a00009 	mov	r0, r9
   21ca4:	e28dd014 	add	sp, sp, #20
   21ca8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cac:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   21cb0:	e3a0200c 	mov	r2, #12
   21cb4:	e59f1060 	ldr	r1, [pc, #96]	; 21d1c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   21cb8:	e1a00004 	mov	r0, r4
   21cbc:	ebffff0e 	bl	218fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21cc0:	e2200001 	eor	r0, r0, #1
   21cc4:	e6ef0070 	uxtb	r0, r0
   21cc8:	eaffffbc 	b	21bc0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x3c>
   21ccc:	eb0011ef 	bl	26490 <CLogger::Get()>
   21cd0:	e59f2048 	ldr	r2, [pc, #72]	; 21d20 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   21cd4:	e59f1048 	ldr	r1, [pc, #72]	; 21d24 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   21cd8:	e3570000 	cmp	r7, #0
   21cdc:	01a07002 	moveq	r7, r2
   21ce0:	11a07001 	movne	r7, r1
   21ce4:	e59f303c 	ldr	r3, [pc, #60]	; 21d28 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   21ce8:	e3a02001 	mov	r2, #1
   21cec:	e58d7000 	str	r7, [sp]
   21cf0:	e59f1010 	ldr	r1, [pc, #16]	; 21d08 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   21cf4:	eb001122 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21cf8:	e3a09000 	mov	r9, #0
   21cfc:	eaffffd0 	b	21c44 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   21d00:	00045dfc 	.word	0x00045dfc
   21d04:	00045f60 	.word	0x00045f60
   21d08:	00045ddc 	.word	0x00045ddc
   21d0c:	00045e0c 	.word	0x00045e0c
   21d10:	00045f48 	.word	0x00045f48
   21d14:	00045f3c 	.word	0x00045f3c
   21d18:	00045f84 	.word	0x00045f84
   21d1c:	00045de4 	.word	0x00045de4
   21d20:	00045f30 	.word	0x00045f30
   21d24:	00045f28 	.word	0x00045f28
   21d28:	00045f50 	.word	0x00045f50

00021d2c <CDHCPClient::SelectAndRequest()>:
   21d2c:	e92d4070 	push	{r4, r5, r6, lr}
   21d30:	e3a05001 	mov	r5, #1
   21d34:	e1a04000 	mov	r4, r0
   21d38:	e24dd028 	sub	sp, sp, #40	; 0x28
   21d3c:	e5c051b0 	strb	r5, [r0, #432]	; 0x1b0
   21d40:	e28d0008 	add	r0, sp, #8
   21d44:	ebfffa41 	bl	20650 <CIPAddress::CIPAddress()>
   21d48:	e28460f4 	add	r6, r4, #244	; 0xf4
   21d4c:	e28d0008 	add	r0, sp, #8
   21d50:	ebfffae9 	bl	208fc <CIPAddress::SetBroadcast()>
   21d54:	e1a00006 	mov	r0, r6
   21d58:	e28d1008 	add	r1, sp, #8
   21d5c:	e3a02043 	mov	r2, #67	; 0x43
   21d60:	eb0001f1 	bl	2252c <CSocket::Connect(CIPAddress&, unsigned short)>
   21d64:	e3500000 	cmp	r0, #0
   21d68:	ba00001a 	blt	21dd8 <CDHCPClient::SelectAndRequest()+0xac>
   21d6c:	e1a00006 	mov	r0, r6
   21d70:	e1a01005 	mov	r1, r5
   21d74:	eb000347 	bl	22a98 <CSocket::SetOptionBroadcast(bool)>
   21d78:	e2506000 	subs	r6, r0, #0
   21d7c:	1a00000e 	bne	21dbc <CDHCPClient::SelectAndRequest()+0x90>
   21d80:	e1a00004 	mov	r0, r4
   21d84:	ebfffe2f 	bl	21648 <CDHCPClient::GetXID() const>
   21d88:	e1a02006 	mov	r2, r6
   21d8c:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   21d90:	e1a01006 	mov	r1, r6
   21d94:	e1a00004 	mov	r0, r4
   21d98:	ebffff79 	bl	21b84 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21d9c:	e3500000 	cmp	r0, #0
   21da0:	1a000015 	bne	21dfc <CDHCPClient::SelectAndRequest()+0xd0>
   21da4:	e3a04002 	mov	r4, #2
   21da8:	e28d0008 	add	r0, sp, #8
   21dac:	ebfffa3d 	bl	206a8 <CIPAddress::~CIPAddress()>
   21db0:	e1a00004 	mov	r0, r4
   21db4:	e28dd028 	add	sp, sp, #40	; 0x28
   21db8:	e8bd8070 	pop	{r4, r5, r6, pc}
   21dbc:	eb0011b3 	bl	26490 <CLogger::Get()>
   21dc0:	e59f31f0 	ldr	r3, [pc, #496]	; 21fb8 <CDHCPClient::SelectAndRequest()+0x28c>
   21dc4:	e1a02005 	mov	r2, r5
   21dc8:	e59f11ec 	ldr	r1, [pc, #492]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21dcc:	e1a04005 	mov	r4, r5
   21dd0:	eb0010eb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21dd4:	eafffff3 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21dd8:	eb0011ac 	bl	26490 <CLogger::Get()>
   21ddc:	e3a02043 	mov	r2, #67	; 0x43
   21de0:	e59f31d8 	ldr	r3, [pc, #472]	; 21fc0 <CDHCPClient::SelectAndRequest()+0x294>
   21de4:	e58d2000 	str	r2, [sp]
   21de8:	e59f11cc 	ldr	r1, [pc, #460]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21dec:	e1a02005 	mov	r2, r5
   21df0:	e1a04005 	mov	r4, r5
   21df4:	eb0010e2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21df8:	eaffffea 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21dfc:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21e00:	e3530000 	cmp	r3, #0
   21e04:	e584319c 	str	r3, [r4, #412]	; 0x19c
   21e08:	0a000023 	beq	21e9c <CDHCPClient::SelectAndRequest()+0x170>
   21e0c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   21e10:	e3530000 	cmp	r3, #0
   21e14:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   21e18:	0a000023 	beq	21eac <CDHCPClient::SelectAndRequest()+0x180>
   21e1c:	e1a02006 	mov	r2, r6
   21e20:	e1a01005 	mov	r1, r5
   21e24:	e1a00004 	mov	r0, r4
   21e28:	ebffff55 	bl	21b84 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21e2c:	e3500000 	cmp	r0, #0
   21e30:	0affffdb 	beq	21da4 <CDHCPClient::SelectAndRequest()+0x78>
   21e34:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   21e38:	e3530006 	cmp	r3, #6
   21e3c:	0a00000f 	beq	21e80 <CDHCPClient::SelectAndRequest()+0x154>
   21e40:	e1a00004 	mov	r0, r4
   21e44:	ebfffd0a 	bl	21274 <CDHCPClient::CheckConfig()>
   21e48:	e3500000 	cmp	r0, #0
   21e4c:	03a04004 	moveq	r4, #4
   21e50:	0affffd4 	beq	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21e54:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   21e58:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21e5c:	e1520003 	cmp	r2, r3
   21e60:	0a000015 	beq	21ebc <CDHCPClient::SelectAndRequest()+0x190>
   21e64:	eb001189 	bl	26490 <CLogger::Get()>
   21e68:	e59f3154 	ldr	r3, [pc, #340]	; 21fc4 <CDHCPClient::SelectAndRequest()+0x298>
   21e6c:	e3a02002 	mov	r2, #2
   21e70:	e59f1144 	ldr	r1, [pc, #324]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21e74:	eb0010c2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21e78:	e3a04005 	mov	r4, #5
   21e7c:	eaffffc9 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21e80:	eb001182 	bl	26490 <CLogger::Get()>
   21e84:	e59f313c 	ldr	r3, [pc, #316]	; 21fc8 <CDHCPClient::SelectAndRequest()+0x29c>
   21e88:	e3a02002 	mov	r2, #2
   21e8c:	e59f1128 	ldr	r1, [pc, #296]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21e90:	eb0010bb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21e94:	e3a04003 	mov	r4, #3
   21e98:	eaffffc2 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21e9c:	e3a020f9 	mov	r2, #249	; 0xf9
   21ea0:	e59f1124 	ldr	r1, [pc, #292]	; 21fcc <CDHCPClient::SelectAndRequest()+0x2a0>
   21ea4:	e59f0124 	ldr	r0, [pc, #292]	; 21fd0 <CDHCPClient::SelectAndRequest()+0x2a4>
   21ea8:	eb000885 	bl	240c4 <assertion_failed>
   21eac:	e3a020fc 	mov	r2, #252	; 0xfc
   21eb0:	e59f1114 	ldr	r1, [pc, #276]	; 21fcc <CDHCPClient::SelectAndRequest()+0x2a0>
   21eb4:	e59f0118 	ldr	r0, [pc, #280]	; 21fd4 <CDHCPClient::SelectAndRequest()+0x2a8>
   21eb8:	eb000881 	bl	240c4 <assertion_failed>
   21ebc:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   21ec0:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   21ec4:	e1520003 	cmp	r2, r3
   21ec8:	0a000006 	beq	21ee8 <CDHCPClient::SelectAndRequest()+0x1bc>
   21ecc:	eb00116f 	bl	26490 <CLogger::Get()>
   21ed0:	e59f3100 	ldr	r3, [pc, #256]	; 21fd8 <CDHCPClient::SelectAndRequest()+0x2ac>
   21ed4:	e3a02002 	mov	r2, #2
   21ed8:	e59f10dc 	ldr	r1, [pc, #220]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21edc:	eb0010a8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21ee0:	e3a04005 	mov	r4, #5
   21ee4:	eaffffaf 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21ee8:	e28d0010 	add	r0, sp, #16
   21eec:	ebfff9d7 	bl	20650 <CIPAddress::CIPAddress()>
   21ef0:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   21ef4:	e28d0010 	add	r0, sp, #16
   21ef8:	ebfffa57 	bl	2085c <CIPAddress::Set(unsigned int)>
   21efc:	e28d0018 	add	r0, sp, #24
   21f00:	eb001547 	bl	27424 <CString::CString()>
   21f04:	e28d1018 	add	r1, sp, #24
   21f08:	e28d0010 	add	r0, sp, #16
   21f0c:	ebfffacd 	bl	20a48 <CIPAddress::Format(CString*) const>
   21f10:	eb00115e 	bl	26490 <CLogger::Get()>
   21f14:	e1a05000 	mov	r5, r0
   21f18:	e28d0018 	add	r0, sp, #24
   21f1c:	eb001556 	bl	2747c <CString::operator char const*() const>
   21f20:	e59f30b4 	ldr	r3, [pc, #180]	; 21fdc <CDHCPClient::SelectAndRequest()+0x2b0>
   21f24:	e58d0000 	str	r0, [sp]
   21f28:	e3a02003 	mov	r2, #3
   21f2c:	e1a00005 	mov	r0, r5
   21f30:	e59f1084 	ldr	r1, [pc, #132]	; 21fbc <CDHCPClient::SelectAndRequest()+0x290>
   21f34:	eb001092 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21f38:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21f3c:	e3500000 	cmp	r0, #0
   21f40:	0a000018 	beq	21fa8 <CDHCPClient::SelectAndRequest()+0x27c>
   21f44:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   21f48:	ebfff9a4 	bl	205e0 <CNetConfig::SetIPAddress(unsigned int)>
   21f4c:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21f50:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21f54:	ebfff9a8 	bl	205fc <CNetConfig::SetNetMask(unsigned int)>
   21f58:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21f5c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21f60:	ebfff956 	bl	204c0 <CNetConfig::SetDefaultGateway(unsigned int)>
   21f64:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   21f68:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21f6c:	ebfff955 	bl	204c8 <CNetConfig::SetDNSServer(unsigned int)>
   21f70:	e3a0c001 	mov	ip, #1
   21f74:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21f78:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21f7c:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   21f80:	e5c4c194 	strb	ip, [r4, #404]	; 0x194
   21f84:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   21f88:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   21f8c:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   21f90:	e28d0018 	add	r0, sp, #24
   21f94:	eb0014ef 	bl	27358 <CString::~CString()>
   21f98:	e28d0010 	add	r0, sp, #16
   21f9c:	ebfff9c1 	bl	206a8 <CIPAddress::~CIPAddress()>
   21fa0:	e3a04000 	mov	r4, #0
   21fa4:	eaffff7f 	b	21da8 <CDHCPClient::SelectAndRequest()+0x7c>
   21fa8:	e59f2030 	ldr	r2, [pc, #48]	; 21fe0 <CDHCPClient::SelectAndRequest()+0x2b4>
   21fac:	e59f1018 	ldr	r1, [pc, #24]	; 21fcc <CDHCPClient::SelectAndRequest()+0x2a0>
   21fb0:	e59f002c 	ldr	r0, [pc, #44]	; 21fe4 <CDHCPClient::SelectAndRequest()+0x2b8>
   21fb4:	eb000842 	bl	240c4 <assertion_failed>
   21fb8:	00045fbc 	.word	0x00045fbc
   21fbc:	00045ddc 	.word	0x00045ddc
   21fc0:	00045f98 	.word	0x00045f98
   21fc4:	00046028 	.word	0x00046028
   21fc8:	0004600c 	.word	0x0004600c
   21fcc:	00045e0c 	.word	0x00045e0c
   21fd0:	00045fd8 	.word	0x00045fd8
   21fd4:	00045ff0 	.word	0x00045ff0
   21fd8:	00046040 	.word	0x00046040
   21fdc:	00046060 	.word	0x00046060
   21fe0:	00000126 	.word	0x00000126
   21fe4:	000451a4 	.word	0x000451a4

00021fe8 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   21fe8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   21fec:	e1a05000 	mov	r5, r0
   21ff0:	e24dd014 	sub	sp, sp, #20
   21ff4:	e1a04001 	mov	r4, r1
   21ff8:	e1a06002 	mov	r6, r2
   21ffc:	eb001def 	bl	297c0 <CTimer::Get()>
   22000:	eb001b3a 	bl	28cf0 <CTimer::GetUptime() const>
   22004:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22008:	e0400003 	sub	r0, r0, r3
   2200c:	e1500006 	cmp	r0, r6
   22010:	23a04002 	movcs	r4, #2
   22014:	3a000002 	bcc	22024 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   22018:	e1a00004 	mov	r0, r4
   2201c:	e28dd014 	add	sp, sp, #20
   22020:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22024:	eb001119 	bl	26490 <CLogger::Get()>
   22028:	e3540000 	cmp	r4, #0
   2202c:	0a00003d 	beq	22128 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x140>
   22030:	e59f92b8 	ldr	r9, [pc, #696]	; 222f0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x308>
   22034:	e59f32b8 	ldr	r3, [pc, #696]	; 222f4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   22038:	e59f12b8 	ldr	r1, [pc, #696]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2203c:	e3a02004 	mov	r2, #4
   22040:	e28d8008 	add	r8, sp, #8
   22044:	e58d9000 	str	r9, [sp]
   22048:	eb00104d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2204c:	e1a00008 	mov	r0, r8
   22050:	ebfff97e 	bl	20650 <CIPAddress::CIPAddress()>
   22054:	e3a03000 	mov	r3, #0
   22058:	e1a00008 	mov	r0, r8
   2205c:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   22060:	e59511a0 	ldr	r1, [r5, #416]	; 0x1a0
   22064:	ebfff9fc 	bl	2085c <CIPAddress::Set(unsigned int)>
   22068:	e28540f4 	add	r4, r5, #244	; 0xf4
   2206c:	e1a00004 	mov	r0, r4
   22070:	e3a02043 	mov	r2, #67	; 0x43
   22074:	e1a01008 	mov	r1, r8
   22078:	eb00012b 	bl	2252c <CSocket::Connect(CIPAddress&, unsigned short)>
   2207c:	e3500000 	cmp	r0, #0
   22080:	ba000036 	blt	22160 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x178>
   22084:	e1a00004 	mov	r0, r4
   22088:	e5d511b0 	ldrb	r1, [r5, #432]	; 0x1b0
   2208c:	eb000281 	bl	22a98 <CSocket::SetOptionBroadcast(bool)>
   22090:	e3500000 	cmp	r0, #0
   22094:	03a07001 	moveq	r7, #1
   22098:	0a000016 	beq	220f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x110>
   2209c:	ea00003e 	b	2219c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b4>
   220a0:	e1a00005 	mov	r0, r5
   220a4:	ebfffd67 	bl	21648 <CDHCPClient::GetXID() const>
   220a8:	e595219c 	ldr	r2, [r5, #412]	; 0x19c
   220ac:	e58501b4 	str	r0, [r5, #436]	; 0x1b4
   220b0:	e1a01007 	mov	r1, r7
   220b4:	e1a00005 	mov	r0, r5
   220b8:	ebfffeb1 	bl	21b84 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   220bc:	e3500000 	cmp	r0, #0
   220c0:	1a00003c 	bne	221b8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1d0>
   220c4:	eb001dbd 	bl	297c0 <CTimer::Get()>
   220c8:	eb001b08 	bl	28cf0 <CTimer::GetUptime() const>
   220cc:	e5951198 	ldr	r1, [r5, #408]	; 0x198
   220d0:	e0400001 	sub	r0, r0, r1
   220d4:	e1560000 	cmp	r6, r0
   220d8:	9a00000c 	bls	22110 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x128>
   220dc:	e0460000 	sub	r0, r6, r0
   220e0:	e1a040a0 	lsr	r4, r0, #1
   220e4:	eb000748 	bl	23e0c <CScheduler::Get()>
   220e8:	e354003c 	cmp	r4, #60	; 0x3c
   220ec:	21a01004 	movcs	r1, r4
   220f0:	33a0103c 	movcc	r1, #60	; 0x3c
   220f4:	eb00070a 	bl	23d24 <CScheduler::Sleep(unsigned int)>
   220f8:	eb001db0 	bl	297c0 <CTimer::Get()>
   220fc:	eb001afb 	bl	28cf0 <CTimer::GetUptime() const>
   22100:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22104:	e0400003 	sub	r0, r0, r3
   22108:	e1560000 	cmp	r6, r0
   2210c:	8affffe3 	bhi	220a0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xb8>
   22110:	e3a04002 	mov	r4, #2
   22114:	e1a00008 	mov	r0, r8
   22118:	ebfff962 	bl	206a8 <CIPAddress::~CIPAddress()>
   2211c:	e1a00004 	mov	r0, r4
   22120:	e28dd014 	add	sp, sp, #20
   22124:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22128:	e59f91cc 	ldr	r9, [pc, #460]	; 222fc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   2212c:	e59f31c0 	ldr	r3, [pc, #448]	; 222f4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   22130:	e3a02004 	mov	r2, #4
   22134:	e59f11bc 	ldr	r1, [pc, #444]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22138:	e28d8008 	add	r8, sp, #8
   2213c:	e58d9000 	str	r9, [sp]
   22140:	eb00100f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22144:	e1a00008 	mov	r0, r8
   22148:	ebfff940 	bl	20650 <CIPAddress::CIPAddress()>
   2214c:	e3a03001 	mov	r3, #1
   22150:	e1a00008 	mov	r0, r8
   22154:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   22158:	ebfff9e7 	bl	208fc <CIPAddress::SetBroadcast()>
   2215c:	eaffffc1 	b	22068 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x80>
   22160:	eb0010ca 	bl	26490 <CLogger::Get()>
   22164:	e5d5c1b0 	ldrb	ip, [r5, #432]	; 0x1b0
   22168:	e59f1190 	ldr	r1, [pc, #400]	; 22300 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   2216c:	e35c0000 	cmp	ip, #0
   22170:	e59f318c 	ldr	r3, [pc, #396]	; 22304 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   22174:	e3a02043 	mov	r2, #67	; 0x43
   22178:	01a03001 	moveq	r3, r1
   2217c:	e58d2004 	str	r2, [sp, #4]
   22180:	e58d3000 	str	r3, [sp]
   22184:	e3a02001 	mov	r2, #1
   22188:	e59f3178 	ldr	r3, [pc, #376]	; 22308 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   2218c:	e59f1164 	ldr	r1, [pc, #356]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22190:	eb000ffb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22194:	e3a04001 	mov	r4, #1
   22198:	eaffffdd 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2219c:	eb0010bb 	bl	26490 <CLogger::Get()>
   221a0:	e59f3164 	ldr	r3, [pc, #356]	; 2230c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   221a4:	e3a02001 	mov	r2, #1
   221a8:	e59f1148 	ldr	r1, [pc, #328]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   221ac:	eb000ff4 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   221b0:	e3a04001 	mov	r4, #1
   221b4:	eaffffd6 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   221b8:	e5d531d1 	ldrb	r3, [r5, #465]	; 0x1d1
   221bc:	e3530006 	cmp	r3, #6
   221c0:	0a00001f 	beq	22244 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x25c>
   221c4:	e1a00005 	mov	r0, r5
   221c8:	ebfffc29 	bl	21274 <CDHCPClient::CheckConfig()>
   221cc:	e3500000 	cmp	r0, #0
   221d0:	0a000019 	beq	2223c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x254>
   221d4:	e59531d4 	ldr	r3, [r5, #468]	; 0x1d4
   221d8:	e3530000 	cmp	r3, #0
   221dc:	e58531a0 	str	r3, [r5, #416]	; 0x1a0
   221e0:	0a00001e 	beq	22260 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x278>
   221e4:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   221e8:	e3500000 	cmp	r0, #0
   221ec:	0a00003b 	beq	222e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2f8>
   221f0:	ebfff8ba 	bl	204e0 <CNetConfig::GetIPAddress() const>
   221f4:	e59511bc 	ldr	r1, [r5, #444]	; 0x1bc
   221f8:	ebfff985 	bl	20814 <CIPAddress::operator!=(unsigned int) const>
   221fc:	e3500000 	cmp	r0, #0
   22200:	1a00001d 	bne	2227c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x294>
   22204:	e59511cc 	ldr	r1, [r5, #460]	; 0x1cc
   22208:	e59521d8 	ldr	r2, [r5, #472]	; 0x1d8
   2220c:	e59531dc 	ldr	r3, [r5, #476]	; 0x1dc
   22210:	e58511a4 	str	r1, [r5, #420]	; 0x1a4
   22214:	e58521a8 	str	r2, [r5, #424]	; 0x1a8
   22218:	e58531ac 	str	r3, [r5, #428]	; 0x1ac
   2221c:	eb00109b 	bl	26490 <CLogger::Get()>
   22220:	e58d9000 	str	r9, [sp]
   22224:	e59f30e4 	ldr	r3, [pc, #228]	; 22310 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   22228:	e3a02004 	mov	r2, #4
   2222c:	e59f10c4 	ldr	r1, [pc, #196]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22230:	eb000fd3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22234:	e3a04000 	mov	r4, #0
   22238:	eaffffb5 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2223c:	e3a04004 	mov	r4, #4
   22240:	eaffffb3 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22244:	eb001091 	bl	26490 <CLogger::Get()>
   22248:	e59f30c4 	ldr	r3, [pc, #196]	; 22314 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   2224c:	e3a02002 	mov	r2, #2
   22250:	e59f10a0 	ldr	r1, [pc, #160]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22254:	eb000fca 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22258:	e3a04003 	mov	r4, #3
   2225c:	eaffffac 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22260:	eb00108a 	bl	26490 <CLogger::Get()>
   22264:	e59f30ac 	ldr	r3, [pc, #172]	; 22318 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   22268:	e3a02002 	mov	r2, #2
   2226c:	e59f1084 	ldr	r1, [pc, #132]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22270:	eb000fc3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22274:	e3a04004 	mov	r4, #4
   22278:	eaffffa5 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2227c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22280:	ebfff89a 	bl	204f0 <CNetConfig::GetNetMask() const>
   22284:	e59531c0 	ldr	r3, [r5, #448]	; 0x1c0
   22288:	e5902000 	ldr	r2, [r0]
   2228c:	e1520003 	cmp	r2, r3
   22290:	0affffdb 	beq	22204 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   22294:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22298:	ebfff896 	bl	204f8 <CNetConfig::GetDefaultGateway() const>
   2229c:	e59511c4 	ldr	r1, [r5, #452]	; 0x1c4
   222a0:	ebfff95b 	bl	20814 <CIPAddress::operator!=(unsigned int) const>
   222a4:	e3500000 	cmp	r0, #0
   222a8:	0affffd5 	beq	22204 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   222ac:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   222b0:	ebfff892 	bl	20500 <CNetConfig::GetDNSServer() const>
   222b4:	e59511c8 	ldr	r1, [r5, #456]	; 0x1c8
   222b8:	ebfff955 	bl	20814 <CIPAddress::operator!=(unsigned int) const>
   222bc:	e3500000 	cmp	r0, #0
   222c0:	0affffcf 	beq	22204 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   222c4:	eb001071 	bl	26490 <CLogger::Get()>
   222c8:	e59f304c 	ldr	r3, [pc, #76]	; 2231c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   222cc:	e3a02002 	mov	r2, #2
   222d0:	e59f1020 	ldr	r1, [pc, #32]	; 222f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   222d4:	eb000faa 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   222d8:	e3a04005 	mov	r4, #5
   222dc:	eaffff8c 	b	22114 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   222e0:	e59f2038 	ldr	r2, [pc, #56]	; 22320 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   222e4:	e59f1038 	ldr	r1, [pc, #56]	; 22324 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   222e8:	e59f0038 	ldr	r0, [pc, #56]	; 22328 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   222ec:	eb000774 	bl	240c4 <assertion_failed>
   222f0:	00046074 	.word	0x00046074
   222f4:	000460dc 	.word	0x000460dc
   222f8:	00045ddc 	.word	0x00045ddc
   222fc:	00046080 	.word	0x00046080
   22300:	00046094 	.word	0x00046094
   22304:	0004608c 	.word	0x0004608c
   22308:	00046098 	.word	0x00046098
   2230c:	00045fbc 	.word	0x00045fbc
   22310:	0004610c 	.word	0x0004610c
   22314:	0004600c 	.word	0x0004600c
   22318:	000460bc 	.word	0x000460bc
   2231c:	000460e8 	.word	0x000460e8
   22320:	00000195 	.word	0x00000195
   22324:	00045e0c 	.word	0x00045e0c
   22328:	000451a4 	.word	0x000451a4

0002232c <CDHCPClient::Run()>:
   2232c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22330:	e28040f4 	add	r4, r0, #244	; 0xf4
   22334:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   22338:	e1a07000 	mov	r7, r0
   2233c:	e3a01044 	mov	r1, #68	; 0x44
   22340:	e1a00004 	mov	r0, r4
   22344:	eb000061 	bl	224d0 <CSocket::Bind(unsigned short)>
   22348:	e3500000 	cmp	r0, #0
   2234c:	ba000053 	blt	224a0 <CDHCPClient::Run()+0x174>
   22350:	e3a06040 	mov	r6, #64	; 0x40
   22354:	e3a05f89 	mov	r5, #548	; 0x224
   22358:	e3a0800a 	mov	r8, #10
   2235c:	e59fa160 	ldr	sl, [pc, #352]	; 224c4 <CDHCPClient::Run()+0x198>
   22360:	e59fb160 	ldr	fp, [pc, #352]	; 224c8 <CDHCPClient::Run()+0x19c>
   22364:	e1a00007 	mov	r0, r7
   22368:	ebfffe6f 	bl	21d2c <CDHCPClient::SelectAndRequest()>
   2236c:	e3500001 	cmp	r0, #1
   22370:	0a000009 	beq	2239c <CDHCPClient::Run()+0x70>
   22374:	3a00000a 	bcc	223a4 <CDHCPClient::Run()+0x78>
   22378:	e3500005 	cmp	r0, #5
   2237c:	8a000008 	bhi	223a4 <CDHCPClient::Run()+0x78>
   22380:	eb0006a1 	bl	23e0c <CScheduler::Get()>
   22384:	e3a0103c 	mov	r1, #60	; 0x3c
   22388:	eb000665 	bl	23d24 <CScheduler::Sleep(unsigned int)>
   2238c:	e1a00007 	mov	r0, r7
   22390:	ebfffe65 	bl	21d2c <CDHCPClient::SelectAndRequest()>
   22394:	e3500001 	cmp	r0, #1
   22398:	1afffff5 	bne	22374 <CDHCPClient::Run()+0x48>
   2239c:	e28ddf8d 	add	sp, sp, #564	; 0x234
   223a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223a4:	e3a09001 	mov	r9, #1
   223a8:	eb001d04 	bl	297c0 <CTimer::Get()>
   223ac:	eb001a4f 	bl	28cf0 <CTimer::GetUptime() const>
   223b0:	e5870198 	str	r0, [r7, #408]	; 0x198
   223b4:	eb001d01 	bl	297c0 <CTimer::Get()>
   223b8:	eb001a4c 	bl	28cf0 <CTimer::GetUptime() const>
   223bc:	e5973198 	ldr	r3, [r7, #408]	; 0x198
   223c0:	e59721a8 	ldr	r2, [r7, #424]	; 0x1a8
   223c4:	e0400003 	sub	r0, r0, r3
   223c8:	e1500002 	cmp	r0, r2
   223cc:	3a000002 	bcc	223dc <CDHCPClient::Run()+0xb0>
   223d0:	ea00000c 	b	22408 <CDHCPClient::Run()+0xdc>
   223d4:	eb00068c 	bl	23e0c <CScheduler::Get()>
   223d8:	eb0005f8 	bl	23bc0 <CScheduler::Yield()>
   223dc:	e1a03006 	mov	r3, r6
   223e0:	e1a02005 	mov	r2, r5
   223e4:	e28d100c 	add	r1, sp, #12
   223e8:	e1a00004 	mov	r0, r4
   223ec:	eb00014d 	bl	22928 <CSocket::Receive(void*, unsigned int, int)>
   223f0:	e3500000 	cmp	r0, #0
   223f4:	cafffff6 	bgt	223d4 <CDHCPClient::Run()+0xa8>
   223f8:	eb000683 	bl	23e0c <CScheduler::Get()>
   223fc:	e1a01008 	mov	r1, r8
   22400:	eb000647 	bl	23d24 <CScheduler::Sleep(unsigned int)>
   22404:	eaffffea 	b	223b4 <CDHCPClient::Run()+0x88>
   22408:	e59721ac 	ldr	r2, [r7, #428]	; 0x1ac
   2240c:	e1a01009 	mov	r1, r9
   22410:	e1a00007 	mov	r0, r7
   22414:	ebfffef3 	bl	21fe8 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22418:	e3500005 	cmp	r0, #5
   2241c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22420:	ea000011 	b	2246c <CDHCPClient::Run()+0x140>
   22424:	000223a8 	.word	0x000223a8
   22428:	0002239c 	.word	0x0002239c
   2242c:	0002246c 	.word	0x0002246c
   22430:	00022450 	.word	0x00022450
   22434:	00022450 	.word	0x00022450
   22438:	00022450 	.word	0x00022450
   2243c:	eb001013 	bl	26490 <CLogger::Get()>
   22440:	e1a0300a 	mov	r3, sl
   22444:	e3a02001 	mov	r2, #1
   22448:	e1a0100b 	mov	r1, fp
   2244c:	eb000f4c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22450:	e3a03000 	mov	r3, #0
   22454:	e59700e0 	ldr	r0, [r7, #224]	; 0xe0
   22458:	e5c73194 	strb	r3, [r7, #404]	; 0x194
   2245c:	e1500003 	cmp	r0, r3
   22460:	0a000016 	beq	224c0 <CDHCPClient::Run()+0x194>
   22464:	ebfff839 	bl	20550 <CNetConfig::Reset()>
   22468:	eaffffbd 	b	22364 <CDHCPClient::Run()+0x38>
   2246c:	e59721a4 	ldr	r2, [r7, #420]	; 0x1a4
   22470:	e3a01000 	mov	r1, #0
   22474:	e1a00007 	mov	r0, r7
   22478:	ebfffeda 	bl	21fe8 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   2247c:	e3500005 	cmp	r0, #5
   22480:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22484:	eaffffec 	b	2243c <CDHCPClient::Run()+0x110>
   22488:	000223a8 	.word	0x000223a8
   2248c:	0002239c 	.word	0x0002239c
   22490:	0002243c 	.word	0x0002243c
   22494:	00022450 	.word	0x00022450
   22498:	00022450 	.word	0x00022450
   2249c:	00022450 	.word	0x00022450
   224a0:	eb000ffa 	bl	26490 <CLogger::Get()>
   224a4:	e3a02044 	mov	r2, #68	; 0x44
   224a8:	e59f301c 	ldr	r3, [pc, #28]	; 224cc <CDHCPClient::Run()+0x1a0>
   224ac:	e58d2000 	str	r2, [sp]
   224b0:	e59f1010 	ldr	r1, [pc, #16]	; 224c8 <CDHCPClient::Run()+0x19c>
   224b4:	e3a02001 	mov	r2, #1
   224b8:	eb000f31 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   224bc:	eaffffb6 	b	2239c <CDHCPClient::Run()+0x70>
   224c0:	ebfffb22 	bl	21150 <CDHCPClient::HaltNetwork() [clone .part.0]>
   224c4:	00046134 	.word	0x00046134
   224c8:	00045ddc 	.word	0x00045ddc
   224cc:	0004611c 	.word	0x0004611c

000224d0 <CSocket::Bind(unsigned short)>:
   224d0:	e251c000 	subs	ip, r1, #0
   224d4:	0a00000b 	beq	22508 <CSocket::Bind(unsigned short)+0x38>
   224d8:	e1d031b4 	ldrh	r3, [r0, #20]
   224dc:	e3530000 	cmp	r3, #0
   224e0:	1a000008 	bne	22508 <CSocket::Bind(unsigned short)+0x38>
   224e4:	e5902018 	ldr	r2, [r0, #24]
   224e8:	e3520000 	cmp	r2, #0
   224ec:	aa000005 	bge	22508 <CSocket::Bind(unsigned short)+0x38>
   224f0:	e5902010 	ldr	r2, [r0, #16]
   224f4:	e1c0c1b4 	strh	ip, [r0, #20]
   224f8:	e3520011 	cmp	r2, #17
   224fc:	0a000003 	beq	22510 <CSocket::Bind(unsigned short)+0x40>
   22500:	e1a00003 	mov	r0, r3
   22504:	e12fff1e 	bx	lr
   22508:	e3e00000 	mvn	r0, #0
   2250c:	e12fff1e 	bx	lr
   22510:	e92d4010 	push	{r4, lr}
   22514:	e1a04000 	mov	r4, r0
   22518:	e590000c 	ldr	r0, [r0, #12]
   2251c:	ebffdba3 	bl	193b0 <CTransportLayer::Bind(unsigned short, int)>
   22520:	e5840018 	str	r0, [r4, #24]
   22524:	e0000fc0 	and	r0, r0, r0, asr #31
   22528:	e8bd8010 	pop	{r4, pc}

0002252c <CSocket::Connect(CIPAddress&, unsigned short)>:
   2252c:	e92d4070 	push	{r4, r5, r6, lr}
   22530:	e2525000 	subs	r5, r2, #0
   22534:	e24dd008 	sub	sp, sp, #8
   22538:	0a000017 	beq	2259c <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   2253c:	e1a04000 	mov	r4, r0
   22540:	e590000c 	ldr	r0, [r0, #12]
   22544:	e1a06001 	mov	r6, r1
   22548:	e3500000 	cmp	r0, #0
   2254c:	0a000024 	beq	225e4 <CSocket::Connect(CIPAddress&, unsigned short)+0xb8>
   22550:	e5941018 	ldr	r1, [r4, #24]
   22554:	e3510000 	cmp	r1, #0
   22558:	ba000005 	blt	22574 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   2255c:	e5943010 	ldr	r3, [r4, #16]
   22560:	e3530011 	cmp	r3, #17
   22564:	1a00000c 	bne	2259c <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22568:	ebffdd1f 	bl	199ec <CTransportLayer::Disconnect(int)>
   2256c:	e3e03000 	mvn	r3, #0
   22570:	e5843018 	str	r3, [r4, #24]
   22574:	e5940008 	ldr	r0, [r4, #8]
   22578:	e3500000 	cmp	r0, #0
   2257c:	0a00001c 	beq	225f4 <CSocket::Connect(CIPAddress&, unsigned short)+0xc8>
   22580:	ebfff7d6 	bl	204e0 <CNetConfig::GetIPAddress() const>
   22584:	ebfff910 	bl	209cc <CIPAddress::IsNull() const>
   22588:	e3500000 	cmp	r0, #0
   2258c:	0a000009 	beq	225b8 <CSocket::Connect(CIPAddress&, unsigned short)+0x8c>
   22590:	e5943010 	ldr	r3, [r4, #16]
   22594:	e3530011 	cmp	r3, #17
   22598:	0a000002 	beq	225a8 <CSocket::Connect(CIPAddress&, unsigned short)+0x7c>
   2259c:	e3e00000 	mvn	r0, #0
   225a0:	e28dd008 	add	sp, sp, #8
   225a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   225a8:	e1a00006 	mov	r0, r6
   225ac:	ebfff914 	bl	20a04 <CIPAddress::IsBroadcast() const>
   225b0:	e3500000 	cmp	r0, #0
   225b4:	0afffff8 	beq	2259c <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   225b8:	e594c010 	ldr	ip, [r4, #16]
   225bc:	e1d431b4 	ldrh	r3, [r4, #20]
   225c0:	e594000c 	ldr	r0, [r4, #12]
   225c4:	e1a02005 	mov	r2, r5
   225c8:	e1a01006 	mov	r1, r6
   225cc:	e58dc000 	str	ip, [sp]
   225d0:	ebffdbd0 	bl	19518 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   225d4:	e5840018 	str	r0, [r4, #24]
   225d8:	e0000fc0 	and	r0, r0, r0, asr #31
   225dc:	e28dd008 	add	sp, sp, #8
   225e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   225e4:	e3a02070 	mov	r2, #112	; 0x70
   225e8:	e59f1014 	ldr	r1, [pc, #20]	; 22604 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   225ec:	e59f0014 	ldr	r0, [pc, #20]	; 22608 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   225f0:	eb0006b3 	bl	240c4 <assertion_failed>
   225f4:	e3a0207d 	mov	r2, #125	; 0x7d
   225f8:	e59f1004 	ldr	r1, [pc, #4]	; 22604 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   225fc:	e59f0008 	ldr	r0, [pc, #8]	; 2260c <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   22600:	eb0006af 	bl	240c4 <assertion_failed>
   22604:	00046180 	.word	0x00046180
   22608:	0004618c 	.word	0x0004618c
   2260c:	000451a4 	.word	0x000451a4

00022610 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22610:	e16fcf12 	clz	ip, r2
   22614:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22618:	e590e018 	ldr	lr, [r0, #24]
   2261c:	e1a0c2ac 	lsr	ip, ip, #5
   22620:	e24dd010 	sub	sp, sp, #16
   22624:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   22628:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   2262c:	1a000024 	bne	226c4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22630:	e1a04000 	mov	r4, r0
   22634:	e5900008 	ldr	r0, [r0, #8]
   22638:	e1a06002 	mov	r6, r2
   2263c:	e3500000 	cmp	r0, #0
   22640:	e1a07003 	mov	r7, r3
   22644:	e1a05001 	mov	r5, r1
   22648:	0a000015 	beq	226a4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   2264c:	ebfff7a3 	bl	204e0 <CNetConfig::GetIPAddress() const>
   22650:	ebfff8dd 	bl	209cc <CIPAddress::IsNull() const>
   22654:	e3580000 	cmp	r8, #0
   22658:	03800001 	orreq	r0, r0, #1
   2265c:	e31000ff 	tst	r0, #255	; 0xff
   22660:	1a000017 	bne	226c4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22664:	e594000c 	ldr	r0, [r4, #12]
   22668:	e3500000 	cmp	r0, #0
   2266c:	0a000010 	beq	226b4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22670:	e3550000 	cmp	r5, #0
   22674:	0a000014 	beq	226cc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xbc>
   22678:	e5943018 	ldr	r3, [r4, #24]
   2267c:	e1a02006 	mov	r2, r6
   22680:	e58d3008 	str	r3, [sp, #8]
   22684:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22688:	e58d8004 	str	r8, [sp, #4]
   2268c:	e58d3000 	str	r3, [sp]
   22690:	e1a01005 	mov	r1, r5
   22694:	e1a03007 	mov	r3, r7
   22698:	ebffdd51 	bl	19be4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   2269c:	e28dd010 	add	sp, sp, #16
   226a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   226a4:	e59f2030 	ldr	r2, [pc, #48]	; 226dc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   226a8:	e59f1030 	ldr	r1, [pc, #48]	; 226e0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   226ac:	e59f0030 	ldr	r0, [pc, #48]	; 226e4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   226b0:	eb000683 	bl	240c4 <assertion_failed>
   226b4:	e59f202c 	ldr	r2, [pc, #44]	; 226e8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   226b8:	e59f1020 	ldr	r1, [pc, #32]	; 226e0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   226bc:	e59f0028 	ldr	r0, [pc, #40]	; 226ec <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   226c0:	eb00067f 	bl	240c4 <assertion_failed>
   226c4:	e3e00000 	mvn	r0, #0
   226c8:	eafffff3 	b	2269c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   226cc:	e59f201c 	ldr	r2, [pc, #28]	; 226f0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   226d0:	e59f1008 	ldr	r1, [pc, #8]	; 226e0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   226d4:	e59f0018 	ldr	r0, [pc, #24]	; 226f4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   226d8:	eb000679 	bl	240c4 <assertion_failed>
   226dc:	0000011e 	.word	0x0000011e
   226e0:	00046180 	.word	0x00046180
   226e4:	000451a4 	.word	0x000451a4
   226e8:	00000129 	.word	0x00000129
   226ec:	0004618c 	.word	0x0004618c
   226f0:	0000012a 	.word	0x0000012a
   226f4:	000423b8 	.word	0x000423b8

000226f8 <CSocket::~CSocket()>:
   226f8:	e92d4070 	push	{r4, r5, r6, lr}
   226fc:	e1a04000 	mov	r4, r0
   22700:	e590000c 	ldr	r0, [r0, #12]
   22704:	e59f309c 	ldr	r3, [pc, #156]	; 227a8 <CSocket::~CSocket()+0xb0>
   22708:	e3500000 	cmp	r0, #0
   2270c:	e5843000 	str	r3, [r4]
   22710:	0a00001c 	beq	22788 <CSocket::~CSocket()+0x90>
   22714:	e5941018 	ldr	r1, [r4, #24]
   22718:	e594301c 	ldr	r3, [r4, #28]
   2271c:	e3510000 	cmp	r1, #0
   22720:	ba00000b 	blt	22754 <CSocket::~CSocket()+0x5c>
   22724:	e3530000 	cmp	r3, #0
   22728:	1a00001a 	bne	22798 <CSocket::~CSocket()+0xa0>
   2272c:	ebffdcae 	bl	199ec <CTransportLayer::Disconnect(int)>
   22730:	e3e03000 	mvn	r3, #0
   22734:	e5843018 	str	r3, [r4, #24]
   22738:	e3a03000 	mov	r3, #0
   2273c:	e1a00004 	mov	r0, r4
   22740:	e584300c 	str	r3, [r4, #12]
   22744:	e5843008 	str	r3, [r4, #8]
   22748:	eb00021e 	bl	22fc8 <CNetSocket::~CNetSocket()>
   2274c:	e1a00004 	mov	r0, r4
   22750:	e8bd8070 	pop	{r4, r5, r6, pc}
   22754:	e3530000 	cmp	r3, #0
   22758:	0afffff6 	beq	22738 <CSocket::~CSocket()+0x40>
   2275c:	e284601c 	add	r6, r4, #28
   22760:	e3a05000 	mov	r5, #0
   22764:	ea000000 	b	2276c <CSocket::~CSocket()+0x74>
   22768:	e594000c 	ldr	r0, [r4, #12]
   2276c:	e5b61004 	ldr	r1, [r6, #4]!
   22770:	ebffdc9d 	bl	199ec <CTransportLayer::Disconnect(int)>
   22774:	e594301c 	ldr	r3, [r4, #28]
   22778:	e2855001 	add	r5, r5, #1
   2277c:	e1530005 	cmp	r3, r5
   22780:	8afffff8 	bhi	22768 <CSocket::~CSocket()+0x70>
   22784:	eaffffeb 	b	22738 <CSocket::~CSocket()+0x40>
   22788:	e3a02036 	mov	r2, #54	; 0x36
   2278c:	e59f1018 	ldr	r1, [pc, #24]	; 227ac <CSocket::~CSocket()+0xb4>
   22790:	e59f0018 	ldr	r0, [pc, #24]	; 227b0 <CSocket::~CSocket()+0xb8>
   22794:	eb00064a 	bl	240c4 <assertion_failed>
   22798:	e3a0203a 	mov	r2, #58	; 0x3a
   2279c:	e59f1008 	ldr	r1, [pc, #8]	; 227ac <CSocket::~CSocket()+0xb4>
   227a0:	e59f000c 	ldr	r0, [pc, #12]	; 227b4 <CSocket::~CSocket()+0xbc>
   227a4:	eb000646 	bl	240c4 <assertion_failed>
   227a8:	0004614c 	.word	0x0004614c
   227ac:	00046180 	.word	0x00046180
   227b0:	0004618c 	.word	0x0004618c
   227b4:	000461a4 	.word	0x000461a4

000227b8 <CSocket::~CSocket()>:
   227b8:	e92d4010 	push	{r4, lr}
   227bc:	e1a04000 	mov	r4, r0
   227c0:	ebffffcc 	bl	226f8 <CSocket::~CSocket()>
   227c4:	e1a00004 	mov	r0, r4
   227c8:	e3a010a0 	mov	r1, #160	; 0xa0
   227cc:	eb002066 	bl	2a96c <operator delete(void*, unsigned int)>
   227d0:	e1a00004 	mov	r0, r4
   227d4:	e8bd8010 	pop	{r4, pc}

000227d8 <CSocket::Listen(unsigned int)>:
   227d8:	e5902010 	ldr	r2, [r0, #16]
   227dc:	e3520006 	cmp	r2, #6
   227e0:	1a000023 	bne	22874 <CSocket::Listen(unsigned int)+0x9c>
   227e4:	e1a03001 	mov	r3, r1
   227e8:	e1d011b4 	ldrh	r1, [r0, #20]
   227ec:	e3510000 	cmp	r1, #0
   227f0:	0a00001f 	beq	22874 <CSocket::Listen(unsigned int)+0x9c>
   227f4:	e590c018 	ldr	ip, [r0, #24]
   227f8:	e35c0000 	cmp	ip, #0
   227fc:	aa00001c 	bge	22874 <CSocket::Listen(unsigned int)+0x9c>
   22800:	e243c001 	sub	ip, r3, #1
   22804:	e35c001f 	cmp	ip, #31
   22808:	8a000019 	bhi	22874 <CSocket::Listen(unsigned int)+0x9c>
   2280c:	e92d4070 	push	{r4, r5, r6, lr}
   22810:	e590501c 	ldr	r5, [r0, #28]
   22814:	e1a04000 	mov	r4, r0
   22818:	e3550000 	cmp	r5, #0
   2281c:	1a000018 	bne	22884 <CSocket::Listen(unsigned int)+0xac>
   22820:	e590000c 	ldr	r0, [r0, #12]
   22824:	e584301c 	str	r3, [r4, #28]
   22828:	e3500000 	cmp	r0, #0
   2282c:	1a000007 	bne	22850 <CSocket::Listen(unsigned int)+0x78>
   22830:	ea000017 	b	22894 <CSocket::Listen(unsigned int)+0xbc>
   22834:	e594301c 	ldr	r3, [r4, #28]
   22838:	e2855001 	add	r5, r5, #1
   2283c:	e1530005 	cmp	r3, r5
   22840:	9a00000d 	bls	2287c <CSocket::Listen(unsigned int)+0xa4>
   22844:	e594000c 	ldr	r0, [r4, #12]
   22848:	e1d411b4 	ldrh	r1, [r4, #20]
   2284c:	e5942010 	ldr	r2, [r4, #16]
   22850:	ebffdbd6 	bl	197b0 <CTransportLayer::Listen(unsigned short, int)>
   22854:	e0843105 	add	r3, r4, r5, lsl #2
   22858:	e3500000 	cmp	r0, #0
   2285c:	e5830020 	str	r0, [r3, #32]
   22860:	aafffff3 	bge	22834 <CSocket::Listen(unsigned int)+0x5c>
   22864:	e3a020a5 	mov	r2, #165	; 0xa5
   22868:	e59f1034 	ldr	r1, [pc, #52]	; 228a4 <CSocket::Listen(unsigned int)+0xcc>
   2286c:	e59f0034 	ldr	r0, [pc, #52]	; 228a8 <CSocket::Listen(unsigned int)+0xd0>
   22870:	eb000613 	bl	240c4 <assertion_failed>
   22874:	e3e00000 	mvn	r0, #0
   22878:	e12fff1e 	bx	lr
   2287c:	e3a00000 	mov	r0, #0
   22880:	e8bd8070 	pop	{r4, r5, r6, pc}
   22884:	e3a0209d 	mov	r2, #157	; 0x9d
   22888:	e59f1014 	ldr	r1, [pc, #20]	; 228a4 <CSocket::Listen(unsigned int)+0xcc>
   2288c:	e59f0018 	ldr	r0, [pc, #24]	; 228ac <CSocket::Listen(unsigned int)+0xd4>
   22890:	eb00060b 	bl	240c4 <assertion_failed>
   22894:	e3a020a0 	mov	r2, #160	; 0xa0
   22898:	e59f1004 	ldr	r1, [pc, #4]	; 228a4 <CSocket::Listen(unsigned int)+0xcc>
   2289c:	e59f000c 	ldr	r0, [pc, #12]	; 228b0 <CSocket::Listen(unsigned int)+0xd8>
   228a0:	eb000607 	bl	240c4 <assertion_failed>
   228a4:	00046180 	.word	0x00046180
   228a8:	000461b4 	.word	0x000461b4
   228ac:	000461a4 	.word	0x000461a4
   228b0:	0004618c 	.word	0x0004618c

000228b4 <CSocket::Send(void const*, unsigned int, int)>:
   228b4:	e16fcf12 	clz	ip, r2
   228b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   228bc:	e590e018 	ldr	lr, [r0, #24]
   228c0:	e1a0c2ac 	lsr	ip, ip, #5
   228c4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   228c8:	e24dd00c 	sub	sp, sp, #12
   228cc:	1a000010 	bne	22914 <CSocket::Send(void const*, unsigned int, int)+0x60>
   228d0:	e590000c 	ldr	r0, [r0, #12]
   228d4:	e3500000 	cmp	r0, #0
   228d8:	0a000005 	beq	228f4 <CSocket::Send(void const*, unsigned int, int)+0x40>
   228dc:	e3510000 	cmp	r1, #0
   228e0:	0a000007 	beq	22904 <CSocket::Send(void const*, unsigned int, int)+0x50>
   228e4:	e58de000 	str	lr, [sp]
   228e8:	ebffdc5d 	bl	19a64 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   228ec:	e28dd00c 	add	sp, sp, #12
   228f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   228f4:	e3a020ed 	mov	r2, #237	; 0xed
   228f8:	e59f101c 	ldr	r1, [pc, #28]	; 2291c <CSocket::Send(void const*, unsigned int, int)+0x68>
   228fc:	e59f001c 	ldr	r0, [pc, #28]	; 22920 <CSocket::Send(void const*, unsigned int, int)+0x6c>
   22900:	eb0005ef 	bl	240c4 <assertion_failed>
   22904:	e3a020ee 	mov	r2, #238	; 0xee
   22908:	e59f100c 	ldr	r1, [pc, #12]	; 2291c <CSocket::Send(void const*, unsigned int, int)+0x68>
   2290c:	e59f0010 	ldr	r0, [pc, #16]	; 22924 <CSocket::Send(void const*, unsigned int, int)+0x70>
   22910:	eb0005eb 	bl	240c4 <assertion_failed>
   22914:	e3e00000 	mvn	r0, #0
   22918:	eafffff3 	b	228ec <CSocket::Send(void const*, unsigned int, int)+0x38>
   2291c:	00046180 	.word	0x00046180
   22920:	0004618c 	.word	0x0004618c
   22924:	000423b8 	.word	0x000423b8

00022928 <CSocket::Receive(void*, unsigned int, int)>:
   22928:	e16fcf12 	clz	ip, r2
   2292c:	e92d4070 	push	{r4, r5, r6, lr}
   22930:	e590e018 	ldr	lr, [r0, #24]
   22934:	e1a0c2ac 	lsr	ip, ip, #5
   22938:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   2293c:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   22940:	1a00001d 	bne	229bc <CSocket::Receive(void*, unsigned int, int)+0x94>
   22944:	e590000c 	ldr	r0, [r0, #12]
   22948:	e1a05002 	mov	r5, r2
   2294c:	e3500000 	cmp	r0, #0
   22950:	e1a02003 	mov	r2, r3
   22954:	e1a06001 	mov	r6, r1
   22958:	0a00000f 	beq	2299c <CSocket::Receive(void*, unsigned int, int)+0x74>
   2295c:	e1a0300e 	mov	r3, lr
   22960:	e1a0100d 	mov	r1, sp
   22964:	ebffdc73 	bl	19b38 <CTransportLayer::Receive(void*, int, int)>
   22968:	e2504000 	subs	r4, r0, #0
   2296c:	ba000007 	blt	22990 <CSocket::Receive(void*, unsigned int, int)+0x68>
   22970:	e1540005 	cmp	r4, r5
   22974:	21a04005 	movcs	r4, r5
   22978:	e3560000 	cmp	r6, #0
   2297c:	0a00000a 	beq	229ac <CSocket::Receive(void*, unsigned int, int)+0x84>
   22980:	e1a0100d 	mov	r1, sp
   22984:	e1a00006 	mov	r0, r6
   22988:	e1a02004 	mov	r2, r4
   2298c:	eb001e0f 	bl	2a1d0 <memcpy>
   22990:	e1a00004 	mov	r0, r4
   22994:	e28ddd19 	add	sp, sp, #1600	; 0x640
   22998:	e8bd8070 	pop	{r4, r5, r6, pc}
   2299c:	e3a020fe 	mov	r2, #254	; 0xfe
   229a0:	e59f101c 	ldr	r1, [pc, #28]	; 229c4 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   229a4:	e59f001c 	ldr	r0, [pc, #28]	; 229c8 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   229a8:	eb0005c5 	bl	240c4 <assertion_failed>
   229ac:	e59f2018 	ldr	r2, [pc, #24]	; 229cc <CSocket::Receive(void*, unsigned int, int)+0xa4>
   229b0:	e59f100c 	ldr	r1, [pc, #12]	; 229c4 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   229b4:	e59f0014 	ldr	r0, [pc, #20]	; 229d0 <CSocket::Receive(void*, unsigned int, int)+0xa8>
   229b8:	eb0005c1 	bl	240c4 <assertion_failed>
   229bc:	e3e04000 	mvn	r4, #0
   229c0:	eafffff2 	b	22990 <CSocket::Receive(void*, unsigned int, int)+0x68>
   229c4:	00046180 	.word	0x00046180
   229c8:	0004618c 	.word	0x0004618c
   229cc:	0000010b 	.word	0x0000010b
   229d0:	000423b8 	.word	0x000423b8

000229d4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   229d4:	e16fcf12 	clz	ip, r2
   229d8:	e92d4070 	push	{r4, r5, r6, lr}
   229dc:	e590e018 	ldr	lr, [r0, #24]
   229e0:	e1a0c2ac 	lsr	ip, ip, #5
   229e4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   229e8:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   229ec:	e24dd008 	sub	sp, sp, #8
   229f0:	1a000021 	bne	22a7c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   229f4:	e590000c 	ldr	r0, [r0, #12]
   229f8:	e1a05002 	mov	r5, r2
   229fc:	e3500000 	cmp	r0, #0
   22a00:	e1a02003 	mov	r2, r3
   22a04:	e1a06001 	mov	r6, r1
   22a08:	0a000013 	beq	22a5c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x88>
   22a0c:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   22a10:	e58de004 	str	lr, [sp, #4]
   22a14:	e58d3000 	str	r3, [sp]
   22a18:	e28d1008 	add	r1, sp, #8
   22a1c:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   22a20:	ebffdca8 	bl	19cc8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   22a24:	e2504000 	subs	r4, r0, #0
   22a28:	ba000007 	blt	22a4c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   22a2c:	e1540005 	cmp	r4, r5
   22a30:	21a04005 	movcs	r4, r5
   22a34:	e3560000 	cmp	r6, #0
   22a38:	0a00000b 	beq	22a6c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x98>
   22a3c:	e28d1008 	add	r1, sp, #8
   22a40:	e1a00006 	mov	r0, r6
   22a44:	e1a02004 	mov	r2, r4
   22a48:	eb001de0 	bl	2a1d0 <memcpy>
   22a4c:	e1a00004 	mov	r0, r4
   22a50:	e28ddd19 	add	sp, sp, #1600	; 0x640
   22a54:	e28dd008 	add	sp, sp, #8
   22a58:	e8bd8070 	pop	{r4, r5, r6, pc}
   22a5c:	e59f2020 	ldr	r2, [pc, #32]	; 22a84 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb0>
   22a60:	e59f1020 	ldr	r1, [pc, #32]	; 22a88 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   22a64:	e59f0020 	ldr	r0, [pc, #32]	; 22a8c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   22a68:	eb000595 	bl	240c4 <assertion_failed>
   22a6c:	e59f201c 	ldr	r2, [pc, #28]	; 22a90 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   22a70:	e59f1010 	ldr	r1, [pc, #16]	; 22a88 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   22a74:	e59f0018 	ldr	r0, [pc, #24]	; 22a94 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   22a78:	eb000591 	bl	240c4 <assertion_failed>
   22a7c:	e3e04000 	mvn	r4, #0
   22a80:	eafffff1 	b	22a4c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   22a84:	0000013b 	.word	0x0000013b
   22a88:	00046180 	.word	0x00046180
   22a8c:	0004618c 	.word	0x0004618c
   22a90:	00000149 	.word	0x00000149
   22a94:	000423b8 	.word	0x000423b8

00022a98 <CSocket::SetOptionBroadcast(bool)>:
   22a98:	e5902018 	ldr	r2, [r0, #24]
   22a9c:	e3520000 	cmp	r2, #0
   22aa0:	ba00000d 	blt	22adc <CSocket::SetOptionBroadcast(bool)+0x44>
   22aa4:	e5903010 	ldr	r3, [r0, #16]
   22aa8:	e3530011 	cmp	r3, #17
   22aac:	0a000001 	beq	22ab8 <CSocket::SetOptionBroadcast(bool)+0x20>
   22ab0:	e3a00000 	mov	r0, #0
   22ab4:	e12fff1e 	bx	lr
   22ab8:	e590000c 	ldr	r0, [r0, #12]
   22abc:	e3500000 	cmp	r0, #0
   22ac0:	0a000000 	beq	22ac8 <CSocket::SetOptionBroadcast(bool)+0x30>
   22ac4:	eaffdcaf 	b	19d88 <CTransportLayer::SetOptionBroadcast(bool, int)>
   22ac8:	e92d4010 	push	{r4, lr}
   22acc:	e59f2010 	ldr	r2, [pc, #16]	; 22ae4 <CSocket::SetOptionBroadcast(bool)+0x4c>
   22ad0:	e59f1010 	ldr	r1, [pc, #16]	; 22ae8 <CSocket::SetOptionBroadcast(bool)+0x50>
   22ad4:	e59f0010 	ldr	r0, [pc, #16]	; 22aec <CSocket::SetOptionBroadcast(bool)+0x54>
   22ad8:	eb000579 	bl	240c4 <assertion_failed>
   22adc:	e3e00000 	mvn	r0, #0
   22ae0:	e12fff1e 	bx	lr
   22ae4:	0000015b 	.word	0x0000015b
   22ae8:	00046180 	.word	0x00046180
   22aec:	0004618c 	.word	0x0004618c

00022af0 <CSocket::GetForeignIP() const>:
   22af0:	e5901018 	ldr	r1, [r0, #24]
   22af4:	e3510000 	cmp	r1, #0
   22af8:	ba000008 	blt	22b20 <CSocket::GetForeignIP() const+0x30>
   22afc:	e590000c 	ldr	r0, [r0, #12]
   22b00:	e3500000 	cmp	r0, #0
   22b04:	0a000000 	beq	22b0c <CSocket::GetForeignIP() const+0x1c>
   22b08:	eaffdcdc 	b	19e80 <CTransportLayer::GetForeignIP(int) const>
   22b0c:	e92d4010 	push	{r4, lr}
   22b10:	e59f2010 	ldr	r2, [pc, #16]	; 22b28 <CSocket::GetForeignIP() const+0x38>
   22b14:	e59f1010 	ldr	r1, [pc, #16]	; 22b2c <CSocket::GetForeignIP() const+0x3c>
   22b18:	e59f0010 	ldr	r0, [pc, #16]	; 22b30 <CSocket::GetForeignIP() const+0x40>
   22b1c:	eb000568 	bl	240c4 <assertion_failed>
   22b20:	e3a00000 	mov	r0, #0
   22b24:	e12fff1e 	bx	lr
   22b28:	00000166 	.word	0x00000166
   22b2c:	00046180 	.word	0x00046180
   22b30:	0004618c 	.word	0x0004618c

00022b34 <CSocket::CSocket(CNetSubSystem*, int)>:
   22b34:	e92d4070 	push	{r4, r5, r6, lr}
   22b38:	e1a04000 	mov	r4, r0
   22b3c:	e1a05001 	mov	r5, r1
   22b40:	e1a06002 	mov	r6, r2
   22b44:	eb000111 	bl	22f90 <CNetSocket::CNetSocket(CNetSubSystem*)>
   22b48:	e59f306c 	ldr	r3, [pc, #108]	; 22bbc <CSocket::CSocket(CNetSubSystem*, int)+0x88>
   22b4c:	e1a00005 	mov	r0, r5
   22b50:	e5843000 	str	r3, [r4]
   22b54:	ebffd939 	bl	19040 <CNetSubSystem::GetConfig()>
   22b58:	e5840008 	str	r0, [r4, #8]
   22b5c:	e1a00005 	mov	r0, r5
   22b60:	ebffd93c 	bl	19058 <CNetSubSystem::GetTransportLayer()>
   22b64:	e3a03000 	mov	r3, #0
   22b68:	e3e01000 	mvn	r1, #0
   22b6c:	e594c008 	ldr	ip, [r4, #8]
   22b70:	e5846010 	str	r6, [r4, #16]
   22b74:	e15c0003 	cmp	ip, r3
   22b78:	e584000c 	str	r0, [r4, #12]
   22b7c:	e5841018 	str	r1, [r4, #24]
   22b80:	e1c431b4 	strh	r3, [r4, #20]
   22b84:	e584301c 	str	r3, [r4, #28]
   22b88:	0a000003 	beq	22b9c <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   22b8c:	e3500000 	cmp	r0, #0
   22b90:	0a000005 	beq	22bac <CSocket::CSocket(CNetSubSystem*, int)+0x78>
   22b94:	e1a00004 	mov	r0, r4
   22b98:	e8bd8070 	pop	{r4, r5, r6, pc}
   22b9c:	e3a02023 	mov	r2, #35	; 0x23
   22ba0:	e59f1018 	ldr	r1, [pc, #24]	; 22bc0 <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   22ba4:	e59f0018 	ldr	r0, [pc, #24]	; 22bc4 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   22ba8:	eb000545 	bl	240c4 <assertion_failed>
   22bac:	e3a02024 	mov	r2, #36	; 0x24
   22bb0:	e59f1008 	ldr	r1, [pc, #8]	; 22bc0 <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   22bb4:	e59f000c 	ldr	r0, [pc, #12]	; 22bc8 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   22bb8:	eb000541 	bl	240c4 <assertion_failed>
   22bbc:	0004614c 	.word	0x0004614c
   22bc0:	00046180 	.word	0x00046180
   22bc4:	000451a4 	.word	0x000451a4
   22bc8:	0004618c 	.word	0x0004618c

00022bcc <CSocket::CSocket(CSocket&, int)>:
   22bcc:	e92d4070 	push	{r4, r5, r6, lr}
   22bd0:	e1a04000 	mov	r4, r0
   22bd4:	e1a00001 	mov	r0, r1
   22bd8:	e1a05001 	mov	r5, r1
   22bdc:	e1a06002 	mov	r6, r2
   22be0:	eb0000ff 	bl	22fe4 <CNetSocket::GetNetSubSystem()>
   22be4:	e1a01000 	mov	r1, r0
   22be8:	e1a00004 	mov	r0, r4
   22bec:	eb0000e7 	bl	22f90 <CNetSocket::CNetSocket(CNetSubSystem*)>
   22bf0:	e3a00000 	mov	r0, #0
   22bf4:	e5953008 	ldr	r3, [r5, #8]
   22bf8:	e595100c 	ldr	r1, [r5, #12]
   22bfc:	e595c010 	ldr	ip, [r5, #16]
   22c00:	e1d521b4 	ldrh	r2, [r5, #20]
   22c04:	e59fe050 	ldr	lr, [pc, #80]	; 22c5c <CSocket::CSocket(CSocket&, int)+0x90>
   22c08:	e1530000 	cmp	r3, r0
   22c0c:	e584e000 	str	lr, [r4]
   22c10:	e5843008 	str	r3, [r4, #8]
   22c14:	e584100c 	str	r1, [r4, #12]
   22c18:	e584c010 	str	ip, [r4, #16]
   22c1c:	e1c421b4 	strh	r2, [r4, #20]
   22c20:	e5846018 	str	r6, [r4, #24]
   22c24:	e584001c 	str	r0, [r4, #28]
   22c28:	0a000003 	beq	22c3c <CSocket::CSocket(CSocket&, int)+0x70>
   22c2c:	e3510000 	cmp	r1, #0
   22c30:	0a000005 	beq	22c4c <CSocket::CSocket(CSocket&, int)+0x80>
   22c34:	e1a00004 	mov	r0, r4
   22c38:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c3c:	e3a02030 	mov	r2, #48	; 0x30
   22c40:	e59f1018 	ldr	r1, [pc, #24]	; 22c60 <CSocket::CSocket(CSocket&, int)+0x94>
   22c44:	e59f0018 	ldr	r0, [pc, #24]	; 22c64 <CSocket::CSocket(CSocket&, int)+0x98>
   22c48:	eb00051d 	bl	240c4 <assertion_failed>
   22c4c:	e3a02031 	mov	r2, #49	; 0x31
   22c50:	e59f1008 	ldr	r1, [pc, #8]	; 22c60 <CSocket::CSocket(CSocket&, int)+0x94>
   22c54:	e59f000c 	ldr	r0, [pc, #12]	; 22c68 <CSocket::CSocket(CSocket&, int)+0x9c>
   22c58:	eb000519 	bl	240c4 <assertion_failed>
   22c5c:	0004614c 	.word	0x0004614c
   22c60:	00046180 	.word	0x00046180
   22c64:	000451a4 	.word	0x000451a4
   22c68:	0004618c 	.word	0x0004618c

00022c6c <CSocket::Accept(CIPAddress*, unsigned short*)>:
   22c6c:	e590301c 	ldr	r3, [r0, #28]
   22c70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22c74:	e3530000 	cmp	r3, #0
   22c78:	0a000048 	beq	22da0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x134>
   22c7c:	e1d041b4 	ldrh	r4, [r0, #20]
   22c80:	e3540000 	cmp	r4, #0
   22c84:	0a00003f 	beq	22d88 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   22c88:	e1a06000 	mov	r6, r0
   22c8c:	e590000c 	ldr	r0, [r0, #12]
   22c90:	e1a0a002 	mov	sl, r2
   22c94:	e3500000 	cmp	r0, #0
   22c98:	e1a09001 	mov	r9, r1
   22c9c:	0a000042 	beq	22dac <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   22ca0:	e3530020 	cmp	r3, #32
   22ca4:	8a000044 	bhi	22dbc <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   22ca8:	e3a08020 	mov	r8, #32
   22cac:	e3e05102 	mvn	r5, #-2147483648	; 0x80000000
   22cb0:	e3a04000 	mov	r4, #0
   22cb4:	e286701c 	add	r7, r6, #28
   22cb8:	ea000008 	b	22ce0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   22cbc:	e5b73004 	ldr	r3, [r7, #4]!
   22cc0:	e596201c 	ldr	r2, [r6, #28]
   22cc4:	e1530005 	cmp	r3, r5
   22cc8:	b1a08004 	movlt	r8, r4
   22ccc:	e2844001 	add	r4, r4, #1
   22cd0:	b1a05003 	movlt	r5, r3
   22cd4:	e1520004 	cmp	r2, r4
   22cd8:	9a000007 	bls	22cfc <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   22cdc:	e596000c 	ldr	r0, [r6, #12]
   22ce0:	e5971004 	ldr	r1, [r7, #4]
   22ce4:	ebffdc48 	bl	19e0c <CTransportLayer::IsConnected(int) const>
   22ce8:	e3500000 	cmp	r0, #0
   22cec:	0afffff2 	beq	22cbc <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   22cf0:	e1a08004 	mov	r8, r4
   22cf4:	e2843008 	add	r3, r4, #8
   22cf8:	e7965103 	ldr	r5, [r6, r3, lsl #2]
   22cfc:	e1e03005 	mvn	r3, r5
   22d00:	e3750106 	cmn	r5, #-2147483647	; 0x80000001
   22d04:	e1a03fa3 	lsr	r3, r3, #31
   22d08:	03a03000 	moveq	r3, #0
   22d0c:	e3530000 	cmp	r3, #0
   22d10:	0a00002d 	beq	22dcc <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   22d14:	e596301c 	ldr	r3, [r6, #28]
   22d18:	e1530008 	cmp	r3, r8
   22d1c:	9a00002e 	bls	22ddc <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   22d20:	e3590000 	cmp	r9, #0
   22d24:	0a000019 	beq	22d90 <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   22d28:	e35a0000 	cmp	sl, #0
   22d2c:	0a000032 	beq	22dfc <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   22d30:	e1a0200a 	mov	r2, sl
   22d34:	e1a01009 	mov	r1, r9
   22d38:	e1a03005 	mov	r3, r5
   22d3c:	e596000c 	ldr	r0, [r6, #12]
   22d40:	ebffdaf6 	bl	19920 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   22d44:	e3500000 	cmp	r0, #0
   22d48:	b3a04000 	movlt	r4, #0
   22d4c:	ba000005 	blt	22d68 <CSocket::Accept(CIPAddress*, unsigned short*)+0xfc>
   22d50:	e3a000a0 	mov	r0, #160	; 0xa0
   22d54:	eb001ef6 	bl	2a934 <operator new(unsigned int)>
   22d58:	e1a02005 	mov	r2, r5
   22d5c:	e1a01006 	mov	r1, r6
   22d60:	e1a04000 	mov	r4, r0
   22d64:	ebffff98 	bl	22bcc <CSocket::CSocket(CSocket&, int)>
   22d68:	e5962010 	ldr	r2, [r6, #16]
   22d6c:	e1d611b4 	ldrh	r1, [r6, #20]
   22d70:	e596000c 	ldr	r0, [r6, #12]
   22d74:	ebffda8d 	bl	197b0 <CTransportLayer::Listen(unsigned short, int)>
   22d78:	e2888008 	add	r8, r8, #8
   22d7c:	e3500000 	cmp	r0, #0
   22d80:	e7860108 	str	r0, [r6, r8, lsl #2]
   22d84:	ba000018 	blt	22dec <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   22d88:	e1a00004 	mov	r0, r4
   22d8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22d90:	e3a020d0 	mov	r2, #208	; 0xd0
   22d94:	e59f1070 	ldr	r1, [pc, #112]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22d98:	e59f0070 	ldr	r0, [pc, #112]	; 22e10 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   22d9c:	eb0004c8 	bl	240c4 <assertion_failed>
   22da0:	e1a04003 	mov	r4, r3
   22da4:	e1a00004 	mov	r0, r4
   22da8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22dac:	e3a020b3 	mov	r2, #179	; 0xb3
   22db0:	e59f1054 	ldr	r1, [pc, #84]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22db4:	e59f0058 	ldr	r0, [pc, #88]	; 22e14 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   22db8:	eb0004c1 	bl	240c4 <assertion_failed>
   22dbc:	e3a020b4 	mov	r2, #180	; 0xb4
   22dc0:	e59f1044 	ldr	r1, [pc, #68]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22dc4:	e59f004c 	ldr	r0, [pc, #76]	; 22e18 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   22dc8:	eb0004bd 	bl	240c4 <assertion_failed>
   22dcc:	e3a020cb 	mov	r2, #203	; 0xcb
   22dd0:	e59f1034 	ldr	r1, [pc, #52]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22dd4:	e59f0040 	ldr	r0, [pc, #64]	; 22e1c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b0>
   22dd8:	eb0004b9 	bl	240c4 <assertion_failed>
   22ddc:	e3a020cc 	mov	r2, #204	; 0xcc
   22de0:	e59f1024 	ldr	r1, [pc, #36]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22de4:	e59f0034 	ldr	r0, [pc, #52]	; 22e20 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b4>
   22de8:	eb0004b5 	bl	240c4 <assertion_failed>
   22dec:	e3a020dc 	mov	r2, #220	; 0xdc
   22df0:	e59f1014 	ldr	r1, [pc, #20]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22df4:	e59f0028 	ldr	r0, [pc, #40]	; 22e24 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b8>
   22df8:	eb0004b1 	bl	240c4 <assertion_failed>
   22dfc:	e3a020d1 	mov	r2, #209	; 0xd1
   22e00:	e59f1004 	ldr	r1, [pc, #4]	; 22e0c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22e04:	e59f001c 	ldr	r0, [pc, #28]	; 22e28 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   22e08:	eb0004ad 	bl	240c4 <assertion_failed>
   22e0c:	00046180 	.word	0x00046180
   22e10:	000451fc 	.word	0x000451fc
   22e14:	0004618c 	.word	0x0004618c
   22e18:	00046234 	.word	0x00046234
   22e1c:	000461d0 	.word	0x000461d0
   22e20:	000461fc 	.word	0x000461fc
   22e24:	00046210 	.word	0x00046210
   22e28:	0004520c 	.word	0x0004520c

00022e2c <CNetSocket::Connect(char const*, char const*)>:
   22e2c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22e30:	e2516000 	subs	r6, r1, #0
   22e34:	e24dd01c 	sub	sp, sp, #28
   22e38:	0a000038 	beq	22f20 <CNetSocket::Connect(char const*, char const*)+0xf4>
   22e3c:	e3520000 	cmp	r2, #0
   22e40:	e1a05002 	mov	r5, r2
   22e44:	0a000039 	beq	22f30 <CNetSocket::Connect(char const*, char const*)+0x104>
   22e48:	e3a03000 	mov	r3, #0
   22e4c:	e28d1018 	add	r1, sp, #24
   22e50:	e5213010 	str	r3, [r1, #-16]!
   22e54:	e1a04000 	mov	r4, r0
   22e58:	e3a0200a 	mov	r2, #10
   22e5c:	e1a00005 	mov	r0, r5
   22e60:	eb001c02 	bl	29e70 <strtoul>
   22e64:	e59d3008 	ldr	r3, [sp, #8]
   22e68:	e1a07000 	mov	r7, r0
   22e6c:	e3530000 	cmp	r3, #0
   22e70:	0a000002 	beq	22e80 <CNetSocket::Connect(char const*, char const*)+0x54>
   22e74:	e1d330d0 	ldrsb	r3, [r3]
   22e78:	e3530000 	cmp	r3, #0
   22e7c:	1a000033 	bne	22f50 <CNetSocket::Connect(char const*, char const*)+0x124>
   22e80:	e59f30e8 	ldr	r3, [pc, #232]	; 22f70 <CNetSocket::Connect(char const*, char const*)+0x144>
   22e84:	e2472001 	sub	r2, r7, #1
   22e88:	e1520003 	cmp	r2, r3
   22e8c:	8a00002f 	bhi	22f50 <CNetSocket::Connect(char const*, char const*)+0x124>
   22e90:	e5943004 	ldr	r3, [r4, #4]
   22e94:	e3530000 	cmp	r3, #0
   22e98:	0a000028 	beq	22f40 <CNetSocket::Connect(char const*, char const*)+0x114>
   22e9c:	e28d0010 	add	r0, sp, #16
   22ea0:	ebfff5ea 	bl	20650 <CIPAddress::CIPAddress()>
   22ea4:	e5941004 	ldr	r1, [r4, #4]
   22ea8:	e28d000c 	add	r0, sp, #12
   22eac:	eb000063 	bl	23040 <CDNSClient::CDNSClient(CNetSubSystem*)>
   22eb0:	e28d2010 	add	r2, sp, #16
   22eb4:	e1a01006 	mov	r1, r6
   22eb8:	e28d000c 	add	r0, sp, #12
   22ebc:	eb0000b3 	bl	23190 <CDNSClient::Resolve(char const*, CIPAddress*)>
   22ec0:	e3500000 	cmp	r0, #0
   22ec4:	0a00000d 	beq	22f00 <CNetSocket::Connect(char const*, char const*)+0xd4>
   22ec8:	e5943000 	ldr	r3, [r4]
   22ecc:	e1a00004 	mov	r0, r4
   22ed0:	e6ff2077 	uxth	r2, r7
   22ed4:	e593300c 	ldr	r3, [r3, #12]
   22ed8:	e28d1010 	add	r1, sp, #16
   22edc:	e12fff33 	blx	r3
   22ee0:	e1a04000 	mov	r4, r0
   22ee4:	e28d000c 	add	r0, sp, #12
   22ee8:	eb00005f 	bl	2306c <CDNSClient::~CDNSClient()>
   22eec:	e28d0010 	add	r0, sp, #16
   22ef0:	ebfff5ec 	bl	206a8 <CIPAddress::~CIPAddress()>
   22ef4:	e1a00004 	mov	r0, r4
   22ef8:	e28dd01c 	add	sp, sp, #28
   22efc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22f00:	eb000d62 	bl	26490 <CLogger::Get()>
   22f04:	e58d6000 	str	r6, [sp]
   22f08:	e59f3064 	ldr	r3, [pc, #100]	; 22f74 <CNetSocket::Connect(char const*, char const*)+0x148>
   22f0c:	e3a02004 	mov	r2, #4
   22f10:	e59f1060 	ldr	r1, [pc, #96]	; 22f78 <CNetSocket::Connect(char const*, char const*)+0x14c>
   22f14:	eb000c9a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22f18:	e3e04000 	mvn	r4, #0
   22f1c:	eafffff0 	b	22ee4 <CNetSocket::Connect(char const*, char const*)+0xb8>
   22f20:	e3a0202a 	mov	r2, #42	; 0x2a
   22f24:	e59f1050 	ldr	r1, [pc, #80]	; 22f7c <CNetSocket::Connect(char const*, char const*)+0x150>
   22f28:	e59f0050 	ldr	r0, [pc, #80]	; 22f80 <CNetSocket::Connect(char const*, char const*)+0x154>
   22f2c:	eb000464 	bl	240c4 <assertion_failed>
   22f30:	e3a0202b 	mov	r2, #43	; 0x2b
   22f34:	e59f1040 	ldr	r1, [pc, #64]	; 22f7c <CNetSocket::Connect(char const*, char const*)+0x150>
   22f38:	e59f0044 	ldr	r0, [pc, #68]	; 22f84 <CNetSocket::Connect(char const*, char const*)+0x158>
   22f3c:	eb000460 	bl	240c4 <assertion_failed>
   22f40:	e3a02037 	mov	r2, #55	; 0x37
   22f44:	e59f1030 	ldr	r1, [pc, #48]	; 22f7c <CNetSocket::Connect(char const*, char const*)+0x150>
   22f48:	e59f0038 	ldr	r0, [pc, #56]	; 22f88 <CNetSocket::Connect(char const*, char const*)+0x15c>
   22f4c:	eb00045c 	bl	240c4 <assertion_failed>
   22f50:	eb000d4e 	bl	26490 <CLogger::Get()>
   22f54:	e58d5000 	str	r5, [sp]
   22f58:	e59f302c 	ldr	r3, [pc, #44]	; 22f8c <CNetSocket::Connect(char const*, char const*)+0x160>
   22f5c:	e3a02004 	mov	r2, #4
   22f60:	e59f1010 	ldr	r1, [pc, #16]	; 22f78 <CNetSocket::Connect(char const*, char const*)+0x14c>
   22f64:	eb000c86 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22f68:	e3e04000 	mvn	r4, #0
   22f6c:	eaffffe0 	b	22ef4 <CNetSocket::Connect(char const*, char const*)+0xc8>
   22f70:	0000fffe 	.word	0x0000fffe
   22f74:	000462d8 	.word	0x000462d8
   22f78:	0004625c 	.word	0x0004625c
   22f7c:	000462a4 	.word	0x000462a4
   22f80:	000423c8 	.word	0x000423c8
   22f84:	000462b4 	.word	0x000462b4
   22f88:	00045178 	.word	0x00045178
   22f8c:	000462c0 	.word	0x000462c0

00022f90 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   22f90:	e59f2024 	ldr	r2, [pc, #36]	; 22fbc <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   22f94:	e3510000 	cmp	r1, #0
   22f98:	e5801004 	str	r1, [r0, #4]
   22f9c:	e5802000 	str	r2, [r0]
   22fa0:	0a000000 	beq	22fa8 <CNetSocket::CNetSocket(CNetSubSystem*)+0x18>
   22fa4:	e12fff1e 	bx	lr
   22fa8:	e92d4010 	push	{r4, lr}
   22fac:	e3a02020 	mov	r2, #32
   22fb0:	e59f1008 	ldr	r1, [pc, #8]	; 22fc0 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   22fb4:	e59f0008 	ldr	r0, [pc, #8]	; 22fc4 <CNetSocket::CNetSocket(CNetSubSystem*)+0x34>
   22fb8:	eb000441 	bl	240c4 <assertion_failed>
   22fbc:	00046270 	.word	0x00046270
   22fc0:	000462a4 	.word	0x000462a4
   22fc4:	00045178 	.word	0x00045178

00022fc8 <CNetSocket::~CNetSocket()>:
   22fc8:	e12fff1e 	bx	lr

00022fcc <CNetSocket::~CNetSocket()>:
   22fcc:	e92d4010 	push	{r4, lr}
   22fd0:	e1a04000 	mov	r4, r0
   22fd4:	e3a01008 	mov	r1, #8
   22fd8:	eb001e63 	bl	2a96c <operator delete(void*, unsigned int)>
   22fdc:	e1a00004 	mov	r0, r4
   22fe0:	e8bd8010 	pop	{r4, pc}

00022fe4 <CNetSocket::GetNetSubSystem()>:
   22fe4:	e5900004 	ldr	r0, [r0, #4]
   22fe8:	e3500000 	cmp	r0, #0
   22fec:	0a000000 	beq	22ff4 <CNetSocket::GetNetSubSystem()+0x10>
   22ff0:	e12fff1e 	bx	lr
   22ff4:	e92d4010 	push	{r4, lr}
   22ff8:	e3a02046 	mov	r2, #70	; 0x46
   22ffc:	e59f1004 	ldr	r1, [pc, #4]	; 23008 <CNetSocket::GetNetSubSystem()+0x24>
   23000:	e59f0004 	ldr	r0, [pc, #4]	; 2300c <CNetSocket::GetNetSubSystem()+0x28>
   23004:	eb00042e 	bl	240c4 <assertion_failed>
   23008:	000462a4 	.word	0x000462a4
   2300c:	00045178 	.word	0x00045178

00023010 <CNetSocket::Bind(unsigned short)>:
   23010:	e3e00000 	mvn	r0, #0
   23014:	e12fff1e 	bx	lr

00023018 <CNetSocket::Listen(unsigned int)>:
   23018:	e3e00000 	mvn	r0, #0
   2301c:	e12fff1e 	bx	lr

00023020 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   23020:	e3a00000 	mov	r0, #0
   23024:	e12fff1e 	bx	lr

00023028 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23028:	e3e00000 	mvn	r0, #0
   2302c:	e12fff1e 	bx	lr

00023030 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23030:	e3e00000 	mvn	r0, #0
   23034:	e12fff1e 	bx	lr

00023038 <CNetSocket::SetOptionBroadcast(bool)>:
   23038:	e3e00000 	mvn	r0, #0
   2303c:	e12fff1e 	bx	lr

00023040 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   23040:	e3510000 	cmp	r1, #0
   23044:	e5801000 	str	r1, [r0]
   23048:	0a000000 	beq	23050 <CDNSClient::CDNSClient(CNetSubSystem*)+0x10>
   2304c:	e12fff1e 	bx	lr
   23050:	e92d4010 	push	{r4, lr}
   23054:	e3a02056 	mov	r2, #86	; 0x56
   23058:	e59f1004 	ldr	r1, [pc, #4]	; 23064 <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   2305c:	e59f0004 	ldr	r0, [pc, #4]	; 23068 <CDNSClient::CDNSClient(CNetSubSystem*)+0x28>
   23060:	eb000417 	bl	240c4 <assertion_failed>
   23064:	000462ec 	.word	0x000462ec
   23068:	00045178 	.word	0x00045178

0002306c <CDNSClient::~CDNSClient()>:
   2306c:	e12fff1e 	bx	lr

00023070 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   23070:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23074:	e3a04000 	mov	r4, #0
   23078:	e1a00001 	mov	r0, r1
   2307c:	e1a05004 	mov	r5, r4
   23080:	e24dd00c 	sub	sp, sp, #12
   23084:	e3500000 	cmp	r0, #0
   23088:	e1a07002 	mov	r7, r2
   2308c:	e3a0600a 	mov	r6, #10
   23090:	e58d5004 	str	r5, [sp, #4]
   23094:	0a000013 	beq	230e8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   23098:	e1a02006 	mov	r2, r6
   2309c:	e28d1004 	add	r1, sp, #4
   230a0:	eb001b72 	bl	29e70 <strtoul>
   230a4:	e3540003 	cmp	r4, #3
   230a8:	e1a03000 	mov	r3, r0
   230ac:	0a000014 	beq	23104 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x94>
   230b0:	e59d0004 	ldr	r0, [sp, #4]
   230b4:	e3500000 	cmp	r0, #0
   230b8:	0a00000e 	beq	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   230bc:	e1d020d0 	ldrsb	r2, [r0]
   230c0:	e352002e 	cmp	r2, #46	; 0x2e
   230c4:	1a00000b 	bne	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   230c8:	e35300ff 	cmp	r3, #255	; 0xff
   230cc:	8a000009 	bhi	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   230d0:	e2800001 	add	r0, r0, #1
   230d4:	e3500000 	cmp	r0, #0
   230d8:	e7cd3004 	strb	r3, [sp, r4]
   230dc:	e58d5004 	str	r5, [sp, #4]
   230e0:	e2844001 	add	r4, r4, #1
   230e4:	1affffeb 	bne	23098 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   230e8:	e59f2084 	ldr	r2, [pc, #132]	; 23174 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   230ec:	e59f1084 	ldr	r1, [pc, #132]	; 23178 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   230f0:	e59f0084 	ldr	r0, [pc, #132]	; 2317c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   230f4:	eb0003f2 	bl	240c4 <assertion_failed>
   230f8:	e3a00000 	mov	r0, #0
   230fc:	e28dd00c 	add	sp, sp, #12
   23100:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23104:	e59d2004 	ldr	r2, [sp, #4]
   23108:	e3520000 	cmp	r2, #0
   2310c:	0a000011 	beq	23158 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   23110:	e1d220d0 	ldrsb	r2, [r2]
   23114:	e3520000 	cmp	r2, #0
   23118:	1afffff6 	bne	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2311c:	e35000ff 	cmp	r0, #255	; 0xff
   23120:	8afffff4 	bhi	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23124:	e3570000 	cmp	r7, #0
   23128:	e5cd3003 	strb	r3, [sp, #3]
   2312c:	0a000005 	beq	23148 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xd8>
   23130:	e1a00007 	mov	r0, r7
   23134:	e1a0100d 	mov	r1, sp
   23138:	ebfff5cb 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   2313c:	e3a00001 	mov	r0, #1
   23140:	e28dd00c 	add	sp, sp, #12
   23144:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23148:	e59f2030 	ldr	r2, [pc, #48]	; 23180 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   2314c:	e59f1024 	ldr	r1, [pc, #36]	; 23178 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   23150:	e59f002c 	ldr	r0, [pc, #44]	; 23184 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   23154:	eb0003da 	bl	240c4 <assertion_failed>
   23158:	e35000ff 	cmp	r0, #255	; 0xff
   2315c:	8affffe5 	bhi	230f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23160:	e59f2020 	ldr	r2, [pc, #32]	; 23188 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   23164:	e59f100c 	ldr	r1, [pc, #12]	; 23178 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   23168:	e59f001c 	ldr	r0, [pc, #28]	; 2318c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x11c>
   2316c:	e5cd3003 	strb	r3, [sp, #3]
   23170:	eb0003d3 	bl	240c4 <assertion_failed>
   23174:	0000011a 	.word	0x0000011a
   23178:	000462ec 	.word	0x000462ec
   2317c:	000462fc 	.word	0x000462fc
   23180:	00000139 	.word	0x00000139
   23184:	0004630c 	.word	0x0004630c
   23188:	00000135 	.word	0x00000135
   2318c:	0004631c 	.word	0x0004631c

00023190 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   23190:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23194:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   23198:	e24dd00c 	sub	sp, sp, #12
   2319c:	e2518000 	subs	r8, r1, #0
   231a0:	e58d2000 	str	r2, [sp]
   231a4:	0a000063 	beq	23338 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1a8>
   231a8:	e5d83000 	ldrb	r3, [r8]
   231ac:	e1a04000 	mov	r4, r0
   231b0:	e2433031 	sub	r3, r3, #49	; 0x31
   231b4:	e3530008 	cmp	r3, #8
   231b8:	9a000057 	bls	2331c <CDNSClient::Resolve(char const*, CIPAddress*)+0x18c>
   231bc:	e5940000 	ldr	r0, [r4]
   231c0:	e3500000 	cmp	r0, #0
   231c4:	0a00005f 	beq	23348 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b8>
   231c8:	ebffd79c 	bl	19040 <CNetSubSystem::GetConfig()>
   231cc:	ebfff4cb 	bl	20500 <CNetConfig::GetDNSServer() const>
   231d0:	ebfff5da 	bl	20940 <CIPAddress::Get() const>
   231d4:	e1a01000 	mov	r1, r0
   231d8:	e28d0010 	add	r0, sp, #16
   231dc:	ebfff5b2 	bl	208ac <CIPAddress::CIPAddress(unsigned char const*)>
   231e0:	e28d0010 	add	r0, sp, #16
   231e4:	ebfff5f8 	bl	209cc <CIPAddress::IsNull() const>
   231e8:	e2505000 	subs	r5, r0, #0
   231ec:	0a000006 	beq	2320c <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   231f0:	e3a05000 	mov	r5, #0
   231f4:	e28d0010 	add	r0, sp, #16
   231f8:	ebfff52a 	bl	206a8 <CIPAddress::~CIPAddress()>
   231fc:	e1a00005 	mov	r0, r5
   23200:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23204:	e28dd00c 	add	sp, sp, #12
   23208:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2320c:	e5941000 	ldr	r1, [r4]
   23210:	e3a02011 	mov	r2, #17
   23214:	e28d0028 	add	r0, sp, #40	; 0x28
   23218:	ebfffe45 	bl	22b34 <CSocket::CSocket(CNetSubSystem*, int)>
   2321c:	e28d0028 	add	r0, sp, #40	; 0x28
   23220:	e3a02035 	mov	r2, #53	; 0x35
   23224:	e28d1010 	add	r1, sp, #16
   23228:	ebfffcbf 	bl	2252c <CSocket::Connect(CIPAddress&, unsigned short)>
   2322c:	e3500000 	cmp	r0, #0
   23230:	1a000036 	bne	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23234:	e28d4f72 	add	r4, sp, #456	; 0x1c8
   23238:	e3a02c02 	mov	r2, #512	; 0x200
   2323c:	e1a01005 	mov	r1, r5
   23240:	e1a00004 	mov	r0, r4
   23244:	eb00196a 	bl	297f4 <memset>
   23248:	e3a02001 	mov	r2, #1
   2324c:	e3a00c01 	mov	r0, #256	; 0x100
   23250:	e59f3338 	ldr	r3, [pc, #824]	; 23590 <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   23254:	e1c420b2 	strh	r2, [r4, #2]
   23258:	e1d360b0 	ldrh	r6, [r3]
   2325c:	e1a01008 	mov	r1, r8
   23260:	e0862002 	add	r2, r6, r2
   23264:	e6bf6fb6 	rev16	r6, r6
   23268:	e1c320b0 	strh	r2, [r3]
   2326c:	e1c400b4 	strh	r0, [r4, #4]
   23270:	e6ff3076 	uxth	r3, r6
   23274:	e3a020ff 	mov	r2, #255	; 0xff
   23278:	e1c460b0 	strh	r6, [r4]
   2327c:	e28d00c8 	add	r0, sp, #200	; 0xc8
   23280:	e58d3004 	str	r3, [sp, #4]
   23284:	eb001a75 	bl	29c60 <strncpy>
   23288:	e28d00c8 	add	r0, sp, #200	; 0xc8
   2328c:	e28d2008 	add	r2, sp, #8
   23290:	e59f12fc 	ldr	r1, [pc, #764]	; 23594 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   23294:	e5cd51c7 	strb	r5, [sp, #455]	; 0x1c7
   23298:	eb001ac1 	bl	29da4 <strtok_r>
   2329c:	e2506000 	subs	r6, r0, #0
   232a0:	028d9f75 	addeq	r9, sp, #468	; 0x1d4
   232a4:	0a00002b 	beq	23358 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   232a8:	e1a0b005 	mov	fp, r5
   232ac:	e59fa2e0 	ldr	sl, [pc, #736]	; 23594 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   232b0:	e28d9f75 	add	r9, sp, #468	; 0x1d4
   232b4:	ea000010 	b	232fc <CDNSClient::Resolve(char const*, CIPAddress*)+0x16c>
   232b8:	e0493004 	sub	r3, r9, r4
   232bc:	e2633c02 	rsb	r3, r3, #512	; 0x200
   232c0:	e2802002 	add	r2, r0, #2
   232c4:	e1520003 	cmp	r2, r3
   232c8:	aa000010 	bge	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   232cc:	e2898001 	add	r8, r9, #1
   232d0:	e5c90000 	strb	r0, [r9]
   232d4:	e1a01006 	mov	r1, r6
   232d8:	e1a00008 	mov	r0, r8
   232dc:	eb001a54 	bl	29c34 <strcpy>
   232e0:	e28d2008 	add	r2, sp, #8
   232e4:	e1a0100a 	mov	r1, sl
   232e8:	e1a0000b 	mov	r0, fp
   232ec:	eb001aac 	bl	29da4 <strtok_r>
   232f0:	e2506000 	subs	r6, r0, #0
   232f4:	e0889007 	add	r9, r8, r7
   232f8:	0a000016 	beq	23358 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   232fc:	e1a00006 	mov	r0, r6
   23300:	eb00198d 	bl	2993c <strlen>
   23304:	e35000ff 	cmp	r0, #255	; 0xff
   23308:	e1a07000 	mov	r7, r0
   2330c:	9affffe9 	bls	232b8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x128>
   23310:	e28d0028 	add	r0, sp, #40	; 0x28
   23314:	ebfffcf7 	bl	226f8 <CSocket::~CSocket()>
   23318:	eaffffb5 	b	231f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   2331c:	ebffff53 	bl	23070 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23320:	e2505000 	subs	r5, r0, #0
   23324:	0affffa4 	beq	231bc <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   23328:	e1a00005 	mov	r0, r5
   2332c:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23330:	e28dd00c 	add	sp, sp, #12
   23334:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23338:	e3a02060 	mov	r2, #96	; 0x60
   2333c:	e59f1254 	ldr	r1, [pc, #596]	; 23598 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23340:	e59f0254 	ldr	r0, [pc, #596]	; 2359c <CDNSClient::Resolve(char const*, CIPAddress*)+0x40c>
   23344:	eb00035e 	bl	240c4 <assertion_failed>
   23348:	e3a0206a 	mov	r2, #106	; 0x6a
   2334c:	e59f1244 	ldr	r1, [pc, #580]	; 23598 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23350:	e59f0248 	ldr	r0, [pc, #584]	; 235a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x410>
   23354:	eb00035a 	bl	240c4 <assertion_failed>
   23358:	e3a02c01 	mov	r2, #256	; 0x100
   2335c:	e3a08000 	mov	r8, #0
   23360:	e2890001 	add	r0, r9, #1
   23364:	e0403004 	sub	r3, r0, r4
   23368:	e2633c02 	rsb	r3, r3, #512	; 0x200
   2336c:	e28d100c 	add	r1, sp, #12
   23370:	e3530003 	cmp	r3, #3
   23374:	e5c98000 	strb	r8, [r9]
   23378:	e1cd20bc 	strh	r2, [sp, #12]
   2337c:	e1c120b2 	strh	r2, [r1, #2]
   23380:	daffffe2 	ble	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23384:	e3a02004 	mov	r2, #4
   23388:	e2899005 	add	r9, r9, #5
   2338c:	eb001b8f 	bl	2a1d0 <memcpy>
   23390:	e0493004 	sub	r3, r9, r4
   23394:	e3530c02 	cmp	r3, #512	; 0x200
   23398:	ca000053 	bgt	234ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x35c>
   2339c:	e1a07008 	mov	r7, r8
   233a0:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   233a4:	e3a08003 	mov	r8, #3
   233a8:	e3a0a040 	mov	sl, #64	; 0x40
   233ac:	e1a06003 	mov	r6, r3
   233b0:	e28d9ff2 	add	r9, sp, #968	; 0x3c8
   233b4:	e1a03007 	mov	r3, r7
   233b8:	e1a02006 	mov	r2, r6
   233bc:	e1a01004 	mov	r1, r4
   233c0:	e28d0028 	add	r0, sp, #40	; 0x28
   233c4:	ebfffd3a 	bl	228b4 <CSocket::Send(void const*, unsigned int, int)>
   233c8:	e1560000 	cmp	r6, r0
   233cc:	1affffcf 	bne	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   233d0:	eb00028d 	bl	23e0c <CScheduler::Get()>
   233d4:	e1a0100b 	mov	r1, fp
   233d8:	eb000267 	bl	23d7c <CScheduler::MsSleep(unsigned int)>
   233dc:	e1a0300a 	mov	r3, sl
   233e0:	e3a02c02 	mov	r2, #512	; 0x200
   233e4:	e1a01009 	mov	r1, r9
   233e8:	e28d0028 	add	r0, sp, #40	; 0x28
   233ec:	ebfffd4d 	bl	22928 <CSocket::Receive(void*, unsigned int, int)>
   233f0:	e59f31ac 	ldr	r3, [pc, #428]	; 235a4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x414>
   233f4:	e1500003 	cmp	r0, r3
   233f8:	ca000006 	bgt	23418 <CDNSClient::Resolve(char const*, CIPAddress*)+0x288>
   233fc:	e3500000 	cmp	r0, #0
   23400:	baffffc2 	blt	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23404:	e3500019 	cmp	r0, #25
   23408:	ca000006 	bgt	23428 <CDNSClient::Resolve(char const*, CIPAddress*)+0x298>
   2340c:	e2588001 	subs	r8, r8, #1
   23410:	0affffbe 	beq	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23414:	eaffffe6 	b	233b4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x224>
   23418:	e3a020ba 	mov	r2, #186	; 0xba
   2341c:	e59f1174 	ldr	r1, [pc, #372]	; 23598 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23420:	e59f0180 	ldr	r0, [pc, #384]	; 235a8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   23424:	eb000326 	bl	240c4 <assertion_failed>
   23428:	e1d920b0 	ldrh	r2, [r9]
   2342c:	e59d1004 	ldr	r1, [sp, #4]
   23430:	e1a03000 	mov	r3, r0
   23434:	e1520001 	cmp	r2, r1
   23438:	1affffb4 	bne	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   2343c:	e1d910b2 	ldrh	r1, [r9, #2]
   23440:	e59f2164 	ldr	r2, [pc, #356]	; 235ac <CDNSClient::Resolve(char const*, CIPAddress*)+0x41c>
   23444:	e0022001 	and	r2, r2, r1
   23448:	e3520080 	cmp	r2, #128	; 0x80
   2344c:	1affffaf 	bne	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23450:	e1d920b4 	ldrh	r2, [r9, #4]
   23454:	e3520c01 	cmp	r2, #256	; 0x100
   23458:	1affffac 	bne	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   2345c:	e1d920b6 	ldrh	r2, [r9, #6]
   23460:	e3520000 	cmp	r2, #0
   23464:	0affffa9 	beq	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23468:	e28d2ff5 	add	r2, sp, #980	; 0x3d4
   2346c:	ea000004 	b	23484 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f4>
   23470:	e2811001 	add	r1, r1, #1
   23474:	e0822001 	add	r2, r2, r1
   23478:	e0421009 	sub	r1, r2, r9
   2347c:	e1530001 	cmp	r3, r1
   23480:	daffffa2 	ble	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23484:	e5d21000 	ldrb	r1, [r2]
   23488:	e3510000 	cmp	r1, #0
   2348c:	1afffff7 	bne	23470 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   23490:	e2822005 	add	r2, r2, #5
   23494:	e0421009 	sub	r1, r2, r9
   23498:	e1530001 	cmp	r3, r1
   2349c:	daffff9b 	ble	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   234a0:	e3a0800e 	mov	r8, #14
   234a4:	e1a07003 	mov	r7, r3
   234a8:	e243600e 	sub	r6, r3, #14
   234ac:	e5d23000 	ldrb	r3, [r2]
   234b0:	e2824001 	add	r4, r2, #1
   234b4:	e20310c0 	and	r1, r3, #192	; 0xc0
   234b8:	e35100c0 	cmp	r1, #192	; 0xc0
   234bc:	02824002 	addeq	r4, r2, #2
   234c0:	1a000004 	bne	234d8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x348>
   234c4:	ea00000c 	b	234fc <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   234c8:	e5d43000 	ldrb	r3, [r4]
   234cc:	e2844001 	add	r4, r4, #1
   234d0:	e3530000 	cmp	r3, #0
   234d4:	0a000008 	beq	234fc <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   234d8:	e0844003 	add	r4, r4, r3
   234dc:	e0443009 	sub	r3, r4, r9
   234e0:	e1570003 	cmp	r7, r3
   234e4:	cafffff7 	bgt	234c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x338>
   234e8:	eaffff88 	b	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   234ec:	e3a020a9 	mov	r2, #169	; 0xa9
   234f0:	e59f10a0 	ldr	r1, [pc, #160]	; 23598 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   234f4:	e59f00b4 	ldr	r0, [pc, #180]	; 235b0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x420>
   234f8:	eb0002f1 	bl	240c4 <assertion_failed>
   234fc:	e0443009 	sub	r3, r4, r9
   23500:	e1530006 	cmp	r3, r6
   23504:	caffff81 	bgt	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23508:	e1a02008 	mov	r2, r8
   2350c:	e1a01004 	mov	r1, r4
   23510:	e28d0018 	add	r0, sp, #24
   23514:	eb001b2d 	bl	2a1d0 <memcpy>
   23518:	e1dd31b8 	ldrh	r3, [sp, #24]
   2351c:	e3530c01 	cmp	r3, #256	; 0x100
   23520:	0a000008 	beq	23548 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   23524:	e1dd22b0 	ldrh	r2, [sp, #32]
   23528:	e6bf2fb2 	rev16	r2, r2
   2352c:	e6ff2072 	uxth	r2, r2
   23530:	e282200a 	add	r2, r2, #10
   23534:	e0842002 	add	r2, r4, r2
   23538:	e0423009 	sub	r3, r2, r9
   2353c:	e1570003 	cmp	r7, r3
   23540:	caffffd9 	bgt	234ac <CDNSClient::Resolve(char const*, CIPAddress*)+0x31c>
   23544:	eaffff71 	b	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23548:	e1dd31ba 	ldrh	r3, [sp, #26]
   2354c:	e3530c01 	cmp	r3, #256	; 0x100
   23550:	1afffff3 	bne	23524 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23554:	e1dd32b0 	ldrh	r3, [sp, #32]
   23558:	e3530b01 	cmp	r3, #1024	; 0x400
   2355c:	1afffff0 	bne	23524 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23560:	e59d3000 	ldr	r3, [sp]
   23564:	e3530000 	cmp	r3, #0
   23568:	0a000004 	beq	23580 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   2356c:	e28d1022 	add	r1, sp, #34	; 0x22
   23570:	e59d0000 	ldr	r0, [sp]
   23574:	ebfff4bc 	bl	2086c <CIPAddress::Set(unsigned char const*)>
   23578:	e3a05001 	mov	r5, #1
   2357c:	eaffff63 	b	23310 <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23580:	e59f202c 	ldr	r2, [pc, #44]	; 235b4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x424>
   23584:	e59f100c 	ldr	r1, [pc, #12]	; 23598 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23588:	e59f0028 	ldr	r0, [pc, #40]	; 235b8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x428>
   2358c:	eb0002cc 	bl	240c4 <assertion_failed>
   23590:	00049aa0 	.word	0x00049aa0
   23594:	00040680 	.word	0x00040680
   23598:	000462ec 	.word	0x000462ec
   2359c:	00046328 	.word	0x00046328
   235a0:	00045178 	.word	0x00045178
   235a4:	000001ff 	.word	0x000001ff
   235a8:	00046358 	.word	0x00046358
   235ac:	00000ffa 	.word	0x00000ffa
   235b0:	00046338 	.word	0x00046338
   235b4:	0000010d 	.word	0x0000010d
   235b8:	0004630c 	.word	0x0004630c

000235bc <CTask::Run()>:
   235bc:	e92d4010 	push	{r4, lr}
   235c0:	e3a0203f 	mov	r2, #63	; 0x3f
   235c4:	e59f1004 	ldr	r1, [pc, #4]	; 235d0 <CTask::Run()+0x14>
   235c8:	e59f0004 	ldr	r0, [pc, #4]	; 235d4 <CTask::Run()+0x18>
   235cc:	eb0002bc 	bl	240c4 <assertion_failed>
   235d0:	00046390 	.word	0x00046390
   235d4:	000414b4 	.word	0x000414b4

000235d8 <CTask::TaskEntry(void*)>:
   235d8:	e92d4010 	push	{r4, lr}
   235dc:	e2504000 	subs	r4, r0, #0
   235e0:	0a00000c 	beq	23618 <CTask::TaskEntry(void*)+0x40>
   235e4:	e5943000 	ldr	r3, [r4]
   235e8:	e5933008 	ldr	r3, [r3, #8]
   235ec:	e12fff33 	blx	r3
   235f0:	e3a03003 	mov	r3, #3
   235f4:	e28400d4 	add	r0, r4, #212	; 0xd4
   235f8:	e5c43004 	strb	r3, [r4, #4]
   235fc:	eb00022d 	bl	23eb8 <CSynchronizationEvent::Set()>
   23600:	eb000201 	bl	23e0c <CScheduler::Get()>
   23604:	eb00016d 	bl	23bc0 <CScheduler::Yield()>
   23608:	e3a0208c 	mov	r2, #140	; 0x8c
   2360c:	e59f1014 	ldr	r1, [pc, #20]	; 23628 <CTask::TaskEntry(void*)+0x50>
   23610:	e59f0014 	ldr	r0, [pc, #20]	; 2362c <CTask::TaskEntry(void*)+0x54>
   23614:	eb0002aa 	bl	240c4 <assertion_failed>
   23618:	e3a02084 	mov	r2, #132	; 0x84
   2361c:	e59f1004 	ldr	r1, [pc, #4]	; 23628 <CTask::TaskEntry(void*)+0x50>
   23620:	e59f0008 	ldr	r0, [pc, #8]	; 23630 <CTask::TaskEntry(void*)+0x58>
   23624:	eb0002a6 	bl	240c4 <assertion_failed>
   23628:	00046390 	.word	0x00046390
   2362c:	000414b4 	.word	0x000414b4
   23630:	000408c0 	.word	0x000408c0

00023634 <CTask::~CTask()>:
   23634:	e5d02004 	ldrb	r2, [r0, #4]
   23638:	e59f3050 	ldr	r3, [pc, #80]	; 23690 <CTask::~CTask()+0x5c>
   2363c:	e3520003 	cmp	r2, #3
   23640:	e92d4010 	push	{r4, lr}
   23644:	e5803000 	str	r3, [r0]
   23648:	1a00000c 	bne	23680 <CTask::~CTask()+0x4c>
   2364c:	e1a04000 	mov	r4, r0
   23650:	e3a03004 	mov	r3, #4
   23654:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23658:	e5c43004 	strb	r3, [r4, #4]
   2365c:	e3500000 	cmp	r0, #0
   23660:	0a000000 	beq	23668 <CTask::~CTask()+0x34>
   23664:	eb001cba 	bl	2a954 <operator delete[](void*)>
   23668:	e3a03000 	mov	r3, #0
   2366c:	e28400d4 	add	r0, r4, #212	; 0xd4
   23670:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23674:	eb0001ff 	bl	23e78 <CSynchronizationEvent::~CSynchronizationEvent()>
   23678:	e1a00004 	mov	r0, r4
   2367c:	e8bd8010 	pop	{r4, pc}
   23680:	e3a02036 	mov	r2, #54	; 0x36
   23684:	e59f1008 	ldr	r1, [pc, #8]	; 23694 <CTask::~CTask()+0x60>
   23688:	e59f0008 	ldr	r0, [pc, #8]	; 23698 <CTask::~CTask()+0x64>
   2368c:	eb00028c 	bl	240c4 <assertion_failed>
   23690:	00046384 	.word	0x00046384
   23694:	00046390 	.word	0x00046390
   23698:	0004639c 	.word	0x0004639c

0002369c <CTask::~CTask()>:
   2369c:	e92d4010 	push	{r4, lr}
   236a0:	e1a04000 	mov	r4, r0
   236a4:	ebffffe2 	bl	23634 <CTask::~CTask()>
   236a8:	e1a00004 	mov	r0, r4
   236ac:	e3a010dc 	mov	r1, #220	; 0xdc
   236b0:	eb001cad 	bl	2a96c <operator delete(void*, unsigned int)>
   236b4:	e1a00004 	mov	r0, r4
   236b8:	e8bd8010 	pop	{r4, pc}

000236bc <CTask::Terminate()>:
   236bc:	e1a03000 	mov	r3, r0
   236c0:	e3a02003 	mov	r2, #3
   236c4:	e92d4010 	push	{r4, lr}
   236c8:	e28000d4 	add	r0, r0, #212	; 0xd4
   236cc:	e5c32004 	strb	r2, [r3, #4]
   236d0:	eb0001f8 	bl	23eb8 <CSynchronizationEvent::Set()>
   236d4:	eb0001cc 	bl	23e0c <CScheduler::Get()>
   236d8:	eb000138 	bl	23bc0 <CScheduler::Yield()>
   236dc:	e3a02048 	mov	r2, #72	; 0x48
   236e0:	e59f1004 	ldr	r1, [pc, #4]	; 236ec <CTask::Terminate()+0x30>
   236e4:	e59f0004 	ldr	r0, [pc, #4]	; 236f0 <CTask::Terminate()+0x34>
   236e8:	eb000275 	bl	240c4 <assertion_failed>
   236ec:	00046390 	.word	0x00046390
   236f0:	000414b4 	.word	0x000414b4

000236f4 <CTask::WaitForTermination()>:
   236f4:	e28000d4 	add	r0, r0, #212	; 0xd4
   236f8:	ea0001fc 	b	23ef0 <CSynchronizationEvent::Wait()>

000236fc <CTask::SetUserData(void*, unsigned int)>:
   236fc:	e0802102 	add	r2, r0, r2, lsl #2
   23700:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23704:	e12fff1e 	bx	lr

00023708 <CTask::GetUserData(unsigned int)>:
   23708:	e0801101 	add	r1, r0, r1, lsl #2
   2370c:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23710:	e12fff1e 	bx	lr

00023714 <CTask::InitializeRegs()>:
   23714:	e92d4010 	push	{r4, lr}
   23718:	e1a04000 	mov	r4, r0
   2371c:	e3a020b8 	mov	r2, #184	; 0xb8
   23720:	e280000c 	add	r0, r0, #12
   23724:	e3a01000 	mov	r1, #0
   23728:	eb001831 	bl	297f4 <memset>
   2372c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23730:	e584400c 	str	r4, [r4, #12]
   23734:	e3530000 	cmp	r3, #0
   23738:	0a000009 	beq	23764 <CTask::InitializeRegs()+0x50>
   2373c:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23740:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23744:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23748:	e59f2024 	ldr	r2, [pc, #36]	; 23774 <CTask::InitializeRegs()+0x60>
   2374c:	e083300c 	add	r3, r3, ip
   23750:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23754:	e5840010 	str	r0, [r4, #16]
   23758:	e5841014 	str	r1, [r4, #20]
   2375c:	e5842040 	str	r2, [r4, #64]	; 0x40
   23760:	e8bd8010 	pop	{r4, pc}
   23764:	e3a02062 	mov	r2, #98	; 0x62
   23768:	e59f1008 	ldr	r1, [pc, #8]	; 23778 <CTask::InitializeRegs()+0x64>
   2376c:	e59f0008 	ldr	r0, [pc, #8]	; 2377c <CTask::InitializeRegs()+0x68>
   23770:	eb000253 	bl	240c4 <assertion_failed>
   23774:	000235d8 	.word	0x000235d8
   23778:	00046390 	.word	0x00046390
   2377c:	000463bc 	.word	0x000463bc

00023780 <CTask::CTask(unsigned int)>:
   23780:	e92d4070 	push	{r4, r5, r6, lr}
   23784:	e3a05000 	mov	r5, #0
   23788:	e1a04000 	mov	r4, r0
   2378c:	e59f3080 	ldr	r3, [pc, #128]	; 23814 <CTask::CTask(unsigned int)+0x94>
   23790:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23794:	e5803000 	str	r3, [r0]
   23798:	e5c05004 	strb	r5, [r0, #4]
   2379c:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   237a0:	e1a01005 	mov	r1, r5
   237a4:	e28000d4 	add	r0, r0, #212	; 0xd4
   237a8:	eb0001ae 	bl	23e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   237ac:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   237b0:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   237b4:	e1500005 	cmp	r0, r5
   237b8:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   237bc:	0a000007 	beq	237e0 <CTask::CTask(unsigned int)+0x60>
   237c0:	e3500b01 	cmp	r0, #1024	; 0x400
   237c4:	3a00000a 	bcc	237f4 <CTask::CTask(unsigned int)+0x74>
   237c8:	e3100003 	tst	r0, #3
   237cc:	1a00000c 	bne	23804 <CTask::CTask(unsigned int)+0x84>
   237d0:	eb001c58 	bl	2a938 <operator new[](unsigned int)>
   237d4:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   237d8:	e1a00004 	mov	r0, r4
   237dc:	ebffffcc 	bl	23714 <CTask::InitializeRegs()>
   237e0:	eb000189 	bl	23e0c <CScheduler::Get()>
   237e4:	e1a01004 	mov	r1, r4
   237e8:	eb000054 	bl	23940 <CScheduler::AddTask(CTask*)>
   237ec:	e1a00004 	mov	r0, r4
   237f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   237f4:	e3a02025 	mov	r2, #37	; 0x25
   237f8:	e59f1018 	ldr	r1, [pc, #24]	; 23818 <CTask::CTask(unsigned int)+0x98>
   237fc:	e59f0018 	ldr	r0, [pc, #24]	; 2381c <CTask::CTask(unsigned int)+0x9c>
   23800:	eb00022f 	bl	240c4 <assertion_failed>
   23804:	e3a02027 	mov	r2, #39	; 0x27
   23808:	e59f1008 	ldr	r1, [pc, #8]	; 23818 <CTask::CTask(unsigned int)+0x98>
   2380c:	e59f000c 	ldr	r0, [pc, #12]	; 23820 <CTask::CTask(unsigned int)+0xa0>
   23810:	eb00022b 	bl	240c4 <assertion_failed>
   23814:	00046384 	.word	0x00046384
   23818:	00046390 	.word	0x00046390
   2381c:	000463cc 	.word	0x000463cc
   23820:	000463e4 	.word	0x000463e4

00023824 <CScheduler::CScheduler()>:
   23824:	e3a03000 	mov	r3, #0
   23828:	e59f2058 	ldr	r2, [pc, #88]	; 23888 <CScheduler::CScheduler()+0x64>
   2382c:	e92d4070 	push	{r4, r5, r6, lr}
   23830:	e5925000 	ldr	r5, [r2]
   23834:	e5803050 	str	r3, [r0, #80]	; 0x50
   23838:	e1550003 	cmp	r5, r3
   2383c:	e5803054 	str	r3, [r0, #84]	; 0x54
   23840:	e5803058 	str	r3, [r0, #88]	; 0x58
   23844:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23848:	e5803060 	str	r3, [r0, #96]	; 0x60
   2384c:	1a000009 	bne	23878 <CScheduler::CScheduler()+0x54>
   23850:	e1a04000 	mov	r4, r0
   23854:	e3a000dc 	mov	r0, #220	; 0xdc
   23858:	e5824000 	str	r4, [r2]
   2385c:	eb001c34 	bl	2a934 <operator new(unsigned int)>
   23860:	e1a06000 	mov	r6, r0
   23864:	e1a01005 	mov	r1, r5
   23868:	ebffffc4 	bl	23780 <CTask::CTask(unsigned int)>
   2386c:	e5846054 	str	r6, [r4, #84]	; 0x54
   23870:	e1a00004 	mov	r0, r4
   23874:	e8bd8070 	pop	{r4, r5, r6, pc}
   23878:	e3a02024 	mov	r2, #36	; 0x24
   2387c:	e59f1008 	ldr	r1, [pc, #8]	; 2388c <CScheduler::CScheduler()+0x68>
   23880:	e59f0008 	ldr	r0, [pc, #8]	; 23890 <CScheduler::CScheduler()+0x6c>
   23884:	eb00020e 	bl	240c4 <assertion_failed>
   23888:	00050150 	.word	0x00050150
   2388c:	00046404 	.word	0x00046404
   23890:	00045110 	.word	0x00045110

00023894 <CScheduler::~CScheduler()>:
   23894:	e3a02000 	mov	r2, #0
   23898:	e59f3004 	ldr	r3, [pc, #4]	; 238a4 <CScheduler::~CScheduler()+0x10>
   2389c:	e5832000 	str	r2, [r3]
   238a0:	e12fff1e 	bx	lr
   238a4:	00050150 	.word	0x00050150

000238a8 <CScheduler::GetCurrentTask()>:
   238a8:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   238ac:	e12fff1e 	bx	lr

000238b0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   238b0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   238b4:	e92d4010 	push	{r4, lr}
   238b8:	e3530000 	cmp	r3, #0
   238bc:	1a000006 	bne	238dc <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   238c0:	e3510000 	cmp	r1, #0
   238c4:	e580105c 	str	r1, [r0, #92]	; 0x5c
   238c8:	18bd8010 	popne	{r4, pc}
   238cc:	e3a02080 	mov	r2, #128	; 0x80
   238d0:	e59f1014 	ldr	r1, [pc, #20]	; 238ec <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   238d4:	e59f0014 	ldr	r0, [pc, #20]	; 238f0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   238d8:	eb0001f9 	bl	240c4 <assertion_failed>
   238dc:	e3a0207e 	mov	r2, #126	; 0x7e
   238e0:	e59f1004 	ldr	r1, [pc, #4]	; 238ec <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   238e4:	e59f0008 	ldr	r0, [pc, #8]	; 238f4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   238e8:	eb0001f5 	bl	240c4 <assertion_failed>
   238ec:	00046404 	.word	0x00046404
   238f0:	00046430 	.word	0x00046430
   238f4:	00046414 	.word	0x00046414

000238f8 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   238f8:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   238fc:	e92d4010 	push	{r4, lr}
   23900:	e3530000 	cmp	r3, #0
   23904:	1a000006 	bne	23924 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   23908:	e3510000 	cmp	r1, #0
   2390c:	e5801060 	str	r1, [r0, #96]	; 0x60
   23910:	18bd8010 	popne	{r4, pc}
   23914:	e3a02087 	mov	r2, #135	; 0x87
   23918:	e59f1014 	ldr	r1, [pc, #20]	; 23934 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   2391c:	e59f0014 	ldr	r0, [pc, #20]	; 23938 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   23920:	eb0001e7 	bl	240c4 <assertion_failed>
   23924:	e3a02085 	mov	r2, #133	; 0x85
   23928:	e59f1004 	ldr	r1, [pc, #4]	; 23934 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   2392c:	e59f0008 	ldr	r0, [pc, #8]	; 2393c <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   23930:	eb0001e3 	bl	240c4 <assertion_failed>
   23934:	00046404 	.word	0x00046404
   23938:	0004646c 	.word	0x0004646c
   2393c:	0004644c 	.word	0x0004644c

00023940 <CScheduler::AddTask(CTask*)>:
   23940:	e92d4070 	push	{r4, r5, r6, lr}
   23944:	e2515000 	subs	r5, r1, #0
   23948:	0a00001c 	beq	239c0 <CScheduler::AddTask(CTask*)+0x80>
   2394c:	e1a04000 	mov	r4, r0
   23950:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   23954:	e3500000 	cmp	r0, #0
   23958:	0a00001c 	beq	239d0 <CScheduler::AddTask(CTask*)+0x90>
   2395c:	e5943000 	ldr	r3, [r4]
   23960:	e3530000 	cmp	r3, #0
   23964:	11a02004 	movne	r2, r4
   23968:	13a03000 	movne	r3, #0
   2396c:	1a000003 	bne	23980 <CScheduler::AddTask(CTask*)+0x40>
   23970:	ea000009 	b	2399c <CScheduler::AddTask(CTask*)+0x5c>
   23974:	e5b21004 	ldr	r1, [r2, #4]!
   23978:	e3510000 	cmp	r1, #0
   2397c:	0a000006 	beq	2399c <CScheduler::AddTask(CTask*)+0x5c>
   23980:	e2833001 	add	r3, r3, #1
   23984:	e1530000 	cmp	r3, r0
   23988:	1afffff9 	bne	23974 <CScheduler::AddTask(CTask*)+0x34>
   2398c:	e3530014 	cmp	r3, #20
   23990:	0a000003 	beq	239a4 <CScheduler::AddTask(CTask*)+0x64>
   23994:	e2832001 	add	r2, r3, #1
   23998:	e5842050 	str	r2, [r4, #80]	; 0x50
   2399c:	e7845103 	str	r5, [r4, r3, lsl #2]
   239a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   239a4:	eb000ab9 	bl	26490 <CLogger::Get()>
   239a8:	e59f3028 	ldr	r3, [pc, #40]	; 239d8 <CScheduler::AddTask(CTask*)+0x98>
   239ac:	e3a02000 	mov	r2, #0
   239b0:	e59f1024 	ldr	r1, [pc, #36]	; 239dc <CScheduler::AddTask(CTask*)+0x9c>
   239b4:	eb0009f2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   239b8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   239bc:	eafffff4 	b	23994 <CScheduler::AddTask(CTask*)+0x54>
   239c0:	e3a0208c 	mov	r2, #140	; 0x8c
   239c4:	e59f1014 	ldr	r1, [pc, #20]	; 239e0 <CScheduler::AddTask(CTask*)+0xa0>
   239c8:	e59f0014 	ldr	r0, [pc, #20]	; 239e4 <CScheduler::AddTask(CTask*)+0xa4>
   239cc:	eb0001bc 	bl	240c4 <assertion_failed>
   239d0:	e1a03000 	mov	r3, r0
   239d4:	eaffffee 	b	23994 <CScheduler::AddTask(CTask*)+0x54>
   239d8:	00046498 	.word	0x00046498
   239dc:	000463fc 	.word	0x000463fc
   239e0:	00046404 	.word	0x00046404
   239e4:	0004648c 	.word	0x0004648c

000239e8 <CScheduler::RemoveTask(CTask*)>:
   239e8:	e92d4010 	push	{r4, lr}
   239ec:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   239f0:	e35e0000 	cmp	lr, #0
   239f4:	0a000012 	beq	23a44 <CScheduler::RemoveTask(CTask*)+0x5c>
   239f8:	e5903000 	ldr	r3, [r0]
   239fc:	e1510003 	cmp	r1, r3
   23a00:	11a02000 	movne	r2, r0
   23a04:	13a03000 	movne	r3, #0
   23a08:	0a00000b 	beq	23a3c <CScheduler::RemoveTask(CTask*)+0x54>
   23a0c:	e2833001 	add	r3, r3, #1
   23a10:	e153000e 	cmp	r3, lr
   23a14:	0a00000a 	beq	23a44 <CScheduler::RemoveTask(CTask*)+0x5c>
   23a18:	e5b2c004 	ldr	ip, [r2, #4]!
   23a1c:	e15c0001 	cmp	ip, r1
   23a20:	1afffff9 	bne	23a0c <CScheduler::RemoveTask(CTask*)+0x24>
   23a24:	e3a02000 	mov	r2, #0
   23a28:	e24ee001 	sub	lr, lr, #1
   23a2c:	e15e0003 	cmp	lr, r3
   23a30:	e7802103 	str	r2, [r0, r3, lsl #2]
   23a34:	05803050 	streq	r3, [r0, #80]	; 0x50
   23a38:	e8bd8010 	pop	{r4, pc}
   23a3c:	e3a03000 	mov	r3, #0
   23a40:	eafffff7 	b	23a24 <CScheduler::RemoveTask(CTask*)+0x3c>
   23a44:	e3a020b2 	mov	r2, #178	; 0xb2
   23a48:	e59f1004 	ldr	r1, [pc, #4]	; 23a54 <CScheduler::RemoveTask(CTask*)+0x6c>
   23a4c:	e59f0004 	ldr	r0, [pc, #4]	; 23a58 <CScheduler::RemoveTask(CTask*)+0x70>
   23a50:	eb00019b 	bl	240c4 <assertion_failed>
   23a54:	00046404 	.word	0x00046404
   23a58:	000414b4 	.word	0x000414b4

00023a5c <CScheduler::WakeTask(CTask**)>:
   23a5c:	e3510000 	cmp	r1, #0
   23a60:	e92d4010 	push	{r4, lr}
   23a64:	0a000009 	beq	23a90 <CScheduler::WakeTask(CTask**)+0x34>
   23a68:	e3a02000 	mov	r2, #0
   23a6c:	e5913000 	ldr	r3, [r1]
   23a70:	e5812000 	str	r2, [r1]
   23a74:	e1530002 	cmp	r3, r2
   23a78:	0a000008 	beq	23aa0 <CScheduler::WakeTask(CTask**)+0x44>
   23a7c:	e5d31004 	ldrb	r1, [r3, #4]
   23a80:	e3510001 	cmp	r1, #1
   23a84:	1a000009 	bne	23ab0 <CScheduler::WakeTask(CTask**)+0x54>
   23a88:	e5c32004 	strb	r2, [r3, #4]
   23a8c:	e8bd8010 	pop	{r4, pc}
   23a90:	e3a020c3 	mov	r2, #195	; 0xc3
   23a94:	e59f1024 	ldr	r1, [pc, #36]	; 23ac0 <CScheduler::WakeTask(CTask**)+0x64>
   23a98:	e59f0024 	ldr	r0, [pc, #36]	; 23ac4 <CScheduler::WakeTask(CTask**)+0x68>
   23a9c:	eb000188 	bl	240c4 <assertion_failed>
   23aa0:	e3a020cf 	mov	r2, #207	; 0xcf
   23aa4:	e59f1014 	ldr	r1, [pc, #20]	; 23ac0 <CScheduler::WakeTask(CTask**)+0x64>
   23aa8:	e59f0018 	ldr	r0, [pc, #24]	; 23ac8 <CScheduler::WakeTask(CTask**)+0x6c>
   23aac:	eb000184 	bl	240c4 <assertion_failed>
   23ab0:	e3a020d0 	mov	r2, #208	; 0xd0
   23ab4:	e59f1004 	ldr	r1, [pc, #4]	; 23ac0 <CScheduler::WakeTask(CTask**)+0x64>
   23ab8:	e59f000c 	ldr	r0, [pc, #12]	; 23acc <CScheduler::WakeTask(CTask**)+0x70>
   23abc:	eb000180 	bl	240c4 <assertion_failed>
   23ac0:	00046404 	.word	0x00046404
   23ac4:	000464b8 	.word	0x000464b8
   23ac8:	0004648c 	.word	0x0004648c
   23acc:	000464c4 	.word	0x000464c4

00023ad0 <CScheduler::GetNextTask()>:
   23ad0:	e92d4070 	push	{r4, r5, r6, lr}
   23ad4:	e1a06000 	mov	r6, r0
   23ad8:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   23adc:	eb001737 	bl	297c0 <CTimer::Get()>
   23ae0:	eb001479 	bl	28ccc <CTimer::GetClockTicks()>
   23ae4:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   23ae8:	e3540013 	cmp	r4, #19
   23aec:	83a04000 	movhi	r4, #0
   23af0:	e3530000 	cmp	r3, #0
   23af4:	0a000015 	beq	23b50 <CScheduler::GetNextTask()+0x80>
   23af8:	e3a01001 	mov	r1, #1
   23afc:	e2844001 	add	r4, r4, #1
   23b00:	e1540003 	cmp	r4, r3
   23b04:	23a04000 	movcs	r4, #0
   23b08:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   23b0c:	e3550000 	cmp	r5, #0
   23b10:	0a00000b 	beq	23b44 <CScheduler::GetNextTask()+0x74>
   23b14:	e5d52004 	ldrb	r2, [r5, #4]
   23b18:	e3520003 	cmp	r2, #3
   23b1c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   23b20:	ea00001c 	b	23b98 <CScheduler::GetNextTask()+0xc8>
   23b24:	00023b54 	.word	0x00023b54
   23b28:	00023b44 	.word	0x00023b44
   23b2c:	00023b34 	.word	0x00023b34
   23b30:	00023b5c 	.word	0x00023b5c
   23b34:	e5952008 	ldr	r2, [r5, #8]
   23b38:	e0422000 	sub	r2, r2, r0
   23b3c:	e3520000 	cmp	r2, #0
   23b40:	da000018 	ble	23ba8 <CScheduler::GetNextTask()+0xd8>
   23b44:	e2811001 	add	r1, r1, #1
   23b48:	e1510003 	cmp	r1, r3
   23b4c:	9affffea 	bls	23afc <CScheduler::GetNextTask()+0x2c>
   23b50:	e3a04014 	mov	r4, #20
   23b54:	e1a00004 	mov	r0, r4
   23b58:	e8bd8070 	pop	{r4, r5, r6, pc}
   23b5c:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   23b60:	e3530000 	cmp	r3, #0
   23b64:	0a000001 	beq	23b70 <CScheduler::GetNextTask()+0xa0>
   23b68:	e1a00005 	mov	r0, r5
   23b6c:	e12fff33 	blx	r3
   23b70:	e3a04014 	mov	r4, #20
   23b74:	e1a00006 	mov	r0, r6
   23b78:	e1a01005 	mov	r1, r5
   23b7c:	ebffff99 	bl	239e8 <CScheduler::RemoveTask(CTask*)>
   23b80:	e5953000 	ldr	r3, [r5]
   23b84:	e1a00005 	mov	r0, r5
   23b88:	e5933004 	ldr	r3, [r3, #4]
   23b8c:	e12fff33 	blx	r3
   23b90:	e1a00004 	mov	r0, r4
   23b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   23b98:	e59f2014 	ldr	r2, [pc, #20]	; 23bb4 <CScheduler::GetNextTask()+0xe4>
   23b9c:	e59f1014 	ldr	r1, [pc, #20]	; 23bb8 <CScheduler::GetNextTask()+0xe8>
   23ba0:	e59f0014 	ldr	r0, [pc, #20]	; 23bbc <CScheduler::GetNextTask()+0xec>
   23ba4:	eb000146 	bl	240c4 <assertion_failed>
   23ba8:	e3a03000 	mov	r3, #0
   23bac:	e5c53004 	strb	r3, [r5, #4]
   23bb0:	eaffffe7 	b	23b54 <CScheduler::GetNextTask()+0x84>
   23bb4:	00000103 	.word	0x00000103
   23bb8:	00046404 	.word	0x00046404
   23bbc:	000414b4 	.word	0x000414b4

00023bc0 <CScheduler::Yield()>:
   23bc0:	e92d4070 	push	{r4, r5, r6, lr}
   23bc4:	e1a04000 	mov	r4, r0
   23bc8:	e1a00004 	mov	r0, r4
   23bcc:	ebffffbf 	bl	23ad0 <CScheduler::GetNextTask()>
   23bd0:	e3500014 	cmp	r0, #20
   23bd4:	e5840058 	str	r0, [r4, #88]	; 0x58
   23bd8:	1a000006 	bne	23bf8 <CScheduler::Yield()+0x38>
   23bdc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   23be0:	e3530000 	cmp	r3, #0
   23be4:	1afffff7 	bne	23bc8 <CScheduler::Yield()+0x8>
   23be8:	e3a02037 	mov	r2, #55	; 0x37
   23bec:	e59f10a0 	ldr	r1, [pc, #160]	; 23c94 <CScheduler::Yield()+0xd4>
   23bf0:	e59f00a0 	ldr	r0, [pc, #160]	; 23c98 <CScheduler::Yield()+0xd8>
   23bf4:	eb000132 	bl	240c4 <assertion_failed>
   23bf8:	e3500013 	cmp	r0, #19
   23bfc:	8a000018 	bhi	23c64 <CScheduler::Yield()+0xa4>
   23c00:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   23c04:	e3500000 	cmp	r0, #0
   23c08:	0a000019 	beq	23c74 <CScheduler::Yield()+0xb4>
   23c0c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   23c10:	e1500003 	cmp	r0, r3
   23c14:	08bd8070 	popeq	{r4, r5, r6, pc}
   23c18:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   23c1c:	e5840054 	str	r0, [r4, #84]	; 0x54
   23c20:	e3520000 	cmp	r2, #0
   23c24:	e283500c 	add	r5, r3, #12
   23c28:	e280400c 	add	r4, r0, #12
   23c2c:	0a000000 	beq	23c34 <CScheduler::Yield()+0x74>
   23c30:	e12fff32 	blx	r2
   23c34:	e3550000 	cmp	r5, #0
   23c38:	0a000011 	beq	23c84 <CScheduler::Yield()+0xc4>
   23c3c:	e3540000 	cmp	r4, #0
   23c40:	0a000003 	beq	23c54 <CScheduler::Yield()+0x94>
   23c44:	e1a01004 	mov	r1, r4
   23c48:	e1a00005 	mov	r0, r5
   23c4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   23c50:	ea00007b 	b	23e44 <TaskSwitch>
   23c54:	e3a0204c 	mov	r2, #76	; 0x4c
   23c58:	e59f1034 	ldr	r1, [pc, #52]	; 23c94 <CScheduler::Yield()+0xd4>
   23c5c:	e59f0038 	ldr	r0, [pc, #56]	; 23c9c <CScheduler::Yield()+0xdc>
   23c60:	eb000117 	bl	240c4 <assertion_failed>
   23c64:	e3a0203a 	mov	r2, #58	; 0x3a
   23c68:	e59f1024 	ldr	r1, [pc, #36]	; 23c94 <CScheduler::Yield()+0xd4>
   23c6c:	e59f002c 	ldr	r0, [pc, #44]	; 23ca0 <CScheduler::Yield()+0xe0>
   23c70:	eb000113 	bl	240c4 <assertion_failed>
   23c74:	e3a0203c 	mov	r2, #60	; 0x3c
   23c78:	e59f1014 	ldr	r1, [pc, #20]	; 23c94 <CScheduler::Yield()+0xd4>
   23c7c:	e59f0020 	ldr	r0, [pc, #32]	; 23ca4 <CScheduler::Yield()+0xe4>
   23c80:	eb00010f 	bl	240c4 <assertion_failed>
   23c84:	e3a0204b 	mov	r2, #75	; 0x4b
   23c88:	e59f1004 	ldr	r1, [pc, #4]	; 23c94 <CScheduler::Yield()+0xd4>
   23c8c:	e59f0014 	ldr	r0, [pc, #20]	; 23ca8 <CScheduler::Yield()+0xe8>
   23c90:	eb00010b 	bl	240c4 <assertion_failed>
   23c94:	00046404 	.word	0x00046404
   23c98:	000464ec 	.word	0x000464ec
   23c9c:	00046530 	.word	0x00046530
   23ca0:	000464fc 	.word	0x000464fc
   23ca4:	00046514 	.word	0x00046514
   23ca8:	00046520 	.word	0x00046520

00023cac <CScheduler::usSleep(unsigned int)>:
   23cac:	e92d4070 	push	{r4, r5, r6, lr}
   23cb0:	e2514000 	subs	r4, r1, #0
   23cb4:	08bd8070 	popeq	{r4, r5, r6, pc}
   23cb8:	e1a05000 	mov	r5, r0
   23cbc:	eb0016bf 	bl	297c0 <CTimer::Get()>
   23cc0:	eb001401 	bl	28ccc <CTimer::GetClockTicks()>
   23cc4:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   23cc8:	e3530000 	cmp	r3, #0
   23ccc:	0a000009 	beq	23cf8 <CScheduler::usSleep(unsigned int)+0x4c>
   23cd0:	e5d32004 	ldrb	r2, [r3, #4]
   23cd4:	e3520000 	cmp	r2, #0
   23cd8:	1a00000a 	bne	23d08 <CScheduler::usSleep(unsigned int)+0x5c>
   23cdc:	e3a02002 	mov	r2, #2
   23ce0:	e0841000 	add	r1, r4, r0
   23ce4:	e5831008 	str	r1, [r3, #8]
   23ce8:	e1a00005 	mov	r0, r5
   23cec:	e8bd4070 	pop	{r4, r5, r6, lr}
   23cf0:	e5c32004 	strb	r2, [r3, #4]
   23cf4:	eaffffb1 	b	23bc0 <CScheduler::Yield()>
   23cf8:	e3a0206e 	mov	r2, #110	; 0x6e
   23cfc:	e59f1014 	ldr	r1, [pc, #20]	; 23d18 <CScheduler::usSleep(unsigned int)+0x6c>
   23d00:	e59f0014 	ldr	r0, [pc, #20]	; 23d1c <CScheduler::usSleep(unsigned int)+0x70>
   23d04:	eb0000ee 	bl	240c4 <assertion_failed>
   23d08:	e3a0206f 	mov	r2, #111	; 0x6f
   23d0c:	e59f1004 	ldr	r1, [pc, #4]	; 23d18 <CScheduler::usSleep(unsigned int)+0x6c>
   23d10:	e59f0008 	ldr	r0, [pc, #8]	; 23d20 <CScheduler::usSleep(unsigned int)+0x74>
   23d14:	eb0000ea 	bl	240c4 <assertion_failed>
   23d18:	00046404 	.word	0x00046404
   23d1c:	00046540 	.word	0x00046540
   23d20:	00046550 	.word	0x00046550

00023d24 <CScheduler::Sleep(unsigned int)>:
   23d24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23d28:	e59f5040 	ldr	r5, [pc, #64]	; 23d70 <CScheduler::Sleep(unsigned int)+0x4c>
   23d2c:	e1a04001 	mov	r4, r1
   23d30:	e1510005 	cmp	r1, r5
   23d34:	e1a06000 	mov	r6, r0
   23d38:	9a000007 	bls	23d5c <CScheduler::Sleep(unsigned int)+0x38>
   23d3c:	e59f7030 	ldr	r7, [pc, #48]	; 23d74 <CScheduler::Sleep(unsigned int)+0x50>
   23d40:	e2444c07 	sub	r4, r4, #1792	; 0x700
   23d44:	e1a01007 	mov	r1, r7
   23d48:	e1a00006 	mov	r0, r6
   23d4c:	e2444008 	sub	r4, r4, #8
   23d50:	ebffffd5 	bl	23cac <CScheduler::usSleep(unsigned int)>
   23d54:	e1540005 	cmp	r4, r5
   23d58:	8afffff8 	bhi	23d40 <CScheduler::Sleep(unsigned int)+0x1c>
   23d5c:	e59f1014 	ldr	r1, [pc, #20]	; 23d78 <CScheduler::Sleep(unsigned int)+0x54>
   23d60:	e1a00006 	mov	r0, r6
   23d64:	e0010491 	mul	r1, r1, r4
   23d68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23d6c:	eaffffce 	b	23cac <CScheduler::usSleep(unsigned int)>
   23d70:	00000708 	.word	0x00000708
   23d74:	6b49d200 	.word	0x6b49d200
   23d78:	000f4240 	.word	0x000f4240

00023d7c <CScheduler::MsSleep(unsigned int)>:
   23d7c:	e3510000 	cmp	r1, #0
   23d80:	012fff1e 	bxeq	lr
   23d84:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   23d88:	e0010193 	mul	r1, r3, r1
   23d8c:	eaffffc6 	b	23cac <CScheduler::usSleep(unsigned int)>

00023d90 <CScheduler::BlockTask(CTask**)>:
   23d90:	e3510000 	cmp	r1, #0
   23d94:	e92d4010 	push	{r4, lr}
   23d98:	0a00000b 	beq	23dcc <CScheduler::BlockTask(CTask**)+0x3c>
   23d9c:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   23da0:	e5812000 	str	r2, [r1]
   23da4:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   23da8:	e3530000 	cmp	r3, #0
   23dac:	0a00000a 	beq	23ddc <CScheduler::BlockTask(CTask**)+0x4c>
   23db0:	e5d32004 	ldrb	r2, [r3, #4]
   23db4:	e3520000 	cmp	r2, #0
   23db8:	1a00000b 	bne	23dec <CScheduler::BlockTask(CTask**)+0x5c>
   23dbc:	e8bd4010 	pop	{r4, lr}
   23dc0:	e3a02001 	mov	r2, #1
   23dc4:	e5c32004 	strb	r2, [r3, #4]
   23dc8:	eaffff7c 	b	23bc0 <CScheduler::Yield()>
   23dcc:	e3a020b7 	mov	r2, #183	; 0xb7
   23dd0:	e59f1024 	ldr	r1, [pc, #36]	; 23dfc <CScheduler::BlockTask(CTask**)+0x6c>
   23dd4:	e59f0024 	ldr	r0, [pc, #36]	; 23e00 <CScheduler::BlockTask(CTask**)+0x70>
   23dd8:	eb0000b9 	bl	240c4 <assertion_failed>
   23ddc:	e3a020ba 	mov	r2, #186	; 0xba
   23de0:	e59f1014 	ldr	r1, [pc, #20]	; 23dfc <CScheduler::BlockTask(CTask**)+0x6c>
   23de4:	e59f0018 	ldr	r0, [pc, #24]	; 23e04 <CScheduler::BlockTask(CTask**)+0x74>
   23de8:	eb0000b5 	bl	240c4 <assertion_failed>
   23dec:	e3a020bb 	mov	r2, #187	; 0xbb
   23df0:	e59f1004 	ldr	r1, [pc, #4]	; 23dfc <CScheduler::BlockTask(CTask**)+0x6c>
   23df4:	e59f000c 	ldr	r0, [pc, #12]	; 23e08 <CScheduler::BlockTask(CTask**)+0x78>
   23df8:	eb0000b1 	bl	240c4 <assertion_failed>
   23dfc:	00046404 	.word	0x00046404
   23e00:	000464b8 	.word	0x000464b8
   23e04:	00046540 	.word	0x00046540
   23e08:	00046550 	.word	0x00046550

00023e0c <CScheduler::Get()>:
   23e0c:	e59f3020 	ldr	r3, [pc, #32]	; 23e34 <CScheduler::Get()+0x28>
   23e10:	e5930000 	ldr	r0, [r3]
   23e14:	e3500000 	cmp	r0, #0
   23e18:	0a000000 	beq	23e20 <CScheduler::Get()+0x14>
   23e1c:	e12fff1e 	bx	lr
   23e20:	e92d4010 	push	{r4, lr}
   23e24:	e59f200c 	ldr	r2, [pc, #12]	; 23e38 <CScheduler::Get()+0x2c>
   23e28:	e59f100c 	ldr	r1, [pc, #12]	; 23e3c <CScheduler::Get()+0x30>
   23e2c:	e59f000c 	ldr	r0, [pc, #12]	; 23e40 <CScheduler::Get()+0x34>
   23e30:	eb0000a3 	bl	240c4 <assertion_failed>
   23e34:	00050150 	.word	0x00050150
   23e38:	0000010d 	.word	0x0000010d
   23e3c:	00046404 	.word	0x00046404
   23e40:	00045148 	.word	0x00045148

00023e44 <TaskSwitch>:
   23e44:	eef82a10 	vmrs	r2, fpexc
   23e48:	eef13a10 	vmrs	r3, fpscr
   23e4c:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   23e50:	ec800b20 	vstmia	r0, {d0-d15}
   23e54:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   23e58:	eee82a10 	vmsr	fpexc, r2
   23e5c:	eee13a10 	vmsr	fpscr, r3
   23e60:	ec910b20 	vldmia	r1, {d0-d15}
   23e64:	e12fff1e 	bx	lr

00023e68 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   23e68:	e3a02000 	mov	r2, #0
   23e6c:	e5c01000 	strb	r1, [r0]
   23e70:	e5802004 	str	r2, [r0, #4]
   23e74:	e12fff1e 	bx	lr

00023e78 <CSynchronizationEvent::~CSynchronizationEvent()>:
   23e78:	e5903004 	ldr	r3, [r0, #4]
   23e7c:	e3530000 	cmp	r3, #0
   23e80:	1a000000 	bne	23e88 <CSynchronizationEvent::~CSynchronizationEvent()+0x10>
   23e84:	e12fff1e 	bx	lr
   23e88:	e92d4010 	push	{r4, lr}
   23e8c:	e3a02023 	mov	r2, #35	; 0x23
   23e90:	e59f1004 	ldr	r1, [pc, #4]	; 23e9c <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   23e94:	e59f0004 	ldr	r0, [pc, #4]	; 23ea0 <CSynchronizationEvent::~CSynchronizationEvent()+0x28>
   23e98:	eb000089 	bl	240c4 <assertion_failed>
   23e9c:	0004657c 	.word	0x0004657c
   23ea0:	00046598 	.word	0x00046598

00023ea4 <CSynchronizationEvent::GetState()>:
   23ea4:	e5d00000 	ldrb	r0, [r0]
   23ea8:	e12fff1e 	bx	lr

00023eac <CSynchronizationEvent::Clear()>:
   23eac:	e3a03000 	mov	r3, #0
   23eb0:	e5c03000 	strb	r3, [r0]
   23eb4:	e12fff1e 	bx	lr

00023eb8 <CSynchronizationEvent::Set()>:
   23eb8:	e5d03000 	ldrb	r3, [r0]
   23ebc:	e3530000 	cmp	r3, #0
   23ec0:	112fff1e 	bxne	lr
   23ec4:	e3a02001 	mov	r2, #1
   23ec8:	e5903004 	ldr	r3, [r0, #4]
   23ecc:	e5c02000 	strb	r2, [r0]
   23ed0:	e3530000 	cmp	r3, #0
   23ed4:	012fff1e 	bxeq	lr
   23ed8:	e92d4010 	push	{r4, lr}
   23edc:	e1a04000 	mov	r4, r0
   23ee0:	ebffffc9 	bl	23e0c <CScheduler::Get()>
   23ee4:	e2841004 	add	r1, r4, #4
   23ee8:	e8bd4010 	pop	{r4, lr}
   23eec:	eafffeda 	b	23a5c <CScheduler::WakeTask(CTask**)>

00023ef0 <CSynchronizationEvent::Wait()>:
   23ef0:	e5d03000 	ldrb	r3, [r0]
   23ef4:	e3530000 	cmp	r3, #0
   23ef8:	112fff1e 	bxne	lr
   23efc:	e5903004 	ldr	r3, [r0, #4]
   23f00:	e92d4010 	push	{r4, lr}
   23f04:	e3530000 	cmp	r3, #0
   23f08:	e1a04000 	mov	r4, r0
   23f0c:	1a000009 	bne	23f38 <CSynchronizationEvent::Wait()+0x48>
   23f10:	ebffffbd 	bl	23e0c <CScheduler::Get()>
   23f14:	e2841004 	add	r1, r4, #4
   23f18:	ebffff9c 	bl	23d90 <CScheduler::BlockTask(CTask**)>
   23f1c:	e5d43000 	ldrb	r3, [r4]
   23f20:	e3530000 	cmp	r3, #0
   23f24:	18bd8010 	popne	{r4, pc}
   23f28:	e3a0204c 	mov	r2, #76	; 0x4c
   23f2c:	e59f1014 	ldr	r1, [pc, #20]	; 23f48 <CSynchronizationEvent::Wait()+0x58>
   23f30:	e59f0014 	ldr	r0, [pc, #20]	; 23f4c <CSynchronizationEvent::Wait()+0x5c>
   23f34:	eb000062 	bl	240c4 <assertion_failed>
   23f38:	e3a02049 	mov	r2, #73	; 0x49
   23f3c:	e59f1004 	ldr	r1, [pc, #4]	; 23f48 <CSynchronizationEvent::Wait()+0x58>
   23f40:	e59f0008 	ldr	r0, [pc, #8]	; 23f50 <CSynchronizationEvent::Wait()+0x60>
   23f44:	eb00005e 	bl	240c4 <assertion_failed>
   23f48:	0004657c 	.word	0x0004657c
   23f4c:	000465ac 	.word	0x000465ac
   23f50:	00046598 	.word	0x00046598

00023f54 <CActLED::CActLED(bool)>:
   23f54:	e3a03000 	mov	r3, #0
   23f58:	e59f2088 	ldr	r2, [pc, #136]	; 23fe8 <CActLED::CActLED(bool)+0x94>
   23f5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23f60:	e5803000 	str	r3, [r0]
   23f64:	e5803004 	str	r3, [r0, #4]
   23f68:	e1a07001 	mov	r7, r1
   23f6c:	e5820000 	str	r0, [r2]
   23f70:	e1a05000 	mov	r5, r0
   23f74:	eb000c3f 	bl	27078 <CMachineInfo::Get()>
   23f78:	eb000b68 	bl	26d20 <CMachineInfo::GetActLEDInfo() const>
   23f7c:	e2106080 	ands	r6, r0, #128	; 0x80
   23f80:	e1a04000 	mov	r4, r0
   23f84:	1a00000f 	bne	23fc8 <CActLED::CActLED(bool)+0x74>
   23f88:	e3a00028 	mov	r0, #40	; 0x28
   23f8c:	eb001a68 	bl	2a934 <operator new(unsigned int)>
   23f90:	e1a07000 	mov	r7, r0
   23f94:	e1a03006 	mov	r3, r6
   23f98:	e3a02001 	mov	r2, #1
   23f9c:	e204103f 	and	r1, r4, #63	; 0x3f
   23fa0:	eb0003cb 	bl	24ed4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   23fa4:	e5857000 	str	r7, [r5]
   23fa8:	e1a04324 	lsr	r4, r4, #6
   23fac:	e2244001 	eor	r4, r4, #1
   23fb0:	e2044001 	and	r4, r4, #1
   23fb4:	e1a00005 	mov	r0, r5
   23fb8:	e5c54008 	strb	r4, [r5, #8]
   23fbc:	eb00001b 	bl	24030 <CActLED::Off()>
   23fc0:	e1a00005 	mov	r0, r5
   23fc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23fc8:	e3a00014 	mov	r0, #20
   23fcc:	eb001a58 	bl	2a934 <operator new(unsigned int)>
   23fd0:	e1a06000 	mov	r6, r0
   23fd4:	e1a02007 	mov	r2, r7
   23fd8:	e204103f 	and	r1, r4, #63	; 0x3f
   23fdc:	eb001892 	bl	2a22c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   23fe0:	e5856004 	str	r6, [r5, #4]
   23fe4:	eaffffef 	b	23fa8 <CActLED::CActLED(bool)+0x54>
   23fe8:	00050154 	.word	0x00050154

00023fec <CActLED::~CActLED()>:
   23fec:	e3a02000 	mov	r2, #0
   23ff0:	e59f3004 	ldr	r3, [pc, #4]	; 23ffc <CActLED::~CActLED()+0x10>
   23ff4:	e5832000 	str	r2, [r3]
   23ff8:	e12fff1e 	bx	lr
   23ffc:	00050154 	.word	0x00050154

00024000 <CActLED::On()>:
   24000:	e5903000 	ldr	r3, [r0]
   24004:	e3530000 	cmp	r3, #0
   24008:	0a000002 	beq	24018 <CActLED::On()+0x18>
   2400c:	e5d01008 	ldrb	r1, [r0, #8]
   24010:	e1a00003 	mov	r0, r3
   24014:	ea000453 	b	25168 <CGPIOPin::Write(unsigned int)>
   24018:	e5903004 	ldr	r3, [r0, #4]
   2401c:	e3530000 	cmp	r3, #0
   24020:	012fff1e 	bxeq	lr
   24024:	e5d01008 	ldrb	r1, [r0, #8]
   24028:	e1a00003 	mov	r0, r3
   2402c:	ea0018d7 	b	2a390 <CVirtualGPIOPin::Write(unsigned int)>

00024030 <CActLED::Off()>:
   24030:	e5903000 	ldr	r3, [r0]
   24034:	e3530000 	cmp	r3, #0
   24038:	0a000003 	beq	2404c <CActLED::Off()+0x1c>
   2403c:	e5d01008 	ldrb	r1, [r0, #8]
   24040:	e1a00003 	mov	r0, r3
   24044:	e2211001 	eor	r1, r1, #1
   24048:	ea000446 	b	25168 <CGPIOPin::Write(unsigned int)>
   2404c:	e5903004 	ldr	r3, [r0, #4]
   24050:	e3530000 	cmp	r3, #0
   24054:	012fff1e 	bxeq	lr
   24058:	e5d01008 	ldrb	r1, [r0, #8]
   2405c:	e1a00003 	mov	r0, r3
   24060:	e2211001 	eor	r1, r1, #1
   24064:	ea0018c9 	b	2a390 <CVirtualGPIOPin::Write(unsigned int)>

00024068 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   24068:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2406c:	e2516000 	subs	r6, r1, #0
   24070:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24074:	e1a08003 	mov	r8, r3
   24078:	e1a07002 	mov	r7, r2
   2407c:	e1a05000 	mov	r5, r0
   24080:	e3a04001 	mov	r4, #1
   24084:	e1a00005 	mov	r0, r5
   24088:	ebffffdc 	bl	24000 <CActLED::On()>
   2408c:	e1a00007 	mov	r0, r7
   24090:	eb001591 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   24094:	e1a00005 	mov	r0, r5
   24098:	ebffffe4 	bl	24030 <CActLED::Off()>
   2409c:	e2844001 	add	r4, r4, #1
   240a0:	e1a00008 	mov	r0, r8
   240a4:	eb00158c 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   240a8:	e1560004 	cmp	r6, r4
   240ac:	2afffff4 	bcs	24084 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   240b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000240b4 <CActLED::Get()>:
   240b4:	e59f3004 	ldr	r3, [pc, #4]	; 240c0 <CActLED::Get()+0xc>
   240b8:	e5930000 	ldr	r0, [r3]
   240bc:	e12fff1e 	bx	lr
   240c0:	00050154 	.word	0x00050154

000240c4 <assertion_failed>:
   240c4:	e92d4080 	push	{r7, lr}
   240c8:	e1a05000 	mov	r5, r0
   240cc:	e24dd018 	sub	sp, sp, #24
   240d0:	e1a06001 	mov	r6, r1
   240d4:	e1a07002 	mov	r7, r2
   240d8:	e1a0400d 	mov	r4, sp
   240dc:	eb001ea6 	bl	2bb7c <CInterruptSystem::DisableFIQ()>
   240e0:	f1080040 	cpsie	f
   240e4:	e28d0008 	add	r0, sp, #8
   240e8:	eb000ccd 	bl	27424 <CString::CString()>
   240ec:	e1a03007 	mov	r3, r7
   240f0:	e1a02006 	mov	r2, r6
   240f4:	e59f1044 	ldr	r1, [pc, #68]	; 24140 <assertion_failed+0x7c>
   240f8:	e28d0008 	add	r0, sp, #8
   240fc:	eb00120b 	bl	28930 <CString::Format(char const*, ...)>
   24100:	e28d0008 	add	r0, sp, #8
   24104:	eb000cdc 	bl	2747c <CString::operator char const*() const>
   24108:	e1a01000 	mov	r1, r0
   2410c:	e1a00004 	mov	r0, r4
   24110:	eb0001a5 	bl	247ac <debug_stacktrace(unsigned int const*, char const*)>
   24114:	eb0008dd 	bl	26490 <CLogger::Get()>
   24118:	e1a04000 	mov	r4, r0
   2411c:	e28d0008 	add	r0, sp, #8
   24120:	eb000cd5 	bl	2747c <CString::operator char const*() const>
   24124:	e58d5000 	str	r5, [sp]
   24128:	e1a01000 	mov	r1, r0
   2412c:	e59f3010 	ldr	r3, [pc, #16]	; 24144 <assertion_failed+0x80>
   24130:	e1a00004 	mov	r0, r4
   24134:	e3a02000 	mov	r2, #0
   24138:	eb000811 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2413c:	eafffffe 	b	2413c <assertion_failed+0x78>
   24140:	000465b8 	.word	0x000465b8
   24144:	000465c0 	.word	0x000465c0

00024148 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   24148:	e92d4010 	push	{r4, lr}
   2414c:	e1a04000 	mov	r4, r0
   24150:	e1a02001 	mov	r2, r1
   24154:	e3a01008 	mov	r1, #8
   24158:	eb001f24 	bl	2bdf0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   2415c:	e1a00004 	mov	r0, r4
   24160:	e8bd8010 	pop	{r4, pc}

00024164 <CBcmPropertyTags::~CBcmPropertyTags()>:
   24164:	e92d4010 	push	{r4, lr}
   24168:	e1a04000 	mov	r4, r0
   2416c:	eb001f22 	bl	2bdfc <CBcmMailBox::~CBcmMailBox()>
   24170:	e1a00004 	mov	r0, r4
   24174:	e8bd8010 	pop	{r4, pc}

00024178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   24178:	e92d4070 	push	{r4, r5, r6, lr}
   2417c:	e2524000 	subs	r4, r2, #0
   24180:	0a000030 	beq	24248 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   24184:	e353000f 	cmp	r3, #15
   24188:	9a000032 	bls	24258 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   2418c:	e59d2010 	ldr	r2, [sp, #16]
   24190:	e243e00c 	sub	lr, r3, #12
   24194:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   24198:	e1a0582e 	lsr	r5, lr, #16
   2419c:	e1a0642e 	lsr	r6, lr, #8
   241a0:	e5c4e004 	strb	lr, [r4, #4]
   241a4:	e1a02003 	mov	r2, r3
   241a8:	e1a0ec2e 	lsr	lr, lr, #24
   241ac:	e1a0342c 	lsr	r3, ip, #8
   241b0:	e5c41000 	strb	r1, [r4]
   241b4:	e5c45006 	strb	r5, [r4, #6]
   241b8:	e5c4e007 	strb	lr, [r4, #7]
   241bc:	e1a0582c 	lsr	r5, ip, #16
   241c0:	e1a0ec2c 	lsr	lr, ip, #24
   241c4:	e5c4c008 	strb	ip, [r4, #8]
   241c8:	e5c43009 	strb	r3, [r4, #9]
   241cc:	e1a0c421 	lsr	ip, r1, #8
   241d0:	e1a03821 	lsr	r3, r1, #16
   241d4:	e1a01c21 	lsr	r1, r1, #24
   241d8:	e5c41003 	strb	r1, [r4, #3]
   241dc:	e5c46005 	strb	r6, [r4, #5]
   241e0:	e5c4500a 	strb	r5, [r4, #10]
   241e4:	e5c4e00b 	strb	lr, [r4, #11]
   241e8:	e5c4c001 	strb	ip, [r4, #1]
   241ec:	e5c43002 	strb	r3, [r4, #2]
   241f0:	e1a01004 	mov	r1, r4
   241f4:	eb00001c 	bl	2426c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   241f8:	e3500000 	cmp	r0, #0
   241fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   24200:	e5d42009 	ldrb	r2, [r4, #9]
   24204:	e5d43008 	ldrb	r3, [r4, #8]
   24208:	e5d4100a 	ldrb	r1, [r4, #10]
   2420c:	e1833402 	orr	r3, r3, r2, lsl #8
   24210:	e5d4200b 	ldrb	r2, [r4, #11]
   24214:	e1833801 	orr	r3, r3, r1, lsl #16
   24218:	e1833c02 	orr	r3, r3, r2, lsl #24
   2421c:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   24220:	e2930000 	adds	r0, r3, #0
   24224:	e1a0c423 	lsr	ip, r3, #8
   24228:	e1a01823 	lsr	r1, r3, #16
   2422c:	e1a02c23 	lsr	r2, r3, #24
   24230:	13a00001 	movne	r0, #1
   24234:	e5c43008 	strb	r3, [r4, #8]
   24238:	e5c4c009 	strb	ip, [r4, #9]
   2423c:	e5c4100a 	strb	r1, [r4, #10]
   24240:	e5c4200b 	strb	r2, [r4, #11]
   24244:	e8bd8070 	pop	{r4, r5, r6, pc}
   24248:	e59f1018 	ldr	r1, [pc, #24]	; 24268 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   2424c:	e3a02033 	mov	r2, #51	; 0x33
   24250:	e2810014 	add	r0, r1, #20
   24254:	ebffff9a 	bl	240c4 <assertion_failed>
   24258:	e59f1008 	ldr	r1, [pc, #8]	; 24268 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   2425c:	e3a02034 	mov	r2, #52	; 0x34
   24260:	e2810020 	add	r0, r1, #32
   24264:	ebffff96 	bl	240c4 <assertion_failed>
   24268:	000465d8 	.word	0x000465d8

0002426c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   2426c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24270:	e2519000 	subs	r9, r1, #0
   24274:	0a000034 	beq	2434c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   24278:	e352000f 	cmp	r2, #15
   2427c:	e1a07002 	mov	r7, r2
   24280:	9a000035 	bls	2435c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   24284:	e282600c 	add	r6, r2, #12
   24288:	e2165003 	ands	r5, r6, #3
   2428c:	1a000036 	bne	2436c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   24290:	e1a0a000 	mov	sl, r0
   24294:	e1a00005 	mov	r0, r5
   24298:	eb001c95 	bl	2b4f4 <CMemorySystem::GetCoherentPage(unsigned int)>
   2429c:	e1a01426 	lsr	r1, r6, #8
   242a0:	e1a02826 	lsr	r2, r6, #16
   242a4:	e1a03c26 	lsr	r3, r6, #24
   242a8:	e2808008 	add	r8, r0, #8
   242ac:	e5c06000 	strb	r6, [r0]
   242b0:	e5c05004 	strb	r5, [r0, #4]
   242b4:	e5c05005 	strb	r5, [r0, #5]
   242b8:	e5c05006 	strb	r5, [r0, #6]
   242bc:	e5c05007 	strb	r5, [r0, #7]
   242c0:	e5c01001 	strb	r1, [r0, #1]
   242c4:	e5c02002 	strb	r2, [r0, #2]
   242c8:	e5c03003 	strb	r3, [r0, #3]
   242cc:	e1a04000 	mov	r4, r0
   242d0:	e1a02007 	mov	r2, r7
   242d4:	e1a00008 	mov	r0, r8
   242d8:	e1a01009 	mov	r1, r9
   242dc:	eb0017bb 	bl	2a1d0 <memcpy>
   242e0:	e7885007 	str	r5, [r8, r7]
   242e4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   242e8:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   242ec:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   242f0:	e1a0000a 	mov	r0, sl
   242f4:	e1a01006 	mov	r1, r6
   242f8:	eb001ec0 	bl	2be00 <CBcmMailBox::WriteRead(unsigned int)>
   242fc:	e1560000 	cmp	r6, r0
   24300:	0a000001 	beq	2430c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   24304:	e3a00000 	mov	r0, #0
   24308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2430c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   24310:	e5d42005 	ldrb	r2, [r4, #5]
   24314:	e5d43004 	ldrb	r3, [r4, #4]
   24318:	e5d41006 	ldrb	r1, [r4, #6]
   2431c:	e1833402 	orr	r3, r3, r2, lsl #8
   24320:	e5d42007 	ldrb	r2, [r4, #7]
   24324:	e1833801 	orr	r3, r3, r1, lsl #16
   24328:	e1833c02 	orr	r3, r3, r2, lsl #24
   2432c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   24330:	1afffff3 	bne	24304 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   24334:	e1a02007 	mov	r2, r7
   24338:	e1a01008 	mov	r1, r8
   2433c:	e1a00009 	mov	r0, r9
   24340:	eb0017a2 	bl	2a1d0 <memcpy>
   24344:	e3a00001 	mov	r0, #1
   24348:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2434c:	e59f1028 	ldr	r1, [pc, #40]	; 2437c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24350:	e3a0204b 	mov	r2, #75	; 0x4b
   24354:	e2810048 	add	r0, r1, #72	; 0x48
   24358:	ebffff59 	bl	240c4 <assertion_failed>
   2435c:	e59f1018 	ldr	r1, [pc, #24]	; 2437c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24360:	e3a0204c 	mov	r2, #76	; 0x4c
   24364:	e2810054 	add	r0, r1, #84	; 0x54
   24368:	ebffff55 	bl	240c4 <assertion_failed>
   2436c:	e59f1008 	ldr	r1, [pc, #8]	; 2437c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24370:	e3a0204e 	mov	r2, #78	; 0x4e
   24374:	e2810080 	add	r0, r1, #128	; 0x80
   24378:	ebffff51 	bl	240c4 <assertion_failed>
   2437c:	000465d8 	.word	0x000465d8

00024380 <CClassAllocator::~CClassAllocator()>:
   24380:	e3a03000 	mov	r3, #0
   24384:	e92d4010 	push	{r4, lr}
   24388:	e1a04000 	mov	r4, r0
   2438c:	e590000c 	ldr	r0, [r0, #12]
   24390:	e5843010 	str	r3, [r4, #16]
   24394:	e1500003 	cmp	r0, r3
   24398:	0a000000 	beq	243a0 <CClassAllocator::~CClassAllocator()+0x20>
   2439c:	eb001e63 	bl	2bd30 <free>
   243a0:	e1a00004 	mov	r0, r4
   243a4:	e8bd8010 	pop	{r4, pc}

000243a8 <CClassAllocator::Init(unsigned int, unsigned int)>:
   243a8:	e3510000 	cmp	r1, #0
   243ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   243b0:	e1a06000 	mov	r6, r0
   243b4:	03a00020 	moveq	r0, #32
   243b8:	1281301f 	addne	r3, r1, #31
   243bc:	13c3000f 	bicne	r0, r3, #15
   243c0:	e3520000 	cmp	r2, #0
   243c4:	e5860000 	str	r0, [r6]
   243c8:	0a00001b 	beq	2443c <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   243cc:	e5862004 	str	r2, [r6, #4]
   243d0:	e0000290 	mul	r0, r0, r2
   243d4:	eb001e4f 	bl	2bd18 <malloc>
   243d8:	e3500000 	cmp	r0, #0
   243dc:	e586000c 	str	r0, [r6, #12]
   243e0:	0a000019 	beq	2444c <CClassAllocator::Init(unsigned int, unsigned int)+0xa4>
   243e4:	e210100f 	ands	r1, r0, #15
   243e8:	1a000019 	bne	24454 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   243ec:	e5965004 	ldr	r5, [r6, #4]
   243f0:	e3550000 	cmp	r5, #0
   243f4:	0a00001a 	beq	24464 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   243f8:	e5964000 	ldr	r4, [r6]
   243fc:	e596c010 	ldr	ip, [r6, #16]
   24400:	e1a03000 	mov	r3, r0
   24404:	e59f705c 	ldr	r7, [pc, #92]	; 24468 <CClassAllocator::Init(unsigned int, unsigned int)+0xc0>
   24408:	ea000000 	b	24410 <CClassAllocator::Init(unsigned int, unsigned int)+0x68>
   2440c:	e1a01002 	mov	r1, r2
   24410:	e2812001 	add	r2, r1, #1
   24414:	e1550002 	cmp	r5, r2
   24418:	e583c00c 	str	ip, [r3, #12]
   2441c:	e1a0e003 	mov	lr, r3
   24420:	e5837000 	str	r7, [r3]
   24424:	e1a0c003 	mov	ip, r3
   24428:	e0833004 	add	r3, r3, r4
   2442c:	1afffff6 	bne	2440c <CClassAllocator::Init(unsigned int, unsigned int)+0x64>
   24430:	e0210491 	mla	r1, r1, r4, r0
   24434:	e5861010 	str	r1, [r6, #16]
   24438:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2443c:	e3a02055 	mov	r2, #85	; 0x55
   24440:	e59f1024 	ldr	r1, [pc, #36]	; 2446c <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   24444:	e59f0024 	ldr	r0, [pc, #36]	; 24470 <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   24448:	ebffff1d 	bl	240c4 <assertion_failed>
   2444c:	e5860004 	str	r0, [r6, #4]
   24450:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24454:	e3a0205f 	mov	r2, #95	; 0x5f
   24458:	e59f100c 	ldr	r1, [pc, #12]	; 2446c <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   2445c:	e59f0010 	ldr	r0, [pc, #16]	; 24474 <CClassAllocator::Init(unsigned int, unsigned int)+0xcc>
   24460:	ebffff17 	bl	240c4 <assertion_failed>
   24464:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24468:	4f425350 	.word	0x4f425350
   2446c:	00046670 	.word	0x00046670
   24470:	00046684 	.word	0x00046684
   24474:	0004669c 	.word	0x0004669c

00024478 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24478:	e92d4010 	push	{r4, lr}
   2447c:	e3a0c000 	mov	ip, #0
   24480:	e3a0e001 	mov	lr, #1
   24484:	e1a04000 	mov	r4, r0
   24488:	e5803008 	str	r3, [r0, #8]
   2448c:	e580e018 	str	lr, [r0, #24]
   24490:	e580c00c 	str	ip, [r0, #12]
   24494:	e580c010 	str	ip, [r0, #16]
   24498:	e5c0c014 	strb	ip, [r0, #20]
   2449c:	ebffffc1 	bl	243a8 <CClassAllocator::Init(unsigned int, unsigned int)>
   244a0:	e1a00004 	mov	r0, r4
   244a4:	e8bd8010 	pop	{r4, pc}

000244a8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   244a8:	e92d4070 	push	{r4, r5, r6, lr}
   244ac:	e3a0c000 	mov	ip, #0
   244b0:	e3a0e001 	mov	lr, #1
   244b4:	e1a04000 	mov	r4, r0
   244b8:	e59d5010 	ldr	r5, [sp, #16]
   244bc:	e5803018 	str	r3, [r0, #24]
   244c0:	e5805008 	str	r5, [r0, #8]
   244c4:	e5c0e014 	strb	lr, [r0, #20]
   244c8:	e580c00c 	str	ip, [r0, #12]
   244cc:	e580c010 	str	ip, [r0, #16]
   244d0:	ebffffb4 	bl	243a8 <CClassAllocator::Init(unsigned int, unsigned int)>
   244d4:	e1a00004 	mov	r0, r4
   244d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000244dc <CClassAllocator::Allocate()>:
   244dc:	e92d4030 	push	{r4, r5, lr}
   244e0:	e5d03014 	ldrb	r3, [r0, #20]
   244e4:	e24dd00c 	sub	sp, sp, #12
   244e8:	e3530000 	cmp	r3, #0
   244ec:	e1a05000 	mov	r5, r0
   244f0:	0a000002 	beq	24500 <CClassAllocator::Allocate()+0x24>
   244f4:	e5900018 	ldr	r0, [r0, #24]
   244f8:	e3500000 	cmp	r0, #0
   244fc:	1a000015 	bne	24558 <CClassAllocator::Allocate()+0x7c>
   24500:	e5954010 	ldr	r4, [r5, #16]
   24504:	e3540000 	cmp	r4, #0
   24508:	0a00001d 	beq	24584 <CClassAllocator::Allocate()+0xa8>
   2450c:	e59f30a4 	ldr	r3, [pc, #164]	; 245b8 <CClassAllocator::Allocate()+0xdc>
   24510:	e5942000 	ldr	r2, [r4]
   24514:	e1520003 	cmp	r2, r3
   24518:	1a000022 	bne	245a8 <CClassAllocator::Allocate()+0xcc>
   2451c:	e3a03000 	mov	r3, #0
   24520:	e5d51014 	ldrb	r1, [r5, #20]
   24524:	e594200c 	ldr	r2, [r4, #12]
   24528:	e1510003 	cmp	r1, r3
   2452c:	e5852010 	str	r2, [r5, #16]
   24530:	e584300c 	str	r3, [r4, #12]
   24534:	1a000002 	bne	24544 <CClassAllocator::Allocate()+0x68>
   24538:	e2840010 	add	r0, r4, #16
   2453c:	e28dd00c 	add	sp, sp, #12
   24540:	e8bd8030 	pop	{r4, r5, pc}
   24544:	e5953018 	ldr	r3, [r5, #24]
   24548:	e3530000 	cmp	r3, #0
   2454c:	0afffff9 	beq	24538 <CClassAllocator::Allocate()+0x5c>
   24550:	eb001c54 	bl	2b6a8 <LeaveCritical>
   24554:	eafffff7 	b	24538 <CClassAllocator::Allocate()+0x5c>
   24558:	eb001c27 	bl	2b5fc <EnterCritical>
   2455c:	e5954010 	ldr	r4, [r5, #16]
   24560:	e3540000 	cmp	r4, #0
   24564:	1affffe8 	bne	2450c <CClassAllocator::Allocate()+0x30>
   24568:	e5d53014 	ldrb	r3, [r5, #20]
   2456c:	e3530000 	cmp	r3, #0
   24570:	0a000003 	beq	24584 <CClassAllocator::Allocate()+0xa8>
   24574:	e5953018 	ldr	r3, [r5, #24]
   24578:	e3530000 	cmp	r3, #0
   2457c:	0a000000 	beq	24584 <CClassAllocator::Allocate()+0xa8>
   24580:	eb001c48 	bl	2b6a8 <LeaveCritical>
   24584:	eb0007c1 	bl	26490 <CLogger::Get()>
   24588:	e5953004 	ldr	r3, [r5, #4]
   2458c:	e5951008 	ldr	r1, [r5, #8]
   24590:	e3a02000 	mov	r2, #0
   24594:	e58d3000 	str	r3, [sp]
   24598:	e59f301c 	ldr	r3, [pc, #28]	; 245bc <CClassAllocator::Allocate()+0xe0>
   2459c:	eb0006f8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   245a0:	e3a00000 	mov	r0, #0
   245a4:	eaffffe4 	b	2453c <CClassAllocator::Allocate()+0x60>
   245a8:	e3a02082 	mov	r2, #130	; 0x82
   245ac:	e59f100c 	ldr	r1, [pc, #12]	; 245c0 <CClassAllocator::Allocate()+0xe4>
   245b0:	e59f000c 	ldr	r0, [pc, #12]	; 245c4 <CClassAllocator::Allocate()+0xe8>
   245b4:	ebfffec2 	bl	240c4 <assertion_failed>
   245b8:	4f425350 	.word	0x4f425350
   245bc:	000466d8 	.word	0x000466d8
   245c0:	00046670 	.word	0x00046670
   245c4:	00046704 	.word	0x00046704

000245c8 <CClassAllocator::Free(void*)>:
   245c8:	e92d4070 	push	{r4, r5, r6, lr}
   245cc:	e2514000 	subs	r4, r1, #0
   245d0:	0a00001e 	beq	24650 <CClassAllocator::Free(void*)+0x88>
   245d4:	e59f30a4 	ldr	r3, [pc, #164]	; 24680 <CClassAllocator::Free(void*)+0xb8>
   245d8:	e5142010 	ldr	r2, [r4, #-16]
   245dc:	e2446010 	sub	r6, r4, #16
   245e0:	e1520003 	cmp	r2, r3
   245e4:	1a00001d 	bne	24660 <CClassAllocator::Free(void*)+0x98>
   245e8:	e5143004 	ldr	r3, [r4, #-4]
   245ec:	e3530000 	cmp	r3, #0
   245f0:	1a00001e 	bne	24670 <CClassAllocator::Free(void*)+0xa8>
   245f4:	e5d03014 	ldrb	r3, [r0, #20]
   245f8:	e1a05000 	mov	r5, r0
   245fc:	e3530000 	cmp	r3, #0
   24600:	0a000002 	beq	24610 <CClassAllocator::Free(void*)+0x48>
   24604:	e5900018 	ldr	r0, [r0, #24]
   24608:	e3500000 	cmp	r0, #0
   2460c:	1a000003 	bne	24620 <CClassAllocator::Free(void*)+0x58>
   24610:	e5953010 	ldr	r3, [r5, #16]
   24614:	e5043004 	str	r3, [r4, #-4]
   24618:	e5856010 	str	r6, [r5, #16]
   2461c:	e8bd8070 	pop	{r4, r5, r6, pc}
   24620:	eb001bf5 	bl	2b5fc <EnterCritical>
   24624:	e5d52014 	ldrb	r2, [r5, #20]
   24628:	e5953010 	ldr	r3, [r5, #16]
   2462c:	e3520000 	cmp	r2, #0
   24630:	e5043004 	str	r3, [r4, #-4]
   24634:	e5856010 	str	r6, [r5, #16]
   24638:	08bd8070 	popeq	{r4, r5, r6, pc}
   2463c:	e5950018 	ldr	r0, [r5, #24]
   24640:	e3500000 	cmp	r0, #0
   24644:	08bd8070 	popeq	{r4, r5, r6, pc}
   24648:	e8bd4070 	pop	{r4, r5, r6, lr}
   2464c:	ea001c15 	b	2b6a8 <LeaveCritical>
   24650:	e3a02090 	mov	r2, #144	; 0x90
   24654:	e59f1028 	ldr	r1, [pc, #40]	; 24684 <CClassAllocator::Free(void*)+0xbc>
   24658:	e59f0028 	ldr	r0, [pc, #40]	; 24688 <CClassAllocator::Free(void*)+0xc0>
   2465c:	ebfffe98 	bl	240c4 <assertion_failed>
   24660:	e3a02094 	mov	r2, #148	; 0x94
   24664:	e59f1018 	ldr	r1, [pc, #24]	; 24684 <CClassAllocator::Free(void*)+0xbc>
   24668:	e59f001c 	ldr	r0, [pc, #28]	; 2468c <CClassAllocator::Free(void*)+0xc4>
   2466c:	ebfffe94 	bl	240c4 <assertion_failed>
   24670:	e3a02095 	mov	r2, #149	; 0x95
   24674:	e59f1008 	ldr	r1, [pc, #8]	; 24684 <CClassAllocator::Free(void*)+0xbc>
   24678:	e59f0010 	ldr	r0, [pc, #16]	; 24690 <CClassAllocator::Free(void*)+0xc8>
   2467c:	ebfffe90 	bl	240c4 <assertion_failed>
   24680:	4f425350 	.word	0x4f425350
   24684:	00046670 	.word	0x00046670
   24688:	00046724 	.word	0x00046724
   2468c:	00046730 	.word	0x00046730
   24690:	0004674c 	.word	0x0004674c

00024694 <debug_hexdump(void const*, unsigned int, char const*)>:
   24694:	e3520000 	cmp	r2, #0
   24698:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2469c:	e1a05001 	mov	r5, r1
   246a0:	e59f60f4 	ldr	r6, [pc, #244]	; 2479c <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   246a4:	e1a04000 	mov	r4, r0
   246a8:	11a06002 	movne	r6, r2
   246ac:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   246b0:	eb000776 	bl	26490 <CLogger::Get()>
   246b4:	e58d4004 	str	r4, [sp, #4]
   246b8:	e58d5000 	str	r5, [sp]
   246bc:	e1a01006 	mov	r1, r6
   246c0:	e59f30d8 	ldr	r3, [pc, #216]	; 247a0 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   246c4:	e3a02004 	mov	r2, #4
   246c8:	eb0006ad 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   246cc:	e3550000 	cmp	r5, #0
   246d0:	0a00002b 	beq	24784 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   246d4:	e3a09004 	mov	r9, #4
   246d8:	e59f80c4 	ldr	r8, [pc, #196]	; 247a4 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   246dc:	e59f70c4 	ldr	r7, [pc, #196]	; 247a8 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   246e0:	eb00076a 	bl	26490 <CLogger::Get()>
   246e4:	e5d4a00f 	ldrb	sl, [r4, #15]
   246e8:	e5d4e00e 	ldrb	lr, [r4, #14]
   246ec:	e5d4c00d 	ldrb	ip, [r4, #13]
   246f0:	e5d4300c 	ldrb	r3, [r4, #12]
   246f4:	e5d4200b 	ldrb	r2, [r4, #11]
   246f8:	e5d4100a 	ldrb	r1, [r4, #10]
   246fc:	e5d4b009 	ldrb	fp, [r4, #9]
   24700:	e58da040 	str	sl, [sp, #64]	; 0x40
   24704:	e5d4a008 	ldrb	sl, [r4, #8]
   24708:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   2470c:	e5d4e007 	ldrb	lr, [r4, #7]
   24710:	e58dc038 	str	ip, [sp, #56]	; 0x38
   24714:	e5d4c006 	ldrb	ip, [r4, #6]
   24718:	e58d3034 	str	r3, [sp, #52]	; 0x34
   2471c:	e5d43005 	ldrb	r3, [r4, #5]
   24720:	e58d2030 	str	r2, [sp, #48]	; 0x30
   24724:	e5d42004 	ldrb	r2, [r4, #4]
   24728:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   2472c:	e5d41003 	ldrb	r1, [r4, #3]
   24730:	e58db028 	str	fp, [sp, #40]	; 0x28
   24734:	e5d4b002 	ldrb	fp, [r4, #2]
   24738:	e58da024 	str	sl, [sp, #36]	; 0x24
   2473c:	e5d4a001 	ldrb	sl, [r4, #1]
   24740:	e58de020 	str	lr, [sp, #32]
   24744:	e5d4e000 	ldrb	lr, [r4]
   24748:	e58dc01c 	str	ip, [sp, #28]
   2474c:	e58d3018 	str	r3, [sp, #24]
   24750:	e004c008 	and	ip, r4, r8
   24754:	e58d2014 	str	r2, [sp, #20]
   24758:	e58d1010 	str	r1, [sp, #16]
   2475c:	e1a03007 	mov	r3, r7
   24760:	e1a02009 	mov	r2, r9
   24764:	e1a01006 	mov	r1, r6
   24768:	e58db00c 	str	fp, [sp, #12]
   2476c:	e58da008 	str	sl, [sp, #8]
   24770:	e88d5000 	stm	sp, {ip, lr}
   24774:	eb000682 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24778:	e355000f 	cmp	r5, #15
   2477c:	e2844010 	add	r4, r4, #16
   24780:	8a000001 	bhi	2478c <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   24784:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24788:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2478c:	e2555010 	subs	r5, r5, #16
   24790:	1affffd2 	bne	246e0 <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   24794:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24798:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2479c:	00046760 	.word	0x00046760
   247a0:	00046768 	.word	0x00046768
   247a4:	0000ffff 	.word	0x0000ffff
   247a8:	00046790 	.word	0x00046790

000247ac <debug_stacktrace(unsigned int const*, char const*)>:
   247ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   247b0:	e3510000 	cmp	r1, #0
   247b4:	e59f8084 	ldr	r8, [pc, #132]	; 24840 <debug_stacktrace(unsigned int const*, char const*)+0x94>
   247b8:	e24dd008 	sub	sp, sp, #8
   247bc:	e1a05000 	mov	r5, r0
   247c0:	11a08001 	movne	r8, r1
   247c4:	e3a04000 	mov	r4, #0
   247c8:	e3a0a004 	mov	sl, #4
   247cc:	e59f6070 	ldr	r6, [pc, #112]	; 24844 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   247d0:	e59f7070 	ldr	r7, [pc, #112]	; 24848 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   247d4:	e59f9070 	ldr	r9, [pc, #112]	; 2484c <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   247d8:	ea000003 	b	247ec <debug_stacktrace(unsigned int const*, char const*)+0x40>
   247dc:	e2844001 	add	r4, r4, #1
   247e0:	e3540040 	cmp	r4, #64	; 0x40
   247e4:	e2855004 	add	r5, r5, #4
   247e8:	0a000012 	beq	24838 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   247ec:	e5953000 	ldr	r3, [r5]
   247f0:	e1530006 	cmp	r3, r6
   247f4:	9afffff8 	bls	247dc <debug_stacktrace(unsigned int const*, char const*)+0x30>
   247f8:	e1530007 	cmp	r3, r7
   247fc:	2afffff6 	bcs	247dc <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24800:	e3130003 	tst	r3, #3
   24804:	1afffff4 	bne	247dc <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24808:	eb000720 	bl	26490 <CLogger::Get()>
   2480c:	e5953000 	ldr	r3, [r5]
   24810:	e1a0200a 	mov	r2, sl
   24814:	e58d4000 	str	r4, [sp]
   24818:	e58d3004 	str	r3, [sp, #4]
   2481c:	e1a01008 	mov	r1, r8
   24820:	e1a03009 	mov	r3, r9
   24824:	e2844001 	add	r4, r4, #1
   24828:	eb000655 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2482c:	e3540040 	cmp	r4, #64	; 0x40
   24830:	e2855004 	add	r5, r5, #4
   24834:	1affffec 	bne	247ec <debug_stacktrace(unsigned int const*, char const*)+0x40>
   24838:	e28dd008 	add	sp, sp, #8
   2483c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24840:	00046760 	.word	0x00046760
   24844:	00007fff 	.word	0x00007fff
   24848:	0004062c 	.word	0x0004062c
   2484c:	000467e8 	.word	0x000467e8

00024850 <CDevice::~CDevice()>:
   24850:	e12fff1e 	bx	lr

00024854 <CDevice::Read(void*, unsigned int)>:
   24854:	e3e00000 	mvn	r0, #0
   24858:	e12fff1e 	bx	lr

0002485c <CDevice::Seek(unsigned long long)>:
   2485c:	e3e00000 	mvn	r0, #0
   24860:	e3e01000 	mvn	r1, #0
   24864:	e12fff1e 	bx	lr

00024868 <CDevice::RemoveDevice()>:
   24868:	e3a00000 	mov	r0, #0
   2486c:	e12fff1e 	bx	lr

00024870 <CDevice::~CDevice()>:
   24870:	e92d4010 	push	{r4, lr}
   24874:	e1a04000 	mov	r4, r0
   24878:	e3a01004 	mov	r1, #4
   2487c:	eb00183a 	bl	2a96c <operator delete(void*, unsigned int)>
   24880:	e1a00004 	mov	r0, r4
   24884:	e8bd8010 	pop	{r4, pc}

00024888 <CDevice::CDevice()>:
   24888:	e59f3004 	ldr	r3, [pc, #4]	; 24894 <CDevice::CDevice()+0xc>
   2488c:	e5803000 	str	r3, [r0]
   24890:	e12fff1e 	bx	lr
   24894:	00046804 	.word	0x00046804

00024898 <CDeviceNameService::CDeviceNameService()>:
   24898:	e3a02000 	mov	r2, #0
   2489c:	e59f102c 	ldr	r1, [pc, #44]	; 248d0 <CDeviceNameService::CDeviceNameService()+0x38>
   248a0:	e5802000 	str	r2, [r0]
   248a4:	e591c000 	ldr	ip, [r1]
   248a8:	e5802004 	str	r2, [r0, #4]
   248ac:	e15c0002 	cmp	ip, r2
   248b0:	1a000001 	bne	248bc <CDeviceNameService::CDeviceNameService()+0x24>
   248b4:	e5810000 	str	r0, [r1]
   248b8:	e12fff1e 	bx	lr
   248bc:	e92d4010 	push	{r4, lr}
   248c0:	e3a0201f 	mov	r2, #31
   248c4:	e59f1008 	ldr	r1, [pc, #8]	; 248d4 <CDeviceNameService::CDeviceNameService()+0x3c>
   248c8:	e59f0008 	ldr	r0, [pc, #8]	; 248d8 <CDeviceNameService::CDeviceNameService()+0x40>
   248cc:	ebfffdfc 	bl	240c4 <assertion_failed>
   248d0:	00050158 	.word	0x00050158
   248d4:	0004681c 	.word	0x0004681c
   248d8:	00046834 	.word	0x00046834

000248dc <CDeviceNameService::~CDeviceNameService()>:
   248dc:	e5903000 	ldr	r3, [r0]
   248e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   248e4:	e3530000 	cmp	r3, #0
   248e8:	e1a05000 	mov	r5, r0
   248ec:	0a00000e 	beq	2492c <CDeviceNameService::~CDeviceNameService()+0x50>
   248f0:	e3a06000 	mov	r6, #0
   248f4:	e3a07010 	mov	r7, #16
   248f8:	e5930004 	ldr	r0, [r3, #4]
   248fc:	e5934000 	ldr	r4, [r3]
   24900:	e3500000 	cmp	r0, #0
   24904:	0a000000 	beq	2490c <CDeviceNameService::~CDeviceNameService()+0x30>
   24908:	eb001811 	bl	2a954 <operator delete[](void*)>
   2490c:	e5950000 	ldr	r0, [r5]
   24910:	e1a01007 	mov	r1, r7
   24914:	e5806004 	str	r6, [r0, #4]
   24918:	e5806008 	str	r6, [r0, #8]
   2491c:	eb001812 	bl	2a96c <operator delete(void*, unsigned int)>
   24920:	e2543000 	subs	r3, r4, #0
   24924:	e5854000 	str	r4, [r5]
   24928:	1afffff2 	bne	248f8 <CDeviceNameService::~CDeviceNameService()+0x1c>
   2492c:	e3a02000 	mov	r2, #0
   24930:	e59f3008 	ldr	r3, [pc, #8]	; 24940 <CDeviceNameService::~CDeviceNameService()+0x64>
   24934:	e1a00005 	mov	r0, r5
   24938:	e5832000 	str	r2, [r3]
   2493c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24940:	00050158 	.word	0x00050158

00024944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   24944:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24948:	e1a05000 	mov	r5, r0
   2494c:	e5900004 	ldr	r0, [r0, #4]
   24950:	e1a06001 	mov	r6, r1
   24954:	e3500000 	cmp	r0, #0
   24958:	e1a07002 	mov	r7, r2
   2495c:	e1a08003 	mov	r8, r3
   24960:	1a000017 	bne	249c4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   24964:	e3a00010 	mov	r0, #16
   24968:	eb0017f1 	bl	2a934 <operator new(unsigned int)>
   2496c:	e3560000 	cmp	r6, #0
   24970:	e1a04000 	mov	r4, r0
   24974:	0a000014 	beq	249cc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   24978:	e1a00006 	mov	r0, r6
   2497c:	eb0013ee 	bl	2993c <strlen>
   24980:	e2800001 	add	r0, r0, #1
   24984:	eb0017eb 	bl	2a938 <operator new[](unsigned int)>
   24988:	e1a01006 	mov	r1, r6
   2498c:	e5840004 	str	r0, [r4, #4]
   24990:	eb0014a7 	bl	29c34 <strcpy>
   24994:	e3570000 	cmp	r7, #0
   24998:	0a00000f 	beq	249dc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   2499c:	e5952004 	ldr	r2, [r5, #4]
   249a0:	e5953000 	ldr	r3, [r5]
   249a4:	e3520000 	cmp	r2, #0
   249a8:	e5847008 	str	r7, [r4, #8]
   249ac:	e5c4800c 	strb	r8, [r4, #12]
   249b0:	e5843000 	str	r3, [r4]
   249b4:	e5854000 	str	r4, [r5]
   249b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   249bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   249c0:	ea001b38 	b	2b6a8 <LeaveCritical>
   249c4:	eb001b0c 	bl	2b5fc <EnterCritical>
   249c8:	eaffffe5 	b	24964 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   249cc:	e3a0203b 	mov	r2, #59	; 0x3b
   249d0:	e59f1014 	ldr	r1, [pc, #20]	; 249ec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   249d4:	e59f0014 	ldr	r0, [pc, #20]	; 249f0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   249d8:	ebfffdb9 	bl	240c4 <assertion_failed>
   249dc:	e3a02040 	mov	r2, #64	; 0x40
   249e0:	e59f1004 	ldr	r1, [pc, #4]	; 249ec <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   249e4:	e59f0008 	ldr	r0, [pc, #8]	; 249f4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   249e8:	ebfffdb5 	bl	240c4 <assertion_failed>
   249ec:	0004681c 	.word	0x0004681c
   249f0:	00041474 	.word	0x00041474
   249f4:	00046840 	.word	0x00046840

000249f8 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   249f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   249fc:	e2515000 	subs	r5, r1, #0
   24a00:	0a00003c 	beq	24af8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   24a04:	e1a08000 	mov	r8, r0
   24a08:	e5900004 	ldr	r0, [r0, #4]
   24a0c:	e1a07002 	mov	r7, r2
   24a10:	e3500000 	cmp	r0, #0
   24a14:	1a00002c 	bne	24acc <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
   24a18:	e5984000 	ldr	r4, [r8]
   24a1c:	e3540000 	cmp	r4, #0
   24a20:	0a00003b 	beq	24b14 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
   24a24:	e5941004 	ldr	r1, [r4, #4]
   24a28:	e3510000 	cmp	r1, #0
   24a2c:	13a06000 	movne	r6, #0
   24a30:	1a000001 	bne	24a3c <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   24a34:	ea00000e 	b	24a74 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
   24a38:	e1a04003 	mov	r4, r3
   24a3c:	e1a00005 	mov	r0, r5
   24a40:	eb0013c7 	bl	29964 <strcmp>
   24a44:	e3500000 	cmp	r0, #0
   24a48:	1a000002 	bne	24a58 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   24a4c:	e5d4300c 	ldrb	r3, [r4, #12]
   24a50:	e1530007 	cmp	r3, r7
   24a54:	0a00000a 	beq	24a84 <CDeviceNameService::RemoveDevice(char const*, bool)+0x8c>
   24a58:	e5943000 	ldr	r3, [r4]
   24a5c:	e3530000 	cmp	r3, #0
   24a60:	0a00001d 	beq	24adc <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   24a64:	e5931004 	ldr	r1, [r3, #4]
   24a68:	e1a06004 	mov	r6, r4
   24a6c:	e3510000 	cmp	r1, #0
   24a70:	1afffff0 	bne	24a38 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   24a74:	e3a0205e 	mov	r2, #94	; 0x5e
   24a78:	e59f1098 	ldr	r1, [pc, #152]	; 24b18 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   24a7c:	e59f0098 	ldr	r0, [pc, #152]	; 24b1c <CDeviceNameService::RemoveDevice(char const*, bool)+0x124>
   24a80:	ebfffd8f 	bl	240c4 <assertion_failed>
   24a84:	e3560000 	cmp	r6, #0
   24a88:	0a00001e 	beq	24b08 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   24a8c:	e5943000 	ldr	r3, [r4]
   24a90:	e5863000 	str	r3, [r6]
   24a94:	e5983004 	ldr	r3, [r8, #4]
   24a98:	e3530000 	cmp	r3, #0
   24a9c:	1a000013 	bne	24af0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
   24aa0:	e5940004 	ldr	r0, [r4, #4]
   24aa4:	e3500000 	cmp	r0, #0
   24aa8:	0a000000 	beq	24ab0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   24aac:	eb0017a8 	bl	2a954 <operator delete[](void*)>
   24ab0:	e3a03000 	mov	r3, #0
   24ab4:	e1a00004 	mov	r0, r4
   24ab8:	e5843004 	str	r3, [r4, #4]
   24abc:	e5843008 	str	r3, [r4, #8]
   24ac0:	e3a01010 	mov	r1, #16
   24ac4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24ac8:	ea0017a7 	b	2a96c <operator delete(void*, unsigned int)>
   24acc:	eb001aca 	bl	2b5fc <EnterCritical>
   24ad0:	e5984000 	ldr	r4, [r8]
   24ad4:	e3540000 	cmp	r4, #0
   24ad8:	1affffd1 	bne	24a24 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   24adc:	e5983004 	ldr	r3, [r8, #4]
   24ae0:	e3530000 	cmp	r3, #0
   24ae4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24ae8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24aec:	ea001aed 	b	2b6a8 <LeaveCritical>
   24af0:	eb001aec 	bl	2b6a8 <LeaveCritical>
   24af4:	eaffffe9 	b	24aa0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
   24af8:	e3a02056 	mov	r2, #86	; 0x56
   24afc:	e59f1014 	ldr	r1, [pc, #20]	; 24b18 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   24b00:	e59f0018 	ldr	r0, [pc, #24]	; 24b20 <CDeviceNameService::RemoveDevice(char const*, bool)+0x128>
   24b04:	ebfffd6e 	bl	240c4 <assertion_failed>
   24b08:	e5943000 	ldr	r3, [r4]
   24b0c:	e5883000 	str	r3, [r8]
   24b10:	eaffffdf 	b	24a94 <CDeviceNameService::RemoveDevice(char const*, bool)+0x9c>
   24b14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24b18:	0004681c 	.word	0x0004681c
   24b1c:	00046850 	.word	0x00046850
   24b20:	00041474 	.word	0x00041474

00024b24 <CDeviceNameService::GetDevice(char const*, bool)>:
   24b24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24b28:	e2515000 	subs	r5, r1, #0
   24b2c:	e24dd00c 	sub	sp, sp, #12
   24b30:	0a00002b 	beq	24be4 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>
   24b34:	e1a07000 	mov	r7, r0
   24b38:	e5900004 	ldr	r0, [r0, #4]
   24b3c:	e1a06002 	mov	r6, r2
   24b40:	e3500000 	cmp	r0, #0
   24b44:	1a000014 	bne	24b9c <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   24b48:	e5974000 	ldr	r4, [r7]
   24b4c:	e3540000 	cmp	r4, #0
   24b50:	1a00000a 	bne	24b80 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   24b54:	ea000017 	b	24bb8 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   24b58:	e1a00005 	mov	r0, r5
   24b5c:	eb001380 	bl	29964 <strcmp>
   24b60:	e3500000 	cmp	r0, #0
   24b64:	1a000002 	bne	24b74 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   24b68:	e5d4300c 	ldrb	r3, [r4, #12]
   24b6c:	e1530006 	cmp	r3, r6
   24b70:	0a000013 	beq	24bc4 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   24b74:	e5944000 	ldr	r4, [r4]
   24b78:	e3540000 	cmp	r4, #0
   24b7c:	0a00000a 	beq	24bac <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   24b80:	e5941004 	ldr	r1, [r4, #4]
   24b84:	e3510000 	cmp	r1, #0
   24b88:	1afffff2 	bne	24b58 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   24b8c:	e3a02092 	mov	r2, #146	; 0x92
   24b90:	e59f1084 	ldr	r1, [pc, #132]	; 24c1c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   24b94:	e59f0084 	ldr	r0, [pc, #132]	; 24c20 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   24b98:	ebfffd49 	bl	240c4 <assertion_failed>
   24b9c:	eb001a96 	bl	2b5fc <EnterCritical>
   24ba0:	e5974000 	ldr	r4, [r7]
   24ba4:	e3540000 	cmp	r4, #0
   24ba8:	1afffff4 	bne	24b80 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   24bac:	e5973004 	ldr	r3, [r7, #4]
   24bb0:	e3530000 	cmp	r3, #0
   24bb4:	1a00000e 	bne	24bf4 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   24bb8:	e3a00000 	mov	r0, #0
   24bbc:	e28dd00c 	add	sp, sp, #12
   24bc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24bc4:	e5973004 	ldr	r3, [r7, #4]
   24bc8:	e5940008 	ldr	r0, [r4, #8]
   24bcc:	e3530000 	cmp	r3, #0
   24bd0:	1a000009 	bne	24bfc <CDeviceNameService::GetDevice(char const*, bool)+0xd8>
   24bd4:	e3500000 	cmp	r0, #0
   24bd8:	0a00000b 	beq	24c0c <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   24bdc:	e28dd00c 	add	sp, sp, #12
   24be0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24be4:	e3a0208b 	mov	r2, #139	; 0x8b
   24be8:	e59f102c 	ldr	r1, [pc, #44]	; 24c1c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   24bec:	e59f0030 	ldr	r0, [pc, #48]	; 24c24 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   24bf0:	ebfffd33 	bl	240c4 <assertion_failed>
   24bf4:	eb001aab 	bl	2b6a8 <LeaveCritical>
   24bf8:	eaffffee 	b	24bb8 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   24bfc:	e58d0004 	str	r0, [sp, #4]
   24c00:	eb001aa8 	bl	2b6a8 <LeaveCritical>
   24c04:	e59d0004 	ldr	r0, [sp, #4]
   24c08:	eafffff1 	b	24bd4 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
   24c0c:	e3a0209a 	mov	r2, #154	; 0x9a
   24c10:	e59f1004 	ldr	r1, [pc, #4]	; 24c1c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   24c14:	e59f000c 	ldr	r0, [pc, #12]	; 24c28 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   24c18:	ebfffd29 	bl	240c4 <assertion_failed>
   24c1c:	0004681c 	.word	0x0004681c
   24c20:	00046850 	.word	0x00046850
   24c24:	00041474 	.word	0x00041474
   24c28:	00046864 	.word	0x00046864

00024c2c <CDeviceNameService::Get()>:
   24c2c:	e59f3020 	ldr	r3, [pc, #32]	; 24c54 <CDeviceNameService::Get()+0x28>
   24c30:	e5930000 	ldr	r0, [r3]
   24c34:	e3500000 	cmp	r0, #0
   24c38:	0a000000 	beq	24c40 <CDeviceNameService::Get()+0x14>
   24c3c:	e12fff1e 	bx	lr
   24c40:	e92d4010 	push	{r4, lr}
   24c44:	e3a020cc 	mov	r2, #204	; 0xcc
   24c48:	e59f1008 	ldr	r1, [pc, #8]	; 24c58 <CDeviceNameService::Get()+0x2c>
   24c4c:	e59f0008 	ldr	r0, [pc, #8]	; 24c5c <CDeviceNameService::Get()+0x30>
   24c50:	ebfffd1b 	bl	240c4 <assertion_failed>
   24c54:	00050158 	.word	0x00050158
   24c58:	0004681c 	.word	0x0004681c
   24c5c:	00046874 	.word	0x00046874

00024c60 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   24c60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24c64:	e1a07001 	mov	r7, r1
   24c68:	e1a08002 	mov	r8, r2
   24c6c:	e24dd010 	sub	sp, sp, #16
   24c70:	e1a04000 	mov	r4, r0
   24c74:	e1a0000d 	mov	r0, sp
   24c78:	e1a05003 	mov	r5, r3
   24c7c:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   24c80:	eb0009e7 	bl	27424 <CString::CString()>
   24c84:	e1a03008 	mov	r3, r8
   24c88:	e1a02007 	mov	r2, r7
   24c8c:	e1a0000d 	mov	r0, sp
   24c90:	e59f102c 	ldr	r1, [pc, #44]	; 24cc4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   24c94:	eb000f25 	bl	28930 <CString::Format(char const*, ...)>
   24c98:	e1a0000d 	mov	r0, sp
   24c9c:	eb0009f6 	bl	2747c <CString::operator char const*() const>
   24ca0:	e1a03006 	mov	r3, r6
   24ca4:	e1a01000 	mov	r1, r0
   24ca8:	e1a02005 	mov	r2, r5
   24cac:	e1a00004 	mov	r0, r4
   24cb0:	ebffff23 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   24cb4:	e1a0000d 	mov	r0, sp
   24cb8:	eb0009a6 	bl	27358 <CString::~CString()>
   24cbc:	e28dd010 	add	sp, sp, #16
   24cc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24cc4:	00046880 	.word	0x00046880

00024cc8 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   24cc8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24ccc:	e1a06001 	mov	r6, r1
   24cd0:	e1a07002 	mov	r7, r2
   24cd4:	e24dd014 	sub	sp, sp, #20
   24cd8:	e1a04000 	mov	r4, r0
   24cdc:	e1a0000d 	mov	r0, sp
   24ce0:	e1a05003 	mov	r5, r3
   24ce4:	eb0009ce 	bl	27424 <CString::CString()>
   24ce8:	e1a03007 	mov	r3, r7
   24cec:	e1a02006 	mov	r2, r6
   24cf0:	e1a0000d 	mov	r0, sp
   24cf4:	e59f1028 	ldr	r1, [pc, #40]	; 24d24 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   24cf8:	eb000f0c 	bl	28930 <CString::Format(char const*, ...)>
   24cfc:	e1a0000d 	mov	r0, sp
   24d00:	eb0009dd 	bl	2747c <CString::operator char const*() const>
   24d04:	e1a02005 	mov	r2, r5
   24d08:	e1a01000 	mov	r1, r0
   24d0c:	e1a00004 	mov	r0, r4
   24d10:	ebffff38 	bl	249f8 <CDeviceNameService::RemoveDevice(char const*, bool)>
   24d14:	e1a0000d 	mov	r0, sp
   24d18:	eb00098e 	bl	27358 <CString::~CString()>
   24d1c:	e28dd014 	add	sp, sp, #20
   24d20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24d24:	00046880 	.word	0x00046880

00024d28 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   24d28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24d2c:	e1a06001 	mov	r6, r1
   24d30:	e1a07002 	mov	r7, r2
   24d34:	e24dd014 	sub	sp, sp, #20
   24d38:	e1a04000 	mov	r4, r0
   24d3c:	e1a0000d 	mov	r0, sp
   24d40:	e1a05003 	mov	r5, r3
   24d44:	eb0009b6 	bl	27424 <CString::CString()>
   24d48:	e1a03007 	mov	r3, r7
   24d4c:	e1a02006 	mov	r2, r6
   24d50:	e1a0000d 	mov	r0, sp
   24d54:	e59f1030 	ldr	r1, [pc, #48]	; 24d8c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   24d58:	eb000ef4 	bl	28930 <CString::Format(char const*, ...)>
   24d5c:	e1a0000d 	mov	r0, sp
   24d60:	eb0009c5 	bl	2747c <CString::operator char const*() const>
   24d64:	e1a02005 	mov	r2, r5
   24d68:	e1a01000 	mov	r1, r0
   24d6c:	e1a00004 	mov	r0, r4
   24d70:	ebffff6b 	bl	24b24 <CDeviceNameService::GetDevice(char const*, bool)>
   24d74:	e1a04000 	mov	r4, r0
   24d78:	e1a0000d 	mov	r0, sp
   24d7c:	eb000975 	bl	27358 <CString::~CString()>
   24d80:	e1a00004 	mov	r0, r4
   24d84:	e28dd014 	add	sp, sp, #20
   24d88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24d8c:	00046880 	.word	0x00046880

00024d90 <CDeviceNameService::ListDevices(CDevice*)>:
   24d90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24d94:	e2516000 	subs	r6, r1, #0
   24d98:	e24dd018 	sub	sp, sp, #24
   24d9c:	0a000034 	beq	24e74 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   24da0:	e5904000 	ldr	r4, [r0]
   24da4:	e3540000 	cmp	r4, #0
   24da8:	0a00002f 	beq	24e6c <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   24dac:	e3a05000 	mov	r5, #0
   24db0:	e59f90cc 	ldr	r9, [pc, #204]	; 24e84 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   24db4:	ea00001b 	b	24e28 <CDeviceNameService::ListDevices(CDevice*)+0x98>
   24db8:	e2855001 	add	r5, r5, #1
   24dbc:	e215a003 	ands	sl, r5, #3
   24dc0:	13a01020 	movne	r1, #32
   24dc4:	03a0100a 	moveq	r1, #10
   24dc8:	e5d4200c 	ldrb	r2, [r4, #12]
   24dcc:	e28d0008 	add	r0, sp, #8
   24dd0:	e3520000 	cmp	r2, #0
   24dd4:	03a02063 	moveq	r2, #99	; 0x63
   24dd8:	13a02062 	movne	r2, #98	; 0x62
   24ddc:	e58d1000 	str	r1, [sp]
   24de0:	e1a01009 	mov	r1, r9
   24de4:	eb000ed1 	bl	28930 <CString::Format(char const*, ...)>
   24de8:	e5963000 	ldr	r3, [r6]
   24dec:	e28d0008 	add	r0, sp, #8
   24df0:	e593700c 	ldr	r7, [r3, #12]
   24df4:	eb0009a0 	bl	2747c <CString::operator char const*() const>
   24df8:	e1a08000 	mov	r8, r0
   24dfc:	e28d0008 	add	r0, sp, #8
   24e00:	eb0009cb 	bl	27534 <CString::GetLength() const>
   24e04:	e1a01008 	mov	r1, r8
   24e08:	e1a02000 	mov	r2, r0
   24e0c:	e1a00006 	mov	r0, r6
   24e10:	e12fff37 	blx	r7
   24e14:	e5944000 	ldr	r4, [r4]
   24e18:	e28d0008 	add	r0, sp, #8
   24e1c:	eb00094d 	bl	27358 <CString::~CString()>
   24e20:	e3540000 	cmp	r4, #0
   24e24:	0a000008 	beq	24e4c <CDeviceNameService::ListDevices(CDevice*)+0xbc>
   24e28:	e28d0008 	add	r0, sp, #8
   24e2c:	eb00097c 	bl	27424 <CString::CString()>
   24e30:	e5943004 	ldr	r3, [r4, #4]
   24e34:	e3530000 	cmp	r3, #0
   24e38:	1affffde 	bne	24db8 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   24e3c:	e3a020b9 	mov	r2, #185	; 0xb9
   24e40:	e59f1040 	ldr	r1, [pc, #64]	; 24e88 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   24e44:	e59f0040 	ldr	r0, [pc, #64]	; 24e8c <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   24e48:	ebfffc9d 	bl	240c4 <assertion_failed>
   24e4c:	e35a0000 	cmp	sl, #0
   24e50:	0a000005 	beq	24e6c <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   24e54:	e5963000 	ldr	r3, [r6]
   24e58:	e1a00006 	mov	r0, r6
   24e5c:	e593300c 	ldr	r3, [r3, #12]
   24e60:	e3a02001 	mov	r2, #1
   24e64:	e59f1024 	ldr	r1, [pc, #36]	; 24e90 <CDeviceNameService::ListDevices(CDevice*)+0x100>
   24e68:	e12fff33 	blx	r3
   24e6c:	e28dd018 	add	sp, sp, #24
   24e70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24e74:	e3a020b0 	mov	r2, #176	; 0xb0
   24e78:	e59f1008 	ldr	r1, [pc, #8]	; 24e88 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   24e7c:	e59f0010 	ldr	r0, [pc, #16]	; 24e94 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   24e80:	ebfffc8f 	bl	240c4 <assertion_failed>
   24e84:	00046898 	.word	0x00046898
   24e88:	0004681c 	.word	0x0004681c
   24e8c:	00046850 	.word	0x00046850
   24e90:	00049234 	.word	0x00049234
   24e94:	00046888 	.word	0x00046888

00024e98 <CGPIOPin::CGPIOPin()>:
   24e98:	e92d4010 	push	{r4, lr}
   24e9c:	e3a01000 	mov	r1, #0
   24ea0:	e3a02006 	mov	r2, #6
   24ea4:	e3a04036 	mov	r4, #54	; 0x36
   24ea8:	e3a0c00a 	mov	ip, #10
   24eac:	e59fe01c 	ldr	lr, [pc, #28]	; 24ed0 <CGPIOPin::CGPIOPin()+0x38>
   24eb0:	e5804004 	str	r4, [r0, #4]
   24eb4:	e580e000 	str	lr, [r0]
   24eb8:	e5c0c010 	strb	ip, [r0, #16]
   24ebc:	e5801018 	str	r1, [r0, #24]
   24ec0:	e580101c 	str	r1, [r0, #28]
   24ec4:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   24ec8:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   24ecc:	e8bd8010 	pop	{r4, pc}
   24ed0:	000468ac 	.word	0x000468ac

00024ed4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   24ed4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24ed8:	e3a0c006 	mov	ip, #6
   24edc:	e3a0e000 	mov	lr, #0
   24ee0:	e3a07036 	mov	r7, #54	; 0x36
   24ee4:	e3a0600a 	mov	r6, #10
   24ee8:	e1a04000 	mov	r4, r0
   24eec:	e1a05002 	mov	r5, r2
   24ef0:	e5803018 	str	r3, [r0, #24]
   24ef4:	e59f302c 	ldr	r3, [pc, #44]	; 24f28 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   24ef8:	e580e01c 	str	lr, [r0, #28]
   24efc:	e8800088 	stm	r0, {r3, r7}
   24f00:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   24f04:	e5c0c026 	strb	ip, [r0, #38]	; 0x26
   24f08:	e5c06010 	strb	r6, [r0, #16]
   24f0c:	eb00000d 	bl	24f48 <CGPIOPin::AssignPin(unsigned int)>
   24f10:	e1a00004 	mov	r0, r4
   24f14:	e1a01005 	mov	r1, r5
   24f18:	e3a02001 	mov	r2, #1
   24f1c:	eb00002a 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   24f20:	e1a00004 	mov	r0, r4
   24f24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24f28:	000468ac 	.word	0x000468ac

00024f2c <CGPIOPin::~CGPIOPin()>:
   24f2c:	e12fff1e 	bx	lr

00024f30 <CGPIOPin::~CGPIOPin()>:
   24f30:	e92d4010 	push	{r4, lr}
   24f34:	e1a04000 	mov	r4, r0
   24f38:	e3a01028 	mov	r1, #40	; 0x28
   24f3c:	eb00168a 	bl	2a96c <operator delete(void*, unsigned int)>
   24f40:	e1a00004 	mov	r0, r4
   24f44:	e8bd8010 	pop	{r4, pc}

00024f48 <CGPIOPin::AssignPin(unsigned int)>:
   24f48:	e5903004 	ldr	r3, [r0, #4]
   24f4c:	e92d4070 	push	{r4, r5, r6, lr}
   24f50:	e3530036 	cmp	r3, #54	; 0x36
   24f54:	1a000017 	bne	24fb8 <CGPIOPin::AssignPin(unsigned int)+0x70>
   24f58:	e1a05000 	mov	r5, r0
   24f5c:	e3510035 	cmp	r1, #53	; 0x35
   24f60:	e1a04001 	mov	r4, r1
   24f64:	e5851004 	str	r1, [r5, #4]
   24f68:	8a000007 	bhi	24f8c <CGPIOPin::AssignPin(unsigned int)+0x44>
   24f6c:	e3a03001 	mov	r3, #1
   24f70:	e204201f 	and	r2, r4, #31
   24f74:	e1a042a4 	lsr	r4, r4, #5
   24f78:	e1a03213 	lsl	r3, r3, r2
   24f7c:	e1a04104 	lsl	r4, r4, #2
   24f80:	e585300c 	str	r3, [r5, #12]
   24f84:	e5854008 	str	r4, [r5, #8]
   24f88:	e8bd8070 	pop	{r4, r5, r6, pc}
   24f8c:	eb000839 	bl	27078 <CMachineInfo::Get()>
   24f90:	e6ef1074 	uxtb	r1, r4
   24f94:	eb000799 	bl	26e00 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   24f98:	e3500035 	cmp	r0, #53	; 0x35
   24f9c:	e1a04000 	mov	r4, r0
   24fa0:	e5850004 	str	r0, [r5, #4]
   24fa4:	9afffff0 	bls	24f6c <CGPIOPin::AssignPin(unsigned int)+0x24>
   24fa8:	e59f1018 	ldr	r1, [pc, #24]	; 24fc8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   24fac:	e3a02047 	mov	r2, #71	; 0x47
   24fb0:	e2810020 	add	r0, r1, #32
   24fb4:	ebfffc42 	bl	240c4 <assertion_failed>
   24fb8:	e59f1008 	ldr	r1, [pc, #8]	; 24fc8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   24fbc:	e3a02040 	mov	r2, #64	; 0x40
   24fc0:	e281000c 	add	r0, r1, #12
   24fc4:	ebfffc3e 	bl	240c4 <assertion_failed>
   24fc8:	000468b4 	.word	0x000468b4

00024fcc <CGPIOPin::SetMode(TGPIOMode, bool)>:
   24fcc:	e3510009 	cmp	r1, #9
   24fd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24fd4:	ca000049 	bgt	25100 <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>
   24fd8:	e1a06002 	mov	r6, r2
   24fdc:	e1a04000 	mov	r4, r0
   24fe0:	e5c01010 	strb	r1, [r0, #16]
   24fe4:	e3a02000 	mov	r2, #0
   24fe8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   24fec:	e5d03010 	ldrb	r3, [r0, #16]
   24ff0:	e2431004 	sub	r1, r3, #4
   24ff4:	e6efc071 	uxtb	ip, r1
   24ff8:	e35c0005 	cmp	ip, #5
   24ffc:	8a00000a 	bhi	2502c <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
   25000:	e1560002 	cmp	r6, r2
   25004:	0a000003 	beq	25018 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   25008:	e1a01002 	mov	r1, r2
   2500c:	eb000205 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25010:	e5d43010 	ldrb	r3, [r4, #16]
   25014:	e2431004 	sub	r1, r3, #4
   25018:	e1a00004 	mov	r0, r4
   2501c:	eb000229 	bl	258c8 <CGPIOPin::SetAlternateFunction(unsigned int)>
   25020:	e3a03000 	mov	r3, #0
   25024:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25028:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2502c:	e3530001 	cmp	r3, #1
   25030:	13a03000 	movne	r3, #0
   25034:	02063001 	andeq	r3, r6, #1
   25038:	e3530000 	cmp	r3, #0
   2503c:	1a00003f 	bne	25140 <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   25040:	e5943004 	ldr	r3, [r4, #4]
   25044:	e3530035 	cmp	r3, #53	; 0x35
   25048:	8a00003f 	bhi	2514c <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   2504c:	e59f5108 	ldr	r5, [pc, #264]	; 2515c <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   25050:	e59f8108 	ldr	r8, [pc, #264]	; 25160 <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   25054:	e0852395 	umull	r2, r5, r5, r3
   25058:	e5980000 	ldr	r0, [r8]
   2505c:	e1a051a5 	lsr	r5, r5, #3
   25060:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   25064:	e0855105 	add	r5, r5, r5, lsl #2
   25068:	e2877702 	add	r7, r7, #524288	; 0x80000
   2506c:	e0435085 	sub	r5, r3, r5, lsl #1
   25070:	e3500000 	cmp	r0, #0
   25074:	e1a07107 	lsl	r7, r7, #2
   25078:	e0855085 	add	r5, r5, r5, lsl #1
   2507c:	1a00001d 	bne	250f8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   25080:	e5d42010 	ldrb	r2, [r4, #16]
   25084:	e3a01007 	mov	r1, #7
   25088:	e2422001 	sub	r2, r2, #1
   2508c:	e16f2f12 	clz	r2, r2
   25090:	e5973000 	ldr	r3, [r7]
   25094:	e1a022a2 	lsr	r2, r2, #5
   25098:	e1c33511 	bic	r3, r3, r1, lsl r5
   2509c:	e1835512 	orr	r5, r3, r2, lsl r5
   250a0:	e5875000 	str	r5, [r7]
   250a4:	e5983000 	ldr	r3, [r8]
   250a8:	e3530000 	cmp	r3, #0
   250ac:	1a00000f 	bne	250f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   250b0:	e3560000 	cmp	r6, #0
   250b4:	0a00000a 	beq	250e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   250b8:	e5d43010 	ldrb	r3, [r4, #16]
   250bc:	e3530003 	cmp	r3, #3
   250c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   250c4:	ea000006 	b	250e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   250c8:	00025110 	.word	0x00025110
   250cc:	00025120 	.word	0x00025120
   250d0:	00025130 	.word	0x00025130
   250d4:	000250d8 	.word	0x000250d8
   250d8:	e1a00004 	mov	r0, r4
   250dc:	e3a01001 	mov	r1, #1
   250e0:	eb0001d0 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   250e4:	e3a03000 	mov	r3, #0
   250e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   250ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   250f0:	eb00196c 	bl	2b6a8 <LeaveCritical>
   250f4:	eaffffed 	b	250b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   250f8:	eb00193f 	bl	2b5fc <EnterCritical>
   250fc:	eaffffdf 	b	25080 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
   25100:	e59f105c 	ldr	r1, [pc, #92]	; 25164 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   25104:	e3a0204f 	mov	r2, #79	; 0x4f
   25108:	e2810034 	add	r0, r1, #52	; 0x34
   2510c:	ebfffbec 	bl	240c4 <assertion_failed>
   25110:	e1a00004 	mov	r0, r4
   25114:	e3a01000 	mov	r1, #0
   25118:	eb0001c2 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2511c:	eafffff0 	b	250e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25120:	e1a00004 	mov	r0, r4
   25124:	e3a01000 	mov	r1, #0
   25128:	eb00000e 	bl	25168 <CGPIOPin::Write(unsigned int)>
   2512c:	eaffffec 	b	250e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25130:	e1a00004 	mov	r0, r4
   25134:	e3a01002 	mov	r1, #2
   25138:	eb0001ba 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2513c:	eaffffe8 	b	250e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25140:	e1a01002 	mov	r1, r2
   25144:	eb0001b7 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25148:	eaffffbc 	b	25040 <CGPIOPin::SetMode(TGPIOMode, bool)+0x74>
   2514c:	e59f1010 	ldr	r1, [pc, #16]	; 25164 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   25150:	e3a02068 	mov	r2, #104	; 0x68
   25154:	e2810020 	add	r0, r1, #32
   25158:	ebfffbd9 	bl	240c4 <assertion_failed>
   2515c:	cccccccd 	.word	0xcccccccd
   25160:	0005015c 	.word	0x0005015c
   25164:	000468b4 	.word	0x000468b4

00025168 <CGPIOPin::Write(unsigned int)>:
   25168:	e5903004 	ldr	r3, [r0, #4]
   2516c:	e92d4010 	push	{r4, lr}
   25170:	e3530035 	cmp	r3, #53	; 0x35
   25174:	8a000010 	bhi	251bc <CGPIOPin::Write(unsigned int)+0x54>
   25178:	e5d03010 	ldrb	r3, [r0, #16]
   2517c:	e3530003 	cmp	r3, #3
   25180:	ca000011 	bgt	251cc <CGPIOPin::Write(unsigned int)+0x64>
   25184:	e3a02000 	mov	r2, #0
   25188:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2518c:	e3510001 	cmp	r1, #1
   25190:	8a000011 	bhi	251dc <CGPIOPin::Write(unsigned int)+0x74>
   25194:	e59fc050 	ldr	ip, [pc, #80]	; 251ec <CGPIOPin::Write(unsigned int)+0x84>
   25198:	e3510000 	cmp	r1, #0
   2519c:	e59f304c 	ldr	r3, [pc, #76]	; 251f0 <CGPIOPin::Write(unsigned int)+0x88>
   251a0:	01a0300c 	moveq	r3, ip
   251a4:	e590e00c 	ldr	lr, [r0, #12]
   251a8:	e590c008 	ldr	ip, [r0, #8]
   251ac:	e5801014 	str	r1, [r0, #20]
   251b0:	e783e00c 	str	lr, [r3, ip]
   251b4:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   251b8:	e8bd8010 	pop	{r4, pc}
   251bc:	e59f1030 	ldr	r1, [pc, #48]	; 251f4 <CGPIOPin::Write(unsigned int)+0x8c>
   251c0:	e3a02091 	mov	r2, #145	; 0x91
   251c4:	e2810020 	add	r0, r1, #32
   251c8:	ebfffbbd 	bl	240c4 <assertion_failed>
   251cc:	e59f1020 	ldr	r1, [pc, #32]	; 251f4 <CGPIOPin::Write(unsigned int)+0x8c>
   251d0:	e3a02094 	mov	r2, #148	; 0x94
   251d4:	e281004c 	add	r0, r1, #76	; 0x4c
   251d8:	ebfffbb9 	bl	240c4 <assertion_failed>
   251dc:	e59f1010 	ldr	r1, [pc, #16]	; 251f4 <CGPIOPin::Write(unsigned int)+0x8c>
   251e0:	e3a02098 	mov	r2, #152	; 0x98
   251e4:	e2810070 	add	r0, r1, #112	; 0x70
   251e8:	ebfffbb5 	bl	240c4 <assertion_failed>
   251ec:	20200028 	.word	0x20200028
   251f0:	2020001c 	.word	0x2020001c
   251f4:	000468b4 	.word	0x000468b4

000251f8 <CGPIOPin::Read() const>:
   251f8:	e5903004 	ldr	r3, [r0, #4]
   251fc:	e92d4010 	push	{r4, lr}
   25200:	e3530035 	cmp	r3, #53	; 0x35
   25204:	8a00000f 	bhi	25248 <CGPIOPin::Read() const+0x50>
   25208:	e5d03010 	ldrb	r3, [r0, #16]
   2520c:	e2432002 	sub	r2, r3, #2
   25210:	e3530000 	cmp	r3, #0
   25214:	13520001 	cmpne	r2, #1
   25218:	8a00000e 	bhi	25258 <CGPIOPin::Read() const+0x60>
   2521c:	e3a03000 	mov	r3, #0
   25220:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25224:	e59f103c 	ldr	r1, [pc, #60]	; 25268 <CGPIOPin::Read() const+0x70>
   25228:	e590c008 	ldr	ip, [r0, #8]
   2522c:	e590200c 	ldr	r2, [r0, #12]
   25230:	e79c1001 	ldr	r1, [ip, r1]
   25234:	e1110002 	tst	r1, r2
   25238:	13a00001 	movne	r0, #1
   2523c:	01a00003 	moveq	r0, r3
   25240:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25244:	e8bd8010 	pop	{r4, pc}
   25248:	e59f101c 	ldr	r1, [pc, #28]	; 2526c <CGPIOPin::Read() const+0x74>
   2524c:	e3a020a4 	mov	r2, #164	; 0xa4
   25250:	e2810020 	add	r0, r1, #32
   25254:	ebfffb9a 	bl	240c4 <assertion_failed>
   25258:	e59f100c 	ldr	r1, [pc, #12]	; 2526c <CGPIOPin::Read() const+0x74>
   2525c:	e3a020a8 	mov	r2, #168	; 0xa8
   25260:	e2810090 	add	r0, r1, #144	; 0x90
   25264:	ebfffb96 	bl	240c4 <assertion_failed>
   25268:	20200034 	.word	0x20200034
   2526c:	000468b4 	.word	0x000468b4

00025270 <CGPIOPin::Invert()>:
   25270:	e5d02010 	ldrb	r2, [r0, #16]
   25274:	e3520001 	cmp	r2, #1
   25278:	1a000002 	bne	25288 <CGPIOPin::Invert()+0x18>
   2527c:	e5901014 	ldr	r1, [r0, #20]
   25280:	e2211001 	eor	r1, r1, #1
   25284:	eaffffb7 	b	25168 <CGPIOPin::Write(unsigned int)>
   25288:	e59f100c 	ldr	r1, [pc, #12]	; 2529c <CGPIOPin::Invert()+0x2c>
   2528c:	e92d4010 	push	{r4, lr}
   25290:	e3a020b5 	mov	r2, #181	; 0xb5
   25294:	e28100ec 	add	r0, r1, #236	; 0xec
   25298:	ebfffb89 	bl	240c4 <assertion_failed>
   2529c:	000468b4 	.word	0x000468b4

000252a0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   252a0:	e5d0c010 	ldrb	ip, [r0, #16]
   252a4:	e92d4010 	push	{r4, lr}
   252a8:	e24ce002 	sub	lr, ip, #2
   252ac:	e35c0000 	cmp	ip, #0
   252b0:	135e0001 	cmpne	lr, #1
   252b4:	8a000028 	bhi	2535c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   252b8:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   252bc:	e35c0006 	cmp	ip, #6
   252c0:	1a000011 	bne	2530c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   252c4:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   252c8:	e35c0006 	cmp	ip, #6
   252cc:	1a000012 	bne	2531c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   252d0:	e3510000 	cmp	r1, #0
   252d4:	0a000014 	beq	2532c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   252d8:	e590c01c 	ldr	ip, [r0, #28]
   252dc:	e35c0000 	cmp	ip, #0
   252e0:	1a000015 	bne	2533c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   252e4:	e590c018 	ldr	ip, [r0, #24]
   252e8:	e580101c 	str	r1, [r0, #28]
   252ec:	e35c0000 	cmp	ip, #0
   252f0:	e5802020 	str	r2, [r0, #32]
   252f4:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   252f8:	0a000013 	beq	2534c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   252fc:	e8bd4010 	pop	{r4, lr}
   25300:	e1a01000 	mov	r1, r0
   25304:	e1a0000c 	mov	r0, ip
   25308:	ea001b7e 	b	2c108 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2530c:	e59f1058 	ldr	r1, [pc, #88]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25310:	e3a020c0 	mov	r2, #192	; 0xc0
   25314:	e2810f42 	add	r0, r1, #264	; 0x108
   25318:	ebfffb69 	bl	240c4 <assertion_failed>
   2531c:	e59f1048 	ldr	r1, [pc, #72]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25320:	e3a020c1 	mov	r2, #193	; 0xc1
   25324:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25328:	ebfffb65 	bl	240c4 <assertion_failed>
   2532c:	e59f1038 	ldr	r1, [pc, #56]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25330:	e3a020c3 	mov	r2, #195	; 0xc3
   25334:	e2810f55 	add	r0, r1, #340	; 0x154
   25338:	ebfffb61 	bl	240c4 <assertion_failed>
   2533c:	e59f1028 	ldr	r1, [pc, #40]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25340:	e3a020c4 	mov	r2, #196	; 0xc4
   25344:	e2810f59 	add	r0, r1, #356	; 0x164
   25348:	ebfffb5d 	bl	240c4 <assertion_failed>
   2534c:	e59f1018 	ldr	r1, [pc, #24]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25350:	e3a020cb 	mov	r2, #203	; 0xcb
   25354:	e2810f5d 	add	r0, r1, #372	; 0x174
   25358:	ebfffb59 	bl	240c4 <assertion_failed>
   2535c:	e59f1008 	ldr	r1, [pc, #8]	; 2536c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25360:	e3a020be 	mov	r2, #190	; 0xbe
   25364:	e2810090 	add	r0, r1, #144	; 0x90
   25368:	ebfffb55 	bl	240c4 <assertion_failed>
   2536c:	000468b4 	.word	0x000468b4

00025370 <CGPIOPin::DisconnectInterrupt()>:
   25370:	e5d03010 	ldrb	r3, [r0, #16]
   25374:	e92d4010 	push	{r4, lr}
   25378:	e2432002 	sub	r2, r3, #2
   2537c:	e3530000 	cmp	r3, #0
   25380:	13520001 	cmpne	r2, #1
   25384:	8a000020 	bhi	2540c <CGPIOPin::DisconnectInterrupt()+0x9c>
   25388:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2538c:	e1a01000 	mov	r1, r0
   25390:	e3530006 	cmp	r3, #6
   25394:	1a00000c 	bne	253cc <CGPIOPin::DisconnectInterrupt()+0x5c>
   25398:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2539c:	e3530006 	cmp	r3, #6
   253a0:	1a00000d 	bne	253dc <CGPIOPin::DisconnectInterrupt()+0x6c>
   253a4:	e590301c 	ldr	r3, [r0, #28]
   253a8:	e3530000 	cmp	r3, #0
   253ac:	0a00000e 	beq	253ec <CGPIOPin::DisconnectInterrupt()+0x7c>
   253b0:	e3a03000 	mov	r3, #0
   253b4:	e5900018 	ldr	r0, [r0, #24]
   253b8:	e581301c 	str	r3, [r1, #28]
   253bc:	e1500003 	cmp	r0, r3
   253c0:	0a00000d 	beq	253fc <CGPIOPin::DisconnectInterrupt()+0x8c>
   253c4:	e8bd4010 	pop	{r4, lr}
   253c8:	ea001b72 	b	2c198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   253cc:	e59f1048 	ldr	r1, [pc, #72]	; 2541c <CGPIOPin::DisconnectInterrupt()+0xac>
   253d0:	e3a020d5 	mov	r2, #213	; 0xd5
   253d4:	e2810f42 	add	r0, r1, #264	; 0x108
   253d8:	ebfffb39 	bl	240c4 <assertion_failed>
   253dc:	e59f1038 	ldr	r1, [pc, #56]	; 2541c <CGPIOPin::DisconnectInterrupt()+0xac>
   253e0:	e3a020d6 	mov	r2, #214	; 0xd6
   253e4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   253e8:	ebfffb35 	bl	240c4 <assertion_failed>
   253ec:	e59f1028 	ldr	r1, [pc, #40]	; 2541c <CGPIOPin::DisconnectInterrupt()+0xac>
   253f0:	e3a020d8 	mov	r2, #216	; 0xd8
   253f4:	e2810f61 	add	r0, r1, #388	; 0x184
   253f8:	ebfffb31 	bl	240c4 <assertion_failed>
   253fc:	e59f1018 	ldr	r1, [pc, #24]	; 2541c <CGPIOPin::DisconnectInterrupt()+0xac>
   25400:	e3a020db 	mov	r2, #219	; 0xdb
   25404:	e2810f5d 	add	r0, r1, #372	; 0x174
   25408:	ebfffb2d 	bl	240c4 <assertion_failed>
   2540c:	e59f1008 	ldr	r1, [pc, #8]	; 2541c <CGPIOPin::DisconnectInterrupt()+0xac>
   25410:	e3a020d3 	mov	r2, #211	; 0xd3
   25414:	e2810090 	add	r0, r1, #144	; 0x90
   25418:	ebfffb29 	bl	240c4 <assertion_failed>
   2541c:	000468b4 	.word	0x000468b4

00025420 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25420:	e5d03010 	ldrb	r3, [r0, #16]
   25424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25428:	e2432002 	sub	r2, r3, #2
   2542c:	e3530000 	cmp	r3, #0
   25430:	13520001 	cmpne	r2, #1
   25434:	8a000030 	bhi	254fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   25438:	e590301c 	ldr	r3, [r0, #28]
   2543c:	e1a04000 	mov	r4, r0
   25440:	e3530000 	cmp	r3, #0
   25444:	0a00001c 	beq	254bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   25448:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2544c:	e3530006 	cmp	r3, #6
   25450:	1a00001d 	bne	254cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   25454:	e3510005 	cmp	r1, #5
   25458:	ca00001f 	bgt	254dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   2545c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25460:	e1530001 	cmp	r3, r1
   25464:	0a000020 	beq	254ec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   25468:	e59f709c 	ldr	r7, [pc, #156]	; 2550c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   2546c:	e5903008 	ldr	r3, [r0, #8]
   25470:	e5970000 	ldr	r0, [r7]
   25474:	e59f6094 	ldr	r6, [pc, #148]	; 25510 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   25478:	e0815081 	add	r5, r1, r1, lsl #1
   2547c:	e3500000 	cmp	r0, #0
   25480:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   25484:	e1a05105 	lsl	r5, r5, #2
   25488:	e0836006 	add	r6, r3, r6
   2548c:	1a000008 	bne	254b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25490:	e594200c 	ldr	r2, [r4, #12]
   25494:	e7963005 	ldr	r3, [r6, r5]
   25498:	e1833002 	orr	r3, r3, r2
   2549c:	e7863005 	str	r3, [r6, r5]
   254a0:	e5973000 	ldr	r3, [r7]
   254a4:	e3530000 	cmp	r3, #0
   254a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   254ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   254b0:	ea00187c 	b	2b6a8 <LeaveCritical>
   254b4:	eb001850 	bl	2b5fc <EnterCritical>
   254b8:	eafffff4 	b	25490 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   254bc:	e59f1050 	ldr	r1, [pc, #80]	; 25514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   254c0:	e3a020e4 	mov	r2, #228	; 0xe4
   254c4:	e2810f61 	add	r0, r1, #388	; 0x184
   254c8:	ebfffafd 	bl	240c4 <assertion_failed>
   254cc:	e59f1040 	ldr	r1, [pc, #64]	; 25514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   254d0:	e3a020e6 	mov	r2, #230	; 0xe6
   254d4:	e2810f42 	add	r0, r1, #264	; 0x108
   254d8:	ebfffaf9 	bl	240c4 <assertion_failed>
   254dc:	e59f1030 	ldr	r1, [pc, #48]	; 25514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   254e0:	e3a020e7 	mov	r2, #231	; 0xe7
   254e4:	e2810f65 	add	r0, r1, #404	; 0x194
   254e8:	ebfffaf5 	bl	240c4 <assertion_failed>
   254ec:	e59f1020 	ldr	r1, [pc, #32]	; 25514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   254f0:	e3a020e8 	mov	r2, #232	; 0xe8
   254f4:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   254f8:	ebfffaf1 	bl	240c4 <assertion_failed>
   254fc:	e59f1010 	ldr	r1, [pc, #16]	; 25514 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25500:	e3a020e3 	mov	r2, #227	; 0xe3
   25504:	e2810090 	add	r0, r1, #144	; 0x90
   25508:	ebfffaed 	bl	240c4 <assertion_failed>
   2550c:	0005015c 	.word	0x0005015c
   25510:	2020004c 	.word	0x2020004c
   25514:	000468b4 	.word	0x000468b4

00025518 <CGPIOPin::DisableInterrupt()>:
   25518:	e5d03010 	ldrb	r3, [r0, #16]
   2551c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25520:	e2432002 	sub	r2, r3, #2
   25524:	e3530000 	cmp	r3, #0
   25528:	13520001 	cmpne	r2, #1
   2552c:	8a00001d 	bhi	255a8 <CGPIOPin::DisableInterrupt()+0x90>
   25530:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25534:	e1a05000 	mov	r5, r0
   25538:	e3530005 	cmp	r3, #5
   2553c:	ca000015 	bgt	25598 <CGPIOPin::DisableInterrupt()+0x80>
   25540:	e59f7070 	ldr	r7, [pc, #112]	; 255b8 <CGPIOPin::DisableInterrupt()+0xa0>
   25544:	e5902008 	ldr	r2, [r0, #8]
   25548:	e5970000 	ldr	r0, [r7]
   2554c:	e59f6068 	ldr	r6, [pc, #104]	; 255bc <CGPIOPin::DisableInterrupt()+0xa4>
   25550:	e0833083 	add	r3, r3, r3, lsl #1
   25554:	e3500000 	cmp	r0, #0
   25558:	e1a04103 	lsl	r4, r3, #2
   2555c:	e0826006 	add	r6, r2, r6
   25560:	1a00000a 	bne	25590 <CGPIOPin::DisableInterrupt()+0x78>
   25564:	e7963004 	ldr	r3, [r6, r4]
   25568:	e595200c 	ldr	r2, [r5, #12]
   2556c:	e1c33002 	bic	r3, r3, r2
   25570:	e7863004 	str	r3, [r6, r4]
   25574:	e5973000 	ldr	r3, [r7]
   25578:	e3530000 	cmp	r3, #0
   2557c:	0a000000 	beq	25584 <CGPIOPin::DisableInterrupt()+0x6c>
   25580:	eb001848 	bl	2b6a8 <LeaveCritical>
   25584:	e3a03006 	mov	r3, #6
   25588:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   2558c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25590:	eb001819 	bl	2b5fc <EnterCritical>
   25594:	eafffff2 	b	25564 <CGPIOPin::DisableInterrupt()+0x4c>
   25598:	e59f1020 	ldr	r1, [pc, #32]	; 255c0 <CGPIOPin::DisableInterrupt()+0xa8>
   2559c:	e3a020fb 	mov	r2, #251	; 0xfb
   255a0:	e2810f75 	add	r0, r1, #468	; 0x1d4
   255a4:	ebfffac6 	bl	240c4 <assertion_failed>
   255a8:	e59f1010 	ldr	r1, [pc, #16]	; 255c0 <CGPIOPin::DisableInterrupt()+0xa8>
   255ac:	e3a020f9 	mov	r2, #249	; 0xf9
   255b0:	e2810090 	add	r0, r1, #144	; 0x90
   255b4:	ebfffac2 	bl	240c4 <assertion_failed>
   255b8:	0005015c 	.word	0x0005015c
   255bc:	2020004c 	.word	0x2020004c
   255c0:	000468b4 	.word	0x000468b4

000255c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   255c4:	e5d03010 	ldrb	r3, [r0, #16]
   255c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   255cc:	e2432002 	sub	r2, r3, #2
   255d0:	e3530000 	cmp	r3, #0
   255d4:	13520001 	cmpne	r2, #1
   255d8:	8a000030 	bhi	256a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   255dc:	e590301c 	ldr	r3, [r0, #28]
   255e0:	e1a04000 	mov	r4, r0
   255e4:	e3530000 	cmp	r3, #0
   255e8:	0a00001c 	beq	25660 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   255ec:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   255f0:	e3530006 	cmp	r3, #6
   255f4:	1a00001d 	bne	25670 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   255f8:	e3510005 	cmp	r1, #5
   255fc:	ca00001f 	bgt	25680 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25600:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25604:	e1530001 	cmp	r3, r1
   25608:	0a000020 	beq	25690 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   2560c:	e59f709c 	ldr	r7, [pc, #156]	; 256b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25610:	e5903008 	ldr	r3, [r0, #8]
   25614:	e5970000 	ldr	r0, [r7]
   25618:	e59f6094 	ldr	r6, [pc, #148]	; 256b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   2561c:	e0815081 	add	r5, r1, r1, lsl #1
   25620:	e3500000 	cmp	r0, #0
   25624:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25628:	e1a05105 	lsl	r5, r5, #2
   2562c:	e0836006 	add	r6, r3, r6
   25630:	1a000008 	bne	25658 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25634:	e594200c 	ldr	r2, [r4, #12]
   25638:	e7963005 	ldr	r3, [r6, r5]
   2563c:	e1833002 	orr	r3, r3, r2
   25640:	e7863005 	str	r3, [r6, r5]
   25644:	e5973000 	ldr	r3, [r7]
   25648:	e3530000 	cmp	r3, #0
   2564c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25650:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25654:	ea001813 	b	2b6a8 <LeaveCritical>
   25658:	eb0017e7 	bl	2b5fc <EnterCritical>
   2565c:	eafffff4 	b	25634 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25660:	e59f1050 	ldr	r1, [pc, #80]	; 256b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25664:	e59f2050 	ldr	r2, [pc, #80]	; 256bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25668:	e2810f61 	add	r0, r1, #388	; 0x184
   2566c:	ebfffa94 	bl	240c4 <assertion_failed>
   25670:	e59f1040 	ldr	r1, [pc, #64]	; 256b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25674:	e59f2044 	ldr	r2, [pc, #68]	; 256c0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25678:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2567c:	ebfffa90 	bl	240c4 <assertion_failed>
   25680:	e59f1030 	ldr	r1, [pc, #48]	; 256b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25684:	e3a02e11 	mov	r2, #272	; 0x110
   25688:	e2810f65 	add	r0, r1, #404	; 0x194
   2568c:	ebfffa8c 	bl	240c4 <assertion_failed>
   25690:	e59f1020 	ldr	r1, [pc, #32]	; 256b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25694:	e59f2028 	ldr	r2, [pc, #40]	; 256c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25698:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   2569c:	ebfffa88 	bl	240c4 <assertion_failed>
   256a0:	e59f1010 	ldr	r1, [pc, #16]	; 256b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   256a4:	e3a02f43 	mov	r2, #268	; 0x10c
   256a8:	e2810090 	add	r0, r1, #144	; 0x90
   256ac:	ebfffa84 	bl	240c4 <assertion_failed>
   256b0:	0005015c 	.word	0x0005015c
   256b4:	2020004c 	.word	0x2020004c
   256b8:	000468b4 	.word	0x000468b4
   256bc:	0000010d 	.word	0x0000010d
   256c0:	0000010f 	.word	0x0000010f
   256c4:	00000111 	.word	0x00000111

000256c8 <CGPIOPin::DisableInterrupt2()>:
   256c8:	e5d03010 	ldrb	r3, [r0, #16]
   256cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   256d0:	e2432002 	sub	r2, r3, #2
   256d4:	e3530000 	cmp	r3, #0
   256d8:	13520001 	cmpne	r2, #1
   256dc:	8a00001d 	bhi	25758 <CGPIOPin::DisableInterrupt2()+0x90>
   256e0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   256e4:	e1a05000 	mov	r5, r0
   256e8:	e3530005 	cmp	r3, #5
   256ec:	ca000015 	bgt	25748 <CGPIOPin::DisableInterrupt2()+0x80>
   256f0:	e59f7070 	ldr	r7, [pc, #112]	; 25768 <CGPIOPin::DisableInterrupt2()+0xa0>
   256f4:	e5902008 	ldr	r2, [r0, #8]
   256f8:	e5970000 	ldr	r0, [r7]
   256fc:	e59f6068 	ldr	r6, [pc, #104]	; 2576c <CGPIOPin::DisableInterrupt2()+0xa4>
   25700:	e0833083 	add	r3, r3, r3, lsl #1
   25704:	e3500000 	cmp	r0, #0
   25708:	e1a04103 	lsl	r4, r3, #2
   2570c:	e0826006 	add	r6, r2, r6
   25710:	1a00000a 	bne	25740 <CGPIOPin::DisableInterrupt2()+0x78>
   25714:	e7963004 	ldr	r3, [r6, r4]
   25718:	e595200c 	ldr	r2, [r5, #12]
   2571c:	e1c33002 	bic	r3, r3, r2
   25720:	e7863004 	str	r3, [r6, r4]
   25724:	e5973000 	ldr	r3, [r7]
   25728:	e3530000 	cmp	r3, #0
   2572c:	0a000000 	beq	25734 <CGPIOPin::DisableInterrupt2()+0x6c>
   25730:	eb0017dc 	bl	2b6a8 <LeaveCritical>
   25734:	e3a03006 	mov	r3, #6
   25738:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   2573c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25740:	eb0017ad 	bl	2b5fc <EnterCritical>
   25744:	eafffff2 	b	25714 <CGPIOPin::DisableInterrupt2()+0x4c>
   25748:	e59f1020 	ldr	r1, [pc, #32]	; 25770 <CGPIOPin::DisableInterrupt2()+0xa8>
   2574c:	e3a02f49 	mov	r2, #292	; 0x124
   25750:	e2810f85 	add	r0, r1, #532	; 0x214
   25754:	ebfffa5a 	bl	240c4 <assertion_failed>
   25758:	e59f1010 	ldr	r1, [pc, #16]	; 25770 <CGPIOPin::DisableInterrupt2()+0xa8>
   2575c:	e59f2010 	ldr	r2, [pc, #16]	; 25774 <CGPIOPin::DisableInterrupt2()+0xac>
   25760:	e2810090 	add	r0, r1, #144	; 0x90
   25764:	ebfffa56 	bl	240c4 <assertion_failed>
   25768:	0005015c 	.word	0x0005015c
   2576c:	2020004c 	.word	0x2020004c
   25770:	000468b4 	.word	0x000468b4
   25774:	00000122 	.word	0x00000122

00025778 <CGPIOPin::AcknowledgeInterrupt()>:
   25778:	e590301c 	ldr	r3, [r0, #28]
   2577c:	e92d4010 	push	{r4, lr}
   25780:	e3530000 	cmp	r3, #0
   25784:	0a000009 	beq	257b0 <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25788:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   2578c:	e3530000 	cmp	r3, #0
   25790:	1a00000a 	bne	257c0 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25794:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25798:	e59f2030 	ldr	r2, [pc, #48]	; 257d0 <CGPIOPin::AcknowledgeInterrupt()+0x58>
   2579c:	e590c00c 	ldr	ip, [r0, #12]
   257a0:	e5901008 	ldr	r1, [r0, #8]
   257a4:	e781c002 	str	ip, [r1, r2]
   257a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   257ac:	e8bd8010 	pop	{r4, pc}
   257b0:	e59f101c 	ldr	r1, [pc, #28]	; 257d4 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   257b4:	e59f201c 	ldr	r2, [pc, #28]	; 257d8 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   257b8:	e2810f61 	add	r0, r1, #388	; 0x184
   257bc:	ebfffa40 	bl	240c4 <assertion_failed>
   257c0:	e59f100c 	ldr	r1, [pc, #12]	; 257d4 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   257c4:	e3a02f4d 	mov	r2, #308	; 0x134
   257c8:	e2810f8e 	add	r0, r1, #568	; 0x238
   257cc:	ebfffa3c 	bl	240c4 <assertion_failed>
   257d0:	20200040 	.word	0x20200040
   257d4:	000468b4 	.word	0x000468b4
   257d8:	00000133 	.word	0x00000133

000257dc <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   257dc:	e3a03000 	mov	r3, #0
   257e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   257e4:	e1d13000 	bics	r3, r1, r0
   257e8:	159f2018 	ldrne	r2, [pc, #24]	; 25808 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   257ec:	15823028 	strne	r3, [r2, #40]	; 0x28
   257f0:	e0100001 	ands	r0, r0, r1
   257f4:	159f300c 	ldrne	r3, [pc, #12]	; 25808 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   257f8:	1583001c 	strne	r0, [r3, #28]
   257fc:	e3a03000 	mov	r3, #0
   25800:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25804:	e12fff1e 	bx	lr
   25808:	20200000 	.word	0x20200000

0002580c <CGPIOPin::ReadAll()>:
   2580c:	e3a03000 	mov	r3, #0
   25810:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25814:	e59f2008 	ldr	r2, [pc, #8]	; 25824 <CGPIOPin::ReadAll()+0x18>
   25818:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   2581c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25820:	e12fff1e 	bx	lr
   25824:	20200000 	.word	0x20200000

00025828 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25828:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2582c:	e59f5080 	ldr	r5, [pc, #128]	; 258b4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25830:	e1a06000 	mov	r6, r0
   25834:	e5950000 	ldr	r0, [r5]
   25838:	e1a07001 	mov	r7, r1
   2583c:	e3500000 	cmp	r0, #0
   25840:	1a000015 	bne	2589c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25844:	e3a04000 	mov	r4, #0
   25848:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2584c:	e3570002 	cmp	r7, #2
   25850:	e5969008 	ldr	r9, [r6, #8]
   25854:	e59f805c 	ldr	r8, [pc, #92]	; 258b8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25858:	ca000011 	bgt	258a4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   2585c:	e59fa058 	ldr	sl, [pc, #88]	; 258bc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25860:	e3a00005 	mov	r0, #5
   25864:	e58a7094 	str	r7, [sl, #148]	; 0x94
   25868:	eb000fa2 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
   2586c:	e596300c 	ldr	r3, [r6, #12]
   25870:	e3a00005 	mov	r0, #5
   25874:	e7893008 	str	r3, [r9, r8]
   25878:	eb000f9e 	bl	296f8 <CTimer::SimpleusDelay(unsigned int)>
   2587c:	e58a4094 	str	r4, [sl, #148]	; 0x94
   25880:	e7894008 	str	r4, [r9, r8]
   25884:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   25888:	e5953000 	ldr	r3, [r5]
   2588c:	e3530000 	cmp	r3, #0
   25890:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25894:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25898:	ea001782 	b	2b6a8 <LeaveCritical>
   2589c:	eb001756 	bl	2b5fc <EnterCritical>
   258a0:	eaffffe7 	b	25844 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   258a4:	e59f1014 	ldr	r1, [pc, #20]	; 258c0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   258a8:	e59f2014 	ldr	r2, [pc, #20]	; 258c4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   258ac:	e2810f91 	add	r0, r1, #580	; 0x244
   258b0:	ebfffa03 	bl	240c4 <assertion_failed>
   258b4:	0005015c 	.word	0x0005015c
   258b8:	20200098 	.word	0x20200098
   258bc:	20200000 	.word	0x20200000
   258c0:	000468b4 	.word	0x000468b4
   258c4:	00000165 	.word	0x00000165

000258c8 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   258c8:	e5903004 	ldr	r3, [r0, #4]
   258cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   258d0:	e3530035 	cmp	r3, #53	; 0x35
   258d4:	8a00001e 	bhi	25954 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   258d8:	e59f2094 	ldr	r2, [pc, #148]	; 25974 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   258dc:	e1a06001 	mov	r6, r1
   258e0:	e3510005 	cmp	r1, #5
   258e4:	e0821392 	umull	r1, r2, r2, r3
   258e8:	e1a021a2 	lsr	r2, r2, #3
   258ec:	e2825302 	add	r5, r2, #134217728	; 0x8000000
   258f0:	e0822102 	add	r2, r2, r2, lsl #2
   258f4:	e2855702 	add	r5, r5, #524288	; 0x80000
   258f8:	e0433082 	sub	r3, r3, r2, lsl #1
   258fc:	e1a05105 	lsl	r5, r5, #2
   25900:	e0834083 	add	r4, r3, r3, lsl #1
   25904:	8a000016 	bhi	25964 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   25908:	e59f7068 	ldr	r7, [pc, #104]	; 25978 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   2590c:	e5970000 	ldr	r0, [r7]
   25910:	e3500000 	cmp	r0, #0
   25914:	1a00000c 	bne	2594c <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   25918:	e3a00007 	mov	r0, #7
   2591c:	e59f1058 	ldr	r1, [pc, #88]	; 2597c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   25920:	e5953000 	ldr	r3, [r5]
   25924:	e0816106 	add	r6, r1, r6, lsl #2
   25928:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   2592c:	e1c33410 	bic	r3, r3, r0, lsl r4
   25930:	e1833412 	orr	r3, r3, r2, lsl r4
   25934:	e5853000 	str	r3, [r5]
   25938:	e5973000 	ldr	r3, [r7]
   2593c:	e3530000 	cmp	r3, #0
   25940:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25944:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25948:	ea001756 	b	2b6a8 <LeaveCritical>
   2594c:	eb00172a 	bl	2b5fc <EnterCritical>
   25950:	eafffff0 	b	25918 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   25954:	e59f1024 	ldr	r1, [pc, #36]	; 25980 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25958:	e59f2024 	ldr	r2, [pc, #36]	; 25984 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   2595c:	e2810020 	add	r0, r1, #32
   25960:	ebfff9d7 	bl	240c4 <assertion_failed>
   25964:	e59f1014 	ldr	r1, [pc, #20]	; 25980 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   25968:	e59f2018 	ldr	r2, [pc, #24]	; 25988 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   2596c:	e2810f9a 	add	r0, r1, #616	; 0x268
   25970:	ebfff9d3 	bl	240c4 <assertion_failed>
   25974:	cccccccd 	.word	0xcccccccd
   25978:	0005015c 	.word	0x0005015c
   2597c:	000468a4 	.word	0x000468a4
   25980:	000468b4 	.word	0x000468b4
   25984:	00000181 	.word	0x00000181
   25988:	00000185 	.word	0x00000185

0002598c <CGPIOPin::InterruptHandler()>:
   2598c:	e5d03010 	ldrb	r3, [r0, #16]
   25990:	e92d4010 	push	{r4, lr}
   25994:	e2432002 	sub	r2, r3, #2
   25998:	e3530000 	cmp	r3, #0
   2599c:	13520001 	cmpne	r2, #1
   259a0:	8a000013 	bhi	259f4 <CGPIOPin::InterruptHandler()+0x68>
   259a4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   259a8:	e3530005 	cmp	r3, #5
   259ac:	ca000005 	bgt	259c8 <CGPIOPin::InterruptHandler()+0x3c>
   259b0:	e590301c 	ldr	r3, [r0, #28]
   259b4:	e3530000 	cmp	r3, #0
   259b8:	0a000009 	beq	259e4 <CGPIOPin::InterruptHandler()+0x58>
   259bc:	e8bd4010 	pop	{r4, lr}
   259c0:	e5900020 	ldr	r0, [r0, #32]
   259c4:	e12fff13 	bx	r3
   259c8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   259cc:	e3530005 	cmp	r3, #5
   259d0:	dafffff6 	ble	259b0 <CGPIOPin::InterruptHandler()+0x24>
   259d4:	e59f1028 	ldr	r1, [pc, #40]	; 25a04 <CGPIOPin::InterruptHandler()+0x78>
   259d8:	e59f2028 	ldr	r2, [pc, #40]	; 25a08 <CGPIOPin::InterruptHandler()+0x7c>
   259dc:	e2810f9e 	add	r0, r1, #632	; 0x278
   259e0:	ebfff9b7 	bl	240c4 <assertion_failed>
   259e4:	e59f1018 	ldr	r1, [pc, #24]	; 25a04 <CGPIOPin::InterruptHandler()+0x78>
   259e8:	e3a02f66 	mov	r2, #408	; 0x198
   259ec:	e2810f61 	add	r0, r1, #388	; 0x184
   259f0:	ebfff9b3 	bl	240c4 <assertion_failed>
   259f4:	e59f1008 	ldr	r1, [pc, #8]	; 25a04 <CGPIOPin::InterruptHandler()+0x78>
   259f8:	e3a02f65 	mov	r2, #404	; 0x194
   259fc:	e2810090 	add	r0, r1, #144	; 0x90
   25a00:	ebfff9af 	bl	240c4 <assertion_failed>
   25a04:	000468b4 	.word	0x000468b4
   25a08:	00000196 	.word	0x00000196

00025a0c <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   25a0c:	e3500035 	cmp	r0, #53	; 0x35
   25a10:	e92d4070 	push	{r4, r5, r6, lr}
   25a14:	8a000018 	bhi	25a7c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   25a18:	e3a02001 	mov	r2, #1
   25a1c:	e59f6068 	ldr	r6, [pc, #104]	; 25a8c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   25a20:	e59f4068 	ldr	r4, [pc, #104]	; 25a90 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   25a24:	e5963000 	ldr	r3, [r6]
   25a28:	e08442a0 	add	r4, r4, r0, lsr #5
   25a2c:	e200501f 	and	r5, r0, #31
   25a30:	e3530000 	cmp	r3, #0
   25a34:	e1a04104 	lsl	r4, r4, #2
   25a38:	e1a05512 	lsl	r5, r2, r5
   25a3c:	1a00000b 	bne	25a70 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   25a40:	e1e02005 	mvn	r2, r5
   25a44:	e59f1048 	ldr	r1, [pc, #72]	; 25a94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   25a48:	e5943000 	ldr	r3, [r4]
   25a4c:	e0033002 	and	r3, r3, r2
   25a50:	e484300c 	str	r3, [r4], #12
   25a54:	e1540001 	cmp	r4, r1
   25a58:	9afffffa 	bls	25a48 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   25a5c:	e5963000 	ldr	r3, [r6]
   25a60:	e3530000 	cmp	r3, #0
   25a64:	08bd8070 	popeq	{r4, r5, r6, pc}
   25a68:	e8bd4070 	pop	{r4, r5, r6, lr}
   25a6c:	ea00170d 	b	2b6a8 <LeaveCritical>
   25a70:	e1a00003 	mov	r0, r3
   25a74:	eb0016e0 	bl	2b5fc <EnterCritical>
   25a78:	eafffff0 	b	25a40 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   25a7c:	e59f1014 	ldr	r1, [pc, #20]	; 25a98 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   25a80:	e59f2014 	ldr	r2, [pc, #20]	; 25a9c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   25a84:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   25a88:	ebfff98d 	bl	240c4 <assertion_failed>
   25a8c:	0005015c 	.word	0x0005015c
   25a90:	08080013 	.word	0x08080013
   25a94:	2020008b 	.word	0x2020008b
   25a98:	000468b4 	.word	0x000468b4
   25a9c:	0000019e 	.word	0x0000019e

00025aa0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   25aa0:	e3a02001 	mov	r2, #1
   25aa4:	e59f3004 	ldr	r3, [pc, #4]	; 25ab0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   25aa8:	e5832000 	str	r2, [r3]
   25aac:	e12fff1e 	bx	lr
   25ab0:	0005015c 	.word	0x0005015c

00025ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   25ab4:	e3a01000 	mov	r1, #0
   25ab8:	ea00000a 	b	25ae8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   25abc:	e3520009 	cmp	r2, #9
   25ac0:	8a000011 	bhi	25b0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   25ac4:	e3730001 	cmn	r3, #1
   25ac8:	13a02000 	movne	r2, #0
   25acc:	03a02001 	moveq	r2, #1
   25ad0:	e1510003 	cmp	r1, r3
   25ad4:	91a01002 	movls	r1, r2
   25ad8:	83821001 	orrhi	r1, r2, #1
   25adc:	e3510000 	cmp	r1, #0
   25ae0:	1a000009 	bne	25b0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   25ae4:	e1a01003 	mov	r1, r3
   25ae8:	e0d0c0d1 	ldrsb	ip, [r0], #1
   25aec:	e0813101 	add	r3, r1, r1, lsl #2
   25af0:	e24c2030 	sub	r2, ip, #48	; 0x30
   25af4:	e35c0000 	cmp	ip, #0
   25af8:	e0823083 	add	r3, r2, r3, lsl #1
   25afc:	e6ef2072 	uxtb	r2, r2
   25b00:	1affffed 	bne	25abc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   25b04:	e1a00001 	mov	r0, r1
   25b08:	e12fff1e 	bx	lr
   25b0c:	e3e01000 	mvn	r1, #0
   25b10:	e1a00001 	mov	r0, r1
   25b14:	e12fff1e 	bx	lr

00025b18 <CKernelOptions::~CKernelOptions()>:
   25b18:	e3a02000 	mov	r2, #0
   25b1c:	e59f3004 	ldr	r3, [pc, #4]	; 25b28 <CKernelOptions::~CKernelOptions()+0x10>
   25b20:	e5832000 	str	r2, [r3]
   25b24:	e12fff1e 	bx	lr
   25b28:	00050160 	.word	0x00050160

00025b2c <CKernelOptions::GetWidth() const>:
   25b2c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   25b30:	e12fff1e 	bx	lr

00025b34 <CKernelOptions::GetHeight() const>:
   25b34:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   25b38:	e12fff1e 	bx	lr

00025b3c <CKernelOptions::GetLogDevice() const>:
   25b3c:	e2800e81 	add	r0, r0, #2064	; 0x810
   25b40:	e2800008 	add	r0, r0, #8
   25b44:	e12fff1e 	bx	lr

00025b48 <CKernelOptions::GetLogLevel() const>:
   25b48:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   25b4c:	e12fff1e 	bx	lr

00025b50 <CKernelOptions::GetKeyMap() const>:
   25b50:	e2800e83 	add	r0, r0, #2096	; 0x830
   25b54:	e12fff1e 	bx	lr

00025b58 <CKernelOptions::GetUSBPowerDelay() const>:
   25b58:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   25b5c:	e12fff1e 	bx	lr

00025b60 <CKernelOptions::GetUSBFullSpeed() const>:
   25b60:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   25b64:	e12fff1e 	bx	lr

00025b68 <CKernelOptions::GetSoundDevice() const>:
   25b68:	e2800e83 	add	r0, r0, #2096	; 0x830
   25b6c:	e2800009 	add	r0, r0, #9
   25b70:	e12fff1e 	bx	lr

00025b74 <CKernelOptions::GetSoundOption() const>:
   25b74:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   25b78:	e12fff1e 	bx	lr

00025b7c <CKernelOptions::GetCPUSpeed() const>:
   25b7c:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   25b80:	e12fff1e 	bx	lr

00025b84 <CKernelOptions::GetSoCMaxTemp() const>:
   25b84:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   25b88:	e12fff1e 	bx	lr

00025b8c <CKernelOptions::Get()>:
   25b8c:	e59f3004 	ldr	r3, [pc, #4]	; 25b98 <CKernelOptions::Get()+0xc>
   25b90:	e5930000 	ldr	r0, [r3]
   25b94:	e12fff1e 	bx	lr
   25b98:	00050160 	.word	0x00050160

00025b9c <CKernelOptions::GetToken()>:
   25b9c:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   25ba0:	e1d320d0 	ldrsb	r2, [r3]
   25ba4:	e3520000 	cmp	r2, #0
   25ba8:	1a000005 	bne	25bc4 <CKernelOptions::GetToken()+0x28>
   25bac:	ea000016 	b	25c0c <CKernelOptions::GetToken()+0x70>
   25bb0:	e2833001 	add	r3, r3, #1
   25bb4:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   25bb8:	e1d320d0 	ldrsb	r2, [r3]
   25bbc:	e3520000 	cmp	r2, #0
   25bc0:	0a000011 	beq	25c0c <CKernelOptions::GetToken()+0x70>
   25bc4:	e3520020 	cmp	r2, #32
   25bc8:	0afffff8 	beq	25bb0 <CKernelOptions::GetToken()+0x14>
   25bcc:	e1a02003 	mov	r2, r3
   25bd0:	ea000000 	b	25bd8 <CKernelOptions::GetToken()+0x3c>
   25bd4:	e1a02001 	mov	r2, r1
   25bd8:	e2821001 	add	r1, r2, #1
   25bdc:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   25be0:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   25be4:	e35c0000 	cmp	ip, #0
   25be8:	0a000008 	beq	25c10 <CKernelOptions::GetToken()+0x74>
   25bec:	e35c0020 	cmp	ip, #32
   25bf0:	1afffff7 	bne	25bd4 <CKernelOptions::GetToken()+0x38>
   25bf4:	e3a0c000 	mov	ip, #0
   25bf8:	e2822002 	add	r2, r2, #2
   25bfc:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   25c00:	e5c1c000 	strb	ip, [r1]
   25c04:	e1a00003 	mov	r0, r3
   25c08:	e12fff1e 	bx	lr
   25c0c:	e3a03000 	mov	r3, #0
   25c10:	e1a00003 	mov	r0, r3
   25c14:	e12fff1e 	bx	lr

00025c18 <CKernelOptions::CKernelOptions()>:
   25c18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25c1c:	e3a02004 	mov	r2, #4
   25c20:	e1a04000 	mov	r4, r0
   25c24:	e3a05000 	mov	r5, #0
   25c28:	e3a0303c 	mov	r3, #60	; 0x3c
   25c2c:	e2807e81 	add	r7, r0, #2064	; 0x810
   25c30:	e2877008 	add	r7, r7, #8
   25c34:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   25c38:	e5803858 	str	r3, [r0, #2136]	; 0x858
   25c3c:	e24dd014 	sub	sp, sp, #20
   25c40:	e59f1380 	ldr	r1, [pc, #896]	; 25fc8 <CKernelOptions::CKernelOptions()+0x3b0>
   25c44:	e1a00007 	mov	r0, r7
   25c48:	e5845810 	str	r5, [r4, #2064]	; 0x810
   25c4c:	e5845814 	str	r5, [r4, #2068]	; 0x814
   25c50:	e5845834 	str	r5, [r4, #2100]	; 0x834
   25c54:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   25c58:	e5845850 	str	r5, [r4, #2128]	; 0x850
   25c5c:	e5c45854 	strb	r5, [r4, #2132]	; 0x854
   25c60:	e2849e83 	add	r9, r4, #2096	; 0x830
   25c64:	eb000ff2 	bl	29c34 <strcpy>
   25c68:	e59f135c 	ldr	r1, [pc, #860]	; 25fcc <CKernelOptions::CKernelOptions()+0x3b4>
   25c6c:	e1a00009 	mov	r0, r9
   25c70:	eb000fef 	bl	29c34 <strcpy>
   25c74:	e59f3354 	ldr	r3, [pc, #852]	; 25fd0 <CKernelOptions::CKernelOptions()+0x3b8>
   25c78:	e1a01005 	mov	r1, r5
   25c7c:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
   25c80:	e28d0008 	add	r0, sp, #8
   25c84:	e5834000 	str	r4, [r3]
   25c88:	ebfff92e 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   25c8c:	e58d5000 	str	r5, [sp]
   25c90:	e1a02004 	mov	r2, r4
   25c94:	e28d0008 	add	r0, sp, #8
   25c98:	e59f3334 	ldr	r3, [pc, #820]	; 25fd4 <CKernelOptions::CKernelOptions()+0x3bc>
   25c9c:	e59f1334 	ldr	r1, [pc, #820]	; 25fd8 <CKernelOptions::CKernelOptions()+0x3c0>
   25ca0:	ebfff934 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   25ca4:	e1500005 	cmp	r0, r5
   25ca8:	0a000037 	beq	25d8c <CKernelOptions::CKernelOptions()+0x174>
   25cac:	e5943008 	ldr	r3, [r4, #8]
   25cb0:	e3530b02 	cmp	r3, #2048	; 0x800
   25cb4:	2a000034 	bcs	25d8c <CKernelOptions::CKernelOptions()+0x174>
   25cb8:	e0843003 	add	r3, r4, r3
   25cbc:	e284200c 	add	r2, r4, #12
   25cc0:	e59f8314 	ldr	r8, [pc, #788]	; 25fdc <CKernelOptions::CKernelOptions()+0x3c4>
   25cc4:	e59fa314 	ldr	sl, [pc, #788]	; 25fe0 <CKernelOptions::CKernelOptions()+0x3c8>
   25cc8:	e5c3500c 	strb	r5, [r3, #12]
   25ccc:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   25cd0:	e1a00004 	mov	r0, r4
   25cd4:	ebffffb0 	bl	25b9c <CKernelOptions::GetToken()>
   25cd8:	e2506000 	subs	r6, r0, #0
   25cdc:	0a00002a 	beq	25d8c <CKernelOptions::CKernelOptions()+0x174>
   25ce0:	e1d630d0 	ldrsb	r3, [r6]
   25ce4:	e3530000 	cmp	r3, #0
   25ce8:	0a000008 	beq	25d10 <CKernelOptions::CKernelOptions()+0xf8>
   25cec:	e353003d 	cmp	r3, #61	; 0x3d
   25cf0:	e1a05006 	mov	r5, r6
   25cf4:	1a000002 	bne	25d04 <CKernelOptions::CKernelOptions()+0xec>
   25cf8:	ea000028 	b	25da0 <CKernelOptions::CKernelOptions()+0x188>
   25cfc:	e353003d 	cmp	r3, #61	; 0x3d
   25d00:	0a000026 	beq	25da0 <CKernelOptions::CKernelOptions()+0x188>
   25d04:	e1f530d1 	ldrsb	r3, [r5, #1]!
   25d08:	e3530000 	cmp	r3, #0
   25d0c:	1afffffa 	bne	25cfc <CKernelOptions::CKernelOptions()+0xe4>
   25d10:	e1a01008 	mov	r1, r8
   25d14:	e1a00006 	mov	r0, r6
   25d18:	eb000f11 	bl	29964 <strcmp>
   25d1c:	e3500000 	cmp	r0, #0
   25d20:	0affffea 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25d24:	e1a0100a 	mov	r1, sl
   25d28:	e1a00006 	mov	r0, r6
   25d2c:	eb000f0c 	bl	29964 <strcmp>
   25d30:	e3500000 	cmp	r0, #0
   25d34:	13a0b000 	movne	fp, #0
   25d38:	0affffe4 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25d3c:	e59f12a0 	ldr	r1, [pc, #672]	; 25fe4 <CKernelOptions::CKernelOptions()+0x3cc>
   25d40:	e1a00006 	mov	r0, r6
   25d44:	eb000f06 	bl	29964 <strcmp>
   25d48:	e2505000 	subs	r5, r0, #0
   25d4c:	0a000027 	beq	25df0 <CKernelOptions::CKernelOptions()+0x1d8>
   25d50:	e59f1290 	ldr	r1, [pc, #656]	; 25fe8 <CKernelOptions::CKernelOptions()+0x3d0>
   25d54:	e1a00006 	mov	r0, r6
   25d58:	eb000f01 	bl	29964 <strcmp>
   25d5c:	e3500000 	cmp	r0, #0
   25d60:	1a000028 	bne	25e08 <CKernelOptions::CKernelOptions()+0x1f0>
   25d64:	e35b0000 	cmp	fp, #0
   25d68:	0affffd8 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25d6c:	e1db30d0 	ldrsb	r3, [fp]
   25d70:	e3530000 	cmp	r3, #0
   25d74:	0affffd5 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25d78:	e1a0000b 	mov	r0, fp
   25d7c:	ebffff4c 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25d80:	e3500004 	cmp	r0, #4
   25d84:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   25d88:	eaffffd0 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25d8c:	e28d0008 	add	r0, sp, #8
   25d90:	ebfff8f3 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   25d94:	e1a00004 	mov	r0, r4
   25d98:	e28dd014 	add	sp, sp, #20
   25d9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25da0:	e3a03000 	mov	r3, #0
   25da4:	e1a01008 	mov	r1, r8
   25da8:	e5c53000 	strb	r3, [r5]
   25dac:	e1a00006 	mov	r0, r6
   25db0:	eb000eeb 	bl	29964 <strcmp>
   25db4:	e3500000 	cmp	r0, #0
   25db8:	e285b001 	add	fp, r5, #1
   25dbc:	1a000044 	bne	25ed4 <CKernelOptions::CKernelOptions()+0x2bc>
   25dc0:	e35b0000 	cmp	fp, #0
   25dc4:	0affffc1 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25dc8:	e1d530d1 	ldrsb	r3, [r5, #1]
   25dcc:	e3530000 	cmp	r3, #0
   25dd0:	0affffbe 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25dd4:	e1a0000b 	mov	r0, fp
   25dd8:	ebffff35 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25ddc:	e59f3208 	ldr	r3, [pc, #520]	; 25fec <CKernelOptions::CKernelOptions()+0x3d4>
   25de0:	e2402d0a 	sub	r2, r0, #640	; 0x280
   25de4:	e1520003 	cmp	r2, r3
   25de8:	95840810 	strls	r0, [r4, #2064]	; 0x810
   25dec:	eaffffb7 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25df0:	e1a0100b 	mov	r1, fp
   25df4:	e3a02013 	mov	r2, #19
   25df8:	e1a00007 	mov	r0, r7
   25dfc:	eb000f97 	bl	29c60 <strncpy>
   25e00:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   25e04:	eaffffb1 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25e08:	e59f11e0 	ldr	r1, [pc, #480]	; 25ff0 <CKernelOptions::CKernelOptions()+0x3d8>
   25e0c:	e1a00006 	mov	r0, r6
   25e10:	eb000ed3 	bl	29964 <strcmp>
   25e14:	e2505000 	subs	r5, r0, #0
   25e18:	1a000005 	bne	25e34 <CKernelOptions::CKernelOptions()+0x21c>
   25e1c:	e1a0100b 	mov	r1, fp
   25e20:	e3a02002 	mov	r2, #2
   25e24:	e1a00009 	mov	r0, r9
   25e28:	eb000f8c 	bl	29c60 <strncpy>
   25e2c:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   25e30:	eaffffa6 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25e34:	e59f11b8 	ldr	r1, [pc, #440]	; 25ff4 <CKernelOptions::CKernelOptions()+0x3dc>
   25e38:	e1a00006 	mov	r0, r6
   25e3c:	eb000ec8 	bl	29964 <strcmp>
   25e40:	e3500000 	cmp	r0, #0
   25e44:	1a00000b 	bne	25e78 <CKernelOptions::CKernelOptions()+0x260>
   25e48:	e35b0000 	cmp	fp, #0
   25e4c:	0affff9f 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25e50:	e1db30d0 	ldrsb	r3, [fp]
   25e54:	e3530000 	cmp	r3, #0
   25e58:	0affff9c 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25e5c:	e1a0000b 	mov	r0, fp
   25e60:	ebffff13 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25e64:	e59f318c 	ldr	r3, [pc, #396]	; 25ff8 <CKernelOptions::CKernelOptions()+0x3e0>
   25e68:	e24020c8 	sub	r2, r0, #200	; 0xc8
   25e6c:	e1520003 	cmp	r2, r3
   25e70:	95840834 	strls	r0, [r4, #2100]	; 0x834
   25e74:	eaffff95 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25e78:	e59f117c 	ldr	r1, [pc, #380]	; 25ffc <CKernelOptions::CKernelOptions()+0x3e4>
   25e7c:	e1a00006 	mov	r0, r6
   25e80:	eb000eb7 	bl	29964 <strcmp>
   25e84:	e3500000 	cmp	r0, #0
   25e88:	1a000006 	bne	25ea8 <CKernelOptions::CKernelOptions()+0x290>
   25e8c:	e1a0000b 	mov	r0, fp
   25e90:	e59f1168 	ldr	r1, [pc, #360]	; 26000 <CKernelOptions::CKernelOptions()+0x3e8>
   25e94:	eb000eb2 	bl	29964 <strcmp>
   25e98:	e3500000 	cmp	r0, #0
   25e9c:	03a03001 	moveq	r3, #1
   25ea0:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
   25ea4:	eaffff89 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25ea8:	e59f1154 	ldr	r1, [pc, #340]	; 26004 <CKernelOptions::CKernelOptions()+0x3ec>
   25eac:	e1a00006 	mov	r0, r6
   25eb0:	eb000eab 	bl	29964 <strcmp>
   25eb4:	e2505000 	subs	r5, r0, #0
   25eb8:	1a000015 	bne	25f14 <CKernelOptions::CKernelOptions()+0x2fc>
   25ebc:	e1a0100b 	mov	r1, fp
   25ec0:	e3a02013 	mov	r2, #19
   25ec4:	e2890009 	add	r0, r9, #9
   25ec8:	eb000f64 	bl	29c60 <strncpy>
   25ecc:	e5c4584c 	strb	r5, [r4, #2124]	; 0x84c
   25ed0:	eaffff7e 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25ed4:	e1a0100a 	mov	r1, sl
   25ed8:	e1a00006 	mov	r0, r6
   25edc:	eb000ea0 	bl	29964 <strcmp>
   25ee0:	e3500000 	cmp	r0, #0
   25ee4:	1affff94 	bne	25d3c <CKernelOptions::CKernelOptions()+0x124>
   25ee8:	e35b0000 	cmp	fp, #0
   25eec:	0affff77 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25ef0:	e1d530d1 	ldrsb	r3, [r5, #1]
   25ef4:	e3530000 	cmp	r3, #0
   25ef8:	0affff74 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25efc:	e1a0000b 	mov	r0, fp
   25f00:	ebfffeeb 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25f04:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   25f08:	e3530f96 	cmp	r3, #600	; 0x258
   25f0c:	95840814 	strls	r0, [r4, #2068]	; 0x814
   25f10:	eaffff6e 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25f14:	e59f10ec 	ldr	r1, [pc, #236]	; 26008 <CKernelOptions::CKernelOptions()+0x3f0>
   25f18:	e1a00006 	mov	r0, r6
   25f1c:	eb000e90 	bl	29964 <strcmp>
   25f20:	e3500000 	cmp	r0, #0
   25f24:	1a000009 	bne	25f50 <CKernelOptions::CKernelOptions()+0x338>
   25f28:	e35b0000 	cmp	fp, #0
   25f2c:	0affff67 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25f30:	e1db30d0 	ldrsb	r3, [fp]
   25f34:	e3530000 	cmp	r3, #0
   25f38:	0affff64 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25f3c:	e1a0000b 	mov	r0, fp
   25f40:	ebfffedb 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25f44:	e3500002 	cmp	r0, #2
   25f48:	95840850 	strls	r0, [r4, #2128]	; 0x850
   25f4c:	eaffff5f 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25f50:	e59f10b4 	ldr	r1, [pc, #180]	; 2600c <CKernelOptions::CKernelOptions()+0x3f4>
   25f54:	e1a00006 	mov	r0, r6
   25f58:	eb000e81 	bl	29964 <strcmp>
   25f5c:	e3500000 	cmp	r0, #0
   25f60:	1a000006 	bne	25f80 <CKernelOptions::CKernelOptions()+0x368>
   25f64:	e1a0000b 	mov	r0, fp
   25f68:	e59f10a0 	ldr	r1, [pc, #160]	; 26010 <CKernelOptions::CKernelOptions()+0x3f8>
   25f6c:	eb000e7c 	bl	29964 <strcmp>
   25f70:	e3500000 	cmp	r0, #0
   25f74:	03a03001 	moveq	r3, #1
   25f78:	05c43854 	strbeq	r3, [r4, #2132]	; 0x854
   25f7c:	eaffff53 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25f80:	e1a00006 	mov	r0, r6
   25f84:	e59f1088 	ldr	r1, [pc, #136]	; 26014 <CKernelOptions::CKernelOptions()+0x3fc>
   25f88:	eb000e75 	bl	29964 <strcmp>
   25f8c:	e2903000 	adds	r3, r0, #0
   25f90:	13a03001 	movne	r3, #1
   25f94:	e35b0000 	cmp	fp, #0
   25f98:	03833001 	orreq	r3, r3, #1
   25f9c:	e3530000 	cmp	r3, #0
   25fa0:	1affff4a 	bne	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25fa4:	e1db30d0 	ldrsb	r3, [fp]
   25fa8:	e3530000 	cmp	r3, #0
   25fac:	0affff47 	beq	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25fb0:	e1a0000b 	mov	r0, fp
   25fb4:	ebfffebe 	bl	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25fb8:	e2403028 	sub	r3, r0, #40	; 0x28
   25fbc:	e3530026 	cmp	r3, #38	; 0x26
   25fc0:	95840858 	strls	r0, [r4, #2136]	; 0x858
   25fc4:	eaffff41 	b	25cd0 <CKernelOptions::CKernelOptions()+0xb8>
   25fc8:	00046b8c 	.word	0x00046b8c
   25fcc:	00044a6c 	.word	0x00044a6c
   25fd0:	00050160 	.word	0x00050160
   25fd4:	0000080c 	.word	0x0000080c
   25fd8:	00050001 	.word	0x00050001
   25fdc:	00046c10 	.word	0x00046c10
   25fe0:	00046b94 	.word	0x00046b94
   25fe4:	00046b9c 	.word	0x00046b9c
   25fe8:	00046ba4 	.word	0x00046ba4
   25fec:	0000053c 	.word	0x0000053c
   25ff0:	00046bb0 	.word	0x00046bb0
   25ff4:	00046bb8 	.word	0x00046bb8
   25ff8:	00001e78 	.word	0x00001e78
   25ffc:	00046bc8 	.word	0x00046bc8
   26000:	00046bd4 	.word	0x00046bd4
   26004:	00046bdc 	.word	0x00046bdc
   26008:	00046be8 	.word	0x00046be8
   2600c:	00046bf4 	.word	0x00046bf4
   26010:	00046bfc 	.word	0x00046bfc
   26014:	00046c04 	.word	0x00046c04

00026018 <CKernelOptions::GetOptionValue(char*)>:
   26018:	e1d030d0 	ldrsb	r3, [r0]
   2601c:	e3530000 	cmp	r3, #0
   26020:	1a000003 	bne	26034 <CKernelOptions::GetOptionValue(char*)+0x1c>
   26024:	ea000007 	b	26048 <CKernelOptions::GetOptionValue(char*)+0x30>
   26028:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2602c:	e3530000 	cmp	r3, #0
   26030:	0a000004 	beq	26048 <CKernelOptions::GetOptionValue(char*)+0x30>
   26034:	e353003d 	cmp	r3, #61	; 0x3d
   26038:	1afffffa 	bne	26028 <CKernelOptions::GetOptionValue(char*)+0x10>
   2603c:	e3a02000 	mov	r2, #0
   26040:	e2803001 	add	r3, r0, #1
   26044:	e5c02000 	strb	r2, [r0]
   26048:	e1a00003 	mov	r0, r3
   2604c:	e12fff1e 	bx	lr

00026050 <CKernelOptions::GetDecimal(char*)>:
   26050:	e2503000 	subs	r3, r0, #0
   26054:	0a000002 	beq	26064 <CKernelOptions::GetDecimal(char*)+0x14>
   26058:	e1d330d0 	ldrsb	r3, [r3]
   2605c:	e3530000 	cmp	r3, #0
   26060:	1a000001 	bne	2606c <CKernelOptions::GetDecimal(char*)+0x1c>
   26064:	e3e00000 	mvn	r0, #0
   26068:	e12fff1e 	bx	lr
   2606c:	eafffe90 	b	25ab4 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

00026070 <CLogger::CLogger(unsigned int, CTimer*)>:
   26070:	e92d4010 	push	{r4, lr}
   26074:	e3a03000 	mov	r3, #0
   26078:	e1a04000 	mov	r4, r0
   2607c:	e3a00001 	mov	r0, #1
   26080:	e884000e 	stm	r4, {r1, r2, r3}
   26084:	e584300c 	str	r3, [r4, #12]
   26088:	e5843010 	str	r3, [r4, #16]
   2608c:	e5843014 	str	r3, [r4, #20]
   26090:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   26094:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26098:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   2609c:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   260a0:	e5840018 	str	r0, [r4, #24]
   260a4:	e58400ec 	str	r0, [r4, #236]	; 0xec
   260a8:	e3a00901 	mov	r0, #16384	; 0x4000
   260ac:	eb001221 	bl	2a938 <operator new[](unsigned int)>
   260b0:	e59f300c 	ldr	r3, [pc, #12]	; 260c4 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   260b4:	e584000c 	str	r0, [r4, #12]
   260b8:	e5834000 	str	r4, [r3]
   260bc:	e1a00004 	mov	r0, r4
   260c0:	e8bd8010 	pop	{r4, pc}
   260c4:	00050164 	.word	0x00050164

000260c8 <CLogger::~CLogger()>:
   260c8:	e3a02000 	mov	r2, #0
   260cc:	e59f1064 	ldr	r1, [pc, #100]	; 26138 <CLogger::~CLogger()+0x70>
   260d0:	e92d4070 	push	{r4, r5, r6, lr}
   260d4:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   260d8:	e1a04000 	mov	r4, r0
   260dc:	e1a06002 	mov	r6, r2
   260e0:	e3a05f42 	mov	r5, #264	; 0x108
   260e4:	e5812000 	str	r2, [r1]
   260e8:	ea000008 	b	26110 <CLogger::~CLogger()+0x48>
   260ec:	e591001c 	ldr	r0, [r1, #28]
   260f0:	e1a01005 	mov	r1, r5
   260f4:	eb00121c 	bl	2a96c <operator delete(void*, unsigned int)>
   260f8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   260fc:	e2833001 	add	r3, r3, #1
   26100:	e3530032 	cmp	r3, #50	; 0x32
   26104:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26108:	03a03000 	moveq	r3, #0
   2610c:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   26110:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26114:	e0841103 	add	r1, r4, r3, lsl #2
   26118:	e1520003 	cmp	r2, r3
   2611c:	1afffff2 	bne	260ec <CLogger::~CLogger()+0x24>
   26120:	e594000c 	ldr	r0, [r4, #12]
   26124:	e3500000 	cmp	r0, #0
   26128:	0a000000 	beq	26130 <CLogger::~CLogger()+0x68>
   2612c:	eb001208 	bl	2a954 <operator delete[](void*)>
   26130:	e1a00004 	mov	r0, r4
   26134:	e8bd8070 	pop	{r4, r5, r6, pc}
   26138:	00050164 	.word	0x00050164

0002613c <CLogger::Initialize(CDevice*)>:
   2613c:	e92d4010 	push	{r4, lr}
   26140:	e5801008 	str	r1, [r0, #8]
   26144:	e24dd008 	sub	sp, sp, #8
   26148:	e1a04000 	mov	r4, r0
   2614c:	eb0003c9 	bl	27078 <CMachineInfo::Get()>
   26150:	eb0002dc 	bl	26cc8 <CMachineInfo::GetMachineName() const>
   26154:	e59f301c 	ldr	r3, [pc, #28]	; 26178 <CLogger::Initialize(CDevice*)+0x3c>
   26158:	e58d0000 	str	r0, [sp]
   2615c:	e283101c 	add	r1, r3, #28
   26160:	e1a00004 	mov	r0, r4
   26164:	e3a02003 	mov	r2, #3
   26168:	eb000005 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2616c:	e3a00001 	mov	r0, #1
   26170:	e28dd008 	add	sp, sp, #8
   26174:	e8bd8010 	pop	{r4, pc}
   26178:	00046c18 	.word	0x00046c18

0002617c <CLogger::SetNewTarget(CDevice*)>:
   2617c:	e5801008 	str	r1, [r0, #8]
   26180:	e12fff1e 	bx	lr

00026184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   26184:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   26188:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2618c:	e24dd010 	sub	sp, sp, #16
   26190:	e28dc018 	add	ip, sp, #24
   26194:	e58dc000 	str	ip, [sp]
   26198:	e59d3014 	ldr	r3, [sp, #20]
   2619c:	e58dc00c 	str	ip, [sp, #12]
   261a0:	eb000003 	bl	261b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   261a4:	e28dd010 	add	sp, sp, #16
   261a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   261ac:	e28dd004 	add	sp, sp, #4
   261b0:	e12fff1e 	bx	lr

000261b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   261b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   261b8:	e1a07003 	mov	r7, r3
   261bc:	e24dd024 	sub	sp, sp, #36	; 0x24
   261c0:	e1a04000 	mov	r4, r0
   261c4:	e1a0000d 	mov	r0, sp
   261c8:	e1a05002 	mov	r5, r2
   261cc:	e1a06001 	mov	r6, r1
   261d0:	eb000493 	bl	27424 <CString::CString()>
   261d4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   261d8:	e1a01007 	mov	r1, r7
   261dc:	e1a0000d 	mov	r0, sp
   261e0:	eb0006aa 	bl	27c90 <CString::FormatV(char const*, std::__va_list)>
   261e4:	e1a0000d 	mov	r0, sp
   261e8:	eb0004a3 	bl	2747c <CString::operator char const*() const>
   261ec:	e1a02005 	mov	r2, r5
   261f0:	e1a03000 	mov	r3, r0
   261f4:	e1a01006 	mov	r1, r6
   261f8:	e1a00004 	mov	r0, r4
   261fc:	eb000103 	bl	26610 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   26200:	e5943000 	ldr	r3, [r4]
   26204:	e1550003 	cmp	r5, r3
   26208:	8a00002c 	bhi	262c0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   2620c:	e28d0010 	add	r0, sp, #16
   26210:	eb000483 	bl	27424 <CString::CString()>
   26214:	e3550000 	cmp	r5, #0
   26218:	0a00002c 	beq	262d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   2621c:	e5940004 	ldr	r0, [r4, #4]
   26220:	e3500000 	cmp	r0, #0
   26224:	0a00004c 	beq	2635c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26228:	eb000b23 	bl	28ebc <CTimer::GetTimeString()>
   2622c:	e2507000 	subs	r7, r0, #0
   26230:	0a000049 	beq	2635c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26234:	e1a00007 	mov	r0, r7
   26238:	eb00048f 	bl	2747c <CString::operator char const*() const>
   2623c:	e1a01000 	mov	r1, r0
   26240:	e28d0010 	add	r0, sp, #16
   26244:	eb0004be 	bl	27544 <CString::Append(char const*)>
   26248:	e59f114c 	ldr	r1, [pc, #332]	; 2639c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   2624c:	e28d0010 	add	r0, sp, #16
   26250:	eb0004bb 	bl	27544 <CString::Append(char const*)>
   26254:	e5973000 	ldr	r3, [r7]
   26258:	e1a00007 	mov	r0, r7
   2625c:	e5933004 	ldr	r3, [r3, #4]
   26260:	e12fff33 	blx	r3
   26264:	e1a01006 	mov	r1, r6
   26268:	e28d0010 	add	r0, sp, #16
   2626c:	eb0004b4 	bl	27544 <CString::Append(char const*)>
   26270:	e59f1128 	ldr	r1, [pc, #296]	; 263a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   26274:	e28d0010 	add	r0, sp, #16
   26278:	eb0004b1 	bl	27544 <CString::Append(char const*)>
   2627c:	e1a0000d 	mov	r0, sp
   26280:	eb00047d 	bl	2747c <CString::operator char const*() const>
   26284:	e1a01000 	mov	r1, r0
   26288:	e28d0010 	add	r0, sp, #16
   2628c:	eb0004ac 	bl	27544 <CString::Append(char const*)>
   26290:	e3550000 	cmp	r5, #0
   26294:	0a00001e 	beq	26314 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   26298:	e59f1104 	ldr	r1, [pc, #260]	; 263a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   2629c:	e28d0010 	add	r0, sp, #16
   262a0:	eb0004a7 	bl	27544 <CString::Append(char const*)>
   262a4:	e28d0010 	add	r0, sp, #16
   262a8:	eb000473 	bl	2747c <CString::operator char const*() const>
   262ac:	e1a01000 	mov	r1, r0
   262b0:	e1a00004 	mov	r0, r4
   262b4:	eb000079 	bl	264a0 <CLogger::Write(char const*)>
   262b8:	e28d0010 	add	r0, sp, #16
   262bc:	eb000425 	bl	27358 <CString::~CString()>
   262c0:	e1a0000d 	mov	r0, sp
   262c4:	eb000423 	bl	27358 <CString::~CString()>
   262c8:	e28dd024 	add	sp, sp, #36	; 0x24
   262cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   262d0:	e59f10d0 	ldr	r1, [pc, #208]	; 263a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
   262d4:	e28d0010 	add	r0, sp, #16
   262d8:	eb00046d 	bl	27494 <CString::operator=(char const*)>
   262dc:	e5940004 	ldr	r0, [r4, #4]
   262e0:	e3500000 	cmp	r0, #0
   262e4:	1a000028 	bne	2638c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   262e8:	e1a01006 	mov	r1, r6
   262ec:	e28d0010 	add	r0, sp, #16
   262f0:	eb000493 	bl	27544 <CString::Append(char const*)>
   262f4:	e59f10a4 	ldr	r1, [pc, #164]	; 263a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   262f8:	e28d0010 	add	r0, sp, #16
   262fc:	eb000490 	bl	27544 <CString::Append(char const*)>
   26300:	e1a0000d 	mov	r0, sp
   26304:	eb00045c 	bl	2747c <CString::operator char const*() const>
   26308:	e1a01000 	mov	r1, r0
   2630c:	e28d0010 	add	r0, sp, #16
   26310:	eb00048b 	bl	27544 <CString::Append(char const*)>
   26314:	e59f1090 	ldr	r1, [pc, #144]	; 263ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
   26318:	e28d0010 	add	r0, sp, #16
   2631c:	eb000488 	bl	27544 <CString::Append(char const*)>
   26320:	e59f107c 	ldr	r1, [pc, #124]	; 263a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   26324:	e28d0010 	add	r0, sp, #16
   26328:	eb000485 	bl	27544 <CString::Append(char const*)>
   2632c:	e28d0010 	add	r0, sp, #16
   26330:	eb000451 	bl	2747c <CString::operator char const*() const>
   26334:	e1a01000 	mov	r1, r0
   26338:	e1a00004 	mov	r0, r4
   2633c:	eb000057 	bl	264a0 <CLogger::Write(char const*)>
   26340:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   26344:	e3530000 	cmp	r3, #0
   26348:	0a000000 	beq	26350 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   2634c:	e12fff33 	blx	r3
   26350:	e3a000ff 	mov	r0, #255	; 0xff
   26354:	eb000985 	bl	28970 <set_qemu_exit_status>
   26358:	eb000988 	bl	28980 <halt>
   2635c:	e1a01006 	mov	r1, r6
   26360:	e28d0010 	add	r0, sp, #16
   26364:	eb000476 	bl	27544 <CString::Append(char const*)>
   26368:	e59f1030 	ldr	r1, [pc, #48]	; 263a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   2636c:	e28d0010 	add	r0, sp, #16
   26370:	eb000473 	bl	27544 <CString::Append(char const*)>
   26374:	e1a0000d 	mov	r0, sp
   26378:	eb00043f 	bl	2747c <CString::operator char const*() const>
   2637c:	e1a01000 	mov	r1, r0
   26380:	e28d0010 	add	r0, sp, #16
   26384:	eb00046e 	bl	27544 <CString::Append(char const*)>
   26388:	eaffffc2 	b	26298 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   2638c:	eb000aca 	bl	28ebc <CTimer::GetTimeString()>
   26390:	e2507000 	subs	r7, r0, #0
   26394:	1affffa6 	bne	26234 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   26398:	eaffffd2 	b	262e8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   2639c:	00046c44 	.word	0x00046c44
   263a0:	00046c48 	.word	0x00046c48
   263a4:	00046c54 	.word	0x00046c54
   263a8:	00046c3c 	.word	0x00046c3c
   263ac:	00046c4c 	.word	0x00046c4c

000263b0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   263b0:	e590c000 	ldr	ip, [r0]
   263b4:	e152000c 	cmp	r2, ip
   263b8:	812fff1e 	bxhi	lr
   263bc:	e92d4070 	push	{r4, r5, r6, lr}
   263c0:	e1a05003 	mov	r5, r3
   263c4:	e3a03000 	mov	r3, #0
   263c8:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   263cc:	e1520003 	cmp	r2, r3
   263d0:	e1a04000 	mov	r4, r0
   263d4:	e5cd3000 	strb	r3, [sp]
   263d8:	0a00000f 	beq	2641c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   263dc:	e1a0000d 	mov	r0, sp
   263e0:	eb000e31 	bl	29cac <strcat>
   263e4:	e1a0000d 	mov	r0, sp
   263e8:	e59f1090 	ldr	r1, [pc, #144]	; 26480 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   263ec:	eb000e2e 	bl	29cac <strcat>
   263f0:	e1a01005 	mov	r1, r5
   263f4:	e1a0000d 	mov	r0, sp
   263f8:	eb000e2b 	bl	29cac <strcat>
   263fc:	e1a0000d 	mov	r0, sp
   26400:	e59f107c 	ldr	r1, [pc, #124]	; 26484 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26404:	eb000e28 	bl	29cac <strcat>
   26408:	e1a0100d 	mov	r1, sp
   2640c:	e1a00004 	mov	r0, r4
   26410:	eb000022 	bl	264a0 <CLogger::Write(char const*)>
   26414:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26418:	e8bd8070 	pop	{r4, r5, r6, pc}
   2641c:	e1a06001 	mov	r6, r1
   26420:	e1a0000d 	mov	r0, sp
   26424:	e59f105c 	ldr	r1, [pc, #92]	; 26488 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   26428:	eb000e01 	bl	29c34 <strcpy>
   2642c:	e1a01006 	mov	r1, r6
   26430:	e1a0000d 	mov	r0, sp
   26434:	eb000e1c 	bl	29cac <strcat>
   26438:	e59f1040 	ldr	r1, [pc, #64]	; 26480 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   2643c:	e1a0000d 	mov	r0, sp
   26440:	eb000e19 	bl	29cac <strcat>
   26444:	e1a01005 	mov	r1, r5
   26448:	e1a0000d 	mov	r0, sp
   2644c:	eb000e16 	bl	29cac <strcat>
   26450:	e59f1034 	ldr	r1, [pc, #52]	; 2648c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   26454:	e1a0000d 	mov	r0, sp
   26458:	eb000e13 	bl	29cac <strcat>
   2645c:	e59f1020 	ldr	r1, [pc, #32]	; 26484 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26460:	e1a0000d 	mov	r0, sp
   26464:	eb000e10 	bl	29cac <strcat>
   26468:	e1a0100d 	mov	r1, sp
   2646c:	e1a00004 	mov	r0, r4
   26470:	eb00000a 	bl	264a0 <CLogger::Write(char const*)>
   26474:	e3a000ff 	mov	r0, #255	; 0xff
   26478:	eb00093c 	bl	28970 <set_qemu_exit_status>
   2647c:	eb00093f 	bl	28980 <halt>
   26480:	00046c48 	.word	0x00046c48
   26484:	00046c54 	.word	0x00046c54
   26488:	00046c3c 	.word	0x00046c3c
   2648c:	00046c4c 	.word	0x00046c4c

00026490 <CLogger::Get()>:
   26490:	e59f3004 	ldr	r3, [pc, #4]	; 2649c <CLogger::Get()+0xc>
   26494:	e5930000 	ldr	r0, [r3]
   26498:	e12fff1e 	bx	lr
   2649c:	00050164 	.word	0x00050164

000264a0 <CLogger::Write(char const*)>:
   264a0:	e92d4070 	push	{r4, r5, r6, lr}
   264a4:	e1a04000 	mov	r4, r0
   264a8:	e1a00001 	mov	r0, r1
   264ac:	e1a05001 	mov	r5, r1
   264b0:	eb000d21 	bl	2993c <strlen>
   264b4:	e1a06000 	mov	r6, r0
   264b8:	e5940008 	ldr	r0, [r4, #8]
   264bc:	e1a02006 	mov	r2, r6
   264c0:	e5903000 	ldr	r3, [r0]
   264c4:	e1a01005 	mov	r1, r5
   264c8:	e593300c 	ldr	r3, [r3, #12]
   264cc:	e12fff33 	blx	r3
   264d0:	e5940018 	ldr	r0, [r4, #24]
   264d4:	e3500000 	cmp	r0, #0
   264d8:	1a000018 	bne	26540 <CLogger::Write(char const*)+0xa0>
   264dc:	e59f2064 	ldr	r2, [pc, #100]	; 26548 <CLogger::Write(char const*)+0xa8>
   264e0:	e0850006 	add	r0, r5, r6
   264e4:	e1550000 	cmp	r5, r0
   264e8:	0a00000f 	beq	2652c <CLogger::Write(char const*)+0x8c>
   264ec:	e0d510d1 	ldrsb	r1, [r5], #1
   264f0:	e351000d 	cmp	r1, #13
   264f4:	0afffffa 	beq	264e4 <CLogger::Write(char const*)+0x44>
   264f8:	e594c010 	ldr	ip, [r4, #16]
   264fc:	e594e00c 	ldr	lr, [r4, #12]
   26500:	e7ce100c 	strb	r1, [lr, ip]
   26504:	e5943010 	ldr	r3, [r4, #16]
   26508:	e5941014 	ldr	r1, [r4, #20]
   2650c:	e2833001 	add	r3, r3, #1
   26510:	e0033002 	and	r3, r3, r2
   26514:	e1530001 	cmp	r3, r1
   26518:	e5843010 	str	r3, [r4, #16]
   2651c:	1afffff0 	bne	264e4 <CLogger::Write(char const*)+0x44>
   26520:	e2433001 	sub	r3, r3, #1
   26524:	e0033002 	and	r3, r3, r2
   26528:	e5843010 	str	r3, [r4, #16]
   2652c:	e5943018 	ldr	r3, [r4, #24]
   26530:	e3530000 	cmp	r3, #0
   26534:	08bd8070 	popeq	{r4, r5, r6, pc}
   26538:	e8bd4070 	pop	{r4, r5, r6, lr}
   2653c:	ea001459 	b	2b6a8 <LeaveCritical>
   26540:	eb00142d 	bl	2b5fc <EnterCritical>
   26544:	eaffffe4 	b	264dc <CLogger::Write(char const*)+0x3c>
   26548:	00003fff 	.word	0x00003fff

0002654c <CLogger::Read(void*, unsigned int)>:
   2654c:	e92d4070 	push	{r4, r5, r6, lr}
   26550:	e1a04000 	mov	r4, r0
   26554:	e5900018 	ldr	r0, [r0, #24]
   26558:	e1a05001 	mov	r5, r1
   2655c:	e3500000 	cmp	r0, #0
   26560:	e1a06002 	mov	r6, r2
   26564:	1a00001c 	bne	265dc <CLogger::Read(void*, unsigned int)+0x90>
   26568:	e5942010 	ldr	r2, [r4, #16]
   2656c:	e5943014 	ldr	r3, [r4, #20]
   26570:	e1520003 	cmp	r2, r3
   26574:	0a000021 	beq	26600 <CLogger::Read(void*, unsigned int)+0xb4>
   26578:	e1a01005 	mov	r1, r5
   2657c:	e59f2088 	ldr	r2, [pc, #136]	; 2660c <CLogger::Read(void*, unsigned int)+0xc0>
   26580:	e3a05000 	mov	r5, #0
   26584:	ea00000a 	b	265b4 <CLogger::Read(void*, unsigned int)+0x68>
   26588:	e594000c 	ldr	r0, [r4, #12]
   2658c:	e2855001 	add	r5, r5, #1
   26590:	e19030d3 	ldrsb	r3, [r0, r3]
   26594:	e4c13001 	strb	r3, [r1], #1
   26598:	e5943014 	ldr	r3, [r4, #20]
   2659c:	e5940010 	ldr	r0, [r4, #16]
   265a0:	e2833001 	add	r3, r3, #1
   265a4:	e0033002 	and	r3, r3, r2
   265a8:	e1530000 	cmp	r3, r0
   265ac:	e5843014 	str	r3, [r4, #20]
   265b0:	0a000001 	beq	265bc <CLogger::Read(void*, unsigned int)+0x70>
   265b4:	e1550006 	cmp	r5, r6
   265b8:	1afffff2 	bne	26588 <CLogger::Read(void*, unsigned int)+0x3c>
   265bc:	e5943018 	ldr	r3, [r4, #24]
   265c0:	e3530000 	cmp	r3, #0
   265c4:	1a000001 	bne	265d0 <CLogger::Read(void*, unsigned int)+0x84>
   265c8:	e1a00005 	mov	r0, r5
   265cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   265d0:	eb001434 	bl	2b6a8 <LeaveCritical>
   265d4:	e1a00005 	mov	r0, r5
   265d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   265dc:	eb001406 	bl	2b5fc <EnterCritical>
   265e0:	e5942010 	ldr	r2, [r4, #16]
   265e4:	e5943014 	ldr	r3, [r4, #20]
   265e8:	e1520003 	cmp	r2, r3
   265ec:	1affffe1 	bne	26578 <CLogger::Read(void*, unsigned int)+0x2c>
   265f0:	e5943018 	ldr	r3, [r4, #24]
   265f4:	e3530000 	cmp	r3, #0
   265f8:	0a000000 	beq	26600 <CLogger::Read(void*, unsigned int)+0xb4>
   265fc:	eb001429 	bl	2b6a8 <LeaveCritical>
   26600:	e3e05000 	mvn	r5, #0
   26604:	e1a00005 	mov	r0, r5
   26608:	e8bd8070 	pop	{r4, r5, r6, pc}
   2660c:	00003fff 	.word	0x00003fff

00026610 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26610:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26614:	e1a05000 	mov	r5, r0
   26618:	e24dd00c 	sub	sp, sp, #12
   2661c:	e3a00f42 	mov	r0, #264	; 0x108
   26620:	e1a07003 	mov	r7, r3
   26624:	e1a09002 	mov	r9, r2
   26628:	e1a08001 	mov	r8, r1
   2662c:	eb0010c0 	bl	2a934 <operator new(unsigned int)>
   26630:	e3a06000 	mov	r6, #0
   26634:	e1a04000 	mov	r4, r0
   26638:	e1a01008 	mov	r1, r8
   2663c:	e3a02032 	mov	r2, #50	; 0x32
   26640:	e4c09001 	strb	r9, [r0], #1
   26644:	eb000d85 	bl	29c60 <strncpy>
   26648:	e1a01007 	mov	r1, r7
   2664c:	e2840033 	add	r0, r4, #51	; 0x33
   26650:	e3a020c8 	mov	r2, #200	; 0xc8
   26654:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   26658:	eb000d80 	bl	29c60 <strncpy>
   2665c:	e5950004 	ldr	r0, [r5, #4]
   26660:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   26664:	e1500006 	cmp	r0, r6
   26668:	0a000004 	beq	26680 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   2666c:	e28d2004 	add	r2, sp, #4
   26670:	e1a0100d 	mov	r1, sp
   26674:	eb0009a1 	bl	28d00 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26678:	e1500006 	cmp	r0, r6
   2667c:	1a000021 	bne	26708 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26680:	e3a03000 	mov	r3, #0
   26684:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26688:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   2668c:	e3500000 	cmp	r0, #0
   26690:	e5843100 	str	r3, [r4, #256]	; 0x100
   26694:	e5843104 	str	r3, [r4, #260]	; 0x104
   26698:	1a000027 	bne	2673c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   2669c:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   266a0:	e2823001 	add	r3, r2, #1
   266a4:	e3530032 	cmp	r3, #50	; 0x32
   266a8:	e0852102 	add	r2, r5, r2, lsl #2
   266ac:	e582401c 	str	r4, [r2, #28]
   266b0:	03a02000 	moveq	r2, #0
   266b4:	01a03002 	moveq	r3, r2
   266b8:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   266bc:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   266c0:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   266c4:	e1520003 	cmp	r2, r3
   266c8:	0a00001e 	beq	26748 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   266cc:	e3500000 	cmp	r0, #0
   266d0:	13a04000 	movne	r4, #0
   266d4:	0a000005 	beq	266f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   266d8:	eb0013f2 	bl	2b6a8 <LeaveCritical>
   266dc:	e3540000 	cmp	r4, #0
   266e0:	0a000002 	beq	266f0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   266e4:	e1a00004 	mov	r0, r4
   266e8:	e3a01f42 	mov	r1, #264	; 0x108
   266ec:	eb00109e 	bl	2a96c <operator delete(void*, unsigned int)>
   266f0:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   266f4:	e3530000 	cmp	r3, #0
   266f8:	0a000000 	beq	26700 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   266fc:	e12fff33 	blx	r3
   26700:	e28dd00c 	add	sp, sp, #12
   26704:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26708:	e59d3004 	ldr	r3, [sp, #4]
   2670c:	e59f105c 	ldr	r1, [pc, #92]	; 26770 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   26710:	e59d2000 	ldr	r2, [sp]
   26714:	e0831391 	umull	r1, r3, r1, r3
   26718:	e1a036a3 	lsr	r3, r3, #13
   2671c:	e5950004 	ldr	r0, [r5, #4]
   26720:	e5843100 	str	r3, [r4, #256]	; 0x100
   26724:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   26728:	eb000946 	bl	28c48 <CTimer::GetTimeZone() const>
   2672c:	e5840104 	str	r0, [r4, #260]	; 0x104
   26730:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26734:	e3500000 	cmp	r0, #0
   26738:	0affffd7 	beq	2669c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   2673c:	eb0013ae 	bl	2b5fc <EnterCritical>
   26740:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26744:	eaffffd4 	b	2669c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26748:	e2832001 	add	r2, r3, #1
   2674c:	e3520032 	cmp	r2, #50	; 0x32
   26750:	e0853103 	add	r3, r5, r3, lsl #2
   26754:	e593401c 	ldr	r4, [r3, #28]
   26758:	03a03000 	moveq	r3, #0
   2675c:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   26760:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   26764:	e3500000 	cmp	r0, #0
   26768:	0affffdb 	beq	266dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   2676c:	eaffffd9 	b	266d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   26770:	d1b71759 	.word	0xd1b71759

00026774 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26774:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26778:	e1a04000 	mov	r4, r0
   2677c:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26780:	e1a07001 	mov	r7, r1
   26784:	e3500000 	cmp	r0, #0
   26788:	e1a08002 	mov	r8, r2
   2678c:	e1a06003 	mov	r6, r3
   26790:	1a000022 	bne	26820 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26794:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26798:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   2679c:	e1530002 	cmp	r3, r2
   267a0:	0a000028 	beq	26848 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   267a4:	e283c001 	add	ip, r3, #1
   267a8:	e35c0032 	cmp	ip, #50	; 0x32
   267ac:	e0843103 	add	r3, r4, r3, lsl #2
   267b0:	e593501c 	ldr	r5, [r3, #28]
   267b4:	03a03000 	moveq	r3, #0
   267b8:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   267bc:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   267c0:	e3500000 	cmp	r0, #0
   267c4:	1a000021 	bne	26850 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   267c8:	e1a01005 	mov	r1, r5
   267cc:	e4d12001 	ldrb	r2, [r1], #1
   267d0:	e1a00008 	mov	r0, r8
   267d4:	e5c72000 	strb	r2, [r7]
   267d8:	eb000d15 	bl	29c34 <strcpy>
   267dc:	e2851033 	add	r1, r5, #51	; 0x33
   267e0:	e1a00006 	mov	r0, r6
   267e4:	eb000d12 	bl	29c34 <strcpy>
   267e8:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   267ec:	e59d1018 	ldr	r1, [sp, #24]
   267f0:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   267f4:	e5812000 	str	r2, [r1]
   267f8:	e59d201c 	ldr	r2, [sp, #28]
   267fc:	e1a00005 	mov	r0, r5
   26800:	e5823000 	str	r3, [r2]
   26804:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26808:	e59d2020 	ldr	r2, [sp, #32]
   2680c:	e3a01f42 	mov	r1, #264	; 0x108
   26810:	e5823000 	str	r3, [r2]
   26814:	eb001054 	bl	2a96c <operator delete(void*, unsigned int)>
   26818:	e3a00001 	mov	r0, #1
   2681c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26820:	eb001375 	bl	2b5fc <EnterCritical>
   26824:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26828:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   2682c:	e1520003 	cmp	r2, r3
   26830:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26834:	1affffda 	bne	267a4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26838:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   2683c:	e3530000 	cmp	r3, #0
   26840:	0a000000 	beq	26848 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26844:	eb001397 	bl	2b6a8 <LeaveCritical>
   26848:	e3a00000 	mov	r0, #0
   2684c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26850:	eb001394 	bl	2b6a8 <LeaveCritical>
   26854:	eaffffdb 	b	267c8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026858 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26858:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   2685c:	e12fff1e 	bx	lr

00026860 <CLogger::RegisterPanicHandler(void (*)())>:
   26860:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26864:	e12fff1e 	bx	lr

00026868 <CMachineInfo::CMachineInfo()>:
   26868:	e92d4810 	push	{r4, fp, lr}
   2686c:	e28db008 	add	fp, sp, #8
   26870:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26874:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26878:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2687c:	e3a02000 	mov	r2, #0
   26880:	e5832000 	str	r2, [r3]
   26884:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26888:	e3a02010 	mov	r2, #16
   2688c:	e5c32004 	strb	r2, [r3, #4]
   26890:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26894:	e3a02000 	mov	r2, #0
   26898:	e5832008 	str	r2, [r3, #8]
   2689c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   268a0:	e3a02000 	mov	r2, #0
   268a4:	e583200c 	str	r2, [r3, #12]
   268a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   268ac:	e3a02004 	mov	r2, #4
   268b0:	e5c32010 	strb	r2, [r3, #16]
   268b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   268b8:	e3a02000 	mov	r2, #0
   268bc:	e5832014 	str	r2, [r3, #20]
   268c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   268c4:	e59f23b8 	ldr	r2, [pc, #952]	; 26c84 <CMachineInfo::CMachineInfo()+0x41c>
   268c8:	e1c321b8 	strh	r2, [r3, #24]
   268cc:	e59f33b4 	ldr	r3, [pc, #948]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   268d0:	e5933000 	ldr	r3, [r3]
   268d4:	e3530000 	cmp	r3, #0
   268d8:	0a00001e 	beq	26958 <CMachineInfo::CMachineInfo()+0xf0>
   268dc:	e59f33a4 	ldr	r3, [pc, #932]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   268e0:	e5933000 	ldr	r3, [r3]
   268e4:	e5932000 	ldr	r2, [r3]
   268e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   268ec:	e5832000 	str	r2, [r3]
   268f0:	e59f3390 	ldr	r3, [pc, #912]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   268f4:	e5933000 	ldr	r3, [r3]
   268f8:	e5d32004 	ldrb	r2, [r3, #4]
   268fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26900:	e5c32004 	strb	r2, [r3, #4]
   26904:	e59f337c 	ldr	r3, [pc, #892]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   26908:	e5933000 	ldr	r3, [r3]
   2690c:	e5932008 	ldr	r2, [r3, #8]
   26910:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26914:	e5832008 	str	r2, [r3, #8]
   26918:	e59f3368 	ldr	r3, [pc, #872]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   2691c:	e5933000 	ldr	r3, [r3]
   26920:	e593200c 	ldr	r2, [r3, #12]
   26924:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26928:	e583200c 	str	r2, [r3, #12]
   2692c:	e59f3354 	ldr	r3, [pc, #852]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   26930:	e5933000 	ldr	r3, [r3]
   26934:	e5d32010 	ldrb	r2, [r3, #16]
   26938:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2693c:	e5c32010 	strb	r2, [r3, #16]
   26940:	e59f3340 	ldr	r3, [pc, #832]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   26944:	e5933000 	ldr	r3, [r3]
   26948:	e5932014 	ldr	r2, [r3, #20]
   2694c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26950:	e5832014 	str	r2, [r3, #20]
   26954:	ea0000c6 	b	26c74 <CMachineInfo::CMachineInfo()+0x40c>
   26958:	e59f2328 	ldr	r2, [pc, #808]	; 26c88 <CMachineInfo::CMachineInfo()+0x420>
   2695c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26960:	e5823000 	str	r3, [r2]
   26964:	e24b3020 	sub	r3, fp, #32
   26968:	e3a01001 	mov	r1, #1
   2696c:	e1a00003 	mov	r0, r3
   26970:	ebfff5f4 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26974:	e24b2030 	sub	r2, fp, #48	; 0x30
   26978:	e24b0020 	sub	r0, fp, #32
   2697c:	e3a03000 	mov	r3, #0
   26980:	e58d3000 	str	r3, [sp]
   26984:	e3a03010 	mov	r3, #16
   26988:	e59f12fc 	ldr	r1, [pc, #764]	; 26c8c <CMachineInfo::CMachineInfo()+0x424>
   2698c:	ebfff5f9 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26990:	e1a03000 	mov	r3, r0
   26994:	e3530000 	cmp	r3, #0
   26998:	0a000003 	beq	269ac <CMachineInfo::CMachineInfo()+0x144>
   2699c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   269a0:	e6ff2073 	uxth	r2, r3
   269a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269a8:	e1c321b8 	strh	r2, [r3, #24]
   269ac:	e24b2040 	sub	r2, fp, #64	; 0x40
   269b0:	e24b0020 	sub	r0, fp, #32
   269b4:	e3a03000 	mov	r3, #0
   269b8:	e58d3000 	str	r3, [sp]
   269bc:	e3a03010 	mov	r3, #16
   269c0:	e59f12c8 	ldr	r1, [pc, #712]	; 26c90 <CMachineInfo::CMachineInfo()+0x428>
   269c4:	ebfff5eb 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   269c8:	e1a03000 	mov	r3, r0
   269cc:	e2233001 	eor	r3, r3, #1
   269d0:	e6ef3073 	uxtb	r3, r3
   269d4:	e3530000 	cmp	r3, #0
   269d8:	0a000001 	beq	269e4 <CMachineInfo::CMachineInfo()+0x17c>
   269dc:	e3a04000 	mov	r4, #0
   269e0:	ea00009e 	b	26c60 <CMachineInfo::CMachineInfo()+0x3f8>
   269e4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   269e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269ec:	e5832000 	str	r2, [r3]
   269f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269f4:	e5933000 	ldr	r3, [r3]
   269f8:	e2033502 	and	r3, r3, #8388608	; 0x800000
   269fc:	e3530000 	cmp	r3, #0
   26a00:	0a000064 	beq	26b98 <CMachineInfo::CMachineInfo()+0x330>
   26a04:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a08:	e5933000 	ldr	r3, [r3]
   26a0c:	e1a03223 	lsr	r3, r3, #4
   26a10:	e6ef3073 	uxtb	r3, r3
   26a14:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   26a18:	e3a03000 	mov	r3, #0
   26a1c:	e50b3010 	str	r3, [fp, #-16]
   26a20:	e51b3010 	ldr	r3, [fp, #-16]
   26a24:	e353000d 	cmp	r3, #13
   26a28:	8a00000f 	bhi	26a6c <CMachineInfo::CMachineInfo()+0x204>
   26a2c:	e59f1260 	ldr	r1, [pc, #608]	; 26c94 <CMachineInfo::CMachineInfo()+0x42c>
   26a30:	e51b2010 	ldr	r2, [fp, #-16]
   26a34:	e1a03002 	mov	r3, r2
   26a38:	e1a03083 	lsl	r3, r3, #1
   26a3c:	e0833002 	add	r3, r3, r2
   26a40:	e1a03103 	lsl	r3, r3, #2
   26a44:	e0813003 	add	r3, r1, r3
   26a48:	e5932000 	ldr	r2, [r3]
   26a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26a50:	e1520003 	cmp	r2, r3
   26a54:	0a000003 	beq	26a68 <CMachineInfo::CMachineInfo()+0x200>
   26a58:	e51b3010 	ldr	r3, [fp, #-16]
   26a5c:	e2833001 	add	r3, r3, #1
   26a60:	e50b3010 	str	r3, [fp, #-16]
   26a64:	eaffffed 	b	26a20 <CMachineInfo::CMachineInfo()+0x1b8>
   26a68:	e320f000 	nop	{0}
   26a6c:	e51b3010 	ldr	r3, [fp, #-16]
   26a70:	e353000d 	cmp	r3, #13
   26a74:	9a000001 	bls	26a80 <CMachineInfo::CMachineInfo()+0x218>
   26a78:	e3a04000 	mov	r4, #0
   26a7c:	ea000077 	b	26c60 <CMachineInfo::CMachineInfo()+0x3f8>
   26a80:	e59f120c 	ldr	r1, [pc, #524]	; 26c94 <CMachineInfo::CMachineInfo()+0x42c>
   26a84:	e51b2010 	ldr	r2, [fp, #-16]
   26a88:	e1a03002 	mov	r3, r2
   26a8c:	e1a03083 	lsl	r3, r3, #1
   26a90:	e0833002 	add	r3, r3, r2
   26a94:	e1a03103 	lsl	r3, r3, #2
   26a98:	e0813003 	add	r3, r1, r3
   26a9c:	e2833004 	add	r3, r3, #4
   26aa0:	e5d32000 	ldrb	r2, [r3]
   26aa4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26aa8:	e5c32004 	strb	r2, [r3, #4]
   26aac:	e59f11e0 	ldr	r1, [pc, #480]	; 26c94 <CMachineInfo::CMachineInfo()+0x42c>
   26ab0:	e51b2010 	ldr	r2, [fp, #-16]
   26ab4:	e1a03002 	mov	r3, r2
   26ab8:	e1a03083 	lsl	r3, r3, #1
   26abc:	e0833002 	add	r3, r3, r2
   26ac0:	e1a03103 	lsl	r3, r3, #2
   26ac4:	e0813003 	add	r3, r1, r3
   26ac8:	e2833008 	add	r3, r3, #8
   26acc:	e5932000 	ldr	r2, [r3]
   26ad0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ad4:	e5832008 	str	r2, [r3, #8]
   26ad8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26adc:	e5933000 	ldr	r3, [r3]
   26ae0:	e203300f 	and	r3, r3, #15
   26ae4:	e2832001 	add	r2, r3, #1
   26ae8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26aec:	e583200c 	str	r2, [r3, #12]
   26af0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26af4:	e5933000 	ldr	r3, [r3]
   26af8:	e1a03623 	lsr	r3, r3, #12
   26afc:	e6ef3073 	uxtb	r3, r3
   26b00:	e203300f 	and	r3, r3, #15
   26b04:	e6ef2073 	uxtb	r2, r3
   26b08:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b0c:	e5c32010 	strb	r2, [r3, #16]
   26b10:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b14:	e5933000 	ldr	r3, [r3]
   26b18:	e1a03a23 	lsr	r3, r3, #20
   26b1c:	e2033007 	and	r3, r3, #7
   26b20:	e3a02c01 	mov	r2, #256	; 0x100
   26b24:	e1a03312 	lsl	r3, r2, r3
   26b28:	e1a02003 	mov	r2, r3
   26b2c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b30:	e5832014 	str	r2, [r3, #20]
   26b34:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b38:	e5d33010 	ldrb	r3, [r3, #16]
   26b3c:	e3530003 	cmp	r3, #3
   26b40:	da000002 	ble	26b50 <CMachineInfo::CMachineInfo()+0x2e8>
   26b44:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b48:	e3a02004 	mov	r2, #4
   26b4c:	e5c32010 	strb	r2, [r3, #16]
   26b50:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b54:	e5d33004 	ldrb	r3, [r3, #4]
   26b58:	e3530003 	cmp	r3, #3
   26b5c:	1a00003e 	bne	26c5c <CMachineInfo::CMachineInfo()+0x3f4>
   26b60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b64:	e5933014 	ldr	r3, [r3, #20]
   26b68:	e3530c01 	cmp	r3, #256	; 0x100
   26b6c:	1a00003a 	bne	26c5c <CMachineInfo::CMachineInfo()+0x3f4>
   26b70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b74:	e593300c 	ldr	r3, [r3, #12]
   26b78:	e3530001 	cmp	r3, #1
   26b7c:	1a000001 	bne	26b88 <CMachineInfo::CMachineInfo()+0x320>
   26b80:	e3a02001 	mov	r2, #1
   26b84:	ea000000 	b	26b8c <CMachineInfo::CMachineInfo()+0x324>
   26b88:	e3a02002 	mov	r2, #2
   26b8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b90:	e5c32004 	strb	r2, [r3, #4]
   26b94:	ea000030 	b	26c5c <CMachineInfo::CMachineInfo()+0x3f4>
   26b98:	e3a03000 	mov	r3, #0
   26b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26ba4:	e3530010 	cmp	r3, #16
   26ba8:	8a00000b 	bhi	26bdc <CMachineInfo::CMachineInfo()+0x374>
   26bac:	e59f20e4 	ldr	r2, [pc, #228]	; 26c98 <CMachineInfo::CMachineInfo()+0x430>
   26bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bb4:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   26bb8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26bbc:	e5933000 	ldr	r3, [r3]
   26bc0:	e1520003 	cmp	r2, r3
   26bc4:	0a000003 	beq	26bd8 <CMachineInfo::CMachineInfo()+0x370>
   26bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bcc:	e2833001 	add	r3, r3, #1
   26bd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26bd4:	eafffff1 	b	26ba0 <CMachineInfo::CMachineInfo()+0x338>
   26bd8:	e320f000 	nop	{0}
   26bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26be0:	e3530010 	cmp	r3, #16
   26be4:	9a000001 	bls	26bf0 <CMachineInfo::CMachineInfo()+0x388>
   26be8:	e3a04000 	mov	r4, #0
   26bec:	ea00001b 	b	26c60 <CMachineInfo::CMachineInfo()+0x3f8>
   26bf0:	e59f20a0 	ldr	r2, [pc, #160]	; 26c98 <CMachineInfo::CMachineInfo()+0x430>
   26bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26bf8:	e1a03203 	lsl	r3, r3, #4
   26bfc:	e0823003 	add	r3, r2, r3
   26c00:	e5d32004 	ldrb	r2, [r3, #4]
   26c04:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c08:	e5c32004 	strb	r2, [r3, #4]
   26c0c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c10:	e3a02001 	mov	r2, #1
   26c14:	e5832008 	str	r2, [r3, #8]
   26c18:	e59f2078 	ldr	r2, [pc, #120]	; 26c98 <CMachineInfo::CMachineInfo()+0x430>
   26c1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c20:	e1a03203 	lsl	r3, r3, #4
   26c24:	e0823003 	add	r3, r2, r3
   26c28:	e5932008 	ldr	r2, [r3, #8]
   26c2c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c30:	e583200c 	str	r2, [r3, #12]
   26c34:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c38:	e3a02000 	mov	r2, #0
   26c3c:	e5c32010 	strb	r2, [r3, #16]
   26c40:	e59f2050 	ldr	r2, [pc, #80]	; 26c98 <CMachineInfo::CMachineInfo()+0x430>
   26c44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c48:	e1a03203 	lsl	r3, r3, #4
   26c4c:	e0823003 	add	r3, r2, r3
   26c50:	e593200c 	ldr	r2, [r3, #12]
   26c54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c58:	e5832014 	str	r2, [r3, #20]
   26c5c:	e3a04001 	mov	r4, #1
   26c60:	e24b3020 	sub	r3, fp, #32
   26c64:	e1a00003 	mov	r0, r3
   26c68:	ebfff53d 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   26c6c:	e3540001 	cmp	r4, #1
   26c70:	e320f000 	nop	{0}
   26c74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c78:	e1a00003 	mov	r0, r3
   26c7c:	e24bd008 	sub	sp, fp, #8
   26c80:	e8bd8810 	pop	{r4, fp, pc}
   26c84:	00001f35 	.word	0x00001f35
   26c88:	00050168 	.word	0x00050168
   26c8c:	00060001 	.word	0x00060001
   26c90:	00010002 	.word	0x00010002
   26c94:	00049bb4 	.word	0x00049bb4
   26c98:	00049aa4 	.word	0x00049aa4

00026c9c <CMachineInfo::~CMachineInfo()>:
   26c9c:	e3a02010 	mov	r2, #16
   26ca0:	e59f3014 	ldr	r3, [pc, #20]	; 26cbc <CMachineInfo::~CMachineInfo()+0x20>
   26ca4:	e5c02004 	strb	r2, [r0, #4]
   26ca8:	e5932000 	ldr	r2, [r3]
   26cac:	e1500002 	cmp	r0, r2
   26cb0:	03a02000 	moveq	r2, #0
   26cb4:	05832000 	streq	r2, [r3]
   26cb8:	e12fff1e 	bx	lr
   26cbc:	00050168 	.word	0x00050168

00026cc0 <CMachineInfo::GetMachineModel() const>:
   26cc0:	e5d00004 	ldrb	r0, [r0, #4]
   26cc4:	e12fff1e 	bx	lr

00026cc8 <CMachineInfo::GetMachineName() const>:
   26cc8:	e5d02004 	ldrb	r2, [r0, #4]
   26ccc:	e59f3008 	ldr	r3, [pc, #8]	; 26cdc <CMachineInfo::GetMachineName() const+0x14>
   26cd0:	e0833102 	add	r3, r3, r2, lsl #2
   26cd4:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   26cd8:	e12fff1e 	bx	lr
   26cdc:	00049aa4 	.word	0x00049aa4

00026ce0 <CMachineInfo::GetModelMajor() const>:
   26ce0:	e5900008 	ldr	r0, [r0, #8]
   26ce4:	e12fff1e 	bx	lr

00026ce8 <CMachineInfo::GetModelRevision() const>:
   26ce8:	e590000c 	ldr	r0, [r0, #12]
   26cec:	e12fff1e 	bx	lr

00026cf0 <CMachineInfo::GetSoCType() const>:
   26cf0:	e5d00010 	ldrb	r0, [r0, #16]
   26cf4:	e12fff1e 	bx	lr

00026cf8 <CMachineInfo::GetRAMSize() const>:
   26cf8:	e5900014 	ldr	r0, [r0, #20]
   26cfc:	e12fff1e 	bx	lr

00026d00 <CMachineInfo::GetSoCName() const>:
   26d00:	e5d02010 	ldrb	r2, [r0, #16]
   26d04:	e59f3008 	ldr	r3, [pc, #8]	; 26d14 <CMachineInfo::GetSoCName() const+0x14>
   26d08:	e0833102 	add	r3, r3, r2, lsl #2
   26d0c:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   26d10:	e12fff1e 	bx	lr
   26d14:	00049aa4 	.word	0x00049aa4

00026d18 <CMachineInfo::GetRevisionRaw() const>:
   26d18:	e5900000 	ldr	r0, [r0]
   26d1c:	e12fff1e 	bx	lr

00026d20 <CMachineInfo::GetActLEDInfo() const>:
   26d20:	e5d02004 	ldrb	r2, [r0, #4]
   26d24:	e59f3008 	ldr	r3, [pc, #8]	; 26d34 <CMachineInfo::GetActLEDInfo() const+0x14>
   26d28:	e0833102 	add	r3, r3, r2, lsl #2
   26d2c:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   26d30:	e12fff1e 	bx	lr
   26d34:	00049aa4 	.word	0x00049aa4

00026d38 <CMachineInfo::GetClockRate(unsigned int) const>:
   26d38:	e92d4030 	push	{r4, r5, lr}
   26d3c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   26d40:	e1a04001 	mov	r4, r1
   26d44:	e1a05000 	mov	r5, r0
   26d48:	e3a01000 	mov	r1, #0
   26d4c:	e28d000c 	add	r0, sp, #12
   26d50:	ebfff4fc 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26d54:	e3a03004 	mov	r3, #4
   26d58:	e58d3000 	str	r3, [sp]
   26d5c:	e3a03014 	mov	r3, #20
   26d60:	e28d000c 	add	r0, sp, #12
   26d64:	e08d2003 	add	r2, sp, r3
   26d68:	e59f1074 	ldr	r1, [pc, #116]	; 26de4 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   26d6c:	e58d4020 	str	r4, [sp, #32]
   26d70:	ebfff500 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26d74:	e3500000 	cmp	r0, #0
   26d78:	1a000009 	bne	26da4 <CMachineInfo::GetClockRate(unsigned int) const+0x6c>
   26d7c:	e3540002 	cmp	r4, #2
   26d80:	0a00000d 	beq	26dbc <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   26d84:	e3540004 	cmp	r4, #4
   26d88:	0a00000f 	beq	26dcc <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   26d8c:	e3540001 	cmp	r4, #1
   26d90:	0a00000b 	beq	26dc4 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   26d94:	e59f104c 	ldr	r1, [pc, #76]	; 26de8 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   26d98:	e59f204c 	ldr	r2, [pc, #76]	; 26dec <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   26d9c:	e2810010 	add	r0, r1, #16
   26da0:	ebfff4c7 	bl	240c4 <assertion_failed>
   26da4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   26da8:	e28d000c 	add	r0, sp, #12
   26dac:	ebfff4ec 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   26db0:	e1a00004 	mov	r0, r4
   26db4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   26db8:	e8bd8030 	pop	{r4, r5, pc}
   26dbc:	e59f402c 	ldr	r4, [pc, #44]	; 26df0 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   26dc0:	eafffff8 	b	26da8 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   26dc4:	e59f4028 	ldr	r4, [pc, #40]	; 26df4 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   26dc8:	eafffff6 	b	26da8 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   26dcc:	e5952008 	ldr	r2, [r5, #8]
   26dd0:	e59f3020 	ldr	r3, [pc, #32]	; 26df8 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   26dd4:	e3520002 	cmp	r2, #2
   26dd8:	e59f401c 	ldr	r4, [pc, #28]	; 26dfc <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   26ddc:	81a04003 	movhi	r4, r3
   26de0:	eafffff0 	b	26da8 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   26de4:	00030002 	.word	0x00030002
   26de8:	00046dd0 	.word	0x00046dd0
   26dec:	00000141 	.word	0x00000141
   26df0:	02dc6c00 	.word	0x02dc6c00
   26df4:	05f5e100 	.word	0x05f5e100
   26df8:	11e1a300 	.word	0x11e1a300
   26dfc:	0ee6b280 	.word	0x0ee6b280

00026e00 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   26e00:	e3510036 	cmp	r1, #54	; 0x36
   26e04:	0a00000b 	beq	26e38 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x38>
   26e08:	e3510037 	cmp	r1, #55	; 0x37
   26e0c:	1a000004 	bne	26e24 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   26e10:	e5d00004 	ldrb	r0, [r0, #4]
   26e14:	e3500003 	cmp	r0, #3
   26e18:	c3a00028 	movgt	r0, #40	; 0x28
   26e1c:	d3a0002d 	movle	r0, #45	; 0x2d
   26e20:	e12fff1e 	bx	lr
   26e24:	e59f1030 	ldr	r1, [pc, #48]	; 26e5c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   26e28:	e92d4010 	push	{r4, lr}
   26e2c:	e59f202c 	ldr	r2, [pc, #44]	; 26e60 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   26e30:	e2810010 	add	r0, r1, #16
   26e34:	ebfff4a2 	bl	240c4 <assertion_failed>
   26e38:	e5d03004 	ldrb	r3, [r0, #4]
   26e3c:	e3530003 	cmp	r3, #3
   26e40:	d3a00028 	movle	r0, #40	; 0x28
   26e44:	dafffff5 	ble	26e20 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x20>
   26e48:	e5900008 	ldr	r0, [r0, #8]
   26e4c:	e3500002 	cmp	r0, #2
   26e50:	93a0002d 	movls	r0, #45	; 0x2d
   26e54:	83a00029 	movhi	r0, #41	; 0x29
   26e58:	e12fff1e 	bx	lr
   26e5c:	00046dd0 	.word	0x00046dd0
   26e60:	0000017a 	.word	0x0000017a

00026e64 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   26e64:	e5903008 	ldr	r3, [r0, #8]
   26e68:	e3530003 	cmp	r3, #3
   26e6c:	8a000005 	bhi	26e88 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   26e70:	e3510001 	cmp	r1, #1
   26e74:	0a00000b 	beq	26ea8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   26e78:	e3510006 	cmp	r1, #6
   26e7c:	e59f002c 	ldr	r0, [pc, #44]	; 26eb0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   26e80:	13a00000 	movne	r0, #0
   26e84:	e12fff1e 	bx	lr
   26e88:	e3510001 	cmp	r1, #1
   26e8c:	0a000003 	beq	26ea0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   26e90:	e3510006 	cmp	r1, #6
   26e94:	e59f0018 	ldr	r0, [pc, #24]	; 26eb4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   26e98:	13a00000 	movne	r0, #0
   26e9c:	e12fff1e 	bx	lr
   26ea0:	e59f0010 	ldr	r0, [pc, #16]	; 26eb8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   26ea4:	e12fff1e 	bx	lr
   26ea8:	e59f000c 	ldr	r0, [pc, #12]	; 26ebc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   26eac:	e12fff1e 	bx	lr
   26eb0:	1dcd6500 	.word	0x1dcd6500
   26eb4:	2cb41780 	.word	0x2cb41780
   26eb8:	0337f980 	.word	0x0337f980
   26ebc:	0124f800 	.word	0x0124f800

00026ec0 <CMachineInfo::GetDevice(TDeviceId) const>:
   26ec0:	e3510000 	cmp	r1, #0
   26ec4:	1a000003 	bne	26ed8 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   26ec8:	e5d00004 	ldrb	r0, [r0, #4]
   26ecc:	e2500001 	subs	r0, r0, #1
   26ed0:	13a00001 	movne	r0, #1
   26ed4:	e12fff1e 	bx	lr
   26ed8:	e59f100c 	ldr	r1, [pc, #12]	; 26eec <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   26edc:	e92d4010 	push	{r4, lr}
   26ee0:	e59f2008 	ldr	r2, [pc, #8]	; 26ef0 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   26ee4:	e2810010 	add	r0, r1, #16
   26ee8:	ebfff475 	bl	240c4 <assertion_failed>
   26eec:	00046dd0 	.word	0x00046dd0
   26ef0:	000001b5 	.word	0x000001b5

00026ef4 <CMachineInfo::ArePWMChannelsSwapped() const>:
   26ef4:	e5d03004 	ldrb	r3, [r0, #4]
   26ef8:	e2430004 	sub	r0, r3, #4
   26efc:	e6ef0070 	uxtb	r0, r0
   26f00:	e35000fb 	cmp	r0, #251	; 0xfb
   26f04:	e2433006 	sub	r3, r3, #6
   26f08:	93a00001 	movls	r0, #1
   26f0c:	83a00000 	movhi	r0, #0
   26f10:	e3530001 	cmp	r3, #1
   26f14:	93a00000 	movls	r0, #0
   26f18:	e12fff1e 	bx	lr

00026f1c <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   26f1c:	e59f30b4 	ldr	r3, [pc, #180]	; 26fd8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   26f20:	e92d4010 	push	{r4, lr}
   26f24:	e5933000 	ldr	r3, [r3]
   26f28:	ea000002 	b	26f38 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   26f2c:	e1500003 	cmp	r0, r3
   26f30:	0a000006 	beq	26f50 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   26f34:	e1a00003 	mov	r0, r3
   26f38:	e3530000 	cmp	r3, #0
   26f3c:	1afffffa 	bne	26f2c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   26f40:	e59f1094 	ldr	r1, [pc, #148]	; 26fdc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   26f44:	e59f2094 	ldr	r2, [pc, #148]	; 26fe0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   26f48:	e2810014 	add	r0, r1, #20
   26f4c:	ebfff45c 	bl	240c4 <assertion_failed>
   26f50:	e3d1300f 	bics	r3, r1, #15
   26f54:	1a000007 	bne	26f78 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   26f58:	e351000c 	cmp	r1, #12
   26f5c:	8a000019 	bhi	26fc8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   26f60:	e1d031b8 	ldrh	r3, [r0, #24]
   26f64:	e1a02153 	asr	r2, r3, r1
   26f68:	e3120001 	tst	r2, #1
   26f6c:	1a000010 	bne	26fb4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   26f70:	e3a00080 	mov	r0, #128	; 0x80
   26f74:	e8bd8010 	pop	{r4, pc}
   26f78:	e3510081 	cmp	r1, #129	; 0x81
   26f7c:	13a0100c 	movne	r1, #12
   26f80:	03a01006 	moveq	r1, #6
   26f84:	e1d021b8 	ldrh	r2, [r0, #24]
   26f88:	e1a03152 	asr	r3, r2, r1
   26f8c:	e3130001 	tst	r3, #1
   26f90:	1a000002 	bne	26fa0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
   26f94:	e2511001 	subs	r1, r1, #1
   26f98:	2afffffa 	bcs	26f88 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   26f9c:	eafffff3 	b	26f70 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x54>
   26fa0:	e3a03001 	mov	r3, #1
   26fa4:	e1c22113 	bic	r2, r2, r3, lsl r1
   26fa8:	e1c021b8 	strh	r2, [r0, #24]
   26fac:	e1a00001 	mov	r0, r1
   26fb0:	e8bd8010 	pop	{r4, pc}
   26fb4:	e3a02001 	mov	r2, #1
   26fb8:	e1c33112 	bic	r3, r3, r2, lsl r1
   26fbc:	e1c031b8 	strh	r3, [r0, #24]
   26fc0:	e1a00001 	mov	r0, r1
   26fc4:	e8bd8010 	pop	{r4, pc}
   26fc8:	e59f100c 	ldr	r1, [pc, #12]	; 26fdc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   26fcc:	e59f2010 	ldr	r2, [pc, #16]	; 26fe4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   26fd0:	e2810024 	add	r0, r1, #36	; 0x24
   26fd4:	ebfff43a 	bl	240c4 <assertion_failed>
   26fd8:	00050168 	.word	0x00050168
   26fdc:	00046dd0 	.word	0x00046dd0
   26fe0:	000001c5 	.word	0x000001c5
   26fe4:	000001ce 	.word	0x000001ce

00026fe8 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   26fe8:	e59f3074 	ldr	r3, [pc, #116]	; 27064 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   26fec:	e92d4010 	push	{r4, lr}
   26ff0:	e5933000 	ldr	r3, [r3]
   26ff4:	ea000002 	b	27004 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   26ff8:	e1530000 	cmp	r3, r0
   26ffc:	0a000006 	beq	2701c <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   27000:	e1a00003 	mov	r0, r3
   27004:	e3530000 	cmp	r3, #0
   27008:	1afffffa 	bne	26ff8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   2700c:	e59f1054 	ldr	r1, [pc, #84]	; 27068 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27010:	e59f2054 	ldr	r2, [pc, #84]	; 2706c <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   27014:	e2810014 	add	r0, r1, #20
   27018:	ebfff429 	bl	240c4 <assertion_failed>
   2701c:	e351000c 	cmp	r1, #12
   27020:	8a000007 	bhi	27044 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   27024:	e1d321b8 	ldrh	r2, [r3, #24]
   27028:	e1a00152 	asr	r0, r2, r1
   2702c:	e3100001 	tst	r0, #1
   27030:	1a000007 	bne	27054 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   27034:	e3a00001 	mov	r0, #1
   27038:	e1821110 	orr	r1, r2, r0, lsl r1
   2703c:	e1c311b8 	strh	r1, [r3, #24]
   27040:	e8bd8010 	pop	{r4, pc}
   27044:	e59f101c 	ldr	r1, [pc, #28]	; 27068 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27048:	e59f2020 	ldr	r2, [pc, #32]	; 27070 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   2704c:	e2810024 	add	r0, r1, #36	; 0x24
   27050:	ebfff41b 	bl	240c4 <assertion_failed>
   27054:	e59f100c 	ldr	r1, [pc, #12]	; 27068 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27058:	e59f2014 	ldr	r2, [pc, #20]	; 27074 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   2705c:	e2810040 	add	r0, r1, #64	; 0x40
   27060:	ebfff417 	bl	240c4 <assertion_failed>
   27064:	00050168 	.word	0x00050168
   27068:	00046dd0 	.word	0x00046dd0
   2706c:	000001f2 	.word	0x000001f2
   27070:	000001fa 	.word	0x000001fa
   27074:	000001fb 	.word	0x000001fb

00027078 <CMachineInfo::Get()>:
   27078:	e59f3020 	ldr	r3, [pc, #32]	; 270a0 <CMachineInfo::Get()+0x28>
   2707c:	e5930000 	ldr	r0, [r3]
   27080:	e3500000 	cmp	r0, #0
   27084:	0a000000 	beq	2708c <CMachineInfo::Get()+0x14>
   27088:	e12fff1e 	bx	lr
   2708c:	e59f1010 	ldr	r1, [pc, #16]	; 270a4 <CMachineInfo::Get()+0x2c>
   27090:	e92d4010 	push	{r4, lr}
   27094:	e59f200c 	ldr	r2, [pc, #12]	; 270a8 <CMachineInfo::Get()+0x30>
   27098:	e2810014 	add	r0, r1, #20
   2709c:	ebfff408 	bl	240c4 <assertion_failed>
   270a0:	00050168 	.word	0x00050168
   270a4:	00046dd0 	.word	0x00046dd0
   270a8:	00000201 	.word	0x00000201

000270ac <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   270ac:	e3a03000 	mov	r3, #0
   270b0:	e1510003 	cmp	r1, r3
   270b4:	e92d4010 	push	{r4, lr}
   270b8:	e880000e 	stm	r0, {r1, r2, r3}
   270bc:	e580300c 	str	r3, [r0, #12]
   270c0:	0a000009 	beq	270ec <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x40>
   270c4:	e3520000 	cmp	r2, #0
   270c8:	0a00000b 	beq	270fc <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x50>
   270cc:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   270d0:	e1a04000 	mov	r4, r0
   270d4:	91a00101 	lslls	r0, r1, #2
   270d8:	83e00000 	mvnhi	r0, #0
   270dc:	eb000e15 	bl	2a938 <operator new[](unsigned int)>
   270e0:	e584000c 	str	r0, [r4, #12]
   270e4:	e1a00004 	mov	r0, r4
   270e8:	e8bd8010 	pop	{r4, pc}
   270ec:	e3a0201e 	mov	r2, #30
   270f0:	e59f1014 	ldr	r1, [pc, #20]	; 2710c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   270f4:	e59f0014 	ldr	r0, [pc, #20]	; 27110 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   270f8:	ebfff3f1 	bl	240c4 <assertion_failed>
   270fc:	e3a0201f 	mov	r2, #31
   27100:	e59f1004 	ldr	r1, [pc, #4]	; 2710c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   27104:	e59f0008 	ldr	r0, [pc, #8]	; 27114 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   27108:	ebfff3ed 	bl	240c4 <assertion_failed>
   2710c:	00046e38 	.word	0x00046e38
   27110:	00046e48 	.word	0x00046e48
   27114:	00046e5c 	.word	0x00046e5c

00027118 <CPtrArray::~CPtrArray()>:
   27118:	e3a03000 	mov	r3, #0
   2711c:	e92d4010 	push	{r4, lr}
   27120:	e1a04000 	mov	r4, r0
   27124:	e590000c 	ldr	r0, [r0, #12]
   27128:	e5843000 	str	r3, [r4]
   2712c:	e1500003 	cmp	r0, r3
   27130:	e5843004 	str	r3, [r4, #4]
   27134:	0a000000 	beq	2713c <CPtrArray::~CPtrArray()+0x24>
   27138:	eb000e05 	bl	2a954 <operator delete[](void*)>
   2713c:	e1a00004 	mov	r0, r4
   27140:	e8bd8010 	pop	{r4, pc}

00027144 <CPtrArray::GetCount() const>:
   27144:	e5900008 	ldr	r0, [r0, #8]
   27148:	e12fff1e 	bx	lr

0002714c <CPtrArray::operator[](unsigned int)>:
   2714c:	e5903008 	ldr	r3, [r0, #8]
   27150:	e92d4010 	push	{r4, lr}
   27154:	e1530001 	cmp	r3, r1
   27158:	9a000007 	bls	2717c <CPtrArray::operator[](unsigned int)+0x30>
   2715c:	e5902000 	ldr	r2, [r0]
   27160:	e1530002 	cmp	r3, r2
   27164:	8a000008 	bhi	2718c <CPtrArray::operator[](unsigned int)+0x40>
   27168:	e590000c 	ldr	r0, [r0, #12]
   2716c:	e3500000 	cmp	r0, #0
   27170:	0a000009 	beq	2719c <CPtrArray::operator[](unsigned int)+0x50>
   27174:	e0800101 	add	r0, r0, r1, lsl #2
   27178:	e8bd8010 	pop	{r4, pc}
   2717c:	e3a02035 	mov	r2, #53	; 0x35
   27180:	e59f1024 	ldr	r1, [pc, #36]	; 271ac <CPtrArray::operator[](unsigned int)+0x60>
   27184:	e59f0024 	ldr	r0, [pc, #36]	; 271b0 <CPtrArray::operator[](unsigned int)+0x64>
   27188:	ebfff3cd 	bl	240c4 <assertion_failed>
   2718c:	e3a02036 	mov	r2, #54	; 0x36
   27190:	e59f1014 	ldr	r1, [pc, #20]	; 271ac <CPtrArray::operator[](unsigned int)+0x60>
   27194:	e59f0018 	ldr	r0, [pc, #24]	; 271b4 <CPtrArray::operator[](unsigned int)+0x68>
   27198:	ebfff3c9 	bl	240c4 <assertion_failed>
   2719c:	e3a02037 	mov	r2, #55	; 0x37
   271a0:	e59f1004 	ldr	r1, [pc, #4]	; 271ac <CPtrArray::operator[](unsigned int)+0x60>
   271a4:	e59f000c 	ldr	r0, [pc, #12]	; 271b8 <CPtrArray::operator[](unsigned int)+0x6c>
   271a8:	ebfff3c5 	bl	240c4 <assertion_failed>
   271ac:	00046e38 	.word	0x00046e38
   271b0:	00046e74 	.word	0x00046e74
   271b4:	00046e8c 	.word	0x00046e8c
   271b8:	00046eac 	.word	0x00046eac

000271bc <CPtrArray::operator[](unsigned int) const>:
   271bc:	e5903008 	ldr	r3, [r0, #8]
   271c0:	e92d4010 	push	{r4, lr}
   271c4:	e1530001 	cmp	r3, r1
   271c8:	9a000007 	bls	271ec <CPtrArray::operator[](unsigned int) const+0x30>
   271cc:	e5902000 	ldr	r2, [r0]
   271d0:	e1530002 	cmp	r3, r2
   271d4:	8a000008 	bhi	271fc <CPtrArray::operator[](unsigned int) const+0x40>
   271d8:	e590300c 	ldr	r3, [r0, #12]
   271dc:	e3530000 	cmp	r3, #0
   271e0:	0a000009 	beq	2720c <CPtrArray::operator[](unsigned int) const+0x50>
   271e4:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   271e8:	e8bd8010 	pop	{r4, pc}
   271ec:	e3a0203e 	mov	r2, #62	; 0x3e
   271f0:	e59f1024 	ldr	r1, [pc, #36]	; 2721c <CPtrArray::operator[](unsigned int) const+0x60>
   271f4:	e59f0024 	ldr	r0, [pc, #36]	; 27220 <CPtrArray::operator[](unsigned int) const+0x64>
   271f8:	ebfff3b1 	bl	240c4 <assertion_failed>
   271fc:	e3a0203f 	mov	r2, #63	; 0x3f
   27200:	e59f1014 	ldr	r1, [pc, #20]	; 2721c <CPtrArray::operator[](unsigned int) const+0x60>
   27204:	e59f0018 	ldr	r0, [pc, #24]	; 27224 <CPtrArray::operator[](unsigned int) const+0x68>
   27208:	ebfff3ad 	bl	240c4 <assertion_failed>
   2720c:	e3a02040 	mov	r2, #64	; 0x40
   27210:	e59f1004 	ldr	r1, [pc, #4]	; 2721c <CPtrArray::operator[](unsigned int) const+0x60>
   27214:	e59f000c 	ldr	r0, [pc, #12]	; 27228 <CPtrArray::operator[](unsigned int) const+0x6c>
   27218:	ebfff3a9 	bl	240c4 <assertion_failed>
   2721c:	00046e38 	.word	0x00046e38
   27220:	00046e74 	.word	0x00046e74
   27224:	00046e8c 	.word	0x00046e8c
   27228:	00046eac 	.word	0x00046eac

0002722c <CPtrArray::Append(void*)>:
   2722c:	e5903000 	ldr	r3, [r0]
   27230:	e92d4070 	push	{r4, r5, r6, lr}
   27234:	e3530000 	cmp	r3, #0
   27238:	0a000024 	beq	272d0 <CPtrArray::Append(void*)+0xa4>
   2723c:	e590500c 	ldr	r5, [r0, #12]
   27240:	e1a04000 	mov	r4, r0
   27244:	e3550000 	cmp	r5, #0
   27248:	0a000024 	beq	272e0 <CPtrArray::Append(void*)+0xb4>
   2724c:	e5900008 	ldr	r0, [r0, #8]
   27250:	e1530000 	cmp	r3, r0
   27254:	3a000025 	bcc	272f0 <CPtrArray::Append(void*)+0xc4>
   27258:	e1a06001 	mov	r6, r1
   2725c:	0a000003 	beq	27270 <CPtrArray::Append(void*)+0x44>
   27260:	e2803001 	add	r3, r0, #1
   27264:	e7856100 	str	r6, [r5, r0, lsl #2]
   27268:	e5843008 	str	r3, [r4, #8]
   2726c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27270:	e5940004 	ldr	r0, [r4, #4]
   27274:	e3500000 	cmp	r0, #0
   27278:	0a000020 	beq	27300 <CPtrArray::Append(void*)+0xd4>
   2727c:	e0833000 	add	r3, r3, r0
   27280:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   27284:	91a00103 	lslls	r0, r3, #2
   27288:	83e00000 	mvnhi	r0, #0
   2728c:	eb000da9 	bl	2a938 <operator new[](unsigned int)>
   27290:	e5942000 	ldr	r2, [r4]
   27294:	e594100c 	ldr	r1, [r4, #12]
   27298:	e1a02102 	lsl	r2, r2, #2
   2729c:	e1a05000 	mov	r5, r0
   272a0:	eb000bca 	bl	2a1d0 <memcpy>
   272a4:	e594000c 	ldr	r0, [r4, #12]
   272a8:	e3500000 	cmp	r0, #0
   272ac:	0a000000 	beq	272b4 <CPtrArray::Append(void*)+0x88>
   272b0:	eb000da7 	bl	2a954 <operator delete[](void*)>
   272b4:	e5943000 	ldr	r3, [r4]
   272b8:	e5942004 	ldr	r2, [r4, #4]
   272bc:	e5940008 	ldr	r0, [r4, #8]
   272c0:	e0833002 	add	r3, r3, r2
   272c4:	e584500c 	str	r5, [r4, #12]
   272c8:	e5843000 	str	r3, [r4]
   272cc:	eaffffe3 	b	27260 <CPtrArray::Append(void*)+0x34>
   272d0:	e3a02047 	mov	r2, #71	; 0x47
   272d4:	e59f1034 	ldr	r1, [pc, #52]	; 27310 <CPtrArray::Append(void*)+0xe4>
   272d8:	e59f0034 	ldr	r0, [pc, #52]	; 27314 <CPtrArray::Append(void*)+0xe8>
   272dc:	ebfff378 	bl	240c4 <assertion_failed>
   272e0:	e3a02048 	mov	r2, #72	; 0x48
   272e4:	e59f1024 	ldr	r1, [pc, #36]	; 27310 <CPtrArray::Append(void*)+0xe4>
   272e8:	e59f0028 	ldr	r0, [pc, #40]	; 27318 <CPtrArray::Append(void*)+0xec>
   272ec:	ebfff374 	bl	240c4 <assertion_failed>
   272f0:	e3a0204a 	mov	r2, #74	; 0x4a
   272f4:	e59f1014 	ldr	r1, [pc, #20]	; 27310 <CPtrArray::Append(void*)+0xe4>
   272f8:	e59f001c 	ldr	r0, [pc, #28]	; 2731c <CPtrArray::Append(void*)+0xf0>
   272fc:	ebfff370 	bl	240c4 <assertion_failed>
   27300:	e3a0204d 	mov	r2, #77	; 0x4d
   27304:	e59f1004 	ldr	r1, [pc, #4]	; 27310 <CPtrArray::Append(void*)+0xe4>
   27308:	e59f0010 	ldr	r0, [pc, #16]	; 27320 <CPtrArray::Append(void*)+0xf4>
   2730c:	ebfff36c 	bl	240c4 <assertion_failed>
   27310:	00046e38 	.word	0x00046e38
   27314:	00046e48 	.word	0x00046e48
   27318:	00046eac 	.word	0x00046eac
   2731c:	00046e8c 	.word	0x00046e8c
   27320:	00046e5c 	.word	0x00046e5c

00027324 <CPtrArray::RemoveLast()>:
   27324:	e5903008 	ldr	r3, [r0, #8]
   27328:	e3530000 	cmp	r3, #0
   2732c:	0a000002 	beq	2733c <CPtrArray::RemoveLast()+0x18>
   27330:	e2433001 	sub	r3, r3, #1
   27334:	e5803008 	str	r3, [r0, #8]
   27338:	e12fff1e 	bx	lr
   2733c:	e92d4010 	push	{r4, lr}
   27340:	e3a02060 	mov	r2, #96	; 0x60
   27344:	e59f1004 	ldr	r1, [pc, #4]	; 27350 <CPtrArray::RemoveLast()+0x2c>
   27348:	e59f0004 	ldr	r0, [pc, #4]	; 27354 <CPtrArray::RemoveLast()+0x30>
   2734c:	ebfff35c 	bl	240c4 <assertion_failed>
   27350:	00046e38 	.word	0x00046e38
   27354:	00046ebc 	.word	0x00046ebc

00027358 <CString::~CString()>:
   27358:	e92d4010 	push	{r4, lr}
   2735c:	e1a04000 	mov	r4, r0
   27360:	e5900004 	ldr	r0, [r0, #4]
   27364:	e59f3014 	ldr	r3, [pc, #20]	; 27380 <CString::~CString()+0x28>
   27368:	e3500000 	cmp	r0, #0
   2736c:	e5843000 	str	r3, [r4]
   27370:	0a000000 	beq	27378 <CString::~CString()+0x20>
   27374:	eb000d76 	bl	2a954 <operator delete[](void*)>
   27378:	e1a00004 	mov	r0, r4
   2737c:	e8bd8010 	pop	{r4, pc}
   27380:	00046ed8 	.word	0x00046ed8

00027384 <CString::~CString()>:
   27384:	e92d4010 	push	{r4, lr}
   27388:	e1a04000 	mov	r4, r0
   2738c:	e5900004 	ldr	r0, [r0, #4]
   27390:	e59f3020 	ldr	r3, [pc, #32]	; 273b8 <CString::~CString()+0x34>
   27394:	e3500000 	cmp	r0, #0
   27398:	e5843000 	str	r3, [r4]
   2739c:	0a000000 	beq	273a4 <CString::~CString()+0x20>
   273a0:	eb000d6b 	bl	2a954 <operator delete[](void*)>
   273a4:	e1a00004 	mov	r0, r4
   273a8:	e3a01010 	mov	r1, #16
   273ac:	eb000d6e 	bl	2a96c <operator delete(void*, unsigned int)>
   273b0:	e1a00004 	mov	r0, r4
   273b4:	e8bd8010 	pop	{r4, pc}
   273b8:	00046ed8 	.word	0x00046ed8

000273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   273bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   273c0:	e990002c 	ldmib	r0, {r2, r3, r5}
   273c4:	e0455002 	sub	r5, r5, r2
   273c8:	e0851001 	add	r1, r5, r1
   273cc:	e2812001 	add	r2, r1, #1
   273d0:	e1520003 	cmp	r2, r3
   273d4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   273d8:	e1a04000 	mov	r4, r0
   273dc:	e2816041 	add	r6, r1, #65	; 0x41
   273e0:	e1a00006 	mov	r0, r6
   273e4:	eb000d53 	bl	2a938 <operator new[](unsigned int)>
   273e8:	e3a02000 	mov	r2, #0
   273ec:	e594300c 	ldr	r3, [r4, #12]
   273f0:	e1a07000 	mov	r7, r0
   273f4:	e5c32000 	strb	r2, [r3]
   273f8:	e5941004 	ldr	r1, [r4, #4]
   273fc:	eb000a0c 	bl	29c34 <strcpy>
   27400:	e5940004 	ldr	r0, [r4, #4]
   27404:	e3500000 	cmp	r0, #0
   27408:	0a000000 	beq	27410 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   2740c:	eb000d50 	bl	2a954 <operator delete[](void*)>
   27410:	e0875005 	add	r5, r7, r5
   27414:	e584500c 	str	r5, [r4, #12]
   27418:	e5847004 	str	r7, [r4, #4]
   2741c:	e5846008 	str	r6, [r4, #8]
   27420:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00027424 <CString::CString()>:
   27424:	e3a02000 	mov	r2, #0
   27428:	e59f1008 	ldr	r1, [pc, #8]	; 27438 <CString::CString()+0x14>
   2742c:	e5802008 	str	r2, [r0, #8]
   27430:	e8800006 	stm	r0, {r1, r2}
   27434:	e12fff1e 	bx	lr
   27438:	00046ed8 	.word	0x00046ed8

0002743c <CString::CString(char const*)>:
   2743c:	e92d4070 	push	{r4, r5, r6, lr}
   27440:	e1a04000 	mov	r4, r0
   27444:	e59f302c 	ldr	r3, [pc, #44]	; 27478 <CString::CString(char const*)+0x3c>
   27448:	e1a00001 	mov	r0, r1
   2744c:	e5843000 	str	r3, [r4]
   27450:	e1a05001 	mov	r5, r1
   27454:	eb000938 	bl	2993c <strlen>
   27458:	e2800001 	add	r0, r0, #1
   2745c:	e5840008 	str	r0, [r4, #8]
   27460:	eb000d34 	bl	2a938 <operator new[](unsigned int)>
   27464:	e1a01005 	mov	r1, r5
   27468:	e5840004 	str	r0, [r4, #4]
   2746c:	eb0009f0 	bl	29c34 <strcpy>
   27470:	e1a00004 	mov	r0, r4
   27474:	e8bd8070 	pop	{r4, r5, r6, pc}
   27478:	00046ed8 	.word	0x00046ed8

0002747c <CString::operator char const*() const>:
   2747c:	e5900004 	ldr	r0, [r0, #4]
   27480:	e59f3008 	ldr	r3, [pc, #8]	; 27490 <CString::operator char const*() const+0x14>
   27484:	e3500000 	cmp	r0, #0
   27488:	01a00003 	moveq	r0, r3
   2748c:	e12fff1e 	bx	lr
   27490:	00049280 	.word	0x00049280

00027494 <CString::operator=(char const*)>:
   27494:	e92d4070 	push	{r4, r5, r6, lr}
   27498:	e1a04000 	mov	r4, r0
   2749c:	e5900004 	ldr	r0, [r0, #4]
   274a0:	e1a05001 	mov	r5, r1
   274a4:	e3500000 	cmp	r0, #0
   274a8:	0a000000 	beq	274b0 <CString::operator=(char const*)+0x1c>
   274ac:	eb000d28 	bl	2a954 <operator delete[](void*)>
   274b0:	e1a00005 	mov	r0, r5
   274b4:	eb000920 	bl	2993c <strlen>
   274b8:	e2800001 	add	r0, r0, #1
   274bc:	e5840008 	str	r0, [r4, #8]
   274c0:	eb000d1c 	bl	2a938 <operator new[](unsigned int)>
   274c4:	e1a01005 	mov	r1, r5
   274c8:	e5840004 	str	r0, [r4, #4]
   274cc:	eb0009d8 	bl	29c34 <strcpy>
   274d0:	e5940004 	ldr	r0, [r4, #4]
   274d4:	e8bd8070 	pop	{r4, r5, r6, pc}

000274d8 <CString::operator=(CString const&)>:
   274d8:	e92d4070 	push	{r4, r5, r6, lr}
   274dc:	e1a04000 	mov	r4, r0
   274e0:	e5900004 	ldr	r0, [r0, #4]
   274e4:	e1a06001 	mov	r6, r1
   274e8:	e3500000 	cmp	r0, #0
   274ec:	0a000000 	beq	274f4 <CString::operator=(CString const&)+0x1c>
   274f0:	eb000d17 	bl	2a954 <operator delete[](void*)>
   274f4:	e5960004 	ldr	r0, [r6, #4]
   274f8:	e59f5030 	ldr	r5, [pc, #48]	; 27530 <CString::operator=(CString const&)+0x58>
   274fc:	e3500000 	cmp	r0, #0
   27500:	01a00005 	moveq	r0, r5
   27504:	eb00090c 	bl	2993c <strlen>
   27508:	e2800001 	add	r0, r0, #1
   2750c:	e5840008 	str	r0, [r4, #8]
   27510:	eb000d08 	bl	2a938 <operator new[](unsigned int)>
   27514:	e5840004 	str	r0, [r4, #4]
   27518:	e5961004 	ldr	r1, [r6, #4]
   2751c:	e3510000 	cmp	r1, #0
   27520:	01a01005 	moveq	r1, r5
   27524:	eb0009c2 	bl	29c34 <strcpy>
   27528:	e1a00004 	mov	r0, r4
   2752c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27530:	00049280 	.word	0x00049280

00027534 <CString::GetLength() const>:
   27534:	e5900004 	ldr	r0, [r0, #4]
   27538:	e3500000 	cmp	r0, #0
   2753c:	012fff1e 	bxeq	lr
   27540:	ea0008fd 	b	2993c <strlen>

00027544 <CString::Append(char const*)>:
   27544:	e92d4070 	push	{r4, r5, r6, lr}
   27548:	e3a03001 	mov	r3, #1
   2754c:	e1a04000 	mov	r4, r0
   27550:	e5900004 	ldr	r0, [r0, #4]
   27554:	e1a06001 	mov	r6, r1
   27558:	e3500000 	cmp	r0, #0
   2755c:	e5843008 	str	r3, [r4, #8]
   27560:	0a000003 	beq	27574 <CString::Append(char const*)+0x30>
   27564:	eb0008f4 	bl	2993c <strlen>
   27568:	e5943008 	ldr	r3, [r4, #8]
   2756c:	e0830000 	add	r0, r3, r0
   27570:	e5840008 	str	r0, [r4, #8]
   27574:	e1a00006 	mov	r0, r6
   27578:	eb0008ef 	bl	2993c <strlen>
   2757c:	e5943008 	ldr	r3, [r4, #8]
   27580:	e0800003 	add	r0, r0, r3
   27584:	e5840008 	str	r0, [r4, #8]
   27588:	eb000cea 	bl	2a938 <operator new[](unsigned int)>
   2758c:	e5941004 	ldr	r1, [r4, #4]
   27590:	e1a05000 	mov	r5, r0
   27594:	e3510000 	cmp	r1, #0
   27598:	05c01000 	strbeq	r1, [r0]
   2759c:	0a000004 	beq	275b4 <CString::Append(char const*)+0x70>
   275a0:	eb0009a3 	bl	29c34 <strcpy>
   275a4:	e5940004 	ldr	r0, [r4, #4]
   275a8:	e3500000 	cmp	r0, #0
   275ac:	0a000000 	beq	275b4 <CString::Append(char const*)+0x70>
   275b0:	eb000ce7 	bl	2a954 <operator delete[](void*)>
   275b4:	e1a01006 	mov	r1, r6
   275b8:	e1a00005 	mov	r0, r5
   275bc:	eb0009ba 	bl	29cac <strcat>
   275c0:	e5845004 	str	r5, [r4, #4]
   275c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000275c8 <CString::Compare(char const*) const>:
   275c8:	e5900004 	ldr	r0, [r0, #4]
   275cc:	ea0008e4 	b	29964 <strcmp>

000275d0 <CString::Find(char) const>:
   275d0:	e5902004 	ldr	r2, [r0, #4]
   275d4:	e1d230d0 	ldrsb	r3, [r2]
   275d8:	e3530000 	cmp	r3, #0
   275dc:	0a000009 	beq	27608 <CString::Find(char) const+0x38>
   275e0:	e1510003 	cmp	r1, r3
   275e4:	e3a00000 	mov	r0, #0
   275e8:	1a000002 	bne	275f8 <CString::Find(char) const+0x28>
   275ec:	ea000007 	b	27610 <CString::Find(char) const+0x40>
   275f0:	e1530001 	cmp	r3, r1
   275f4:	012fff1e 	bxeq	lr
   275f8:	e1f230d1 	ldrsb	r3, [r2, #1]!
   275fc:	e2800001 	add	r0, r0, #1
   27600:	e3530000 	cmp	r3, #0
   27604:	1afffff9 	bne	275f0 <CString::Find(char) const+0x20>
   27608:	e3e00000 	mvn	r0, #0
   2760c:	e12fff1e 	bx	lr
   27610:	e12fff1e 	bx	lr

00027614 <CString::PutChar(char, unsigned int)>:
   27614:	e92d4070 	push	{r4, r5, r6, lr}
   27618:	e2524000 	subs	r4, r2, #0
   2761c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27620:	e1a06001 	mov	r6, r1
   27624:	e1a01004 	mov	r1, r4
   27628:	e1a05000 	mov	r5, r0
   2762c:	ebffff62 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27630:	e2443001 	sub	r3, r4, #1
   27634:	e595200c 	ldr	r2, [r5, #12]
   27638:	e2433001 	sub	r3, r3, #1
   2763c:	e2820001 	add	r0, r2, #1
   27640:	e3730001 	cmn	r3, #1
   27644:	e585000c 	str	r0, [r5, #12]
   27648:	e5c26000 	strb	r6, [r2]
   2764c:	1afffff8 	bne	27634 <CString::PutChar(char, unsigned int)+0x20>
   27650:	e8bd8070 	pop	{r4, r5, r6, pc}

00027654 <CString::PutString(char const*)>:
   27654:	e92d4070 	push	{r4, r5, r6, lr}
   27658:	e1a04000 	mov	r4, r0
   2765c:	e1a00001 	mov	r0, r1
   27660:	e1a05001 	mov	r5, r1
   27664:	eb0008b4 	bl	2993c <strlen>
   27668:	e2506000 	subs	r6, r0, #0
   2766c:	0a000002 	beq	2767c <CString::PutString(char const*)+0x28>
   27670:	e1a01006 	mov	r1, r6
   27674:	e1a00004 	mov	r0, r4
   27678:	ebffff4f 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2767c:	e1a01005 	mov	r1, r5
   27680:	e594000c 	ldr	r0, [r4, #12]
   27684:	eb00096a 	bl	29c34 <strcpy>
   27688:	e594100c 	ldr	r1, [r4, #12]
   2768c:	e0811006 	add	r1, r1, r6
   27690:	e584100c 	str	r1, [r4, #12]
   27694:	e8bd8070 	pop	{r4, r5, r6, pc}

00027698 <CString::Replace(char const*, char const*)>:
   27698:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2769c:	e1d180d0 	ldrsb	r8, [r1]
   276a0:	e24dd014 	sub	sp, sp, #20
   276a4:	e3580000 	cmp	r8, #0
   276a8:	1a000002 	bne	276b8 <CString::Replace(char const*, char const*)+0x20>
   276ac:	e1a00008 	mov	r0, r8
   276b0:	e28dd014 	add	sp, sp, #20
   276b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276b8:	e1a0a000 	mov	sl, r0
   276bc:	e1a07001 	mov	r7, r1
   276c0:	e5901004 	ldr	r1, [r0, #4]
   276c4:	e1a0000d 	mov	r0, sp
   276c8:	e1a09002 	mov	r9, r2
   276cc:	ebffff5a 	bl	2743c <CString::CString(char const*)>
   276d0:	e59a0004 	ldr	r0, [sl, #4]
   276d4:	e3500000 	cmp	r0, #0
   276d8:	0a000000 	beq	276e0 <CString::Replace(char const*, char const*)+0x48>
   276dc:	eb000c9c 	bl	2a954 <operator delete[](void*)>
   276e0:	e3a00040 	mov	r0, #64	; 0x40
   276e4:	e58a0008 	str	r0, [sl, #8]
   276e8:	eb000c92 	bl	2a938 <operator new[](unsigned int)>
   276ec:	e3a08000 	mov	r8, #0
   276f0:	e3a06001 	mov	r6, #1
   276f4:	e59d4004 	ldr	r4, [sp, #4]
   276f8:	e58a0004 	str	r0, [sl, #4]
   276fc:	e58a000c 	str	r0, [sl, #12]
   27700:	e1d710d0 	ldrsb	r1, [r7]
   27704:	e1a00004 	mov	r0, r4
   27708:	eb000978 	bl	29cf0 <strchr>
   2770c:	e2505000 	subs	r5, r0, #0
   27710:	0a00002d 	beq	277cc <CString::Replace(char const*, char const*)+0x134>
   27714:	e1540005 	cmp	r4, r5
   27718:	2a000039 	bcs	27804 <CString::Replace(char const*, char const*)+0x16c>
   2771c:	e1a01006 	mov	r1, r6
   27720:	e1a0000a 	mov	r0, sl
   27724:	e0d4b0d1 	ldrsb	fp, [r4], #1
   27728:	ebffff23 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2772c:	e59a300c 	ldr	r3, [sl, #12]
   27730:	e1550004 	cmp	r5, r4
   27734:	e2832001 	add	r2, r3, #1
   27738:	e58a200c 	str	r2, [sl, #12]
   2773c:	e5c3b000 	strb	fp, [r3]
   27740:	1afffff5 	bne	2771c <CString::Replace(char const*, char const*)+0x84>
   27744:	e1a0c005 	mov	ip, r5
   27748:	e2854001 	add	r4, r5, #1
   2774c:	e1d730d1 	ldrsb	r3, [r7, #1]
   27750:	e2871001 	add	r1, r7, #1
   27754:	e3530000 	cmp	r3, #0
   27758:	0a00000c 	beq	27790 <CString::Replace(char const*, char const*)+0xf8>
   2775c:	e1d520d1 	ldrsb	r2, [r5, #1]
   27760:	e1520003 	cmp	r2, r3
   27764:	1a00000e 	bne	277a4 <CString::Replace(char const*, char const*)+0x10c>
   27768:	e2853002 	add	r3, r5, #2
   2776c:	ea000003 	b	27780 <CString::Replace(char const*, char const*)+0xe8>
   27770:	e1d400d0 	ldrsb	r0, [r4]
   27774:	e2833001 	add	r3, r3, #1
   27778:	e1500002 	cmp	r0, r2
   2777c:	1a000008 	bne	277a4 <CString::Replace(char const*, char const*)+0x10c>
   27780:	e1f120d1 	ldrsb	r2, [r1, #1]!
   27784:	e1a04003 	mov	r4, r3
   27788:	e3520000 	cmp	r2, #0
   2778c:	1afffff7 	bne	27770 <CString::Replace(char const*, char const*)+0xd8>
   27790:	e1a01009 	mov	r1, r9
   27794:	e1a0000a 	mov	r0, sl
   27798:	e2888001 	add	r8, r8, #1
   2779c:	ebffffac 	bl	27654 <CString::PutString(char const*)>
   277a0:	eaffffd6 	b	27700 <CString::Replace(char const*, char const*)+0x68>
   277a4:	e1a01006 	mov	r1, r6
   277a8:	e1a0000a 	mov	r0, sl
   277ac:	e1dc50d0 	ldrsb	r5, [ip]
   277b0:	e28c4001 	add	r4, ip, #1
   277b4:	ebffff00 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   277b8:	e59a300c 	ldr	r3, [sl, #12]
   277bc:	e2832001 	add	r2, r3, #1
   277c0:	e58a200c 	str	r2, [sl, #12]
   277c4:	e5c35000 	strb	r5, [r3]
   277c8:	eaffffcc 	b	27700 <CString::Replace(char const*, char const*)+0x68>
   277cc:	e1a0000a 	mov	r0, sl
   277d0:	e1a01004 	mov	r1, r4
   277d4:	ebffff9e 	bl	27654 <CString::PutString(char const*)>
   277d8:	e59a200c 	ldr	r2, [sl, #12]
   277dc:	e59f302c 	ldr	r3, [pc, #44]	; 27810 <CString::Replace(char const*, char const*)+0x178>
   277e0:	e5c25000 	strb	r5, [r2]
   277e4:	e59d0004 	ldr	r0, [sp, #4]
   277e8:	e58d3000 	str	r3, [sp]
   277ec:	e3500000 	cmp	r0, #0
   277f0:	0affffad 	beq	276ac <CString::Replace(char const*, char const*)+0x14>
   277f4:	eb000c56 	bl	2a954 <operator delete[](void*)>
   277f8:	e1a00008 	mov	r0, r8
   277fc:	e28dd014 	add	sp, sp, #20
   27800:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27804:	e1a0c004 	mov	ip, r4
   27808:	e2854001 	add	r4, r5, #1
   2780c:	eaffffce 	b	2774c <CString::Replace(char const*, char const*)+0xb4>
   27810:	00046ed8 	.word	0x00046ed8

00027814 <CString::ReserveSpace(unsigned int)>:
   27814:	e3510000 	cmp	r1, #0
   27818:	012fff1e 	bxeq	lr
   2781c:	eafffee6 	b	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027820 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27820:	e1510002 	cmp	r1, r2
   27824:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27828:	e1a05001 	mov	r5, r1
   2782c:	e1a07002 	mov	r7, r2
   27830:	e1a09000 	mov	r9, r0
   27834:	e1a08003 	mov	r8, r3
   27838:	23a0a001 	movcs	sl, #1
   2783c:	3a000022 	bcc	278cc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   27840:	e00a0a97 	mul	sl, r7, sl
   27844:	e1a00005 	mov	r0, r5
   27848:	e1a0100a 	mov	r1, sl
   2784c:	eb006053 	bl	3f9a0 <__aeabi_uidiv>
   27850:	e1500007 	cmp	r0, r7
   27854:	e1a04000 	mov	r4, r0
   27858:	2afffff8 	bcs	27840 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   2785c:	e3580000 	cmp	r8, #0
   27860:	13a08037 	movne	r8, #55	; 0x37
   27864:	03a08057 	moveq	r8, #87	; 0x57
   27868:	e1a06009 	mov	r6, r9
   2786c:	ea000003 	b	27880 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27870:	e1a0100a 	mov	r1, sl
   27874:	e1a00005 	mov	r0, r5
   27878:	eb006048 	bl	3f9a0 <__aeabi_uidiv>
   2787c:	e1a04000 	mov	r4, r0
   27880:	e1a00005 	mov	r0, r5
   27884:	e1a0100a 	mov	r1, sl
   27888:	eb006081 	bl	3fa94 <__aeabi_uidivmod>
   2788c:	e3540009 	cmp	r4, #9
   27890:	e2843030 	add	r3, r4, #48	; 0x30
   27894:	80884004 	addhi	r4, r8, r4
   27898:	96af4073 	sxtbls	r4, r3
   2789c:	86af4074 	sxtbhi	r4, r4
   278a0:	e2866001 	add	r6, r6, #1
   278a4:	e1a0000a 	mov	r0, sl
   278a8:	e1a05001 	mov	r5, r1
   278ac:	e5464001 	strb	r4, [r6, #-1]
   278b0:	e1a01007 	mov	r1, r7
   278b4:	eb006039 	bl	3f9a0 <__aeabi_uidiv>
   278b8:	e250a000 	subs	sl, r0, #0
   278bc:	1affffeb 	bne	27870 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   278c0:	e5c6a000 	strb	sl, [r6]
   278c4:	e1a00009 	mov	r0, r9
   278c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   278cc:	e1a04001 	mov	r4, r1
   278d0:	e3a0a001 	mov	sl, #1
   278d4:	eaffffe0 	b	2785c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

000278d8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   278d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   278dc:	e3a0b000 	mov	fp, #0
   278e0:	e24dd014 	sub	sp, sp, #20
   278e4:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   278e8:	e153000b 	cmp	r3, fp
   278ec:	e1a07003 	mov	r7, r3
   278f0:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   278f4:	01520001 	cmpeq	r2, r1
   278f8:	e1a06002 	mov	r6, r2
   278fc:	e1a0a001 	mov	sl, r1
   27900:	e58d000c 	str	r0, [sp, #12]
   27904:	e58d3000 	str	r3, [sp]
   27908:	23a04001 	movcs	r4, #1
   2790c:	23a05000 	movcs	r5, #0
   27910:	3a00003a 	bcc	27a00 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x128>
   27914:	e0030b94 	mul	r3, r4, fp
   27918:	e023359a 	mla	r3, sl, r5, r3
   2791c:	e0854a94 	umull	r4, r5, r4, sl
   27920:	e0835005 	add	r5, r3, r5
   27924:	e1a02004 	mov	r2, r4
   27928:	e1a03005 	mov	r3, r5
   2792c:	e1a00006 	mov	r0, r6
   27930:	e1a01007 	mov	r1, r7
   27934:	eb0060b1 	bl	3fc00 <__aeabi_uldivmod>
   27938:	e151000b 	cmp	r1, fp
   2793c:	0150000a 	cmpeq	r0, sl
   27940:	e1a08000 	mov	r8, r0
   27944:	e1a09001 	mov	r9, r1
   27948:	2afffff1 	bcs	27914 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   2794c:	e59d3000 	ldr	r3, [sp]
   27950:	e1cda0f0 	strd	sl, [sp]
   27954:	e3530000 	cmp	r3, #0
   27958:	13a03037 	movne	r3, #55	; 0x37
   2795c:	03a03057 	moveq	r3, #87	; 0x57
   27960:	e58d3008 	str	r3, [sp, #8]
   27964:	e59d300c 	ldr	r3, [sp, #12]
   27968:	e1a0b003 	mov	fp, r3
   2796c:	ea000006 	b	2798c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xb4>
   27970:	e1a02000 	mov	r2, r0
   27974:	e1a03001 	mov	r3, r1
   27978:	e1a00006 	mov	r0, r6
   2797c:	e1a01007 	mov	r1, r7
   27980:	eb00609e 	bl	3fc00 <__aeabi_uldivmod>
   27984:	e1a08000 	mov	r8, r0
   27988:	e1a09001 	mov	r9, r1
   2798c:	e1a00006 	mov	r0, r6
   27990:	e1a01007 	mov	r1, r7
   27994:	e1a02004 	mov	r2, r4
   27998:	e1a03005 	mov	r3, r5
   2799c:	eb006097 	bl	3fc00 <__aeabi_uldivmod>
   279a0:	e3590000 	cmp	r9, #0
   279a4:	03580009 	cmpeq	r8, #9
   279a8:	e1a07003 	mov	r7, r3
   279ac:	e2883030 	add	r3, r8, #48	; 0x30
   279b0:	859d3008 	ldrhi	r3, [sp, #8]
   279b4:	96af8073 	sxtbls	r8, r3
   279b8:	80838008 	addhi	r8, r3, r8
   279bc:	86af8078 	sxtbhi	r8, r8
   279c0:	e28bb001 	add	fp, fp, #1
   279c4:	e1a00004 	mov	r0, r4
   279c8:	e1a01005 	mov	r1, r5
   279cc:	e1a06002 	mov	r6, r2
   279d0:	e1cd20d0 	ldrd	r2, [sp]
   279d4:	e54b8001 	strb	r8, [fp, #-1]
   279d8:	eb006088 	bl	3fc00 <__aeabi_uldivmod>
   279dc:	e1a04000 	mov	r4, r0
   279e0:	e1a05001 	mov	r5, r1
   279e4:	e1943005 	orrs	r3, r4, r5
   279e8:	1affffe0 	bne	27970 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   279ec:	e3a03000 	mov	r3, #0
   279f0:	e59d000c 	ldr	r0, [sp, #12]
   279f4:	e5cb3000 	strb	r3, [fp]
   279f8:	e28dd014 	add	sp, sp, #20
   279fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a00:	e1a08002 	mov	r8, r2
   27a04:	e1a09007 	mov	r9, r7
   27a08:	e3a04001 	mov	r4, #1
   27a0c:	e3a05000 	mov	r5, #0
   27a10:	eaffffcd 	b	2794c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00027a14 <CString::ftoa(char*, double, unsigned int)>:
   27a14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a18:	ed2d8b02 	vpush	{d8}
   27a1c:	ec432b18 	vmov	d8, r2, r3
   27a20:	eeb58bc0 	vcmpe.f64	d8, #0.0
   27a24:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   27a28:	ed9f7b92 	vldr	d7, [pc, #584]	; 27c78 <CString::ftoa(char*, double, unsigned int)+0x264>
   27a2c:	4eb18b48 	vnegmi.f64	d8, d8
   27a30:	43a0302d 	movmi	r3, #45	; 0x2d
   27a34:	eeb48bc7 	vcmpe.f64	d8, d7
   27a38:	45c03000 	strbmi	r3, [r0]
   27a3c:	4280b001 	addmi	fp, r0, #1
   27a40:	51a0b000 	movpl	fp, r0
   27a44:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   27a48:	e24dd01c 	sub	sp, sp, #28
   27a4c:	e1a0a000 	mov	sl, r0
   27a50:	ca000079 	bgt	27c3c <CString::ftoa(char*, double, unsigned int)+0x228>
   27a54:	eefc7bc8 	vcvt.u32.f64	s15, d8
   27a58:	ee177a90 	vmov	r7, s15
   27a5c:	e3570009 	cmp	r7, #9
   27a60:	83a04001 	movhi	r4, #1
   27a64:	9a00007b 	bls	27c58 <CString::ftoa(char*, double, unsigned int)+0x244>
   27a68:	e0844104 	add	r4, r4, r4, lsl #2
   27a6c:	e1a04084 	lsl	r4, r4, #1
   27a70:	e1a01004 	mov	r1, r4
   27a74:	e1a00007 	mov	r0, r7
   27a78:	eb005fc8 	bl	3f9a0 <__aeabi_uidiv>
   27a7c:	e3500009 	cmp	r0, #9
   27a80:	e1a05000 	mov	r5, r0
   27a84:	8afffff7 	bhi	27a68 <CString::ftoa(char*, double, unsigned int)+0x54>
   27a88:	e1a0600b 	mov	r6, fp
   27a8c:	e1a09007 	mov	r9, r7
   27a90:	e59f81f0 	ldr	r8, [pc, #496]	; 27c88 <CString::ftoa(char*, double, unsigned int)+0x274>
   27a94:	ea000003 	b	27aa8 <CString::ftoa(char*, double, unsigned int)+0x94>
   27a98:	e1a01004 	mov	r1, r4
   27a9c:	e1a00009 	mov	r0, r9
   27aa0:	eb005fbe 	bl	3f9a0 <__aeabi_uidiv>
   27aa4:	e1a05000 	mov	r5, r0
   27aa8:	e1a00009 	mov	r0, r9
   27aac:	e1a01004 	mov	r1, r4
   27ab0:	eb005ff7 	bl	3fa94 <__aeabi_uidivmod>
   27ab4:	e0843498 	umull	r3, r4, r8, r4
   27ab8:	e3550009 	cmp	r5, #9
   27abc:	e2852030 	add	r2, r5, #48	; 0x30
   27ac0:	82855057 	addhi	r5, r5, #87	; 0x57
   27ac4:	96af5072 	sxtbls	r5, r2
   27ac8:	86af5075 	sxtbhi	r5, r5
   27acc:	e2866001 	add	r6, r6, #1
   27ad0:	e1b041a4 	lsrs	r4, r4, #3
   27ad4:	e1a09001 	mov	r9, r1
   27ad8:	e5465001 	strb	r5, [r6, #-1]
   27adc:	1affffed 	bne	27a98 <CString::ftoa(char*, double, unsigned int)+0x84>
   27ae0:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   27ae4:	e5c64000 	strb	r4, [r6]
   27ae8:	e3530000 	cmp	r3, #0
   27aec:	1a000003 	bne	27b00 <CString::ftoa(char*, double, unsigned int)+0xec>
   27af0:	e1a0000a 	mov	r0, sl
   27af4:	e28dd01c 	add	sp, sp, #28
   27af8:	ecbd8b02 	vpop	{d8}
   27afc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b00:	e1a0000b 	mov	r0, fp
   27b04:	eb00078c 	bl	2993c <strlen>
   27b08:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   27b0c:	e08b2000 	add	r2, fp, r0
   27b10:	e3530009 	cmp	r3, #9
   27b14:	31a09003 	movcc	r9, r3
   27b18:	23a09009 	movcs	r9, #9
   27b1c:	e3a0302e 	mov	r3, #46	; 0x2e
   27b20:	e3590001 	cmp	r9, #1
   27b24:	e7cb3000 	strb	r3, [fp, r0]
   27b28:	e58d2004 	str	r2, [sp, #4]
   27b2c:	e282b001 	add	fp, r2, #1
   27b30:	0a00004e 	beq	27c70 <CString::ftoa(char*, double, unsigned int)+0x25c>
   27b34:	e3a02002 	mov	r2, #2
   27b38:	e3a0300a 	mov	r3, #10
   27b3c:	e2822001 	add	r2, r2, #1
   27b40:	e0833103 	add	r3, r3, r3, lsl #2
   27b44:	e1520009 	cmp	r2, r9
   27b48:	e1a03083 	lsl	r3, r3, #1
   27b4c:	9afffffa 	bls	27b3c <CString::ftoa(char*, double, unsigned int)+0x128>
   27b50:	ee073a90 	vmov	s15, r3
   27b54:	eeb87b67 	vcvt.f64.u32	d7, s15
   27b58:	ee067a90 	vmov	s13, r7
   27b5c:	eeb86b66 	vcvt.f64.u32	d6, s13
   27b60:	ee386b46 	vsub.f64	d6, d8, d6
   27b64:	ee267b07 	vmul.f64	d7, d6, d7
   27b68:	eefc7bc7 	vcvt.u32.f64	s15, d7
   27b6c:	ee178a90 	vmov	r8, s15
   27b70:	e3580009 	cmp	r8, #9
   27b74:	83a04001 	movhi	r4, #1
   27b78:	9a000039 	bls	27c64 <CString::ftoa(char*, double, unsigned int)+0x250>
   27b7c:	e0844104 	add	r4, r4, r4, lsl #2
   27b80:	e1a04084 	lsl	r4, r4, #1
   27b84:	e1a01004 	mov	r1, r4
   27b88:	e1a00008 	mov	r0, r8
   27b8c:	eb005f83 	bl	3f9a0 <__aeabi_uidiv>
   27b90:	e3500009 	cmp	r0, #9
   27b94:	e1a05000 	mov	r5, r0
   27b98:	8afffff7 	bhi	27b7c <CString::ftoa(char*, double, unsigned int)+0x168>
   27b9c:	e28d600c 	add	r6, sp, #12
   27ba0:	e59f70e0 	ldr	r7, [pc, #224]	; 27c88 <CString::ftoa(char*, double, unsigned int)+0x274>
   27ba4:	ea000003 	b	27bb8 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   27ba8:	e1a01004 	mov	r1, r4
   27bac:	e1a00008 	mov	r0, r8
   27bb0:	eb005f7a 	bl	3f9a0 <__aeabi_uidiv>
   27bb4:	e1a05000 	mov	r5, r0
   27bb8:	e1a00008 	mov	r0, r8
   27bbc:	e1a01004 	mov	r1, r4
   27bc0:	eb005fb3 	bl	3fa94 <__aeabi_uidivmod>
   27bc4:	e0843497 	umull	r3, r4, r7, r4
   27bc8:	e3550009 	cmp	r5, #9
   27bcc:	e2852030 	add	r2, r5, #48	; 0x30
   27bd0:	82855057 	addhi	r5, r5, #87	; 0x57
   27bd4:	96af5072 	sxtbls	r5, r2
   27bd8:	86af5075 	sxtbhi	r5, r5
   27bdc:	e2866001 	add	r6, r6, #1
   27be0:	e1b041a4 	lsrs	r4, r4, #3
   27be4:	e1a08001 	mov	r8, r1
   27be8:	e5465001 	strb	r5, [r6, #-1]
   27bec:	1affffed 	bne	27ba8 <CString::ftoa(char*, double, unsigned int)+0x194>
   27bf0:	e28d000c 	add	r0, sp, #12
   27bf4:	e5c64000 	strb	r4, [r6]
   27bf8:	eb00074f 	bl	2993c <strlen>
   27bfc:	e0599000 	subs	r9, r9, r0
   27c00:	0a000006 	beq	27c20 <CString::ftoa(char*, double, unsigned int)+0x20c>
   27c04:	e3a02030 	mov	r2, #48	; 0x30
   27c08:	e59d8004 	ldr	r8, [sp, #4]
   27c0c:	e0883009 	add	r3, r8, r9
   27c10:	e5e82001 	strb	r2, [r8, #1]!
   27c14:	e1580003 	cmp	r8, r3
   27c18:	1afffffc 	bne	27c10 <CString::ftoa(char*, double, unsigned int)+0x1fc>
   27c1c:	e08bb009 	add	fp, fp, r9
   27c20:	e28d100c 	add	r1, sp, #12
   27c24:	e1a0000b 	mov	r0, fp
   27c28:	eb000801 	bl	29c34 <strcpy>
   27c2c:	e1a0000a 	mov	r0, sl
   27c30:	e28dd01c 	add	sp, sp, #28
   27c34:	ecbd8b02 	vpop	{d8}
   27c38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c3c:	e1a0000b 	mov	r0, fp
   27c40:	e59f1044 	ldr	r1, [pc, #68]	; 27c8c <CString::ftoa(char*, double, unsigned int)+0x278>
   27c44:	eb0007fa 	bl	29c34 <strcpy>
   27c48:	e1a0000a 	mov	r0, sl
   27c4c:	e28dd01c 	add	sp, sp, #28
   27c50:	ecbd8b02 	vpop	{d8}
   27c54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c58:	ee175a90 	vmov	r5, s15
   27c5c:	e3a04001 	mov	r4, #1
   27c60:	eaffff88 	b	27a88 <CString::ftoa(char*, double, unsigned int)+0x74>
   27c64:	ee175a90 	vmov	r5, s15
   27c68:	e3a04001 	mov	r4, #1
   27c6c:	eaffffca 	b	27b9c <CString::ftoa(char*, double, unsigned int)+0x188>
   27c70:	ed9f7b02 	vldr	d7, [pc, #8]	; 27c80 <CString::ftoa(char*, double, unsigned int)+0x26c>
   27c74:	eaffffb7 	b	27b58 <CString::ftoa(char*, double, unsigned int)+0x144>
   27c78:	ffe00000 	.word	0xffe00000
   27c7c:	41efffff 	.word	0x41efffff
   27c80:	00000000 	.word	0x00000000
   27c84:	40240000 	.word	0x40240000
   27c88:	cccccccd 	.word	0xcccccccd
   27c8c:	00046ee0 	.word	0x00046ee0

00027c90 <CString::FormatV(char const*, std::__va_list)>:
   27c90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c94:	e24dd064 	sub	sp, sp, #100	; 0x64
   27c98:	e58d000c 	str	r0, [sp, #12]
   27c9c:	e5900004 	ldr	r0, [r0, #4]
   27ca0:	e1a09001 	mov	r9, r1
   27ca4:	e3500000 	cmp	r0, #0
   27ca8:	e58d2018 	str	r2, [sp, #24]
   27cac:	0a000000 	beq	27cb4 <CString::FormatV(char const*, std::__va_list)+0x24>
   27cb0:	eb000b27 	bl	2a954 <operator delete[](void*)>
   27cb4:	e3a00040 	mov	r0, #64	; 0x40
   27cb8:	e59d400c 	ldr	r4, [sp, #12]
   27cbc:	e1a05009 	mov	r5, r9
   27cc0:	e5840008 	str	r0, [r4, #8]
   27cc4:	eb000b1b 	bl	2a938 <operator new[](unsigned int)>
   27cc8:	e1a03004 	mov	r3, r4
   27ccc:	e5840004 	str	r0, [r4, #4]
   27cd0:	e584000c 	str	r0, [r4, #12]
   27cd4:	e1d540d0 	ldrsb	r4, [r5]
   27cd8:	e3540000 	cmp	r4, #0
   27cdc:	0a00009f 	beq	27f60 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   27ce0:	e3540025 	cmp	r4, #37	; 0x25
   27ce4:	1a0001d7 	bne	28448 <CString::FormatV(char const*, std::__va_list)+0x7b8>
   27ce8:	e1d560d1 	ldrsb	r6, [r5, #1]
   27cec:	e3560025 	cmp	r6, #37	; 0x25
   27cf0:	0a0001f5 	beq	284cc <CString::FormatV(char const*, std::__va_list)+0x83c>
   27cf4:	e3560023 	cmp	r6, #35	; 0x23
   27cf8:	01d560d2 	ldrsbeq	r6, [r5, #2]
   27cfc:	12855001 	addne	r5, r5, #1
   27d00:	02855002 	addeq	r5, r5, #2
   27d04:	13a02000 	movne	r2, #0
   27d08:	03a02001 	moveq	r2, #1
   27d0c:	e356002d 	cmp	r6, #45	; 0x2d
   27d10:	03a03001 	moveq	r3, #1
   27d14:	13a03000 	movne	r3, #0
   27d18:	01d560d1 	ldrsbeq	r6, [r5, #1]
   27d1c:	058d301c 	streq	r3, [sp, #28]
   27d20:	00855003 	addeq	r5, r5, r3
   27d24:	158d301c 	strne	r3, [sp, #28]
   27d28:	e3560030 	cmp	r6, #48	; 0x30
   27d2c:	03a03001 	moveq	r3, #1
   27d30:	13a03000 	movne	r3, #0
   27d34:	01d560d1 	ldrsbeq	r6, [r5, #1]
   27d38:	058d3024 	streq	r3, [sp, #36]	; 0x24
   27d3c:	00855003 	addeq	r5, r5, r3
   27d40:	158d3024 	strne	r3, [sp, #36]	; 0x24
   27d44:	e2463030 	sub	r3, r6, #48	; 0x30
   27d48:	e6ef3073 	uxtb	r3, r3
   27d4c:	e3530009 	cmp	r3, #9
   27d50:	e3a04000 	mov	r4, #0
   27d54:	8a000007 	bhi	27d78 <CString::FormatV(char const*, std::__va_list)+0xe8>
   27d58:	e0844104 	add	r4, r4, r4, lsl #2
   27d5c:	e0864084 	add	r4, r6, r4, lsl #1
   27d60:	e1f560d1 	ldrsb	r6, [r5, #1]!
   27d64:	e2444030 	sub	r4, r4, #48	; 0x30
   27d68:	e2463030 	sub	r3, r6, #48	; 0x30
   27d6c:	e6ef3073 	uxtb	r3, r3
   27d70:	e3530009 	cmp	r3, #9
   27d74:	9afffff7 	bls	27d58 <CString::FormatV(char const*, std::__va_list)+0xc8>
   27d78:	e356002e 	cmp	r6, #46	; 0x2e
   27d7c:	0a0001c2 	beq	2848c <CString::FormatV(char const*, std::__va_list)+0x7fc>
   27d80:	e3a01006 	mov	r1, #6
   27d84:	e1d5a0d0 	ldrsb	sl, [r5]
   27d88:	e35a006c 	cmp	sl, #108	; 0x6c
   27d8c:	13a06000 	movne	r6, #0
   27d90:	0a0001b5 	beq	2846c <CString::FormatV(char const*, std::__va_list)+0x7dc>
   27d94:	e24a3058 	sub	r3, sl, #88	; 0x58
   27d98:	e3530020 	cmp	r3, #32
   27d9c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27da0:	ea000196 	b	28400 <CString::FormatV(char const*, std::__va_list)+0x770>
   27da4:	000283d0 	.word	0x000283d0
   27da8:	00028400 	.word	0x00028400
   27dac:	00028400 	.word	0x00028400
   27db0:	00028400 	.word	0x00028400
   27db4:	00028400 	.word	0x00028400
   27db8:	00028400 	.word	0x00028400
   27dbc:	00028400 	.word	0x00028400
   27dc0:	00028400 	.word	0x00028400
   27dc4:	00028400 	.word	0x00028400
   27dc8:	00028400 	.word	0x00028400
   27dcc:	00028400 	.word	0x00028400
   27dd0:	00028350 	.word	0x00028350
   27dd4:	0002807c 	.word	0x0002807c
   27dd8:	00028400 	.word	0x00028400
   27ddc:	00027ff0 	.word	0x00027ff0
   27de0:	00028400 	.word	0x00028400
   27de4:	00028400 	.word	0x00028400
   27de8:	0002807c 	.word	0x0002807c
   27dec:	00028400 	.word	0x00028400
   27df0:	00028400 	.word	0x00028400
   27df4:	00028400 	.word	0x00028400
   27df8:	00028400 	.word	0x00028400
   27dfc:	00028400 	.word	0x00028400
   27e00:	000281b0 	.word	0x000281b0
   27e04:	000283d0 	.word	0x000283d0
   27e08:	00028400 	.word	0x00028400
   27e0c:	00028400 	.word	0x00028400
   27e10:	00027f74 	.word	0x00027f74
   27e14:	00028400 	.word	0x00028400
   27e18:	00027e28 	.word	0x00027e28
   27e1c:	00028400 	.word	0x00028400
   27e20:	00028400 	.word	0x00028400
   27e24:	000283d0 	.word	0x000283d0
   27e28:	e3a0700a 	mov	r7, #10
   27e2c:	e3560000 	cmp	r6, #0
   27e30:	1a0000ee 	bne	281f0 <CString::FormatV(char const*, std::__va_list)+0x560>
   27e34:	e59d3018 	ldr	r3, [sp, #24]
   27e38:	e5936000 	ldr	r6, [r3]
   27e3c:	e2833004 	add	r3, r3, #4
   27e40:	e1570006 	cmp	r7, r6
   27e44:	e58d3018 	str	r3, [sp, #24]
   27e48:	93a0b001 	movls	fp, #1
   27e4c:	8a000298 	bhi	288b4 <CString::FormatV(char const*, std::__va_list)+0xc24>
   27e50:	e00b0b97 	mul	fp, r7, fp
   27e54:	e1a00006 	mov	r0, r6
   27e58:	e1a0100b 	mov	r1, fp
   27e5c:	eb005ecf 	bl	3f9a0 <__aeabi_uidiv>
   27e60:	e1570000 	cmp	r7, r0
   27e64:	9afffff9 	bls	27e50 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   27e68:	e1a09000 	mov	r9, r0
   27e6c:	e28d303c 	add	r3, sp, #60	; 0x3c
   27e70:	e35a0058 	cmp	sl, #88	; 0x58
   27e74:	e58d3020 	str	r3, [sp, #32]
   27e78:	13a0a057 	movne	sl, #87	; 0x57
   27e7c:	03a0a037 	moveq	sl, #55	; 0x37
   27e80:	e1a08003 	mov	r8, r3
   27e84:	ea000003 	b	27e98 <CString::FormatV(char const*, std::__va_list)+0x208>
   27e88:	e1a0100b 	mov	r1, fp
   27e8c:	e1a00006 	mov	r0, r6
   27e90:	eb005ec2 	bl	3f9a0 <__aeabi_uidiv>
   27e94:	e1a09000 	mov	r9, r0
   27e98:	e1a00006 	mov	r0, r6
   27e9c:	e1a0100b 	mov	r1, fp
   27ea0:	eb005efb 	bl	3fa94 <__aeabi_uidivmod>
   27ea4:	e3590009 	cmp	r9, #9
   27ea8:	e2893030 	add	r3, r9, #48	; 0x30
   27eac:	808a9009 	addhi	r9, sl, r9
   27eb0:	96af9073 	sxtbls	r9, r3
   27eb4:	86af9079 	sxtbhi	r9, r9
   27eb8:	e2888001 	add	r8, r8, #1
   27ebc:	e1a0000b 	mov	r0, fp
   27ec0:	e1a06001 	mov	r6, r1
   27ec4:	e5489001 	strb	r9, [r8, #-1]
   27ec8:	e1a01007 	mov	r1, r7
   27ecc:	eb005eb3 	bl	3f9a0 <__aeabi_uidiv>
   27ed0:	e250b000 	subs	fp, r0, #0
   27ed4:	1affffeb 	bne	27e88 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   27ed8:	e5c8b000 	strb	fp, [r8]
   27edc:	e59d0020 	ldr	r0, [sp, #32]
   27ee0:	eb000695 	bl	2993c <strlen>
   27ee4:	e59d301c 	ldr	r3, [sp, #28]
   27ee8:	e1a06000 	mov	r6, r0
   27eec:	e3530000 	cmp	r3, #0
   27ef0:	1a00017f 	bne	284f4 <CString::FormatV(char const*, std::__va_list)+0x864>
   27ef4:	e1500004 	cmp	r0, r4
   27ef8:	2a000011 	bcs	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   27efc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   27f00:	e59d600c 	ldr	r6, [sp, #12]
   27f04:	e0444000 	sub	r4, r4, r0
   27f08:	e3530000 	cmp	r3, #0
   27f0c:	e1a01004 	mov	r1, r4
   27f10:	e1a00006 	mov	r0, r6
   27f14:	03a07020 	moveq	r7, #32
   27f18:	13a07030 	movne	r7, #48	; 0x30
   27f1c:	ebfffd26 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27f20:	e1a01006 	mov	r1, r6
   27f24:	e2443001 	sub	r3, r4, #1
   27f28:	e591200c 	ldr	r2, [r1, #12]
   27f2c:	e2433001 	sub	r3, r3, #1
   27f30:	e2820001 	add	r0, r2, #1
   27f34:	e3730001 	cmn	r3, #1
   27f38:	e581000c 	str	r0, [r1, #12]
   27f3c:	e5c27000 	strb	r7, [r2]
   27f40:	1afffff8 	bne	27f28 <CString::FormatV(char const*, std::__va_list)+0x298>
   27f44:	e59d1020 	ldr	r1, [sp, #32]
   27f48:	e59d000c 	ldr	r0, [sp, #12]
   27f4c:	ebfffdc0 	bl	27654 <CString::PutString(char const*)>
   27f50:	e2855001 	add	r5, r5, #1
   27f54:	e1d540d0 	ldrsb	r4, [r5]
   27f58:	e3540000 	cmp	r4, #0
   27f5c:	1affff5f 	bne	27ce0 <CString::FormatV(char const*, std::__va_list)+0x50>
   27f60:	e59d300c 	ldr	r3, [sp, #12]
   27f64:	e593300c 	ldr	r3, [r3, #12]
   27f68:	e5c34000 	strb	r4, [r3]
   27f6c:	e28dd064 	add	sp, sp, #100	; 0x64
   27f70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f74:	e59d3018 	ldr	r3, [sp, #24]
   27f78:	e5938000 	ldr	r8, [r3]
   27f7c:	e2836004 	add	r6, r3, #4
   27f80:	e1a00008 	mov	r0, r8
   27f84:	eb00066c 	bl	2993c <strlen>
   27f88:	e59d301c 	ldr	r3, [sp, #28]
   27f8c:	e1a07000 	mov	r7, r0
   27f90:	e3530000 	cmp	r3, #0
   27f94:	1a0001fd 	bne	28790 <CString::FormatV(char const*, std::__va_list)+0xb00>
   27f98:	e1500004 	cmp	r0, r4
   27f9c:	2a00000e 	bcs	27fdc <CString::FormatV(char const*, std::__va_list)+0x34c>
   27fa0:	e59d700c 	ldr	r7, [sp, #12]
   27fa4:	e0444000 	sub	r4, r4, r0
   27fa8:	e1a01004 	mov	r1, r4
   27fac:	e1a00007 	mov	r0, r7
   27fb0:	ebfffd01 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27fb4:	e1a01007 	mov	r1, r7
   27fb8:	e2443001 	sub	r3, r4, #1
   27fbc:	e591200c 	ldr	r2, [r1, #12]
   27fc0:	e2433001 	sub	r3, r3, #1
   27fc4:	e2820001 	add	r0, r2, #1
   27fc8:	e581000c 	str	r0, [r1, #12]
   27fcc:	e3a00020 	mov	r0, #32
   27fd0:	e3730001 	cmn	r3, #1
   27fd4:	e5c20000 	strb	r0, [r2]
   27fd8:	1afffff7 	bne	27fbc <CString::FormatV(char const*, std::__va_list)+0x32c>
   27fdc:	e1a01008 	mov	r1, r8
   27fe0:	e59d000c 	ldr	r0, [sp, #12]
   27fe4:	e58d6018 	str	r6, [sp, #24]
   27fe8:	ebfffd99 	bl	27654 <CString::PutString(char const*)>
   27fec:	eaffffd7 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27ff0:	e28d003c 	add	r0, sp, #60	; 0x3c
   27ff4:	e1a06000 	mov	r6, r0
   27ff8:	e59d3018 	ldr	r3, [sp, #24]
   27ffc:	e58d0020 	str	r0, [sp, #32]
   28000:	e283c007 	add	ip, r3, #7
   28004:	e3ccc007 	bic	ip, ip, #7
   28008:	e1cc20d0 	ldrd	r2, [ip]
   2800c:	e58d1000 	str	r1, [sp]
   28010:	e28c1008 	add	r1, ip, #8
   28014:	e58d1018 	str	r1, [sp, #24]
   28018:	ebfffe7d 	bl	27a14 <CString::ftoa(char*, double, unsigned int)>
   2801c:	e1a00006 	mov	r0, r6
   28020:	eb000645 	bl	2993c <strlen>
   28024:	e59d301c 	ldr	r3, [sp, #28]
   28028:	e1a06000 	mov	r6, r0
   2802c:	e3530000 	cmp	r3, #0
   28030:	1a0001eb 	bne	287e4 <CString::FormatV(char const*, std::__va_list)+0xb54>
   28034:	e1500004 	cmp	r0, r4
   28038:	2affffc1 	bcs	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2803c:	e59d600c 	ldr	r6, [sp, #12]
   28040:	e0444000 	sub	r4, r4, r0
   28044:	e1a01004 	mov	r1, r4
   28048:	e1a00006 	mov	r0, r6
   2804c:	ebfffcda 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28050:	e1a01006 	mov	r1, r6
   28054:	e2443001 	sub	r3, r4, #1
   28058:	e591200c 	ldr	r2, [r1, #12]
   2805c:	e2433001 	sub	r3, r3, #1
   28060:	e2820001 	add	r0, r2, #1
   28064:	e581000c 	str	r0, [r1, #12]
   28068:	e3a00020 	mov	r0, #32
   2806c:	e3730001 	cmn	r3, #1
   28070:	e5c20000 	strb	r0, [r2]
   28074:	1afffff7 	bne	28058 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   28078:	eaffffb1 	b	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2807c:	e3560000 	cmp	r6, #0
   28080:	e59d3018 	ldr	r3, [sp, #24]
   28084:	1a00016a 	bne	28634 <CString::FormatV(char const*, std::__va_list)+0x9a4>
   28088:	e5936000 	ldr	r6, [r3]
   2808c:	e2833004 	add	r3, r3, #4
   28090:	e3560000 	cmp	r6, #0
   28094:	e58d3018 	str	r3, [sp, #24]
   28098:	aa000208 	bge	288c0 <CString::FormatV(char const*, std::__va_list)+0xc30>
   2809c:	e3a0b001 	mov	fp, #1
   280a0:	e2666000 	rsb	r6, r6, #0
   280a4:	e58db010 	str	fp, [sp, #16]
   280a8:	e3560009 	cmp	r6, #9
   280ac:	e1a07006 	mov	r7, r6
   280b0:	da000218 	ble	28918 <CString::FormatV(char const*, std::__va_list)+0xc88>
   280b4:	e3a08001 	mov	r8, #1
   280b8:	e0888108 	add	r8, r8, r8, lsl #2
   280bc:	e1a08088 	lsl	r8, r8, #1
   280c0:	e1a01008 	mov	r1, r8
   280c4:	e1a00006 	mov	r0, r6
   280c8:	eb005e34 	bl	3f9a0 <__aeabi_uidiv>
   280cc:	e3500009 	cmp	r0, #9
   280d0:	8afffff8 	bhi	280b8 <CString::FormatV(char const*, std::__va_list)+0x428>
   280d4:	e1a09000 	mov	r9, r0
   280d8:	e28d303c 	add	r3, sp, #60	; 0x3c
   280dc:	e58d3020 	str	r3, [sp, #32]
   280e0:	e1a06003 	mov	r6, r3
   280e4:	ea000003 	b	280f8 <CString::FormatV(char const*, std::__va_list)+0x468>
   280e8:	e1a01008 	mov	r1, r8
   280ec:	e1a00007 	mov	r0, r7
   280f0:	eb005e2a 	bl	3f9a0 <__aeabi_uidiv>
   280f4:	e1a09000 	mov	r9, r0
   280f8:	e1a00007 	mov	r0, r7
   280fc:	e1a01008 	mov	r1, r8
   28100:	eb005e63 	bl	3fa94 <__aeabi_uidivmod>
   28104:	e3590009 	cmp	r9, #9
   28108:	e2893030 	add	r3, r9, #48	; 0x30
   2810c:	96af9073 	sxtbls	r9, r3
   28110:	e59f380c 	ldr	r3, [pc, #2060]	; 28924 <CString::FormatV(char const*, std::__va_list)+0xc94>
   28114:	82899057 	addhi	r9, r9, #87	; 0x57
   28118:	e0883893 	umull	r3, r8, r3, r8
   2811c:	86af9079 	sxtbhi	r9, r9
   28120:	e2866001 	add	r6, r6, #1
   28124:	e1b081a8 	lsrs	r8, r8, #3
   28128:	e1a07001 	mov	r7, r1
   2812c:	e5469001 	strb	r9, [r6, #-1]
   28130:	1affffec 	bne	280e8 <CString::FormatV(char const*, std::__va_list)+0x458>
   28134:	e5c68000 	strb	r8, [r6]
   28138:	e59d0020 	ldr	r0, [sp, #32]
   2813c:	eb0005fe 	bl	2993c <strlen>
   28140:	e59d301c 	ldr	r3, [sp, #28]
   28144:	e080b00b 	add	fp, r0, fp
   28148:	e3530000 	cmp	r3, #0
   2814c:	0a0000fd 	beq	28548 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   28150:	e59d3010 	ldr	r3, [sp, #16]
   28154:	e3530000 	cmp	r3, #0
   28158:	1a0001cb 	bne	2888c <CString::FormatV(char const*, std::__va_list)+0xbfc>
   2815c:	e59d1020 	ldr	r1, [sp, #32]
   28160:	e59d000c 	ldr	r0, [sp, #12]
   28164:	ebfffd3a 	bl	27654 <CString::PutString(char const*)>
   28168:	e15b0004 	cmp	fp, r4
   2816c:	2affff77 	bcs	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28170:	e59d600c 	ldr	r6, [sp, #12]
   28174:	e044400b 	sub	r4, r4, fp
   28178:	e1a01004 	mov	r1, r4
   2817c:	e1a00006 	mov	r0, r6
   28180:	ebfffc8d 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28184:	e1a01006 	mov	r1, r6
   28188:	e2443001 	sub	r3, r4, #1
   2818c:	e591200c 	ldr	r2, [r1, #12]
   28190:	e2433001 	sub	r3, r3, #1
   28194:	e2820001 	add	r0, r2, #1
   28198:	e581000c 	str	r0, [r1, #12]
   2819c:	e3a00020 	mov	r0, #32
   281a0:	e3730001 	cmn	r3, #1
   281a4:	e5c20000 	strb	r0, [r2]
   281a8:	1afffff7 	bne	2818c <CString::FormatV(char const*, std::__va_list)+0x4fc>
   281ac:	eaffff67 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   281b0:	e3520000 	cmp	r2, #0
   281b4:	03a07008 	moveq	r7, #8
   281b8:	0affff1b 	beq	27e2c <CString::FormatV(char const*, std::__va_list)+0x19c>
   281bc:	e59d700c 	ldr	r7, [sp, #12]
   281c0:	e3a01001 	mov	r1, #1
   281c4:	e1a00007 	mov	r0, r7
   281c8:	ebfffc7b 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   281cc:	e3a02030 	mov	r2, #48	; 0x30
   281d0:	e597300c 	ldr	r3, [r7, #12]
   281d4:	e3560000 	cmp	r6, #0
   281d8:	e2831001 	add	r1, r3, #1
   281dc:	e587100c 	str	r1, [r7, #12]
   281e0:	e5c32000 	strb	r2, [r3]
   281e4:	e1d5a0d0 	ldrsb	sl, [r5]
   281e8:	e3a07008 	mov	r7, #8
   281ec:	0affff10 	beq	27e34 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   281f0:	e3a03000 	mov	r3, #0
   281f4:	e1a01003 	mov	r1, r3
   281f8:	e59d3018 	ldr	r3, [sp, #24]
   281fc:	e1a02007 	mov	r2, r7
   28200:	e2833007 	add	r3, r3, #7
   28204:	e3c33007 	bic	r3, r3, #7
   28208:	e1a00007 	mov	r0, r7
   2820c:	e1c360d0 	ldrd	r6, [r3]
   28210:	e1a08006 	mov	r8, r6
   28214:	e1a09007 	mov	r9, r7
   28218:	e1510007 	cmp	r1, r7
   2821c:	e2833008 	add	r3, r3, #8
   28220:	01520006 	cmpeq	r2, r6
   28224:	e1cd01f0 	strd	r0, [sp, #16]
   28228:	e1cd82f8 	strd	r8, [sp, #40]	; 0x28
   2822c:	e58d3018 	str	r3, [sp, #24]
   28230:	8a0001a5 	bhi	288cc <CString::FormatV(char const*, std::__va_list)+0xc3c>
   28234:	e58da020 	str	sl, [sp, #32]
   28238:	e58d4030 	str	r4, [sp, #48]	; 0x30
   2823c:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28240:	e3a06001 	mov	r6, #1
   28244:	e3a07000 	mov	r7, #0
   28248:	e1a0a008 	mov	sl, r8
   2824c:	e1a0b009 	mov	fp, r9
   28250:	e1a04002 	mov	r4, r2
   28254:	e1a05001 	mov	r5, r1
   28258:	e0030596 	mul	r3, r6, r5
   2825c:	e0233794 	mla	r3, r4, r7, r3
   28260:	e0876496 	umull	r6, r7, r6, r4
   28264:	e0837007 	add	r7, r3, r7
   28268:	e1a02006 	mov	r2, r6
   2826c:	e1a03007 	mov	r3, r7
   28270:	e1a0000a 	mov	r0, sl
   28274:	e1a0100b 	mov	r1, fp
   28278:	eb005e60 	bl	3fc00 <__aeabi_uldivmod>
   2827c:	e1550001 	cmp	r5, r1
   28280:	01540000 	cmpeq	r4, r0
   28284:	e1a08000 	mov	r8, r0
   28288:	e1a09001 	mov	r9, r1
   2828c:	9afffff1 	bls	28258 <CString::FormatV(char const*, std::__va_list)+0x5c8>
   28290:	e59da020 	ldr	sl, [sp, #32]
   28294:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28298:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   2829c:	e35a0058 	cmp	sl, #88	; 0x58
   282a0:	e28d303c 	add	r3, sp, #60	; 0x3c
   282a4:	e58d4030 	str	r4, [sp, #48]	; 0x30
   282a8:	e58d5034 	str	r5, [sp, #52]	; 0x34
   282ac:	e58d3020 	str	r3, [sp, #32]
   282b0:	13a0b057 	movne	fp, #87	; 0x57
   282b4:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   282b8:	03a0b037 	moveq	fp, #55	; 0x37
   282bc:	e1a0a003 	mov	sl, r3
   282c0:	ea000006 	b	282e0 <CString::FormatV(char const*, std::__va_list)+0x650>
   282c4:	e1a02000 	mov	r2, r0
   282c8:	e1a03001 	mov	r3, r1
   282cc:	e1a00004 	mov	r0, r4
   282d0:	e1a01005 	mov	r1, r5
   282d4:	eb005e49 	bl	3fc00 <__aeabi_uldivmod>
   282d8:	e1a08000 	mov	r8, r0
   282dc:	e1a09001 	mov	r9, r1
   282e0:	e1a00004 	mov	r0, r4
   282e4:	e1a01005 	mov	r1, r5
   282e8:	e1a02006 	mov	r2, r6
   282ec:	e1a03007 	mov	r3, r7
   282f0:	eb005e42 	bl	3fc00 <__aeabi_uldivmod>
   282f4:	e3590000 	cmp	r9, #0
   282f8:	03580009 	cmpeq	r8, #9
   282fc:	e1a05003 	mov	r5, r3
   28300:	e2883030 	add	r3, r8, #48	; 0x30
   28304:	808b8008 	addhi	r8, fp, r8
   28308:	96af8073 	sxtbls	r8, r3
   2830c:	86af8078 	sxtbhi	r8, r8
   28310:	e28aa001 	add	sl, sl, #1
   28314:	e1a00006 	mov	r0, r6
   28318:	e1a01007 	mov	r1, r7
   2831c:	e1a04002 	mov	r4, r2
   28320:	e1cd21d0 	ldrd	r2, [sp, #16]
   28324:	e54a8001 	strb	r8, [sl, #-1]
   28328:	eb005e34 	bl	3fc00 <__aeabi_uldivmod>
   2832c:	e1a06000 	mov	r6, r0
   28330:	e1a07001 	mov	r7, r1
   28334:	e1963007 	orrs	r3, r6, r7
   28338:	1affffe1 	bne	282c4 <CString::FormatV(char const*, std::__va_list)+0x634>
   2833c:	e3a03000 	mov	r3, #0
   28340:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28344:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28348:	e5ca3000 	strb	r3, [sl]
   2834c:	eafffee2 	b	27edc <CString::FormatV(char const*, std::__va_list)+0x24c>
   28350:	e59d301c 	ldr	r3, [sp, #28]
   28354:	e3530000 	cmp	r3, #0
   28358:	e59d3018 	ldr	r3, [sp, #24]
   2835c:	e2836004 	add	r6, r3, #4
   28360:	e1d370d0 	ldrsb	r7, [r3]
   28364:	1a000098 	bne	285cc <CString::FormatV(char const*, std::__va_list)+0x93c>
   28368:	e3540001 	cmp	r4, #1
   2836c:	9a00000d 	bls	283a8 <CString::FormatV(char const*, std::__va_list)+0x718>
   28370:	e59d800c 	ldr	r8, [sp, #12]
   28374:	e2441001 	sub	r1, r4, #1
   28378:	e1a00008 	mov	r0, r8
   2837c:	ebfffc0e 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28380:	e1a02008 	mov	r2, r8
   28384:	e2444002 	sub	r4, r4, #2
   28388:	e592300c 	ldr	r3, [r2, #12]
   2838c:	e2444001 	sub	r4, r4, #1
   28390:	e2831001 	add	r1, r3, #1
   28394:	e582100c 	str	r1, [r2, #12]
   28398:	e3a01020 	mov	r1, #32
   2839c:	e3740001 	cmn	r4, #1
   283a0:	e5c31000 	strb	r1, [r3]
   283a4:	1afffff7 	bne	28388 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   283a8:	e59d400c 	ldr	r4, [sp, #12]
   283ac:	e3a01001 	mov	r1, #1
   283b0:	e1a00004 	mov	r0, r4
   283b4:	ebfffc00 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   283b8:	e594300c 	ldr	r3, [r4, #12]
   283bc:	e58d6018 	str	r6, [sp, #24]
   283c0:	e2832001 	add	r2, r3, #1
   283c4:	e584200c 	str	r2, [r4, #12]
   283c8:	e5c37000 	strb	r7, [r3]
   283cc:	eafffedf 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   283d0:	e3520000 	cmp	r2, #0
   283d4:	03a07010 	moveq	r7, #16
   283d8:	0afffe93 	beq	27e2c <CString::FormatV(char const*, std::__va_list)+0x19c>
   283dc:	e59f3544 	ldr	r3, [pc, #1348]	; 28928 <CString::FormatV(char const*, std::__va_list)+0xc98>
   283e0:	e35a0058 	cmp	sl, #88	; 0x58
   283e4:	e59f1540 	ldr	r1, [pc, #1344]	; 2892c <CString::FormatV(char const*, std::__va_list)+0xc9c>
   283e8:	e59d000c 	ldr	r0, [sp, #12]
   283ec:	11a01003 	movne	r1, r3
   283f0:	ebfffc97 	bl	27654 <CString::PutString(char const*)>
   283f4:	e3a07010 	mov	r7, #16
   283f8:	e1d5a0d0 	ldrsb	sl, [r5]
   283fc:	eafffe8a 	b	27e2c <CString::FormatV(char const*, std::__va_list)+0x19c>
   28400:	e59d600c 	ldr	r6, [sp, #12]
   28404:	e3a01001 	mov	r1, #1
   28408:	e1a00006 	mov	r0, r6
   2840c:	ebfffbea 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28410:	e3a01001 	mov	r1, #1
   28414:	e596300c 	ldr	r3, [r6, #12]
   28418:	e1a00006 	mov	r0, r6
   2841c:	e0832001 	add	r2, r3, r1
   28420:	e586200c 	str	r2, [r6, #12]
   28424:	e3a02025 	mov	r2, #37	; 0x25
   28428:	e5c32000 	strb	r2, [r3]
   2842c:	e1d540d0 	ldrsb	r4, [r5]
   28430:	ebfffbe1 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28434:	e596300c 	ldr	r3, [r6, #12]
   28438:	e2832001 	add	r2, r3, #1
   2843c:	e586200c 	str	r2, [r6, #12]
   28440:	e5c34000 	strb	r4, [r3]
   28444:	eafffec1 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28448:	e59d600c 	ldr	r6, [sp, #12]
   2844c:	e3a01001 	mov	r1, #1
   28450:	e1a00006 	mov	r0, r6
   28454:	ebfffbd8 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28458:	e596300c 	ldr	r3, [r6, #12]
   2845c:	e2832001 	add	r2, r3, #1
   28460:	e586200c 	str	r2, [r6, #12]
   28464:	e5c34000 	strb	r4, [r3]
   28468:	eafffeb8 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   2846c:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28470:	e35a006c 	cmp	sl, #108	; 0x6c
   28474:	03a06001 	moveq	r6, #1
   28478:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   2847c:	00855006 	addeq	r5, r5, r6
   28480:	13a06000 	movne	r6, #0
   28484:	e2855001 	add	r5, r5, #1
   28488:	eafffe41 	b	27d94 <CString::FormatV(char const*, std::__va_list)+0x104>
   2848c:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28490:	e3a01000 	mov	r1, #0
   28494:	e24a3030 	sub	r3, sl, #48	; 0x30
   28498:	e6ef3073 	uxtb	r3, r3
   2849c:	e3530009 	cmp	r3, #9
   284a0:	e2855001 	add	r5, r5, #1
   284a4:	8afffe37 	bhi	27d88 <CString::FormatV(char const*, std::__va_list)+0xf8>
   284a8:	e0811101 	add	r1, r1, r1, lsl #2
   284ac:	e08a1081 	add	r1, sl, r1, lsl #1
   284b0:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   284b4:	e2411030 	sub	r1, r1, #48	; 0x30
   284b8:	e24a3030 	sub	r3, sl, #48	; 0x30
   284bc:	e6ef3073 	uxtb	r3, r3
   284c0:	e3530009 	cmp	r3, #9
   284c4:	9afffff7 	bls	284a8 <CString::FormatV(char const*, std::__va_list)+0x818>
   284c8:	eafffe2e 	b	27d88 <CString::FormatV(char const*, std::__va_list)+0xf8>
   284cc:	e59d400c 	ldr	r4, [sp, #12]
   284d0:	e3a01001 	mov	r1, #1
   284d4:	e1a00004 	mov	r0, r4
   284d8:	ebfffbb7 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   284dc:	e594300c 	ldr	r3, [r4, #12]
   284e0:	e2855002 	add	r5, r5, #2
   284e4:	e2832001 	add	r2, r3, #1
   284e8:	e584200c 	str	r2, [r4, #12]
   284ec:	e5c36000 	strb	r6, [r3]
   284f0:	eafffdf7 	b	27cd4 <CString::FormatV(char const*, std::__va_list)+0x44>
   284f4:	e59d700c 	ldr	r7, [sp, #12]
   284f8:	e59d1020 	ldr	r1, [sp, #32]
   284fc:	e1a00007 	mov	r0, r7
   28500:	ebfffc53 	bl	27654 <CString::PutString(char const*)>
   28504:	e1560004 	cmp	r6, r4
   28508:	2afffe90 	bcs	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   2850c:	e0444006 	sub	r4, r4, r6
   28510:	e1a01004 	mov	r1, r4
   28514:	e1a00007 	mov	r0, r7
   28518:	ebfffba7 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2851c:	e1a01007 	mov	r1, r7
   28520:	e2443001 	sub	r3, r4, #1
   28524:	e591200c 	ldr	r2, [r1, #12]
   28528:	e2433001 	sub	r3, r3, #1
   2852c:	e2820001 	add	r0, r2, #1
   28530:	e581000c 	str	r0, [r1, #12]
   28534:	e3a00020 	mov	r0, #32
   28538:	e3730001 	cmn	r3, #1
   2853c:	e5c20000 	strb	r0, [r2]
   28540:	1afffff7 	bne	28524 <CString::FormatV(char const*, std::__va_list)+0x894>
   28544:	eafffe81 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28548:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2854c:	e3530000 	cmp	r3, #0
   28550:	1a0000b8 	bne	28838 <CString::FormatV(char const*, std::__va_list)+0xba8>
   28554:	e15b0004 	cmp	fp, r4
   28558:	2a00000e 	bcs	28598 <CString::FormatV(char const*, std::__va_list)+0x908>
   2855c:	e59d600c 	ldr	r6, [sp, #12]
   28560:	e044400b 	sub	r4, r4, fp
   28564:	e1a01004 	mov	r1, r4
   28568:	e1a00006 	mov	r0, r6
   2856c:	ebfffb92 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28570:	e1a01006 	mov	r1, r6
   28574:	e2443001 	sub	r3, r4, #1
   28578:	e591200c 	ldr	r2, [r1, #12]
   2857c:	e2433001 	sub	r3, r3, #1
   28580:	e2820001 	add	r0, r2, #1
   28584:	e581000c 	str	r0, [r1, #12]
   28588:	e3a00020 	mov	r0, #32
   2858c:	e3730001 	cmn	r3, #1
   28590:	e5c20000 	strb	r0, [r2]
   28594:	1afffff7 	bne	28578 <CString::FormatV(char const*, std::__va_list)+0x8e8>
   28598:	e59d3010 	ldr	r3, [sp, #16]
   2859c:	e3530000 	cmp	r3, #0
   285a0:	0afffe67 	beq	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   285a4:	e59d400c 	ldr	r4, [sp, #12]
   285a8:	e3a01001 	mov	r1, #1
   285ac:	e1a00004 	mov	r0, r4
   285b0:	ebfffb81 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   285b4:	e3a0202d 	mov	r2, #45	; 0x2d
   285b8:	e594300c 	ldr	r3, [r4, #12]
   285bc:	e2831001 	add	r1, r3, #1
   285c0:	e584100c 	str	r1, [r4, #12]
   285c4:	e5c32000 	strb	r2, [r3]
   285c8:	eafffe5d 	b	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   285cc:	e59d800c 	ldr	r8, [sp, #12]
   285d0:	e3a01001 	mov	r1, #1
   285d4:	e1a00008 	mov	r0, r8
   285d8:	ebfffb77 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   285dc:	e598300c 	ldr	r3, [r8, #12]
   285e0:	e3540001 	cmp	r4, #1
   285e4:	e2832001 	add	r2, r3, #1
   285e8:	e588200c 	str	r2, [r8, #12]
   285ec:	e1a00008 	mov	r0, r8
   285f0:	e5c37000 	strb	r7, [r3]
   285f4:	9a00000c 	bls	2862c <CString::FormatV(char const*, std::__va_list)+0x99c>
   285f8:	e2441001 	sub	r1, r4, #1
   285fc:	ebfffb6e 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28600:	e1a07008 	mov	r7, r8
   28604:	e1a02008 	mov	r2, r8
   28608:	e2444002 	sub	r4, r4, #2
   2860c:	e592300c 	ldr	r3, [r2, #12]
   28610:	e2444001 	sub	r4, r4, #1
   28614:	e2831001 	add	r1, r3, #1
   28618:	e582100c 	str	r1, [r2, #12]
   2861c:	e3a01020 	mov	r1, #32
   28620:	e3740001 	cmn	r4, #1
   28624:	e5c31000 	strb	r1, [r3]
   28628:	1afffff7 	bne	2860c <CString::FormatV(char const*, std::__va_list)+0x97c>
   2862c:	e58d6018 	str	r6, [sp, #24]
   28630:	eafffe46 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28634:	e2833007 	add	r3, r3, #7
   28638:	e3c33007 	bic	r3, r3, #7
   2863c:	e1c300d0 	ldrd	r0, [r3]
   28640:	e3500000 	cmp	r0, #0
   28644:	e2d12000 	sbcs	r2, r1, #0
   28648:	a3a0b000 	movge	fp, #0
   2864c:	e2833008 	add	r3, r3, #8
   28650:	e58d3018 	str	r3, [sp, #24]
   28654:	a58db010 	strge	fp, [sp, #16]
   28658:	aa000005 	bge	28674 <CString::FormatV(char const*, std::__va_list)+0x9e4>
   2865c:	e2702000 	rsbs	r2, r0, #0
   28660:	e2e13000 	rsc	r3, r1, #0
   28664:	e3a0b001 	mov	fp, #1
   28668:	e1a00002 	mov	r0, r2
   2866c:	e1a01003 	mov	r1, r3
   28670:	e58db010 	str	fp, [sp, #16]
   28674:	e1a03001 	mov	r3, r1
   28678:	e1a02000 	mov	r2, r0
   2867c:	e350000a 	cmp	r0, #10
   28680:	e1cd22f8 	strd	r2, [sp, #40]	; 0x28
   28684:	e2d33000 	sbcs	r3, r3, #0
   28688:	ba00009d 	blt	28904 <CString::FormatV(char const*, std::__va_list)+0xc74>
   2868c:	e58d4020 	str	r4, [sp, #32]
   28690:	e58d5030 	str	r5, [sp, #48]	; 0x30
   28694:	e3a08001 	mov	r8, #1
   28698:	e3a09000 	mov	r9, #0
   2869c:	e3a0a00a 	mov	sl, #10
   286a0:	e1a04000 	mov	r4, r0
   286a4:	e1a05001 	mov	r5, r1
   286a8:	e003099a 	mul	r3, sl, r9
   286ac:	e0898a98 	umull	r8, r9, r8, sl
   286b0:	e0839009 	add	r9, r3, r9
   286b4:	e1a02008 	mov	r2, r8
   286b8:	e1a03009 	mov	r3, r9
   286bc:	e1a00004 	mov	r0, r4
   286c0:	e1a01005 	mov	r1, r5
   286c4:	eb005d4d 	bl	3fc00 <__aeabi_uldivmod>
   286c8:	e3510000 	cmp	r1, #0
   286cc:	03500009 	cmpeq	r0, #9
   286d0:	e1a06000 	mov	r6, r0
   286d4:	e1a07001 	mov	r7, r1
   286d8:	8afffff2 	bhi	286a8 <CString::FormatV(char const*, std::__va_list)+0xa18>
   286dc:	e59d4020 	ldr	r4, [sp, #32]
   286e0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   286e4:	e28d303c 	add	r3, sp, #60	; 0x3c
   286e8:	e58d4030 	str	r4, [sp, #48]	; 0x30
   286ec:	e58d5034 	str	r5, [sp, #52]	; 0x34
   286f0:	e58d3020 	str	r3, [sp, #32]
   286f4:	e1a0a003 	mov	sl, r3
   286f8:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   286fc:	ea000006 	b	2871c <CString::FormatV(char const*, std::__va_list)+0xa8c>
   28700:	e1a02000 	mov	r2, r0
   28704:	e1a03001 	mov	r3, r1
   28708:	e1a00004 	mov	r0, r4
   2870c:	e1a01005 	mov	r1, r5
   28710:	eb005d3a 	bl	3fc00 <__aeabi_uldivmod>
   28714:	e1a06000 	mov	r6, r0
   28718:	e1a07001 	mov	r7, r1
   2871c:	e1a00004 	mov	r0, r4
   28720:	e1a01005 	mov	r1, r5
   28724:	e1a02008 	mov	r2, r8
   28728:	e1a03009 	mov	r3, r9
   2872c:	eb005d33 	bl	3fc00 <__aeabi_uldivmod>
   28730:	e3570000 	cmp	r7, #0
   28734:	03560009 	cmpeq	r6, #9
   28738:	e1a05003 	mov	r5, r3
   2873c:	e2863030 	add	r3, r6, #48	; 0x30
   28740:	82866057 	addhi	r6, r6, #87	; 0x57
   28744:	96af6073 	sxtbls	r6, r3
   28748:	86af6076 	sxtbhi	r6, r6
   2874c:	e28aa001 	add	sl, sl, #1
   28750:	e1a00008 	mov	r0, r8
   28754:	e1a01009 	mov	r1, r9
   28758:	e3a03000 	mov	r3, #0
   2875c:	e1a04002 	mov	r4, r2
   28760:	e54a6001 	strb	r6, [sl, #-1]
   28764:	e3a0200a 	mov	r2, #10
   28768:	eb005d24 	bl	3fc00 <__aeabi_uldivmod>
   2876c:	e1a08000 	mov	r8, r0
   28770:	e1a09001 	mov	r9, r1
   28774:	e1983009 	orrs	r3, r8, r9
   28778:	1affffe0 	bne	28700 <CString::FormatV(char const*, std::__va_list)+0xa70>
   2877c:	e3a03000 	mov	r3, #0
   28780:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28784:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28788:	e5ca3000 	strb	r3, [sl]
   2878c:	eafffe69 	b	28138 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   28790:	e1a01008 	mov	r1, r8
   28794:	e59d800c 	ldr	r8, [sp, #12]
   28798:	e1a00008 	mov	r0, r8
   2879c:	ebfffbac 	bl	27654 <CString::PutString(char const*)>
   287a0:	e1570004 	cmp	r7, r4
   287a4:	2affffa0 	bcs	2862c <CString::FormatV(char const*, std::__va_list)+0x99c>
   287a8:	e0444007 	sub	r4, r4, r7
   287ac:	e1a01004 	mov	r1, r4
   287b0:	e1a00008 	mov	r0, r8
   287b4:	ebfffb00 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   287b8:	e1a01008 	mov	r1, r8
   287bc:	e2443001 	sub	r3, r4, #1
   287c0:	e591200c 	ldr	r2, [r1, #12]
   287c4:	e2433001 	sub	r3, r3, #1
   287c8:	e2820001 	add	r0, r2, #1
   287cc:	e581000c 	str	r0, [r1, #12]
   287d0:	e3a00020 	mov	r0, #32
   287d4:	e3730001 	cmn	r3, #1
   287d8:	e5c20000 	strb	r0, [r2]
   287dc:	1afffff7 	bne	287c0 <CString::FormatV(char const*, std::__va_list)+0xb30>
   287e0:	eaffff91 	b	2862c <CString::FormatV(char const*, std::__va_list)+0x99c>
   287e4:	e59d700c 	ldr	r7, [sp, #12]
   287e8:	e59d1020 	ldr	r1, [sp, #32]
   287ec:	e1a00007 	mov	r0, r7
   287f0:	ebfffb97 	bl	27654 <CString::PutString(char const*)>
   287f4:	e1560004 	cmp	r6, r4
   287f8:	2afffdd4 	bcs	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   287fc:	e0444006 	sub	r4, r4, r6
   28800:	e1a01004 	mov	r1, r4
   28804:	e1a00007 	mov	r0, r7
   28808:	ebfffaeb 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2880c:	e1a01007 	mov	r1, r7
   28810:	e2443001 	sub	r3, r4, #1
   28814:	e591200c 	ldr	r2, [r1, #12]
   28818:	e2433001 	sub	r3, r3, #1
   2881c:	e2820001 	add	r0, r2, #1
   28820:	e581000c 	str	r0, [r1, #12]
   28824:	e3a00020 	mov	r0, #32
   28828:	e3730001 	cmn	r3, #1
   2882c:	e5c20000 	strb	r0, [r2]
   28830:	1afffff7 	bne	28814 <CString::FormatV(char const*, std::__va_list)+0xb84>
   28834:	eafffdc5 	b	27f50 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28838:	e59d3010 	ldr	r3, [sp, #16]
   2883c:	e3530000 	cmp	r3, #0
   28840:	1a000025 	bne	288dc <CString::FormatV(char const*, std::__va_list)+0xc4c>
   28844:	e15b0004 	cmp	fp, r4
   28848:	2afffdbd 	bcs	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2884c:	e59d600c 	ldr	r6, [sp, #12]
   28850:	e044400b 	sub	r4, r4, fp
   28854:	e1a01004 	mov	r1, r4
   28858:	e1a00006 	mov	r0, r6
   2885c:	ebfffad6 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28860:	e3a00030 	mov	r0, #48	; 0x30
   28864:	e1a01006 	mov	r1, r6
   28868:	e2443001 	sub	r3, r4, #1
   2886c:	e591200c 	ldr	r2, [r1, #12]
   28870:	e2433001 	sub	r3, r3, #1
   28874:	e282c001 	add	ip, r2, #1
   28878:	e3730001 	cmn	r3, #1
   2887c:	e581c00c 	str	ip, [r1, #12]
   28880:	e5c20000 	strb	r0, [r2]
   28884:	1afffff8 	bne	2886c <CString::FormatV(char const*, std::__va_list)+0xbdc>
   28888:	eafffdad 	b	27f44 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2888c:	e59d600c 	ldr	r6, [sp, #12]
   28890:	e3a01001 	mov	r1, #1
   28894:	e1a00006 	mov	r0, r6
   28898:	ebfffac7 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2889c:	e3a0202d 	mov	r2, #45	; 0x2d
   288a0:	e596300c 	ldr	r3, [r6, #12]
   288a4:	e2831001 	add	r1, r3, #1
   288a8:	e586100c 	str	r1, [r6, #12]
   288ac:	e5c32000 	strb	r2, [r3]
   288b0:	eafffe29 	b	2815c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   288b4:	e1a09006 	mov	r9, r6
   288b8:	e3a0b001 	mov	fp, #1
   288bc:	eafffd6a 	b	27e6c <CString::FormatV(char const*, std::__va_list)+0x1dc>
   288c0:	e3a0b000 	mov	fp, #0
   288c4:	e58db010 	str	fp, [sp, #16]
   288c8:	eafffdf6 	b	280a8 <CString::FormatV(char const*, std::__va_list)+0x418>
   288cc:	e1cd82d8 	ldrd	r8, [sp, #40]	; 0x28
   288d0:	e3a06001 	mov	r6, #1
   288d4:	e3a07000 	mov	r7, #0
   288d8:	eafffe6f 	b	2829c <CString::FormatV(char const*, std::__va_list)+0x60c>
   288dc:	e59d600c 	ldr	r6, [sp, #12]
   288e0:	e3a01001 	mov	r1, #1
   288e4:	e1a00006 	mov	r0, r6
   288e8:	ebfffab3 	bl	273bc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   288ec:	e3a0202d 	mov	r2, #45	; 0x2d
   288f0:	e596300c 	ldr	r3, [r6, #12]
   288f4:	e2831001 	add	r1, r3, #1
   288f8:	e586100c 	str	r1, [r6, #12]
   288fc:	e5c32000 	strb	r2, [r3]
   28900:	eaffffcf 	b	28844 <CString::FormatV(char const*, std::__va_list)+0xbb4>
   28904:	e1a06000 	mov	r6, r0
   28908:	e1a07001 	mov	r7, r1
   2890c:	e3a08001 	mov	r8, #1
   28910:	e3a09000 	mov	r9, #0
   28914:	eaffff72 	b	286e4 <CString::FormatV(char const*, std::__va_list)+0xa54>
   28918:	e1a09007 	mov	r9, r7
   2891c:	e3a08001 	mov	r8, #1
   28920:	eafffdec 	b	280d8 <CString::FormatV(char const*, std::__va_list)+0x448>
   28924:	cccccccd 	.word	0xcccccccd
   28928:	00046ef0 	.word	0x00046ef0
   2892c:	00046eec 	.word	0x00046eec

00028930 <CString::Format(char const*, ...)>:
   28930:	e92d000e 	push	{r1, r2, r3}
   28934:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28938:	e24dd008 	sub	sp, sp, #8
   2893c:	e28d3010 	add	r3, sp, #16
   28940:	e1a02003 	mov	r2, r3
   28944:	e59d100c 	ldr	r1, [sp, #12]
   28948:	e58d3004 	str	r3, [sp, #4]
   2894c:	ebfffccf 	bl	27c90 <CString::FormatV(char const*, std::__va_list)>
   28950:	e28dd008 	add	sp, sp, #8
   28954:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   28958:	e28dd00c 	add	sp, sp, #12
   2895c:	e12fff1e 	bx	lr

00028960 <__aeabi_atexit>:
   28960:	e12fff1e 	bx	lr

00028964 <__errno>:
   28964:	e59f0000 	ldr	r0, [pc]	; 2896c <__errno+0x8>
   28968:	e12fff1e 	bx	lr
   2896c:	00050170 	.word	0x00050170

00028970 <set_qemu_exit_status>:
   28970:	e59f3004 	ldr	r3, [pc, #4]	; 2897c <set_qemu_exit_status+0xc>
   28974:	e5830008 	str	r0, [r3, #8]
   28978:	e12fff1e 	bx	lr
   2897c:	0005016c 	.word	0x0005016c

00028980 <halt>:
   28980:	f10c0080 	cpsid	i
   28984:	f10c0040 	cpsid	f
   28988:	eafffffe 	b	28988 <halt+0x8>

0002898c <reboot>:
   2898c:	e3a03000 	mov	r3, #0
   28990:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28994:	e59f3010 	ldr	r3, [pc, #16]	; 289ac <reboot+0x20>
   28998:	e59f1010 	ldr	r1, [pc, #16]	; 289b0 <reboot+0x24>
   2899c:	e59f2010 	ldr	r2, [pc, #16]	; 289b4 <reboot+0x28>
   289a0:	e5831024 	str	r1, [r3, #36]	; 0x24
   289a4:	e583201c 	str	r2, [r3, #28]
   289a8:	eafffffe 	b	289a8 <reboot+0x1c>
   289ac:	20100000 	.word	0x20100000
   289b0:	5a000001 	.word	0x5a000001
   289b4:	5a000020 	.word	0x5a000020

000289b8 <sysinit>:
   289b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   289bc:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   289c0:	f1080040 	cpsie	f
   289c4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   289c8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   289cc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   289d0:	e3a04000 	mov	r4, #0
   289d4:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   289d8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   289dc:	eee83a10 	vmsr	fpexc, r3
   289e0:	e3a03402 	mov	r3, #33554432	; 0x2000000
   289e4:	eee13a10 	vmsr	fpscr, r3
   289e8:	e59f0088 	ldr	r0, [pc, #136]	; 28a78 <sysinit+0xc0>
   289ec:	e59f2088 	ldr	r2, [pc, #136]	; 28a7c <sysinit+0xc4>
   289f0:	e1a01004 	mov	r1, r4
   289f4:	e0422000 	sub	r2, r2, r0
   289f8:	eb00037d 	bl	297f4 <memset>
   289fc:	e1a0000d 	mov	r0, sp
   28a00:	ebfff798 	bl	26868 <CMachineInfo::CMachineInfo()>
   28a04:	e28d001c 	add	r0, sp, #28
   28a08:	e3a01001 	mov	r1, #1
   28a0c:	eb000a05 	bl	2b228 <CMemorySystem::CMemorySystem(bool)>
   28a10:	e59f5068 	ldr	r5, [pc, #104]	; 28a80 <sysinit+0xc8>
   28a14:	e59f3068 	ldr	r3, [pc, #104]	; 28a84 <sysinit+0xcc>
   28a18:	e1550003 	cmp	r5, r3
   28a1c:	31e06005 	mvncc	r6, r5
   28a20:	30866003 	addcc	r6, r6, r3
   28a24:	31a06126 	lsrcc	r6, r6, #2
   28a28:	32866001 	addcc	r6, r6, #1
   28a2c:	2a000004 	bcs	28a44 <sysinit+0x8c>
   28a30:	e2844001 	add	r4, r4, #1
   28a34:	e4953004 	ldr	r3, [r5], #4
   28a38:	e12fff33 	blx	r3
   28a3c:	e1540006 	cmp	r4, r6
   28a40:	1afffffa 	bne	28a30 <sysinit+0x78>
   28a44:	ebff7d87 	bl	8068 <main>
   28a48:	e3500001 	cmp	r0, #1
   28a4c:	0a000000 	beq	28a54 <sysinit+0x9c>
   28a50:	ebffffca 	bl	28980 <halt>
   28a54:	eb0006c3 	bl	2a568 <IsChainBootEnabled>
   28a58:	e3500000 	cmp	r0, #0
   28a5c:	1a000000 	bne	28a64 <sysinit+0xac>
   28a60:	ebffffc9 	bl	2898c <reboot>
   28a64:	e28d001c 	add	r0, sp, #28
   28a68:	eb000a4f 	bl	2b3ac <CMemorySystem::Destructor()>
   28a6c:	f10c0040 	cpsid	f
   28a70:	eb0006c2 	bl	2a580 <DoChainBoot>
   28a74:	eafffff9 	b	28a60 <sysinit+0xa8>
   28a78:	00050120 	.word	0x00050120
   28a7c:	0005f030 	.word	0x0005f030
   28a80:	00049960 	.word	0x00049960
   28a84:	00049970 	.word	0x00049970

00028a88 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
   28a88:	e2800001 	add	r0, r0, #1
   28a8c:	e3a03000 	mov	r3, #0
   28a90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28a94:	e59f3020 	ldr	r3, [pc, #32]	; 28abc <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x34>
   28a98:	e1a01003 	mov	r1, r3
   28a9c:	e5932004 	ldr	r2, [r3, #4]
   28aa0:	e5913004 	ldr	r3, [r1, #4]
   28aa4:	e0433002 	sub	r3, r3, r2
   28aa8:	e1500003 	cmp	r0, r3
   28aac:	8afffffb 	bhi	28aa0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x18>
   28ab0:	e3a03000 	mov	r3, #0
   28ab4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28ab8:	e12fff1e 	bx	lr
   28abc:	20003000 	.word	0x20003000

00028ac0 <CTimer::CTimer(CInterruptSystem*)>:
   28ac0:	e92d4070 	push	{r4, r5, r6, lr}
   28ac4:	e3a05000 	mov	r5, #0
   28ac8:	e3a06001 	mov	r6, #1
   28acc:	e1a04000 	mov	r4, r0
   28ad0:	e5805004 	str	r5, [r0, #4]
   28ad4:	e5801000 	str	r1, [r0]
   28ad8:	e5805008 	str	r5, [r0, #8]
   28adc:	e5805014 	str	r5, [r0, #20]
   28ae0:	e5806010 	str	r6, [r0, #16]
   28ae4:	e580500c 	str	r5, [r0, #12]
   28ae8:	e2800018 	add	r0, r0, #24
   28aec:	eb000e0b 	bl	2c320 <CPtrList::CPtrList()>
   28af0:	e3a020c8 	mov	r2, #200	; 0xc8
   28af4:	e59f3038 	ldr	r3, [pc, #56]	; 28b34 <CTimer::CTimer(CInterruptSystem*)+0x74>
   28af8:	e59f1038 	ldr	r1, [pc, #56]	; 28b38 <CTimer::CTimer(CInterruptSystem*)+0x78>
   28afc:	e5930000 	ldr	r0, [r3]
   28b00:	e584601c 	str	r6, [r4, #28]
   28b04:	e1500005 	cmp	r0, r5
   28b08:	e5845038 	str	r5, [r4, #56]	; 0x38
   28b0c:	e5841020 	str	r1, [r4, #32]
   28b10:	e5842024 	str	r2, [r4, #36]	; 0x24
   28b14:	1a000002 	bne	28b24 <CTimer::CTimer(CInterruptSystem*)+0x64>
   28b18:	e5834000 	str	r4, [r3]
   28b1c:	e1a00004 	mov	r0, r4
   28b20:	e8bd8070 	pop	{r4, r5, r6, pc}
   28b24:	e3a02041 	mov	r2, #65	; 0x41
   28b28:	e59f100c 	ldr	r1, [pc, #12]	; 28b3c <CTimer::CTimer(CInterruptSystem*)+0x7c>
   28b2c:	e59f000c 	ldr	r0, [pc, #12]	; 28b40 <CTimer::CTimer(CInterruptSystem*)+0x80>
   28b30:	ebffed63 	bl	240c4 <assertion_failed>
   28b34:	00050178 	.word	0x00050178
   28b38:	00030d40 	.word	0x00030d40
   28b3c:	00046f2c 	.word	0x00046f2c
   28b40:	00045110 	.word	0x00045110

00028b44 <CTimer::~CTimer()>:
   28b44:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28b48:	e1a09000 	mov	r9, r0
   28b4c:	e5900000 	ldr	r0, [r0]
   28b50:	e3500000 	cmp	r0, #0
   28b54:	0a000028 	beq	28bfc <CTimer::~CTimer()+0xb8>
   28b58:	e3a01003 	mov	r1, #3
   28b5c:	e2894018 	add	r4, r9, #24
   28b60:	eb000bda 	bl	2bad0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   28b64:	e1a00004 	mov	r0, r4
   28b68:	eb000dfa 	bl	2c358 <CPtrList::GetFirst()>
   28b6c:	e2505000 	subs	r5, r0, #0
   28b70:	e3a08014 	mov	r8, #20
   28b74:	e59f7090 	ldr	r7, [pc, #144]	; 28c0c <CTimer::~CTimer()+0xc8>
   28b78:	0a000011 	beq	28bc4 <CTimer::~CTimer()+0x80>
   28b7c:	e1a01005 	mov	r1, r5
   28b80:	e1a00004 	mov	r0, r4
   28b84:	eb000e0a 	bl	2c3b4 <CPtrList::GetPtr(TPtrListElement*)>
   28b88:	e2506000 	subs	r6, r0, #0
   28b8c:	0a000012 	beq	28bdc <CTimer::~CTimer()+0x98>
   28b90:	e5963000 	ldr	r3, [r6]
   28b94:	e1530007 	cmp	r3, r7
   28b98:	1a000013 	bne	28bec <CTimer::~CTimer()+0xa8>
   28b9c:	e1a01005 	mov	r1, r5
   28ba0:	e1a00004 	mov	r0, r4
   28ba4:	eb000e89 	bl	2c5d0 <CPtrList::Remove(TPtrListElement*)>
   28ba8:	e1a01008 	mov	r1, r8
   28bac:	e1a00006 	mov	r0, r6
   28bb0:	eb00076d 	bl	2a96c <operator delete(void*, unsigned int)>
   28bb4:	e1a00004 	mov	r0, r4
   28bb8:	eb000de6 	bl	2c358 <CPtrList::GetFirst()>
   28bbc:	e2505000 	subs	r5, r0, #0
   28bc0:	1affffed 	bne	28b7c <CTimer::~CTimer()+0x38>
   28bc4:	e59f3044 	ldr	r3, [pc, #68]	; 28c10 <CTimer::~CTimer()+0xcc>
   28bc8:	e1a00004 	mov	r0, r4
   28bcc:	e5835000 	str	r5, [r3]
   28bd0:	eb000dd5 	bl	2c32c <CPtrList::~CPtrList()>
   28bd4:	e1a00009 	mov	r0, r9
   28bd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28bdc:	e3a02058 	mov	r2, #88	; 0x58
   28be0:	e59f102c 	ldr	r1, [pc, #44]	; 28c14 <CTimer::~CTimer()+0xd0>
   28be4:	e59f002c 	ldr	r0, [pc, #44]	; 28c18 <CTimer::~CTimer()+0xd4>
   28be8:	ebffed35 	bl	240c4 <assertion_failed>
   28bec:	e3a02059 	mov	r2, #89	; 0x59
   28bf0:	e59f101c 	ldr	r1, [pc, #28]	; 28c14 <CTimer::~CTimer()+0xd0>
   28bf4:	e59f0020 	ldr	r0, [pc, #32]	; 28c1c <CTimer::~CTimer()+0xd8>
   28bf8:	ebffed31 	bl	240c4 <assertion_failed>
   28bfc:	e3a02047 	mov	r2, #71	; 0x47
   28c00:	e59f100c 	ldr	r1, [pc, #12]	; 28c14 <CTimer::~CTimer()+0xd0>
   28c04:	e59f0014 	ldr	r0, [pc, #20]	; 28c20 <CTimer::~CTimer()+0xdc>
   28c08:	ebffed2d 	bl	240c4 <assertion_failed>
   28c0c:	4b544d43 	.word	0x4b544d43
   28c10:	00050178 	.word	0x00050178
   28c14:	00046f2c 	.word	0x00046f2c
   28c18:	00042c48 	.word	0x00042c48
   28c1c:	00046f38 	.word	0x00046f38
   28c20:	000408f8 	.word	0x000408f8

00028c24 <CTimer::SetTimeZone(int)>:
   28c24:	e59f2018 	ldr	r2, [pc, #24]	; 28c44 <CTimer::SetTimeZone(int)+0x20>
   28c28:	e2813e59 	add	r3, r1, #1424	; 0x590
   28c2c:	e283300f 	add	r3, r3, #15
   28c30:	e1530002 	cmp	r3, r2
   28c34:	95801014 	strls	r1, [r0, #20]
   28c38:	93a00001 	movls	r0, #1
   28c3c:	83a00000 	movhi	r0, #0
   28c40:	e12fff1e 	bx	lr
   28c44:	00000b3e 	.word	0x00000b3e

00028c48 <CTimer::GetTimeZone() const>:
   28c48:	e5900014 	ldr	r0, [r0, #20]
   28c4c:	e12fff1e 	bx	lr

00028c50 <CTimer::SetTime(unsigned int, bool)>:
   28c50:	e3520000 	cmp	r2, #0
   28c54:	e92d4070 	push	{r4, r5, r6, lr}
   28c58:	e1a04000 	mov	r4, r0
   28c5c:	e1a05001 	mov	r5, r1
   28c60:	1a000004 	bne	28c78 <CTimer::SetTime(unsigned int, bool)+0x28>
   28c64:	e5903014 	ldr	r3, [r0, #20]
   28c68:	e0633203 	rsb	r3, r3, r3, lsl #4
   28c6c:	e1b03103 	lsls	r3, r3, #2
   28c70:	4a00000e 	bmi	28cb0 <CTimer::SetTime(unsigned int, bool)+0x60>
   28c74:	e0855003 	add	r5, r5, r3
   28c78:	e5940010 	ldr	r0, [r4, #16]
   28c7c:	e3500000 	cmp	r0, #0
   28c80:	1a000002 	bne	28c90 <CTimer::SetTime(unsigned int, bool)+0x40>
   28c84:	e3a00001 	mov	r0, #1
   28c88:	e584500c 	str	r5, [r4, #12]
   28c8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   28c90:	eb000a59 	bl	2b5fc <EnterCritical>
   28c94:	e5943010 	ldr	r3, [r4, #16]
   28c98:	e584500c 	str	r5, [r4, #12]
   28c9c:	e3530000 	cmp	r3, #0
   28ca0:	0a000007 	beq	28cc4 <CTimer::SetTime(unsigned int, bool)+0x74>
   28ca4:	eb000a7f 	bl	2b6a8 <LeaveCritical>
   28ca8:	e3a00001 	mov	r0, #1
   28cac:	e8bd8070 	pop	{r4, r5, r6, pc}
   28cb0:	e2631000 	rsb	r1, r3, #0
   28cb4:	e1510005 	cmp	r1, r5
   28cb8:	daffffed 	ble	28c74 <CTimer::SetTime(unsigned int, bool)+0x24>
   28cbc:	e1a00002 	mov	r0, r2
   28cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   28cc4:	e3a00001 	mov	r0, #1
   28cc8:	e8bd8070 	pop	{r4, r5, r6, pc}

00028ccc <CTimer::GetClockTicks()>:
   28ccc:	e3a03000 	mov	r3, #0
   28cd0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28cd4:	e59f2008 	ldr	r2, [pc, #8]	; 28ce4 <CTimer::GetClockTicks()+0x18>
   28cd8:	e5920004 	ldr	r0, [r2, #4]
   28cdc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28ce0:	e12fff1e 	bx	lr
   28ce4:	20003000 	.word	0x20003000

00028ce8 <CTimer::GetTicks() const>:
   28ce8:	e5900004 	ldr	r0, [r0, #4]
   28cec:	e12fff1e 	bx	lr

00028cf0 <CTimer::GetUptime() const>:
   28cf0:	e5900008 	ldr	r0, [r0, #8]
   28cf4:	e12fff1e 	bx	lr

00028cf8 <CTimer::GetTime() const>:
   28cf8:	e590000c 	ldr	r0, [r0, #12]
   28cfc:	e12fff1e 	bx	lr

00028d00 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   28d00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28d04:	e1a04000 	mov	r4, r0
   28d08:	e5900010 	ldr	r0, [r0, #16]
   28d0c:	e1a06001 	mov	r6, r1
   28d10:	e3500000 	cmp	r0, #0
   28d14:	e1a05002 	mov	r5, r2
   28d18:	1a000011 	bne	28d64 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   28d1c:	e594700c 	ldr	r7, [r4, #12]
   28d20:	e5944004 	ldr	r4, [r4, #4]
   28d24:	e3560000 	cmp	r6, #0
   28d28:	0a000016 	beq	28d88 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   28d2c:	e3550000 	cmp	r5, #0
   28d30:	e5867000 	str	r7, [r6]
   28d34:	0a000017 	beq	28d98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   28d38:	e3a00064 	mov	r0, #100	; 0x64
   28d3c:	e59f3064 	ldr	r3, [pc, #100]	; 28da8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa8>
   28d40:	e59f1064 	ldr	r1, [pc, #100]	; 28dac <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   28d44:	e0832493 	umull	r2, r3, r3, r4
   28d48:	e1a032a3 	lsr	r3, r3, #5
   28d4c:	e0030390 	mul	r3, r0, r3
   28d50:	e0444003 	sub	r4, r4, r3
   28d54:	e0040491 	mul	r4, r1, r4
   28d58:	e3a00001 	mov	r0, #1
   28d5c:	e5854000 	str	r4, [r5]
   28d60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d64:	eb000a24 	bl	2b5fc <EnterCritical>
   28d68:	e5943010 	ldr	r3, [r4, #16]
   28d6c:	e594700c 	ldr	r7, [r4, #12]
   28d70:	e3530000 	cmp	r3, #0
   28d74:	e5944004 	ldr	r4, [r4, #4]
   28d78:	0affffe9 	beq	28d24 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   28d7c:	eb000a49 	bl	2b6a8 <LeaveCritical>
   28d80:	e3560000 	cmp	r6, #0
   28d84:	1affffe8 	bne	28d2c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   28d88:	e3a02f41 	mov	r2, #260	; 0x104
   28d8c:	e59f101c 	ldr	r1, [pc, #28]	; 28db0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   28d90:	e59f001c 	ldr	r0, [pc, #28]	; 28db4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   28d94:	ebffecca 	bl	240c4 <assertion_failed>
   28d98:	e59f2018 	ldr	r2, [pc, #24]	; 28db8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   28d9c:	e59f100c 	ldr	r1, [pc, #12]	; 28db0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   28da0:	e59f0014 	ldr	r0, [pc, #20]	; 28dbc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   28da4:	ebffecc6 	bl	240c4 <assertion_failed>
   28da8:	51eb851f 	.word	0x51eb851f
   28dac:	00002710 	.word	0x00002710
   28db0:	00046f2c 	.word	0x00046f2c
   28db4:	00046f60 	.word	0x00046f60
   28db8:	00000107 	.word	0x00000107
   28dbc:	00046f70 	.word	0x00046f70

00028dc0 <CTimer::GetUniversalTime() const>:
   28dc0:	e5903014 	ldr	r3, [r0, #20]
   28dc4:	e590000c 	ldr	r0, [r0, #12]
   28dc8:	e0633203 	rsb	r3, r3, r3, lsl #4
   28dcc:	e1a03103 	lsl	r3, r3, #2
   28dd0:	e1530000 	cmp	r3, r0
   28dd4:	d0400003 	suble	r0, r0, r3
   28dd8:	c3a00000 	movgt	r0, #0
   28ddc:	e12fff1e 	bx	lr

00028de0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   28de0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28de4:	e1a04000 	mov	r4, r0
   28de8:	e5900010 	ldr	r0, [r0, #16]
   28dec:	e1a08001 	mov	r8, r1
   28df0:	e3500000 	cmp	r0, #0
   28df4:	e1a06002 	mov	r6, r2
   28df8:	1a000019 	bne	28e64 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   28dfc:	e594500c 	ldr	r5, [r4, #12]
   28e00:	e5947004 	ldr	r7, [r4, #4]
   28e04:	e5943014 	ldr	r3, [r4, #20]
   28e08:	e0633203 	rsb	r3, r3, r3, lsl #4
   28e0c:	e1a03103 	lsl	r3, r3, #2
   28e10:	e1530005 	cmp	r3, r5
   28e14:	ca000010 	bgt	28e5c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   28e18:	e3580000 	cmp	r8, #0
   28e1c:	0a00001c 	beq	28e94 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb4>
   28e20:	e0453003 	sub	r3, r5, r3
   28e24:	e3560000 	cmp	r6, #0
   28e28:	e5883000 	str	r3, [r8]
   28e2c:	0a000014 	beq	28e84 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   28e30:	e3a03064 	mov	r3, #100	; 0x64
   28e34:	e59f1068 	ldr	r1, [pc, #104]	; 28ea4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc4>
   28e38:	e59f2068 	ldr	r2, [pc, #104]	; 28ea8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   28e3c:	e0810791 	umull	r0, r1, r1, r7
   28e40:	e1a012a1 	lsr	r1, r1, #5
   28e44:	e0030193 	mul	r3, r3, r1
   28e48:	e0473003 	sub	r3, r7, r3
   28e4c:	e0030392 	mul	r3, r2, r3
   28e50:	e3a00001 	mov	r0, #1
   28e54:	e5863000 	str	r3, [r6]
   28e58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28e5c:	e3a00000 	mov	r0, #0
   28e60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28e64:	eb0009e4 	bl	2b5fc <EnterCritical>
   28e68:	e5943010 	ldr	r3, [r4, #16]
   28e6c:	e594500c 	ldr	r5, [r4, #12]
   28e70:	e3530000 	cmp	r3, #0
   28e74:	e5947004 	ldr	r7, [r4, #4]
   28e78:	0affffe1 	beq	28e04 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   28e7c:	eb000a09 	bl	2b6a8 <LeaveCritical>
   28e80:	eaffffdf 	b	28e04 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   28e84:	e3a02f4b 	mov	r2, #300	; 0x12c
   28e88:	e59f101c 	ldr	r1, [pc, #28]	; 28eac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   28e8c:	e59f001c 	ldr	r0, [pc, #28]	; 28eb0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   28e90:	ebffec8b 	bl	240c4 <assertion_failed>
   28e94:	e59f2018 	ldr	r2, [pc, #24]	; 28eb4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   28e98:	e59f100c 	ldr	r1, [pc, #12]	; 28eac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   28e9c:	e59f0014 	ldr	r0, [pc, #20]	; 28eb8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   28ea0:	ebffec87 	bl	240c4 <assertion_failed>
   28ea4:	51eb851f 	.word	0x51eb851f
   28ea8:	00002710 	.word	0x00002710
   28eac:	00046f2c 	.word	0x00046f2c
   28eb0:	00046f70 	.word	0x00046f70
   28eb4:	00000129 	.word	0x00000129
   28eb8:	00046f60 	.word	0x00046f60

00028ebc <CTimer::GetTimeString()>:
   28ebc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ec0:	e1a05000 	mov	r5, r0
   28ec4:	e5900010 	ldr	r0, [r0, #16]
   28ec8:	e24dd014 	sub	sp, sp, #20
   28ecc:	e3500000 	cmp	r0, #0
   28ed0:	1a000065 	bne	2906c <CTimer::GetTimeString()+0x1b0>
   28ed4:	e595400c 	ldr	r4, [r5, #12]
   28ed8:	e5959004 	ldr	r9, [r5, #4]
   28edc:	e1940009 	orrs	r0, r4, r9
   28ee0:	0a00003e 	beq	28fe0 <CTimer::GetTimeString()+0x124>
   28ee4:	e59f61a0 	ldr	r6, [pc, #416]	; 2908c <CTimer::GetTimeString()+0x1d0>
   28ee8:	e59f81a0 	ldr	r8, [pc, #416]	; 29090 <CTimer::GetTimeString()+0x1d4>
   28eec:	e0873496 	umull	r3, r7, r6, r4
   28ef0:	e1a072a7 	lsr	r7, r7, #5
   28ef4:	e0863796 	umull	r3, r6, r6, r7
   28ef8:	e59f3194 	ldr	r3, [pc, #404]	; 29094 <CTimer::GetTimeString()+0x1d8>
   28efc:	e0882498 	umull	r2, r8, r8, r4
   28f00:	e0832493 	umull	r2, r3, r3, r4
   28f04:	e1a062a6 	lsr	r6, r6, #5
   28f08:	e0666206 	rsb	r6, r6, r6, lsl #4
   28f0c:	e0672207 	rsb	r2, r7, r7, lsl #4
   28f10:	e0476106 	sub	r6, r7, r6, lsl #2
   28f14:	e3a0a064 	mov	sl, #100	; 0x64
   28f18:	e0447102 	sub	r7, r4, r2, lsl #2
   28f1c:	e3a0be19 	mov	fp, #400	; 0x190
   28f20:	e59f5170 	ldr	r5, [pc, #368]	; 29098 <CTimer::GetTimeString()+0x1dc>
   28f24:	e59fe170 	ldr	lr, [pc, #368]	; 2909c <CTimer::GetTimeString()+0x1e0>
   28f28:	e59fc170 	ldr	ip, [pc, #368]	; 290a0 <CTimer::GetTimeString()+0x1e4>
   28f2c:	e59f0170 	ldr	r0, [pc, #368]	; 290a4 <CTimer::GetTimeString()+0x1e8>
   28f30:	e1a085a8 	lsr	r8, r8, #11
   28f34:	e1a04823 	lsr	r4, r3, #16
   28f38:	ea00000a 	b	28f68 <CTimer::GetTimeString()+0xac>
   28f3c:	e001019b 	mul	r1, fp, r1
   28f40:	e0451001 	sub	r1, r5, r1
   28f44:	e16f1f11 	clz	r1, r1
   28f48:	e1a012a1 	lsr	r1, r1, #5
   28f4c:	e3510000 	cmp	r1, #0
   28f50:	01a0300c 	moveq	r3, ip
   28f54:	11a03000 	movne	r3, r0
   28f58:	e1540003 	cmp	r4, r3
   28f5c:	3a000021 	bcc	28fe8 <CTimer::GetTimeString()+0x12c>
   28f60:	e0444003 	sub	r4, r4, r3
   28f64:	e2855001 	add	r5, r5, #1
   28f68:	e081359e 	umull	r3, r1, lr, r5
   28f6c:	e1a032a1 	lsr	r3, r1, #5
   28f70:	e003039a 	mul	r3, sl, r3
   28f74:	e1550003 	cmp	r5, r3
   28f78:	e1a013a1 	lsr	r1, r1, #7
   28f7c:	0affffee 	beq	28f3c <CTimer::GetTimeString()+0x80>
   28f80:	e3150003 	tst	r5, #3
   28f84:	03a01001 	moveq	r1, #1
   28f88:	13a01000 	movne	r1, #0
   28f8c:	eaffffee 	b	28f4c <CTimer::GetTimeString()+0x90>
   28f90:	e3a03064 	mov	r3, #100	; 0x64
   28f94:	e59fb100 	ldr	fp, [pc, #256]	; 2909c <CTimer::GetTimeString()+0x1e0>
   28f98:	e3a00010 	mov	r0, #16
   28f9c:	e08b299b 	umull	r2, fp, fp, r9
   28fa0:	e1a0b2ab 	lsr	fp, fp, #5
   28fa4:	e00b0b93 	mul	fp, r3, fp
   28fa8:	eb000661 	bl	2a934 <operator new(unsigned int)>
   28fac:	e049b00b 	sub	fp, r9, fp
   28fb0:	e1a09000 	mov	r9, r0
   28fb4:	ebfff91a 	bl	27424 <CString::CString()>
   28fb8:	e59f30e8 	ldr	r3, [pc, #232]	; 290a8 <CTimer::GetTimeString()+0x1ec>
   28fbc:	e1550003 	cmp	r5, r3
   28fc0:	8a000018 	bhi	29028 <CTimer::GetTimeString()+0x16c>
   28fc4:	e1a00009 	mov	r0, r9
   28fc8:	e88d0880 	stm	sp, {r7, fp}
   28fcc:	e1a03006 	mov	r3, r6
   28fd0:	e1a02008 	mov	r2, r8
   28fd4:	e59f10d0 	ldr	r1, [pc, #208]	; 290ac <CTimer::GetTimeString()+0x1f0>
   28fd8:	ebfffe54 	bl	28930 <CString::Format(char const*, ...)>
   28fdc:	e1a00009 	mov	r0, r9
   28fe0:	e28dd014 	add	sp, sp, #20
   28fe4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fe8:	e3a0a000 	mov	sl, #0
   28fec:	e3a0001d 	mov	r0, #29
   28ff0:	e59f20b8 	ldr	r2, [pc, #184]	; 290b0 <CTimer::GetTimeString()+0x1f4>
   28ff4:	ea000004 	b	2900c <CTimer::GetTimeString()+0x150>
   28ff8:	e1a03000 	mov	r3, r0
   28ffc:	e1540003 	cmp	r4, r3
   29000:	3affffe2 	bcc	28f90 <CTimer::GetTimeString()+0xd4>
   29004:	e0444003 	sub	r4, r4, r3
   29008:	e28aa001 	add	sl, sl, #1
   2900c:	e35a0001 	cmp	sl, #1
   29010:	13a03000 	movne	r3, #0
   29014:	02013001 	andeq	r3, r1, #1
   29018:	e3530000 	cmp	r3, #0
   2901c:	1afffff5 	bne	28ff8 <CTimer::GetTimeString()+0x13c>
   29020:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   29024:	eafffff4 	b	28ffc <CTimer::GetTimeString()+0x140>
   29028:	e59f3084 	ldr	r3, [pc, #132]	; 290b4 <CTimer::GetTimeString()+0x1f8>
   2902c:	e58db00c 	str	fp, [sp, #12]
   29030:	e0832893 	umull	r2, r3, r3, r8
   29034:	e1a03223 	lsr	r3, r3, #4
   29038:	e0833083 	add	r3, r3, r3, lsl #1
   2903c:	e59f2074 	ldr	r2, [pc, #116]	; 290b8 <CTimer::GetTimeString()+0x1fc>
   29040:	e0488183 	sub	r8, r8, r3, lsl #3
   29044:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   29048:	e1a00009 	mov	r0, r9
   2904c:	e98d00c0 	stmib	sp, {r6, r7}
   29050:	e2843001 	add	r3, r4, #1
   29054:	e58d8000 	str	r8, [sp]
   29058:	e59f105c 	ldr	r1, [pc, #92]	; 290bc <CTimer::GetTimeString()+0x200>
   2905c:	ebfffe33 	bl	28930 <CString::Format(char const*, ...)>
   29060:	e1a00009 	mov	r0, r9
   29064:	e28dd014 	add	sp, sp, #20
   29068:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2906c:	eb000962 	bl	2b5fc <EnterCritical>
   29070:	e5953010 	ldr	r3, [r5, #16]
   29074:	e595400c 	ldr	r4, [r5, #12]
   29078:	e3530000 	cmp	r3, #0
   2907c:	e5959004 	ldr	r9, [r5, #4]
   29080:	0affff95 	beq	28edc <CTimer::GetTimeString()+0x20>
   29084:	eb000987 	bl	2b6a8 <LeaveCritical>
   29088:	eaffff93 	b	28edc <CTimer::GetTimeString()+0x20>
   2908c:	88888889 	.word	0x88888889
   29090:	91a2b3c5 	.word	0x91a2b3c5
   29094:	c22e4507 	.word	0xc22e4507
   29098:	000007b2 	.word	0x000007b2
   2909c:	51eb851f 	.word	0x51eb851f
   290a0:	0000016d 	.word	0x0000016d
   290a4:	0000016e 	.word	0x0000016e
   290a8:	000007b7 	.word	0x000007b7
   290ac:	00046fa0 	.word	0x00046fa0
   290b0:	00046ef4 	.word	0x00046ef4
   290b4:	aaaaaaab 	.word	0xaaaaaaab
   290b8:	00049cf8 	.word	0x00049cf8
   290bc:	00046f84 	.word	0x00046f84

000290c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   290c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   290c4:	e1a09000 	mov	r9, r0
   290c8:	e1a04002 	mov	r4, r2
   290cc:	e1a05001 	mov	r5, r1
   290d0:	e3a00014 	mov	r0, #20
   290d4:	e1a08003 	mov	r8, r3
   290d8:	eb000615 	bl	2a934 <operator new(unsigned int)>
   290dc:	e5996004 	ldr	r6, [r9, #4]
   290e0:	e3540000 	cmp	r4, #0
   290e4:	e0866005 	add	r6, r6, r5
   290e8:	0a000033 	beq	291bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   290ec:	e1a07000 	mov	r7, r0
   290f0:	e599001c 	ldr	r0, [r9, #28]
   290f4:	e59f30e4 	ldr	r3, [pc, #228]	; 291e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   290f8:	e59d2020 	ldr	r2, [sp, #32]
   290fc:	e3500000 	cmp	r0, #0
   29100:	e9870150 	stmib	r7, {r4, r6, r8}
   29104:	e5872010 	str	r2, [r7, #16]
   29108:	e5873000 	str	r3, [r7]
   2910c:	1a000020 	bne	29194 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   29110:	e2895018 	add	r5, r9, #24
   29114:	e1a00005 	mov	r0, r5
   29118:	eb000c8e 	bl	2c358 <CPtrList::GetFirst()>
   2911c:	e2504000 	subs	r4, r0, #0
   29120:	0a000029 	beq	291cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   29124:	e59f80b4 	ldr	r8, [pc, #180]	; 291e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   29128:	e1a01004 	mov	r1, r4
   2912c:	e1a00005 	mov	r0, r5
   29130:	eb000c9f 	bl	2c3b4 <CPtrList::GetPtr(TPtrListElement*)>
   29134:	e3500000 	cmp	r0, #0
   29138:	0a00000d 	beq	29174 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
   2913c:	e5903000 	ldr	r3, [r0]
   29140:	e1530008 	cmp	r3, r8
   29144:	1a00000e 	bne	29184 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   29148:	e5903008 	ldr	r3, [r0, #8]
   2914c:	e1a01004 	mov	r1, r4
   29150:	e0433006 	sub	r3, r3, r6
   29154:	e3530000 	cmp	r3, #0
   29158:	e1a00005 	mov	r0, r5
   2915c:	ca00000e 	bgt	2919c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   29160:	eb000c7e 	bl	2c360 <CPtrList::GetNext(TPtrListElement*)>
   29164:	e3500000 	cmp	r0, #0
   29168:	0a000017 	beq	291cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   2916c:	e1a04000 	mov	r4, r0
   29170:	eaffffec 	b	29128 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x68>
   29174:	e59f2068 	ldr	r2, [pc, #104]	; 291e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
   29178:	e59f1068 	ldr	r1, [pc, #104]	; 291e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   2917c:	e59f0068 	ldr	r0, [pc, #104]	; 291ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   29180:	ebffebcf 	bl	240c4 <assertion_failed>
   29184:	e3a02f65 	mov	r2, #404	; 0x194
   29188:	e59f1058 	ldr	r1, [pc, #88]	; 291e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   2918c:	e59f005c 	ldr	r0, [pc, #92]	; 291f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   29190:	ebffebcb 	bl	240c4 <assertion_failed>
   29194:	eb000918 	bl	2b5fc <EnterCritical>
   29198:	eaffffdc 	b	29110 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
   2919c:	e1a02007 	mov	r2, r7
   291a0:	eb000c98 	bl	2c408 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   291a4:	e599301c 	ldr	r3, [r9, #28]
   291a8:	e3530000 	cmp	r3, #0
   291ac:	0a000000 	beq	291b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   291b0:	eb00093c 	bl	2b6a8 <LeaveCritical>
   291b4:	e1a00007 	mov	r0, r7
   291b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   291bc:	e59f2030 	ldr	r2, [pc, #48]	; 291f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   291c0:	e59f1020 	ldr	r1, [pc, #32]	; 291e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   291c4:	e59f002c 	ldr	r0, [pc, #44]	; 291f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   291c8:	ebffebbd 	bl	240c4 <assertion_failed>
   291cc:	e1a01004 	mov	r1, r4
   291d0:	e1a00005 	mov	r0, r5
   291d4:	e1a02007 	mov	r2, r7
   291d8:	eb000cc3 	bl	2c4ec <CPtrList::InsertAfter(TPtrListElement*, void*)>
   291dc:	eafffff0 	b	291a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   291e0:	4b544d43 	.word	0x4b544d43
   291e4:	00000193 	.word	0x00000193
   291e8:	00046f2c 	.word	0x00046f2c
   291ec:	00046fb4 	.word	0x00046fb4
   291f0:	00046fc4 	.word	0x00046fc4
   291f4:	00000183 	.word	0x00000183
   291f8:	00047420 	.word	0x00047420

000291fc <CTimer::CancelKernelTimer(unsigned int)>:
   291fc:	e92d4070 	push	{r4, r5, r6, lr}
   29200:	e2514000 	subs	r4, r1, #0
   29204:	0a00001b 	beq	29278 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
   29208:	e1a05000 	mov	r5, r0
   2920c:	e590001c 	ldr	r0, [r0, #28]
   29210:	e3500000 	cmp	r0, #0
   29214:	1a000015 	bne	29270 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   29218:	e2856018 	add	r6, r5, #24
   2921c:	e1a01004 	mov	r1, r4
   29220:	e1a00006 	mov	r0, r6
   29224:	eb000d30 	bl	2c6ec <CPtrList::Find(void*)>
   29228:	e2501000 	subs	r1, r0, #0
   2922c:	0a00000a 	beq	2925c <CTimer::CancelKernelTimer(unsigned int)+0x60>
   29230:	e59f3060 	ldr	r3, [pc, #96]	; 29298 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   29234:	e5942000 	ldr	r2, [r4]
   29238:	e1520003 	cmp	r2, r3
   2923c:	1a000011 	bne	29288 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
   29240:	e1a00006 	mov	r0, r6
   29244:	eb000ce1 	bl	2c5d0 <CPtrList::Remove(TPtrListElement*)>
   29248:	e3a03000 	mov	r3, #0
   2924c:	e1a00004 	mov	r0, r4
   29250:	e5843000 	str	r3, [r4]
   29254:	e3a01014 	mov	r1, #20
   29258:	eb0005c3 	bl	2a96c <operator delete(void*, unsigned int)>
   2925c:	e595301c 	ldr	r3, [r5, #28]
   29260:	e3530000 	cmp	r3, #0
   29264:	08bd8070 	popeq	{r4, r5, r6, pc}
   29268:	e8bd4070 	pop	{r4, r5, r6, lr}
   2926c:	ea00090d 	b	2b6a8 <LeaveCritical>
   29270:	eb0008e1 	bl	2b5fc <EnterCritical>
   29274:	eaffffe7 	b	29218 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   29278:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2927c:	e59f1018 	ldr	r1, [pc, #24]	; 2929c <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   29280:	e59f0018 	ldr	r0, [pc, #24]	; 292a0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   29284:	ebffeb8e 	bl	240c4 <assertion_failed>
   29288:	e59f2014 	ldr	r2, [pc, #20]	; 292a4 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   2928c:	e59f1008 	ldr	r1, [pc, #8]	; 2929c <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   29290:	e59f0010 	ldr	r0, [pc, #16]	; 292a8 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   29294:	ebffeb8a 	bl	240c4 <assertion_failed>
   29298:	4b544d43 	.word	0x4b544d43
   2929c:	00046f2c 	.word	0x00046f2c
   292a0:	00042c48 	.word	0x00042c48
   292a4:	000001b7 	.word	0x000001b7
   292a8:	00046f38 	.word	0x00046f38

000292ac <CTimer::PollKernelTimers()>:
   292ac:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292b0:	e1a06000 	mov	r6, r0
   292b4:	e590001c 	ldr	r0, [r0, #28]
   292b8:	e3500000 	cmp	r0, #0
   292bc:	1a000045 	bne	293d8 <CTimer::PollKernelTimers()+0x12c>
   292c0:	e2867018 	add	r7, r6, #24
   292c4:	e1a00007 	mov	r0, r7
   292c8:	eb000c22 	bl	2c358 <CPtrList::GetFirst()>
   292cc:	e2505000 	subs	r5, r0, #0
   292d0:	0a000029 	beq	2937c <CTimer::PollKernelTimers()+0xd0>
   292d4:	e3a0a000 	mov	sl, #0
   292d8:	e3a09014 	mov	r9, #20
   292dc:	e59f80fc 	ldr	r8, [pc, #252]	; 293e0 <CTimer::PollKernelTimers()+0x134>
   292e0:	e1a01005 	mov	r1, r5
   292e4:	e1a00007 	mov	r0, r7
   292e8:	eb000c31 	bl	2c3b4 <CPtrList::GetPtr(TPtrListElement*)>
   292ec:	e2504000 	subs	r4, r0, #0
   292f0:	0a000030 	beq	293b8 <CTimer::PollKernelTimers()+0x10c>
   292f4:	e5943000 	ldr	r3, [r4]
   292f8:	e1530008 	cmp	r3, r8
   292fc:	1a000031 	bne	293c8 <CTimer::PollKernelTimers()+0x11c>
   29300:	e5962004 	ldr	r2, [r6, #4]
   29304:	e5943008 	ldr	r3, [r4, #8]
   29308:	e0433002 	sub	r3, r3, r2
   2930c:	e3530000 	cmp	r3, #0
   29310:	ca000019 	bgt	2937c <CTimer::PollKernelTimers()+0xd0>
   29314:	e1a01005 	mov	r1, r5
   29318:	e1a00007 	mov	r0, r7
   2931c:	eb000c0f 	bl	2c360 <CPtrList::GetNext(TPtrListElement*)>
   29320:	e1a01005 	mov	r1, r5
   29324:	e1a0b000 	mov	fp, r0
   29328:	e1a00007 	mov	r0, r7
   2932c:	eb000ca7 	bl	2c5d0 <CPtrList::Remove(TPtrListElement*)>
   29330:	e596301c 	ldr	r3, [r6, #28]
   29334:	e3530000 	cmp	r3, #0
   29338:	1a000014 	bne	29390 <CTimer::PollKernelTimers()+0xe4>
   2933c:	e5943004 	ldr	r3, [r4, #4]
   29340:	e3530000 	cmp	r3, #0
   29344:	0a000015 	beq	293a0 <CTimer::PollKernelTimers()+0xf4>
   29348:	e5942010 	ldr	r2, [r4, #16]
   2934c:	e594100c 	ldr	r1, [r4, #12]
   29350:	e1a00004 	mov	r0, r4
   29354:	e12fff33 	blx	r3
   29358:	e1a00004 	mov	r0, r4
   2935c:	e584a000 	str	sl, [r4]
   29360:	e1a01009 	mov	r1, r9
   29364:	eb000580 	bl	2a96c <operator delete(void*, unsigned int)>
   29368:	e596001c 	ldr	r0, [r6, #28]
   2936c:	e3500000 	cmp	r0, #0
   29370:	1a00000e 	bne	293b0 <CTimer::PollKernelTimers()+0x104>
   29374:	e25b5000 	subs	r5, fp, #0
   29378:	1affffd8 	bne	292e0 <CTimer::PollKernelTimers()+0x34>
   2937c:	e596301c 	ldr	r3, [r6, #28]
   29380:	e3530000 	cmp	r3, #0
   29384:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29388:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2938c:	ea0008c5 	b	2b6a8 <LeaveCritical>
   29390:	eb0008c4 	bl	2b6a8 <LeaveCritical>
   29394:	e5943004 	ldr	r3, [r4, #4]
   29398:	e3530000 	cmp	r3, #0
   2939c:	1affffe9 	bne	29348 <CTimer::PollKernelTimers()+0x9c>
   293a0:	e59f203c 	ldr	r2, [pc, #60]	; 293e4 <CTimer::PollKernelTimers()+0x138>
   293a4:	e59f103c 	ldr	r1, [pc, #60]	; 293e8 <CTimer::PollKernelTimers()+0x13c>
   293a8:	e59f003c 	ldr	r0, [pc, #60]	; 293ec <CTimer::PollKernelTimers()+0x140>
   293ac:	ebffeb44 	bl	240c4 <assertion_failed>
   293b0:	eb000891 	bl	2b5fc <EnterCritical>
   293b4:	eaffffee 	b	29374 <CTimer::PollKernelTimers()+0xc8>
   293b8:	e3a02f73 	mov	r2, #460	; 0x1cc
   293bc:	e59f1024 	ldr	r1, [pc, #36]	; 293e8 <CTimer::PollKernelTimers()+0x13c>
   293c0:	e59f0028 	ldr	r0, [pc, #40]	; 293f0 <CTimer::PollKernelTimers()+0x144>
   293c4:	ebffeb3e 	bl	240c4 <assertion_failed>
   293c8:	e59f2024 	ldr	r2, [pc, #36]	; 293f4 <CTimer::PollKernelTimers()+0x148>
   293cc:	e59f1014 	ldr	r1, [pc, #20]	; 293e8 <CTimer::PollKernelTimers()+0x13c>
   293d0:	e59f0020 	ldr	r0, [pc, #32]	; 293f8 <CTimer::PollKernelTimers()+0x14c>
   293d4:	ebffeb3a 	bl	240c4 <assertion_failed>
   293d8:	eb000887 	bl	2b5fc <EnterCritical>
   293dc:	eaffffb7 	b	292c0 <CTimer::PollKernelTimers()+0x14>
   293e0:	4b544d43 	.word	0x4b544d43
   293e4:	000001db 	.word	0x000001db
   293e8:	00046f2c 	.word	0x00046f2c
   293ec:	00047420 	.word	0x00047420
   293f0:	00042c48 	.word	0x00042c48
   293f4:	000001cd 	.word	0x000001cd
   293f8:	00046f38 	.word	0x00046f38

000293fc <CTimer::InterruptHandler()>:
   293fc:	e92d4070 	push	{r4, r5, r6, lr}
   29400:	e3a03000 	mov	r3, #0
   29404:	e1a04000 	mov	r4, r0
   29408:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2940c:	e59f20fc 	ldr	r2, [pc, #252]	; 29510 <CTimer::InterruptHandler()+0x114>
   29410:	e5923018 	ldr	r3, [r2, #24]
   29414:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29418:	e2833010 	add	r3, r3, #16
   2941c:	e5823018 	str	r3, [r2, #24]
   29420:	e5921004 	ldr	r1, [r2, #4]
   29424:	e1530001 	cmp	r3, r1
   29428:	e3a01008 	mov	r1, #8
   2942c:	35923004 	ldrcc	r3, [r2, #4]
   29430:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29434:	32833010 	addcc	r3, r3, #16
   29438:	35823018 	strcc	r3, [r2, #24]
   2943c:	e59f20cc 	ldr	r2, [pc, #204]	; 29510 <CTimer::InterruptHandler()+0x114>
   29440:	e3a03000 	mov	r3, #0
   29444:	e5821000 	str	r1, [r2]
   29448:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2944c:	e5900010 	ldr	r0, [r0, #16]
   29450:	e1500003 	cmp	r0, r3
   29454:	1a000017 	bne	294b8 <CTimer::InterruptHandler()+0xbc>
   29458:	e3a01064 	mov	r1, #100	; 0x64
   2945c:	e5942004 	ldr	r2, [r4, #4]
   29460:	e59f30ac 	ldr	r3, [pc, #172]	; 29514 <CTimer::InterruptHandler()+0x118>
   29464:	e2822001 	add	r2, r2, #1
   29468:	e0830293 	umull	r0, r3, r3, r2
   2946c:	e1a032a3 	lsr	r3, r3, #5
   29470:	e0030391 	mul	r3, r1, r3
   29474:	e0523003 	subs	r3, r2, r3
   29478:	e5842004 	str	r2, [r4, #4]
   2947c:	0a000019 	beq	294e8 <CTimer::InterruptHandler()+0xec>
   29480:	e1a00004 	mov	r0, r4
   29484:	ebffff88 	bl	292ac <CTimer::PollKernelTimers()>
   29488:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   2948c:	e3530000 	cmp	r3, #0
   29490:	08bd8070 	popeq	{r4, r5, r6, pc}
   29494:	e3a05000 	mov	r5, #0
   29498:	e2846028 	add	r6, r4, #40	; 0x28
   2949c:	e4963004 	ldr	r3, [r6], #4
   294a0:	e12fff33 	blx	r3
   294a4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   294a8:	e2855001 	add	r5, r5, #1
   294ac:	e1530005 	cmp	r3, r5
   294b0:	8afffff9 	bhi	2949c <CTimer::InterruptHandler()+0xa0>
   294b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   294b8:	eb00084f 	bl	2b5fc <EnterCritical>
   294bc:	e3a01064 	mov	r1, #100	; 0x64
   294c0:	e5943004 	ldr	r3, [r4, #4]
   294c4:	e59f2048 	ldr	r2, [pc, #72]	; 29514 <CTimer::InterruptHandler()+0x118>
   294c8:	e2833001 	add	r3, r3, #1
   294cc:	e0820392 	umull	r0, r2, r2, r3
   294d0:	e1a022a2 	lsr	r2, r2, #5
   294d4:	e0020291 	mul	r2, r1, r2
   294d8:	e1530002 	cmp	r3, r2
   294dc:	e5843004 	str	r3, [r4, #4]
   294e0:	e5943010 	ldr	r3, [r4, #16]
   294e4:	1a000005 	bne	29500 <CTimer::InterruptHandler()+0x104>
   294e8:	e5942008 	ldr	r2, [r4, #8]
   294ec:	e2822001 	add	r2, r2, #1
   294f0:	e5842008 	str	r2, [r4, #8]
   294f4:	e594200c 	ldr	r2, [r4, #12]
   294f8:	e2822001 	add	r2, r2, #1
   294fc:	e584200c 	str	r2, [r4, #12]
   29500:	e3530000 	cmp	r3, #0
   29504:	0affffdd 	beq	29480 <CTimer::InterruptHandler()+0x84>
   29508:	eb000866 	bl	2b6a8 <LeaveCritical>
   2950c:	eaffffdb 	b	29480 <CTimer::InterruptHandler()+0x84>
   29510:	20003000 	.word	0x20003000
   29514:	51eb851f 	.word	0x51eb851f

00029518 <CTimer::InterruptHandler(void*)>:
   29518:	e3500000 	cmp	r0, #0
   2951c:	0a000000 	beq	29524 <CTimer::InterruptHandler(void*)+0xc>
   29520:	eaffffb5 	b	293fc <CTimer::InterruptHandler()>
   29524:	e92d4010 	push	{r4, lr}
   29528:	e59f2008 	ldr	r2, [pc, #8]	; 29538 <CTimer::InterruptHandler(void*)+0x20>
   2952c:	e59f1008 	ldr	r1, [pc, #8]	; 2953c <CTimer::InterruptHandler(void*)+0x24>
   29530:	e59f0008 	ldr	r0, [pc, #8]	; 29540 <CTimer::InterruptHandler(void*)+0x28>
   29534:	ebffeae2 	bl	240c4 <assertion_failed>
   29538:	00000223 	.word	0x00000223
   2953c:	00046f2c 	.word	0x00046f2c
   29540:	000408c0 	.word	0x000408c0

00029544 <CTimer::TuneMsDelay()>:
   29544:	e92d4070 	push	{r4, r5, r6, lr}
   29548:	e1a05000 	mov	r5, r0
   2954c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   29550:	e5953020 	ldr	r3, [r5, #32]
   29554:	e24dd008 	sub	sp, sp, #8
   29558:	e0000390 	mul	r0, r0, r3
   2955c:	e5954004 	ldr	r4, [r5, #4]
   29560:	eb000a9e 	bl	2bfe0 <DelayLoop>
   29564:	e5951004 	ldr	r1, [r5, #4]
   29568:	e59f0068 	ldr	r0, [pc, #104]	; 295d8 <CTimer::TuneMsDelay()+0x94>
   2956c:	e0411004 	sub	r1, r1, r4
   29570:	eb00590a 	bl	3f9a0 <__aeabi_uidiv>
   29574:	e5953020 	ldr	r3, [r5, #32]
   29578:	e59f405c 	ldr	r4, [pc, #92]	; 295dc <CTimer::TuneMsDelay()+0x98>
   2957c:	e0030093 	mul	r3, r3, r0
   29580:	e0832394 	umull	r2, r3, r4, r3
   29584:	e59f1054 	ldr	r1, [pc, #84]	; 295e0 <CTimer::TuneMsDelay()+0x9c>
   29588:	e1a032a3 	lsr	r3, r3, #5
   2958c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29590:	e0821291 	umull	r1, r2, r1, r2
   29594:	e1a06000 	mov	r6, r0
   29598:	e1a02322 	lsr	r2, r2, #6
   2959c:	e5852024 	str	r2, [r5, #36]	; 0x24
   295a0:	e5853020 	str	r3, [r5, #32]
   295a4:	ebfff3b9 	bl	26490 <CLogger::Get()>
   295a8:	e3a03064 	mov	r3, #100	; 0x64
   295ac:	e0842694 	umull	r2, r4, r4, r6
   295b0:	e1a042a4 	lsr	r4, r4, #5
   295b4:	e0030493 	mul	r3, r3, r4
   295b8:	e0466003 	sub	r6, r6, r3
   295bc:	e88d0050 	stm	sp, {r4, r6}
   295c0:	e59f301c 	ldr	r3, [pc, #28]	; 295e4 <CTimer::TuneMsDelay()+0xa0>
   295c4:	e3a02003 	mov	r2, #3
   295c8:	e59f1018 	ldr	r1, [pc, #24]	; 295e8 <CTimer::TuneMsDelay()+0xa4>
   295cc:	ebfff2ec 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   295d0:	e28dd008 	add	sp, sp, #8
   295d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   295d8:	00002710 	.word	0x00002710
   295dc:	51eb851f 	.word	0x51eb851f
   295e0:	10624dd3 	.word	0x10624dd3
   295e4:	00046fec 	.word	0x00046fec
   295e8:	00046f24 	.word	0x00046f24

000295ec <CTimer::Initialize()>:
   295ec:	e92d4070 	push	{r4, r5, r6, lr}
   295f0:	e1a04000 	mov	r4, r0
   295f4:	e5900000 	ldr	r0, [r0]
   295f8:	e3500000 	cmp	r0, #0
   295fc:	0a000011 	beq	29648 <CTimer::Initialize()+0x5c>
   29600:	e1a03004 	mov	r3, r4
   29604:	e59f204c 	ldr	r2, [pc, #76]	; 29658 <CTimer::Initialize()+0x6c>
   29608:	e3a01003 	mov	r1, #3
   2960c:	eb0008fb 	bl	2ba00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29610:	e3a05000 	mov	r5, #0
   29614:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29618:	e59f203c 	ldr	r2, [pc, #60]	; 2965c <CTimer::Initialize()+0x70>
   2961c:	e59f303c 	ldr	r3, [pc, #60]	; 29660 <CTimer::Initialize()+0x74>
   29620:	e1a00004 	mov	r0, r4
   29624:	e5823004 	str	r3, [r2, #4]
   29628:	e5923004 	ldr	r3, [r2, #4]
   2962c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29630:	e2833010 	add	r3, r3, #16
   29634:	e5823018 	str	r3, [r2, #24]
   29638:	ebffffc1 	bl	29544 <CTimer::TuneMsDelay()>
   2963c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29640:	e3a00001 	mov	r0, #1
   29644:	e8bd8070 	pop	{r4, r5, r6, pc}
   29648:	e3a02065 	mov	r2, #101	; 0x65
   2964c:	e59f1010 	ldr	r1, [pc, #16]	; 29664 <CTimer::Initialize()+0x78>
   29650:	e59f0010 	ldr	r0, [pc, #16]	; 29668 <CTimer::Initialize()+0x7c>
   29654:	ebffea9a 	bl	240c4 <assertion_failed>
   29658:	00029518 	.word	0x00029518
   2965c:	20003000 	.word	0x20003000
   29660:	fe363c80 	.word	0xfe363c80
   29664:	00046f2c 	.word	0x00046f2c
   29668:	000408f8 	.word	0x000408f8

0002966c <CTimer::RegisterPeriodicHandler(void (*)())>:
   2966c:	e3510000 	cmp	r1, #0
   29670:	e92d4010 	push	{r4, lr}
   29674:	0a00000b 	beq	296a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29678:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   2967c:	e3530003 	cmp	r3, #3
   29680:	8a00000c 	bhi	296b8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29684:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29688:	e3a02000 	mov	r2, #0
   2968c:	e283300a 	add	r3, r3, #10
   29690:	e7801103 	str	r1, [r0, r3, lsl #2]
   29694:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29698:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   2969c:	e2833001 	add	r3, r3, #1
   296a0:	e5803038 	str	r3, [r0, #56]	; 0x38
   296a4:	e8bd8010 	pop	{r4, pc}
   296a8:	e59f2018 	ldr	r2, [pc, #24]	; 296c8 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   296ac:	e59f1018 	ldr	r1, [pc, #24]	; 296cc <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   296b0:	e59f0018 	ldr	r0, [pc, #24]	; 296d0 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   296b4:	ebffea82 	bl	240c4 <assertion_failed>
   296b8:	e59f2014 	ldr	r2, [pc, #20]	; 296d4 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   296bc:	e59f1008 	ldr	r1, [pc, #8]	; 296cc <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   296c0:	e59f0010 	ldr	r0, [pc, #16]	; 296d8 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   296c4:	ebffea7e 	bl	240c4 <assertion_failed>
   296c8:	00000239 	.word	0x00000239
   296cc:	00046f2c 	.word	0x00046f2c
   296d0:	00047420 	.word	0x00047420
   296d4:	0000023b 	.word	0x0000023b
   296d8:	00047004 	.word	0x00047004

000296dc <CTimer::SimpleMsDelay(unsigned int)>:
   296dc:	e3500000 	cmp	r0, #0
   296e0:	012fff1e 	bxeq	lr
   296e4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   296e8:	e0000093 	mul	r0, r3, r0
   296ec:	e3500000 	cmp	r0, #0
   296f0:	012fff1e 	bxeq	lr
   296f4:	eafffce3 	b	28a88 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

000296f8 <CTimer::SimpleusDelay(unsigned int)>:
   296f8:	e3500000 	cmp	r0, #0
   296fc:	012fff1e 	bxeq	lr
   29700:	eafffce0 	b	28a88 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00029704 <CTimer::IsLeapYear(unsigned int)>:
   29704:	e3a02064 	mov	r2, #100	; 0x64
   29708:	e59f303c 	ldr	r3, [pc, #60]	; 2974c <CTimer::IsLeapYear(unsigned int)+0x48>
   2970c:	e0831093 	umull	r1, r3, r3, r0
   29710:	e1a012a3 	lsr	r1, r3, #5
   29714:	e0020192 	mul	r2, r2, r1
   29718:	e1500002 	cmp	r0, r2
   2971c:	0a000003 	beq	29730 <CTimer::IsLeapYear(unsigned int)+0x2c>
   29720:	e3100003 	tst	r0, #3
   29724:	03a00001 	moveq	r0, #1
   29728:	13a00000 	movne	r0, #0
   2972c:	e12fff1e 	bx	lr
   29730:	e3a02e19 	mov	r2, #400	; 0x190
   29734:	e1a033a3 	lsr	r3, r3, #7
   29738:	e0030392 	mul	r3, r2, r3
   2973c:	e0400003 	sub	r0, r0, r3
   29740:	e16f0f10 	clz	r0, r0
   29744:	e1a002a0 	lsr	r0, r0, #5
   29748:	e12fff1e 	bx	lr
   2974c:	51eb851f 	.word	0x51eb851f

00029750 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29750:	e3500001 	cmp	r0, #1
   29754:	0a000002 	beq	29764 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29758:	e59f3058 	ldr	r3, [pc, #88]	; 297b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   2975c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29760:	e12fff1e 	bx	lr
   29764:	e3a02064 	mov	r2, #100	; 0x64
   29768:	e59f304c 	ldr	r3, [pc, #76]	; 297bc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   2976c:	e083c193 	umull	ip, r3, r3, r1
   29770:	e1a0c2a3 	lsr	ip, r3, #5
   29774:	e0020c92 	mul	r2, r2, ip
   29778:	e1510002 	cmp	r1, r2
   2977c:	0a000006 	beq	2979c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   29780:	e3110003 	tst	r1, #3
   29784:	03a01001 	moveq	r1, #1
   29788:	13a01000 	movne	r1, #0
   2978c:	e3510000 	cmp	r1, #0
   29790:	0afffff0 	beq	29758 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29794:	e3a0001d 	mov	r0, #29
   29798:	e12fff1e 	bx	lr
   2979c:	e3a02e19 	mov	r2, #400	; 0x190
   297a0:	e1a033a3 	lsr	r3, r3, #7
   297a4:	e0030392 	mul	r3, r2, r3
   297a8:	e0411003 	sub	r1, r1, r3
   297ac:	e16f1f11 	clz	r1, r1
   297b0:	e1a012a1 	lsr	r1, r1, #5
   297b4:	eafffff4 	b	2978c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   297b8:	00046ef4 	.word	0x00046ef4
   297bc:	51eb851f 	.word	0x51eb851f

000297c0 <CTimer::Get()>:
   297c0:	e59f3020 	ldr	r3, [pc, #32]	; 297e8 <CTimer::Get()+0x28>
   297c4:	e5930000 	ldr	r0, [r3]
   297c8:	e3500000 	cmp	r0, #0
   297cc:	0a000000 	beq	297d4 <CTimer::Get()+0x14>
   297d0:	e12fff1e 	bx	lr
   297d4:	e92d4010 	push	{r4, lr}
   297d8:	e3a02f9f 	mov	r2, #636	; 0x27c
   297dc:	e59f1008 	ldr	r1, [pc, #8]	; 297ec <CTimer::Get()+0x2c>
   297e0:	e59f0008 	ldr	r0, [pc, #8]	; 297f0 <CTimer::Get()+0x30>
   297e4:	ebffea36 	bl	240c4 <assertion_failed>
   297e8:	00050178 	.word	0x00050178
   297ec:	00046f2c 	.word	0x00046f2c
   297f0:	00045148 	.word	0x00045148

000297f4 <memset>:
   297f4:	e3100003 	tst	r0, #3
   297f8:	03a03001 	moveq	r3, #1
   297fc:	13a03000 	movne	r3, #0
   29800:	e352000f 	cmp	r2, #15
   29804:	93a03000 	movls	r3, #0
   29808:	82033001 	andhi	r3, r3, #1
   2980c:	e3530000 	cmp	r3, #0
   29810:	0a000019 	beq	2987c <memset+0x88>
   29814:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   29818:	e1a0e002 	mov	lr, r2
   2981c:	e181c401 	orr	ip, r1, r1, lsl #8
   29820:	e18cc80c 	orr	ip, ip, ip, lsl #16
   29824:	e2803010 	add	r3, r0, #16
   29828:	e24ee010 	sub	lr, lr, #16
   2982c:	e35e000f 	cmp	lr, #15
   29830:	e503c010 	str	ip, [r3, #-16]
   29834:	e503c00c 	str	ip, [r3, #-12]
   29838:	e503c008 	str	ip, [r3, #-8]
   2983c:	e503c004 	str	ip, [r3, #-4]
   29840:	e2833010 	add	r3, r3, #16
   29844:	8afffff7 	bhi	29828 <memset+0x34>
   29848:	e2423010 	sub	r3, r2, #16
   2984c:	e3c3300f 	bic	r3, r3, #15
   29850:	e202200f 	and	r2, r2, #15
   29854:	e2833010 	add	r3, r3, #16
   29858:	e3520000 	cmp	r2, #0
   2985c:	e0803003 	add	r3, r0, r3
   29860:	0a00000f 	beq	298a4 <memset+0xb0>
   29864:	e6af1071 	sxtb	r1, r1
   29868:	e0832002 	add	r2, r3, r2
   2986c:	e4c31001 	strb	r1, [r3], #1
   29870:	e1530002 	cmp	r3, r2
   29874:	1afffffc 	bne	2986c <memset+0x78>
   29878:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2987c:	e3520000 	cmp	r2, #0
   29880:	e1a03000 	mov	r3, r0
   29884:	16af1071 	sxtbne	r1, r1
   29888:	10802002 	addne	r2, r0, r2
   2988c:	0a000003 	beq	298a0 <memset+0xac>
   29890:	e4c31001 	strb	r1, [r3], #1
   29894:	e1530002 	cmp	r3, r2
   29898:	1afffffc 	bne	29890 <memset+0x9c>
   2989c:	e12fff1e 	bx	lr
   298a0:	e12fff1e 	bx	lr
   298a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000298a8 <memmove>:
   298a8:	e1500001 	cmp	r0, r1
   298ac:	9a00000a 	bls	298dc <memmove+0x34>
   298b0:	e0813002 	add	r3, r1, r2
   298b4:	e1500003 	cmp	r0, r3
   298b8:	2a000007 	bcs	298dc <memmove+0x34>
   298bc:	e3520000 	cmp	r2, #0
   298c0:	e0802002 	add	r2, r0, r2
   298c4:	012fff1e 	bxeq	lr
   298c8:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   298cc:	e1510003 	cmp	r1, r3
   298d0:	e562c001 	strb	ip, [r2, #-1]!
   298d4:	1afffffb 	bne	298c8 <memmove+0x20>
   298d8:	e12fff1e 	bx	lr
   298dc:	ea00023b 	b	2a1d0 <memcpy>

000298e0 <memcmp>:
   298e0:	e3520000 	cmp	r2, #0
   298e4:	0a00000e 	beq	29924 <memcmp+0x44>
   298e8:	e5d0c000 	ldrb	ip, [r0]
   298ec:	e5d13000 	ldrb	r3, [r1]
   298f0:	e15c0003 	cmp	ip, r3
   298f4:	ca00000c 	bgt	2992c <memcmp+0x4c>
   298f8:	ba00000d 	blt	29934 <memcmp+0x54>
   298fc:	e0812002 	add	r2, r1, r2
   29900:	e2811001 	add	r1, r1, #1
   29904:	ea000004 	b	2991c <memcmp+0x3c>
   29908:	e5f0c001 	ldrb	ip, [r0, #1]!
   2990c:	e4d13001 	ldrb	r3, [r1], #1
   29910:	e15c0003 	cmp	ip, r3
   29914:	ca000004 	bgt	2992c <memcmp+0x4c>
   29918:	ba000005 	blt	29934 <memcmp+0x54>
   2991c:	e1510002 	cmp	r1, r2
   29920:	1afffff8 	bne	29908 <memcmp+0x28>
   29924:	e3a00000 	mov	r0, #0
   29928:	e12fff1e 	bx	lr
   2992c:	e3a00001 	mov	r0, #1
   29930:	e12fff1e 	bx	lr
   29934:	e3e00000 	mvn	r0, #0
   29938:	e12fff1e 	bx	lr

0002993c <strlen>:
   2993c:	e1d010d0 	ldrsb	r1, [r0]
   29940:	e2803001 	add	r3, r0, #1
   29944:	e3510000 	cmp	r1, #0
   29948:	0a000003 	beq	2995c <strlen+0x20>
   2994c:	e0431000 	sub	r1, r3, r0
   29950:	e0d320d1 	ldrsb	r2, [r3], #1
   29954:	e3520000 	cmp	r2, #0
   29958:	1afffffb 	bne	2994c <strlen+0x10>
   2995c:	e1a00001 	mov	r0, r1
   29960:	e12fff1e 	bx	lr

00029964 <strcmp>:
   29964:	e1d030d0 	ldrsb	r3, [r0]
   29968:	e1d120d0 	ldrsb	r2, [r1]
   2996c:	e3530000 	cmp	r3, #0
   29970:	1a000007 	bne	29994 <strcmp+0x30>
   29974:	ea000008 	b	2999c <strcmp+0x38>
   29978:	e1530002 	cmp	r3, r2
   2997c:	ca00000b 	bgt	299b0 <strcmp+0x4c>
   29980:	ba00000c 	blt	299b8 <strcmp+0x54>
   29984:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29988:	e3530000 	cmp	r3, #0
   2998c:	0a00000b 	beq	299c0 <strcmp+0x5c>
   29990:	e1f120d1 	ldrsb	r2, [r1, #1]!
   29994:	e3520000 	cmp	r2, #0
   29998:	1afffff6 	bne	29978 <strcmp+0x14>
   2999c:	e1530002 	cmp	r3, r2
   299a0:	ca000002 	bgt	299b0 <strcmp+0x4c>
   299a4:	b3e00000 	mvnlt	r0, #0
   299a8:	a3a00000 	movge	r0, #0
   299ac:	e12fff1e 	bx	lr
   299b0:	e3a00001 	mov	r0, #1
   299b4:	e12fff1e 	bx	lr
   299b8:	e3e00000 	mvn	r0, #0
   299bc:	e12fff1e 	bx	lr
   299c0:	e1d120d1 	ldrsb	r2, [r1, #1]
   299c4:	e1530002 	cmp	r3, r2
   299c8:	dafffff5 	ble	299a4 <strcmp+0x40>
   299cc:	eafffff7 	b	299b0 <strcmp+0x4c>

000299d0 <strcasecmp>:
   299d0:	e2400001 	sub	r0, r0, #1
   299d4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   299d8:	e2432061 	sub	r2, r3, #97	; 0x61
   299dc:	e3520019 	cmp	r2, #25
   299e0:	92433020 	subls	r3, r3, #32
   299e4:	e3530000 	cmp	r3, #0
   299e8:	0a00001f 	beq	29a6c <strcasecmp+0x9c>
   299ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   299f0:	e0d120d1 	ldrsb	r2, [r1], #1
   299f4:	e242c061 	sub	ip, r2, #97	; 0x61
   299f8:	e35c0019 	cmp	ip, #25
   299fc:	81a0e002 	movhi	lr, r2
   29a00:	9242e020 	subls	lr, r2, #32
   29a04:	e35e0000 	cmp	lr, #0
   29a08:	1a000006 	bne	29a28 <strcasecmp+0x58>
   29a0c:	e35c0019 	cmp	ip, #25
   29a10:	92422020 	subls	r2, r2, #32
   29a14:	e1530002 	cmp	r3, r2
   29a18:	ca000011 	bgt	29a64 <strcasecmp+0x94>
   29a1c:	b3e00000 	mvnlt	r0, #0
   29a20:	a3a00000 	movge	r0, #0
   29a24:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29a28:	e153000e 	cmp	r3, lr
   29a2c:	ca00000c 	bgt	29a64 <strcasecmp+0x94>
   29a30:	ba000016 	blt	29a90 <strcasecmp+0xc0>
   29a34:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29a38:	e2432061 	sub	r2, r3, #97	; 0x61
   29a3c:	e3520019 	cmp	r2, #25
   29a40:	92433020 	subls	r3, r3, #32
   29a44:	e3530000 	cmp	r3, #0
   29a48:	1affffe8 	bne	299f0 <strcasecmp+0x20>
   29a4c:	e1d120d0 	ldrsb	r2, [r1]
   29a50:	e242c061 	sub	ip, r2, #97	; 0x61
   29a54:	e35c0019 	cmp	ip, #25
   29a58:	92422020 	subls	r2, r2, #32
   29a5c:	e1530002 	cmp	r3, r2
   29a60:	daffffed 	ble	29a1c <strcasecmp+0x4c>
   29a64:	e3a00001 	mov	r0, #1
   29a68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29a6c:	e1d120d0 	ldrsb	r2, [r1]
   29a70:	e242c061 	sub	ip, r2, #97	; 0x61
   29a74:	e35c0019 	cmp	ip, #25
   29a78:	92422020 	subls	r2, r2, #32
   29a7c:	e1530002 	cmp	r3, r2
   29a80:	ca000004 	bgt	29a98 <strcasecmp+0xc8>
   29a84:	b3e00000 	mvnlt	r0, #0
   29a88:	a3a00000 	movge	r0, #0
   29a8c:	e12fff1e 	bx	lr
   29a90:	e3e00000 	mvn	r0, #0
   29a94:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29a98:	e3a00001 	mov	r0, #1
   29a9c:	e12fff1e 	bx	lr

00029aa0 <strncmp>:
   29aa0:	e3520000 	cmp	r2, #0
   29aa4:	0a000016 	beq	29b04 <strncmp+0x64>
   29aa8:	e1d030d0 	ldrsb	r3, [r0]
   29aac:	e1d1c0d0 	ldrsb	ip, [r1]
   29ab0:	e3530000 	cmp	r3, #0
   29ab4:	0a000015 	beq	29b10 <strncmp+0x70>
   29ab8:	e35c0000 	cmp	ip, #0
   29abc:	0a000013 	beq	29b10 <strncmp+0x70>
   29ac0:	e15c0003 	cmp	ip, r3
   29ac4:	ba000016 	blt	29b24 <strncmp+0x84>
   29ac8:	d0802002 	addle	r2, r0, r2
   29acc:	d2800001 	addle	r0, r0, #1
   29ad0:	da000009 	ble	29afc <strncmp+0x5c>
   29ad4:	ea000014 	b	29b2c <strncmp+0x8c>
   29ad8:	e0d030d1 	ldrsb	r3, [r0], #1
   29adc:	e3530000 	cmp	r3, #0
   29ae0:	0a000009 	beq	29b0c <strncmp+0x6c>
   29ae4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   29ae8:	e35c0000 	cmp	ip, #0
   29aec:	0a000007 	beq	29b10 <strncmp+0x70>
   29af0:	e153000c 	cmp	r3, ip
   29af4:	ca00000a 	bgt	29b24 <strncmp+0x84>
   29af8:	ba00000b 	blt	29b2c <strncmp+0x8c>
   29afc:	e1500002 	cmp	r0, r2
   29b00:	1afffff4 	bne	29ad8 <strncmp+0x38>
   29b04:	e3a00000 	mov	r0, #0
   29b08:	e12fff1e 	bx	lr
   29b0c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   29b10:	e153000c 	cmp	r3, ip
   29b14:	ca000002 	bgt	29b24 <strncmp+0x84>
   29b18:	b3e00000 	mvnlt	r0, #0
   29b1c:	a3a00000 	movge	r0, #0
   29b20:	e12fff1e 	bx	lr
   29b24:	e3a00001 	mov	r0, #1
   29b28:	e12fff1e 	bx	lr
   29b2c:	e3e00000 	mvn	r0, #0
   29b30:	e12fff1e 	bx	lr

00029b34 <strncasecmp>:
   29b34:	e3520000 	cmp	r2, #0
   29b38:	0a00002c 	beq	29bf0 <strncasecmp+0xbc>
   29b3c:	e1a0c001 	mov	ip, r1
   29b40:	e92d4010 	push	{r4, lr}
   29b44:	e2400001 	sub	r0, r0, #1
   29b48:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29b4c:	e2431061 	sub	r1, r3, #97	; 0x61
   29b50:	e3510019 	cmp	r1, #25
   29b54:	92433020 	subls	r3, r3, #32
   29b58:	e3530000 	cmp	r3, #0
   29b5c:	0a00001c 	beq	29bd4 <strncasecmp+0xa0>
   29b60:	e0dc10d1 	ldrsb	r1, [ip], #1
   29b64:	e241e061 	sub	lr, r1, #97	; 0x61
   29b68:	e35e0019 	cmp	lr, #25
   29b6c:	81a04001 	movhi	r4, r1
   29b70:	92414020 	subls	r4, r1, #32
   29b74:	e3540000 	cmp	r4, #0
   29b78:	1a000006 	bne	29b98 <strncasecmp+0x64>
   29b7c:	e35e0019 	cmp	lr, #25
   29b80:	9a00000e 	bls	29bc0 <strncasecmp+0x8c>
   29b84:	e1510003 	cmp	r1, r3
   29b88:	ba000014 	blt	29be0 <strncasecmp+0xac>
   29b8c:	c3e00000 	mvngt	r0, #0
   29b90:	d3a00000 	movle	r0, #0
   29b94:	e8bd8010 	pop	{r4, pc}
   29b98:	e1530004 	cmp	r3, r4
   29b9c:	ca00000f 	bgt	29be0 <strncasecmp+0xac>
   29ba0:	ba000010 	blt	29be8 <strncasecmp+0xb4>
   29ba4:	e2522001 	subs	r2, r2, #1
   29ba8:	1affffe6 	bne	29b48 <strncasecmp+0x14>
   29bac:	e1dc10d0 	ldrsb	r1, [ip]
   29bb0:	e2412061 	sub	r2, r1, #97	; 0x61
   29bb4:	e3520019 	cmp	r2, #25
   29bb8:	93a02000 	movls	r2, #0
   29bbc:	8a000002 	bhi	29bcc <strncasecmp+0x98>
   29bc0:	e3520000 	cmp	r2, #0
   29bc4:	e2411020 	sub	r1, r1, #32
   29bc8:	1affffed 	bne	29b84 <strncasecmp+0x50>
   29bcc:	e3a00000 	mov	r0, #0
   29bd0:	e8bd8010 	pop	{r4, pc}
   29bd4:	e1dc10d0 	ldrsb	r1, [ip]
   29bd8:	e241e061 	sub	lr, r1, #97	; 0x61
   29bdc:	eaffffe6 	b	29b7c <strncasecmp+0x48>
   29be0:	e3a00001 	mov	r0, #1
   29be4:	e8bd8010 	pop	{r4, pc}
   29be8:	e3e00000 	mvn	r0, #0
   29bec:	e8bd8010 	pop	{r4, pc}
   29bf0:	e1d110d0 	ldrsb	r1, [r1]
   29bf4:	e2412061 	sub	r2, r1, #97	; 0x61
   29bf8:	e3520019 	cmp	r2, #25
   29bfc:	8a00000a 	bhi	29c2c <strncasecmp+0xf8>
   29c00:	e3a02000 	mov	r2, #0
   29c04:	e3520000 	cmp	r2, #0
   29c08:	e2411020 	sub	r1, r1, #32
   29c0c:	0a000006 	beq	29c2c <strncasecmp+0xf8>
   29c10:	e1510003 	cmp	r1, r3
   29c14:	ba000002 	blt	29c24 <strncasecmp+0xf0>
   29c18:	c3e00000 	mvngt	r0, #0
   29c1c:	d3a00000 	movle	r0, #0
   29c20:	e12fff1e 	bx	lr
   29c24:	e3a00001 	mov	r0, #1
   29c28:	e12fff1e 	bx	lr
   29c2c:	e3a00000 	mov	r0, #0
   29c30:	e12fff1e 	bx	lr

00029c34 <strcpy>:
   29c34:	e1d130d0 	ldrsb	r3, [r1]
   29c38:	e1a02000 	mov	r2, r0
   29c3c:	e3530000 	cmp	r3, #0
   29c40:	0a000003 	beq	29c54 <strcpy+0x20>
   29c44:	e4c23001 	strb	r3, [r2], #1
   29c48:	e1f130d1 	ldrsb	r3, [r1, #1]!
   29c4c:	e3530000 	cmp	r3, #0
   29c50:	1afffffb 	bne	29c44 <strcpy+0x10>
   29c54:	e3a03000 	mov	r3, #0
   29c58:	e5c23000 	strb	r3, [r2]
   29c5c:	e12fff1e 	bx	lr

00029c60 <strncpy>:
   29c60:	e3520000 	cmp	r2, #0
   29c64:	012fff1e 	bxeq	lr
   29c68:	e1d1c0d0 	ldrsb	ip, [r1]
   29c6c:	e35c0000 	cmp	ip, #0
   29c70:	0a000009 	beq	29c9c <strncpy+0x3c>
   29c74:	e0802002 	add	r2, r0, r2
   29c78:	e1a03000 	mov	r3, r0
   29c7c:	ea000002 	b	29c8c <strncpy+0x2c>
   29c80:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   29c84:	e35c0000 	cmp	ip, #0
   29c88:	0a000004 	beq	29ca0 <strncpy+0x40>
   29c8c:	e4c3c001 	strb	ip, [r3], #1
   29c90:	e1530002 	cmp	r3, r2
   29c94:	1afffff9 	bne	29c80 <strncpy+0x20>
   29c98:	e12fff1e 	bx	lr
   29c9c:	e1a03000 	mov	r3, r0
   29ca0:	e3a02000 	mov	r2, #0
   29ca4:	e5c32000 	strb	r2, [r3]
   29ca8:	e12fff1e 	bx	lr

00029cac <strcat>:
   29cac:	e1d030d0 	ldrsb	r3, [r0]
   29cb0:	e3530000 	cmp	r3, #0
   29cb4:	e1a03000 	mov	r3, r0
   29cb8:	0a000002 	beq	29cc8 <strcat+0x1c>
   29cbc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   29cc0:	e3520000 	cmp	r2, #0
   29cc4:	1afffffc 	bne	29cbc <strcat+0x10>
   29cc8:	e1d120d0 	ldrsb	r2, [r1]
   29ccc:	e3520000 	cmp	r2, #0
   29cd0:	0a000003 	beq	29ce4 <strcat+0x38>
   29cd4:	e4c32001 	strb	r2, [r3], #1
   29cd8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   29cdc:	e3520000 	cmp	r2, #0
   29ce0:	1afffffb 	bne	29cd4 <strcat+0x28>
   29ce4:	e3a02000 	mov	r2, #0
   29ce8:	e5c32000 	strb	r2, [r3]
   29cec:	e12fff1e 	bx	lr

00029cf0 <strchr>:
   29cf0:	e1d020d0 	ldrsb	r2, [r0]
   29cf4:	e3520000 	cmp	r2, #0
   29cf8:	0a000009 	beq	29d24 <strchr+0x34>
   29cfc:	e1510002 	cmp	r1, r2
   29d00:	1a000002 	bne	29d10 <strchr+0x20>
   29d04:	ea000008 	b	29d2c <strchr+0x3c>
   29d08:	e1530001 	cmp	r3, r1
   29d0c:	012fff1e 	bxeq	lr
   29d10:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29d14:	e3530000 	cmp	r3, #0
   29d18:	1afffffa 	bne	29d08 <strchr+0x18>
   29d1c:	e1a00003 	mov	r0, r3
   29d20:	e12fff1e 	bx	lr
   29d24:	e1a00002 	mov	r0, r2
   29d28:	e12fff1e 	bx	lr
   29d2c:	e12fff1e 	bx	lr

00029d30 <strstr>:
   29d30:	e1d030d0 	ldrsb	r3, [r0]
   29d34:	e3530000 	cmp	r3, #0
   29d38:	1a000003 	bne	29d4c <strstr+0x1c>
   29d3c:	e1d130d0 	ldrsb	r3, [r1]
   29d40:	e3530000 	cmp	r3, #0
   29d44:	13a00000 	movne	r0, #0
   29d48:	e12fff1e 	bx	lr
   29d4c:	e92d4010 	push	{r4, lr}
   29d50:	e1d140d0 	ldrsb	r4, [r1]
   29d54:	e3540000 	cmp	r4, #0
   29d58:	08bd8010 	popeq	{r4, pc}
   29d5c:	e1d030d0 	ldrsb	r3, [r0]
   29d60:	e1530004 	cmp	r3, r4
   29d64:	01a02001 	moveq	r2, r1
   29d68:	01a0c000 	moveq	ip, r0
   29d6c:	0a000003 	beq	29d80 <strstr+0x50>
   29d70:	ea000006 	b	29d90 <strstr+0x60>
   29d74:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   29d78:	e15e0003 	cmp	lr, r3
   29d7c:	1a000003 	bne	29d90 <strstr+0x60>
   29d80:	e1f230d1 	ldrsb	r3, [r2, #1]!
   29d84:	e3530000 	cmp	r3, #0
   29d88:	1afffff9 	bne	29d74 <strstr+0x44>
   29d8c:	e8bd8010 	pop	{r4, pc}
   29d90:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29d94:	e3530000 	cmp	r3, #0
   29d98:	1affffed 	bne	29d54 <strstr+0x24>
   29d9c:	e1a00003 	mov	r0, r3
   29da0:	e8bd8010 	pop	{r4, pc}

00029da4 <strtok_r>:
   29da4:	e3500000 	cmp	r0, #0
   29da8:	0a00002c 	beq	29e60 <strtok_r+0xbc>
   29dac:	e92d4030 	push	{r4, r5, lr}
   29db0:	e1d0e0d0 	ldrsb	lr, [r0]
   29db4:	e35e0000 	cmp	lr, #0
   29db8:	11d140d0 	ldrsbne	r4, [r1]
   29dbc:	0a000024 	beq	29e54 <strtok_r+0xb0>
   29dc0:	e3540000 	cmp	r4, #0
   29dc4:	0a000008 	beq	29dec <strtok_r+0x48>
   29dc8:	e15e0004 	cmp	lr, r4
   29dcc:	0a000019 	beq	29e38 <strtok_r+0x94>
   29dd0:	e1a0c001 	mov	ip, r1
   29dd4:	ea000001 	b	29de0 <strtok_r+0x3c>
   29dd8:	e15e0003 	cmp	lr, r3
   29ddc:	0a000015 	beq	29e38 <strtok_r+0x94>
   29de0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   29de4:	e3530000 	cmp	r3, #0
   29de8:	1afffffa 	bne	29dd8 <strtok_r+0x34>
   29dec:	e35e0000 	cmp	lr, #0
   29df0:	0a000017 	beq	29e54 <strtok_r+0xb0>
   29df4:	e1a05000 	mov	r5, r0
   29df8:	e3540000 	cmp	r4, #0
   29dfc:	0a000008 	beq	29e24 <strtok_r+0x80>
   29e00:	e15e0004 	cmp	lr, r4
   29e04:	0a00000d 	beq	29e40 <strtok_r+0x9c>
   29e08:	e1a0c001 	mov	ip, r1
   29e0c:	ea000001 	b	29e18 <strtok_r+0x74>
   29e10:	e15e0003 	cmp	lr, r3
   29e14:	0a000009 	beq	29e40 <strtok_r+0x9c>
   29e18:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   29e1c:	e3530000 	cmp	r3, #0
   29e20:	1afffffa 	bne	29e10 <strtok_r+0x6c>
   29e24:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   29e28:	e35e0000 	cmp	lr, #0
   29e2c:	1afffff1 	bne	29df8 <strtok_r+0x54>
   29e30:	e5825000 	str	r5, [r2]
   29e34:	e8bd8030 	pop	{r4, r5, pc}
   29e38:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   29e3c:	eaffffdf 	b	29dc0 <strtok_r+0x1c>
   29e40:	e3a03000 	mov	r3, #0
   29e44:	e2855001 	add	r5, r5, #1
   29e48:	e5453001 	strb	r3, [r5, #-1]
   29e4c:	e5825000 	str	r5, [r2]
   29e50:	e8bd8030 	pop	{r4, r5, pc}
   29e54:	e3a00000 	mov	r0, #0
   29e58:	e5820000 	str	r0, [r2]
   29e5c:	e8bd8030 	pop	{r4, r5, pc}
   29e60:	e5920000 	ldr	r0, [r2]
   29e64:	e3500000 	cmp	r0, #0
   29e68:	1affffcf 	bne	29dac <strtok_r+0x8>
   29e6c:	e12fff1e 	bx	lr

00029e70 <strtoul>:
   29e70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   29e74:	e3510000 	cmp	r1, #0
   29e78:	e2425002 	sub	r5, r2, #2
   29e7c:	15810000 	strne	r0, [r1]
   29e80:	e3520000 	cmp	r2, #0
   29e84:	13550022 	cmpne	r5, #34	; 0x22
   29e88:	e3c2e010 	bic	lr, r2, #16
   29e8c:	83a05001 	movhi	r5, #1
   29e90:	93a05000 	movls	r5, #0
   29e94:	8a000037 	bhi	29f78 <strtoul+0x108>
   29e98:	e1d0c0d0 	ldrsb	ip, [r0]
   29e9c:	e1a04000 	mov	r4, r0
   29ea0:	e24c3009 	sub	r3, ip, #9
   29ea4:	e35c0020 	cmp	ip, #32
   29ea8:	e2800001 	add	r0, r0, #1
   29eac:	e6ef3073 	uxtb	r3, r3
   29eb0:	0afffff8 	beq	29e98 <strtoul+0x28>
   29eb4:	e3530004 	cmp	r3, #4
   29eb8:	9afffff6 	bls	29e98 <strtoul+0x28>
   29ebc:	e35c002b 	cmp	ip, #43	; 0x2b
   29ec0:	0a00002e 	beq	29f80 <strtoul+0x110>
   29ec4:	e35c002d 	cmp	ip, #45	; 0x2d
   29ec8:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   29ecc:	03a07001 	moveq	r7, #1
   29ed0:	01a04000 	moveq	r4, r0
   29ed4:	13a07000 	movne	r7, #0
   29ed8:	e35c0030 	cmp	ip, #48	; 0x30
   29edc:	0a00002c 	beq	29f94 <strtoul+0x124>
   29ee0:	e3520000 	cmp	r2, #0
   29ee4:	03a0200a 	moveq	r2, #10
   29ee8:	e35c002f 	cmp	ip, #47	; 0x2f
   29eec:	e1a0300c 	mov	r3, ip
   29ef0:	da00001d 	ble	29f6c <strtoul+0xfc>
   29ef4:	e3a0e000 	mov	lr, #0
   29ef8:	e3a05001 	mov	r5, #1
   29efc:	e1a0600e 	mov	r6, lr
   29f00:	ea000008 	b	29f28 <strtoul+0xb8>
   29f04:	e020329e 	mla	r0, lr, r2, r3
   29f08:	e150000e 	cmp	r0, lr
   29f0c:	3a000029 	bcc	29fb8 <strtoul+0x148>
   29f10:	e1f430d1 	ldrsb	r3, [r4, #1]!
   29f14:	e1a05006 	mov	r5, r6
   29f18:	e353002f 	cmp	r3, #47	; 0x2f
   29f1c:	e1a0c003 	mov	ip, r3
   29f20:	da000029 	ble	29fcc <strtoul+0x15c>
   29f24:	e1a0e000 	mov	lr, r0
   29f28:	e24cc061 	sub	ip, ip, #97	; 0x61
   29f2c:	e35c0019 	cmp	ip, #25
   29f30:	92433020 	subls	r3, r3, #32
   29f34:	e3530040 	cmp	r3, #64	; 0x40
   29f38:	c2433007 	subgt	r3, r3, #7
   29f3c:	e2433030 	sub	r3, r3, #48	; 0x30
   29f40:	e1520003 	cmp	r2, r3
   29f44:	caffffee 	bgt	29f04 <strtoul+0x94>
   29f48:	e1a0000e 	mov	r0, lr
   29f4c:	e2255001 	eor	r5, r5, #1
   29f50:	e3510000 	cmp	r1, #0
   29f54:	e0055007 	and	r5, r5, r7
   29f58:	0a000000 	beq	29f60 <strtoul+0xf0>
   29f5c:	e5814000 	str	r4, [r1]
   29f60:	e3550000 	cmp	r5, #0
   29f64:	12600000 	rsbne	r0, r0, #0
   29f68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29f6c:	e3510000 	cmp	r1, #0
   29f70:	13a00000 	movne	r0, #0
   29f74:	1afffff8 	bne	29f5c <strtoul+0xec>
   29f78:	e3a00000 	mov	r0, #0
   29f7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29f80:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   29f84:	e3a07000 	mov	r7, #0
   29f88:	e35c0030 	cmp	ip, #48	; 0x30
   29f8c:	e1a04000 	mov	r4, r0
   29f90:	1affffd2 	bne	29ee0 <strtoul+0x70>
   29f94:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   29f98:	e2840001 	add	r0, r4, #1
   29f9c:	e3cc3020 	bic	r3, ip, #32
   29fa0:	e3530058 	cmp	r3, #88	; 0x58
   29fa4:	0a00000a 	beq	29fd4 <strtoul+0x164>
   29fa8:	e3520000 	cmp	r2, #0
   29fac:	e1a04000 	mov	r4, r0
   29fb0:	03a02008 	moveq	r2, #8
   29fb4:	eaffffcb 	b	29ee8 <strtoul+0x78>
   29fb8:	e3510000 	cmp	r1, #0
   29fbc:	0a00000a 	beq	29fec <strtoul+0x17c>
   29fc0:	e5814000 	str	r4, [r1]
   29fc4:	e3e00000 	mvn	r0, #0
   29fc8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29fcc:	e3a05001 	mov	r5, #1
   29fd0:	eaffffde 	b	29f50 <strtoul+0xe0>
   29fd4:	e35e0000 	cmp	lr, #0
   29fd8:	1affffe6 	bne	29f78 <strtoul+0x108>
   29fdc:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   29fe0:	e3a02010 	mov	r2, #16
   29fe4:	e2844002 	add	r4, r4, #2
   29fe8:	eaffffbe 	b	29ee8 <strtoul+0x78>
   29fec:	e3e00000 	mvn	r0, #0
   29ff0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00029ff4 <strtoull>:
   29ff4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ff8:	e251e000 	subs	lr, r1, #0
   29ffc:	e242b002 	sub	fp, r2, #2
   2a000:	158e0000 	strne	r0, [lr]
   2a004:	e3520000 	cmp	r2, #0
   2a008:	135b0022 	cmpne	fp, #34	; 0x22
   2a00c:	e3c21010 	bic	r1, r2, #16
   2a010:	83a0b001 	movhi	fp, #1
   2a014:	93a0b000 	movls	fp, #0
   2a018:	8a000041 	bhi	2a124 <strtoull+0x130>
   2a01c:	e1d0a0d0 	ldrsb	sl, [r0]
   2a020:	e1a0c000 	mov	ip, r0
   2a024:	e24a3009 	sub	r3, sl, #9
   2a028:	e35a0020 	cmp	sl, #32
   2a02c:	e2800001 	add	r0, r0, #1
   2a030:	e6ef3073 	uxtb	r3, r3
   2a034:	0afffff8 	beq	2a01c <strtoull+0x28>
   2a038:	e3530004 	cmp	r3, #4
   2a03c:	9afffff6 	bls	2a01c <strtoull+0x28>
   2a040:	e35a002b 	cmp	sl, #43	; 0x2b
   2a044:	0a000039 	beq	2a130 <strtoull+0x13c>
   2a048:	e35a002d 	cmp	sl, #45	; 0x2d
   2a04c:	01dca0d1 	ldrsbeq	sl, [ip, #1]
   2a050:	03a09001 	moveq	r9, #1
   2a054:	01a0c000 	moveq	ip, r0
   2a058:	13a09000 	movne	r9, #0
   2a05c:	e35a0030 	cmp	sl, #48	; 0x30
   2a060:	0a000037 	beq	2a144 <strtoull+0x150>
   2a064:	e3520000 	cmp	r2, #0
   2a068:	03a0200a 	moveq	r2, #10
   2a06c:	e35a002f 	cmp	sl, #47	; 0x2f
   2a070:	e1a0300a 	mov	r3, sl
   2a074:	da00004c 	ble	2a1ac <strtoull+0x1b8>
   2a078:	e3a0b001 	mov	fp, #1
   2a07c:	e3a04000 	mov	r4, #0
   2a080:	e3a05000 	mov	r5, #0
   2a084:	e1a06002 	mov	r6, r2
   2a088:	e1a07fc2 	asr	r7, r2, #31
   2a08c:	e3a08000 	mov	r8, #0
   2a090:	ea00000f 	b	2a0d4 <strtoull+0xe0>
   2a094:	e00a0592 	mul	sl, r2, r5
   2a098:	e0810492 	umull	r0, r1, r2, r4
   2a09c:	e02aa794 	mla	sl, r4, r7, sl
   2a0a0:	e0900003 	adds	r0, r0, r3
   2a0a4:	e08a1001 	add	r1, sl, r1
   2a0a8:	e0a11fc3 	adc	r1, r1, r3, asr #31
   2a0ac:	e1510005 	cmp	r1, r5
   2a0b0:	01500004 	cmpeq	r0, r4
   2a0b4:	3a00002b 	bcc	2a168 <strtoull+0x174>
   2a0b8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a0bc:	e1a0b008 	mov	fp, r8
   2a0c0:	e353002f 	cmp	r3, #47	; 0x2f
   2a0c4:	e1a0a003 	mov	sl, r3
   2a0c8:	da00002c 	ble	2a180 <strtoull+0x18c>
   2a0cc:	e1a04000 	mov	r4, r0
   2a0d0:	e1a05001 	mov	r5, r1
   2a0d4:	e24aa061 	sub	sl, sl, #97	; 0x61
   2a0d8:	e35a0019 	cmp	sl, #25
   2a0dc:	92433020 	subls	r3, r3, #32
   2a0e0:	e3530040 	cmp	r3, #64	; 0x40
   2a0e4:	c2433007 	subgt	r3, r3, #7
   2a0e8:	e2433030 	sub	r3, r3, #48	; 0x30
   2a0ec:	e1520003 	cmp	r2, r3
   2a0f0:	caffffe7 	bgt	2a094 <strtoull+0xa0>
   2a0f4:	e1a00004 	mov	r0, r4
   2a0f8:	e1a01005 	mov	r1, r5
   2a0fc:	e22bb001 	eor	fp, fp, #1
   2a100:	e35e0000 	cmp	lr, #0
   2a104:	e00bb009 	and	fp, fp, r9
   2a108:	0a000000 	beq	2a110 <strtoull+0x11c>
   2a10c:	e58ec000 	str	ip, [lr]
   2a110:	e35b0000 	cmp	fp, #0
   2a114:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a118:	e2700000 	rsbs	r0, r0, #0
   2a11c:	e2e11000 	rsc	r1, r1, #0
   2a120:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a124:	e3a00000 	mov	r0, #0
   2a128:	e3a01000 	mov	r1, #0
   2a12c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a130:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a134:	e3a09000 	mov	r9, #0
   2a138:	e35a0030 	cmp	sl, #48	; 0x30
   2a13c:	e1a0c000 	mov	ip, r0
   2a140:	1affffc7 	bne	2a064 <strtoull+0x70>
   2a144:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a148:	e28c0001 	add	r0, ip, #1
   2a14c:	e3ca3020 	bic	r3, sl, #32
   2a150:	e3530058 	cmp	r3, #88	; 0x58
   2a154:	0a00000b 	beq	2a188 <strtoull+0x194>
   2a158:	e3520000 	cmp	r2, #0
   2a15c:	e1a0c000 	mov	ip, r0
   2a160:	03a02008 	moveq	r2, #8
   2a164:	eaffffc0 	b	2a06c <strtoull+0x78>
   2a168:	e35e0000 	cmp	lr, #0
   2a16c:	0a00000b 	beq	2a1a0 <strtoull+0x1ac>
   2a170:	e58ec000 	str	ip, [lr]
   2a174:	e3e00000 	mvn	r0, #0
   2a178:	e3a01000 	mov	r1, #0
   2a17c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a180:	e3a0b001 	mov	fp, #1
   2a184:	eaffffdd 	b	2a100 <strtoull+0x10c>
   2a188:	e3510000 	cmp	r1, #0
   2a18c:	1affffe4 	bne	2a124 <strtoull+0x130>
   2a190:	e1dca0d2 	ldrsb	sl, [ip, #2]
   2a194:	e3a02010 	mov	r2, #16
   2a198:	e28cc002 	add	ip, ip, #2
   2a19c:	eaffffb2 	b	2a06c <strtoull+0x78>
   2a1a0:	e3e00000 	mvn	r0, #0
   2a1a4:	e3a01000 	mov	r1, #0
   2a1a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1ac:	e35e0000 	cmp	lr, #0
   2a1b0:	e3a00000 	mov	r0, #0
   2a1b4:	e3a01000 	mov	r1, #0
   2a1b8:	1affffd3 	bne	2a10c <strtoull+0x118>
   2a1bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a1c0 <atoi>:
   2a1c0:	e3a0200a 	mov	r2, #10
   2a1c4:	e3a01000 	mov	r1, #0
   2a1c8:	eaffff28 	b	29e70 <strtoul>

0002a1cc <char2int>:
   2a1cc:	e12fff1e 	bx	lr

0002a1d0 <memcpy>:
   2a1d0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a1d4:	e352007f 	cmp	r2, #127	; 0x7f
   2a1d8:	9a00000b 	bls	2a20c <memcpy+0x3c>
   2a1dc:	e3110003 	tst	r1, #3
   2a1e0:	1a000009 	bne	2a20c <memcpy+0x3c>
   2a1e4:	e3100003 	tst	r0, #3
   2a1e8:	1a000007 	bne	2a20c <memcpy+0x3c>
   2a1ec:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a1f0:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a1f4:	e2422020 	sub	r2, r2, #32
   2a1f8:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a1fc:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a200:	e352001f 	cmp	r2, #31
   2a204:	8afffff9 	bhi	2a1f0 <memcpy+0x20>
   2a208:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a20c:	e3520000 	cmp	r2, #0
   2a210:	0a000003 	beq	2a224 <memcpy+0x54>
   2a214:	e4d13001 	ldrb	r3, [r1], #1
   2a218:	e2522001 	subs	r2, r2, #1
   2a21c:	e4c03001 	strb	r3, [r0], #1
   2a220:	1afffffb 	bne	2a214 <memcpy+0x44>
   2a224:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a228:	e12fff1e 	bx	lr

0002a22c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a22c:	e3a03000 	mov	r3, #0
   2a230:	e3510001 	cmp	r1, #1
   2a234:	91a0c002 	movls	ip, r2
   2a238:	8382c001 	orrhi	ip, r2, #1
   2a23c:	e92d4070 	push	{r4, r5, r6, lr}
   2a240:	e1a04000 	mov	r4, r0
   2a244:	e59f0118 	ldr	r0, [pc, #280]	; 2a364 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>
   2a248:	e15c0003 	cmp	ip, r3
   2a24c:	e24dd020 	sub	sp, sp, #32
   2a250:	e5c42004 	strb	r2, [r4, #4]
   2a254:	e5841008 	str	r1, [r4, #8]
   2a258:	e5840000 	str	r0, [r4]
   2a25c:	e1c431b0 	strh	r3, [r4, #16]
   2a260:	e1c431b2 	strh	r3, [r4, #18]
   2a264:	0a000002 	beq	2a274 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x48>
   2a268:	e1a00004 	mov	r0, r4
   2a26c:	e28dd020 	add	sp, sp, #32
   2a270:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a274:	e59f50ec 	ldr	r5, [pc, #236]	; 2a368 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x13c>
   2a278:	e5950004 	ldr	r0, [r5, #4]
   2a27c:	e1500003 	cmp	r0, r3
   2a280:	1a000027 	bne	2a324 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf8>
   2a284:	e5956000 	ldr	r6, [r5]
   2a288:	e3560000 	cmp	r6, #0
   2a28c:	0a00000b 	beq	2a2c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   2a290:	e3a02000 	mov	r2, #0
   2a294:	e5943008 	ldr	r3, [r4, #8]
   2a298:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a29c:	e5953004 	ldr	r3, [r5, #4]
   2a2a0:	e3530000 	cmp	r3, #0
   2a2a4:	1a000020 	bne	2a32c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>
   2a2a8:	e1a00004 	mov	r0, r4
   2a2ac:	e3a01000 	mov	r1, #0
   2a2b0:	eb000036 	bl	2a390 <CVirtualGPIOPin::Write(unsigned int)>
   2a2b4:	e1a00004 	mov	r0, r4
   2a2b8:	e28dd020 	add	sp, sp, #32
   2a2bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a2c0:	e3a00001 	mov	r0, #1
   2a2c4:	eb00048a 	bl	2b4f4 <CMemorySystem::GetCoherentPage(unsigned int)>
   2a2c8:	e1a01006 	mov	r1, r6
   2a2cc:	e5850000 	str	r0, [r5]
   2a2d0:	e28d0008 	add	r0, sp, #8
   2a2d4:	ebffe79b 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a2d8:	e3a03004 	mov	r3, #4
   2a2dc:	e595c000 	ldr	ip, [r5]
   2a2e0:	e58d3000 	str	r3, [sp]
   2a2e4:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2a2e8:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2a2ec:	e28d0008 	add	r0, sp, #8
   2a2f0:	e28d2010 	add	r2, sp, #16
   2a2f4:	e3a03010 	mov	r3, #16
   2a2f8:	e59f106c 	ldr	r1, [pc, #108]	; 2a36c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
   2a2fc:	e58dc01c 	str	ip, [sp, #28]
   2a300:	ebffe79c 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a304:	e3500000 	cmp	r0, #0
   2a308:	0a000009 	beq	2a334 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x108>
   2a30c:	e28d0008 	add	r0, sp, #8
   2a310:	ebffe793 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a314:	e5956000 	ldr	r6, [r5]
   2a318:	e3560000 	cmp	r6, #0
   2a31c:	0affffde 	beq	2a29c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   2a320:	eaffffda 	b	2a290 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   2a324:	eb0004b4 	bl	2b5fc <EnterCritical>
   2a328:	eaffffd5 	b	2a284 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   2a32c:	eb0004dd 	bl	2b6a8 <LeaveCritical>
   2a330:	eaffffdc 	b	2a2a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   2a334:	e3a03010 	mov	r3, #16
   2a338:	e58d0000 	str	r0, [sp]
   2a33c:	e28d2010 	add	r2, sp, #16
   2a340:	e59f1028 	ldr	r1, [pc, #40]	; 2a370 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   2a344:	e28d0008 	add	r0, sp, #8
   2a348:	ebffe78a 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a34c:	e3500000 	cmp	r0, #0
   2a350:	159d301c 	ldrne	r3, [sp, #28]
   2a354:	05850000 	streq	r0, [r5]
   2a358:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2a35c:	15853000 	strne	r3, [r5]
   2a360:	eaffffe9 	b	2a30c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   2a364:	00047070 	.word	0x00047070
   2a368:	0005017c 	.word	0x0005017c
   2a36c:	00048020 	.word	0x00048020
   2a370:	00040010 	.word	0x00040010

0002a374 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a374:	e12fff1e 	bx	lr

0002a378 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2a378:	e92d4010 	push	{r4, lr}
   2a37c:	e1a04000 	mov	r4, r0
   2a380:	e3a01014 	mov	r1, #20
   2a384:	eb000178 	bl	2a96c <operator delete(void*, unsigned int)>
   2a388:	e1a00004 	mov	r0, r4
   2a38c:	e8bd8010 	pop	{r4, pc}

0002a390 <CVirtualGPIOPin::Write(unsigned int)>:
   2a390:	e92d4070 	push	{r4, r5, r6, lr}
   2a394:	e5d03004 	ldrb	r3, [r0, #4]
   2a398:	e24dd028 	sub	sp, sp, #40	; 0x28
   2a39c:	e3530000 	cmp	r3, #0
   2a3a0:	e1a04000 	mov	r4, r0
   2a3a4:	e1a05001 	mov	r5, r1
   2a3a8:	0a000012 	beq	2a3f8 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2a3ac:	e5901008 	ldr	r1, [r0, #8]
   2a3b0:	e3510000 	cmp	r1, #0
   2a3b4:	1a000033 	bne	2a488 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2a3b8:	e28d000c 	add	r0, sp, #12
   2a3bc:	ebffe761 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a3c0:	e3a03008 	mov	r3, #8
   2a3c4:	e58d3000 	str	r3, [sp]
   2a3c8:	e3a03014 	mov	r3, #20
   2a3cc:	e3a0c082 	mov	ip, #130	; 0x82
   2a3d0:	e28d000c 	add	r0, sp, #12
   2a3d4:	e08d2003 	add	r2, sp, r3
   2a3d8:	e59f10d8 	ldr	r1, [pc, #216]	; 2a4b8 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2a3dc:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2a3e0:	e58dc020 	str	ip, [sp, #32]
   2a3e4:	ebffe763 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a3e8:	e28d000c 	add	r0, sp, #12
   2a3ec:	ebffe75c 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a3f0:	e28dd028 	add	sp, sp, #40	; 0x28
   2a3f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a3f8:	e5903008 	ldr	r3, [r0, #8]
   2a3fc:	e3530001 	cmp	r3, #1
   2a400:	8afffffa 	bhi	2a3f0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a404:	e3510001 	cmp	r1, #1
   2a408:	93a03000 	movls	r3, #0
   2a40c:	83a03001 	movhi	r3, #1
   2a410:	e59f60a4 	ldr	r6, [pc, #164]	; 2a4bc <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2a414:	e5962000 	ldr	r2, [r6]
   2a418:	e3520000 	cmp	r2, #0
   2a41c:	03833001 	orreq	r3, r3, #1
   2a420:	e3530000 	cmp	r3, #0
   2a424:	1afffff1 	bne	2a3f0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a428:	e5960004 	ldr	r0, [r6, #4]
   2a42c:	e3500000 	cmp	r0, #0
   2a430:	1a000018 	bne	2a498 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2a434:	e1d411b0 	ldrh	r1, [r4, #16]
   2a438:	e1d431b2 	ldrh	r3, [r4, #18]
   2a43c:	e584500c 	str	r5, [r4, #12]
   2a440:	e0412003 	sub	r2, r1, r3
   2a444:	e6bf2072 	sxth	r2, r2
   2a448:	e3520000 	cmp	r2, #0
   2a44c:	da000013 	ble	2a4a0 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   2a450:	e3550000 	cmp	r5, #0
   2a454:	1a000006 	bne	2a474 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2a458:	e2833001 	add	r3, r3, #1
   2a45c:	e6ff3073 	uxth	r3, r3
   2a460:	e1c431b2 	strh	r3, [r4, #18]
   2a464:	e5940008 	ldr	r0, [r4, #8]
   2a468:	e5962000 	ldr	r2, [r6]
   2a46c:	e1833801 	orr	r3, r3, r1, lsl #16
   2a470:	e7823100 	str	r3, [r2, r0, lsl #2]
   2a474:	e5963004 	ldr	r3, [r6, #4]
   2a478:	e3530000 	cmp	r3, #0
   2a47c:	0affffdb 	beq	2a3f0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a480:	eb000488 	bl	2b6a8 <LeaveCritical>
   2a484:	eaffffd9 	b	2a3f0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2a488:	e59f1030 	ldr	r1, [pc, #48]	; 2a4c0 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2a48c:	e3a0205b 	mov	r2, #91	; 0x5b
   2a490:	e2810014 	add	r0, r1, #20
   2a494:	ebffe70a 	bl	240c4 <assertion_failed>
   2a498:	eb000457 	bl	2b5fc <EnterCritical>
   2a49c:	eaffffe4 	b	2a434 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2a4a0:	e3550000 	cmp	r5, #0
   2a4a4:	0afffff2 	beq	2a474 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2a4a8:	e2811001 	add	r1, r1, #1
   2a4ac:	e6ff1071 	uxth	r1, r1
   2a4b0:	e1c411b0 	strh	r1, [r4, #16]
   2a4b4:	eaffffea 	b	2a464 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2a4b8:	00038041 	.word	0x00038041
   2a4bc:	0005017c 	.word	0x0005017c
   2a4c0:	00047078 	.word	0x00047078

0002a4c4 <CVirtualGPIOPin::Invert()>:
   2a4c4:	e590100c 	ldr	r1, [r0, #12]
   2a4c8:	e2211001 	eor	r1, r1, #1
   2a4cc:	eaffffaf 	b	2a390 <CVirtualGPIOPin::Write(unsigned int)>

0002a4d0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2a4d0:	e3a02000 	mov	r2, #0
   2a4d4:	e59f3004 	ldr	r3, [pc, #4]	; 2a4e0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2a4d8:	e5832004 	str	r2, [r3, #4]
   2a4dc:	e12fff1e 	bx	lr
   2a4e0:	0005017c 	.word	0x0005017c

0002a4e4 <ChainBootStub(void const*, unsigned int)>:
   2a4e4:	e2811003 	add	r1, r1, #3
   2a4e8:	e1b01121 	lsrs	r1, r1, #2
   2a4ec:	11a03000 	movne	r3, r0
   2a4f0:	159f2030 	ldrne	r2, [pc, #48]	; 2a528 <ChainBootStub(void const*, unsigned int)+0x44>
   2a4f4:	10800101 	addne	r0, r0, r1, lsl #2
   2a4f8:	0a000003 	beq	2a50c <ChainBootStub(void const*, unsigned int)+0x28>
   2a4fc:	e4931004 	ldr	r1, [r3], #4
   2a500:	e1500003 	cmp	r0, r3
   2a504:	e5a21004 	str	r1, [r2, #4]!
   2a508:	1afffffb 	bne	2a4fc <ChainBootStub(void const*, unsigned int)+0x18>
   2a50c:	e3a03000 	mov	r3, #0
   2a510:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2a514:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2a518:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a51c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2a520:	e3a03902 	mov	r3, #32768	; 0x8000
   2a524:	e12fff13 	bx	r3
   2a528:	00007ffc 	.word	0x00007ffc

0002a52c <EnableChainBoot>:
   2a52c:	e59f302c 	ldr	r3, [pc, #44]	; 2a560 <EnableChainBoot+0x34>
   2a530:	e92d4010 	push	{r4, lr}
   2a534:	e3a02b01 	mov	r2, #1024	; 0x400
   2a538:	e8830003 	stm	r3, {r0, r1}
   2a53c:	e59f1020 	ldr	r1, [pc, #32]	; 2a564 <EnableChainBoot+0x38>
   2a540:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2a544:	ebffff21 	bl	2a1d0 <memcpy>
   2a548:	e3a03000 	mov	r3, #0
   2a54c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2a550:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2a554:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a558:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2a55c:	e8bd8010 	pop	{r4, pc}
   2a560:	00050184 	.word	0x00050184
   2a564:	0002a4e4 	.word	0x0002a4e4

0002a568 <IsChainBootEnabled>:
   2a568:	e59f300c 	ldr	r3, [pc, #12]	; 2a57c <IsChainBootEnabled+0x14>
   2a56c:	e5930000 	ldr	r0, [r3]
   2a570:	e2900000 	adds	r0, r0, #0
   2a574:	13a00001 	movne	r0, #1
   2a578:	e12fff1e 	bx	lr
   2a57c:	00050184 	.word	0x00050184

0002a580 <DoChainBoot>:
   2a580:	e59f3008 	ldr	r3, [pc, #8]	; 2a590 <DoChainBoot+0x10>
   2a584:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2a588:	e8930003 	ldm	r3, {r0, r1}
   2a58c:	e12fff12 	bx	r2
   2a590:	00050184 	.word	0x00050184

0002a594 <CMACAddress::CMACAddress()>:
   2a594:	e3a02000 	mov	r2, #0
   2a598:	e5c02000 	strb	r2, [r0]
   2a59c:	e12fff1e 	bx	lr

0002a5a0 <CMACAddress::~CMACAddress()>:
   2a5a0:	e12fff1e 	bx	lr

0002a5a4 <CMACAddress::operator==(CMACAddress const&) const>:
   2a5a4:	e5d03000 	ldrb	r3, [r0]
   2a5a8:	e92d4010 	push	{r4, lr}
   2a5ac:	e3530000 	cmp	r3, #0
   2a5b0:	0a000009 	beq	2a5dc <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2a5b4:	e5d13000 	ldrb	r3, [r1]
   2a5b8:	e2800001 	add	r0, r0, #1
   2a5bc:	e3530000 	cmp	r3, #0
   2a5c0:	0a000009 	beq	2a5ec <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2a5c4:	e2811001 	add	r1, r1, #1
   2a5c8:	e3a02006 	mov	r2, #6
   2a5cc:	ebfffcc3 	bl	298e0 <memcmp>
   2a5d0:	e16f0f10 	clz	r0, r0
   2a5d4:	e1a002a0 	lsr	r0, r0, #5
   2a5d8:	e8bd8010 	pop	{r4, pc}
   2a5dc:	e3a02029 	mov	r2, #41	; 0x29
   2a5e0:	e59f1014 	ldr	r1, [pc, #20]	; 2a5fc <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2a5e4:	e59f0014 	ldr	r0, [pc, #20]	; 2a600 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2a5e8:	ebffe6b5 	bl	240c4 <assertion_failed>
   2a5ec:	e3a02041 	mov	r2, #65	; 0x41
   2a5f0:	e59f1004 	ldr	r1, [pc, #4]	; 2a5fc <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2a5f4:	e59f0004 	ldr	r0, [pc, #4]	; 2a600 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2a5f8:	ebffe6b1 	bl	240c4 <assertion_failed>
   2a5fc:	00047098 	.word	0x00047098
   2a600:	00041070 	.word	0x00041070

0002a604 <CMACAddress::operator!=(CMACAddress const&) const>:
   2a604:	e92d4010 	push	{r4, lr}
   2a608:	ebffffe5 	bl	2a5a4 <CMACAddress::operator==(CMACAddress const&) const>
   2a60c:	e2200001 	eor	r0, r0, #1
   2a610:	e6ef0070 	uxtb	r0, r0
   2a614:	e8bd8010 	pop	{r4, pc}

0002a618 <CMACAddress::Set(unsigned char const*)>:
   2a618:	e3510000 	cmp	r1, #0
   2a61c:	e92d4010 	push	{r4, lr}
   2a620:	0a000006 	beq	2a640 <CMACAddress::Set(unsigned char const*)+0x28>
   2a624:	e1a04000 	mov	r4, r0
   2a628:	e3a02006 	mov	r2, #6
   2a62c:	e2800001 	add	r0, r0, #1
   2a630:	ebfffee6 	bl	2a1d0 <memcpy>
   2a634:	e3a03001 	mov	r3, #1
   2a638:	e5c43000 	strb	r3, [r4]
   2a63c:	e8bd8010 	pop	{r4, pc}
   2a640:	e3a02034 	mov	r2, #52	; 0x34
   2a644:	e59f1004 	ldr	r1, [pc, #4]	; 2a650 <CMACAddress::Set(unsigned char const*)+0x38>
   2a648:	e59f0004 	ldr	r0, [pc, #4]	; 2a654 <CMACAddress::Set(unsigned char const*)+0x3c>
   2a64c:	ebffe69c 	bl	240c4 <assertion_failed>
   2a650:	00047098 	.word	0x00047098
   2a654:	00045cdc 	.word	0x00045cdc

0002a658 <CMACAddress::CMACAddress(unsigned char const*)>:
   2a658:	e92d4010 	push	{r4, lr}
   2a65c:	e1a04000 	mov	r4, r0
   2a660:	ebffffec 	bl	2a618 <CMACAddress::Set(unsigned char const*)>
   2a664:	e1a00004 	mov	r0, r4
   2a668:	e8bd8010 	pop	{r4, pc}

0002a66c <CMACAddress::SetBroadcast()>:
   2a66c:	e92d4010 	push	{r4, lr}
   2a670:	e3a02006 	mov	r2, #6
   2a674:	e1a04000 	mov	r4, r0
   2a678:	e3a010ff 	mov	r1, #255	; 0xff
   2a67c:	e2800001 	add	r0, r0, #1
   2a680:	ebfffc5b 	bl	297f4 <memset>
   2a684:	e3a03001 	mov	r3, #1
   2a688:	e5c43000 	strb	r3, [r4]
   2a68c:	e8bd8010 	pop	{r4, pc}

0002a690 <CMACAddress::Get() const>:
   2a690:	e5d03000 	ldrb	r3, [r0]
   2a694:	e3530000 	cmp	r3, #0
   2a698:	0a000001 	beq	2a6a4 <CMACAddress::Get() const+0x14>
   2a69c:	e2800001 	add	r0, r0, #1
   2a6a0:	e12fff1e 	bx	lr
   2a6a4:	e92d4010 	push	{r4, lr}
   2a6a8:	e3a02041 	mov	r2, #65	; 0x41
   2a6ac:	e59f1004 	ldr	r1, [pc, #4]	; 2a6b8 <CMACAddress::Get() const+0x28>
   2a6b0:	e59f0004 	ldr	r0, [pc, #4]	; 2a6bc <CMACAddress::Get() const+0x2c>
   2a6b4:	ebffe682 	bl	240c4 <assertion_failed>
   2a6b8:	00047098 	.word	0x00047098
   2a6bc:	00041070 	.word	0x00041070

0002a6c0 <CMACAddress::CopyTo(unsigned char*) const>:
   2a6c0:	e5d02000 	ldrb	r2, [r0]
   2a6c4:	e92d4010 	push	{r4, lr}
   2a6c8:	e3520000 	cmp	r2, #0
   2a6cc:	0a000007 	beq	2a6f0 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2a6d0:	e3510000 	cmp	r1, #0
   2a6d4:	e1a03001 	mov	r3, r1
   2a6d8:	0a000008 	beq	2a700 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2a6dc:	e8bd4010 	pop	{r4, lr}
   2a6e0:	e2801001 	add	r1, r0, #1
   2a6e4:	e3a02006 	mov	r2, #6
   2a6e8:	e1a00003 	mov	r0, r3
   2a6ec:	eafffeb7 	b	2a1d0 <memcpy>
   2a6f0:	e3a02047 	mov	r2, #71	; 0x47
   2a6f4:	e59f1014 	ldr	r1, [pc, #20]	; 2a710 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2a6f8:	e59f0014 	ldr	r0, [pc, #20]	; 2a714 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2a6fc:	ebffe670 	bl	240c4 <assertion_failed>
   2a700:	e3a02048 	mov	r2, #72	; 0x48
   2a704:	e59f1004 	ldr	r1, [pc, #4]	; 2a710 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2a708:	e59f0008 	ldr	r0, [pc, #8]	; 2a718 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2a70c:	ebffe66c 	bl	240c4 <assertion_failed>
   2a710:	00047098 	.word	0x00047098
   2a714:	00041070 	.word	0x00041070
   2a718:	000423b8 	.word	0x000423b8

0002a71c <CMACAddress::IsBroadcast() const>:
   2a71c:	e5d0c000 	ldrb	ip, [r0]
   2a720:	e35c0000 	cmp	ip, #0
   2a724:	12803001 	addne	r3, r0, #1
   2a728:	12802007 	addne	r2, r0, #7
   2a72c:	0a000009 	beq	2a758 <CMACAddress::IsBroadcast() const+0x3c>
   2a730:	e4d31001 	ldrb	r1, [r3], #1
   2a734:	e35100ff 	cmp	r1, #255	; 0xff
   2a738:	1a000003 	bne	2a74c <CMACAddress::IsBroadcast() const+0x30>
   2a73c:	e1530002 	cmp	r3, r2
   2a740:	1afffffa 	bne	2a730 <CMACAddress::IsBroadcast() const+0x14>
   2a744:	e1a0000c 	mov	r0, ip
   2a748:	e12fff1e 	bx	lr
   2a74c:	e3a0c000 	mov	ip, #0
   2a750:	e1a0000c 	mov	r0, ip
   2a754:	e12fff1e 	bx	lr
   2a758:	e92d4010 	push	{r4, lr}
   2a75c:	e3a0204e 	mov	r2, #78	; 0x4e
   2a760:	e59f1004 	ldr	r1, [pc, #4]	; 2a76c <CMACAddress::IsBroadcast() const+0x50>
   2a764:	e59f0004 	ldr	r0, [pc, #4]	; 2a770 <CMACAddress::IsBroadcast() const+0x54>
   2a768:	ebffe655 	bl	240c4 <assertion_failed>
   2a76c:	00047098 	.word	0x00047098
   2a770:	00041070 	.word	0x00041070

0002a774 <CMACAddress::GetSize() const>:
   2a774:	e3a00006 	mov	r0, #6
   2a778:	e12fff1e 	bx	lr

0002a77c <CMACAddress::Format(CString*) const>:
   2a77c:	e92d4030 	push	{r4, r5, lr}
   2a780:	e5d03000 	ldrb	r3, [r0]
   2a784:	e24dd014 	sub	sp, sp, #20
   2a788:	e3530000 	cmp	r3, #0
   2a78c:	0a00000f 	beq	2a7d0 <CMACAddress::Format(CString*) const+0x54>
   2a790:	e3510000 	cmp	r1, #0
   2a794:	0a000011 	beq	2a7e0 <CMACAddress::Format(CString*) const+0x64>
   2a798:	e5d05006 	ldrb	r5, [r0, #6]
   2a79c:	e5d04005 	ldrb	r4, [r0, #5]
   2a7a0:	e5d0e004 	ldrb	lr, [r0, #4]
   2a7a4:	e5d0c003 	ldrb	ip, [r0, #3]
   2a7a8:	e5d03002 	ldrb	r3, [r0, #2]
   2a7ac:	e5d02001 	ldrb	r2, [r0, #1]
   2a7b0:	e1a00001 	mov	r0, r1
   2a7b4:	e58d500c 	str	r5, [sp, #12]
   2a7b8:	e58d4008 	str	r4, [sp, #8]
   2a7bc:	e88d5000 	stm	sp, {ip, lr}
   2a7c0:	e59f1028 	ldr	r1, [pc, #40]	; 2a7f0 <CMACAddress::Format(CString*) const+0x74>
   2a7c4:	ebfff859 	bl	28930 <CString::Format(char const*, ...)>
   2a7c8:	e28dd014 	add	sp, sp, #20
   2a7cc:	e8bd8030 	pop	{r4, r5, pc}
   2a7d0:	e3a02062 	mov	r2, #98	; 0x62
   2a7d4:	e59f1018 	ldr	r1, [pc, #24]	; 2a7f4 <CMACAddress::Format(CString*) const+0x78>
   2a7d8:	e59f0018 	ldr	r0, [pc, #24]	; 2a7f8 <CMACAddress::Format(CString*) const+0x7c>
   2a7dc:	ebffe638 	bl	240c4 <assertion_failed>
   2a7e0:	e3a02063 	mov	r2, #99	; 0x63
   2a7e4:	e59f1008 	ldr	r1, [pc, #8]	; 2a7f4 <CMACAddress::Format(CString*) const+0x78>
   2a7e8:	e59f000c 	ldr	r0, [pc, #12]	; 2a7fc <CMACAddress::Format(CString*) const+0x80>
   2a7ec:	ebffe634 	bl	240c4 <assertion_failed>
   2a7f0:	000470a8 	.word	0x000470a8
   2a7f4:	00047098 	.word	0x00047098
   2a7f8:	00041070 	.word	0x00041070
   2a7fc:	00045cec 	.word	0x00045cec

0002a800 <CNetDevice::AddNetDevice()>:
   2a800:	e59f2018 	ldr	r2, [pc, #24]	; 2a820 <CNetDevice::AddNetDevice()+0x20>
   2a804:	e5923000 	ldr	r3, [r2]
   2a808:	e3530004 	cmp	r3, #4
   2a80c:	92831001 	addls	r1, r3, #1
   2a810:	90823103 	addls	r3, r2, r3, lsl #2
   2a814:	95821000 	strls	r1, [r2]
   2a818:	95830004 	strls	r0, [r3, #4]
   2a81c:	e12fff1e 	bx	lr
   2a820:	0005018c 	.word	0x0005018c

0002a824 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2a824:	e3500005 	cmp	r0, #5
   2a828:	d59f3008 	ldrle	r3, [pc, #8]	; 2a838 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2a82c:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   2a830:	c59f0004 	ldrgt	r0, [pc, #4]	; 2a83c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2a834:	e12fff1e 	bx	lr
   2a838:	00049d28 	.word	0x00049d28
   2a83c:	000470c8 	.word	0x000470c8

0002a840 <CNetDevice::GetNetDevice(unsigned int)>:
   2a840:	e59f3014 	ldr	r3, [pc, #20]	; 2a85c <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2a844:	e5932000 	ldr	r2, [r3]
   2a848:	e1520000 	cmp	r2, r0
   2a84c:	80833100 	addhi	r3, r3, r0, lsl #2
   2a850:	85930004 	ldrhi	r0, [r3, #4]
   2a854:	93a00000 	movls	r0, #0
   2a858:	e12fff1e 	bx	lr
   2a85c:	0005018c 	.word	0x0005018c

0002a860 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2a860:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a864:	e59f608c 	ldr	r6, [pc, #140]	; 2a8f8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   2a868:	e5963000 	ldr	r3, [r6]
   2a86c:	e3530000 	cmp	r3, #0
   2a870:	0a00001a 	beq	2a8e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2a874:	e5965004 	ldr	r5, [r6, #4]
   2a878:	e3550000 	cmp	r5, #0
   2a87c:	0a000017 	beq	2a8e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2a880:	e3500002 	cmp	r0, #2
   2a884:	0a000013 	beq	2a8d8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x78>
   2a888:	e3a04000 	mov	r4, #0
   2a88c:	e1a08000 	mov	r8, r0
   2a890:	e59f9064 	ldr	r9, [pc, #100]	; 2a8fc <CNetDevice::GetNetDevice(TNetDeviceType)+0x9c>
   2a894:	e1a0a004 	mov	sl, r4
   2a898:	e2867004 	add	r7, r6, #4
   2a89c:	ea000005 	b	2a8b8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x58>
   2a8a0:	e5963000 	ldr	r3, [r6]
   2a8a4:	e1530004 	cmp	r3, r4
   2a8a8:	9a00000c 	bls	2a8e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2a8ac:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   2a8b0:	e3550000 	cmp	r5, #0
   2a8b4:	0a000009 	beq	2a8e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2a8b8:	e5953000 	ldr	r3, [r5]
   2a8bc:	e5933008 	ldr	r3, [r3, #8]
   2a8c0:	e1530009 	cmp	r3, r9
   2a8c4:	01a0000a 	moveq	r0, sl
   2a8c8:	1a000007 	bne	2a8ec <CNetDevice::GetNetDevice(TNetDeviceType)+0x8c>
   2a8cc:	e1580000 	cmp	r8, r0
   2a8d0:	e2844001 	add	r4, r4, #1
   2a8d4:	1afffff1 	bne	2a8a0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2a8d8:	e1a00005 	mov	r0, r5
   2a8dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a8e0:	e3a05000 	mov	r5, #0
   2a8e4:	e1a00005 	mov	r0, r5
   2a8e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a8ec:	e1a00005 	mov	r0, r5
   2a8f0:	e12fff33 	blx	r3
   2a8f4:	eafffff4 	b	2a8cc <CNetDevice::GetNetDevice(TNetDeviceType)+0x6c>
   2a8f8:	0005018c 	.word	0x0005018c
   2a8fc:	00015a58 	.word	0x00015a58

0002a900 <operator new(unsigned int, int)>:
   2a900:	eaffffff 	b	2a904 <operator new[](unsigned int, int)>

0002a904 <operator new[](unsigned int, int)>:
   2a904:	e3510000 	cmp	r1, #0
   2a908:	0a000001 	beq	2a914 <operator new[](unsigned int, int)+0x10>
   2a90c:	e3510002 	cmp	r1, #2
   2a910:	1a000004 	bne	2a928 <operator new[](unsigned int, int)+0x24>
   2a914:	e59f3014 	ldr	r3, [pc, #20]	; 2a930 <operator new[](unsigned int, int)+0x2c>
   2a918:	e1a01000 	mov	r1, r0
   2a91c:	e5930000 	ldr	r0, [r3]
   2a920:	e280000c 	add	r0, r0, #12
   2a924:	ea000036 	b	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2a928:	e3a00000 	mov	r0, #0
   2a92c:	e12fff1e 	bx	lr
   2a930:	000501a8 	.word	0x000501a8

0002a934 <operator new(unsigned int)>:
   2a934:	eaffffff 	b	2a938 <operator new[](unsigned int)>

0002a938 <operator new[](unsigned int)>:
   2a938:	e59f300c 	ldr	r3, [pc, #12]	; 2a94c <operator new[](unsigned int)+0x14>
   2a93c:	e1a01000 	mov	r1, r0
   2a940:	e5930000 	ldr	r0, [r3]
   2a944:	e280000c 	add	r0, r0, #12
   2a948:	ea00002d 	b	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2a94c:	000501a8 	.word	0x000501a8

0002a950 <operator delete(void*)>:
   2a950:	eaffffff 	b	2a954 <operator delete[](void*)>

0002a954 <operator delete[](void*)>:
   2a954:	e59f300c 	ldr	r3, [pc, #12]	; 2a968 <operator delete[](void*)+0x14>
   2a958:	e1a01000 	mov	r1, r0
   2a95c:	e5930000 	ldr	r0, [r3]
   2a960:	e280000c 	add	r0, r0, #12
   2a964:	ea0000a4 	b	2abfc <CHeapAllocator::Free(void*)>
   2a968:	000501a8 	.word	0x000501a8

0002a96c <operator delete(void*, unsigned int)>:
   2a96c:	eaffffff 	b	2a970 <operator delete[](void*, unsigned int)>

0002a970 <operator delete[](void*, unsigned int)>:
   2a970:	e59f300c 	ldr	r3, [pc, #12]	; 2a984 <operator delete[](void*, unsigned int)+0x14>
   2a974:	e1a01000 	mov	r1, r0
   2a978:	e5930000 	ldr	r0, [r3]
   2a97c:	e280000c 	add	r0, r0, #12
   2a980:	ea00009d 	b	2abfc <CHeapAllocator::Free(void*)>
   2a984:	000501a8 	.word	0x000501a8

0002a988 <CHeapAllocator::CHeapAllocator(char const*)>:
   2a988:	e3a03000 	mov	r3, #0
   2a98c:	e3a02001 	mov	r2, #1
   2a990:	e92d4010 	push	{r4, lr}
   2a994:	e1a04000 	mov	r4, r0
   2a998:	e5801000 	str	r1, [r0]
   2a99c:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2a9a0:	e5803004 	str	r3, [r0, #4]
   2a9a4:	e5803008 	str	r3, [r0, #8]
   2a9a8:	e580300c 	str	r3, [r0, #12]
   2a9ac:	e1a01003 	mov	r1, r3
   2a9b0:	e3a020a8 	mov	r2, #168	; 0xa8
   2a9b4:	e2800010 	add	r0, r0, #16
   2a9b8:	ebfffb8d 	bl	297f4 <memset>
   2a9bc:	e1a03004 	mov	r3, r4
   2a9c0:	e59f201c 	ldr	r2, [pc, #28]	; 2a9e4 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2a9c4:	e2840038 	add	r0, r4, #56	; 0x38
   2a9c8:	e4921004 	ldr	r1, [r2], #4
   2a9cc:	e2833008 	add	r3, r3, #8
   2a9d0:	e5831008 	str	r1, [r3, #8]
   2a9d4:	e1530000 	cmp	r3, r0
   2a9d8:	1afffffa 	bne	2a9c8 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2a9dc:	e1a00004 	mov	r0, r4
   2a9e0:	e8bd8010 	pop	{r4, pc}
   2a9e4:	00049d40 	.word	0x00049d40

0002a9e8 <CHeapAllocator::~CHeapAllocator()>:
   2a9e8:	e12fff1e 	bx	lr

0002a9ec <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2a9ec:	e0812002 	add	r2, r1, r2
   2a9f0:	e980000e 	stmib	r0, {r1, r2, r3}
   2a9f4:	e12fff1e 	bx	lr

0002a9f8 <CHeapAllocator::GetFreeSpace() const>:
   2a9f8:	e9900005 	ldmib	r0, {r0, r2}
   2a9fc:	e0420000 	sub	r0, r2, r0
   2aa00:	e12fff1e 	bx	lr

0002aa04 <CHeapAllocator::Allocate(unsigned int)>:
   2aa04:	e5903004 	ldr	r3, [r0, #4]
   2aa08:	e3530000 	cmp	r3, #0
   2aa0c:	0a000073 	beq	2abe0 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   2aa10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2aa14:	e1a06000 	mov	r6, r0
   2aa18:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2aa1c:	e1a04001 	mov	r4, r1
   2aa20:	e3500000 	cmp	r0, #0
   2aa24:	1a000042 	bne	2ab34 <CHeapAllocator::Allocate(unsigned int)+0x130>
   2aa28:	e5963010 	ldr	r3, [r6, #16]
   2aa2c:	e2862010 	add	r2, r6, #16
   2aa30:	e3530000 	cmp	r3, #0
   2aa34:	0a000007 	beq	2aa58 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2aa38:	e1540003 	cmp	r4, r3
   2aa3c:	8a000002 	bhi	2aa4c <CHeapAllocator::Allocate(unsigned int)+0x48>
   2aa40:	ea000016 	b	2aaa0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2aa44:	e1530004 	cmp	r3, r4
   2aa48:	2a000014 	bcs	2aaa0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2aa4c:	e5b23008 	ldr	r3, [r2, #8]!
   2aa50:	e3530000 	cmp	r3, #0
   2aa54:	1afffffa 	bne	2aa44 <CHeapAllocator::Allocate(unsigned int)+0x40>
   2aa58:	e5965004 	ldr	r5, [r6, #4]
   2aa5c:	e284301f 	add	r3, r4, #31
   2aa60:	e3c3300f 	bic	r3, r3, #15
   2aa64:	e0853003 	add	r3, r5, r3
   2aa68:	e1550003 	cmp	r5, r3
   2aa6c:	e596700c 	ldr	r7, [r6, #12]
   2aa70:	2a000003 	bcs	2aa84 <CHeapAllocator::Allocate(unsigned int)+0x80>
   2aa74:	e5962008 	ldr	r2, [r6, #8]
   2aa78:	e0422007 	sub	r2, r2, r7
   2aa7c:	e1530002 	cmp	r3, r2
   2aa80:	9a00002d 	bls	2ab3c <CHeapAllocator::Allocate(unsigned int)+0x138>
   2aa84:	e3570000 	cmp	r7, #0
   2aa88:	1a000047 	bne	2abac <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   2aa8c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2aa90:	e3530000 	cmp	r3, #0
   2aa94:	1a00003d 	bne	2ab90 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   2aa98:	e3a00000 	mov	r0, #0
   2aa9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2aaa0:	e5925004 	ldr	r5, [r2, #4]
   2aaa4:	e3550000 	cmp	r5, #0
   2aaa8:	01a04003 	moveq	r4, r3
   2aaac:	0affffe9 	beq	2aa58 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2aab0:	e5d50001 	ldrb	r0, [r5, #1]
   2aab4:	e5d53000 	ldrb	r3, [r5]
   2aab8:	e5d51002 	ldrb	r1, [r5, #2]
   2aabc:	e1833400 	orr	r3, r3, r0, lsl #8
   2aac0:	e5d50003 	ldrb	r0, [r5, #3]
   2aac4:	e1833801 	orr	r3, r3, r1, lsl #16
   2aac8:	e59f1118 	ldr	r1, [pc, #280]	; 2abe8 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2aacc:	e1833c00 	orr	r3, r3, r0, lsl #24
   2aad0:	e1530001 	cmp	r3, r1
   2aad4:	1a000030 	bne	2ab9c <CHeapAllocator::Allocate(unsigned int)+0x198>
   2aad8:	e5d51009 	ldrb	r1, [r5, #9]
   2aadc:	e5d53008 	ldrb	r3, [r5, #8]
   2aae0:	e5d5000a 	ldrb	r0, [r5, #10]
   2aae4:	e1833401 	orr	r3, r3, r1, lsl #8
   2aae8:	e5d5100b 	ldrb	r1, [r5, #11]
   2aaec:	e1833800 	orr	r3, r3, r0, lsl #16
   2aaf0:	e1833c01 	orr	r3, r3, r1, lsl #24
   2aaf4:	e5823004 	str	r3, [r2, #4]
   2aaf8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2aafc:	e3530000 	cmp	r3, #0
   2ab00:	1a000020 	bne	2ab88 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2ab04:	e3a03000 	mov	r3, #0
   2ab08:	e2850010 	add	r0, r5, #16
   2ab0c:	e310000f 	tst	r0, #15
   2ab10:	e5c53008 	strb	r3, [r5, #8]
   2ab14:	e5c53009 	strb	r3, [r5, #9]
   2ab18:	e5c5300a 	strb	r3, [r5, #10]
   2ab1c:	e5c5300b 	strb	r3, [r5, #11]
   2ab20:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2ab24:	e3a0208e 	mov	r2, #142	; 0x8e
   2ab28:	e59f10bc 	ldr	r1, [pc, #188]	; 2abec <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2ab2c:	e59f00bc 	ldr	r0, [pc, #188]	; 2abf0 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2ab30:	ebffe563 	bl	240c4 <assertion_failed>
   2ab34:	eb0002b0 	bl	2b5fc <EnterCritical>
   2ab38:	eaffffba 	b	2aa28 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2ab3c:	e3a0e043 	mov	lr, #67	; 0x43
   2ab40:	e3a0c04d 	mov	ip, #77	; 0x4d
   2ab44:	e3a0004c 	mov	r0, #76	; 0x4c
   2ab48:	e3a01042 	mov	r1, #66	; 0x42
   2ab4c:	e5863004 	str	r3, [r6, #4]
   2ab50:	e1a03824 	lsr	r3, r4, #16
   2ab54:	e5c53006 	strb	r3, [r5, #6]
   2ab58:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2ab5c:	e1a02424 	lsr	r2, r4, #8
   2ab60:	e5c54004 	strb	r4, [r5, #4]
   2ab64:	e3530000 	cmp	r3, #0
   2ab68:	e1a04c24 	lsr	r4, r4, #24
   2ab6c:	e5c5e000 	strb	lr, [r5]
   2ab70:	e5c5c001 	strb	ip, [r5, #1]
   2ab74:	e5c50002 	strb	r0, [r5, #2]
   2ab78:	e5c51003 	strb	r1, [r5, #3]
   2ab7c:	e5c52005 	strb	r2, [r5, #5]
   2ab80:	e5c54007 	strb	r4, [r5, #7]
   2ab84:	0affffde 	beq	2ab04 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2ab88:	eb0002c6 	bl	2b6a8 <LeaveCritical>
   2ab8c:	eaffffdc 	b	2ab04 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2ab90:	eb0002c4 	bl	2b6a8 <LeaveCritical>
   2ab94:	e1a00007 	mov	r0, r7
   2ab98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ab9c:	e3a0205e 	mov	r2, #94	; 0x5e
   2aba0:	e59f1044 	ldr	r1, [pc, #68]	; 2abec <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2aba4:	e59f0048 	ldr	r0, [pc, #72]	; 2abf4 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2aba8:	ebffe545 	bl	240c4 <assertion_failed>
   2abac:	e3a02000 	mov	r2, #0
   2abb0:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2abb4:	e586200c 	str	r2, [r6, #12]
   2abb8:	e1530002 	cmp	r3, r2
   2abbc:	0a000000 	beq	2abc4 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2abc0:	eb0002b8 	bl	2b6a8 <LeaveCritical>
   2abc4:	ebffee31 	bl	26490 <CLogger::Get()>
   2abc8:	e5961000 	ldr	r1, [r6]
   2abcc:	e59f3024 	ldr	r3, [pc, #36]	; 2abf8 <CHeapAllocator::Allocate(unsigned int)+0x1f4>
   2abd0:	e3a02000 	mov	r2, #0
   2abd4:	ebffed6a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2abd8:	e3a00000 	mov	r0, #0
   2abdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2abe0:	e3a00000 	mov	r0, #0
   2abe4:	e12fff1e 	bx	lr
   2abe8:	424c4d43 	.word	0x424c4d43
   2abec:	00047160 	.word	0x00047160
   2abf0:	000471b0 	.word	0x000471b0
   2abf4:	00047174 	.word	0x00047174
   2abf8:	000471a0 	.word	0x000471a0

0002abfc <CHeapAllocator::Free(void*)>:
   2abfc:	e3510000 	cmp	r1, #0
   2ac00:	012fff1e 	bxeq	lr
   2ac04:	e92d4070 	push	{r4, r5, r6, lr}
   2ac08:	e2415010 	sub	r5, r1, #16
   2ac0c:	e5513010 	ldrb	r3, [r1, #-16]
   2ac10:	e5d51001 	ldrb	r1, [r5, #1]
   2ac14:	e5d52002 	ldrb	r2, [r5, #2]
   2ac18:	e1833401 	orr	r3, r3, r1, lsl #8
   2ac1c:	e5d51003 	ldrb	r1, [r5, #3]
   2ac20:	e1833802 	orr	r3, r3, r2, lsl #16
   2ac24:	e59f20dc 	ldr	r2, [pc, #220]	; 2ad08 <CHeapAllocator::Free(void*)+0x10c>
   2ac28:	e1833c01 	orr	r3, r3, r1, lsl #24
   2ac2c:	e1530002 	cmp	r3, r2
   2ac30:	e1a06000 	mov	r6, r0
   2ac34:	1a00002f 	bne	2acf8 <CHeapAllocator::Free(void*)+0xfc>
   2ac38:	e5903010 	ldr	r3, [r0, #16]
   2ac3c:	e2804010 	add	r4, r0, #16
   2ac40:	e3530000 	cmp	r3, #0
   2ac44:	08bd8070 	popeq	{r4, r5, r6, pc}
   2ac48:	e5d51005 	ldrb	r1, [r5, #5]
   2ac4c:	e5d52004 	ldrb	r2, [r5, #4]
   2ac50:	e5d50006 	ldrb	r0, [r5, #6]
   2ac54:	e1822401 	orr	r2, r2, r1, lsl #8
   2ac58:	e5d51007 	ldrb	r1, [r5, #7]
   2ac5c:	e1822800 	orr	r2, r2, r0, lsl #16
   2ac60:	e1822c01 	orr	r2, r2, r1, lsl #24
   2ac64:	e1530002 	cmp	r3, r2
   2ac68:	1a000002 	bne	2ac78 <CHeapAllocator::Free(void*)+0x7c>
   2ac6c:	ea000005 	b	2ac88 <CHeapAllocator::Free(void*)+0x8c>
   2ac70:	e1520003 	cmp	r2, r3
   2ac74:	0a000003 	beq	2ac88 <CHeapAllocator::Free(void*)+0x8c>
   2ac78:	e5b43008 	ldr	r3, [r4, #8]!
   2ac7c:	e3530000 	cmp	r3, #0
   2ac80:	1afffffa 	bne	2ac70 <CHeapAllocator::Free(void*)+0x74>
   2ac84:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ac88:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2ac8c:	e3500000 	cmp	r0, #0
   2ac90:	1a000009 	bne	2acbc <CHeapAllocator::Free(void*)+0xc0>
   2ac94:	e5d40004 	ldrb	r0, [r4, #4]
   2ac98:	e5d41005 	ldrb	r1, [r4, #5]
   2ac9c:	e5d42006 	ldrb	r2, [r4, #6]
   2aca0:	e5d43007 	ldrb	r3, [r4, #7]
   2aca4:	e5c50008 	strb	r0, [r5, #8]
   2aca8:	e5c51009 	strb	r1, [r5, #9]
   2acac:	e5c5200a 	strb	r2, [r5, #10]
   2acb0:	e5c5300b 	strb	r3, [r5, #11]
   2acb4:	e5845004 	str	r5, [r4, #4]
   2acb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2acbc:	eb00024e 	bl	2b5fc <EnterCritical>
   2acc0:	e596c0b8 	ldr	ip, [r6, #184]	; 0xb8
   2acc4:	e5d40004 	ldrb	r0, [r4, #4]
   2acc8:	e5d41005 	ldrb	r1, [r4, #5]
   2accc:	e5d42006 	ldrb	r2, [r4, #6]
   2acd0:	e5d43007 	ldrb	r3, [r4, #7]
   2acd4:	e35c0000 	cmp	ip, #0
   2acd8:	e5c50008 	strb	r0, [r5, #8]
   2acdc:	e5c51009 	strb	r1, [r5, #9]
   2ace0:	e5c5200a 	strb	r2, [r5, #10]
   2ace4:	e5c5300b 	strb	r3, [r5, #11]
   2ace8:	e5845004 	str	r5, [r4, #4]
   2acec:	08bd8070 	popeq	{r4, r5, r6, pc}
   2acf0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2acf4:	ea00026b 	b	2b6a8 <LeaveCritical>
   2acf8:	e3a020bf 	mov	r2, #191	; 0xbf
   2acfc:	e59f1008 	ldr	r1, [pc, #8]	; 2ad0c <CHeapAllocator::Free(void*)+0x110>
   2ad00:	e59f0008 	ldr	r0, [pc, #8]	; 2ad10 <CHeapAllocator::Free(void*)+0x114>
   2ad04:	ebffe4ee 	bl	240c4 <assertion_failed>
   2ad08:	424c4d43 	.word	0x424c4d43
   2ad0c:	00047160 	.word	0x00047160
   2ad10:	00047174 	.word	0x00047174

0002ad14 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2ad14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ad18:	e2515000 	subs	r5, r1, #0
   2ad1c:	e24dd00c 	sub	sp, sp, #12
   2ad20:	0a000031 	beq	2adec <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2ad24:	e3520000 	cmp	r2, #0
   2ad28:	0a000033 	beq	2adfc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe8>
   2ad2c:	e2454010 	sub	r4, r5, #16
   2ad30:	e5d4c001 	ldrb	ip, [r4, #1]
   2ad34:	e5553010 	ldrb	r3, [r5, #-16]
   2ad38:	e5d41002 	ldrb	r1, [r4, #2]
   2ad3c:	e183340c 	orr	r3, r3, ip, lsl #8
   2ad40:	e5d4c003 	ldrb	ip, [r4, #3]
   2ad44:	e1833801 	orr	r3, r3, r1, lsl #16
   2ad48:	e59f10c8 	ldr	r1, [pc, #200]	; 2ae18 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2ad4c:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2ad50:	e1530001 	cmp	r3, r1
   2ad54:	1a000020 	bne	2addc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2ad58:	e5d41005 	ldrb	r1, [r4, #5]
   2ad5c:	e5d43004 	ldrb	r3, [r4, #4]
   2ad60:	e5d4c006 	ldrb	ip, [r4, #6]
   2ad64:	e1833401 	orr	r3, r3, r1, lsl #8
   2ad68:	e5d41007 	ldrb	r1, [r4, #7]
   2ad6c:	e183380c 	orr	r3, r3, ip, lsl #16
   2ad70:	e1833c01 	orr	r3, r3, r1, lsl #24
   2ad74:	e1520003 	cmp	r2, r3
   2ad78:	8a000002 	bhi	2ad88 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   2ad7c:	e1a00005 	mov	r0, r5
   2ad80:	e28dd00c 	add	sp, sp, #12
   2ad84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ad88:	e1a01002 	mov	r1, r2
   2ad8c:	e1a06000 	mov	r6, r0
   2ad90:	ebffff1b 	bl	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2ad94:	e2507000 	subs	r7, r0, #0
   2ad98:	0a00001c 	beq	2ae10 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2ad9c:	e5d42005 	ldrb	r2, [r4, #5]
   2ada0:	e5d43004 	ldrb	r3, [r4, #4]
   2ada4:	e5d41006 	ldrb	r1, [r4, #6]
   2ada8:	e1833402 	orr	r3, r3, r2, lsl #8
   2adac:	e5d42007 	ldrb	r2, [r4, #7]
   2adb0:	e1833801 	orr	r3, r3, r1, lsl #16
   2adb4:	e1832c02 	orr	r2, r3, r2, lsl #24
   2adb8:	e1a01005 	mov	r1, r5
   2adbc:	ebfffd03 	bl	2a1d0 <memcpy>
   2adc0:	e1a01005 	mov	r1, r5
   2adc4:	e1a05007 	mov	r5, r7
   2adc8:	e1a00006 	mov	r0, r6
   2adcc:	ebffff8a 	bl	2abfc <CHeapAllocator::Free(void*)>
   2add0:	e1a00005 	mov	r0, r5
   2add4:	e28dd00c 	add	sp, sp, #12
   2add8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2addc:	e3a020a3 	mov	r2, #163	; 0xa3
   2ade0:	e59f1034 	ldr	r1, [pc, #52]	; 2ae1c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x108>
   2ade4:	e59f0034 	ldr	r0, [pc, #52]	; 2ae20 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x10c>
   2ade8:	ebffe4b5 	bl	240c4 <assertion_failed>
   2adec:	e1a01002 	mov	r1, r2
   2adf0:	e28dd00c 	add	sp, sp, #12
   2adf4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2adf8:	eaffff01 	b	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2adfc:	e58d2004 	str	r2, [sp, #4]
   2ae00:	ebffff7d 	bl	2abfc <CHeapAllocator::Free(void*)>
   2ae04:	e59d2004 	ldr	r2, [sp, #4]
   2ae08:	e1a05002 	mov	r5, r2
   2ae0c:	eaffffda 	b	2ad7c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2ae10:	e1a05007 	mov	r5, r7
   2ae14:	eaffffd8 	b	2ad7c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2ae18:	424c4d43 	.word	0x424c4d43
   2ae1c:	00047160 	.word	0x00047160
   2ae20:	00047174 	.word	0x00047174

0002ae24 <CExceptionHandler::Get() [clone .part.1]>:
   2ae24:	e92d4010 	push	{r4, lr}
   2ae28:	e3a02087 	mov	r2, #135	; 0x87
   2ae2c:	e59f1004 	ldr	r1, [pc, #4]	; 2ae38 <CExceptionHandler::Get() [clone .part.1]+0x14>
   2ae30:	e59f0004 	ldr	r0, [pc, #4]	; 2ae3c <CExceptionHandler::Get() [clone .part.1]+0x18>
   2ae34:	ebffe4a2 	bl	240c4 <assertion_failed>
   2ae38:	000471e4 	.word	0x000471e4
   2ae3c:	00045148 	.word	0x00045148

0002ae40 <CExceptionHandler::CExceptionHandler()>:
   2ae40:	e59fc06c 	ldr	ip, [pc, #108]	; 2aeb4 <CExceptionHandler::CExceptionHandler()+0x74>
   2ae44:	e92d4010 	push	{r4, lr}
   2ae48:	e1a04000 	mov	r4, r0
   2ae4c:	e59c0000 	ldr	r0, [ip]
   2ae50:	e3500000 	cmp	r0, #0
   2ae54:	1a000012 	bne	2aea4 <CExceptionHandler::CExceptionHandler()+0x64>
   2ae58:	e59f1058 	ldr	r1, [pc, #88]	; 2aeb8 <CExceptionHandler::CExceptionHandler()+0x78>
   2ae5c:	e59f2058 	ldr	r2, [pc, #88]	; 2aebc <CExceptionHandler::CExceptionHandler()+0x7c>
   2ae60:	e59f3058 	ldr	r3, [pc, #88]	; 2aec0 <CExceptionHandler::CExceptionHandler()+0x80>
   2ae64:	e1a01141 	asr	r1, r1, #2
   2ae68:	e1a02142 	asr	r2, r2, #2
   2ae6c:	e1a03143 	asr	r3, r3, #2
   2ae70:	e2411002 	sub	r1, r1, #2
   2ae74:	e2422002 	sub	r2, r2, #2
   2ae78:	e2433002 	sub	r3, r3, #2
   2ae7c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2ae80:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2ae84:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2ae88:	e58c4000 	str	r4, [ip]
   2ae8c:	e5801004 	str	r1, [r0, #4]
   2ae90:	e580200c 	str	r2, [r0, #12]
   2ae94:	e5803010 	str	r3, [r0, #16]
   2ae98:	eb000227 	bl	2b73c <SyncDataAndInstructionCache>
   2ae9c:	e1a00004 	mov	r0, r4
   2aea0:	e8bd8010 	pop	{r4, pc}
   2aea4:	e3a02030 	mov	r2, #48	; 0x30
   2aea8:	e59f1014 	ldr	r1, [pc, #20]	; 2aec4 <CExceptionHandler::CExceptionHandler()+0x84>
   2aeac:	e59f0014 	ldr	r0, [pc, #20]	; 2aec8 <CExceptionHandler::CExceptionHandler()+0x88>
   2aeb0:	ebffe483 	bl	240c4 <assertion_failed>
   2aeb4:	000501a4 	.word	0x000501a4
   2aeb8:	0002b18c 	.word	0x0002b18c
   2aebc:	0002b0e4 	.word	0x0002b0e4
   2aec0:	0002b130 	.word	0x0002b130
   2aec4:	000471e4 	.word	0x000471e4
   2aec8:	00045110 	.word	0x00045110

0002aecc <CExceptionHandler::~CExceptionHandler()>:
   2aecc:	e3a02000 	mov	r2, #0
   2aed0:	e59f3004 	ldr	r3, [pc, #4]	; 2aedc <CExceptionHandler::~CExceptionHandler()+0x10>
   2aed4:	e5832000 	str	r2, [r3]
   2aed8:	e12fff1e 	bx	lr
   2aedc:	000501a4 	.word	0x000501a4

0002aee0 <CExceptionHandler::Throw(unsigned int)>:
   2aee0:	e92d4010 	push	{r4, lr}
   2aee4:	e1a04001 	mov	r4, r1
   2aee8:	e24dd008 	sub	sp, sp, #8
   2aeec:	ebffed67 	bl	26490 <CLogger::Get()>
   2aef0:	e59f201c 	ldr	r2, [pc, #28]	; 2af14 <CExceptionHandler::Throw(unsigned int)+0x34>
   2aef4:	e59f301c 	ldr	r3, [pc, #28]	; 2af18 <CExceptionHandler::Throw(unsigned int)+0x38>
   2aef8:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2aefc:	e3a02000 	mov	r2, #0
   2af00:	e58d1000 	str	r1, [sp]
   2af04:	e59f1010 	ldr	r1, [pc, #16]	; 2af1c <CExceptionHandler::Throw(unsigned int)+0x3c>
   2af08:	ebffec9d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2af0c:	e28dd008 	add	sp, sp, #8
   2af10:	e8bd8010 	pop	{r4, pc}
   2af14:	00049d5c 	.word	0x00049d5c
   2af18:	000471fc 	.word	0x000471fc
   2af1c:	000471dc 	.word	0x000471dc

0002af20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2af20:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2af24:	e3510002 	cmp	r1, #2
   2af28:	e24dd024 	sub	sp, sp, #36	; 0x24
   2af2c:	e1a05001 	mov	r5, r1
   2af30:	e1a04002 	mov	r4, r2
   2af34:	0a00002a 	beq	2afe4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   2af38:	e3510003 	cmp	r1, #3
   2af3c:	0a000020 	beq	2afc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   2af40:	e3a08000 	mov	r8, #0
   2af44:	e1a09008 	mov	r9, r8
   2af48:	e3540000 	cmp	r4, #0
   2af4c:	0a000020 	beq	2afd4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2af50:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2af54:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   2af58:	e203301f 	and	r3, r3, #31
   2af5c:	e3530011 	cmp	r3, #17
   2af60:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   2af64:	0a000021 	beq	2aff0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   2af68:	e3530012 	cmp	r3, #18
   2af6c:	089400c0 	ldmeq	r4, {r6, r7}
   2af70:	e59f1084 	ldr	r1, [pc, #132]	; 2affc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2af74:	e1a00006 	mov	r0, r6
   2af78:	ebffe60b 	bl	247ac <debug_stacktrace(unsigned int const*, char const*)>
   2af7c:	ebffed43 	bl	26490 <CLogger::Get()>
   2af80:	e59f3078 	ldr	r3, [pc, #120]	; 2b000 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2af84:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2af88:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   2af8c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2af90:	e58d1000 	str	r1, [sp]
   2af94:	e58d2018 	str	r2, [sp, #24]
   2af98:	e58d3004 	str	r3, [sp, #4]
   2af9c:	e58d7014 	str	r7, [sp, #20]
   2afa0:	e58d6010 	str	r6, [sp, #16]
   2afa4:	e58d800c 	str	r8, [sp, #12]
   2afa8:	e58d9008 	str	r9, [sp, #8]
   2afac:	e59f3050 	ldr	r3, [pc, #80]	; 2b004 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2afb0:	e3a02000 	mov	r2, #0
   2afb4:	e59f1040 	ldr	r1, [pc, #64]	; 2affc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2afb8:	ebffec71 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2afbc:	e28dd024 	add	sp, sp, #36	; 0x24
   2afc0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2afc4:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2afc8:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   2afcc:	e3540000 	cmp	r4, #0
   2afd0:	1affffde 	bne	2af50 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2afd4:	e3a02069 	mov	r2, #105	; 0x69
   2afd8:	e59f1028 	ldr	r1, [pc, #40]	; 2b008 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2afdc:	e59f0028 	ldr	r0, [pc, #40]	; 2b00c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2afe0:	ebffe437 	bl	240c4 <assertion_failed>
   2afe4:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2afe8:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   2afec:	eaffffd5 	b	2af48 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2aff0:	e594700c 	ldr	r7, [r4, #12]
   2aff4:	e5946008 	ldr	r6, [r4, #8]
   2aff8:	eaffffdc 	b	2af70 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   2affc:	000471dc 	.word	0x000471dc
   2b000:	00049d5c 	.word	0x00049d5c
   2b004:	0004720c 	.word	0x0004720c
   2b008:	000471e4 	.word	0x000471e4
   2b00c:	000453c8 	.word	0x000453c8

0002b010 <CExceptionHandler::Get()>:
   2b010:	e59f3014 	ldr	r3, [pc, #20]	; 2b02c <CExceptionHandler::Get()+0x1c>
   2b014:	e5930000 	ldr	r0, [r3]
   2b018:	e3500000 	cmp	r0, #0
   2b01c:	0a000000 	beq	2b024 <CExceptionHandler::Get()+0x14>
   2b020:	e12fff1e 	bx	lr
   2b024:	e92d4010 	push	{r4, lr}
   2b028:	ebffff7d 	bl	2ae24 <CExceptionHandler::Get() [clone .part.1]>
   2b02c:	000501a4 	.word	0x000501a4

0002b030 <ExceptionHandler>:
   2b030:	e92d4070 	push	{r4, r5, r6, lr}
   2b034:	e3a03000 	mov	r3, #0
   2b038:	e1a04000 	mov	r4, r0
   2b03c:	e1a05001 	mov	r5, r1
   2b040:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b044:	eb0002cc 	bl	2bb7c <CInterruptSystem::DisableFIQ()>
   2b048:	f1080040 	cpsie	f
   2b04c:	e59f301c 	ldr	r3, [pc, #28]	; 2b070 <ExceptionHandler+0x40>
   2b050:	e5930000 	ldr	r0, [r3]
   2b054:	e3500000 	cmp	r0, #0
   2b058:	0a000003 	beq	2b06c <ExceptionHandler+0x3c>
   2b05c:	e1a02005 	mov	r2, r5
   2b060:	e1a01004 	mov	r1, r4
   2b064:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b068:	eaffffac 	b	2af20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b06c:	ebffff6c 	bl	2ae24 <CExceptionHandler::Get() [clone .part.1]>
   2b070:	000501a4 	.word	0x000501a4

0002b074 <raise>:
   2b074:	e59f3020 	ldr	r3, [pc, #32]	; 2b09c <raise+0x28>
   2b078:	e92d4010 	push	{r4, lr}
   2b07c:	e5930000 	ldr	r0, [r3]
   2b080:	e3500000 	cmp	r0, #0
   2b084:	0a000003 	beq	2b098 <raise+0x24>
   2b088:	e3a01004 	mov	r1, #4
   2b08c:	ebffff93 	bl	2aee0 <CExceptionHandler::Throw(unsigned int)>
   2b090:	e3a00000 	mov	r0, #0
   2b094:	e8bd8010 	pop	{r4, pc}
   2b098:	ebffff61 	bl	2ae24 <CExceptionHandler::Get() [clone .part.1]>
   2b09c:	000501a4 	.word	0x000501a4

0002b0a0 <UndefinedInstructionInternal>:
   2b0a0:	e24dd004 	sub	sp, sp, #4
   2b0a4:	e24ee004 	sub	lr, lr, #4
   2b0a8:	e92d4000 	stmfd	sp!, {lr}
   2b0ac:	e14fe000 	mrs	lr, SPSR
   2b0b0:	e92d4000 	stmfd	sp!, {lr}
   2b0b4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b0b8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b0bc:	e1a0100d 	mov	r1, sp
   2b0c0:	f1020012 	cps	#18
   2b0c4:	e1a0200d 	mov	r2, sp
   2b0c8:	e1a0300e 	mov	r3, lr
   2b0cc:	f1020011 	cps	#17
   2b0d0:	e1a0400d 	mov	r4, sp
   2b0d4:	e1a0500e 	mov	r5, lr
   2b0d8:	f102001f 	cps	#31
   2b0dc:	e1a0d001 	mov	sp, r1
   2b0e0:	e92d003c 	push	{r2, r3, r4, r5}
   2b0e4:	e1a0100d 	mov	r1, sp
   2b0e8:	e3a00001 	mov	r0, #1
   2b0ec:	eaffffcf 	b	2b030 <ExceptionHandler>

0002b0f0 <PrefetchAbortStub>:
   2b0f0:	e24dd004 	sub	sp, sp, #4
   2b0f4:	e24ee004 	sub	lr, lr, #4
   2b0f8:	e92d4000 	stmfd	sp!, {lr}
   2b0fc:	e14fe000 	mrs	lr, SPSR
   2b100:	e92d4000 	stmfd	sp!, {lr}
   2b104:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b108:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b10c:	e1a0100d 	mov	r1, sp
   2b110:	f1020012 	cps	#18
   2b114:	e1a0200d 	mov	r2, sp
   2b118:	e1a0300e 	mov	r3, lr
   2b11c:	f1020011 	cps	#17
   2b120:	e1a0400d 	mov	r4, sp
   2b124:	e1a0500e 	mov	r5, lr
   2b128:	f102001f 	cps	#31
   2b12c:	e1a0d001 	mov	sp, r1
   2b130:	e92d003c 	push	{r2, r3, r4, r5}
   2b134:	e1a0100d 	mov	r1, sp
   2b138:	e3a00002 	mov	r0, #2
   2b13c:	eaffffbb 	b	2b030 <ExceptionHandler>

0002b140 <DataAbortStub>:
   2b140:	e24dd004 	sub	sp, sp, #4
   2b144:	e24ee008 	sub	lr, lr, #8
   2b148:	e92d4000 	stmfd	sp!, {lr}
   2b14c:	e14fe000 	mrs	lr, SPSR
   2b150:	e92d4000 	stmfd	sp!, {lr}
   2b154:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b158:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b15c:	e1a0100d 	mov	r1, sp
   2b160:	f1020012 	cps	#18
   2b164:	e1a0200d 	mov	r2, sp
   2b168:	e1a0300e 	mov	r3, lr
   2b16c:	f1020011 	cps	#17
   2b170:	e1a0400d 	mov	r4, sp
   2b174:	e1a0500e 	mov	r5, lr
   2b178:	f102001f 	cps	#31
   2b17c:	e1a0d001 	mov	sp, r1
   2b180:	e92d003c 	push	{r2, r3, r4, r5}
   2b184:	e1a0100d 	mov	r1, sp
   2b188:	e3a00003 	mov	r0, #3
   2b18c:	eaffffa7 	b	2b030 <ExceptionHandler>

0002b190 <UndefinedInstructionStub>:
   2b190:	e92d4001 	push	{r0, lr}
   2b194:	eef80a10 	vmrs	r0, fpexc
   2b198:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b19c:	0affffbf 	beq	2b0a0 <UndefinedInstructionInternal>
   2b1a0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b1a4:	eee80a10 	vmsr	fpexc, r0
   2b1a8:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b1ac <IRQStub>:
   2b1ac:	e24ee004 	sub	lr, lr, #4
   2b1b0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b1b4:	e59f0060 	ldr	r0, [pc, #96]	; 2b21c <FIQStub+0x58>
   2b1b8:	e580e000 	str	lr, [r0]
   2b1bc:	eb0002c8 	bl	2bce4 <InterruptHandler>
   2b1c0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b1c4 <FIQStub>:
   2b1c4:	e24ee004 	sub	lr, lr, #4
   2b1c8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b1cc:	e3a03000 	mov	r3, #0
   2b1d0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b1d4:	e59f2044 	ldr	r2, [pc, #68]	; 2b220 <FIQStub+0x5c>
   2b1d8:	e5921000 	ldr	r1, [r2]
   2b1dc:	e3510000 	cmp	r1, #0
   2b1e0:	0a000004 	beq	2b1f8 <FIQStub+0x34>
   2b1e4:	e5920004 	ldr	r0, [r2, #4]
   2b1e8:	e12fff31 	blx	r1
   2b1ec:	e3a03000 	mov	r3, #0
   2b1f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b1f4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b1f8:	e3a03000 	mov	r3, #0
   2b1fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b200:	e59f101c 	ldr	r1, [pc, #28]	; 2b224 <FIQStub+0x60>
   2b204:	e3a00000 	mov	r0, #0
   2b208:	e5810000 	str	r0, [r1]
   2b20c:	e3a03000 	mov	r3, #0
   2b210:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b214:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b218:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b21c:	00049d7c 	.word	0x00049d7c
   2b220:	00049d70 	.word	0x00049d70
   2b224:	2000b20c 	.word	0x2000b20c

0002b228 <CMemorySystem::CMemorySystem(bool)>:
   2b228:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b22c:	e1a04000 	mov	r4, r0
   2b230:	e3a05000 	mov	r5, #0
   2b234:	e280700c 	add	r7, r0, #12
   2b238:	e5c01000 	strb	r1, [r0]
   2b23c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b240:	e5845004 	str	r5, [r4, #4]
   2b244:	e5845008 	str	r5, [r4, #8]
   2b248:	e59f10fc 	ldr	r1, [pc, #252]	; 2b34c <CMemorySystem::CMemorySystem(bool)+0x124>
   2b24c:	e1a00007 	mov	r0, r7
   2b250:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b254:	ebfffdcb 	bl	2a988 <CHeapAllocator::CHeapAllocator(char const*)>
   2b258:	e1a00006 	mov	r0, r6
   2b25c:	eb00053f 	bl	2c760 <CPageAllocator::CPageAllocator()>
   2b260:	e59f30e8 	ldr	r3, [pc, #232]	; 2b350 <CMemorySystem::CMemorySystem(bool)+0x128>
   2b264:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b268:	e5935000 	ldr	r5, [r3]
   2b26c:	e3550000 	cmp	r5, #0
   2b270:	0a000002 	beq	2b280 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b274:	e1a00004 	mov	r0, r4
   2b278:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b27c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b280:	e3a01001 	mov	r1, #1
   2b284:	e28d000c 	add	r0, sp, #12
   2b288:	e5834000 	str	r4, [r3]
   2b28c:	ebffe3ad 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b290:	e3a03014 	mov	r3, #20
   2b294:	e58d5000 	str	r5, [sp]
   2b298:	e28d000c 	add	r0, sp, #12
   2b29c:	e08d2003 	add	r2, sp, r3
   2b2a0:	e59f10ac 	ldr	r1, [pc, #172]	; 2b354 <CMemorySystem::CMemorySystem(bool)+0x12c>
   2b2a4:	ebffe3b3 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b2a8:	e3500000 	cmp	r0, #0
   2b2ac:	0a00001c 	beq	2b324 <CMemorySystem::CMemorySystem(bool)+0xfc>
   2b2b0:	e59d3020 	ldr	r3, [sp, #32]
   2b2b4:	e3530000 	cmp	r3, #0
   2b2b8:	1a00001f 	bne	2b33c <CMemorySystem::CMemorySystem(bool)+0x114>
   2b2bc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2b2c0:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2b2c4:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2b2c8:	e5843004 	str	r3, [r4, #4]
   2b2cc:	e1a00007 	mov	r0, r7
   2b2d0:	e3a03701 	mov	r3, #262144	; 0x40000
   2b2d4:	e3a01605 	mov	r1, #5242880	; 0x500000
   2b2d8:	ebfffdc3 	bl	2a9ec <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2b2dc:	e1a01005 	mov	r1, r5
   2b2e0:	e1a00006 	mov	r0, r6
   2b2e4:	e3a02501 	mov	r2, #4194304	; 0x400000
   2b2e8:	eb000524 	bl	2c780 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2b2ec:	e5d43000 	ldrb	r3, [r4]
   2b2f0:	e3530000 	cmp	r3, #0
   2b2f4:	0a000007 	beq	2b318 <CMemorySystem::CMemorySystem(bool)+0xf0>
   2b2f8:	e3a00004 	mov	r0, #4
   2b2fc:	ebfffd8c 	bl	2a934 <operator new(unsigned int)>
   2b300:	e1a05000 	mov	r5, r0
   2b304:	e5941004 	ldr	r1, [r4, #4]
   2b308:	eb000087 	bl	2b52c <CPageTable::CPageTable(unsigned int)>
   2b30c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b310:	e1a00004 	mov	r0, r4
   2b314:	eb000049 	bl	2b440 <CMemorySystem::EnableMMU()>
   2b318:	e28d000c 	add	r0, sp, #12
   2b31c:	ebffe390 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   2b320:	eaffffd3 	b	2b274 <CMemorySystem::CMemorySystem(bool)+0x4c>
   2b324:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2b328:	e58d0020 	str	r0, [sp, #32]
   2b32c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2b330:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2b334:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2b338:	eaffffe2 	b	2b2c8 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2b33c:	e59f1014 	ldr	r1, [pc, #20]	; 2b358 <CMemorySystem::CMemorySystem(bool)+0x130>
   2b340:	e3a0204e 	mov	r2, #78	; 0x4e
   2b344:	e281000c 	add	r0, r1, #12
   2b348:	ebffe35d 	bl	240c4 <assertion_failed>
   2b34c:	00047294 	.word	0x00047294
   2b350:	000501a8 	.word	0x000501a8
   2b354:	00010005 	.word	0x00010005
   2b358:	0004729c 	.word	0x0004729c

0002b35c <CMemorySystem::~CMemorySystem()>:
   2b35c:	e59f3044 	ldr	r3, [pc, #68]	; 2b3a8 <CMemorySystem::~CMemorySystem()+0x4c>
   2b360:	e92d4010 	push	{r4, lr}
   2b364:	e5932000 	ldr	r2, [r3]
   2b368:	e1a04000 	mov	r4, r0
   2b36c:	e1500002 	cmp	r0, r2
   2b370:	0a000005 	beq	2b38c <CMemorySystem::~CMemorySystem()+0x30>
   2b374:	e28400c8 	add	r0, r4, #200	; 0xc8
   2b378:	eb0004ff 	bl	2c77c <CPageAllocator::~CPageAllocator()>
   2b37c:	e284000c 	add	r0, r4, #12
   2b380:	ebfffd98 	bl	2a9e8 <CHeapAllocator::~CHeapAllocator()>
   2b384:	e1a00004 	mov	r0, r4
   2b388:	e8bd8010 	pop	{r4, pc}
   2b38c:	e3a01000 	mov	r1, #0
   2b390:	e5d02000 	ldrb	r2, [r0]
   2b394:	e5831000 	str	r1, [r3]
   2b398:	e1520001 	cmp	r2, r1
   2b39c:	0afffff4 	beq	2b374 <CMemorySystem::~CMemorySystem()+0x18>
   2b3a0:	eb000056 	bl	2b500 <CMemorySystem::Destructor() [clone .part.0]>
   2b3a4:	eafffff2 	b	2b374 <CMemorySystem::~CMemorySystem()+0x18>
   2b3a8:	000501a8 	.word	0x000501a8

0002b3ac <CMemorySystem::Destructor()>:
   2b3ac:	e59f3020 	ldr	r3, [pc, #32]	; 2b3d4 <CMemorySystem::Destructor()+0x28>
   2b3b0:	e5932000 	ldr	r2, [r3]
   2b3b4:	e1520000 	cmp	r2, r0
   2b3b8:	112fff1e 	bxne	lr
   2b3bc:	e3a01000 	mov	r1, #0
   2b3c0:	e5d22000 	ldrb	r2, [r2]
   2b3c4:	e5831000 	str	r1, [r3]
   2b3c8:	e1520001 	cmp	r2, r1
   2b3cc:	012fff1e 	bxeq	lr
   2b3d0:	ea00004a 	b	2b500 <CMemorySystem::Destructor() [clone .part.0]>
   2b3d4:	000501a8 	.word	0x000501a8

0002b3d8 <CMemorySystem::GetMemSize() const>:
   2b3d8:	e59f3028 	ldr	r3, [pc, #40]	; 2b408 <CMemorySystem::GetMemSize() const+0x30>
   2b3dc:	e5933000 	ldr	r3, [r3]
   2b3e0:	e3530000 	cmp	r3, #0
   2b3e4:	0a000002 	beq	2b3f4 <CMemorySystem::GetMemSize() const+0x1c>
   2b3e8:	e9930009 	ldmib	r3, {r0, r3}
   2b3ec:	e0800003 	add	r0, r0, r3
   2b3f0:	e12fff1e 	bx	lr
   2b3f4:	e59f1010 	ldr	r1, [pc, #16]	; 2b40c <CMemorySystem::GetMemSize() const+0x34>
   2b3f8:	e92d4010 	push	{r4, lr}
   2b3fc:	e3a020a0 	mov	r2, #160	; 0xa0
   2b400:	e2810028 	add	r0, r1, #40	; 0x28
   2b404:	ebffe32e 	bl	240c4 <assertion_failed>
   2b408:	000501a8 	.word	0x000501a8
   2b40c:	0004729c 	.word	0x0004729c

0002b410 <CMemorySystem::Get()>:
   2b410:	e59f3020 	ldr	r3, [pc, #32]	; 2b438 <CMemorySystem::Get()+0x28>
   2b414:	e5930000 	ldr	r0, [r3]
   2b418:	e3500000 	cmp	r0, #0
   2b41c:	0a000000 	beq	2b424 <CMemorySystem::Get()+0x14>
   2b420:	e12fff1e 	bx	lr
   2b424:	e59f1010 	ldr	r1, [pc, #16]	; 2b43c <CMemorySystem::Get()+0x2c>
   2b428:	e92d4010 	push	{r4, lr}
   2b42c:	e3a020a6 	mov	r2, #166	; 0xa6
   2b430:	e2810028 	add	r0, r1, #40	; 0x28
   2b434:	ebffe322 	bl	240c4 <assertion_failed>
   2b438:	000501a8 	.word	0x000501a8
   2b43c:	0004729c 	.word	0x0004729c

0002b440 <CMemorySystem::EnableMMU()>:
   2b440:	e5d03000 	ldrb	r3, [r0]
   2b444:	e92d4010 	push	{r4, lr}
   2b448:	e3530000 	cmp	r3, #0
   2b44c:	0a00001a 	beq	2b4bc <CMemorySystem::EnableMMU()+0x7c>
   2b450:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2b454:	e3833040 	orr	r3, r3, #64	; 0x40
   2b458:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2b45c:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   2b460:	e2144001 	ands	r4, r4, #1
   2b464:	1a000018 	bne	2b4cc <CMemorySystem::EnableMMU()+0x8c>
   2b468:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2b46c:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2b470:	e3500000 	cmp	r0, #0
   2b474:	0a000018 	beq	2b4dc <CMemorySystem::EnableMMU()+0x9c>
   2b478:	eb000056 	bl	2b5d8 <CPageTable::GetBaseAddress() const>
   2b47c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2b480:	e3a03001 	mov	r3, #1
   2b484:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2b488:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2b48c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b490:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2b494:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2b498:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2b49c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b4a0:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2b4a4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2b4a8:	e59f203c 	ldr	r2, [pc, #60]	; 2b4ec <CMemorySystem::EnableMMU()+0xac>
   2b4ac:	e3c33002 	bic	r3, r3, #2
   2b4b0:	e1832002 	orr	r2, r3, r2
   2b4b4:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   2b4b8:	e8bd8010 	pop	{r4, pc}
   2b4bc:	e59f102c 	ldr	r1, [pc, #44]	; 2b4f0 <CMemorySystem::EnableMMU()+0xb0>
   2b4c0:	e3a020ac 	mov	r2, #172	; 0xac
   2b4c4:	e2810038 	add	r0, r1, #56	; 0x38
   2b4c8:	ebffe2fd 	bl	240c4 <assertion_failed>
   2b4cc:	e59f101c 	ldr	r1, [pc, #28]	; 2b4f0 <CMemorySystem::EnableMMU()+0xb0>
   2b4d0:	e3a020ba 	mov	r2, #186	; 0xba
   2b4d4:	e2810048 	add	r0, r1, #72	; 0x48
   2b4d8:	ebffe2f9 	bl	240c4 <assertion_failed>
   2b4dc:	e59f100c 	ldr	r1, [pc, #12]	; 2b4f0 <CMemorySystem::EnableMMU()+0xb0>
   2b4e0:	e3a020c0 	mov	r2, #192	; 0xc0
   2b4e4:	e2810074 	add	r0, r1, #116	; 0x74
   2b4e8:	ebffe2f5 	bl	240c4 <assertion_failed>
   2b4ec:	00c01805 	.word	0x00c01805
   2b4f0:	0004729c 	.word	0x0004729c

0002b4f4 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2b4f4:	e1a00600 	lsl	r0, r0, #12
   2b4f8:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2b4fc:	e12fff1e 	bx	lr

0002b500 <CMemorySystem::Destructor() [clone .part.0]>:
   2b500:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2b504:	e3c33005 	bic	r3, r3, #5
   2b508:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2b50c:	e3a03000 	mov	r3, #0
   2b510:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2b514:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b518:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2b51c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b520:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2b524:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b528:	e12fff1e 	bx	lr

0002b52c <CPageTable::CPageTable(unsigned int)>:
   2b52c:	e3a02709 	mov	r2, #2359296	; 0x240000
   2b530:	e3a03000 	mov	r3, #0
   2b534:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b538:	e59fc074 	ldr	ip, [pc, #116]	; 2b5b4 <CPageTable::CPageTable(unsigned int)+0x88>
   2b53c:	e59f4074 	ldr	r4, [pc, #116]	; 2b5b8 <CPageTable::CPageTable(unsigned int)+0x8c>
   2b540:	e59f5074 	ldr	r5, [pc, #116]	; 2b5bc <CPageTable::CPageTable(unsigned int)+0x90>
   2b544:	e59f9074 	ldr	r9, [pc, #116]	; 2b5c0 <CPageTable::CPageTable(unsigned int)+0x94>
   2b548:	e59f8074 	ldr	r8, [pc, #116]	; 2b5c4 <CPageTable::CPageTable(unsigned int)+0x98>
   2b54c:	e59f7074 	ldr	r7, [pc, #116]	; 2b5c8 <CPageTable::CPageTable(unsigned int)+0x9c>
   2b550:	e59f6074 	ldr	r6, [pc, #116]	; 2b5cc <CPageTable::CPageTable(unsigned int)+0xa0>
   2b554:	e59fe074 	ldr	lr, [pc, #116]	; 2b5d0 <CPageTable::CPageTable(unsigned int)+0xa4>
   2b558:	e5802000 	str	r2, [r0]
   2b55c:	e1530004 	cmp	r3, r4
   2b560:	31a02005 	movcc	r2, r5
   2b564:	3a000007 	bcc	2b588 <CPageTable::CPageTable(unsigned int)+0x5c>
   2b568:	e3530501 	cmp	r3, #4194304	; 0x400000
   2b56c:	0a00000e 	beq	2b5ac <CPageTable::CPageTable(unsigned int)+0x80>
   2b570:	e1510003 	cmp	r1, r3
   2b574:	81a02008 	movhi	r2, r8
   2b578:	8a000002 	bhi	2b588 <CPageTable::CPageTable(unsigned int)+0x5c>
   2b57c:	e1530007 	cmp	r3, r7
   2b580:	91a02006 	movls	r2, r6
   2b584:	83a02000 	movhi	r2, #0
   2b588:	e1822003 	orr	r2, r2, r3
   2b58c:	e5ac2004 	str	r2, [ip, #4]!
   2b590:	e15c000e 	cmp	ip, lr
   2b594:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2b598:	1affffef 	bne	2b55c <CPageTable::CPageTable(unsigned int)+0x30>
   2b59c:	e3a03000 	mov	r3, #0
   2b5a0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2b5a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b5a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b5ac:	e1a02009 	mov	r2, r9
   2b5b0:	eafffff4 	b	2b588 <CPageTable::CPageTable(unsigned int)+0x5c>
   2b5b4:	0023fffc 	.word	0x0023fffc
   2b5b8:	0004062c 	.word	0x0004062c
   2b5bc:	0000040e 	.word	0x0000040e
   2b5c0:	00010412 	.word	0x00010412
   2b5c4:	0000041e 	.word	0x0000041e
   2b5c8:	20fffffe 	.word	0x20fffffe
   2b5cc:	00010416 	.word	0x00010416
   2b5d0:	00243ffc 	.word	0x00243ffc

0002b5d4 <CPageTable::~CPageTable()>:
   2b5d4:	e12fff1e 	bx	lr

0002b5d8 <CPageTable::GetBaseAddress() const>:
   2b5d8:	e5900000 	ldr	r0, [r0]
   2b5dc:	e3800001 	orr	r0, r0, #1
   2b5e0:	e12fff1e 	bx	lr

0002b5e4 <CurrentExecutionLevel>:
   2b5e4:	e10f0000 	mrs	r0, CPSR
   2b5e8:	e3100040 	tst	r0, #64	; 0x40
   2b5ec:	01a003a0 	lsreq	r0, r0, #7
   2b5f0:	02000001 	andeq	r0, r0, #1
   2b5f4:	13a00002 	movne	r0, #2
   2b5f8:	e12fff1e 	bx	lr

0002b5fc <EnterCritical>:
   2b5fc:	e2403001 	sub	r3, r0, #1
   2b600:	e3530001 	cmp	r3, #1
   2b604:	e92d4010 	push	{r4, lr}
   2b608:	8a000013 	bhi	2b65c <EnterCritical+0x60>
   2b60c:	e10f1000 	mrs	r1, CPSR
   2b610:	e3500002 	cmp	r0, #2
   2b614:	1a000014 	bne	2b66c <EnterCritical+0x70>
   2b618:	f10c00c0 	cpsid	if
   2b61c:	e59f3070 	ldr	r3, [pc, #112]	; 2b694 <EnterCritical+0x98>
   2b620:	e5932000 	ldr	r2, [r3]
   2b624:	e3520013 	cmp	r2, #19
   2b628:	8a000015 	bhi	2b684 <EnterCritical+0x88>
   2b62c:	e5932000 	ldr	r2, [r3]
   2b630:	e3500001 	cmp	r0, #1
   2b634:	e2820001 	add	r0, r2, #1
   2b638:	e0832102 	add	r2, r3, r2, lsl #2
   2b63c:	e5830000 	str	r0, [r3]
   2b640:	e5821004 	str	r1, [r2, #4]
   2b644:	0a000002 	beq	2b654 <EnterCritical+0x58>
   2b648:	e3a03000 	mov	r3, #0
   2b64c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b650:	e8bd8010 	pop	{r4, pc}
   2b654:	f1080040 	cpsie	f
   2b658:	eafffffa 	b	2b648 <EnterCritical+0x4c>
   2b65c:	e3a02064 	mov	r2, #100	; 0x64
   2b660:	e59f1030 	ldr	r1, [pc, #48]	; 2b698 <EnterCritical+0x9c>
   2b664:	e59f0030 	ldr	r0, [pc, #48]	; 2b69c <EnterCritical+0xa0>
   2b668:	ebffe295 	bl	240c4 <assertion_failed>
   2b66c:	e3110040 	tst	r1, #64	; 0x40
   2b670:	0affffe8 	beq	2b618 <EnterCritical+0x1c>
   2b674:	e3a0206a 	mov	r2, #106	; 0x6a
   2b678:	e59f1018 	ldr	r1, [pc, #24]	; 2b698 <EnterCritical+0x9c>
   2b67c:	e59f001c 	ldr	r0, [pc, #28]	; 2b6a0 <EnterCritical+0xa4>
   2b680:	ebffe28f 	bl	240c4 <assertion_failed>
   2b684:	e3a0206e 	mov	r2, #110	; 0x6e
   2b688:	e59f1008 	ldr	r1, [pc, #8]	; 2b698 <EnterCritical+0x9c>
   2b68c:	e59f0010 	ldr	r0, [pc, #16]	; 2b6a4 <EnterCritical+0xa8>
   2b690:	ebffe28b 	bl	240c4 <assertion_failed>
   2b694:	000501ac 	.word	0x000501ac
   2b698:	00047324 	.word	0x00047324
   2b69c:	00047334 	.word	0x00047334
   2b6a0:	0004736c 	.word	0x0004736c
   2b6a4:	0004739c 	.word	0x0004739c

0002b6a8 <LeaveCritical>:
   2b6a8:	e3a03000 	mov	r3, #0
   2b6ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b6b0:	f10c0040 	cpsid	f
   2b6b4:	e59f3038 	ldr	r3, [pc, #56]	; 2b6f4 <LeaveCritical+0x4c>
   2b6b8:	e5932000 	ldr	r2, [r3]
   2b6bc:	e3520000 	cmp	r2, #0
   2b6c0:	0a000006 	beq	2b6e0 <LeaveCritical+0x38>
   2b6c4:	e5932000 	ldr	r2, [r3]
   2b6c8:	e2422001 	sub	r2, r2, #1
   2b6cc:	e5832000 	str	r2, [r3]
   2b6d0:	e0833102 	add	r3, r3, r2, lsl #2
   2b6d4:	e5933004 	ldr	r3, [r3, #4]
   2b6d8:	e121f003 	msr	CPSR_c, r3
   2b6dc:	e12fff1e 	bx	lr
   2b6e0:	e92d4010 	push	{r4, lr}
   2b6e4:	e3a0207f 	mov	r2, #127	; 0x7f
   2b6e8:	e59f1008 	ldr	r1, [pc, #8]	; 2b6f8 <LeaveCritical+0x50>
   2b6ec:	e59f0008 	ldr	r0, [pc, #8]	; 2b6fc <LeaveCritical+0x54>
   2b6f0:	ebffe273 	bl	240c4 <assertion_failed>
   2b6f4:	000501ac 	.word	0x000501ac
   2b6f8:	00047324 	.word	0x00047324
   2b6fc:	000473c4 	.word	0x000473c4

0002b700 <CleanAndInvalidateDataCacheRange>:
   2b700:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2b704:	e2813020 	add	r3, r1, #32
   2b708:	e353001f 	cmp	r3, #31
   2b70c:	82800020 	addhi	r0, r0, #32
   2b710:	83c1101f 	bichi	r1, r1, #31
   2b714:	80801001 	addhi	r1, r0, r1
   2b718:	8a000001 	bhi	2b724 <CleanAndInvalidateDataCacheRange+0x24>
   2b71c:	ea000003 	b	2b730 <CleanAndInvalidateDataCacheRange+0x30>
   2b720:	e2800020 	add	r0, r0, #32
   2b724:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2b728:	e1510000 	cmp	r1, r0
   2b72c:	1afffffb 	bne	2b720 <CleanAndInvalidateDataCacheRange+0x20>
   2b730:	e3a03000 	mov	r3, #0
   2b734:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b738:	e12fff1e 	bx	lr

0002b73c <SyncDataAndInstructionCache>:
   2b73c:	e3a03000 	mov	r3, #0
   2b740:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2b744:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b748:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2b74c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2b750:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b754:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2b758:	e12fff1e 	bx	lr

0002b75c <CInterruptSystem::CInterruptSystem()>:
   2b75c:	e1a0c000 	mov	ip, r0
   2b760:	e2802f47 	add	r2, r0, #284	; 0x11c
   2b764:	e1a00002 	mov	r0, r2
   2b768:	e3a01000 	mov	r1, #0
   2b76c:	e24c3004 	sub	r3, ip, #4
   2b770:	e5a31004 	str	r1, [r3, #4]!
   2b774:	e1530000 	cmp	r3, r0
   2b778:	e5a21004 	str	r1, [r2, #4]!
   2b77c:	1afffffb 	bne	2b770 <CInterruptSystem::CInterruptSystem()+0x14>
   2b780:	e59f3008 	ldr	r3, [pc, #8]	; 2b790 <CInterruptSystem::CInterruptSystem()+0x34>
   2b784:	e1a0000c 	mov	r0, ip
   2b788:	e583c000 	str	ip, [r3]
   2b78c:	e12fff1e 	bx	lr
   2b790:	00050200 	.word	0x00050200

0002b794 <CInterruptSystem::~CInterruptSystem()>:
   2b794:	f10c0080 	cpsid	i
   2b798:	e3a03000 	mov	r3, #0
   2b79c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b7a0:	e3e01000 	mvn	r1, #0
   2b7a4:	e59f201c 	ldr	r2, [pc, #28]	; 2b7c8 <CInterruptSystem::~CInterruptSystem()+0x34>
   2b7a8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2b7ac:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2b7b0:	e5821220 	str	r1, [r2, #544]	; 0x220
   2b7b4:	e5821224 	str	r1, [r2, #548]	; 0x224
   2b7b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b7bc:	e59f2008 	ldr	r2, [pc, #8]	; 2b7cc <CInterruptSystem::~CInterruptSystem()+0x38>
   2b7c0:	e5823000 	str	r3, [r2]
   2b7c4:	e12fff1e 	bx	lr
   2b7c8:	2000b000 	.word	0x2000b000
   2b7cc:	00050200 	.word	0x00050200

0002b7d0 <CInterruptSystem::Initialize()>:
   2b7d0:	e92d4010 	push	{r4, lr}
   2b7d4:	e3a04000 	mov	r4, #0
   2b7d8:	e59f2050 	ldr	r2, [pc, #80]	; 2b830 <CInterruptSystem::Initialize()+0x60>
   2b7dc:	e59f3050 	ldr	r3, [pc, #80]	; 2b834 <CInterruptSystem::Initialize()+0x64>
   2b7e0:	e1a02142 	asr	r2, r2, #2
   2b7e4:	e1a03143 	asr	r3, r3, #2
   2b7e8:	e2422002 	sub	r2, r2, #2
   2b7ec:	e2433002 	sub	r3, r3, #2
   2b7f0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b7f4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b7f8:	e5842018 	str	r2, [r4, #24]
   2b7fc:	e584301c 	str	r3, [r4, #28]
   2b800:	ebffffcd 	bl	2b73c <SyncDataAndInstructionCache>
   2b804:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b808:	e3e02000 	mvn	r2, #0
   2b80c:	e59f3024 	ldr	r3, [pc, #36]	; 2b838 <CInterruptSystem::Initialize()+0x68>
   2b810:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2b814:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2b818:	e5832220 	str	r2, [r3, #544]	; 0x220
   2b81c:	e5832224 	str	r2, [r3, #548]	; 0x224
   2b820:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2b824:	f1080080 	cpsie	i
   2b828:	e3a00001 	mov	r0, #1
   2b82c:	e8bd8010 	pop	{r4, pc}
   2b830:	0002b194 	.word	0x0002b194
   2b834:	0002b1a8 	.word	0x0002b1a8
   2b838:	2000b000 	.word	0x2000b000

0002b83c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2b83c:	e3510047 	cmp	r1, #71	; 0x47
   2b840:	e92d4070 	push	{r4, r5, r6, lr}
   2b844:	8a00001e 	bhi	2b8c4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2b848:	e3520000 	cmp	r2, #0
   2b84c:	0a000020 	beq	2b8d4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2b850:	e59f009c 	ldr	r0, [pc, #156]	; 2b8f4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2b854:	e5d0e001 	ldrb	lr, [r0, #1]
   2b858:	e5d0c000 	ldrb	ip, [r0]
   2b85c:	e5d04002 	ldrb	r4, [r0, #2]
   2b860:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2b864:	e5d0e003 	ldrb	lr, [r0, #3]
   2b868:	e18cc804 	orr	ip, ip, r4, lsl #16
   2b86c:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2b870:	1a00001b 	bne	2b8e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2b874:	e1a06422 	lsr	r6, r2, #8
   2b878:	e1a05822 	lsr	r5, r2, #16
   2b87c:	e1a04c22 	lsr	r4, r2, #24
   2b880:	e1a0e423 	lsr	lr, r3, #8
   2b884:	e5c02000 	strb	r2, [r0]
   2b888:	e5c03004 	strb	r3, [r0, #4]
   2b88c:	e1a02823 	lsr	r2, r3, #16
   2b890:	e1a03c23 	lsr	r3, r3, #24
   2b894:	e5c06001 	strb	r6, [r0, #1]
   2b898:	e5c05002 	strb	r5, [r0, #2]
   2b89c:	e5c04003 	strb	r4, [r0, #3]
   2b8a0:	e5c0e005 	strb	lr, [r0, #5]
   2b8a4:	e5c02006 	strb	r2, [r0, #6]
   2b8a8:	e5c03007 	strb	r3, [r0, #7]
   2b8ac:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2b8b0:	e59f3040 	ldr	r3, [pc, #64]	; 2b8f8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2b8b4:	e3811080 	orr	r1, r1, #128	; 0x80
   2b8b8:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2b8bc:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2b8c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b8c4:	e3a0208f 	mov	r2, #143	; 0x8f
   2b8c8:	e59f102c 	ldr	r1, [pc, #44]	; 2b8fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2b8cc:	e59f002c 	ldr	r0, [pc, #44]	; 2b900 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2b8d0:	ebffe1fb 	bl	240c4 <assertion_failed>
   2b8d4:	e3a02090 	mov	r2, #144	; 0x90
   2b8d8:	e59f101c 	ldr	r1, [pc, #28]	; 2b8fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2b8dc:	e59f0020 	ldr	r0, [pc, #32]	; 2b904 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2b8e0:	ebffe1f7 	bl	240c4 <assertion_failed>
   2b8e4:	e3a02091 	mov	r2, #145	; 0x91
   2b8e8:	e59f100c 	ldr	r1, [pc, #12]	; 2b8fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2b8ec:	e59f0014 	ldr	r0, [pc, #20]	; 2b908 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2b8f0:	ebffe1f3 	bl	240c4 <assertion_failed>
   2b8f4:	00049d70 	.word	0x00049d70
   2b8f8:	2000b000 	.word	0x2000b000
   2b8fc:	000473dc 	.word	0x000473dc
   2b900:	000473ec 	.word	0x000473ec
   2b904:	00047420 	.word	0x00047420
   2b908:	00047400 	.word	0x00047400

0002b90c <CInterruptSystem::DisconnectFIQ()>:
   2b90c:	e59f3068 	ldr	r3, [pc, #104]	; 2b97c <CInterruptSystem::DisconnectFIQ()+0x70>
   2b910:	e5d31001 	ldrb	r1, [r3, #1]
   2b914:	e5d32000 	ldrb	r2, [r3]
   2b918:	e5d30002 	ldrb	r0, [r3, #2]
   2b91c:	e1822401 	orr	r2, r2, r1, lsl #8
   2b920:	e5d31003 	ldrb	r1, [r3, #3]
   2b924:	e1822800 	orr	r2, r2, r0, lsl #16
   2b928:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2b92c:	0a00000d 	beq	2b968 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2b930:	e3a02000 	mov	r2, #0
   2b934:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2b938:	e59f1040 	ldr	r1, [pc, #64]	; 2b980 <CInterruptSystem::DisconnectFIQ()+0x74>
   2b93c:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2b940:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2b944:	e5c32000 	strb	r2, [r3]
   2b948:	e5c32001 	strb	r2, [r3, #1]
   2b94c:	e5c32002 	strb	r2, [r3, #2]
   2b950:	e5c32003 	strb	r2, [r3, #3]
   2b954:	e5c32004 	strb	r2, [r3, #4]
   2b958:	e5c32005 	strb	r2, [r3, #5]
   2b95c:	e5c32006 	strb	r2, [r3, #6]
   2b960:	e5c32007 	strb	r2, [r3, #7]
   2b964:	e12fff1e 	bx	lr
   2b968:	e92d4010 	push	{r4, lr}
   2b96c:	e3a0209b 	mov	r2, #155	; 0x9b
   2b970:	e59f100c 	ldr	r1, [pc, #12]	; 2b984 <CInterruptSystem::DisconnectFIQ()+0x78>
   2b974:	e59f000c 	ldr	r0, [pc, #12]	; 2b988 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2b978:	ebffe1d1 	bl	240c4 <assertion_failed>
   2b97c:	00049d70 	.word	0x00049d70
   2b980:	2000b000 	.word	0x2000b000
   2b984:	000473dc 	.word	0x000473dc
   2b988:	00047418 	.word	0x00047418

0002b98c <CInterruptSystem::EnableIRQ(unsigned int)>:
   2b98c:	e3a03000 	mov	r3, #0
   2b990:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b994:	e3500047 	cmp	r0, #71	; 0x47
   2b998:	8a00000e 	bhi	2b9d8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2b99c:	e350001f 	cmp	r0, #31
   2b9a0:	9a00000a 	bls	2b9d0 <CInterruptSystem::EnableIRQ(unsigned int)+0x44>
   2b9a4:	e59f3040 	ldr	r3, [pc, #64]	; 2b9ec <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2b9a8:	e350003f 	cmp	r0, #63	; 0x3f
   2b9ac:	e59f203c 	ldr	r2, [pc, #60]	; 2b9f0 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2b9b0:	91a02003 	movls	r2, r3
   2b9b4:	e3a03001 	mov	r3, #1
   2b9b8:	e200001f 	and	r0, r0, #31
   2b9bc:	e1a00013 	lsl	r0, r3, r0
   2b9c0:	e5820000 	str	r0, [r2]
   2b9c4:	e3a03000 	mov	r3, #0
   2b9c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b9cc:	e12fff1e 	bx	lr
   2b9d0:	e59f201c 	ldr	r2, [pc, #28]	; 2b9f4 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2b9d4:	eafffff6 	b	2b9b4 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
   2b9d8:	e92d4010 	push	{r4, lr}
   2b9dc:	e3a020a7 	mov	r2, #167	; 0xa7
   2b9e0:	e59f1010 	ldr	r1, [pc, #16]	; 2b9f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2b9e4:	e59f0010 	ldr	r0, [pc, #16]	; 2b9fc <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2b9e8:	ebffe1b5 	bl	240c4 <assertion_failed>
   2b9ec:	2000b214 	.word	0x2000b214
   2b9f0:	2000b218 	.word	0x2000b218
   2b9f4:	2000b210 	.word	0x2000b210
   2b9f8:	000473dc 	.word	0x000473dc
   2b9fc:	00047430 	.word	0x00047430

0002ba00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2ba00:	e3510047 	cmp	r1, #71	; 0x47
   2ba04:	e92d4010 	push	{r4, lr}
   2ba08:	8a000008 	bhi	2ba30 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2ba0c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2ba10:	e080e101 	add	lr, r0, r1, lsl #2
   2ba14:	e35c0000 	cmp	ip, #0
   2ba18:	1a000008 	bne	2ba40 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2ba1c:	e7802101 	str	r2, [r0, r1, lsl #2]
   2ba20:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2ba24:	e1a00001 	mov	r0, r1
   2ba28:	e8bd4010 	pop	{r4, lr}
   2ba2c:	eaffffd6 	b	2b98c <CInterruptSystem::EnableIRQ(unsigned int)>
   2ba30:	e3a02076 	mov	r2, #118	; 0x76
   2ba34:	e59f1014 	ldr	r1, [pc, #20]	; 2ba50 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2ba38:	e59f0014 	ldr	r0, [pc, #20]	; 2ba54 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2ba3c:	ebffe1a0 	bl	240c4 <assertion_failed>
   2ba40:	e3a02077 	mov	r2, #119	; 0x77
   2ba44:	e59f1004 	ldr	r1, [pc, #4]	; 2ba50 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2ba48:	e59f0008 	ldr	r0, [pc, #8]	; 2ba58 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2ba4c:	ebffe19c 	bl	240c4 <assertion_failed>
   2ba50:	000473dc 	.word	0x000473dc
   2ba54:	00047430 	.word	0x00047430
   2ba58:	00047444 	.word	0x00047444

0002ba5c <CInterruptSystem::DisableIRQ(unsigned int)>:
   2ba5c:	e3a03000 	mov	r3, #0
   2ba60:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ba64:	e3500047 	cmp	r0, #71	; 0x47
   2ba68:	8a00000e 	bhi	2baa8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2ba6c:	e350001f 	cmp	r0, #31
   2ba70:	9a00000a 	bls	2baa0 <CInterruptSystem::DisableIRQ(unsigned int)+0x44>
   2ba74:	e59f3040 	ldr	r3, [pc, #64]	; 2babc <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2ba78:	e350003f 	cmp	r0, #63	; 0x3f
   2ba7c:	e59f203c 	ldr	r2, [pc, #60]	; 2bac0 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2ba80:	91a02003 	movls	r2, r3
   2ba84:	e3a03001 	mov	r3, #1
   2ba88:	e200001f 	and	r0, r0, #31
   2ba8c:	e1a00013 	lsl	r0, r3, r0
   2ba90:	e5820000 	str	r0, [r2]
   2ba94:	e3a03000 	mov	r3, #0
   2ba98:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2ba9c:	e12fff1e 	bx	lr
   2baa0:	e59f201c 	ldr	r2, [pc, #28]	; 2bac4 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2baa4:	eafffff6 	b	2ba84 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
   2baa8:	e92d4010 	push	{r4, lr}
   2baac:	e3a020bf 	mov	r2, #191	; 0xbf
   2bab0:	e59f1010 	ldr	r1, [pc, #16]	; 2bac8 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2bab4:	e59f0010 	ldr	r0, [pc, #16]	; 2bacc <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2bab8:	ebffe181 	bl	240c4 <assertion_failed>
   2babc:	2000b220 	.word	0x2000b220
   2bac0:	2000b224 	.word	0x2000b224
   2bac4:	2000b21c 	.word	0x2000b21c
   2bac8:	000473dc 	.word	0x000473dc
   2bacc:	00047430 	.word	0x00047430

0002bad0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2bad0:	e3510047 	cmp	r1, #71	; 0x47
   2bad4:	e92d4070 	push	{r4, r5, r6, lr}
   2bad8:	8a00000b 	bhi	2bb0c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2badc:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2bae0:	e1a04001 	mov	r4, r1
   2bae4:	e3530000 	cmp	r3, #0
   2bae8:	e1a05000 	mov	r5, r0
   2baec:	e0806101 	add	r6, r0, r1, lsl #2
   2baf0:	0a000009 	beq	2bb1c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2baf4:	e1a00001 	mov	r0, r1
   2baf8:	ebffffd7 	bl	2ba5c <CInterruptSystem::DisableIRQ(unsigned int)>
   2bafc:	e3a03000 	mov	r3, #0
   2bb00:	e7853104 	str	r3, [r5, r4, lsl #2]
   2bb04:	e5863120 	str	r3, [r6, #288]	; 0x120
   2bb08:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bb0c:	e3a02081 	mov	r2, #129	; 0x81
   2bb10:	e59f1014 	ldr	r1, [pc, #20]	; 2bb2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2bb14:	e59f0014 	ldr	r0, [pc, #20]	; 2bb30 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2bb18:	ebffe169 	bl	240c4 <assertion_failed>
   2bb1c:	e3a02082 	mov	r2, #130	; 0x82
   2bb20:	e59f1004 	ldr	r1, [pc, #4]	; 2bb2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2bb24:	e59f0008 	ldr	r0, [pc, #8]	; 2bb34 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2bb28:	ebffe165 	bl	240c4 <assertion_failed>
   2bb2c:	000473dc 	.word	0x000473dc
   2bb30:	00047430 	.word	0x00047430
   2bb34:	00047460 	.word	0x00047460

0002bb38 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2bb38:	e3a03000 	mov	r3, #0
   2bb3c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb40:	e3500047 	cmp	r0, #71	; 0x47
   2bb44:	8a000004 	bhi	2bb5c <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2bb48:	e59f2020 	ldr	r2, [pc, #32]	; 2bb70 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2bb4c:	e3800080 	orr	r0, r0, #128	; 0x80
   2bb50:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2bb54:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bb58:	e12fff1e 	bx	lr
   2bb5c:	e92d4010 	push	{r4, lr}
   2bb60:	e3a020d7 	mov	r2, #215	; 0xd7
   2bb64:	e59f1008 	ldr	r1, [pc, #8]	; 2bb74 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2bb68:	e59f0008 	ldr	r0, [pc, #8]	; 2bb78 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2bb6c:	ebffe154 	bl	240c4 <assertion_failed>
   2bb70:	2000b000 	.word	0x2000b000
   2bb74:	000473dc 	.word	0x000473dc
   2bb78:	000473ec 	.word	0x000473ec

0002bb7c <CInterruptSystem::DisableFIQ()>:
   2bb7c:	e3a03000 	mov	r3, #0
   2bb80:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bb84:	e59f2008 	ldr	r2, [pc, #8]	; 2bb94 <CInterruptSystem::DisableFIQ()+0x18>
   2bb88:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2bb8c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bb90:	e12fff1e 	bx	lr
   2bb94:	2000b000 	.word	0x2000b000

0002bb98 <CInterruptSystem::Get()>:
   2bb98:	e59f3020 	ldr	r3, [pc, #32]	; 2bbc0 <CInterruptSystem::Get()+0x28>
   2bb9c:	e5930000 	ldr	r0, [r3]
   2bba0:	e3500000 	cmp	r0, #0
   2bba4:	0a000000 	beq	2bbac <CInterruptSystem::Get()+0x14>
   2bba8:	e12fff1e 	bx	lr
   2bbac:	e92d4010 	push	{r4, lr}
   2bbb0:	e3a020e9 	mov	r2, #233	; 0xe9
   2bbb4:	e59f1008 	ldr	r1, [pc, #8]	; 2bbc4 <CInterruptSystem::Get()+0x2c>
   2bbb8:	e59f0008 	ldr	r0, [pc, #8]	; 2bbc8 <CInterruptSystem::Get()+0x30>
   2bbbc:	ebffe140 	bl	240c4 <assertion_failed>
   2bbc0:	00050200 	.word	0x00050200
   2bbc4:	000473dc 	.word	0x000473dc
   2bbc8:	00045148 	.word	0x00045148

0002bbcc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2bbcc:	e3510047 	cmp	r1, #71	; 0x47
   2bbd0:	e92d4010 	push	{r4, lr}
   2bbd4:	8a00000b 	bhi	2bc08 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2bbd8:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2bbdc:	e0800101 	add	r0, r0, r1, lsl #2
   2bbe0:	e3540000 	cmp	r4, #0
   2bbe4:	0a000003 	beq	2bbf8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2bbe8:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   2bbec:	e12fff34 	blx	r4
   2bbf0:	e3a00001 	mov	r0, #1
   2bbf4:	e8bd8010 	pop	{r4, pc}
   2bbf8:	e1a00001 	mov	r0, r1
   2bbfc:	ebffff96 	bl	2ba5c <CInterruptSystem::DisableIRQ(unsigned int)>
   2bc00:	e1a00004 	mov	r0, r4
   2bc04:	e8bd8010 	pop	{r4, pc}
   2bc08:	e3a020ef 	mov	r2, #239	; 0xef
   2bc0c:	e59f1004 	ldr	r1, [pc, #4]	; 2bc18 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2bc10:	e59f0004 	ldr	r0, [pc, #4]	; 2bc1c <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2bc14:	ebffe12a 	bl	240c4 <assertion_failed>
   2bc18:	000473dc 	.word	0x000473dc
   2bc1c:	00047430 	.word	0x00047430

0002bc20 <CInterruptSystem::InterruptHandler()>:
   2bc20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bc24:	e59f70a4 	ldr	r7, [pc, #164]	; 2bcd0 <CInterruptSystem::InterruptHandler()+0xb0>
   2bc28:	e24dd010 	sub	sp, sp, #16
   2bc2c:	e5973000 	ldr	r3, [r7]
   2bc30:	e3530000 	cmp	r3, #0
   2bc34:	0a000021 	beq	2bcc0 <CInterruptSystem::InterruptHandler()+0xa0>
   2bc38:	e3a06000 	mov	r6, #0
   2bc3c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2bc40:	e59f308c 	ldr	r3, [pc, #140]	; 2bcd4 <CInterruptSystem::InterruptHandler()+0xb4>
   2bc44:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2bc48:	e58d2004 	str	r2, [sp, #4]
   2bc4c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2bc50:	e58d2008 	str	r2, [sp, #8]
   2bc54:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2bc58:	e6ef3073 	uxtb	r3, r3
   2bc5c:	e58d300c 	str	r3, [sp, #12]
   2bc60:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2bc64:	e28d8004 	add	r8, sp, #4
   2bc68:	e4984004 	ldr	r4, [r8], #4
   2bc6c:	e3540000 	cmp	r4, #0
   2bc70:	0a00000d 	beq	2bcac <CInterruptSystem::InterruptHandler()+0x8c>
   2bc74:	e1a05006 	mov	r5, r6
   2bc78:	ea000002 	b	2bc88 <CInterruptSystem::InterruptHandler()+0x68>
   2bc7c:	e1b040a4 	lsrs	r4, r4, #1
   2bc80:	e2855001 	add	r5, r5, #1
   2bc84:	0a000008 	beq	2bcac <CInterruptSystem::InterruptHandler()+0x8c>
   2bc88:	e3140001 	tst	r4, #1
   2bc8c:	0afffffa 	beq	2bc7c <CInterruptSystem::InterruptHandler()+0x5c>
   2bc90:	e1a01005 	mov	r1, r5
   2bc94:	e5970000 	ldr	r0, [r7]
   2bc98:	ebffffcb 	bl	2bbcc <CInterruptSystem::CallIRQHandler(unsigned int)>
   2bc9c:	e3500000 	cmp	r0, #0
   2bca0:	0afffff5 	beq	2bc7c <CInterruptSystem::InterruptHandler()+0x5c>
   2bca4:	e28dd010 	add	sp, sp, #16
   2bca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bcac:	e2866020 	add	r6, r6, #32
   2bcb0:	e3560060 	cmp	r6, #96	; 0x60
   2bcb4:	1affffeb 	bne	2bc68 <CInterruptSystem::InterruptHandler()+0x48>
   2bcb8:	e28dd010 	add	sp, sp, #16
   2bcbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bcc0:	e59f2010 	ldr	r2, [pc, #16]	; 2bcd8 <CInterruptSystem::InterruptHandler()+0xb8>
   2bcc4:	e59f1010 	ldr	r1, [pc, #16]	; 2bcdc <CInterruptSystem::InterruptHandler()+0xbc>
   2bcc8:	e59f0010 	ldr	r0, [pc, #16]	; 2bce0 <CInterruptSystem::InterruptHandler()+0xc0>
   2bccc:	ebffe0fc 	bl	240c4 <assertion_failed>
   2bcd0:	00050200 	.word	0x00050200
   2bcd4:	2000b000 	.word	0x2000b000
   2bcd8:	00000102 	.word	0x00000102
   2bcdc:	000473dc 	.word	0x000473dc
   2bce0:	00045148 	.word	0x00045148

0002bce4 <InterruptHandler>:
   2bce4:	e92d4010 	push	{r4, lr}
   2bce8:	e3a04000 	mov	r4, #0
   2bcec:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2bcf0:	ebffffca 	bl	2bc20 <CInterruptSystem::InterruptHandler()>
   2bcf4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bcf8:	e8bd8010 	pop	{r4, pc}

0002bcfc <__cxa_pure_virtual>:
   2bcfc:	e92d4010 	push	{r4, lr}
   2bd00:	e3a02018 	mov	r2, #24
   2bd04:	e59f1004 	ldr	r1, [pc, #4]	; 2bd10 <__cxa_pure_virtual+0x14>
   2bd08:	e59f0004 	ldr	r0, [pc, #4]	; 2bd14 <__cxa_pure_virtual+0x18>
   2bd0c:	ebffe0ec 	bl	240c4 <assertion_failed>
   2bd10:	0004747c 	.word	0x0004747c
   2bd14:	000414b4 	.word	0x000414b4

0002bd18 <malloc>:
   2bd18:	e59f300c 	ldr	r3, [pc, #12]	; 2bd2c <malloc+0x14>
   2bd1c:	e1a01000 	mov	r1, r0
   2bd20:	e5930000 	ldr	r0, [r3]
   2bd24:	e280000c 	add	r0, r0, #12
   2bd28:	eafffb35 	b	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2bd2c:	000501a8 	.word	0x000501a8

0002bd30 <free>:
   2bd30:	e59f300c 	ldr	r3, [pc, #12]	; 2bd44 <free+0x14>
   2bd34:	e1a01000 	mov	r1, r0
   2bd38:	e5930000 	ldr	r0, [r3]
   2bd3c:	e280000c 	add	r0, r0, #12
   2bd40:	eafffbad 	b	2abfc <CHeapAllocator::Free(void*)>
   2bd44:	000501a8 	.word	0x000501a8

0002bd48 <calloc>:
   2bd48:	e92d4070 	push	{r4, r5, r6, lr}
   2bd4c:	e0040190 	mul	r4, r0, r1
   2bd50:	e3540000 	cmp	r4, #0
   2bd54:	03a04001 	moveq	r4, #1
   2bd58:	e1540000 	cmp	r4, r0
   2bd5c:	3a00000b 	bcc	2bd90 <calloc+0x48>
   2bd60:	e59f3038 	ldr	r3, [pc, #56]	; 2bda0 <calloc+0x58>
   2bd64:	e1a01004 	mov	r1, r4
   2bd68:	e5930000 	ldr	r0, [r3]
   2bd6c:	e280000c 	add	r0, r0, #12
   2bd70:	ebfffb23 	bl	2aa04 <CHeapAllocator::Allocate(unsigned int)>
   2bd74:	e2505000 	subs	r5, r0, #0
   2bd78:	0a000002 	beq	2bd88 <calloc+0x40>
   2bd7c:	e1a02004 	mov	r2, r4
   2bd80:	e3a01000 	mov	r1, #0
   2bd84:	ebfff69a 	bl	297f4 <memset>
   2bd88:	e1a00005 	mov	r0, r5
   2bd8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bd90:	e59f100c 	ldr	r1, [pc, #12]	; 2bda4 <calloc+0x5c>
   2bd94:	e3a0202b 	mov	r2, #43	; 0x2b
   2bd98:	e281000c 	add	r0, r1, #12
   2bd9c:	ebffe0c8 	bl	240c4 <assertion_failed>
   2bda0:	000501a8 	.word	0x000501a8
   2bda4:	0004748c 	.word	0x0004748c

0002bda8 <realloc>:
   2bda8:	e59f3010 	ldr	r3, [pc, #16]	; 2bdc0 <realloc+0x18>
   2bdac:	e1a02001 	mov	r2, r1
   2bdb0:	e5933000 	ldr	r3, [r3]
   2bdb4:	e1a01000 	mov	r1, r0
   2bdb8:	e283000c 	add	r0, r3, #12
   2bdbc:	eafffbd4 	b	2ad14 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2bdc0:	000501a8 	.word	0x000501a8

0002bdc4 <palloc>:
   2bdc4:	e59f3008 	ldr	r3, [pc, #8]	; 2bdd4 <palloc+0x10>
   2bdc8:	e5930000 	ldr	r0, [r3]
   2bdcc:	e28000c8 	add	r0, r0, #200	; 0xc8
   2bdd0:	ea000287 	b	2c7f4 <CPageAllocator::Allocate()>
   2bdd4:	000501a8 	.word	0x000501a8

0002bdd8 <pfree>:
   2bdd8:	e59f300c 	ldr	r3, [pc, #12]	; 2bdec <pfree+0x14>
   2bddc:	e1a01000 	mov	r1, r0
   2bde0:	e5930000 	ldr	r0, [r3]
   2bde4:	e28000c8 	add	r0, r0, #200	; 0xc8
   2bde8:	ea0002b6 	b	2c8c8 <CPageAllocator::Free(void*)>
   2bdec:	000501a8 	.word	0x000501a8

0002bdf0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2bdf0:	e5801000 	str	r1, [r0]
   2bdf4:	e5c02004 	strb	r2, [r0, #4]
   2bdf8:	e12fff1e 	bx	lr

0002bdfc <CBcmMailBox::~CBcmMailBox()>:
   2bdfc:	e12fff1e 	bx	lr

0002be00 <CBcmMailBox::WriteRead(unsigned int)>:
   2be00:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2be04:	e3a03000 	mov	r3, #0
   2be08:	e24dd00c 	sub	sp, sp, #12
   2be0c:	e1a05000 	mov	r5, r0
   2be10:	e1a06001 	mov	r6, r1
   2be14:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be18:	e5d03004 	ldrb	r3, [r0, #4]
   2be1c:	e3530000 	cmp	r3, #0
   2be20:	1a000003 	bne	2be34 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2be24:	e59f30e0 	ldr	r3, [pc, #224]	; 2bf0c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2be28:	e5930000 	ldr	r0, [r3]
   2be2c:	e3500000 	cmp	r0, #0
   2be30:	1a00002f 	bne	2bef4 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   2be34:	e59f40d4 	ldr	r4, [pc, #212]	; 2bf10 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2be38:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2be3c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2be40:	1a000006 	bne	2be60 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2be44:	e3a07014 	mov	r7, #20
   2be48:	e1a00007 	mov	r0, r7
   2be4c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2be50:	ebfff621 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   2be54:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2be58:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2be5c:	0afffff9 	beq	2be48 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   2be60:	e59f10a8 	ldr	r1, [pc, #168]	; 2bf10 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2be64:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   2be68:	e3530000 	cmp	r3, #0
   2be6c:	bafffffc 	blt	2be64 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2be70:	e316000f 	tst	r6, #15
   2be74:	1a000020 	bne	2befc <CBcmMailBox::WriteRead(unsigned int)+0xfc>
   2be78:	e5953000 	ldr	r3, [r5]
   2be7c:	e59f208c 	ldr	r2, [pc, #140]	; 2bf10 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2be80:	e1866003 	orr	r6, r6, r3
   2be84:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   2be88:	e5950000 	ldr	r0, [r5]
   2be8c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2be90:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2be94:	1afffffc 	bne	2be8c <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2be98:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2be9c:	e203100f 	and	r1, r3, #15
   2bea0:	e1510000 	cmp	r1, r0
   2bea4:	1afffff8 	bne	2be8c <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2bea8:	e5d52004 	ldrb	r2, [r5, #4]
   2beac:	e3c3000f 	bic	r0, r3, #15
   2beb0:	e3520000 	cmp	r2, #0
   2beb4:	1a000003 	bne	2bec8 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   2beb8:	e59f304c 	ldr	r3, [pc, #76]	; 2bf0c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2bebc:	e5933000 	ldr	r3, [r3]
   2bec0:	e3530000 	cmp	r3, #0
   2bec4:	1a000003 	bne	2bed8 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   2bec8:	e3a03000 	mov	r3, #0
   2becc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bed0:	e28dd00c 	add	sp, sp, #12
   2bed4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2bed8:	e58d0004 	str	r0, [sp, #4]
   2bedc:	ebfffdf1 	bl	2b6a8 <LeaveCritical>
   2bee0:	e59d0004 	ldr	r0, [sp, #4]
   2bee4:	e3a03000 	mov	r3, #0
   2bee8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2beec:	e28dd00c 	add	sp, sp, #12
   2bef0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2bef4:	ebfffdc0 	bl	2b5fc <EnterCritical>
   2bef8:	eaffffcd 	b	2be34 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2befc:	e3a02062 	mov	r2, #98	; 0x62
   2bf00:	e59f100c 	ldr	r1, [pc, #12]	; 2bf14 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2bf04:	e59f000c 	ldr	r0, [pc, #12]	; 2bf18 <CBcmMailBox::WriteRead(unsigned int)+0x118>
   2bf08:	ebffe06d 	bl	240c4 <assertion_failed>
   2bf0c:	00050204 	.word	0x00050204
   2bf10:	2000b000 	.word	0x2000b000
   2bf14:	000474ac 	.word	0x000474ac
   2bf18:	000474bc 	.word	0x000474bc

0002bf1c <CBcmMailBox::Flush()>:
   2bf1c:	e92d4070 	push	{r4, r5, r6, lr}
   2bf20:	e59f4028 	ldr	r4, [pc, #40]	; 2bf50 <CBcmMailBox::Flush()+0x34>
   2bf24:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2bf28:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2bf2c:	18bd8070 	popne	{r4, r5, r6, pc}
   2bf30:	e3a05014 	mov	r5, #20
   2bf34:	e1a00005 	mov	r0, r5
   2bf38:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2bf3c:	ebfff5e6 	bl	296dc <CTimer::SimpleMsDelay(unsigned int)>
   2bf40:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2bf44:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2bf48:	0afffff9 	beq	2bf34 <CBcmMailBox::Flush()+0x18>
   2bf4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bf50:	2000b000 	.word	0x2000b000

0002bf54 <CBcmMailBox::Read()>:
   2bf54:	e5901000 	ldr	r1, [r0]
   2bf58:	e59f2020 	ldr	r2, [pc, #32]	; 2bf80 <CBcmMailBox::Read()+0x2c>
   2bf5c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2bf60:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2bf64:	1afffffc 	bne	2bf5c <CBcmMailBox::Read()+0x8>
   2bf68:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2bf6c:	e200300f 	and	r3, r0, #15
   2bf70:	e1510003 	cmp	r1, r3
   2bf74:	1afffff8 	bne	2bf5c <CBcmMailBox::Read()+0x8>
   2bf78:	e3c0000f 	bic	r0, r0, #15
   2bf7c:	e12fff1e 	bx	lr
   2bf80:	2000b000 	.word	0x2000b000

0002bf84 <CBcmMailBox::Write(unsigned int)>:
   2bf84:	e59f2034 	ldr	r2, [pc, #52]	; 2bfc0 <CBcmMailBox::Write(unsigned int)+0x3c>
   2bf88:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2bf8c:	e3530000 	cmp	r3, #0
   2bf90:	bafffffc 	blt	2bf88 <CBcmMailBox::Write(unsigned int)+0x4>
   2bf94:	e311000f 	tst	r1, #15
   2bf98:	1a000003 	bne	2bfac <CBcmMailBox::Write(unsigned int)+0x28>
   2bf9c:	e5903000 	ldr	r3, [r0]
   2bfa0:	e1811003 	orr	r1, r1, r3
   2bfa4:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2bfa8:	e12fff1e 	bx	lr
   2bfac:	e92d4010 	push	{r4, lr}
   2bfb0:	e3a02062 	mov	r2, #98	; 0x62
   2bfb4:	e59f1008 	ldr	r1, [pc, #8]	; 2bfc4 <CBcmMailBox::Write(unsigned int)+0x40>
   2bfb8:	e59f0008 	ldr	r0, [pc, #8]	; 2bfc8 <CBcmMailBox::Write(unsigned int)+0x44>
   2bfbc:	ebffe040 	bl	240c4 <assertion_failed>
   2bfc0:	2000b000 	.word	0x2000b000
   2bfc4:	000474ac 	.word	0x000474ac
   2bfc8:	000474bc 	.word	0x000474bc

0002bfcc <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2bfcc:	e3a02000 	mov	r2, #0
   2bfd0:	e59f3004 	ldr	r3, [pc, #4]	; 2bfdc <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2bfd4:	e5832000 	str	r2, [r3]
   2bfd8:	e12fff1e 	bx	lr
   2bfdc:	00050204 	.word	0x00050204

0002bfe0 <DelayLoop>:
   2bfe0:	e1a01001 	mov	r1, r1
   2bfe4:	e1a02002 	mov	r2, r2
   2bfe8:	e2500001 	subs	r0, r0, #1
   2bfec:	8afffffb 	bhi	2bfe0 <DelayLoop>
   2bff0:	e1a0f00e 	mov	pc, lr

0002bff4 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2bff4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2bff8:	e3a0e000 	mov	lr, #0
   2bffc:	e1a03000 	mov	r3, r0
   2c000:	e1a0c00e 	mov	ip, lr
   2c004:	e5801000 	str	r1, [r0]
   2c008:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c00c:	e5e3e004 	strb	lr, [r3, #4]!
   2c010:	e5a3c004 	str	ip, [r3, #4]!
   2c014:	e1530002 	cmp	r3, r2
   2c018:	1afffffc 	bne	2c010 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c01c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c020 <CGPIOManager::~CGPIOManager()>:
   2c020:	e92d4010 	push	{r4, lr}
   2c024:	e2803004 	add	r3, r0, #4
   2c028:	e1a04000 	mov	r4, r0
   2c02c:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c030:	ea000001 	b	2c03c <CGPIOManager::~CGPIOManager()+0x1c>
   2c034:	e1530001 	cmp	r3, r1
   2c038:	0a000006 	beq	2c058 <CGPIOManager::~CGPIOManager()+0x38>
   2c03c:	e5b32004 	ldr	r2, [r3, #4]!
   2c040:	e3520000 	cmp	r2, #0
   2c044:	0afffffa 	beq	2c034 <CGPIOManager::~CGPIOManager()+0x14>
   2c048:	e3a0202c 	mov	r2, #44	; 0x2c
   2c04c:	e59f103c 	ldr	r1, [pc, #60]	; 2c090 <CGPIOManager::~CGPIOManager()+0x70>
   2c050:	e59f003c 	ldr	r0, [pc, #60]	; 2c094 <CGPIOManager::~CGPIOManager()+0x74>
   2c054:	ebffe01a 	bl	240c4 <assertion_failed>
   2c058:	e5d43004 	ldrb	r3, [r4, #4]
   2c05c:	e3530000 	cmp	r3, #0
   2c060:	0a000004 	beq	2c078 <CGPIOManager::~CGPIOManager()+0x58>
   2c064:	e5940000 	ldr	r0, [r4]
   2c068:	e3500000 	cmp	r0, #0
   2c06c:	0a000003 	beq	2c080 <CGPIOManager::~CGPIOManager()+0x60>
   2c070:	e3a01034 	mov	r1, #52	; 0x34
   2c074:	ebfffe95 	bl	2bad0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c078:	e1a00004 	mov	r0, r4
   2c07c:	e8bd8010 	pop	{r4, pc}
   2c080:	e3a02032 	mov	r2, #50	; 0x32
   2c084:	e59f1004 	ldr	r1, [pc, #4]	; 2c090 <CGPIOManager::~CGPIOManager()+0x70>
   2c088:	e59f0008 	ldr	r0, [pc, #8]	; 2c098 <CGPIOManager::~CGPIOManager()+0x78>
   2c08c:	ebffe00c 	bl	240c4 <assertion_failed>
   2c090:	000474d0 	.word	0x000474d0
   2c094:	000474e0 	.word	0x000474e0
   2c098:	000474f4 	.word	0x000474f4

0002c09c <CGPIOManager::Initialize()>:
   2c09c:	e5d03004 	ldrb	r3, [r0, #4]
   2c0a0:	e92d4010 	push	{r4, lr}
   2c0a4:	e3530000 	cmp	r3, #0
   2c0a8:	1a00000a 	bne	2c0d8 <CGPIOManager::Initialize()+0x3c>
   2c0ac:	e1a04000 	mov	r4, r0
   2c0b0:	e5900000 	ldr	r0, [r0]
   2c0b4:	e3500000 	cmp	r0, #0
   2c0b8:	0a00000a 	beq	2c0e8 <CGPIOManager::Initialize()+0x4c>
   2c0bc:	e1a03004 	mov	r3, r4
   2c0c0:	e59f2030 	ldr	r2, [pc, #48]	; 2c0f8 <CGPIOManager::Initialize()+0x5c>
   2c0c4:	e3a01034 	mov	r1, #52	; 0x34
   2c0c8:	ebfffe4c 	bl	2ba00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c0cc:	e3a00001 	mov	r0, #1
   2c0d0:	e5c40004 	strb	r0, [r4, #4]
   2c0d4:	e8bd8010 	pop	{r4, pc}
   2c0d8:	e3a0203b 	mov	r2, #59	; 0x3b
   2c0dc:	e59f1018 	ldr	r1, [pc, #24]	; 2c0fc <CGPIOManager::Initialize()+0x60>
   2c0e0:	e59f0018 	ldr	r0, [pc, #24]	; 2c100 <CGPIOManager::Initialize()+0x64>
   2c0e4:	ebffdff6 	bl	240c4 <assertion_failed>
   2c0e8:	e3a0203c 	mov	r2, #60	; 0x3c
   2c0ec:	e59f1008 	ldr	r1, [pc, #8]	; 2c0fc <CGPIOManager::Initialize()+0x60>
   2c0f0:	e59f000c 	ldr	r0, [pc, #12]	; 2c104 <CGPIOManager::Initialize()+0x68>
   2c0f4:	ebffdff2 	bl	240c4 <assertion_failed>
   2c0f8:	0002c2f8 	.word	0x0002c2f8
   2c0fc:	000474d0 	.word	0x000474d0
   2c100:	00047508 	.word	0x00047508
   2c104:	000474f4 	.word	0x000474f4

0002c108 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c108:	e5d03004 	ldrb	r3, [r0, #4]
   2c10c:	e92d4010 	push	{r4, lr}
   2c110:	e3530000 	cmp	r3, #0
   2c114:	0a00000a 	beq	2c144 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c118:	e3510000 	cmp	r1, #0
   2c11c:	0a00000c 	beq	2c154 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c120:	e5913004 	ldr	r3, [r1, #4]
   2c124:	e3530035 	cmp	r3, #53	; 0x35
   2c128:	8a00000d 	bhi	2c164 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c12c:	e0800103 	add	r0, r0, r3, lsl #2
   2c130:	e5903008 	ldr	r3, [r0, #8]
   2c134:	e3530000 	cmp	r3, #0
   2c138:	1a00000d 	bne	2c174 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c13c:	e5801008 	str	r1, [r0, #8]
   2c140:	e8bd8010 	pop	{r4, pc}
   2c144:	e3a02045 	mov	r2, #69	; 0x45
   2c148:	e59f1034 	ldr	r1, [pc, #52]	; 2c184 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c14c:	e59f0034 	ldr	r0, [pc, #52]	; 2c188 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c150:	ebffdfdb 	bl	240c4 <assertion_failed>
   2c154:	e3a02047 	mov	r2, #71	; 0x47
   2c158:	e59f1024 	ldr	r1, [pc, #36]	; 2c184 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c15c:	e59f0028 	ldr	r0, [pc, #40]	; 2c18c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c160:	ebffdfd7 	bl	240c4 <assertion_failed>
   2c164:	e3a02049 	mov	r2, #73	; 0x49
   2c168:	e59f1014 	ldr	r1, [pc, #20]	; 2c184 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c16c:	e59f001c 	ldr	r0, [pc, #28]	; 2c190 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c170:	ebffdfd3 	bl	240c4 <assertion_failed>
   2c174:	e3a0204b 	mov	r2, #75	; 0x4b
   2c178:	e59f1004 	ldr	r1, [pc, #4]	; 2c184 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c17c:	e59f0010 	ldr	r0, [pc, #16]	; 2c194 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c180:	ebffdfcf 	bl	240c4 <assertion_failed>
   2c184:	000474d0 	.word	0x000474d0
   2c188:	0004751c 	.word	0x0004751c
   2c18c:	0004752c 	.word	0x0004752c
   2c190:	00047538 	.word	0x00047538
   2c194:	000474e0 	.word	0x000474e0

0002c198 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c198:	e5d03004 	ldrb	r3, [r0, #4]
   2c19c:	e92d4010 	push	{r4, lr}
   2c1a0:	e3530000 	cmp	r3, #0
   2c1a4:	0a00000b 	beq	2c1d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c1a8:	e3510000 	cmp	r1, #0
   2c1ac:	0a00000d 	beq	2c1e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c1b0:	e5913004 	ldr	r3, [r1, #4]
   2c1b4:	e3530035 	cmp	r3, #53	; 0x35
   2c1b8:	8a00000e 	bhi	2c1f8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c1bc:	e0800103 	add	r0, r0, r3, lsl #2
   2c1c0:	e5903008 	ldr	r3, [r0, #8]
   2c1c4:	e3530000 	cmp	r3, #0
   2c1c8:	0a00000e 	beq	2c208 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c1cc:	e3a03000 	mov	r3, #0
   2c1d0:	e5803008 	str	r3, [r0, #8]
   2c1d4:	e8bd8010 	pop	{r4, pc}
   2c1d8:	e3a02052 	mov	r2, #82	; 0x52
   2c1dc:	e59f1034 	ldr	r1, [pc, #52]	; 2c218 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c1e0:	e59f0034 	ldr	r0, [pc, #52]	; 2c21c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c1e4:	ebffdfb6 	bl	240c4 <assertion_failed>
   2c1e8:	e3a02054 	mov	r2, #84	; 0x54
   2c1ec:	e59f1024 	ldr	r1, [pc, #36]	; 2c218 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c1f0:	e59f0028 	ldr	r0, [pc, #40]	; 2c220 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c1f4:	ebffdfb2 	bl	240c4 <assertion_failed>
   2c1f8:	e3a02056 	mov	r2, #86	; 0x56
   2c1fc:	e59f1014 	ldr	r1, [pc, #20]	; 2c218 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c200:	e59f001c 	ldr	r0, [pc, #28]	; 2c224 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c204:	ebffdfae 	bl	240c4 <assertion_failed>
   2c208:	e3a02058 	mov	r2, #88	; 0x58
   2c20c:	e59f1004 	ldr	r1, [pc, #4]	; 2c218 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c210:	e59f0010 	ldr	r0, [pc, #16]	; 2c228 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c214:	ebffdfaa 	bl	240c4 <assertion_failed>
   2c218:	000474d0 	.word	0x000474d0
   2c21c:	0004751c 	.word	0x0004751c
   2c220:	0004752c 	.word	0x0004752c
   2c224:	00047538 	.word	0x00047538
   2c228:	0004754c 	.word	0x0004754c

0002c22c <CGPIOManager::InterruptHandler()>:
   2c22c:	e5d03004 	ldrb	r3, [r0, #4]
   2c230:	e92d4070 	push	{r4, r5, r6, lr}
   2c234:	e3530000 	cmp	r3, #0
   2c238:	0a00001b 	beq	2c2ac <CGPIOManager::InterruptHandler()+0x80>
   2c23c:	e3a04000 	mov	r4, #0
   2c240:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c244:	e59f2098 	ldr	r2, [pc, #152]	; 2c2e4 <CGPIOManager::InterruptHandler()+0xb8>
   2c248:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c24c:	ea000005 	b	2c268 <CGPIOManager::InterruptHandler()+0x3c>
   2c250:	e2844001 	add	r4, r4, #1
   2c254:	e314001f 	tst	r4, #31
   2c258:	11a030a3 	lsrne	r3, r3, #1
   2c25c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c260:	e3540036 	cmp	r4, #54	; 0x36
   2c264:	0a00000d 	beq	2c2a0 <CGPIOManager::InterruptHandler()+0x74>
   2c268:	e3130001 	tst	r3, #1
   2c26c:	0afffff7 	beq	2c250 <CGPIOManager::InterruptHandler()+0x24>
   2c270:	e2843002 	add	r3, r4, #2
   2c274:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c278:	e3550000 	cmp	r5, #0
   2c27c:	0a00000e 	beq	2c2bc <CGPIOManager::InterruptHandler()+0x90>
   2c280:	e1a00005 	mov	r0, r5
   2c284:	ebffe5c0 	bl	2598c <CGPIOPin::InterruptHandler()>
   2c288:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c28c:	e3530000 	cmp	r3, #0
   2c290:	1595100c 	ldrne	r1, [r5, #12]
   2c294:	15952008 	ldrne	r2, [r5, #8]
   2c298:	159f3048 	ldrne	r3, [pc, #72]	; 2c2e8 <CGPIOManager::InterruptHandler()+0xbc>
   2c29c:	17821003 	strne	r1, [r2, r3]
   2c2a0:	e3a03000 	mov	r3, #0
   2c2a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c2a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c2ac:	e3a0205e 	mov	r2, #94	; 0x5e
   2c2b0:	e59f1034 	ldr	r1, [pc, #52]	; 2c2ec <CGPIOManager::InterruptHandler()+0xc0>
   2c2b4:	e59f0034 	ldr	r0, [pc, #52]	; 2c2f0 <CGPIOManager::InterruptHandler()+0xc4>
   2c2b8:	ebffdf81 	bl	240c4 <assertion_failed>
   2c2bc:	e1a00004 	mov	r0, r4
   2c2c0:	ebffe5d1 	bl	25a0c <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2c2c4:	e3a02001 	mov	r2, #1
   2c2c8:	e59f3024 	ldr	r3, [pc, #36]	; 2c2f4 <CGPIOManager::InterruptHandler()+0xc8>
   2c2cc:	e204101f 	and	r1, r4, #31
   2c2d0:	e08332a4 	add	r3, r3, r4, lsr #5
   2c2d4:	e1a03103 	lsl	r3, r3, #2
   2c2d8:	e1a02112 	lsl	r2, r2, r1
   2c2dc:	e5832000 	str	r2, [r3]
   2c2e0:	eaffffee 	b	2c2a0 <CGPIOManager::InterruptHandler()+0x74>
   2c2e4:	20200000 	.word	0x20200000
   2c2e8:	20200040 	.word	0x20200040
   2c2ec:	000474d0 	.word	0x000474d0
   2c2f0:	0004751c 	.word	0x0004751c
   2c2f4:	08080010 	.word	0x08080010

0002c2f8 <CGPIOManager::InterruptStub(void*)>:
   2c2f8:	e3500000 	cmp	r0, #0
   2c2fc:	0a000000 	beq	2c304 <CGPIOManager::InterruptStub(void*)+0xc>
   2c300:	eaffffc9 	b	2c22c <CGPIOManager::InterruptHandler()>
   2c304:	e92d4010 	push	{r4, lr}
   2c308:	e3a0208e 	mov	r2, #142	; 0x8e
   2c30c:	e59f1004 	ldr	r1, [pc, #4]	; 2c318 <CGPIOManager::InterruptStub(void*)+0x20>
   2c310:	e59f0004 	ldr	r0, [pc, #4]	; 2c31c <CGPIOManager::InterruptStub(void*)+0x24>
   2c314:	ebffdf6a 	bl	240c4 <assertion_failed>
   2c318:	000474d0 	.word	0x000474d0
   2c31c:	0004097c 	.word	0x0004097c

0002c320 <CPtrList::CPtrList()>:
   2c320:	e3a02000 	mov	r2, #0
   2c324:	e5802000 	str	r2, [r0]
   2c328:	e12fff1e 	bx	lr

0002c32c <CPtrList::~CPtrList()>:
   2c32c:	e5903000 	ldr	r3, [r0]
   2c330:	e3530000 	cmp	r3, #0
   2c334:	1a000000 	bne	2c33c <CPtrList::~CPtrList()+0x10>
   2c338:	e12fff1e 	bx	lr
   2c33c:	e92d4010 	push	{r4, lr}
   2c340:	e3a0202a 	mov	r2, #42	; 0x2a
   2c344:	e59f1004 	ldr	r1, [pc, #4]	; 2c350 <CPtrList::~CPtrList()+0x24>
   2c348:	e59f0004 	ldr	r0, [pc, #4]	; 2c354 <CPtrList::~CPtrList()+0x28>
   2c34c:	ebffdf5c 	bl	240c4 <assertion_failed>
   2c350:	00047560 	.word	0x00047560
   2c354:	0004756c 	.word	0x0004756c

0002c358 <CPtrList::GetFirst()>:
   2c358:	e5900000 	ldr	r0, [r0]
   2c35c:	e12fff1e 	bx	lr

0002c360 <CPtrList::GetNext(TPtrListElement*)>:
   2c360:	e3510000 	cmp	r1, #0
   2c364:	e92d4010 	push	{r4, lr}
   2c368:	0a000005 	beq	2c384 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2c36c:	e59f3030 	ldr	r3, [pc, #48]	; 2c3a4 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2c370:	e5912000 	ldr	r2, [r1]
   2c374:	e1520003 	cmp	r2, r3
   2c378:	1a000005 	bne	2c394 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2c37c:	e5910008 	ldr	r0, [r1, #8]
   2c380:	e8bd8010 	pop	{r4, pc}
   2c384:	e3a02034 	mov	r2, #52	; 0x34
   2c388:	e59f1018 	ldr	r1, [pc, #24]	; 2c3a8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c38c:	e59f0018 	ldr	r0, [pc, #24]	; 2c3ac <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2c390:	ebffdf4b 	bl	240c4 <assertion_failed>
   2c394:	e3a02035 	mov	r2, #53	; 0x35
   2c398:	e59f1008 	ldr	r1, [pc, #8]	; 2c3a8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2c39c:	e59f000c 	ldr	r0, [pc, #12]	; 2c3b0 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2c3a0:	ebffdf47 	bl	240c4 <assertion_failed>
   2c3a4:	504c4d43 	.word	0x504c4d43
   2c3a8:	00047560 	.word	0x00047560
   2c3ac:	0004757c 	.word	0x0004757c
   2c3b0:	0004758c 	.word	0x0004758c

0002c3b4 <CPtrList::GetPtr(TPtrListElement*)>:
   2c3b4:	e3510000 	cmp	r1, #0
   2c3b8:	e92d4010 	push	{r4, lr}
   2c3bc:	0a000005 	beq	2c3d8 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2c3c0:	e59f3030 	ldr	r3, [pc, #48]	; 2c3f8 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2c3c4:	e5912000 	ldr	r2, [r1]
   2c3c8:	e1520003 	cmp	r2, r3
   2c3cc:	1a000005 	bne	2c3e8 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2c3d0:	e591000c 	ldr	r0, [r1, #12]
   2c3d4:	e8bd8010 	pop	{r4, pc}
   2c3d8:	e3a0203c 	mov	r2, #60	; 0x3c
   2c3dc:	e59f1018 	ldr	r1, [pc, #24]	; 2c3fc <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c3e0:	e59f0018 	ldr	r0, [pc, #24]	; 2c400 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2c3e4:	ebffdf36 	bl	240c4 <assertion_failed>
   2c3e8:	e3a0203d 	mov	r2, #61	; 0x3d
   2c3ec:	e59f1008 	ldr	r1, [pc, #8]	; 2c3fc <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2c3f0:	e59f000c 	ldr	r0, [pc, #12]	; 2c404 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2c3f4:	ebffdf32 	bl	240c4 <assertion_failed>
   2c3f8:	504c4d43 	.word	0x504c4d43
   2c3fc:	00047560 	.word	0x00047560
   2c400:	0004757c 	.word	0x0004757c
   2c404:	0004758c 	.word	0x0004758c

0002c408 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2c408:	e92d4070 	push	{r4, r5, r6, lr}
   2c40c:	e1a05000 	mov	r5, r0
   2c410:	e3a00010 	mov	r0, #16
   2c414:	e1a04001 	mov	r4, r1
   2c418:	e1a06002 	mov	r6, r2
   2c41c:	ebfff944 	bl	2a934 <operator new(unsigned int)>
   2c420:	e5953000 	ldr	r3, [r5]
   2c424:	e59f10a8 	ldr	r1, [pc, #168]	; 2c4d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xcc>
   2c428:	e3530000 	cmp	r3, #0
   2c42c:	e580600c 	str	r6, [r0, #12]
   2c430:	e5801000 	str	r1, [r0]
   2c434:	0a000015 	beq	2c490 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x88>
   2c438:	e3540000 	cmp	r4, #0
   2c43c:	0a000017 	beq	2c4a0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
   2c440:	e5942000 	ldr	r2, [r4]
   2c444:	e1520001 	cmp	r2, r1
   2c448:	1a000018 	bne	2c4b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2c44c:	e1530004 	cmp	r3, r4
   2c450:	0a00001a 	beq	2c4c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   2c454:	e5943004 	ldr	r3, [r4, #4]
   2c458:	e5804008 	str	r4, [r0, #8]
   2c45c:	e3530000 	cmp	r3, #0
   2c460:	e5803004 	str	r3, [r0, #4]
   2c464:	0a000003 	beq	2c478 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2c468:	e5931000 	ldr	r1, [r3]
   2c46c:	e1510002 	cmp	r1, r2
   2c470:	05830008 	streq	r0, [r3, #8]
   2c474:	1a000001 	bne	2c480 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2c478:	e5840004 	str	r0, [r4, #4]
   2c47c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c480:	e3a02060 	mov	r2, #96	; 0x60
   2c484:	e59f104c 	ldr	r1, [pc, #76]	; 2c4d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2c488:	e59f004c 	ldr	r0, [pc, #76]	; 2c4dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2c48c:	ebffdf0c 	bl	240c4 <assertion_failed>
   2c490:	e3a0204c 	mov	r2, #76	; 0x4c
   2c494:	e59f103c 	ldr	r1, [pc, #60]	; 2c4d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2c498:	e59f0040 	ldr	r0, [pc, #64]	; 2c4e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2c49c:	ebffdf08 	bl	240c4 <assertion_failed>
   2c4a0:	e3a0204d 	mov	r2, #77	; 0x4d
   2c4a4:	e59f102c 	ldr	r1, [pc, #44]	; 2c4d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2c4a8:	e59f0034 	ldr	r0, [pc, #52]	; 2c4e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2c4ac:	ebffdf04 	bl	240c4 <assertion_failed>
   2c4b0:	e3a0204e 	mov	r2, #78	; 0x4e
   2c4b4:	e59f101c 	ldr	r1, [pc, #28]	; 2c4d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2c4b8:	e59f0028 	ldr	r0, [pc, #40]	; 2c4e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2c4bc:	ebffdf00 	bl	240c4 <assertion_failed>
   2c4c0:	e3a02000 	mov	r2, #0
   2c4c4:	e980000c 	stmib	r0, {r2, r3}
   2c4c8:	e5830004 	str	r0, [r3, #4]
   2c4cc:	e5850000 	str	r0, [r5]
   2c4d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c4d4:	504c4d43 	.word	0x504c4d43
   2c4d8:	00047560 	.word	0x00047560
   2c4dc:	000475f0 	.word	0x000475f0
   2c4e0:	000475b0 	.word	0x000475b0
   2c4e4:	000475c0 	.word	0x000475c0
   2c4e8:	000475cc 	.word	0x000475cc

0002c4ec <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2c4ec:	e92d4070 	push	{r4, r5, r6, lr}
   2c4f0:	e1a04001 	mov	r4, r1
   2c4f4:	e1a05000 	mov	r5, r0
   2c4f8:	e3a00010 	mov	r0, #16
   2c4fc:	e1a06002 	mov	r6, r2
   2c500:	ebfff90b 	bl	2a934 <operator new(unsigned int)>
   2c504:	e59f30ac 	ldr	r3, [pc, #172]	; 2c5b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2c508:	e3540000 	cmp	r4, #0
   2c50c:	e580600c 	str	r6, [r0, #12]
   2c510:	e5803000 	str	r3, [r0]
   2c514:	0a000014 	beq	2c56c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   2c518:	e5952000 	ldr	r2, [r5]
   2c51c:	e3520000 	cmp	r2, #0
   2c520:	0a000018 	beq	2c588 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2c524:	e5942000 	ldr	r2, [r4]
   2c528:	e1520003 	cmp	r2, r3
   2c52c:	1a000019 	bne	2c598 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2c530:	e5943008 	ldr	r3, [r4, #8]
   2c534:	e5804004 	str	r4, [r0, #4]
   2c538:	e3530000 	cmp	r3, #0
   2c53c:	e5803008 	str	r3, [r0, #8]
   2c540:	0a000003 	beq	2c554 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2c544:	e5931000 	ldr	r1, [r3]
   2c548:	e1510002 	cmp	r1, r2
   2c54c:	05830004 	streq	r0, [r3, #4]
   2c550:	1a000001 	bne	2c55c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2c554:	e5840008 	str	r0, [r4, #8]
   2c558:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c55c:	e3a02085 	mov	r2, #133	; 0x85
   2c560:	e59f1054 	ldr	r1, [pc, #84]	; 2c5bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2c564:	e59f0054 	ldr	r0, [pc, #84]	; 2c5c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2c568:	ebffded5 	bl	240c4 <assertion_failed>
   2c56c:	e5953000 	ldr	r3, [r5]
   2c570:	e3530000 	cmp	r3, #0
   2c574:	1a00000b 	bne	2c5a8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2c578:	e5803004 	str	r3, [r0, #4]
   2c57c:	e5803008 	str	r3, [r0, #8]
   2c580:	e5850000 	str	r0, [r5]
   2c584:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c588:	e3a0207d 	mov	r2, #125	; 0x7d
   2c58c:	e59f1028 	ldr	r1, [pc, #40]	; 2c5bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2c590:	e59f002c 	ldr	r0, [pc, #44]	; 2c5c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2c594:	ebffdeca 	bl	240c4 <assertion_failed>
   2c598:	e3a0207e 	mov	r2, #126	; 0x7e
   2c59c:	e59f1018 	ldr	r1, [pc, #24]	; 2c5bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2c5a0:	e59f0020 	ldr	r0, [pc, #32]	; 2c5c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2c5a4:	ebffdec6 	bl	240c4 <assertion_failed>
   2c5a8:	e3a02074 	mov	r2, #116	; 0x74
   2c5ac:	e59f1008 	ldr	r1, [pc, #8]	; 2c5bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2c5b0:	e59f0014 	ldr	r0, [pc, #20]	; 2c5cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2c5b4:	ebffdec2 	bl	240c4 <assertion_failed>
   2c5b8:	504c4d43 	.word	0x504c4d43
   2c5bc:	00047560 	.word	0x00047560
   2c5c0:	0004763c 	.word	0x0004763c
   2c5c4:	000475b0 	.word	0x000475b0
   2c5c8:	00047618 	.word	0x00047618
   2c5cc:	0004756c 	.word	0x0004756c

0002c5d0 <CPtrList::Remove(TPtrListElement*)>:
   2c5d0:	e3510000 	cmp	r1, #0
   2c5d4:	e92d4010 	push	{r4, lr}
   2c5d8:	0a00002c 	beq	2c690 <CPtrList::Remove(TPtrListElement*)+0xc0>
   2c5dc:	e59f30ec 	ldr	r3, [pc, #236]	; 2c6d0 <CPtrList::Remove(TPtrListElement*)+0x100>
   2c5e0:	e5912000 	ldr	r2, [r1]
   2c5e4:	e1520003 	cmp	r2, r3
   2c5e8:	1a00002c 	bne	2c6a0 <CPtrList::Remove(TPtrListElement*)+0xd0>
   2c5ec:	e5903000 	ldr	r3, [r0]
   2c5f0:	e1510003 	cmp	r1, r3
   2c5f4:	0a000018 	beq	2c65c <CPtrList::Remove(TPtrListElement*)+0x8c>
   2c5f8:	e5913004 	ldr	r3, [r1, #4]
   2c5fc:	e3530000 	cmp	r3, #0
   2c600:	0a00002a 	beq	2c6b0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   2c604:	e5930000 	ldr	r0, [r3]
   2c608:	e1500002 	cmp	r0, r2
   2c60c:	1a00002b 	bne	2c6c0 <CPtrList::Remove(TPtrListElement*)+0xf0>
   2c610:	e5912008 	ldr	r2, [r1, #8]
   2c614:	e5832008 	str	r2, [r3, #8]
   2c618:	e5912008 	ldr	r2, [r1, #8]
   2c61c:	e3520000 	cmp	r2, #0
   2c620:	0a000003 	beq	2c634 <CPtrList::Remove(TPtrListElement*)+0x64>
   2c624:	e592c000 	ldr	ip, [r2]
   2c628:	e15c0000 	cmp	ip, r0
   2c62c:	05823004 	streq	r3, [r2, #4]
   2c630:	1a000005 	bne	2c64c <CPtrList::Remove(TPtrListElement*)+0x7c>
   2c634:	e8bd4010 	pop	{r4, lr}
   2c638:	e3a03000 	mov	r3, #0
   2c63c:	e1a00001 	mov	r0, r1
   2c640:	e5813000 	str	r3, [r1]
   2c644:	e3a01010 	mov	r1, #16
   2c648:	eafff8c7 	b	2a96c <operator delete(void*, unsigned int)>
   2c64c:	e3a020a4 	mov	r2, #164	; 0xa4
   2c650:	e59f107c 	ldr	r1, [pc, #124]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c654:	e59f007c 	ldr	r0, [pc, #124]	; 2c6d8 <CPtrList::Remove(TPtrListElement*)+0x108>
   2c658:	ebffde99 	bl	240c4 <assertion_failed>
   2c65c:	e5913008 	ldr	r3, [r1, #8]
   2c660:	e3530000 	cmp	r3, #0
   2c664:	e5803000 	str	r3, [r0]
   2c668:	0afffff1 	beq	2c634 <CPtrList::Remove(TPtrListElement*)+0x64>
   2c66c:	e5930000 	ldr	r0, [r3]
   2c670:	e1500002 	cmp	r0, r2
   2c674:	03a02000 	moveq	r2, #0
   2c678:	05832004 	streq	r2, [r3, #4]
   2c67c:	0affffec 	beq	2c634 <CPtrList::Remove(TPtrListElement*)+0x64>
   2c680:	e3a02098 	mov	r2, #152	; 0x98
   2c684:	e59f1048 	ldr	r1, [pc, #72]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c688:	e59f0048 	ldr	r0, [pc, #72]	; 2c6d8 <CPtrList::Remove(TPtrListElement*)+0x108>
   2c68c:	ebffde8c 	bl	240c4 <assertion_failed>
   2c690:	e3a0208f 	mov	r2, #143	; 0x8f
   2c694:	e59f1038 	ldr	r1, [pc, #56]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c698:	e59f003c 	ldr	r0, [pc, #60]	; 2c6dc <CPtrList::Remove(TPtrListElement*)+0x10c>
   2c69c:	ebffde88 	bl	240c4 <assertion_failed>
   2c6a0:	e3a02090 	mov	r2, #144	; 0x90
   2c6a4:	e59f1028 	ldr	r1, [pc, #40]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c6a8:	e59f0030 	ldr	r0, [pc, #48]	; 2c6e0 <CPtrList::Remove(TPtrListElement*)+0x110>
   2c6ac:	ebffde84 	bl	240c4 <assertion_failed>
   2c6b0:	e3a0209e 	mov	r2, #158	; 0x9e
   2c6b4:	e59f1018 	ldr	r1, [pc, #24]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c6b8:	e59f0024 	ldr	r0, [pc, #36]	; 2c6e4 <CPtrList::Remove(TPtrListElement*)+0x114>
   2c6bc:	ebffde80 	bl	240c4 <assertion_failed>
   2c6c0:	e3a0209f 	mov	r2, #159	; 0x9f
   2c6c4:	e59f1008 	ldr	r1, [pc, #8]	; 2c6d4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2c6c8:	e59f0018 	ldr	r0, [pc, #24]	; 2c6e8 <CPtrList::Remove(TPtrListElement*)+0x118>
   2c6cc:	ebffde7c 	bl	240c4 <assertion_failed>
   2c6d0:	504c4d43 	.word	0x504c4d43
   2c6d4:	00047560 	.word	0x00047560
   2c6d8:	00047668 	.word	0x00047668
   2c6dc:	0004757c 	.word	0x0004757c
   2c6e0:	0004758c 	.word	0x0004758c
   2c6e4:	00047694 	.word	0x00047694
   2c6e8:	000476ac 	.word	0x000476ac

0002c6ec <CPtrList::Find(void*)>:
   2c6ec:	e5900000 	ldr	r0, [r0]
   2c6f0:	e3500000 	cmp	r0, #0
   2c6f4:	0a000015 	beq	2c750 <CPtrList::Find(void*)+0x64>
   2c6f8:	e59f3054 	ldr	r3, [pc, #84]	; 2c754 <CPtrList::Find(void*)+0x68>
   2c6fc:	e5902000 	ldr	r2, [r0]
   2c700:	e1520003 	cmp	r2, r3
   2c704:	1a00000c 	bne	2c73c <CPtrList::Find(void*)+0x50>
   2c708:	e590300c 	ldr	r3, [r0, #12]
   2c70c:	e1510003 	cmp	r1, r3
   2c710:	1a000003 	bne	2c724 <CPtrList::Find(void*)+0x38>
   2c714:	ea00000d 	b	2c750 <CPtrList::Find(void*)+0x64>
   2c718:	e590300c 	ldr	r3, [r0, #12]
   2c71c:	e1530001 	cmp	r3, r1
   2c720:	0a00000a 	beq	2c750 <CPtrList::Find(void*)+0x64>
   2c724:	e5900008 	ldr	r0, [r0, #8]
   2c728:	e3500000 	cmp	r0, #0
   2c72c:	0a000007 	beq	2c750 <CPtrList::Find(void*)+0x64>
   2c730:	e5903000 	ldr	r3, [r0]
   2c734:	e1530002 	cmp	r3, r2
   2c738:	0afffff6 	beq	2c718 <CPtrList::Find(void*)+0x2c>
   2c73c:	e92d4010 	push	{r4, lr}
   2c740:	e3a020b3 	mov	r2, #179	; 0xb3
   2c744:	e59f100c 	ldr	r1, [pc, #12]	; 2c758 <CPtrList::Find(void*)+0x6c>
   2c748:	e59f000c 	ldr	r0, [pc, #12]	; 2c75c <CPtrList::Find(void*)+0x70>
   2c74c:	ebffde5c 	bl	240c4 <assertion_failed>
   2c750:	e12fff1e 	bx	lr
   2c754:	504c4d43 	.word	0x504c4d43
   2c758:	00047560 	.word	0x00047560
   2c75c:	0004758c 	.word	0x0004758c

0002c760 <CPageAllocator::CPageAllocator()>:
   2c760:	e3a02000 	mov	r2, #0
   2c764:	e3a01001 	mov	r1, #1
   2c768:	e5802000 	str	r2, [r0]
   2c76c:	e580100c 	str	r1, [r0, #12]
   2c770:	e5802004 	str	r2, [r0, #4]
   2c774:	e5802008 	str	r2, [r0, #8]
   2c778:	e12fff1e 	bx	lr

0002c77c <CPageAllocator::~CPageAllocator()>:
   2c77c:	e12fff1e 	bx	lr

0002c780 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2c780:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c784:	e28db000 	add	fp, sp, #0
   2c788:	e24dd014 	sub	sp, sp, #20
   2c78c:	e50b0008 	str	r0, [fp, #-8]
   2c790:	e50b100c 	str	r1, [fp, #-12]
   2c794:	e50b2010 	str	r2, [fp, #-16]
   2c798:	e51b300c 	ldr	r3, [fp, #-12]
   2c79c:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2c7a0:	e283300f 	add	r3, r3, #15
   2c7a4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2c7a8:	e3c3300f 	bic	r3, r3, #15
   2c7ac:	e1a02003 	mov	r2, r3
   2c7b0:	e51b3008 	ldr	r3, [fp, #-8]
   2c7b4:	e5832000 	str	r2, [r3]
   2c7b8:	e51b200c 	ldr	r2, [fp, #-12]
   2c7bc:	e51b3010 	ldr	r3, [fp, #-16]
   2c7c0:	e0823003 	add	r3, r2, r3
   2c7c4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2c7c8:	e3c3300f 	bic	r3, r3, #15
   2c7cc:	e1a02003 	mov	r2, r3
   2c7d0:	e51b3008 	ldr	r3, [fp, #-8]
   2c7d4:	e5832004 	str	r2, [r3, #4]
   2c7d8:	e320f000 	nop	{0}
   2c7dc:	e28bd000 	add	sp, fp, #0
   2c7e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c7e4:	e12fff1e 	bx	lr

0002c7e8 <CPageAllocator::GetFreeSpace() const>:
   2c7e8:	e8900005 	ldm	r0, {r0, r2}
   2c7ec:	e0420000 	sub	r0, r2, r0
   2c7f0:	e12fff1e 	bx	lr

0002c7f4 <CPageAllocator::Allocate()>:
   2c7f4:	e5903000 	ldr	r3, [r0]
   2c7f8:	e92d4070 	push	{r4, r5, r6, lr}
   2c7fc:	e3530000 	cmp	r3, #0
   2c800:	0a000026 	beq	2c8a0 <CPageAllocator::Allocate()+0xac>
   2c804:	e1a05000 	mov	r5, r0
   2c808:	e590000c 	ldr	r0, [r0, #12]
   2c80c:	e3500000 	cmp	r0, #0
   2c810:	1a000012 	bne	2c860 <CPageAllocator::Allocate()+0x6c>
   2c814:	e5954008 	ldr	r4, [r5, #8]
   2c818:	e3540000 	cmp	r4, #0
   2c81c:	0a000013 	beq	2c870 <CPageAllocator::Allocate()+0x7c>
   2c820:	e59f3098 	ldr	r3, [pc, #152]	; 2c8c0 <CPageAllocator::Allocate()+0xcc>
   2c824:	e5942000 	ldr	r2, [r4]
   2c828:	e1520003 	cmp	r2, r3
   2c82c:	1a00001f 	bne	2c8b0 <CPageAllocator::Allocate()+0xbc>
   2c830:	e3a03000 	mov	r3, #0
   2c834:	e5942004 	ldr	r2, [r4, #4]
   2c838:	e5852008 	str	r2, [r5, #8]
   2c83c:	e5843000 	str	r3, [r4]
   2c840:	e595300c 	ldr	r3, [r5, #12]
   2c844:	e3530000 	cmp	r3, #0
   2c848:	1a000001 	bne	2c854 <CPageAllocator::Allocate()+0x60>
   2c84c:	e1a00004 	mov	r0, r4
   2c850:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c854:	ebfffb93 	bl	2b6a8 <LeaveCritical>
   2c858:	e1a00004 	mov	r0, r4
   2c85c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c860:	ebfffb65 	bl	2b5fc <EnterCritical>
   2c864:	e5954008 	ldr	r4, [r5, #8]
   2c868:	e3540000 	cmp	r4, #0
   2c86c:	1affffeb 	bne	2c820 <CPageAllocator::Allocate()+0x2c>
   2c870:	e5954000 	ldr	r4, [r5]
   2c874:	e5952004 	ldr	r2, [r5, #4]
   2c878:	e2843a01 	add	r3, r4, #4096	; 0x1000
   2c87c:	e1530002 	cmp	r3, r2
   2c880:	e5853000 	str	r3, [r5]
   2c884:	9affffed 	bls	2c840 <CPageAllocator::Allocate()+0x4c>
   2c888:	e595400c 	ldr	r4, [r5, #12]
   2c88c:	e3540000 	cmp	r4, #0
   2c890:	0affffed 	beq	2c84c <CPageAllocator::Allocate()+0x58>
   2c894:	ebfffb83 	bl	2b6a8 <LeaveCritical>
   2c898:	e3a00000 	mov	r0, #0
   2c89c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c8a0:	e59f101c 	ldr	r1, [pc, #28]	; 2c8c4 <CPageAllocator::Allocate()+0xd0>
   2c8a4:	e3a02036 	mov	r2, #54	; 0x36
   2c8a8:	e2810014 	add	r0, r1, #20
   2c8ac:	ebffde04 	bl	240c4 <assertion_failed>
   2c8b0:	e59f100c 	ldr	r1, [pc, #12]	; 2c8c4 <CPageAllocator::Allocate()+0xd0>
   2c8b4:	e3a02044 	mov	r2, #68	; 0x44
   2c8b8:	e2810024 	add	r0, r1, #36	; 0x24
   2c8bc:	ebffde00 	bl	240c4 <assertion_failed>
   2c8c0:	50474d43 	.word	0x50474d43
   2c8c4:	000476d8 	.word	0x000476d8

0002c8c8 <CPageAllocator::Free(void*)>:
   2c8c8:	e92d4070 	push	{r4, r5, r6, lr}
   2c8cc:	e2515000 	subs	r5, r1, #0
   2c8d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c8d4:	e590300c 	ldr	r3, [r0, #12]
   2c8d8:	e3530000 	cmp	r3, #0
   2c8dc:	1a000004 	bne	2c8f4 <CPageAllocator::Free(void*)+0x2c>
   2c8e0:	e5903008 	ldr	r3, [r0, #8]
   2c8e4:	e59f2038 	ldr	r2, [pc, #56]	; 2c924 <CPageAllocator::Free(void*)+0x5c>
   2c8e8:	e885000c 	stm	r5, {r2, r3}
   2c8ec:	e5805008 	str	r5, [r0, #8]
   2c8f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c8f4:	e1a04000 	mov	r4, r0
   2c8f8:	e1a00003 	mov	r0, r3
   2c8fc:	ebfffb3e 	bl	2b5fc <EnterCritical>
   2c900:	e594100c 	ldr	r1, [r4, #12]
   2c904:	e5943008 	ldr	r3, [r4, #8]
   2c908:	e59f2014 	ldr	r2, [pc, #20]	; 2c924 <CPageAllocator::Free(void*)+0x5c>
   2c90c:	e3510000 	cmp	r1, #0
   2c910:	e885000c 	stm	r5, {r2, r3}
   2c914:	e5845008 	str	r5, [r4, #8]
   2c918:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c91c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c920:	eafffb60 	b	2b6a8 <LeaveCritical>
   2c924:	50474d43 	.word	0x50474d43

0002c928 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2c928:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c92c:	e1a04000 	mov	r4, r0
   2c930:	e3a0b000 	mov	fp, #0
   2c934:	e1a06002 	mov	r6, r2
   2c938:	e1a07001 	mov	r7, r1
   2c93c:	e1a05003 	mov	r5, r3
   2c940:	e24dd00c 	sub	sp, sp, #12
   2c944:	e280a018 	add	sl, r0, #24
   2c948:	ebffdfce 	bl	24888 <CDevice::CDevice()>
   2c94c:	e59f31d8 	ldr	r3, [pc, #472]	; 2cb2c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2c950:	e5c46008 	strb	r6, [r4, #8]
   2c954:	e5843000 	str	r3, [r4]
   2c958:	e5847004 	str	r7, [r4, #4]
   2c95c:	e2849040 	add	r9, r4, #64	; 0x40
   2c960:	e584500c 	str	r5, [r4, #12]
   2c964:	e1a0000a 	mov	r0, sl
   2c968:	e584b010 	str	fp, [r4, #16]
   2c96c:	e5c4b014 	strb	fp, [r4, #20]
   2c970:	ebffe148 	bl	24e98 <CGPIOPin::CGPIOPin()>
   2c974:	e2848068 	add	r8, r4, #104	; 0x68
   2c978:	e1a00009 	mov	r0, r9
   2c97c:	ebffe145 	bl	24e98 <CGPIOPin::CGPIOPin()>
   2c980:	e2847090 	add	r7, r4, #144	; 0x90
   2c984:	e1a00008 	mov	r0, r8
   2c988:	ebffe142 	bl	24e98 <CGPIOPin::CGPIOPin()>
   2c98c:	e1a00007 	mov	r0, r7
   2c990:	ebffe140 	bl	24e98 <CGPIOPin::CGPIOPin()>
   2c994:	e156000b 	cmp	r6, fp
   2c998:	13a06002 	movne	r6, #2
   2c99c:	03a06001 	moveq	r6, #1
   2c9a0:	e3a03001 	mov	r3, #1
   2c9a4:	e594000c 	ldr	r0, [r4, #12]
   2c9a8:	e2841901 	add	r1, r4, #16384	; 0x4000
   2c9ac:	e150000b 	cmp	r0, fp
   2c9b0:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2c9b4:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2c9b8:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2c9bc:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2c9c0:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2c9c4:	e5c4b0c8 	strb	fp, [r4, #200]	; 0xc8
   2c9c8:	e5c4b0c9 	strb	fp, [r4, #201]	; 0xc9
   2c9cc:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2c9d0:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2c9d4:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2c9d8:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2c9dc:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2c9e0:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2c9e4:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2c9e8:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2c9ec:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2c9f0:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2c9f4:	e5816f28 	str	r6, [r1, #3880]	; 0xf28
   2c9f8:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2c9fc:	e581bf2c 	str	fp, [r1, #3884]	; 0xf2c
   2ca00:	e5813f18 	str	r3, [r1, #3864]	; 0xf18
   2ca04:	1a000029 	bne	2cab0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2ca08:	e59f6120 	ldr	r6, [pc, #288]	; 2cb30 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x208>
   2ca0c:	e1a02205 	lsl	r2, r5, #4
   2ca10:	e1a0b002 	mov	fp, r2
   2ca14:	e0862002 	add	r2, r6, r2
   2ca18:	e5922004 	ldr	r2, [r2, #4]
   2ca1c:	e3520035 	cmp	r2, #53	; 0x35
   2ca20:	8a000022 	bhi	2cab0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2ca24:	e59f2108 	ldr	r2, [pc, #264]	; 2cb34 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x20c>
   2ca28:	e5921020 	ldr	r1, [r2, #32]
   2ca2c:	e3510000 	cmp	r1, #0
   2ca30:	1a000033 	bne	2cb04 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   2ca34:	e7961105 	ldr	r1, [r6, r5, lsl #2]
   2ca38:	e5824020 	str	r4, [r2, #32]
   2ca3c:	e3510000 	cmp	r1, #0
   2ca40:	e5841010 	str	r1, [r4, #16]
   2ca44:	0a000033 	beq	2cb18 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f0>
   2ca48:	e3550000 	cmp	r5, #0
   2ca4c:	0a00001a 	beq	2cabc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x194>
   2ca50:	e086600b 	add	r6, r6, fp
   2ca54:	e5961004 	ldr	r1, [r6, #4]
   2ca58:	e1a00008 	mov	r0, r8
   2ca5c:	ebffe139 	bl	24f48 <CGPIOPin::AssignPin(unsigned int)>
   2ca60:	e5961008 	ldr	r1, [r6, #8]
   2ca64:	e3a02001 	mov	r2, #1
   2ca68:	e2811004 	add	r1, r1, #4
   2ca6c:	e1a00008 	mov	r0, r8
   2ca70:	e6ef1071 	uxtb	r1, r1
   2ca74:	ebffe154 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2ca78:	e596100c 	ldr	r1, [r6, #12]
   2ca7c:	e1a00007 	mov	r0, r7
   2ca80:	ebffe130 	bl	24f48 <CGPIOPin::AssignPin(unsigned int)>
   2ca84:	e5961010 	ldr	r1, [r6, #16]
   2ca88:	e3a02001 	mov	r2, #1
   2ca8c:	e2811004 	add	r1, r1, #4
   2ca90:	e6ef1071 	uxtb	r1, r1
   2ca94:	e1a00007 	mov	r0, r7
   2ca98:	ebffe14b 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2ca9c:	e1a00007 	mov	r0, r7
   2caa0:	e3a01002 	mov	r1, #2
   2caa4:	ebffe35f 	bl	25828 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2caa8:	e3a03001 	mov	r3, #1
   2caac:	e5c43014 	strb	r3, [r4, #20]
   2cab0:	e1a00004 	mov	r0, r4
   2cab4:	e28dd00c 	add	sp, sp, #12
   2cab8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cabc:	e1a0000a 	mov	r0, sl
   2cac0:	e3a01020 	mov	r1, #32
   2cac4:	e58d3004 	str	r3, [sp, #4]
   2cac8:	ebffe11e 	bl	24f48 <CGPIOPin::AssignPin(unsigned int)>
   2cacc:	e59d3004 	ldr	r3, [sp, #4]
   2cad0:	e1a01005 	mov	r1, r5
   2cad4:	e1a02003 	mov	r2, r3
   2cad8:	e1a0000a 	mov	r0, sl
   2cadc:	ebffe13a 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cae0:	e1a00009 	mov	r0, r9
   2cae4:	e3a01021 	mov	r1, #33	; 0x21
   2cae8:	ebffe116 	bl	24f48 <CGPIOPin::AssignPin(unsigned int)>
   2caec:	e59d3004 	ldr	r3, [sp, #4]
   2caf0:	e1a01005 	mov	r1, r5
   2caf4:	e1a02003 	mov	r2, r3
   2caf8:	e1a00009 	mov	r0, r9
   2cafc:	ebffe132 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cb00:	eaffffd2 	b	2ca50 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x128>
   2cb04:	e59f3020 	ldr	r3, [pc, #32]	; 2cb2c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2cb08:	e3a020bd 	mov	r2, #189	; 0xbd
   2cb0c:	e2831018 	add	r1, r3, #24
   2cb10:	e2830034 	add	r0, r3, #52	; 0x34
   2cb14:	ebffdd6a 	bl	240c4 <assertion_failed>
   2cb18:	e59f300c 	ldr	r3, [pc, #12]	; 2cb2c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2cb1c:	e3a020c1 	mov	r2, #193	; 0xc1
   2cb20:	e2831018 	add	r1, r3, #24
   2cb24:	e283004c 	add	r0, r3, #76	; 0x4c
   2cb28:	ebffdd65 	bl	240c4 <assertion_failed>
   2cb2c:	00047734 	.word	0x00047734
   2cb30:	00049d80 	.word	0x00049d80
   2cb34:	00050208 	.word	0x00050208

0002cb38 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2cb38:	e5d03014 	ldrb	r3, [r0, #20]
   2cb3c:	e59fc16c 	ldr	ip, [pc, #364]	; 2ccb0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2cb40:	e3530000 	cmp	r3, #0
   2cb44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cb48:	e1a04000 	mov	r4, r0
   2cb4c:	e580c000 	str	ip, [r0]
   2cb50:	0a00004a 	beq	2cc80 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2cb54:	e3a00001 	mov	r0, #1
   2cb58:	e59f5154 	ldr	r5, [pc, #340]	; 2ccb4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x17c>
   2cb5c:	e594100c 	ldr	r1, [r4, #12]
   2cb60:	e595201c 	ldr	r2, [r5, #28]
   2cb64:	e3a03000 	mov	r3, #0
   2cb68:	e1c22110 	bic	r2, r2, r0, lsl r1
   2cb6c:	e585201c 	str	r2, [r5, #28]
   2cb70:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2cb74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2cb78:	e5942010 	ldr	r2, [r4, #16]
   2cb7c:	e5823038 	str	r3, [r2, #56]	; 0x38
   2cb80:	e5942010 	ldr	r2, [r4, #16]
   2cb84:	e5823030 	str	r3, [r2, #48]	; 0x30
   2cb88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2cb8c:	e5943004 	ldr	r3, [r4, #4]
   2cb90:	e3530000 	cmp	r3, #0
   2cb94:	0a000004 	beq	2cbac <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2cb98:	e5953010 	ldr	r3, [r5, #16]
   2cb9c:	e2433001 	sub	r3, r3, #1
   2cba0:	e3530000 	cmp	r3, #0
   2cba4:	e5853010 	str	r3, [r5, #16]
   2cba8:	0a000026 	beq	2cc48 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x110>
   2cbac:	e2846068 	add	r6, r4, #104	; 0x68
   2cbb0:	e1a00006 	mov	r0, r6
   2cbb4:	e3a02001 	mov	r2, #1
   2cbb8:	e3a01000 	mov	r1, #0
   2cbbc:	e2847090 	add	r7, r4, #144	; 0x90
   2cbc0:	ebffe101 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cbc4:	e1a00007 	mov	r0, r7
   2cbc8:	e3a02001 	mov	r2, #1
   2cbcc:	e3a01000 	mov	r1, #0
   2cbd0:	ebffe0fd 	bl	24fcc <CGPIOPin::SetMode(TGPIOMode, bool)>
   2cbd4:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2cbd8:	e3500000 	cmp	r0, #0
   2cbdc:	0a000002 	beq	2cbec <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2cbe0:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2cbe4:	e3530000 	cmp	r3, #0
   2cbe8:	1a00002a 	bne	2cc98 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x160>
   2cbec:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2cbf0:	e3500000 	cmp	r0, #0
   2cbf4:	0a000002 	beq	2cc04 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2cbf8:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2cbfc:	e3530000 	cmp	r3, #0
   2cc00:	1a00001c 	bne	2cc78 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x140>
   2cc04:	e3a02000 	mov	r2, #0
   2cc08:	e594300c 	ldr	r3, [r4, #12]
   2cc0c:	e1a00007 	mov	r0, r7
   2cc10:	e0855103 	add	r5, r5, r3, lsl #2
   2cc14:	e5c42014 	strb	r2, [r4, #20]
   2cc18:	e5852020 	str	r2, [r5, #32]
   2cc1c:	ebffe0c2 	bl	24f2c <CGPIOPin::~CGPIOPin()>
   2cc20:	e1a00006 	mov	r0, r6
   2cc24:	ebffe0c0 	bl	24f2c <CGPIOPin::~CGPIOPin()>
   2cc28:	e2840040 	add	r0, r4, #64	; 0x40
   2cc2c:	ebffe0be 	bl	24f2c <CGPIOPin::~CGPIOPin()>
   2cc30:	e2840018 	add	r0, r4, #24
   2cc34:	ebffe0bc 	bl	24f2c <CGPIOPin::~CGPIOPin()>
   2cc38:	e1a00004 	mov	r0, r4
   2cc3c:	ebffdf03 	bl	24850 <CDevice::~CDevice()>
   2cc40:	e1a00004 	mov	r0, r4
   2cc44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2cc48:	e5950014 	ldr	r0, [r5, #20]
   2cc4c:	e3500000 	cmp	r0, #0
   2cc50:	0a000012 	beq	2cca0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x168>
   2cc54:	e5d53018 	ldrb	r3, [r5, #24]
   2cc58:	e3530000 	cmp	r3, #0
   2cc5c:	1a00000b 	bne	2cc90 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2cc60:	e3a01039 	mov	r1, #57	; 0x39
   2cc64:	ebfffb99 	bl	2bad0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2cc68:	e3a03000 	mov	r3, #0
   2cc6c:	e5853014 	str	r3, [r5, #20]
   2cc70:	e5c53018 	strb	r3, [r5, #24]
   2cc74:	eaffffcc 	b	2cbac <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2cc78:	ebfff735 	bl	2a954 <operator delete[](void*)>
   2cc7c:	eaffffe0 	b	2cc04 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2cc80:	e2800090 	add	r0, r0, #144	; 0x90
   2cc84:	ebffe0a8 	bl	24f2c <CGPIOPin::~CGPIOPin()>
   2cc88:	e2840068 	add	r0, r4, #104	; 0x68
   2cc8c:	eaffffe4 	b	2cc24 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xec>
   2cc90:	ebfffb1d 	bl	2b90c <CInterruptSystem::DisconnectFIQ()>
   2cc94:	eafffff3 	b	2cc68 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x130>
   2cc98:	ebfff72d 	bl	2a954 <operator delete[](void*)>
   2cc9c:	eaffffd2 	b	2cbec <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2cca0:	e3a020ed 	mov	r2, #237	; 0xed
   2cca4:	e28c1018 	add	r1, ip, #24
   2cca8:	e28c0060 	add	r0, ip, #96	; 0x60
   2ccac:	ebffdd04 	bl	240c4 <assertion_failed>
   2ccb0:	00047734 	.word	0x00047734
   2ccb4:	00050208 	.word	0x00050208

0002ccb8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2ccb8:	e92d4010 	push	{r4, lr}
   2ccbc:	e1a04000 	mov	r4, r0
   2ccc0:	ebffff9c 	bl	2cb38 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2ccc4:	e1a00004 	mov	r0, r4
   2ccc8:	e59f1008 	ldr	r1, [pc, #8]	; 2ccd8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2cccc:	ebfff726 	bl	2a96c <operator delete(void*, unsigned int)>
   2ccd0:	e1a00004 	mov	r0, r4
   2ccd4:	e8bd8010 	pop	{r4, pc}
   2ccd8:	00004f30 	.word	0x00004f30

0002ccdc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2ccdc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cce0:	e5d05014 	ldrb	r5, [r0, #20]
   2cce4:	e24dd014 	sub	sp, sp, #20
   2cce8:	e3550000 	cmp	r5, #0
   2ccec:	1a000002 	bne	2ccfc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2ccf0:	e1a00005 	mov	r0, r5
   2ccf4:	e28dd014 	add	sp, sp, #20
   2ccf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ccfc:	e1a08003 	mov	r8, r3
   2cd00:	e1a07002 	mov	r7, r2
   2cd04:	e3a03001 	mov	r3, #1
   2cd08:	e59f2280 	ldr	r2, [pc, #640]	; 2cf90 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2cd0c:	e1a06001 	mov	r6, r1
   2cd10:	e3a01002 	mov	r1, #2
   2cd14:	e1a04000 	mov	r4, r0
   2cd18:	eb0000ac 	bl	2cfd0 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2cd1c:	ebffe8d5 	bl	27078 <CMachineInfo::Get()>
   2cd20:	e3a01002 	mov	r1, #2
   2cd24:	ebffe803 	bl	26d38 <CMachineInfo::GetClockRate(unsigned int) const>
   2cd28:	e250b000 	subs	fp, r0, #0
   2cd2c:	0a00007b 	beq	2cf20 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x244>
   2cd30:	e59f325c 	ldr	r3, [pc, #604]	; 2cf94 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2cd34:	e2462f4b 	sub	r2, r6, #300	; 0x12c
   2cd38:	e1520003 	cmp	r2, r3
   2cd3c:	8a00007b 	bhi	2cf30 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x254>
   2cd40:	e1a09206 	lsl	r9, r6, #4
   2cd44:	e1a01009 	mov	r1, r9
   2cd48:	eb004b14 	bl	3f9a0 <__aeabi_uidiv>
   2cd4c:	e59f3244 	ldr	r3, [pc, #580]	; 2cf98 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2cd50:	e2402001 	sub	r2, r0, #1
   2cd54:	e1520003 	cmp	r2, r3
   2cd58:	e1a0a000 	mov	sl, r0
   2cd5c:	8a000077 	bhi	2cf40 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x264>
   2cd60:	e1a01009 	mov	r1, r9
   2cd64:	e1a0000b 	mov	r0, fp
   2cd68:	eb004b49 	bl	3fa94 <__aeabi_uidivmod>
   2cd6c:	e1a00181 	lsl	r0, r1, #3
   2cd70:	e1a01006 	mov	r1, r6
   2cd74:	eb004b09 	bl	3f9a0 <__aeabi_uidiv>
   2cd78:	e2009001 	and	r9, r0, #1
   2cd7c:	e08990a0 	add	r9, r9, r0, lsr #1
   2cd80:	e359003f 	cmp	r9, #63	; 0x3f
   2cd84:	8a000071 	bhi	2cf50 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x274>
   2cd88:	e59f620c 	ldr	r6, [pc, #524]	; 2cf9c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2cd8c:	e28410f8 	add	r1, r4, #248	; 0xf8
   2cd90:	e28420bc 	add	r2, r4, #188	; 0xbc
   2cd94:	e98d0042 	stmib	sp, {r1, r6}
   2cd98:	e1a03007 	mov	r3, r7
   2cd9c:	e58d2000 	str	r2, [sp]
   2cda0:	e28410b8 	add	r1, r4, #184	; 0xb8
   2cda4:	e28420c8 	add	r2, r4, #200	; 0xc8
   2cda8:	e1a00004 	mov	r0, r4
   2cdac:	eb000264 	bl	2d744 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2cdb0:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2cdb4:	e2822008 	add	r2, r2, #8
   2cdb8:	e28410d0 	add	r1, r4, #208	; 0xd0
   2cdbc:	e88d0006 	stm	sp, {r1, r2}
   2cdc0:	e58d6008 	str	r6, [sp, #8]
   2cdc4:	e1a00004 	mov	r0, r4
   2cdc8:	e1a03008 	mov	r3, r8
   2cdcc:	e28420dc 	add	r2, r4, #220	; 0xdc
   2cdd0:	e28410cc 	add	r1, r4, #204	; 0xcc
   2cdd4:	eb00025a 	bl	2d744 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2cdd8:	e5940004 	ldr	r0, [r4, #4]
   2cddc:	e59f61bc 	ldr	r6, [pc, #444]	; 2cfa0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2cde0:	e3500000 	cmp	r0, #0
   2cde4:	0a000013 	beq	2ce38 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x15c>
   2cde8:	e5963010 	ldr	r3, [r6, #16]
   2cdec:	e3530000 	cmp	r3, #0
   2cdf0:	1a00003d 	bne	2ceec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2cdf4:	e5d42008 	ldrb	r2, [r4, #8]
   2cdf8:	e5860014 	str	r0, [r6, #20]
   2cdfc:	e3520000 	cmp	r2, #0
   2ce00:	e5c62018 	strb	r2, [r6, #24]
   2ce04:	1a000041 	bne	2cf10 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x234>
   2ce08:	e1a03002 	mov	r3, r2
   2ce0c:	e3a01039 	mov	r1, #57	; 0x39
   2ce10:	e59f218c 	ldr	r2, [pc, #396]	; 2cfa4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2ce14:	ebfffaf9 	bl	2ba00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2ce18:	e5963008 	ldr	r3, [r6, #8]
   2ce1c:	e2833001 	add	r3, r3, #1
   2ce20:	e5863008 	str	r3, [r6, #8]
   2ce24:	e5963010 	ldr	r3, [r6, #16]
   2ce28:	e3530000 	cmp	r3, #0
   2ce2c:	1a00004f 	bne	2cf70 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x294>
   2ce30:	e3a03001 	mov	r3, #1
   2ce34:	e5863010 	str	r3, [r6, #16]
   2ce38:	e3a03000 	mov	r3, #0
   2ce3c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ce40:	e5942010 	ldr	r2, [r4, #16]
   2ce44:	e59f015c 	ldr	r0, [pc, #348]	; 2cfa8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2ce48:	e5823038 	str	r3, [r2, #56]	; 0x38
   2ce4c:	e5942010 	ldr	r2, [r4, #16]
   2ce50:	e5941004 	ldr	r1, [r4, #4]
   2ce54:	e5820044 	str	r0, [r2, #68]	; 0x44
   2ce58:	e5942010 	ldr	r2, [r4, #16]
   2ce5c:	e1510003 	cmp	r1, r3
   2ce60:	e582a024 	str	sl, [r2, #36]	; 0x24
   2ce64:	e5942010 	ldr	r2, [r4, #16]
   2ce68:	e5829028 	str	r9, [r2, #40]	; 0x28
   2ce6c:	0a000043 	beq	2cf80 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a4>
   2ce70:	e3a0e011 	mov	lr, #17
   2ce74:	e3a0c070 	mov	ip, #112	; 0x70
   2ce78:	e3a01e45 	mov	r1, #1104	; 0x450
   2ce7c:	e3a00001 	mov	r0, #1
   2ce80:	e5942010 	ldr	r2, [r4, #16]
   2ce84:	e582e034 	str	lr, [r2, #52]	; 0x34
   2ce88:	e5942010 	ldr	r2, [r4, #16]
   2ce8c:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2ce90:	e5942010 	ldr	r2, [r4, #16]
   2ce94:	e5821038 	str	r1, [r2, #56]	; 0x38
   2ce98:	e596201c 	ldr	r2, [r6, #28]
   2ce9c:	e594100c 	ldr	r1, [r4, #12]
   2cea0:	e1822110 	orr	r2, r2, r0, lsl r1
   2cea4:	e586201c 	str	r2, [r6, #28]
   2cea8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ceac:	e5942010 	ldr	r2, [r4, #16]
   2ceb0:	e59f10f4 	ldr	r1, [pc, #244]	; 2cfac <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2ceb4:	e59f30f4 	ldr	r3, [pc, #244]	; 2cfb0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2ceb8:	e5821030 	str	r1, [r2, #48]	; 0x30
   2cebc:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2cec0:	e3a07000 	mov	r7, #0
   2cec4:	e586300c 	str	r3, [r6, #12]
   2cec8:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   2cecc:	ebffdf56 	bl	24c2c <CDeviceNameService::Get()>
   2ced0:	e1a03007 	mov	r3, r7
   2ced4:	e1a02004 	mov	r2, r4
   2ced8:	e59f10d4 	ldr	r1, [pc, #212]	; 2cfb4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2cedc:	ebffde98 	bl	24944 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2cee0:	e1a00005 	mov	r0, r5
   2cee4:	e28dd014 	add	sp, sp, #20
   2cee8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ceec:	e5963014 	ldr	r3, [r6, #20]
   2cef0:	e1500003 	cmp	r0, r3
   2cef4:	0a000019 	beq	2cf60 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x284>
   2cef8:	e3a05000 	mov	r5, #0
   2cefc:	e594300c 	ldr	r3, [r4, #12]
   2cf00:	e5c45014 	strb	r5, [r4, #20]
   2cf04:	e0866103 	add	r6, r6, r3, lsl #2
   2cf08:	e5865020 	str	r5, [r6, #32]
   2cf0c:	eaffff77 	b	2ccf0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2cf10:	e59f208c 	ldr	r2, [pc, #140]	; 2cfa4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2cf14:	e3a01039 	mov	r1, #57	; 0x39
   2cf18:	ebfffa47 	bl	2b83c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2cf1c:	eaffffc0 	b	2ce24 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x148>
   2cf20:	e59f1090 	ldr	r1, [pc, #144]	; 2cfb8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2cf24:	e59f2090 	ldr	r2, [pc, #144]	; 2cfbc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2cf28:	e2810060 	add	r0, r1, #96	; 0x60
   2cf2c:	ebffdc64 	bl	240c4 <assertion_failed>
   2cf30:	e59f1080 	ldr	r1, [pc, #128]	; 2cfb8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2cf34:	e59f2084 	ldr	r2, [pc, #132]	; 2cfc0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2cf38:	e2810070 	add	r0, r1, #112	; 0x70
   2cf3c:	ebffdc60 	bl	240c4 <assertion_failed>
   2cf40:	e59f1070 	ldr	r1, [pc, #112]	; 2cfb8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2cf44:	e59f2078 	ldr	r2, [pc, #120]	; 2cfc4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e8>
   2cf48:	e281009c 	add	r0, r1, #156	; 0x9c
   2cf4c:	ebffdc5c 	bl	240c4 <assertion_failed>
   2cf50:	e59f1060 	ldr	r1, [pc, #96]	; 2cfb8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2cf54:	e59f206c 	ldr	r2, [pc, #108]	; 2cfc8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ec>
   2cf58:	e28100c0 	add	r0, r1, #192	; 0xc0
   2cf5c:	ebffdc58 	bl	240c4 <assertion_failed>
   2cf60:	e5d42008 	ldrb	r2, [r4, #8]
   2cf64:	e5d63018 	ldrb	r3, [r6, #24]
   2cf68:	e1520003 	cmp	r2, r3
   2cf6c:	1affffe1 	bne	2cef8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x21c>
   2cf70:	e59f1040 	ldr	r1, [pc, #64]	; 2cfb8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2cf74:	e59f2050 	ldr	r2, [pc, #80]	; 2cfcc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2f0>
   2cf78:	e28100d4 	add	r0, r1, #212	; 0xd4
   2cf7c:	ebffdc50 	bl	240c4 <assertion_failed>
   2cf80:	e3a02060 	mov	r2, #96	; 0x60
   2cf84:	e5943010 	ldr	r3, [r4, #16]
   2cf88:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2cf8c:	eaffffc6 	b	2ceac <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1d0>
   2cf90:	01e84800 	.word	0x01e84800
   2cf94:	003d07d4 	.word	0x003d07d4
   2cf98:	0000fffe 	.word	0x0000fffe
   2cf9c:	00002710 	.word	0x00002710
   2cfa0:	00050208 	.word	0x00050208
   2cfa4:	0002d6f4 	.word	0x0002d6f4
   2cfa8:	000007ff 	.word	0x000007ff
   2cfac:	00000301 	.word	0x00000301
   2cfb0:	2000b000 	.word	0x2000b000
   2cfb4:	00047848 	.word	0x00047848
   2cfb8:	0004774c 	.word	0x0004774c
   2cfbc:	00000115 	.word	0x00000115
   2cfc0:	00000117 	.word	0x00000117
   2cfc4:	0000011a 	.word	0x0000011a
   2cfc8:	0000011d 	.word	0x0000011d
   2cfcc:	00000149 	.word	0x00000149

0002cfd0 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2cfd0:	e92d4070 	push	{r4, r5, r6, lr}
   2cfd4:	e24dd028 	sub	sp, sp, #40	; 0x28
   2cfd8:	e1a06001 	mov	r6, r1
   2cfdc:	e28d0008 	add	r0, sp, #8
   2cfe0:	e3a01000 	mov	r1, #0
   2cfe4:	e1a05002 	mov	r5, r2
   2cfe8:	e1a04003 	mov	r4, r3
   2cfec:	ebffdc55 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2cff0:	e3a0300c 	mov	r3, #12
   2cff4:	e28d2010 	add	r2, sp, #16
   2cff8:	e58d3000 	str	r3, [sp]
   2cffc:	e59f102c 	ldr	r1, [pc, #44]	; 2d030 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d000:	e3a03018 	mov	r3, #24
   2d004:	e28d0008 	add	r0, sp, #8
   2d008:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d00c:	e58d601c 	str	r6, [sp, #28]
   2d010:	e58d5020 	str	r5, [sp, #32]
   2d014:	ebffdc57 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d018:	e1a04000 	mov	r4, r0
   2d01c:	e28d0008 	add	r0, sp, #8
   2d020:	ebffdc4f 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d024:	e1a00004 	mov	r0, r4
   2d028:	e28dd028 	add	sp, sp, #40	; 0x28
   2d02c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d030:	00038002 	.word	0x00038002

0002d034 <CUartMaxiSerialDevice::Clear()>:
   2d034:	e3a03000 	mov	r3, #0
   2d038:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d03c:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d040:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d044:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d048:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d04c:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d050:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d054:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d058:	e12fff1e 	bx	lr

0002d05c <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d05c:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d060:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d064:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d068:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d06c:	e1530001 	cmp	r3, r1
   2d070:	80800002 	addhi	r0, r0, r2
   2d074:	e0400003 	sub	r0, r0, r3
   2d078:	e0420000 	sub	r0, r2, r0
   2d07c:	e12fff1e 	bx	lr

0002d080 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d080:	e1a03000 	mov	r3, r0
   2d084:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d088:	e3500000 	cmp	r0, #0
   2d08c:	012fff1e 	bxeq	lr
   2d090:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d094:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d098:	e3520000 	cmp	r2, #0
   2d09c:	0a00001d 	beq	2d118 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d0a0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d0a4:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d0a8:	e15e000c 	cmp	lr, ip
   2d0ac:	0a000008 	beq	2d0d4 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d0b0:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d0b4:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d0b8:	e15c000e 	cmp	ip, lr
   2d0bc:	2a000011 	bcs	2d108 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d0c0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d0c4:	e2422001 	sub	r2, r2, #1
   2d0c8:	e35c0000 	cmp	ip, #0
   2d0cc:	0152000e 	cmpeq	r2, lr
   2d0d0:	0a000010 	beq	2d118 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d0d4:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d0d8:	e7c01002 	strb	r1, [r0, r2]
   2d0dc:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d0e0:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d0e4:	e2822001 	add	r2, r2, #1
   2d0e8:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d0ec:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d0f0:	e1520001 	cmp	r2, r1
   2d0f4:	23a02000 	movcs	r2, #0
   2d0f8:	23a00001 	movcs	r0, #1
   2d0fc:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d100:	33a00001 	movcc	r0, #1
   2d104:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d108:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d10c:	e04cc002 	sub	ip, ip, r2
   2d110:	e35c0001 	cmp	ip, #1
   2d114:	8affffee 	bhi	2d0d4 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d118:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d11c:	e3a00000 	mov	r0, #0
   2d120:	e2822001 	add	r2, r2, #1
   2d124:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d128:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d12c <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d12c:	e92d4070 	push	{r4, r5, r6, lr}
   2d130:	e1a05000 	mov	r5, r0
   2d134:	ebffffd1 	bl	2d080 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d138:	e1a04000 	mov	r4, r0
   2d13c:	e1a00005 	mov	r0, r5
   2d140:	eb00001e 	bl	2d1c0 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d144:	e1a00004 	mov	r0, r4
   2d148:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d14c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d14c:	e3520000 	cmp	r2, #0
   2d150:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d154:	e1a07000 	mov	r7, r0
   2d158:	0a00000c 	beq	2d190 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x44>
   2d15c:	e1a04001 	mov	r4, r1
   2d160:	e3a05000 	mov	r5, #0
   2d164:	e0816002 	add	r6, r1, r2
   2d168:	e4d41001 	ldrb	r1, [r4], #1
   2d16c:	e1a00007 	mov	r0, r7
   2d170:	ebffffc2 	bl	2d080 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d174:	e1540006 	cmp	r4, r6
   2d178:	e0855000 	add	r5, r5, r0
   2d17c:	1afffff9 	bne	2d168 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x1c>
   2d180:	e1a00007 	mov	r0, r7
   2d184:	eb00000d 	bl	2d1c0 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d188:	e1a00005 	mov	r0, r5
   2d18c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d190:	e1a05002 	mov	r5, r2
   2d194:	eafffff9 	b	2d180 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x34>

0002d198 <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d198:	e92d4070 	push	{r4, r5, r6, lr}
   2d19c:	e1a05000 	mov	r5, r0
   2d1a0:	e1a00001 	mov	r0, r1
   2d1a4:	e1a04001 	mov	r4, r1
   2d1a8:	ebfff1e3 	bl	2993c <strlen>
   2d1ac:	e1a01004 	mov	r1, r4
   2d1b0:	e1a02000 	mov	r2, r0
   2d1b4:	e1a00005 	mov	r0, r5
   2d1b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d1bc:	eaffffe2 	b	2d14c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d1c0 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d1c0:	e92d4010 	push	{r4, lr}
   2d1c4:	e1a04000 	mov	r4, r0
   2d1c8:	e3a00001 	mov	r0, #1
   2d1cc:	ebfff90a 	bl	2b5fc <EnterCritical>
   2d1d0:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   2d1d4:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d1d8:	e1520003 	cmp	r2, r3
   2d1dc:	0a000020 	beq	2d264 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d1e0:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d1e4:	e3530000 	cmp	r3, #0
   2d1e8:	0a00001d 	beq	2d264 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d1ec:	e3a03000 	mov	r3, #0
   2d1f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d1f4:	e59f1088 	ldr	r1, [pc, #136]	; 2d284 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d1f8:	e5912018 	ldr	r2, [r1, #24]
   2d1fc:	e2122020 	ands	r2, r2, #32
   2d200:	0a000007 	beq	2d224 <CUartMaxiSerialDevice::TxPumpPrime()+0x64>
   2d204:	ea000018 	b	2d26c <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d208:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d20c:	e3530000 	cmp	r3, #0
   2d210:	0a000013 	beq	2d264 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d214:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2d218:	e5913018 	ldr	r3, [r1, #24]
   2d21c:	e3130020 	tst	r3, #32
   2d220:	1a000011 	bne	2d26c <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d224:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   2d228:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d22c:	e594c0cc 	ldr	ip, [r4, #204]	; 0xcc
   2d230:	e2833001 	add	r3, r3, #1
   2d234:	e7dc0000 	ldrb	r0, [ip, r0]
   2d238:	e58430d4 	str	r3, [r4, #212]	; 0xd4
   2d23c:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d240:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   2d244:	e15c0003 	cmp	ip, r3
   2d248:	258420d4 	strcs	r2, [r4, #212]	; 0xd4
   2d24c:	e5810000 	str	r0, [r1]
   2d250:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2d254:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   2d258:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d25c:	e1500003 	cmp	r0, r3
   2d260:	1affffe8 	bne	2d208 <CUartMaxiSerialDevice::TxPumpPrime()+0x48>
   2d264:	e8bd4010 	pop	{r4, lr}
   2d268:	eafff90e 	b	2b6a8 <LeaveCritical>
   2d26c:	e59f2010 	ldr	r2, [pc, #16]	; 2d284 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d270:	e8bd4010 	pop	{r4, lr}
   2d274:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2d278:	e3833020 	orr	r3, r3, #32
   2d27c:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d280:	eafff908 	b	2b6a8 <LeaveCritical>
   2d284:	20201000 	.word	0x20201000

0002d288 <CUartMaxiSerialDevice::Read()>:
   2d288:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d28c:	e1a03000 	mov	r3, r0
   2d290:	e3510000 	cmp	r1, #0
   2d294:	0a000010 	beq	2d2dc <CUartMaxiSerialDevice::Read()+0x54>
   2d298:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d29c:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d2a0:	e1500002 	cmp	r0, r2
   2d2a4:	0a00000c 	beq	2d2dc <CUartMaxiSerialDevice::Read()+0x54>
   2d2a8:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d2ac:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d2b0:	e7d10000 	ldrb	r0, [r1, r0]
   2d2b4:	e2822001 	add	r2, r2, #1
   2d2b8:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d2bc:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2d2c0:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2d2c4:	e1510002 	cmp	r1, r2
   2d2c8:	3a000002 	bcc	2d2d8 <CUartMaxiSerialDevice::Read()+0x50>
   2d2cc:	e3a02000 	mov	r2, #0
   2d2d0:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d2d4:	e12fff1e 	bx	lr
   2d2d8:	e12fff1e 	bx	lr
   2d2dc:	e3e00000 	mvn	r0, #0
   2d2e0:	e12fff1e 	bx	lr

0002d2e4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2d2e4:	e1a03000 	mov	r3, r0
   2d2e8:	e59f0090 	ldr	r0, [pc, #144]	; 2d380 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x9c>
   2d2ec:	e92d4010 	push	{r4, lr}
   2d2f0:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2d2f4:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   2d2f8:	e59f0084 	ldr	r0, [pc, #132]	; 2d384 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2d2fc:	e35e0000 	cmp	lr, #0
   2d300:	e580c004 	str	ip, [r0, #4]
   2d304:	0a00001b 	beq	2d378 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x94>
   2d308:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
   2d30c:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2d310:	e3520000 	cmp	r2, #0
   2d314:	1150000c 	cmpne	r0, ip
   2d318:	13a00001 	movne	r0, #1
   2d31c:	03a00000 	moveq	r0, #0
   2d320:	08bd8010 	popeq	{r4, pc}
   2d324:	e3a00000 	mov	r0, #0
   2d328:	e1a04000 	mov	r4, r0
   2d32c:	e2411001 	sub	r1, r1, #1
   2d330:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2d334:	e2800001 	add	r0, r0, #1
   2d338:	e7dec00c 	ldrb	ip, [lr, ip]
   2d33c:	e5e1c001 	strb	ip, [r1, #1]!
   2d340:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2d344:	e593e0c4 	ldr	lr, [r3, #196]	; 0xc4
   2d348:	e28cc001 	add	ip, ip, #1
   2d34c:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
   2d350:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2d354:	e15c000e 	cmp	ip, lr
   2d358:	258340c0 	strcs	r4, [r3, #192]	; 0xc0
   2d35c:	e593e0bc 	ldr	lr, [r3, #188]	; 0xbc
   2d360:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2d364:	e15e000c 	cmp	lr, ip
   2d368:	11520000 	cmpne	r2, r0
   2d36c:	98bd8010 	popls	{r4, pc}
   2d370:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2d374:	eaffffed 	b	2d330 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x4c>
   2d378:	e1a0000e 	mov	r0, lr
   2d37c:	e8bd8010 	pop	{r4, pc}
   2d380:	20201000 	.word	0x20201000
   2d384:	00050208 	.word	0x00050208

0002d388 <CUartMaxiSerialDevice::CanGet()>:
   2d388:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d38c:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2d390:	e0520000 	subs	r0, r2, r0
   2d394:	13a00001 	movne	r0, #1
   2d398:	e12fff1e 	bx	lr

0002d39c <CUartMaxiSerialDevice::Peek()>:
   2d39c:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2d3a0:	e3530000 	cmp	r3, #0
   2d3a4:	0a000006 	beq	2d3c4 <CUartMaxiSerialDevice::Peek()+0x28>
   2d3a8:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2d3ac:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d3b0:	e1510002 	cmp	r1, r2
   2d3b4:	0a000002 	beq	2d3c4 <CUartMaxiSerialDevice::Peek()+0x28>
   2d3b8:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2d3bc:	e7d30002 	ldrb	r0, [r3, r2]
   2d3c0:	e12fff1e 	bx	lr
   2d3c4:	e3e00000 	mvn	r0, #0
   2d3c8:	e12fff1e 	bx	lr

0002d3cc <CUartMaxiSerialDevice::AvailableForRead()>:
   2d3cc:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2d3d0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d3d4:	e1530002 	cmp	r3, r2
   2d3d8:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2d3dc:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2d3e0:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2d3e4:	80820000 	addhi	r0, r2, r0
   2d3e8:	e0400003 	sub	r0, r0, r3
   2d3ec:	e12fff1e 	bx	lr

0002d3f0 <CUartMaxiSerialDevice::GetOptions() const>:
   2d3f0:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d3f4:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2d3f8:	e12fff1e 	bx	lr

0002d3fc <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2d3fc:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d400:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2d404:	e12fff1e 	bx	lr

0002d408 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2d408:	e5903004 	ldr	r3, [r0, #4]
   2d40c:	e92d4010 	push	{r4, lr}
   2d410:	e3530000 	cmp	r3, #0
   2d414:	0a00000e 	beq	2d454 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2d418:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d41c:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2d420:	e3530000 	cmp	r3, #0
   2d424:	1a00000e 	bne	2d464 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2d428:	e3510000 	cmp	r1, #0
   2d42c:	0a000010 	beq	2d474 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2d430:	e1d130d0 	ldrsb	r3, [r1]
   2d434:	e3530000 	cmp	r3, #0
   2d438:	0a000011 	beq	2d484 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2d43c:	e3520000 	cmp	r2, #0
   2d440:	0a000013 	beq	2d494 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2d444:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2d448:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2d44c:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2d450:	e8bd8010 	pop	{r4, pc}
   2d454:	e59f1048 	ldr	r1, [pc, #72]	; 2d4a4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d458:	e59f2048 	ldr	r2, [pc, #72]	; 2d4a8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2d45c:	e2810f41 	add	r0, r1, #260	; 0x104
   2d460:	ebffdb17 	bl	240c4 <assertion_failed>
   2d464:	e59f1038 	ldr	r1, [pc, #56]	; 2d4a4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d468:	e59f203c 	ldr	r2, [pc, #60]	; 2d4ac <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2d46c:	e2810f47 	add	r0, r1, #284	; 0x11c
   2d470:	ebffdb13 	bl	240c4 <assertion_failed>
   2d474:	e59f1028 	ldr	r1, [pc, #40]	; 2d4a4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d478:	e3a02f87 	mov	r2, #540	; 0x21c
   2d47c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2d480:	ebffdb0f 	bl	240c4 <assertion_failed>
   2d484:	e59f1018 	ldr	r1, [pc, #24]	; 2d4a4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d488:	e59f2020 	ldr	r2, [pc, #32]	; 2d4b0 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2d48c:	e2810f4e 	add	r0, r1, #312	; 0x138
   2d490:	ebffdb0b 	bl	240c4 <assertion_failed>
   2d494:	e59f1008 	ldr	r1, [pc, #8]	; 2d4a4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2d498:	e59f2014 	ldr	r2, [pc, #20]	; 2d4b4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2d49c:	e2810f52 	add	r0, r1, #328	; 0x148
   2d4a0:	ebffdb07 	bl	240c4 <assertion_failed>
   2d4a4:	0004774c 	.word	0x0004774c
   2d4a8:	00000219 	.word	0x00000219
   2d4ac:	0000021a 	.word	0x0000021a
   2d4b0:	0000021d 	.word	0x0000021d
   2d4b4:	0000021e 	.word	0x0000021e

0002d4b8 <CUartMaxiSerialDevice::InterruptHandler()>:
   2d4b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d4bc:	e3a0e000 	mov	lr, #0
   2d4c0:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   2d4c4:	e59f3224 	ldr	r3, [pc, #548]	; 2d6f0 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2d4c8:	e1a0700e 	mov	r7, lr
   2d4cc:	e1a01003 	mov	r1, r3
   2d4d0:	e3a04003 	mov	r4, #3
   2d4d4:	e3a08002 	mov	r8, #2
   2d4d8:	e3a06001 	mov	r6, #1
   2d4dc:	e3a05004 	mov	r5, #4
   2d4e0:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   2d4e4:	e280c901 	add	ip, r0, #16384	; 0x4000
   2d4e8:	e5832044 	str	r2, [r3, #68]	; 0x44
   2d4ec:	e5913018 	ldr	r3, [r1, #24]
   2d4f0:	e3130010 	tst	r3, #16
   2d4f4:	1a000036 	bne	2d5d4 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2d4f8:	e5913000 	ldr	r3, [r1]
   2d4fc:	e3130b01 	tst	r3, #1024	; 0x400
   2d500:	0a000060 	beq	2d688 <CUartMaxiSerialDevice::InterruptHandler()+0x1d0>
   2d504:	e59020ec 	ldr	r2, [r0, #236]	; 0xec
   2d508:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2d50c:	e2822001 	add	r2, r2, #1
   2d510:	e3590000 	cmp	r9, #0
   2d514:	e58020ec 	str	r2, [r0, #236]	; 0xec
   2d518:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2d51c:	e59020c4 	ldr	r2, [r0, #196]	; 0xc4
   2d520:	e3520000 	cmp	r2, #0
   2d524:	0a000050 	beq	2d66c <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2d528:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2d52c:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2d530:	e15a0009 	cmp	sl, r9
   2d534:	0a000008 	beq	2d55c <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2d538:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2d53c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2d540:	e159000a 	cmp	r9, sl
   2d544:	2a000044 	bcs	2d65c <CUartMaxiSerialDevice::InterruptHandler()+0x1a4>
   2d548:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2d54c:	e2422001 	sub	r2, r2, #1
   2d550:	e3590000 	cmp	r9, #0
   2d554:	0152000a 	cmpeq	r2, sl
   2d558:	0a000043 	beq	2d66c <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2d55c:	e59020b8 	ldr	r2, [r0, #184]	; 0xb8
   2d560:	e3520000 	cmp	r2, #0
   2d564:	0a000040 	beq	2d66c <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2d568:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2d56c:	e7c23009 	strb	r3, [r2, r9]
   2d570:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d574:	e59090c4 	ldr	r9, [r0, #196]	; 0xc4
   2d578:	e2822001 	add	r2, r2, #1
   2d57c:	e58020bc 	str	r2, [r0, #188]	; 0xbc
   2d580:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d584:	e1520009 	cmp	r2, r9
   2d588:	e59c2f1c 	ldr	r2, [ip, #3868]	; 0xf1c
   2d58c:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2d590:	e3520000 	cmp	r2, #0
   2d594:	0affffd4 	beq	2d4ec <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2d598:	e59c9f20 	ldr	r9, [ip, #3872]	; 0xf20
   2d59c:	e6af3073 	sxtb	r3, r3
   2d5a0:	e1d9a0d0 	ldrsb	sl, [r9]
   2d5a4:	e15a0003 	cmp	sl, r3
   2d5a8:	158c2f20 	strne	r2, [ip, #3872]	; 0xf20
   2d5ac:	0a000047 	beq	2d6d0 <CUartMaxiSerialDevice::InterruptHandler()+0x218>
   2d5b0:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2d5b4:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2d5b8:	e2833001 	add	r3, r3, #1
   2d5bc:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d5c0:	e5913018 	ldr	r3, [r1, #24]
   2d5c4:	e3520000 	cmp	r2, #0
   2d5c8:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2d5cc:	e3130010 	tst	r3, #16
   2d5d0:	0affffc8 	beq	2d4f8 <CUartMaxiSerialDevice::InterruptHandler()+0x40>
   2d5d4:	e59f1114 	ldr	r1, [pc, #276]	; 2d6f0 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2d5d8:	ea00000c 	b	2d610 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2d5dc:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2d5e0:	e3520000 	cmp	r2, #0
   2d5e4:	0a000010 	beq	2d62c <CUartMaxiSerialDevice::InterruptHandler()+0x174>
   2d5e8:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2d5ec:	e7d2200c 	ldrb	r2, [r2, ip]
   2d5f0:	e5812000 	str	r2, [r1]
   2d5f4:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2d5f8:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2d5fc:	e2822001 	add	r2, r2, #1
   2d600:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2d604:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2d608:	e152000c 	cmp	r2, ip
   2d60c:	2a000035 	bcs	2d6e8 <CUartMaxiSerialDevice::InterruptHandler()+0x230>
   2d610:	e5913018 	ldr	r3, [r1, #24]
   2d614:	e2133020 	ands	r3, r3, #32
   2d618:	1a000007 	bne	2d63c <CUartMaxiSerialDevice::InterruptHandler()+0x184>
   2d61c:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2d620:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2d624:	e15c0002 	cmp	ip, r2
   2d628:	1affffeb 	bne	2d5dc <CUartMaxiSerialDevice::InterruptHandler()+0x124>
   2d62c:	e59f20bc 	ldr	r2, [pc, #188]	; 2d6f0 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2d630:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2d634:	e3c33020 	bic	r3, r3, #32
   2d638:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d63c:	e35e0000 	cmp	lr, #0
   2d640:	0a000002 	beq	2d650 <CUartMaxiSerialDevice::InterruptHandler()+0x198>
   2d644:	e2800901 	add	r0, r0, #16384	; 0x4000
   2d648:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2d64c:	e12fff33 	blx	r3
   2d650:	e3a03000 	mov	r3, #0
   2d654:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d658:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d65c:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2d660:	e0499002 	sub	r9, r9, r2
   2d664:	e3590001 	cmp	r9, #1
   2d668:	8affffbb 	bhi	2d55c <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2d66c:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2d670:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2d674:	e2833001 	add	r3, r3, #1
   2d678:	e3520000 	cmp	r2, #0
   2d67c:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d680:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2d684:	eaffff98 	b	2d4ec <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2d688:	e3130b02 	tst	r3, #2048	; 0x800
   2d68c:	0a000006 	beq	2d6ac <CUartMaxiSerialDevice::InterruptHandler()+0x1f4>
   2d690:	e59020e8 	ldr	r2, [r0, #232]	; 0xe8
   2d694:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2d698:	e2822001 	add	r2, r2, #1
   2d69c:	e3590000 	cmp	r9, #0
   2d6a0:	e58020e8 	str	r2, [r0, #232]	; 0xe8
   2d6a4:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2d6a8:	eaffff9b 	b	2d51c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2d6ac:	e3130c01 	tst	r3, #256	; 0x100
   2d6b0:	0affff99 	beq	2d51c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2d6b4:	e59020e4 	ldr	r2, [r0, #228]	; 0xe4
   2d6b8:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2d6bc:	e2822001 	add	r2, r2, #1
   2d6c0:	e3590000 	cmp	r9, #0
   2d6c4:	e58020e4 	str	r2, [r0, #228]	; 0xe4
   2d6c8:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2d6cc:	eaffff92 	b	2d51c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2d6d0:	e2893001 	add	r3, r9, #1
   2d6d4:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2d6d8:	e1d930d1 	ldrsb	r3, [r9, #1]
   2d6dc:	e3530000 	cmp	r3, #0
   2d6e0:	03a0e001 	moveq	lr, #1
   2d6e4:	eaffffb1 	b	2d5b0 <CUartMaxiSerialDevice::InterruptHandler()+0xf8>
   2d6e8:	e58030d4 	str	r3, [r0, #212]	; 0xd4
   2d6ec:	eaffffc7 	b	2d610 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2d6f0:	20201000 	.word	0x20201000

0002d6f4 <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2d6f4:	e59f3040 	ldr	r3, [pc, #64]	; 2d73c <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2d6f8:	e3a01000 	mov	r1, #0
   2d6fc:	e5932000 	ldr	r2, [r3]
   2d700:	e2822001 	add	r2, r2, #1
   2d704:	e5832000 	str	r2, [r3]
   2d708:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2d70c:	e593201c 	ldr	r2, [r3, #28]
   2d710:	e3120001 	tst	r2, #1
   2d714:	012fff1e 	bxeq	lr
   2d718:	e5930020 	ldr	r0, [r3, #32]
   2d71c:	e1500001 	cmp	r0, r1
   2d720:	0a000000 	beq	2d728 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2d724:	eaffff63 	b	2d4b8 <CUartMaxiSerialDevice::InterruptHandler()>
   2d728:	e59f1010 	ldr	r1, [pc, #16]	; 2d740 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2d72c:	e92d4010 	push	{r4, lr}
   2d730:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2d734:	e2810f56 	add	r0, r1, #344	; 0x158
   2d738:	ebffda61 	bl	240c4 <assertion_failed>
   2d73c:	00050208 	.word	0x00050208
   2d740:	0004774c 	.word	0x0004774c

0002d744 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2d744:	e5910000 	ldr	r0, [r1]
   2d748:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d74c:	e3500000 	cmp	r0, #0
   2d750:	e1a06001 	mov	r6, r1
   2d754:	e1a07002 	mov	r7, r2
   2d758:	e1a05003 	mov	r5, r3
   2d75c:	e59d4018 	ldr	r4, [sp, #24]
   2d760:	0a00000c 	beq	2d798 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2d764:	e5943008 	ldr	r3, [r4, #8]
   2d768:	e1530005 	cmp	r3, r5
   2d76c:	0a00001d 	beq	2d7e8 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0xa4>
   2d770:	e5d23000 	ldrb	r3, [r2]
   2d774:	e3530000 	cmp	r3, #0
   2d778:	0a000006 	beq	2d798 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2d77c:	ebfff474 	bl	2a954 <operator delete[](void*)>
   2d780:	e3a03000 	mov	r3, #0
   2d784:	e5863000 	str	r3, [r6]
   2d788:	e5c73000 	strb	r3, [r7]
   2d78c:	e5843000 	str	r3, [r4]
   2d790:	e5843008 	str	r3, [r4, #8]
   2d794:	e5843004 	str	r3, [r4, #4]
   2d798:	e3550000 	cmp	r5, #0
   2d79c:	1a000007 	bne	2d7c0 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x7c>
   2d7a0:	e59d301c 	ldr	r3, [sp, #28]
   2d7a4:	e5863000 	str	r3, [r6]
   2d7a8:	e59d3020 	ldr	r3, [sp, #32]
   2d7ac:	e5c75000 	strb	r5, [r7]
   2d7b0:	e5845000 	str	r5, [r4]
   2d7b4:	e5843008 	str	r3, [r4, #8]
   2d7b8:	e5845004 	str	r5, [r4, #4]
   2d7bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d7c0:	e1a00005 	mov	r0, r5
   2d7c4:	ebfff45b 	bl	2a938 <operator new[](unsigned int)>
   2d7c8:	e3a03000 	mov	r3, #0
   2d7cc:	e3a02001 	mov	r2, #1
   2d7d0:	e5860000 	str	r0, [r6]
   2d7d4:	e5c72000 	strb	r2, [r7]
   2d7d8:	e5843000 	str	r3, [r4]
   2d7dc:	e5845008 	str	r5, [r4, #8]
   2d7e0:	e5843004 	str	r3, [r4, #4]
   2d7e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d7e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d7ec <micros>:
   2d7ec:	eaffed36 	b	28ccc <CTimer::GetClockTicks()>

0002d7f0 <millis>:
   2d7f0:	e92d4010 	push	{r4, lr}
   2d7f4:	ebffed34 	bl	28ccc <CTimer::GetClockTicks()>
   2d7f8:	e59f3008 	ldr	r3, [pc, #8]	; 2d808 <millis+0x18>
   2d7fc:	e0803093 	umull	r3, r0, r3, r0
   2d800:	e1a00320 	lsr	r0, r0, #6
   2d804:	e8bd8010 	pop	{r4, pc}
   2d808:	10624dd3 	.word	0x10624dd3

0002d80c <microsDelay>:
   2d80c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d810:	e1a06000 	mov	r6, r0
   2d814:	ebffed2c 	bl	28ccc <CTimer::GetClockTicks()>
   2d818:	e1a04000 	mov	r4, r0
   2d81c:	e1e05000 	mvn	r5, r0
   2d820:	e0867000 	add	r7, r6, r0
   2d824:	ea000004 	b	2d83c <microsDelay+0x30>
   2d828:	e1570000 	cmp	r7, r0
   2d82c:	23a00000 	movcs	r0, #0
   2d830:	33a00001 	movcc	r0, #1
   2d834:	e3500000 	cmp	r0, #0
   2d838:	1a000008 	bne	2d860 <microsDelay+0x54>
   2d83c:	ebffed22 	bl	28ccc <CTimer::GetClockTicks()>
   2d840:	e1540000 	cmp	r4, r0
   2d844:	e0853000 	add	r3, r5, r0
   2d848:	9afffff6 	bls	2d828 <microsDelay+0x1c>
   2d84c:	e1560003 	cmp	r6, r3
   2d850:	23a00000 	movcs	r0, #0
   2d854:	33a00001 	movcc	r0, #1
   2d858:	e3500000 	cmp	r0, #0
   2d85c:	0afffff6 	beq	2d83c <microsDelay+0x30>
   2d860:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d864 <isTimeout>:
   2d864:	e1500001 	cmp	r0, r1
   2d868:	2a000005 	bcs	2d884 <isTimeout+0x20>
   2d86c:	e0400001 	sub	r0, r0, r1
   2d870:	e2400001 	sub	r0, r0, #1
   2d874:	e1520000 	cmp	r2, r0
   2d878:	23a00000 	movcs	r0, #0
   2d87c:	33a00001 	movcc	r0, #1
   2d880:	e12fff1e 	bx	lr
   2d884:	e0812002 	add	r2, r1, r2
   2d888:	e1500002 	cmp	r0, r2
   2d88c:	93a00000 	movls	r0, #0
   2d890:	83a00001 	movhi	r0, #1
   2d894:	e12fff1e 	bx	lr

0002d898 <timeToTimeout>:
   2d898:	e1500001 	cmp	r0, r1
   2d89c:	3a000004 	bcc	2d8b4 <timeToTimeout+0x1c>
   2d8a0:	e0811002 	add	r1, r1, r2
   2d8a4:	e1500001 	cmp	r0, r1
   2d8a8:	9a000008 	bls	2d8d0 <timeToTimeout+0x38>
   2d8ac:	e3a00000 	mov	r0, #0
   2d8b0:	e12fff1e 	bx	lr
   2d8b4:	e0411000 	sub	r1, r1, r0
   2d8b8:	e1e03001 	mvn	r3, r1
   2d8bc:	e1520003 	cmp	r2, r3
   2d8c0:	3afffff9 	bcc	2d8ac <timeToTimeout+0x14>
   2d8c4:	e2820001 	add	r0, r2, #1
   2d8c8:	e0800001 	add	r0, r0, r1
   2d8cc:	e12fff1e 	bx	lr
   2d8d0:	e0410000 	sub	r0, r1, r0
   2d8d4:	e12fff1e 	bx	lr

0002d8d8 <strlcpy>:
   2d8d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d8dc:	e1a07000 	mov	r7, r0
   2d8e0:	e1a00001 	mov	r0, r1
   2d8e4:	e1a04002 	mov	r4, r2
   2d8e8:	e1a06001 	mov	r6, r1
   2d8ec:	ebfff012 	bl	2993c <strlen>
   2d8f0:	e2802001 	add	r2, r0, #1
   2d8f4:	e1520004 	cmp	r2, r4
   2d8f8:	e1a05000 	mov	r5, r0
   2d8fc:	3a00000c 	bcc	2d934 <strlcpy+0x5c>
   2d900:	e3540000 	cmp	r4, #0
   2d904:	1a000001 	bne	2d910 <strlcpy+0x38>
   2d908:	e1a00005 	mov	r0, r5
   2d90c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d910:	e2444001 	sub	r4, r4, #1
   2d914:	e1a01006 	mov	r1, r6
   2d918:	e1a02004 	mov	r2, r4
   2d91c:	e1a00007 	mov	r0, r7
   2d920:	ebfff22a 	bl	2a1d0 <memcpy>
   2d924:	e3a03000 	mov	r3, #0
   2d928:	e1a00005 	mov	r0, r5
   2d92c:	e7c73004 	strb	r3, [r7, r4]
   2d930:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d934:	e1a01006 	mov	r1, r6
   2d938:	e1a00007 	mov	r0, r7
   2d93c:	ebfff223 	bl	2a1d0 <memcpy>
   2d940:	e1a00005 	mov	r0, r5
   2d944:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d948 <strlcat>:
   2d948:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d94c:	e1a05002 	mov	r5, r2
   2d950:	e1a08000 	mov	r8, r0
   2d954:	e1a00001 	mov	r0, r1
   2d958:	e1a06001 	mov	r6, r1
   2d95c:	ebffeff6 	bl	2993c <strlen>
   2d960:	e3550000 	cmp	r5, #0
   2d964:	e1a07000 	mov	r7, r0
   2d968:	0a000021 	beq	2d9f4 <strlcat+0xac>
   2d96c:	e1d800d0 	ldrsb	r0, [r8]
   2d970:	e3500000 	cmp	r0, #0
   2d974:	11a03008 	movne	r3, r8
   2d978:	13a04000 	movne	r4, #0
   2d97c:	1a000003 	bne	2d990 <strlcat+0x48>
   2d980:	ea000007 	b	2d9a4 <strlcat+0x5c>
   2d984:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
   2d988:	e35c0000 	cmp	ip, #0
   2d98c:	0a000005 	beq	2d9a8 <strlcat+0x60>
   2d990:	e2844001 	add	r4, r4, #1
   2d994:	e1550004 	cmp	r5, r4
   2d998:	1afffff9 	bne	2d984 <strlcat+0x3c>
   2d99c:	e0870004 	add	r0, r7, r4
   2d9a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d9a4:	e1a04000 	mov	r4, r0
   2d9a8:	e0453004 	sub	r3, r5, r4
   2d9ac:	e1570003 	cmp	r7, r3
   2d9b0:	2a000005 	bcs	2d9cc <strlcat+0x84>
   2d9b4:	e1a01006 	mov	r1, r6
   2d9b8:	e0880004 	add	r0, r8, r4
   2d9bc:	e2872001 	add	r2, r7, #1
   2d9c0:	ebfff202 	bl	2a1d0 <memcpy>
   2d9c4:	e0870004 	add	r0, r7, r4
   2d9c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d9cc:	e2455001 	sub	r5, r5, #1
   2d9d0:	e1a02005 	mov	r2, r5
   2d9d4:	e1a01006 	mov	r1, r6
   2d9d8:	e0880004 	add	r0, r8, r4
   2d9dc:	ebfff1fb 	bl	2a1d0 <memcpy>
   2d9e0:	e3a03000 	mov	r3, #0
   2d9e4:	e0885005 	add	r5, r8, r5
   2d9e8:	e7c53004 	strb	r3, [r5, r4]
   2d9ec:	e0870004 	add	r0, r7, r4
   2d9f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d9f4:	e1a04005 	mov	r4, r5
   2d9f8:	eaffffe7 	b	2d99c <strlcat+0x54>

0002d9fc <strnlen>:
   2d9fc:	e3510000 	cmp	r1, #0
   2da00:	0a00000c 	beq	2da38 <strnlen+0x3c>
   2da04:	e1d030d0 	ldrsb	r3, [r0]
   2da08:	e3530000 	cmp	r3, #0
   2da0c:	0a00000b 	beq	2da40 <strnlen+0x44>
   2da10:	e1a03000 	mov	r3, r0
   2da14:	e3a00000 	mov	r0, #0
   2da18:	ea000002 	b	2da28 <strnlen+0x2c>
   2da1c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2da20:	e3520000 	cmp	r2, #0
   2da24:	012fff1e 	bxeq	lr
   2da28:	e2800001 	add	r0, r0, #1
   2da2c:	e1510000 	cmp	r1, r0
   2da30:	1afffff9 	bne	2da1c <strnlen+0x20>
   2da34:	e12fff1e 	bx	lr
   2da38:	e1a00001 	mov	r0, r1
   2da3c:	e12fff1e 	bx	lr
   2da40:	e1a00003 	mov	r0, r3
   2da44:	e12fff1e 	bx	lr

0002da48 <sprintf>:
   2da48:	e92d000e 	push	{r1, r2, r3}
   2da4c:	e92d4010 	push	{r4, lr}
   2da50:	e24dd01c 	sub	sp, sp, #28
   2da54:	e28d3028 	add	r3, sp, #40	; 0x28
   2da58:	e1a04000 	mov	r4, r0
   2da5c:	e28d0008 	add	r0, sp, #8
   2da60:	e58d3004 	str	r3, [sp, #4]
   2da64:	ebffe66e 	bl	27424 <CString::CString()>
   2da68:	e59d2004 	ldr	r2, [sp, #4]
   2da6c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2da70:	e28d0008 	add	r0, sp, #8
   2da74:	ebffe885 	bl	27c90 <CString::FormatV(char const*, std::__va_list)>
   2da78:	e28d0008 	add	r0, sp, #8
   2da7c:	ebffe67e 	bl	2747c <CString::operator char const*() const>
   2da80:	e1a01000 	mov	r1, r0
   2da84:	e1a00004 	mov	r0, r4
   2da88:	ebfff069 	bl	29c34 <strcpy>
   2da8c:	e28d0008 	add	r0, sp, #8
   2da90:	ebffe6a7 	bl	27534 <CString::GetLength() const>
   2da94:	e1a04000 	mov	r4, r0
   2da98:	e28d0008 	add	r0, sp, #8
   2da9c:	ebffe62d 	bl	27358 <CString::~CString()>
   2daa0:	e1a00004 	mov	r0, r4
   2daa4:	e28dd01c 	add	sp, sp, #28
   2daa8:	e8bd4010 	pop	{r4, lr}
   2daac:	e28dd00c 	add	sp, sp, #12
   2dab0:	e12fff1e 	bx	lr

0002dab4 <snprintf>:
   2dab4:	e92d000c 	push	{r2, r3}
   2dab8:	e92d4030 	push	{r4, r5, lr}
   2dabc:	e24dd01c 	sub	sp, sp, #28
   2dac0:	e28d302c 	add	r3, sp, #44	; 0x2c
   2dac4:	e1a05000 	mov	r5, r0
   2dac8:	e28d0008 	add	r0, sp, #8
   2dacc:	e58d3004 	str	r3, [sp, #4]
   2dad0:	e1a04001 	mov	r4, r1
   2dad4:	ebffe652 	bl	27424 <CString::CString()>
   2dad8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2dadc:	e59d2004 	ldr	r2, [sp, #4]
   2dae0:	e28d0008 	add	r0, sp, #8
   2dae4:	ebffe869 	bl	27c90 <CString::FormatV(char const*, std::__va_list)>
   2dae8:	e28d0008 	add	r0, sp, #8
   2daec:	ebffe690 	bl	27534 <CString::GetLength() const>
   2daf0:	e2444001 	sub	r4, r4, #1
   2daf4:	e1540000 	cmp	r4, r0
   2daf8:	21a04000 	movcs	r4, r0
   2dafc:	e28d0008 	add	r0, sp, #8
   2db00:	ebffe65d 	bl	2747c <CString::operator char const*() const>
   2db04:	e1a02004 	mov	r2, r4
   2db08:	e1a01000 	mov	r1, r0
   2db0c:	e1a00005 	mov	r0, r5
   2db10:	ebfff1ae 	bl	2a1d0 <memcpy>
   2db14:	e3a03000 	mov	r3, #0
   2db18:	e28d0008 	add	r0, sp, #8
   2db1c:	e7c53004 	strb	r3, [r5, r4]
   2db20:	ebffe60c 	bl	27358 <CString::~CString()>
   2db24:	e1a00004 	mov	r0, r4
   2db28:	e28dd01c 	add	sp, sp, #28
   2db2c:	e8bd4030 	pop	{r4, r5, lr}
   2db30:	e28dd008 	add	sp, sp, #8
   2db34:	e12fff1e 	bx	lr

0002db38 <vsnprintf>:
   2db38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2db3c:	e1a07003 	mov	r7, r3
   2db40:	e1a06002 	mov	r6, r2
   2db44:	e24dd014 	sub	sp, sp, #20
   2db48:	e1a05000 	mov	r5, r0
   2db4c:	e1a0000d 	mov	r0, sp
   2db50:	e1a04001 	mov	r4, r1
   2db54:	ebffe632 	bl	27424 <CString::CString()>
   2db58:	e1a02007 	mov	r2, r7
   2db5c:	e1a01006 	mov	r1, r6
   2db60:	e1a0000d 	mov	r0, sp
   2db64:	ebffe849 	bl	27c90 <CString::FormatV(char const*, std::__va_list)>
   2db68:	e1a0000d 	mov	r0, sp
   2db6c:	ebffe670 	bl	27534 <CString::GetLength() const>
   2db70:	e2444001 	sub	r4, r4, #1
   2db74:	e1540000 	cmp	r4, r0
   2db78:	21a04000 	movcs	r4, r0
   2db7c:	e1a0000d 	mov	r0, sp
   2db80:	ebffe63d 	bl	2747c <CString::operator char const*() const>
   2db84:	e1a02004 	mov	r2, r4
   2db88:	e1a01000 	mov	r1, r0
   2db8c:	e1a00005 	mov	r0, r5
   2db90:	ebfff18e 	bl	2a1d0 <memcpy>
   2db94:	e3a03000 	mov	r3, #0
   2db98:	e1a0000d 	mov	r0, sp
   2db9c:	e7c53004 	strb	r3, [r5, r4]
   2dba0:	ebffe5ec 	bl	27358 <CString::~CString()>
   2dba4:	e1a00004 	mov	r0, r4
   2dba8:	e28dd014 	add	sp, sp, #20
   2dbac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002dbb0 <jsonGetValueForKey>:
   2dbb0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dbb4:	e1a08001 	mov	r8, r1
   2dbb8:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2dbbc:	e24dd018 	sub	sp, sp, #24
   2dbc0:	e1a07000 	mov	r7, r0
   2dbc4:	e28d000c 	add	r0, sp, #12
   2dbc8:	e1a09002 	mov	r9, r2
   2dbcc:	e1a0a003 	mov	sl, r3
   2dbd0:	eb000139 	bl	2e0bc <JSMNR_init>
   2dbd4:	e1a00008 	mov	r0, r8
   2dbd8:	ebffef57 	bl	2993c <strlen>
   2dbdc:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2dbe0:	e1a02000 	mov	r2, r0
   2dbe4:	e28d3018 	add	r3, sp, #24
   2dbe8:	e28d000c 	add	r0, sp, #12
   2dbec:	e1a01008 	mov	r1, r8
   2dbf0:	e58dc000 	str	ip, [sp]
   2dbf4:	eb00014c 	bl	2e12c <JSMNR_parse>
   2dbf8:	e2506000 	subs	r6, r0, #0
   2dbfc:	c28d4018 	addgt	r4, sp, #24
   2dc00:	c3a05000 	movgt	r5, #0
   2dc04:	ca000003 	bgt	2dc18 <jsonGetValueForKey+0x68>
   2dc08:	ea00001d 	b	2dc84 <jsonGetValueForKey+0xd4>
   2dc0c:	e1560005 	cmp	r6, r5
   2dc10:	e2844010 	add	r4, r4, #16
   2dc14:	0a00001a 	beq	2dc84 <jsonGetValueForKey+0xd4>
   2dc18:	e5d43000 	ldrb	r3, [r4]
   2dc1c:	e2855001 	add	r5, r5, #1
   2dc20:	e3530003 	cmp	r3, #3
   2dc24:	1afffff8 	bne	2dc0c <jsonGetValueForKey+0x5c>
   2dc28:	e1a00007 	mov	r0, r7
   2dc2c:	ebffef42 	bl	2993c <strlen>
   2dc30:	e994000a 	ldmib	r4, {r1, r3}
   2dc34:	e0433001 	sub	r3, r3, r1
   2dc38:	e1500003 	cmp	r0, r3
   2dc3c:	1afffff2 	bne	2dc0c <jsonGetValueForKey+0x5c>
   2dc40:	e1a02000 	mov	r2, r0
   2dc44:	e0880001 	add	r0, r8, r1
   2dc48:	e1a01007 	mov	r1, r7
   2dc4c:	ebffef93 	bl	29aa0 <strncmp>
   2dc50:	e3500000 	cmp	r0, #0
   2dc54:	1affffec 	bne	2dc0c <jsonGetValueForKey+0x5c>
   2dc58:	e5941014 	ldr	r1, [r4, #20]
   2dc5c:	e5942018 	ldr	r2, [r4, #24]
   2dc60:	e0422001 	sub	r2, r2, r1
   2dc64:	e152000a 	cmp	r2, sl
   2dc68:	aa000005 	bge	2dc84 <jsonGetValueForKey+0xd4>
   2dc6c:	e2822001 	add	r2, r2, #1
   2dc70:	e0881001 	add	r1, r8, r1
   2dc74:	e1a00009 	mov	r0, r9
   2dc78:	ebffff16 	bl	2d8d8 <strlcpy>
   2dc7c:	e3a00001 	mov	r0, #1
   2dc80:	ea000000 	b	2dc88 <jsonGetValueForKey+0xd8>
   2dc84:	e3a00000 	mov	r0, #0
   2dc88:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2dc8c:	e28dd018 	add	sp, sp, #24
   2dc90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002dc94 <jsonGetArrayLen>:
   2dc94:	e92d4010 	push	{r4, lr}
   2dc98:	e1a04000 	mov	r4, r0
   2dc9c:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2dca0:	e24dd018 	sub	sp, sp, #24
   2dca4:	e28d000c 	add	r0, sp, #12
   2dca8:	eb000103 	bl	2e0bc <JSMNR_init>
   2dcac:	e1a00004 	mov	r0, r4
   2dcb0:	ebffef21 	bl	2993c <strlen>
   2dcb4:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2dcb8:	e1a02000 	mov	r2, r0
   2dcbc:	e28d3018 	add	r3, sp, #24
   2dcc0:	e28d000c 	add	r0, sp, #12
   2dcc4:	e1a01004 	mov	r1, r4
   2dcc8:	e58dc000 	str	ip, [sp]
   2dccc:	eb000116 	bl	2e12c <JSMNR_parse>
   2dcd0:	e3500000 	cmp	r0, #0
   2dcd4:	b3a00000 	movlt	r0, #0
   2dcd8:	ba000004 	blt	2dcf0 <jsonGetArrayLen+0x5c>
   2dcdc:	0a000006 	beq	2dcfc <jsonGetArrayLen+0x68>
   2dce0:	e5dd3018 	ldrb	r3, [sp, #24]
   2dce4:	e3530002 	cmp	r3, #2
   2dce8:	1a000003 	bne	2dcfc <jsonGetArrayLen+0x68>
   2dcec:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2dcf0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2dcf4:	e28dd018 	add	sp, sp, #24
   2dcf8:	e8bd8010 	pop	{r4, pc}
   2dcfc:	e3e00000 	mvn	r0, #0
   2dd00:	eafffffa 	b	2dcf0 <jsonGetArrayLen+0x5c>

0002dd04 <jsonGetArrayElem>:
   2dd04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2dd08:	e1a06002 	mov	r6, r2
   2dd0c:	e1a04001 	mov	r4, r1
   2dd10:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2dd14:	e24dd01c 	sub	sp, sp, #28
   2dd18:	e1a02003 	mov	r2, r3
   2dd1c:	e59f1134 	ldr	r1, [pc, #308]	; 2de58 <jsonGetArrayElem+0x154>
   2dd20:	e1a07000 	mov	r7, r0
   2dd24:	e1a00006 	mov	r0, r6
   2dd28:	e1a05003 	mov	r5, r3
   2dd2c:	ebfffee9 	bl	2d8d8 <strlcpy>
   2dd30:	e28d000c 	add	r0, sp, #12
   2dd34:	eb0000e0 	bl	2e0bc <JSMNR_init>
   2dd38:	e1a00004 	mov	r0, r4
   2dd3c:	ebffeefe 	bl	2993c <strlen>
   2dd40:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2dd44:	e1a02000 	mov	r2, r0
   2dd48:	e28d3018 	add	r3, sp, #24
   2dd4c:	e28d000c 	add	r0, sp, #12
   2dd50:	e1a01004 	mov	r1, r4
   2dd54:	e58dc000 	str	ip, [sp]
   2dd58:	eb0000f3 	bl	2e12c <JSMNR_parse>
   2dd5c:	e3500000 	cmp	r0, #0
   2dd60:	da000002 	ble	2dd70 <jsonGetArrayElem+0x6c>
   2dd64:	e5dd3018 	ldrb	r3, [sp, #24]
   2dd68:	e3530002 	cmp	r3, #2
   2dd6c:	0a000003 	beq	2dd80 <jsonGetArrayElem+0x7c>
   2dd70:	e3a00000 	mov	r0, #0
   2dd74:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2dd78:	e28dd01c 	add	sp, sp, #28
   2dd7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2dd80:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2dd84:	e1530007 	cmp	r3, r7
   2dd88:	dafffff8 	ble	2dd70 <jsonGetArrayElem+0x6c>
   2dd8c:	e3570000 	cmp	r7, #0
   2dd90:	0a00002b 	beq	2de44 <jsonGetArrayElem+0x140>
   2dd94:	e3a0e000 	mov	lr, #0
   2dd98:	e3a02001 	mov	r2, #1
   2dd9c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2dda0:	e1500002 	cmp	r0, r2
   2dda4:	dafffff1 	ble	2dd70 <jsonGetArrayElem+0x6c>
   2dda8:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2ddac:	e1a03202 	lsl	r3, r2, #4
   2ddb0:	e2811008 	add	r1, r1, #8
   2ddb4:	e0811003 	add	r1, r1, r3
   2ddb8:	e5111f3c 	ldr	r1, [r1, #-3900]	; 0xfffff0c4
   2ddbc:	e151000c 	cmp	r1, ip
   2ddc0:	d28d1018 	addle	r1, sp, #24
   2ddc4:	d0813003 	addle	r3, r1, r3
   2ddc8:	da000003 	ble	2dddc <jsonGetArrayElem+0xd8>
   2ddcc:	ea00000c 	b	2de04 <jsonGetArrayElem+0x100>
   2ddd0:	e5931004 	ldr	r1, [r3, #4]
   2ddd4:	e151000c 	cmp	r1, ip
   2ddd8:	ca000004 	bgt	2ddf0 <jsonGetArrayElem+0xec>
   2dddc:	e2822001 	add	r2, r2, #1
   2dde0:	e1500002 	cmp	r0, r2
   2dde4:	e2833010 	add	r3, r3, #16
   2dde8:	1afffff8 	bne	2ddd0 <jsonGetArrayElem+0xcc>
   2ddec:	eaffffdf 	b	2dd70 <jsonGetArrayElem+0x6c>
   2ddf0:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2ddf4:	e1a03202 	lsl	r3, r2, #4
   2ddf8:	e2811008 	add	r1, r1, #8
   2ddfc:	e0811003 	add	r1, r1, r3
   2de00:	e511cf38 	ldr	ip, [r1, #-3896]	; 0xfffff0c8
   2de04:	e28ee001 	add	lr, lr, #1
   2de08:	e157000e 	cmp	r7, lr
   2de0c:	1affffe3 	bne	2dda0 <jsonGetArrayElem+0x9c>
   2de10:	e28d2ef5 	add	r2, sp, #3920	; 0xf50
   2de14:	e2822008 	add	r2, r2, #8
   2de18:	e0823003 	add	r3, r2, r3
   2de1c:	e5131f3c 	ldr	r1, [r3, #-3900]	; 0xfffff0c4
   2de20:	e1a00006 	mov	r0, r6
   2de24:	e04c2001 	sub	r2, ip, r1
   2de28:	e2822001 	add	r2, r2, #1
   2de2c:	e1520005 	cmp	r2, r5
   2de30:	a1a02005 	movge	r2, r5
   2de34:	e0841001 	add	r1, r4, r1
   2de38:	ebfffea6 	bl	2d8d8 <strlcpy>
   2de3c:	e3a00001 	mov	r0, #1
   2de40:	eaffffcb 	b	2dd74 <jsonGetArrayElem+0x70>
   2de44:	e3500001 	cmp	r0, #1
   2de48:	daffffc8 	ble	2dd70 <jsonGetArrayElem+0x6c>
   2de4c:	e3a03010 	mov	r3, #16
   2de50:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2de54:	eaffffed 	b	2de10 <jsonGetArrayElem+0x10c>
   2de58:	00049280 	.word	0x00049280

0002de5c <jsonEscape>:
   2de5c:	e1d030d0 	ldrsb	r3, [r0]
   2de60:	e92d4070 	push	{r4, r5, r6, lr}
   2de64:	e3530000 	cmp	r3, #0
   2de68:	0a00002d 	beq	2df24 <jsonEscape+0xc8>
   2de6c:	e3520002 	cmp	r2, #2
   2de70:	da00002b 	ble	2df24 <jsonEscape+0xc8>
   2de74:	e3a0c002 	mov	ip, #2
   2de78:	e3a0e000 	mov	lr, #0
   2de7c:	e3a0505c 	mov	r5, #92	; 0x5c
   2de80:	e3a0606e 	mov	r6, #110	; 0x6e
   2de84:	ea000011 	b	2ded0 <jsonEscape+0x74>
   2de88:	e353005c 	cmp	r3, #92	; 0x5c
   2de8c:	0a00001e 	beq	2df0c <jsonEscape+0xb0>
   2de90:	e353000a 	cmp	r3, #10
   2de94:	15c13000 	strbne	r3, [r1]
   2de98:	128ee001 	addne	lr, lr, #1
   2de9c:	12811001 	addne	r1, r1, #1
   2dea0:	1a000004 	bne	2deb8 <jsonEscape+0x5c>
   2dea4:	e1a03001 	mov	r3, r1
   2dea8:	e4c35002 	strb	r5, [r3], #2
   2deac:	e1a0e00c 	mov	lr, ip
   2deb0:	e5c16001 	strb	r6, [r1, #1]
   2deb4:	e1a01003 	mov	r1, r3
   2deb8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2debc:	e28ec002 	add	ip, lr, #2
   2dec0:	e3530000 	cmp	r3, #0
   2dec4:	0a00000c 	beq	2defc <jsonEscape+0xa0>
   2dec8:	e15c0002 	cmp	ip, r2
   2decc:	aa00000a 	bge	2defc <jsonEscape+0xa0>
   2ded0:	e3530022 	cmp	r3, #34	; 0x22
   2ded4:	1affffeb 	bne	2de88 <jsonEscape+0x2c>
   2ded8:	e1a04001 	mov	r4, r1
   2dedc:	e1a0e00c 	mov	lr, ip
   2dee0:	e4c45002 	strb	r5, [r4], #2
   2dee4:	e5c13001 	strb	r3, [r1, #1]
   2dee8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2deec:	e1a01004 	mov	r1, r4
   2def0:	e3530000 	cmp	r3, #0
   2def4:	e28ec002 	add	ip, lr, #2
   2def8:	1afffff2 	bne	2dec8 <jsonEscape+0x6c>
   2defc:	e152000e 	cmp	r2, lr
   2df00:	c3a03000 	movgt	r3, #0
   2df04:	c5c13000 	strbgt	r3, [r1]
   2df08:	e8bd8070 	pop	{r4, r5, r6, pc}
   2df0c:	e1a04001 	mov	r4, r1
   2df10:	e4c43002 	strb	r3, [r4], #2
   2df14:	e1a0e00c 	mov	lr, ip
   2df18:	e5c13001 	strb	r3, [r1, #1]
   2df1c:	e1a01004 	mov	r1, r4
   2df20:	eaffffe4 	b	2deb8 <jsonEscape+0x5c>
   2df24:	e3a0e000 	mov	lr, #0
   2df28:	eafffff3 	b	2defc <jsonEscape+0xa0>

0002df2c <rdisspace>:
   2df2c:	e3500020 	cmp	r0, #32
   2df30:	0a000004 	beq	2df48 <rdisspace+0x1c>
   2df34:	e2400009 	sub	r0, r0, #9
   2df38:	e3500004 	cmp	r0, #4
   2df3c:	83a00000 	movhi	r0, #0
   2df40:	93a00001 	movls	r0, #1
   2df44:	e12fff1e 	bx	lr
   2df48:	e3a00001 	mov	r0, #1
   2df4c:	e12fff1e 	bx	lr

0002df50 <rdisdigit>:
   2df50:	e2400030 	sub	r0, r0, #48	; 0x30
   2df54:	e3500009 	cmp	r0, #9
   2df58:	83a00000 	movhi	r0, #0
   2df5c:	93a00001 	movls	r0, #1
   2df60:	e12fff1e 	bx	lr

0002df64 <rdisupper>:
   2df64:	e2400041 	sub	r0, r0, #65	; 0x41
   2df68:	e3500019 	cmp	r0, #25
   2df6c:	83a00000 	movhi	r0, #0
   2df70:	93a00001 	movls	r0, #1
   2df74:	e12fff1e 	bx	lr

0002df78 <rdislower>:
   2df78:	e2400061 	sub	r0, r0, #97	; 0x61
   2df7c:	e3500019 	cmp	r0, #25
   2df80:	83a00000 	movhi	r0, #0
   2df84:	93a00001 	movls	r0, #1
   2df88:	e12fff1e 	bx	lr

0002df8c <rdtolower>:
   2df8c:	e6ef3070 	uxtb	r3, r0
   2df90:	e2432041 	sub	r2, r3, #65	; 0x41
   2df94:	e3520019 	cmp	r2, #25
   2df98:	92833020 	addls	r3, r3, #32
   2df9c:	96af0073 	sxtbls	r0, r3
   2dfa0:	e12fff1e 	bx	lr

0002dfa4 <rdtoupper>:
   2dfa4:	e6ef3070 	uxtb	r3, r0
   2dfa8:	e2432061 	sub	r2, r3, #97	; 0x61
   2dfac:	e3520019 	cmp	r2, #25
   2dfb0:	92433020 	subls	r3, r3, #32
   2dfb4:	96af0073 	sxtbls	r0, r3
   2dfb8:	e12fff1e 	bx	lr

0002dfbc <rdisalpha>:
   2dfbc:	e3c00020 	bic	r0, r0, #32
   2dfc0:	e2400041 	sub	r0, r0, #65	; 0x41
   2dfc4:	e3500019 	cmp	r0, #25
   2dfc8:	83a00000 	movhi	r0, #0
   2dfcc:	93a00001 	movls	r0, #1
   2dfd0:	e12fff1e 	bx	lr

0002dfd4 <rdstrrev>:
   2dfd4:	e92d4010 	push	{r4, lr}
   2dfd8:	e1a04000 	mov	r4, r0
   2dfdc:	ebffee56 	bl	2993c <strlen>
   2dfe0:	e2402001 	sub	r2, r0, #1
   2dfe4:	e3520000 	cmp	r2, #0
   2dfe8:	d8bd8010 	pople	{r4, pc}
   2dfec:	e3a01000 	mov	r1, #0
   2dff0:	e0840000 	add	r0, r4, r0
   2dff4:	e2443001 	sub	r3, r4, #1
   2dff8:	e5d3c001 	ldrb	ip, [r3, #1]
   2dffc:	e550e001 	ldrb	lr, [r0, #-1]
   2e000:	e2811001 	add	r1, r1, #1
   2e004:	e2422001 	sub	r2, r2, #1
   2e008:	e1510002 	cmp	r1, r2
   2e00c:	e5e3e001 	strb	lr, [r3, #1]!
   2e010:	e560c001 	strb	ip, [r0, #-1]!
   2e014:	bafffff7 	blt	2dff8 <rdstrrev+0x24>
   2e018:	e8bd8010 	pop	{r4, pc}

0002e01c <rditoa>:
   2e01c:	e3520000 	cmp	r2, #0
   2e020:	0a000023 	beq	2e0b4 <rditoa+0x98>
   2e024:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e028:	e1a04000 	mov	r4, r0
   2e02c:	e1a09001 	mov	r9, r1
   2e030:	e1a07003 	mov	r7, r3
   2e034:	e1a06001 	mov	r6, r1
   2e038:	e3a05001 	mov	r5, #1
   2e03c:	e2428001 	sub	r8, r2, #1
   2e040:	ea000003 	b	2e054 <rditoa+0x38>
   2e044:	e15a0008 	cmp	sl, r8
   2e048:	e2855001 	add	r5, r5, #1
   2e04c:	e2866001 	add	r6, r6, #1
   2e050:	aa000014 	bge	2e0a8 <rditoa+0x8c>
   2e054:	e1a00004 	mov	r0, r4
   2e058:	e1a01007 	mov	r1, r7
   2e05c:	eb0046de 	bl	3fbdc <__aeabi_idivmod>
   2e060:	e3510009 	cmp	r1, #9
   2e064:	e2813030 	add	r3, r1, #48	; 0x30
   2e068:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e06c:	c5c61000 	strbgt	r1, [r6]
   2e070:	d5c63000 	strble	r3, [r6]
   2e074:	e1a00004 	mov	r0, r4
   2e078:	e1a01007 	mov	r1, r7
   2e07c:	d1a0a005 	movle	sl, r5
   2e080:	c1a0a005 	movgt	sl, r5
   2e084:	eb00468a 	bl	3fab4 <__aeabi_idiv>
   2e088:	e2504000 	subs	r4, r0, #0
   2e08c:	1affffec 	bne	2e044 <rditoa+0x28>
   2e090:	e3a04000 	mov	r4, #0
   2e094:	e1a00009 	mov	r0, r9
   2e098:	e7c9400a 	strb	r4, [r9, sl]
   2e09c:	ebffffcc 	bl	2dfd4 <rdstrrev>
   2e0a0:	e1a00004 	mov	r0, r4
   2e0a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e0a8:	1afffff8 	bne	2e090 <rditoa+0x74>
   2e0ac:	e3e00000 	mvn	r0, #0
   2e0b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e0b4:	e3e00000 	mvn	r0, #0
   2e0b8:	e12fff1e 	bx	lr

0002e0bc <JSMNR_init>:
   2e0bc:	e3a03000 	mov	r3, #0
   2e0c0:	e3e02000 	mvn	r2, #0
   2e0c4:	e5803000 	str	r3, [r0]
   2e0c8:	e5802008 	str	r2, [r0, #8]
   2e0cc:	e5803004 	str	r3, [r0, #4]
   2e0d0:	e12fff1e 	bx	lr

0002e0d4 <JSMNR_logLongStr>:
   2e0d4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e0d8:	e3a04000 	mov	r4, #0
   2e0dc:	e28db01c 	add	fp, sp, #28
   2e0e0:	e1a05001 	mov	r5, r1
   2e0e4:	e1a08004 	mov	r8, r4
   2e0e8:	e3a07051 	mov	r7, #81	; 0x51
   2e0ec:	ea000007 	b	2e110 <JSMNR_logLongStr+0x3c>
   2e0f0:	e1a0600d 	mov	r6, sp
   2e0f4:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e0f8:	e1a0000d 	mov	r0, sp
   2e0fc:	e1a02007 	mov	r2, r7
   2e100:	ebfffdf4 	bl	2d8d8 <strlcpy>
   2e104:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
   2e108:	e1a0d006 	mov	sp, r6
   2e10c:	e2844050 	add	r4, r4, #80	; 0x50
   2e110:	e1a00005 	mov	r0, r5
   2e114:	ebffee08 	bl	2993c <strlen>
   2e118:	e1540000 	cmp	r4, r0
   2e11c:	e0851004 	add	r1, r5, r4
   2e120:	3afffff2 	bcc	2e0f0 <JSMNR_logLongStr+0x1c>
   2e124:	e24bd01c 	sub	sp, fp, #28
   2e128:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e12c <JSMNR_parse>:
   2e12c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e130:	e590e000 	ldr	lr, [r0]
   2e134:	e5905004 	ldr	r5, [r0, #4]
   2e138:	e152000e 	cmp	r2, lr
   2e13c:	9a0000b7 	bls	2e420 <JSMNR_parse+0x2f4>
   2e140:	e191c0de 	ldrsb	ip, [r1, lr]
   2e144:	e35c0000 	cmp	ip, #0
   2e148:	0a0000b4 	beq	2e420 <JSMNR_parse+0x2f4>
   2e14c:	e3a0b000 	mov	fp, #0
   2e150:	ea00000e 	b	2e190 <JSMNR_parse+0x64>
   2e154:	e35c005d 	cmp	ip, #93	; 0x5d
   2e158:	0a0000c7 	beq	2e47c <JSMNR_parse+0x350>
   2e15c:	ca0000c2 	bgt	2e46c <JSMNR_parse+0x340>
   2e160:	e35c003a 	cmp	ip, #58	; 0x3a
   2e164:	1a0000dd 	bne	2e4e0 <JSMNR_parse+0x3b4>
   2e168:	e8905000 	ldm	r0, {ip, lr}
   2e16c:	e24ee001 	sub	lr, lr, #1
   2e170:	e580e008 	str	lr, [r0, #8]
   2e174:	e28ce001 	add	lr, ip, #1
   2e178:	e152000e 	cmp	r2, lr
   2e17c:	e580e000 	str	lr, [r0]
   2e180:	9a0000a6 	bls	2e420 <JSMNR_parse+0x2f4>
   2e184:	e191c0de 	ldrsb	ip, [r1, lr]
   2e188:	e35c0000 	cmp	ip, #0
   2e18c:	0a0000a3 	beq	2e420 <JSMNR_parse+0x2f4>
   2e190:	e35c002c 	cmp	ip, #44	; 0x2c
   2e194:	0a0000ef 	beq	2e558 <JSMNR_parse+0x42c>
   2e198:	caffffed 	bgt	2e154 <JSMNR_parse+0x28>
   2e19c:	e35c000d 	cmp	ip, #13
   2e1a0:	0a000099 	beq	2e40c <JSMNR_parse+0x2e0>
   2e1a4:	da00010a 	ble	2e5d4 <JSMNR_parse+0x4a8>
   2e1a8:	e35c0020 	cmp	ip, #32
   2e1ac:	0a000096 	beq	2e40c <JSMNR_parse+0x2e0>
   2e1b0:	e35c0022 	cmp	ip, #34	; 0x22
   2e1b4:	1a000109 	bne	2e5e0 <JSMNR_parse+0x4b4>
   2e1b8:	e28e7001 	add	r7, lr, #1
   2e1bc:	e1520007 	cmp	r2, r7
   2e1c0:	e5807000 	str	r7, [r0]
   2e1c4:	e1a0c007 	mov	ip, r7
   2e1c8:	9a000085 	bls	2e3e4 <JSMNR_parse+0x2b8>
   2e1cc:	e19140d7 	ldrsb	r4, [r1, r7]
   2e1d0:	e3540000 	cmp	r4, #0
   2e1d4:	1a000008 	bne	2e1fc <JSMNR_parse+0xd0>
   2e1d8:	ea000081 	b	2e3e4 <JSMNR_parse+0x2b8>
   2e1dc:	e5904000 	ldr	r4, [r0]
   2e1e0:	e284c001 	add	ip, r4, #1
   2e1e4:	e152000c 	cmp	r2, ip
   2e1e8:	e580c000 	str	ip, [r0]
   2e1ec:	9a00007c 	bls	2e3e4 <JSMNR_parse+0x2b8>
   2e1f0:	e19140dc 	ldrsb	r4, [r1, ip]
   2e1f4:	e3540000 	cmp	r4, #0
   2e1f8:	0a000079 	beq	2e3e4 <JSMNR_parse+0x2b8>
   2e1fc:	e3540022 	cmp	r4, #34	; 0x22
   2e200:	0a00014f 	beq	2e744 <JSMNR_parse+0x618>
   2e204:	e354005c 	cmp	r4, #92	; 0x5c
   2e208:	1afffff3 	bne	2e1dc <JSMNR_parse+0xb0>
   2e20c:	e28c4001 	add	r4, ip, #1
   2e210:	e1520004 	cmp	r2, r4
   2e214:	9afffff0 	bls	2e1dc <JSMNR_parse+0xb0>
   2e218:	e5804000 	str	r4, [r0]
   2e21c:	e19160d4 	ldrsb	r6, [r1, r4]
   2e220:	e0819004 	add	r9, r1, r4
   2e224:	e2466022 	sub	r6, r6, #34	; 0x22
   2e228:	e3560053 	cmp	r6, #83	; 0x53
   2e22c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   2e230:	ea00006f 	b	2e3f4 <JSMNR_parse+0x2c8>
   2e234:	0002e1e0 	.word	0x0002e1e0
   2e238:	0002e3f4 	.word	0x0002e3f4
   2e23c:	0002e3f4 	.word	0x0002e3f4
   2e240:	0002e3f4 	.word	0x0002e3f4
   2e244:	0002e3f4 	.word	0x0002e3f4
   2e248:	0002e3f4 	.word	0x0002e3f4
   2e24c:	0002e3f4 	.word	0x0002e3f4
   2e250:	0002e3f4 	.word	0x0002e3f4
   2e254:	0002e3f4 	.word	0x0002e3f4
   2e258:	0002e3f4 	.word	0x0002e3f4
   2e25c:	0002e3f4 	.word	0x0002e3f4
   2e260:	0002e3f4 	.word	0x0002e3f4
   2e264:	0002e3f4 	.word	0x0002e3f4
   2e268:	0002e1e0 	.word	0x0002e1e0
   2e26c:	0002e3f4 	.word	0x0002e3f4
   2e270:	0002e3f4 	.word	0x0002e3f4
   2e274:	0002e3f4 	.word	0x0002e3f4
   2e278:	0002e3f4 	.word	0x0002e3f4
   2e27c:	0002e3f4 	.word	0x0002e3f4
   2e280:	0002e3f4 	.word	0x0002e3f4
   2e284:	0002e3f4 	.word	0x0002e3f4
   2e288:	0002e3f4 	.word	0x0002e3f4
   2e28c:	0002e3f4 	.word	0x0002e3f4
   2e290:	0002e3f4 	.word	0x0002e3f4
   2e294:	0002e3f4 	.word	0x0002e3f4
   2e298:	0002e3f4 	.word	0x0002e3f4
   2e29c:	0002e3f4 	.word	0x0002e3f4
   2e2a0:	0002e3f4 	.word	0x0002e3f4
   2e2a4:	0002e3f4 	.word	0x0002e3f4
   2e2a8:	0002e3f4 	.word	0x0002e3f4
   2e2ac:	0002e3f4 	.word	0x0002e3f4
   2e2b0:	0002e3f4 	.word	0x0002e3f4
   2e2b4:	0002e3f4 	.word	0x0002e3f4
   2e2b8:	0002e3f4 	.word	0x0002e3f4
   2e2bc:	0002e3f4 	.word	0x0002e3f4
   2e2c0:	0002e3f4 	.word	0x0002e3f4
   2e2c4:	0002e3f4 	.word	0x0002e3f4
   2e2c8:	0002e3f4 	.word	0x0002e3f4
   2e2cc:	0002e3f4 	.word	0x0002e3f4
   2e2d0:	0002e3f4 	.word	0x0002e3f4
   2e2d4:	0002e3f4 	.word	0x0002e3f4
   2e2d8:	0002e3f4 	.word	0x0002e3f4
   2e2dc:	0002e3f4 	.word	0x0002e3f4
   2e2e0:	0002e3f4 	.word	0x0002e3f4
   2e2e4:	0002e3f4 	.word	0x0002e3f4
   2e2e8:	0002e3f4 	.word	0x0002e3f4
   2e2ec:	0002e3f4 	.word	0x0002e3f4
   2e2f0:	0002e3f4 	.word	0x0002e3f4
   2e2f4:	0002e3f4 	.word	0x0002e3f4
   2e2f8:	0002e3f4 	.word	0x0002e3f4
   2e2fc:	0002e3f4 	.word	0x0002e3f4
   2e300:	0002e3f4 	.word	0x0002e3f4
   2e304:	0002e3f4 	.word	0x0002e3f4
   2e308:	0002e3f4 	.word	0x0002e3f4
   2e30c:	0002e3f4 	.word	0x0002e3f4
   2e310:	0002e3f4 	.word	0x0002e3f4
   2e314:	0002e3f4 	.word	0x0002e3f4
   2e318:	0002e3f4 	.word	0x0002e3f4
   2e31c:	0002e1e0 	.word	0x0002e1e0
   2e320:	0002e3f4 	.word	0x0002e3f4
   2e324:	0002e3f4 	.word	0x0002e3f4
   2e328:	0002e3f4 	.word	0x0002e3f4
   2e32c:	0002e3f4 	.word	0x0002e3f4
   2e330:	0002e3f4 	.word	0x0002e3f4
   2e334:	0002e1e0 	.word	0x0002e1e0
   2e338:	0002e3f4 	.word	0x0002e3f4
   2e33c:	0002e3f4 	.word	0x0002e3f4
   2e340:	0002e3f4 	.word	0x0002e3f4
   2e344:	0002e1e0 	.word	0x0002e1e0
   2e348:	0002e3f4 	.word	0x0002e3f4
   2e34c:	0002e3f4 	.word	0x0002e3f4
   2e350:	0002e3f4 	.word	0x0002e3f4
   2e354:	0002e3f4 	.word	0x0002e3f4
   2e358:	0002e3f4 	.word	0x0002e3f4
   2e35c:	0002e3f4 	.word	0x0002e3f4
   2e360:	0002e3f4 	.word	0x0002e3f4
   2e364:	0002e1e0 	.word	0x0002e1e0
   2e368:	0002e3f4 	.word	0x0002e3f4
   2e36c:	0002e3f4 	.word	0x0002e3f4
   2e370:	0002e3f4 	.word	0x0002e3f4
   2e374:	0002e1e0 	.word	0x0002e1e0
   2e378:	0002e3f4 	.word	0x0002e3f4
   2e37c:	0002e1e0 	.word	0x0002e1e0
   2e380:	0002e384 	.word	0x0002e384
   2e384:	e28c4002 	add	r4, ip, #2
   2e388:	e5804000 	str	r4, [r0]
   2e38c:	e28cc006 	add	ip, ip, #6
   2e390:	e1520004 	cmp	r2, r4
   2e394:	0a00000d 	beq	2e3d0 <JSMNR_parse+0x2a4>
   2e398:	e1f9a0d1 	ldrsb	sl, [r9, #1]!
   2e39c:	e6ef607a 	uxtb	r6, sl
   2e3a0:	e3c68020 	bic	r8, r6, #32
   2e3a4:	e35a0000 	cmp	sl, #0
   2e3a8:	e2488041 	sub	r8, r8, #65	; 0x41
   2e3ac:	e2466030 	sub	r6, r6, #48	; 0x30
   2e3b0:	0a000006 	beq	2e3d0 <JSMNR_parse+0x2a4>
   2e3b4:	e3580005 	cmp	r8, #5
   2e3b8:	83560009 	cmphi	r6, #9
   2e3bc:	e2844001 	add	r4, r4, #1
   2e3c0:	8a00000b 	bhi	2e3f4 <JSMNR_parse+0x2c8>
   2e3c4:	e154000c 	cmp	r4, ip
   2e3c8:	e5804000 	str	r4, [r0]
   2e3cc:	1affffef 	bne	2e390 <JSMNR_parse+0x264>
   2e3d0:	e2444001 	sub	r4, r4, #1
   2e3d4:	e284c001 	add	ip, r4, #1
   2e3d8:	e152000c 	cmp	r2, ip
   2e3dc:	e580c000 	str	ip, [r0]
   2e3e0:	8affff82 	bhi	2e1f0 <JSMNR_parse+0xc4>
   2e3e4:	e3e05002 	mvn	r5, #2
   2e3e8:	e580e000 	str	lr, [r0]
   2e3ec:	e1a00005 	mov	r0, r5
   2e3f0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3f4:	e3e05001 	mvn	r5, #1
   2e3f8:	e580e000 	str	lr, [r0]
   2e3fc:	e1a00005 	mov	r0, r5
   2e400:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e404:	e37c0001 	cmn	ip, #1
   2e408:	0a00002f 	beq	2e4cc <JSMNR_parse+0x3a0>
   2e40c:	e590c000 	ldr	ip, [r0]
   2e410:	e28ce001 	add	lr, ip, #1
   2e414:	e152000e 	cmp	r2, lr
   2e418:	e580e000 	str	lr, [r0]
   2e41c:	8affff58 	bhi	2e184 <JSMNR_parse+0x58>
   2e420:	e3530000 	cmp	r3, #0
   2e424:	0afffff4 	beq	2e3fc <JSMNR_parse+0x2d0>
   2e428:	e5901004 	ldr	r1, [r0, #4]
   2e42c:	e2512001 	subs	r2, r1, #1
   2e430:	4afffff1 	bmi	2e3fc <JSMNR_parse+0x2d0>
   2e434:	e0833201 	add	r3, r3, r1, lsl #4
   2e438:	ea000002 	b	2e448 <JSMNR_parse+0x31c>
   2e43c:	e3720001 	cmn	r2, #1
   2e440:	e2433010 	sub	r3, r3, #16
   2e444:	0affffec 	beq	2e3fc <JSMNR_parse+0x2d0>
   2e448:	e513100c 	ldr	r1, [r3, #-12]
   2e44c:	e2422001 	sub	r2, r2, #1
   2e450:	e3710001 	cmn	r1, #1
   2e454:	0afffff8 	beq	2e43c <JSMNR_parse+0x310>
   2e458:	e5131008 	ldr	r1, [r3, #-8]
   2e45c:	e3710001 	cmn	r1, #1
   2e460:	1afffff5 	bne	2e43c <JSMNR_parse+0x310>
   2e464:	e3e05002 	mvn	r5, #2
   2e468:	eaffffe3 	b	2e3fc <JSMNR_parse+0x2d0>
   2e46c:	e35c007b 	cmp	ip, #123	; 0x7b
   2e470:	0a00001c 	beq	2e4e8 <JSMNR_parse+0x3bc>
   2e474:	e35c007d 	cmp	ip, #125	; 0x7d
   2e478:	1a000058 	bne	2e5e0 <JSMNR_parse+0x4b4>
   2e47c:	e3530000 	cmp	r3, #0
   2e480:	0affffe1 	beq	2e40c <JSMNR_parse+0x2e0>
   2e484:	e5904004 	ldr	r4, [r0, #4]
   2e488:	e35c007d 	cmp	ip, #125	; 0x7d
   2e48c:	13a07002 	movne	r7, #2
   2e490:	03a07001 	moveq	r7, #1
   2e494:	e254c001 	subs	ip, r4, #1
   2e498:	4affffd9 	bmi	2e404 <JSMNR_parse+0x2d8>
   2e49c:	e244421f 	sub	r4, r4, #-268435455	; 0xf0000001
   2e4a0:	e0834204 	add	r4, r3, r4, lsl #4
   2e4a4:	e5946004 	ldr	r6, [r4, #4]
   2e4a8:	e3760001 	cmn	r6, #1
   2e4ac:	0a000002 	beq	2e4bc <JSMNR_parse+0x390>
   2e4b0:	e5946008 	ldr	r6, [r4, #8]
   2e4b4:	e3760001 	cmn	r6, #1
   2e4b8:	0a00008b 	beq	2e6ec <JSMNR_parse+0x5c0>
   2e4bc:	e24cc001 	sub	ip, ip, #1
   2e4c0:	e37c0001 	cmn	ip, #1
   2e4c4:	e2444010 	sub	r4, r4, #16
   2e4c8:	1afffff5 	bne	2e4a4 <JSMNR_parse+0x378>
   2e4cc:	e3a02001 	mov	r2, #1
   2e4d0:	e59f02dc 	ldr	r0, [pc, #732]	; 2e7b4 <JSMNR_parse+0x688>
   2e4d4:	ebfffefe 	bl	2e0d4 <JSMNR_logLongStr>
   2e4d8:	e3e05001 	mvn	r5, #1
   2e4dc:	eaffffc6 	b	2e3fc <JSMNR_parse+0x2d0>
   2e4e0:	e35c005b 	cmp	ip, #91	; 0x5b
   2e4e4:	1a00003d 	bne	2e5e0 <JSMNR_parse+0x4b4>
   2e4e8:	e3530000 	cmp	r3, #0
   2e4ec:	e2855001 	add	r5, r5, #1
   2e4f0:	0affffc5 	beq	2e40c <JSMNR_parse+0x2e0>
   2e4f4:	e5904004 	ldr	r4, [r0, #4]
   2e4f8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2e4fc:	e1560004 	cmp	r6, r4
   2e500:	9a000060 	bls	2e688 <JSMNR_parse+0x55c>
   2e504:	e2848001 	add	r8, r4, #1
   2e508:	e5808004 	str	r8, [r0, #4]
   2e50c:	e3e08000 	mvn	r8, #0
   2e510:	e5907008 	ldr	r7, [r0, #8]
   2e514:	e0836204 	add	r6, r3, r4, lsl #4
   2e518:	e3770001 	cmn	r7, #1
   2e51c:	10837207 	addne	r7, r3, r7, lsl #4
   2e520:	e586b00c 	str	fp, [r6, #12]
   2e524:	e5868004 	str	r8, [r6, #4]
   2e528:	e5868008 	str	r8, [r6, #8]
   2e52c:	1597800c 	ldrne	r8, [r7, #12]
   2e530:	12888001 	addne	r8, r8, #1
   2e534:	1587800c 	strne	r8, [r7, #12]
   2e538:	e35c007b 	cmp	ip, #123	; 0x7b
   2e53c:	13a07002 	movne	r7, #2
   2e540:	03a07001 	moveq	r7, #1
   2e544:	e590c000 	ldr	ip, [r0]
   2e548:	e7c37204 	strb	r7, [r3, r4, lsl #4]
   2e54c:	e586e004 	str	lr, [r6, #4]
   2e550:	e5804008 	str	r4, [r0, #8]
   2e554:	eaffff06 	b	2e174 <JSMNR_parse+0x48>
   2e558:	e3530000 	cmp	r3, #0
   2e55c:	0affffaa 	beq	2e40c <JSMNR_parse+0x2e0>
   2e560:	e590c008 	ldr	ip, [r0, #8]
   2e564:	e37c0001 	cmn	ip, #1
   2e568:	0affffa7 	beq	2e40c <JSMNR_parse+0x2e0>
   2e56c:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2e570:	e24cc001 	sub	ip, ip, #1
   2e574:	e35c0001 	cmp	ip, #1
   2e578:	9affffa3 	bls	2e40c <JSMNR_parse+0x2e0>
   2e57c:	e590e004 	ldr	lr, [r0, #4]
   2e580:	e25e4001 	subs	r4, lr, #1
   2e584:	4affffa0 	bmi	2e40c <JSMNR_parse+0x2e0>
   2e588:	e083e20e 	add	lr, r3, lr, lsl #4
   2e58c:	ea000003 	b	2e5a0 <JSMNR_parse+0x474>
   2e590:	e2444001 	sub	r4, r4, #1
   2e594:	e3740001 	cmn	r4, #1
   2e598:	e24ee010 	sub	lr, lr, #16
   2e59c:	0affff9a 	beq	2e40c <JSMNR_parse+0x2e0>
   2e5a0:	e55ec010 	ldrb	ip, [lr, #-16]
   2e5a4:	e24cc001 	sub	ip, ip, #1
   2e5a8:	e35c0001 	cmp	ip, #1
   2e5ac:	8afffff7 	bhi	2e590 <JSMNR_parse+0x464>
   2e5b0:	e51ec00c 	ldr	ip, [lr, #-12]
   2e5b4:	e37c0001 	cmn	ip, #1
   2e5b8:	0afffff4 	beq	2e590 <JSMNR_parse+0x464>
   2e5bc:	e51ec008 	ldr	ip, [lr, #-8]
   2e5c0:	e37c0001 	cmn	ip, #1
   2e5c4:	1afffff1 	bne	2e590 <JSMNR_parse+0x464>
   2e5c8:	e5804008 	str	r4, [r0, #8]
   2e5cc:	e590c000 	ldr	ip, [r0]
   2e5d0:	eafffee7 	b	2e174 <JSMNR_parse+0x48>
   2e5d4:	e24c7009 	sub	r7, ip, #9
   2e5d8:	e3570001 	cmp	r7, #1
   2e5dc:	9affff8a 	bls	2e40c <JSMNR_parse+0x2e0>
   2e5e0:	e5904000 	ldr	r4, [r0]
   2e5e4:	e1520004 	cmp	r2, r4
   2e5e8:	9a00001d 	bls	2e664 <JSMNR_parse+0x538>
   2e5ec:	e191c0d4 	ldrsb	ip, [r1, r4]
   2e5f0:	e0816004 	add	r6, r1, r4
   2e5f4:	e35c0000 	cmp	ip, #0
   2e5f8:	1a000011 	bne	2e644 <JSMNR_parse+0x518>
   2e5fc:	ea000018 	b	2e664 <JSMNR_parse+0x538>
   2e600:	e35c0009 	cmp	ip, #9
   2e604:	ba000003 	blt	2e618 <JSMNR_parse+0x4ec>
   2e608:	e35c000a 	cmp	ip, #10
   2e60c:	da000014 	ble	2e664 <JSMNR_parse+0x538>
   2e610:	e35c000d 	cmp	ip, #13
   2e614:	0a000012 	beq	2e664 <JSMNR_parse+0x538>
   2e618:	e24cc020 	sub	ip, ip, #32
   2e61c:	e6efc07c 	uxtb	ip, ip
   2e620:	e35c005e 	cmp	ip, #94	; 0x5e
   2e624:	8affff72 	bhi	2e3f4 <JSMNR_parse+0x2c8>
   2e628:	e2844001 	add	r4, r4, #1
   2e62c:	e1520004 	cmp	r2, r4
   2e630:	e5804000 	str	r4, [r0]
   2e634:	0a00000a 	beq	2e664 <JSMNR_parse+0x538>
   2e638:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2e63c:	e35c0000 	cmp	ip, #0
   2e640:	0a000007 	beq	2e664 <JSMNR_parse+0x538>
   2e644:	e35c0020 	cmp	ip, #32
   2e648:	0a000005 	beq	2e664 <JSMNR_parse+0x538>
   2e64c:	daffffeb 	ble	2e600 <JSMNR_parse+0x4d4>
   2e650:	e35c003a 	cmp	ip, #58	; 0x3a
   2e654:	0a000002 	beq	2e664 <JSMNR_parse+0x538>
   2e658:	ca00000c 	bgt	2e690 <JSMNR_parse+0x564>
   2e65c:	e35c002c 	cmp	ip, #44	; 0x2c
   2e660:	1affffec 	bne	2e618 <JSMNR_parse+0x4ec>
   2e664:	e3530000 	cmp	r3, #0
   2e668:	0244c001 	subeq	ip, r4, #1
   2e66c:	02855001 	addeq	r5, r5, #1
   2e670:	0afffebf 	beq	2e174 <JSMNR_parse+0x48>
   2e674:	e590c004 	ldr	ip, [r0, #4]
   2e678:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2e67c:	e156000c 	cmp	r6, ip
   2e680:	8a000007 	bhi	2e6a4 <JSMNR_parse+0x578>
   2e684:	e580e000 	str	lr, [r0]
   2e688:	e3e05000 	mvn	r5, #0
   2e68c:	eaffff5a 	b	2e3fc <JSMNR_parse+0x2d0>
   2e690:	e35c005d 	cmp	ip, #93	; 0x5d
   2e694:	0afffff2 	beq	2e664 <JSMNR_parse+0x538>
   2e698:	e35c007d 	cmp	ip, #125	; 0x7d
   2e69c:	1affffdd 	bne	2e618 <JSMNR_parse+0x4ec>
   2e6a0:	eaffffef 	b	2e664 <JSMNR_parse+0x538>
   2e6a4:	e3a08004 	mov	r8, #4
   2e6a8:	e5906008 	ldr	r6, [r0, #8]
   2e6ac:	e28c7001 	add	r7, ip, #1
   2e6b0:	e5807004 	str	r7, [r0, #4]
   2e6b4:	e3760001 	cmn	r6, #1
   2e6b8:	e083720c 	add	r7, r3, ip, lsl #4
   2e6bc:	e7c3820c 	strb	r8, [r3, ip, lsl #4]
   2e6c0:	10836206 	addne	r6, r3, r6, lsl #4
   2e6c4:	e587b00c 	str	fp, [r7, #12]
   2e6c8:	e587e004 	str	lr, [r7, #4]
   2e6cc:	1596e00c 	ldrne	lr, [r6, #12]
   2e6d0:	e244c001 	sub	ip, r4, #1
   2e6d4:	128ee001 	addne	lr, lr, #1
   2e6d8:	e5874008 	str	r4, [r7, #8]
   2e6dc:	e2855001 	add	r5, r5, #1
   2e6e0:	e580c000 	str	ip, [r0]
   2e6e4:	1586e00c 	strne	lr, [r6, #12]
   2e6e8:	eafffea1 	b	2e174 <JSMNR_parse+0x48>
   2e6ec:	e5d48000 	ldrb	r8, [r4]
   2e6f0:	e1580007 	cmp	r8, r7
   2e6f4:	1a00002c 	bne	2e7ac <JSMNR_parse+0x680>
   2e6f8:	e28ee001 	add	lr, lr, #1
   2e6fc:	e5806008 	str	r6, [r0, #8]
   2e700:	e083620c 	add	r6, r3, ip, lsl #4
   2e704:	e584e008 	str	lr, [r4, #8]
   2e708:	e596e004 	ldr	lr, [r6, #4]
   2e70c:	e37e0001 	cmn	lr, #1
   2e710:	0a000002 	beq	2e720 <JSMNR_parse+0x5f4>
   2e714:	e596e008 	ldr	lr, [r6, #8]
   2e718:	e37e0001 	cmn	lr, #1
   2e71c:	0a000005 	beq	2e738 <JSMNR_parse+0x60c>
   2e720:	e24cc001 	sub	ip, ip, #1
   2e724:	e37c0001 	cmn	ip, #1
   2e728:	e2466010 	sub	r6, r6, #16
   2e72c:	1afffff5 	bne	2e708 <JSMNR_parse+0x5dc>
   2e730:	e590c000 	ldr	ip, [r0]
   2e734:	eaffff35 	b	2e410 <JSMNR_parse+0x2e4>
   2e738:	e580c008 	str	ip, [r0, #8]
   2e73c:	e590c000 	ldr	ip, [r0]
   2e740:	eafffe8b 	b	2e174 <JSMNR_parse+0x48>
   2e744:	e3530000 	cmp	r3, #0
   2e748:	0a000014 	beq	2e7a0 <JSMNR_parse+0x674>
   2e74c:	e5906004 	ldr	r6, [r0, #4]
   2e750:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   2e754:	e1540006 	cmp	r4, r6
   2e758:	9affffc9 	bls	2e684 <JSMNR_parse+0x558>
   2e75c:	e3a08003 	mov	r8, #3
   2e760:	e590e008 	ldr	lr, [r0, #8]
   2e764:	e2864001 	add	r4, r6, #1
   2e768:	e5804004 	str	r4, [r0, #4]
   2e76c:	e37e0001 	cmn	lr, #1
   2e770:	e0834206 	add	r4, r3, r6, lsl #4
   2e774:	e7c38206 	strb	r8, [r3, r6, lsl #4]
   2e778:	e2855001 	add	r5, r5, #1
   2e77c:	e9841080 	stmib	r4, {r7, ip}
   2e780:	e584b00c 	str	fp, [r4, #12]
   2e784:	0affff20 	beq	2e40c <JSMNR_parse+0x2e0>
   2e788:	e083e20e 	add	lr, r3, lr, lsl #4
   2e78c:	e59e400c 	ldr	r4, [lr, #12]
   2e790:	e590c000 	ldr	ip, [r0]
   2e794:	e2844001 	add	r4, r4, #1
   2e798:	e58e400c 	str	r4, [lr, #12]
   2e79c:	eafffe74 	b	2e174 <JSMNR_parse+0x48>
   2e7a0:	e2855001 	add	r5, r5, #1
   2e7a4:	e590c000 	ldr	ip, [r0]
   2e7a8:	eafffe71 	b	2e174 <JSMNR_parse+0x48>
   2e7ac:	e3e05001 	mvn	r5, #1
   2e7b0:	eaffff11 	b	2e3fc <JSMNR_parse+0x2d0>
   2e7b4:	000478b4 	.word	0x000478b4

0002e7b8 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2e7b8:	e59f3018 	ldr	r3, [pc, #24]	; 2e7d8 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2e7bc:	e5932000 	ldr	r2, [r3]
   2e7c0:	e3520000 	cmp	r2, #0
   2e7c4:	012fff1e 	bxeq	lr
   2e7c8:	e5933004 	ldr	r3, [r3, #4]
   2e7cc:	e3530000 	cmp	r3, #0
   2e7d0:	012fff1e 	bxeq	lr
   2e7d4:	e12fff13 	bx	r3
   2e7d8:	0005022c 	.word	0x0005022c

0002e7dc <CommandHandler::CommandHandler()>:
   2e7dc:	e92d4070 	push	{r4, r5, r6, lr}
   2e7e0:	e3a0207d 	mov	r2, #125	; 0x7d
   2e7e4:	e3a04000 	mov	r4, #0
   2e7e8:	e3a06001 	mov	r6, #1
   2e7ec:	e1a05000 	mov	r5, r0
   2e7f0:	e59f3090 	ldr	r3, [pc, #144]	; 2e888 <CommandHandler::CommandHandler()+0xac>
   2e7f4:	e24dd018 	sub	sp, sp, #24
   2e7f8:	e58d2000 	str	r2, [sp]
   2e7fc:	e58d3008 	str	r3, [sp, #8]
   2e800:	e58d3004 	str	r3, [sp, #4]
   2e804:	e58d4010 	str	r4, [sp, #16]
   2e808:	e58d600c 	str	r6, [sp, #12]
   2e80c:	e3a0307e 	mov	r3, #126	; 0x7e
   2e810:	e59f2074 	ldr	r2, [pc, #116]	; 2e88c <CommandHandler::CommandHandler()+0xb0>
   2e814:	e59f1074 	ldr	r1, [pc, #116]	; 2e890 <CommandHandler::CommandHandler()+0xb4>
   2e818:	e2800f65 	add	r0, r0, #404	; 0x194
   2e81c:	eb0005df 	bl	2ffa0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2e820:	e59f006c 	ldr	r0, [pc, #108]	; 2e894 <CommandHandler::CommandHandler()+0xb8>
   2e824:	e3a01032 	mov	r1, #50	; 0x32
   2e828:	e5805000 	str	r5, [r0]
   2e82c:	e1a00005 	mov	r0, r5
   2e830:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2e834:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2e838:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2e83c:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2e840:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2e844:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2e848:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2e84c:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2e850:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2e854:	e5854190 	str	r4, [r5, #400]	; 0x190
   2e858:	e5c34000 	strb	r4, [r3]
   2e85c:	e5c34065 	strb	r4, [r3, #101]	; 0x65
   2e860:	e5c3408e 	strb	r4, [r3, #142]	; 0x8e
   2e864:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2e868:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2e86c:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2e870:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2e874:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2e878:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2e87c:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2e880:	e28dd018 	add	sp, sp, #24
   2e884:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e888:	00002710 	.word	0x00002710
   2e88c:	0002f7ec 	.word	0x0002f7ec
   2e890:	0002e7b8 	.word	0x0002e7b8
   2e894:	0005022c 	.word	0x0005022c

0002e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2e898:	e590c190 	ldr	ip, [r0, #400]	; 0x190
   2e89c:	e35c0013 	cmp	ip, #19
   2e8a0:	8a00000e 	bhi	2e8e0 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x48>
   2e8a4:	e92d4030 	push	{r4, r5, lr}
   2e8a8:	e08c410c 	add	r4, ip, ip, lsl #2
   2e8ac:	e1a04104 	lsl	r4, r4, #2
   2e8b0:	e080e004 	add	lr, r0, r4
   2e8b4:	e7801004 	str	r1, [r0, r4]
   2e8b8:	e58e3008 	str	r3, [lr, #8]
   2e8bc:	e59d300c 	ldr	r3, [sp, #12]
   2e8c0:	e28c5001 	add	r5, ip, #1
   2e8c4:	e58e300c 	str	r3, [lr, #12]
   2e8c8:	e59d3010 	ldr	r3, [sp, #16]
   2e8cc:	e5ce2004 	strb	r2, [lr, #4]
   2e8d0:	e58e3010 	str	r3, [lr, #16]
   2e8d4:	e5805190 	str	r5, [r0, #400]	; 0x190
   2e8d8:	e1a0000c 	mov	r0, ip
   2e8dc:	e8bd8030 	pop	{r4, r5, pc}
   2e8e0:	e3e0c000 	mvn	ip, #0
   2e8e4:	e1a0000c 	mov	r0, ip
   2e8e8:	e12fff1e 	bx	lr

0002e8ec <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2e8ec:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2e8f0:	e1530001 	cmp	r3, r1
   2e8f4:	80811101 	addhi	r1, r1, r1, lsl #2
   2e8f8:	80801101 	addhi	r1, r0, r1, lsl #2
   2e8fc:	85c12004 	strbhi	r2, [r1, #4]
   2e900:	e12fff1e 	bx	lr

0002e904 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2e904:	e59f3010 	ldr	r3, [pc, #16]	; 2e91c <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2e908:	e5930000 	ldr	r0, [r3]
   2e90c:	e3500000 	cmp	r0, #0
   2e910:	012fff1e 	bxeq	lr
   2e914:	e2800f65 	add	r0, r0, #404	; 0x194
   2e918:	ea0006a9 	b	303c4 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2e91c:	0005022c 	.word	0x0005022c

0002e920 <CommandHandler::hdlcTxAvailableStatic()>:
   2e920:	e59f3018 	ldr	r3, [pc, #24]	; 2e940 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2e924:	e5930000 	ldr	r0, [r3]
   2e928:	e3500000 	cmp	r0, #0
   2e92c:	012fff1e 	bxeq	lr
   2e930:	e5930008 	ldr	r0, [r3, #8]
   2e934:	e3500000 	cmp	r0, #0
   2e938:	012fff1e 	bxeq	lr
   2e93c:	e12fff10 	bx	r0
   2e940:	0005022c 	.word	0x0005022c

0002e944 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2e944:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e948:	e1a07000 	mov	r7, r0
   2e94c:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2e950:	e24dd00c 	sub	sp, sp, #12
   2e954:	e3500000 	cmp	r0, #0
   2e958:	e1a08001 	mov	r8, r1
   2e95c:	e1a09002 	mov	r9, r2
   2e960:	e1a0a003 	mov	sl, r3
   2e964:	0a00002f 	beq	2ea28 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2e968:	e1a04007 	mov	r4, r7
   2e96c:	e3a05000 	mov	r5, #0
   2e970:	e3a0b004 	mov	fp, #4
   2e974:	ea000012 	b	2e9c4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2e978:	e5946008 	ldr	r6, [r4, #8]
   2e97c:	e3560000 	cmp	r6, #0
   2e980:	0a00001f 	beq	2ea04 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xc0>
   2e984:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2e988:	e5940000 	ldr	r0, [r4]
   2e98c:	e58d3004 	str	r3, [sp, #4]
   2e990:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2e994:	e1a02009 	mov	r2, r9
   2e998:	e58d3000 	str	r3, [sp]
   2e99c:	e1a01008 	mov	r1, r8
   2e9a0:	e1a0300a 	mov	r3, sl
   2e9a4:	e12fff36 	blx	r6
   2e9a8:	e3500000 	cmp	r0, #0
   2e9ac:	1a000012 	bne	2e9fc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2e9b0:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2e9b4:	e2855001 	add	r5, r5, #1
   2e9b8:	e1500005 	cmp	r0, r5
   2e9bc:	e2844014 	add	r4, r4, #20
   2e9c0:	9a00000d 	bls	2e9fc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2e9c4:	e5d43004 	ldrb	r3, [r4, #4]
   2e9c8:	e3530000 	cmp	r3, #0
   2e9cc:	1affffe9 	bne	2e978 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2e9d0:	ebffdeae 	bl	26490 <CLogger::Get()>
   2e9d4:	e58d5000 	str	r5, [sp]
   2e9d8:	e59f306c 	ldr	r3, [pc, #108]	; 2ea4c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2e9dc:	e1a0200b 	mov	r2, fp
   2e9e0:	e59f1068 	ldr	r1, [pc, #104]	; 2ea50 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2e9e4:	ebffdde6 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e9e8:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2e9ec:	e2855001 	add	r5, r5, #1
   2e9f0:	e1500005 	cmp	r0, r5
   2e9f4:	e2844014 	add	r4, r4, #20
   2e9f8:	8afffff1 	bhi	2e9c4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2e9fc:	e28dd00c 	add	sp, sp, #12
   2ea00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea04:	e3550000 	cmp	r5, #0
   2ea08:	0affffe9 	beq	2e9b4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x70>
   2ea0c:	ebffde9f 	bl	26490 <CLogger::Get()>
   2ea10:	e58d5000 	str	r5, [sp]
   2ea14:	e59f3038 	ldr	r3, [pc, #56]	; 2ea54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2ea18:	e1a0200b 	mov	r2, fp
   2ea1c:	e59f102c 	ldr	r1, [pc, #44]	; 2ea50 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2ea20:	ebffddd7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ea24:	eaffffe1 	b	2e9b0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x6c>
   2ea28:	ebffde98 	bl	26490 <CLogger::Get()>
   2ea2c:	e59f3024 	ldr	r3, [pc, #36]	; 2ea58 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2ea30:	e3a02004 	mov	r2, #4
   2ea34:	e59f1014 	ldr	r1, [pc, #20]	; 2ea50 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2ea38:	ebffddd1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ea3c:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2ea40:	e3500000 	cmp	r0, #0
   2ea44:	1affffc7 	bne	2e968 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2ea48:	eaffffeb 	b	2e9fc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2ea4c:	00047900 	.word	0x00047900
   2ea50:	000478c8 	.word	0x000478c8
   2ea54:	00047918 	.word	0x00047918
   2ea58:	000478d8 	.word	0x000478d8

0002ea5c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2ea5c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea60:	e590e190 	ldr	lr, [r0, #400]	; 0x190
   2ea64:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2ea68:	e35e0000 	cmp	lr, #0
   2ea6c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea70:	e1a09003 	mov	r9, r3
   2ea74:	e1a08002 	mov	r8, r2
   2ea78:	e1a0a001 	mov	sl, r1
   2ea7c:	e1a06000 	mov	r6, r0
   2ea80:	e1a04000 	mov	r4, r0
   2ea84:	e3a05000 	mov	r5, #0
   2ea88:	ea00000c 	b	2eac0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2ea8c:	e594300c 	ldr	r3, [r4, #12]
   2ea90:	e3530000 	cmp	r3, #0
   2ea94:	0a000005 	beq	2eab0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2ea98:	e1a01009 	mov	r1, r9
   2ea9c:	e1a00008 	mov	r0, r8
   2eaa0:	e12fff33 	blx	r3
   2eaa4:	e3500000 	cmp	r0, #0
   2eaa8:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eaac:	e596e190 	ldr	lr, [r6, #400]	; 0x190
   2eab0:	e2855001 	add	r5, r5, #1
   2eab4:	e15e0005 	cmp	lr, r5
   2eab8:	e2844014 	add	r4, r4, #20
   2eabc:	9a00000f 	bls	2eb00 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xa4>
   2eac0:	e5d4c004 	ldrb	ip, [r4, #4]
   2eac4:	e35c0000 	cmp	ip, #0
   2eac8:	0afffff8 	beq	2eab0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2eacc:	e3570000 	cmp	r7, #0
   2ead0:	1affffed 	bne	2ea8c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2ead4:	e594b010 	ldr	fp, [r4, #16]
   2ead8:	e35b0000 	cmp	fp, #0
   2eadc:	0afffff3 	beq	2eab0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2eae0:	e1a03009 	mov	r3, r9
   2eae4:	e1a02008 	mov	r2, r8
   2eae8:	e1a0100a 	mov	r1, sl
   2eaec:	e5940000 	ldr	r0, [r4]
   2eaf0:	e12fff3b 	blx	fp
   2eaf4:	e3500000 	cmp	r0, #0
   2eaf8:	0affffeb 	beq	2eaac <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2eafc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb00:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002eb04 <CommandHandler::handleFileStart(char const*)>:
   2eb04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2eb08:	e2804a05 	add	r4, r0, #20480	; 0x5000
   2eb0c:	e24dd01c 	sub	sp, sp, #28
   2eb10:	e1a05000 	mov	r5, r0
   2eb14:	e1a02004 	mov	r2, r4
   2eb18:	e3a03064 	mov	r3, #100	; 0x64
   2eb1c:	e59f00c8 	ldr	r0, [pc, #200]	; 2ebec <CommandHandler::handleFileStart(char const*)+0xe8>
   2eb20:	e1a06001 	mov	r6, r1
   2eb24:	ebfffc21 	bl	2dbb0 <jsonGetValueForKey>
   2eb28:	e3500000 	cmp	r0, #0
   2eb2c:	1a000001 	bne	2eb38 <CommandHandler::handleFileStart(char const*)+0x34>
   2eb30:	e28dd01c 	add	sp, sp, #28
   2eb34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2eb38:	e3a03028 	mov	r3, #40	; 0x28
   2eb3c:	e2842065 	add	r2, r4, #101	; 0x65
   2eb40:	e1a01006 	mov	r1, r6
   2eb44:	e59f00a4 	ldr	r0, [pc, #164]	; 2ebf0 <CommandHandler::handleFileStart(char const*)+0xec>
   2eb48:	ebfffc18 	bl	2dbb0 <jsonGetValueForKey>
   2eb4c:	e3500000 	cmp	r0, #0
   2eb50:	0afffff6 	beq	2eb30 <CommandHandler::handleFileStart(char const*)+0x2c>
   2eb54:	e1a0200d 	mov	r2, sp
   2eb58:	e3a03014 	mov	r3, #20
   2eb5c:	e1a01006 	mov	r1, r6
   2eb60:	e59f008c 	ldr	r0, [pc, #140]	; 2ebf4 <CommandHandler::handleFileStart(char const*)+0xf0>
   2eb64:	ebfffc11 	bl	2dbb0 <jsonGetValueForKey>
   2eb68:	e3500000 	cmp	r0, #0
   2eb6c:	0affffef 	beq	2eb30 <CommandHandler::handleFileStart(char const*)+0x2c>
   2eb70:	e3a0200a 	mov	r2, #10
   2eb74:	e3a01000 	mov	r1, #0
   2eb78:	e1a0000d 	mov	r0, sp
   2eb7c:	ebffecbb 	bl	29e70 <strtoul>
   2eb80:	e1a01006 	mov	r1, r6
   2eb84:	e1a07000 	mov	r7, r0
   2eb88:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   2eb8c:	e284008e 	add	r0, r4, #142	; 0x8e
   2eb90:	ebfffb50 	bl	2d8d8 <strlcpy>
   2eb94:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   2eb98:	e3500000 	cmp	r0, #0
   2eb9c:	0a000000 	beq	2eba4 <CommandHandler::handleFileStart(char const*)+0xa0>
   2eba0:	ebffef6b 	bl	2a954 <operator delete[](void*)>
   2eba4:	e1a00007 	mov	r0, r7
   2eba8:	ebffef62 	bl	2a938 <operator new[](unsigned int)>
   2ebac:	e3a06000 	mov	r6, #0
   2ebb0:	e5840860 	str	r0, [r4, #2144]	; 0x860
   2ebb4:	e5847864 	str	r7, [r4, #2148]	; 0x864
   2ebb8:	e5846868 	str	r6, [r4, #2152]	; 0x868
   2ebbc:	e584686c 	str	r6, [r4, #2156]	; 0x86c
   2ebc0:	ebfffb0a 	bl	2d7f0 <millis>
   2ebc4:	e2853a07 	add	r3, r5, #28672	; 0x7000
   2ebc8:	e283ce7f 	add	ip, r3, #2032	; 0x7f0
   2ebcc:	e2855901 	add	r5, r5, #16384	; 0x4000
   2ebd0:	e28cc00c 	add	ip, ip, #12
   2ebd4:	e2855eff 	add	r5, r5, #4080	; 0xff0
   2ebd8:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
   2ebdc:	e58367f4 	str	r6, [r3, #2036]	; 0x7f4
   2ebe0:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   2ebe4:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   2ebe8:	eaffffd0 	b	2eb30 <CommandHandler::handleFileStart(char const*)+0x2c>
   2ebec:	0004792c 	.word	0x0004792c
   2ebf0:	00047938 	.word	0x00047938
   2ebf4:	00047944 	.word	0x00047944

0002ebf8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   2ebf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ebfc:	e2807a05 	add	r7, r0, #20480	; 0x5000
   2ec00:	e597c860 	ldr	ip, [r7, #2144]	; 0x860
   2ec04:	e24dd018 	sub	sp, sp, #24
   2ec08:	e35c0000 	cmp	ip, #0
   2ec0c:	0a000008 	beq	2ec34 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   2ec10:	e1a06003 	mov	r6, r3
   2ec14:	e1a05002 	mov	r5, r2
   2ec18:	e1a04000 	mov	r4, r0
   2ec1c:	e1a0200d 	mov	r2, sp
   2ec20:	e3a03014 	mov	r3, #20
   2ec24:	e59f0090 	ldr	r0, [pc, #144]	; 2ecbc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xc4>
   2ec28:	ebfffbe0 	bl	2dbb0 <jsonGetValueForKey>
   2ec2c:	e3500000 	cmp	r0, #0
   2ec30:	1a000001 	bne	2ec3c <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   2ec34:	e28dd018 	add	sp, sp, #24
   2ec38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ec3c:	e3a0200a 	mov	r2, #10
   2ec40:	e1a0000d 	mov	r0, sp
   2ec44:	e3a01000 	mov	r1, #0
   2ec48:	ebffec88 	bl	29e70 <strtoul>
   2ec4c:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   2ec50:	e0802006 	add	r2, r0, r6
   2ec54:	e1520003 	cmp	r2, r3
   2ec58:	e1a08000 	mov	r8, r0
   2ec5c:	8afffff4 	bhi	2ec34 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   2ec60:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   2ec64:	e1a01005 	mov	r1, r5
   2ec68:	e1a02006 	mov	r2, r6
   2ec6c:	e0800008 	add	r0, r0, r8
   2ec70:	ebffed56 	bl	2a1d0 <memcpy>
   2ec74:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   2ec78:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   2ec7c:	e0822006 	add	r2, r2, r6
   2ec80:	e2833001 	add	r3, r3, #1
   2ec84:	e5872868 	str	r2, [r7, #2152]	; 0x868
   2ec88:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   2ec8c:	ebfffad7 	bl	2d7f0 <millis>
   2ec90:	e2842a07 	add	r2, r4, #28672	; 0x7000
   2ec94:	e59237f4 	ldr	r3, [r2, #2036]	; 0x7f4
   2ec98:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   2ec9c:	e0840103 	add	r0, r4, r3, lsl #2
   2eca0:	e2801a05 	add	r1, r0, #20480	; 0x5000
   2eca4:	e2833001 	add	r3, r3, #1
   2eca8:	e2800a06 	add	r0, r0, #24576	; 0x6000
   2ecac:	e58188b4 	str	r8, [r1, #2228]	; 0x8b4
   2ecb0:	e5806854 	str	r6, [r0, #2132]	; 0x854
   2ecb4:	e58237f4 	str	r3, [r2, #2036]	; 0x7f4
   2ecb8:	eaffffdd 	b	2ec34 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   2ecbc:	0004794c 	.word	0x0004794c

0002ecc0 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2ecc0:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2ecc4:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2ecc8:	e3500000 	cmp	r0, #0
   2eccc:	012fff1e 	bxeq	lr
   2ecd0:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2ecd4:	e1500003 	cmp	r0, r3
   2ecd8:	15810000 	strne	r0, [r1]
   2ecdc:	13a00001 	movne	r0, #1
   2ece0:	15823000 	strne	r3, [r2]
   2ece4:	03a00000 	moveq	r0, #0
   2ece8:	e12fff1e 	bx	lr

0002ecec <CommandHandler::sendKeyStrToTarget(char const*)>:
   2ecec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ecf0:	e3a04000 	mov	r4, #0
   2ecf4:	e1a07000 	mov	r7, r0
   2ecf8:	e1a05001 	mov	r5, r1
   2ecfc:	e1a08004 	mov	r8, r4
   2ed00:	e59f60a0 	ldr	r6, [pc, #160]	; 2eda8 <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2ed04:	e2809a05 	add	r9, r0, #20480	; 0x5000
   2ed08:	ea00000f 	b	2ed4c <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2ed0c:	e3510000 	cmp	r1, #0
   2ed10:	01520003 	cmpeq	r2, r3
   2ed14:	0a00000b 	beq	2ed48 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2ed18:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2ed1c:	e7d52004 	ldrb	r2, [r5, r4]
   2ed20:	e0873003 	add	r3, r7, r3
   2ed24:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2ed28:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2ed2c:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2ed30:	e5992878 	ldr	r2, [r9, #2168]	; 0x878
   2ed34:	e2833001 	add	r3, r3, #1
   2ed38:	e5893870 	str	r3, [r9, #2160]	; 0x870
   2ed3c:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2ed40:	e1530002 	cmp	r3, r2
   2ed44:	25898870 	strcs	r8, [r9, #2160]	; 0x870
   2ed48:	e2844001 	add	r4, r4, #1
   2ed4c:	e1a00005 	mov	r0, r5
   2ed50:	ebffeaf9 	bl	2993c <strlen>
   2ed54:	e1540000 	cmp	r4, r0
   2ed58:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ed5c:	e5963000 	ldr	r3, [r6]
   2ed60:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2ed64:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2ed68:	e3520000 	cmp	r2, #0
   2ed6c:	0afffff5 	beq	2ed48 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2ed70:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2ed74:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2ed78:	e2422001 	sub	r2, r2, #1
   2ed7c:	e1500001 	cmp	r0, r1
   2ed80:	0affffe4 	beq	2ed18 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2ed84:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2ed88:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2ed8c:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2ed90:	e1510000 	cmp	r1, r0
   2ed94:	3affffdc 	bcc	2ed0c <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2ed98:	e0411003 	sub	r1, r1, r3
   2ed9c:	e3510001 	cmp	r1, #1
   2eda0:	8affffdc 	bhi	2ed18 <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2eda4:	eaffffe7 	b	2ed48 <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2eda8:	0005022c 	.word	0x0005022c

0002edac <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2edac:	e59f300c 	ldr	r3, [pc, #12]	; 2edc0 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2edb0:	e5930000 	ldr	r0, [r3]
   2edb4:	e3500000 	cmp	r0, #0
   2edb8:	012fff1e 	bxeq	lr
   2edbc:	eaffffca 	b	2ecec <CommandHandler::sendKeyStrToTarget(char const*)>
   2edc0:	0005022c 	.word	0x0005022c

0002edc4 <CommandHandler::getTxAvailable()>:
   2edc4:	e59f3018 	ldr	r3, [pc, #24]	; 2ede4 <CommandHandler::getTxAvailable()+0x20>
   2edc8:	e5930000 	ldr	r0, [r3]
   2edcc:	e3500000 	cmp	r0, #0
   2edd0:	012fff1e 	bxeq	lr
   2edd4:	e5930008 	ldr	r0, [r3, #8]
   2edd8:	e3500000 	cmp	r0, #0
   2eddc:	012fff1e 	bxeq	lr
   2ede0:	e12fff10 	bx	r0
   2ede4:	0005022c 	.word	0x0005022c

0002ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2ede8:	e92d4070 	push	{r4, r5, r6, lr}
   2edec:	e1a06001 	mov	r6, r1
   2edf0:	e1a05002 	mov	r5, r2
   2edf4:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2edf8:	e24dd050 	sub	sp, sp, #80	; 0x50
   2edfc:	e28d1c4e 	add	r1, sp, #19968	; 0x4e00
   2ee00:	e2811064 	add	r1, r1, #100	; 0x64
   2ee04:	e5914000 	ldr	r4, [r1]
   2ee08:	e28dc030 	add	ip, sp, #48	; 0x30
   2ee0c:	e59f2188 	ldr	r2, [pc, #392]	; 2ef9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2ee10:	e3a01014 	mov	r1, #20
   2ee14:	e28d0008 	add	r0, sp, #8
   2ee18:	e58dc004 	str	ip, [sp, #4]
   2ee1c:	ebfffb24 	bl	2dab4 <snprintf>
   2ee20:	e1a03004 	mov	r3, r4
   2ee24:	e59f2170 	ldr	r2, [pc, #368]	; 2ef9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2ee28:	e3a01014 	mov	r1, #20
   2ee2c:	e28d001c 	add	r0, sp, #28
   2ee30:	ebfffb1f 	bl	2dab4 <snprintf>
   2ee34:	e59f2164 	ldr	r2, [pc, #356]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee38:	e59f1164 	ldr	r1, [pc, #356]	; 2efa4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2ee3c:	e59d0004 	ldr	r0, [sp, #4]
   2ee40:	ebfffaa4 	bl	2d8d8 <strlcpy>
   2ee44:	e1a01006 	mov	r1, r6
   2ee48:	e59f2150 	ldr	r2, [pc, #336]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee4c:	e59d0004 	ldr	r0, [sp, #4]
   2ee50:	ebfffabc 	bl	2d948 <strlcat>
   2ee54:	e59f2144 	ldr	r2, [pc, #324]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee58:	e59f1148 	ldr	r1, [pc, #328]	; 2efa8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2ee5c:	e59d0004 	ldr	r0, [sp, #4]
   2ee60:	ebfffab8 	bl	2d948 <strlcat>
   2ee64:	e1a00005 	mov	r0, r5
   2ee68:	ebffeab3 	bl	2993c <strlen>
   2ee6c:	e3500000 	cmp	r0, #0
   2ee70:	1a000040 	bne	2ef78 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x190>
   2ee74:	e59f2124 	ldr	r2, [pc, #292]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee78:	e59f112c 	ldr	r1, [pc, #300]	; 2efac <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2ee7c:	e59d0004 	ldr	r0, [sp, #4]
   2ee80:	ebfffab0 	bl	2d948 <strlcat>
   2ee84:	e28d1008 	add	r1, sp, #8
   2ee88:	e59f2110 	ldr	r2, [pc, #272]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee8c:	e59d0004 	ldr	r0, [sp, #4]
   2ee90:	ebfffaac 	bl	2d948 <strlcat>
   2ee94:	e59f2104 	ldr	r2, [pc, #260]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ee98:	e59f1110 	ldr	r1, [pc, #272]	; 2efb0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2ee9c:	e59d0004 	ldr	r0, [sp, #4]
   2eea0:	ebfffaa8 	bl	2d948 <strlcat>
   2eea4:	e28d101c 	add	r1, sp, #28
   2eea8:	e59f20f0 	ldr	r2, [pc, #240]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2eeac:	e59d0004 	ldr	r0, [sp, #4]
   2eeb0:	ebfffaa4 	bl	2d948 <strlcat>
   2eeb4:	e59f20e4 	ldr	r2, [pc, #228]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2eeb8:	e59f10f4 	ldr	r1, [pc, #244]	; 2efb4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2eebc:	e59d0004 	ldr	r0, [sp, #4]
   2eec0:	ebfffaa0 	bl	2d948 <strlcat>
   2eec4:	e59d0004 	ldr	r0, [sp, #4]
   2eec8:	ebffea9b 	bl	2993c <strlen>
   2eecc:	e2800001 	add	r0, r0, #1
   2eed0:	e0845000 	add	r5, r4, r0
   2eed4:	e59f30dc 	ldr	r3, [pc, #220]	; 2efb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2eed8:	e2856001 	add	r6, r5, #1
   2eedc:	e1560003 	cmp	r6, r3
   2eee0:	8a00001c 	bhi	2ef58 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2eee4:	e3540000 	cmp	r4, #0
   2eee8:	0a00000b 	beq	2ef1c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2eeec:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2eef0:	e2833060 	add	r3, r3, #96	; 0x60
   2eef4:	e5933000 	ldr	r3, [r3]
   2eef8:	e3530000 	cmp	r3, #0
   2eefc:	0a000012 	beq	2ef4c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ef00:	e59d3004 	ldr	r3, [sp, #4]
   2ef04:	e1a02004 	mov	r2, r4
   2ef08:	e0830000 	add	r0, r3, r0
   2ef0c:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ef10:	e2833060 	add	r3, r3, #96	; 0x60
   2ef14:	e5931000 	ldr	r1, [r3]
   2ef18:	ebffecac 	bl	2a1d0 <memcpy>
   2ef1c:	e3a03000 	mov	r3, #0
   2ef20:	e59f2094 	ldr	r2, [pc, #148]	; 2efbc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   2ef24:	e5920000 	ldr	r0, [r2]
   2ef28:	e28d2ee5 	add	r2, sp, #3664	; 0xe50
   2ef2c:	e0825005 	add	r5, r2, r5
   2ef30:	e1500003 	cmp	r0, r3
   2ef34:	e5453e20 	strb	r3, [r5, #-3616]	; 0xfffff1e0
   2ef38:	0a000003 	beq	2ef4c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ef3c:	e1a02006 	mov	r2, r6
   2ef40:	e59d1004 	ldr	r1, [sp, #4]
   2ef44:	e2800f65 	add	r0, r0, #404	; 0x194
   2ef48:	eb00060d 	bl	30784 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2ef4c:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ef50:	e28dd050 	add	sp, sp, #80	; 0x50
   2ef54:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ef58:	ebffdd4c 	bl	26490 <CLogger::Get()>
   2ef5c:	e59f305c 	ldr	r3, [pc, #92]	; 2efc0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   2ef60:	e3a02002 	mov	r2, #2
   2ef64:	e59f1058 	ldr	r1, [pc, #88]	; 2efc4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   2ef68:	ebffdc85 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ef6c:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ef70:	e28dd050 	add	sp, sp, #80	; 0x50
   2ef74:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ef78:	e59f2020 	ldr	r2, [pc, #32]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ef7c:	e59f1044 	ldr	r1, [pc, #68]	; 2efc8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   2ef80:	e59d0004 	ldr	r0, [sp, #4]
   2ef84:	ebfffa6f 	bl	2d948 <strlcat>
   2ef88:	e1a01005 	mov	r1, r5
   2ef8c:	e59f200c 	ldr	r2, [pc, #12]	; 2efa0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ef90:	e59d0004 	ldr	r0, [sp, #4]
   2ef94:	ebfffa6b 	bl	2d948 <strlcat>
   2ef98:	eaffffb5 	b	2ee74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   2ef9c:	00047954 	.word	0x00047954
   2efa0:	00004e20 	.word	0x00004e20
   2efa4:	00047958 	.word	0x00047958
   2efa8:	000488f4 	.word	0x000488f4
   2efac:	00047968 	.word	0x00047968
   2efb0:	00047974 	.word	0x00047974
   2efb4:	0004799c 	.word	0x0004799c
   2efb8:	00004e1f 	.word	0x00004e1f
   2efbc:	0005022c 	.word	0x0005022c
   2efc0:	00047980 	.word	0x00047980
   2efc4:	000478c8 	.word	0x000478c8
   2efc8:	00044b54 	.word	0x00044b54

0002efcc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   2efcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2efd0:	e1a08002 	mov	r8, r2
   2efd4:	e1a07003 	mov	r7, r3
   2efd8:	e1a05001 	mov	r5, r1
   2efdc:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   2efe0:	e24dd028 	sub	sp, sp, #40	; 0x28
   2efe4:	e1a03001 	mov	r3, r1
   2efe8:	e28d4018 	add	r4, sp, #24
   2efec:	e59f20c4 	ldr	r2, [pc, #196]	; 2f0b8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2eff0:	e3a0100a 	mov	r1, #10
   2eff4:	e1a06000 	mov	r6, r0
   2eff8:	e28d000c 	add	r0, sp, #12
   2effc:	ebfffaac 	bl	2dab4 <snprintf>
   2f000:	e59f20b4 	ldr	r2, [pc, #180]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f004:	e59f10b4 	ldr	r1, [pc, #180]	; 2f0c0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   2f008:	e1a00004 	mov	r0, r4
   2f00c:	ebfffa31 	bl	2d8d8 <strlcpy>
   2f010:	e1a01008 	mov	r1, r8
   2f014:	e59f20a0 	ldr	r2, [pc, #160]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f018:	e1a00004 	mov	r0, r4
   2f01c:	ebfffa49 	bl	2d948 <strlcat>
   2f020:	e59f2094 	ldr	r2, [pc, #148]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f024:	e59f1098 	ldr	r1, [pc, #152]	; 2f0c4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   2f028:	e1a00004 	mov	r0, r4
   2f02c:	ebfffa45 	bl	2d948 <strlcat>
   2f030:	e59f2084 	ldr	r2, [pc, #132]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f034:	e59f108c 	ldr	r1, [pc, #140]	; 2f0c8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   2f038:	e1a00004 	mov	r0, r4
   2f03c:	ebfffa41 	bl	2d948 <strlcat>
   2f040:	e1a01007 	mov	r1, r7
   2f044:	e1a00004 	mov	r0, r4
   2f048:	e59f206c 	ldr	r2, [pc, #108]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f04c:	ebfffa3d 	bl	2d948 <strlcat>
   2f050:	e3750001 	cmn	r5, #1
   2f054:	0a000007 	beq	2f078 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   2f058:	e59f205c 	ldr	r2, [pc, #92]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f05c:	e59f1068 	ldr	r1, [pc, #104]	; 2f0cc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   2f060:	e1a00004 	mov	r0, r4
   2f064:	ebfffa37 	bl	2d948 <strlcat>
   2f068:	e28d100c 	add	r1, sp, #12
   2f06c:	e59f2048 	ldr	r2, [pc, #72]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f070:	e1a00004 	mov	r0, r4
   2f074:	ebfffa33 	bl	2d948 <strlcat>
   2f078:	e59f203c 	ldr	r2, [pc, #60]	; 2f0bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2f07c:	e59f104c 	ldr	r1, [pc, #76]	; 2f0d0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   2f080:	e1a00004 	mov	r0, r4
   2f084:	ebfffa2f 	bl	2d948 <strlcat>
   2f088:	e1a00004 	mov	r0, r4
   2f08c:	ebffea2a 	bl	2993c <strlen>
   2f090:	e58d4000 	str	r4, [sp]
   2f094:	e58d0004 	str	r0, [sp, #4]
   2f098:	e1a03005 	mov	r3, r5
   2f09c:	e1a00006 	mov	r0, r6
   2f0a0:	e59f202c 	ldr	r2, [pc, #44]	; 2f0d4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   2f0a4:	e59f102c 	ldr	r1, [pc, #44]	; 2f0d8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   2f0a8:	ebffff4e 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f0ac:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   2f0b0:	e28dd028 	add	sp, sp, #40	; 0x28
   2f0b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2f0b8:	00047954 	.word	0x00047954
   2f0bc:	00002710 	.word	0x00002710
   2f0c0:	00047958 	.word	0x00047958
   2f0c4:	000488f4 	.word	0x000488f4
   2f0c8:	00044b54 	.word	0x00044b54
   2f0cc:	00047968 	.word	0x00047968
   2f0d0:	00047990 	.word	0x00047990
   2f0d4:	00049280 	.word	0x00049280
   2f0d8:	000479a0 	.word	0x000479a0

0002f0dc <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   2f0dc:	e1a03002 	mov	r3, r2
   2f0e0:	e1a02001 	mov	r2, r1
   2f0e4:	e3e01000 	mvn	r1, #0
   2f0e8:	eaffffb7 	b	2efcc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

0002f0ec <CommandHandler::sendAPIReq(char const*)>:
   2f0ec:	e92d4010 	push	{r4, lr}
   2f0f0:	e24dd070 	sub	sp, sp, #112	; 0x70
   2f0f4:	e3a02064 	mov	r2, #100	; 0x64
   2f0f8:	e1a04001 	mov	r4, r1
   2f0fc:	e28d0008 	add	r0, sp, #8
   2f100:	e59f1068 	ldr	r1, [pc, #104]	; 2f170 <CommandHandler::sendAPIReq(char const*)+0x84>
   2f104:	ebfff9f3 	bl	2d8d8 <strlcpy>
   2f108:	e28d0008 	add	r0, sp, #8
   2f10c:	ebffea0a 	bl	2993c <strlen>
   2f110:	e28d3008 	add	r3, sp, #8
   2f114:	e1a01004 	mov	r1, r4
   2f118:	e0830000 	add	r0, r3, r0
   2f11c:	e3a02064 	mov	r2, #100	; 0x64
   2f120:	ebfff9ec 	bl	2d8d8 <strlcpy>
   2f124:	e28d0008 	add	r0, sp, #8
   2f128:	ebffea03 	bl	2993c <strlen>
   2f12c:	e28d3008 	add	r3, sp, #8
   2f130:	e0830000 	add	r0, r3, r0
   2f134:	e3a02064 	mov	r2, #100	; 0x64
   2f138:	e59f1034 	ldr	r1, [pc, #52]	; 2f174 <CommandHandler::sendAPIReq(char const*)+0x88>
   2f13c:	ebfff9e5 	bl	2d8d8 <strlcpy>
   2f140:	e59f3030 	ldr	r3, [pc, #48]	; 2f178 <CommandHandler::sendAPIReq(char const*)+0x8c>
   2f144:	e5930000 	ldr	r0, [r3]
   2f148:	e3500000 	cmp	r0, #0
   2f14c:	0a000005 	beq	2f168 <CommandHandler::sendAPIReq(char const*)+0x7c>
   2f150:	e3a03000 	mov	r3, #0
   2f154:	e28d2008 	add	r2, sp, #8
   2f158:	e58d3004 	str	r3, [sp, #4]
   2f15c:	e58d3000 	str	r3, [sp]
   2f160:	e59f1014 	ldr	r1, [pc, #20]	; 2f17c <CommandHandler::sendAPIReq(char const*)+0x90>
   2f164:	ebffff1f 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f168:	e28dd070 	add	sp, sp, #112	; 0x70
   2f16c:	e8bd8010 	pop	{r4, pc}
   2f170:	000479a4 	.word	0x000479a4
   2f174:	000488f4 	.word	0x000488f4
   2f178:	0005022c 	.word	0x0005022c
   2f17c:	000479ac 	.word	0x000479ac

0002f180 <CommandHandler::logDebugMessage(char const*)>:
   2f180:	e92d4070 	push	{r4, r5, r6, lr}
   2f184:	e1a06001 	mov	r6, r1
   2f188:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2f18c:	e24dd038 	sub	sp, sp, #56	; 0x38
   2f190:	e59f4060 	ldr	r4, [pc, #96]	; 2f1f8 <CommandHandler::logDebugMessage(char const*)+0x78>
   2f194:	e28d3014 	add	r3, sp, #20
   2f198:	e1a05000 	mov	r5, r0
   2f19c:	e1a02004 	mov	r2, r4
   2f1a0:	e1a00003 	mov	r0, r3
   2f1a4:	e59f1050 	ldr	r1, [pc, #80]	; 2f1fc <CommandHandler::logDebugMessage(char const*)+0x7c>
   2f1a8:	e58d300c 	str	r3, [sp, #12]
   2f1ac:	ebfff9c9 	bl	2d8d8 <strlcpy>
   2f1b0:	e1a02004 	mov	r2, r4
   2f1b4:	e1a01006 	mov	r1, r6
   2f1b8:	e59d000c 	ldr	r0, [sp, #12]
   2f1bc:	ebfff9e1 	bl	2d948 <strlcat>
   2f1c0:	e1a02004 	mov	r2, r4
   2f1c4:	e59d000c 	ldr	r0, [sp, #12]
   2f1c8:	e59f1030 	ldr	r1, [pc, #48]	; 2f200 <CommandHandler::logDebugMessage(char const*)+0x80>
   2f1cc:	ebfff9dd 	bl	2d948 <strlcat>
   2f1d0:	e3a03000 	mov	r3, #0
   2f1d4:	e59d200c 	ldr	r2, [sp, #12]
   2f1d8:	e1a00005 	mov	r0, r5
   2f1dc:	e58d3004 	str	r3, [sp, #4]
   2f1e0:	e58d3000 	str	r3, [sp]
   2f1e4:	e59f1018 	ldr	r1, [pc, #24]	; 2f204 <CommandHandler::logDebugMessage(char const*)+0x84>
   2f1e8:	ebfffefe 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f1ec:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2f1f0:	e28dd038 	add	sp, sp, #56	; 0x38
   2f1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f1f8:	00004e20 	.word	0x00004e20
   2f1fc:	000479b4 	.word	0x000479b4
   2f200:	000488f4 	.word	0x000488f4
   2f204:	000479bc 	.word	0x000479bc

0002f208 <CommandHandler::handleFileEnd(char const*)>:
   2f208:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f20c:	e2804a05 	add	r4, r0, #20480	; 0x5000
   2f210:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   2f214:	e24dde17 	sub	sp, sp, #368	; 0x170
   2f218:	e3520000 	cmp	r2, #0
   2f21c:	0a000063 	beq	2f3b0 <CommandHandler::handleFileEnd(char const*)+0x1a8>
   2f220:	e1a08000 	mov	r8, r0
   2f224:	e28d2014 	add	r2, sp, #20
   2f228:	e3a03014 	mov	r3, #20
   2f22c:	e59f0264 	ldr	r0, [pc, #612]	; 2f498 <CommandHandler::handleFileEnd(char const*)+0x290>
   2f230:	e1a06001 	mov	r6, r1
   2f234:	ebfffa5d 	bl	2dbb0 <jsonGetValueForKey>
   2f238:	e2505000 	subs	r5, r0, #0
   2f23c:	1a00006d 	bne	2f3f8 <CommandHandler::handleFileEnd(char const*)+0x1f0>
   2f240:	e1a01006 	mov	r1, r6
   2f244:	e28d202c 	add	r2, sp, #44	; 0x2c
   2f248:	e3a03014 	mov	r3, #20
   2f24c:	e59f0248 	ldr	r0, [pc, #584]	; 2f49c <CommandHandler::handleFileEnd(char const*)+0x294>
   2f250:	ebfffa56 	bl	2dbb0 <jsonGetValueForKey>
   2f254:	e2506000 	subs	r6, r0, #0
   2f258:	1a000060 	bne	2f3e0 <CommandHandler::handleFileEnd(char const*)+0x1d8>
   2f25c:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   2f260:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   2f264:	eb000582 	bl	30874 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   2f268:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   2f26c:	e1a07000 	mov	r7, r0
   2f270:	e58d0004 	str	r0, [sp, #4]
   2f274:	e58d6008 	str	r6, [sp, #8]
   2f278:	e58d5000 	str	r5, [sp]
   2f27c:	e28d0044 	add	r0, sp, #68	; 0x44
   2f280:	e59f2218 	ldr	r2, [pc, #536]	; 2f4a0 <CommandHandler::handleFileEnd(char const*)+0x298>
   2f284:	e3a01064 	mov	r1, #100	; 0x64
   2f288:	ebfffa09 	bl	2dab4 <snprintf>
   2f28c:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   2f290:	e1550003 	cmp	r5, r3
   2f294:	0a000047 	beq	2f3b8 <CommandHandler::handleFileEnd(char const*)+0x1b0>
   2f298:	ebffdc7c 	bl	26490 <CLogger::Get()>
   2f29c:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   2f2a0:	e3a02002 	mov	r2, #2
   2f2a4:	e58d3004 	str	r3, [sp, #4]
   2f2a8:	e58d5008 	str	r5, [sp, #8]
   2f2ac:	e58d4000 	str	r4, [sp]
   2f2b0:	e59f31ec 	ldr	r3, [pc, #492]	; 2f4a4 <CommandHandler::handleFileEnd(char const*)+0x29c>
   2f2b4:	e59f11ec 	ldr	r1, [pc, #492]	; 2f4a8 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   2f2b8:	ebffdbb1 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f2bc:	e3a03000 	mov	r3, #0
   2f2c0:	e28d2044 	add	r2, sp, #68	; 0x44
   2f2c4:	e58d3004 	str	r3, [sp, #4]
   2f2c8:	e58d3000 	str	r3, [sp]
   2f2cc:	e59f11d8 	ldr	r1, [pc, #472]	; 2f4ac <CommandHandler::handleFileEnd(char const*)+0x2a4>
   2f2d0:	e1a00008 	mov	r0, r8
   2f2d4:	ebfffec3 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f2d8:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   2f2dc:	e3500000 	cmp	r0, #0
   2f2e0:	0a000000 	beq	2f2e8 <CommandHandler::handleFileEnd(char const*)+0xe0>
   2f2e4:	ebffed9a 	bl	2a954 <operator delete[](void*)>
   2f2e8:	e3a05000 	mov	r5, #0
   2f2ec:	e2887a07 	add	r7, r8, #28672	; 0x7000
   2f2f0:	e59737f4 	ldr	r3, [r7, #2036]	; 0x7f4
   2f2f4:	e5845860 	str	r5, [r4, #2144]	; 0x860
   2f2f8:	e1530005 	cmp	r3, r5
   2f2fc:	e5845864 	str	r5, [r4, #2148]	; 0x864
   2f300:	0a000062 	beq	2f490 <CommandHandler::handleFileEnd(char const*)+0x288>
   2f304:	e3a0a0c8 	mov	sl, #200	; 0xc8
   2f308:	e1a02005 	mov	r2, r5
   2f30c:	e2884b16 	add	r4, r8, #22528	; 0x5800
   2f310:	e59f9198 	ldr	r9, [pc, #408]	; 2f4b0 <CommandHandler::handleFileEnd(char const*)+0x2a8>
   2f314:	e28440b4 	add	r4, r4, #180	; 0xb4
   2f318:	e28d60a8 	add	r6, sp, #168	; 0xa8
   2f31c:	e5941000 	ldr	r1, [r4]
   2f320:	e1510002 	cmp	r1, r2
   2f324:	0a00000c 	beq	2f35c <CommandHandler::handleFileEnd(char const*)+0x154>
   2f328:	e5940fa0 	ldr	r0, [r4, #4000]	; 0xfa0
   2f32c:	e1a03005 	mov	r3, r5
   2f330:	e58d0008 	str	r0, [sp, #8]
   2f334:	e58d1004 	str	r1, [sp, #4]
   2f338:	e58d2000 	str	r2, [sp]
   2f33c:	e1a0100a 	mov	r1, sl
   2f340:	e1a02009 	mov	r2, r9
   2f344:	e1a00006 	mov	r0, r6
   2f348:	ebfff9d9 	bl	2dab4 <snprintf>
   2f34c:	e1a01006 	mov	r1, r6
   2f350:	e1a00008 	mov	r0, r8
   2f354:	ebffff89 	bl	2f180 <CommandHandler::logDebugMessage(char const*)>
   2f358:	e5942000 	ldr	r2, [r4]
   2f35c:	e59717f4 	ldr	r1, [r7, #2036]	; 0x7f4
   2f360:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   2f364:	e2855001 	add	r5, r5, #1
   2f368:	e1510005 	cmp	r1, r5
   2f36c:	e0822003 	add	r2, r2, r3
   2f370:	e2844004 	add	r4, r4, #4
   2f374:	8affffe8 	bhi	2f31c <CommandHandler::handleFileEnd(char const*)+0x114>
   2f378:	e2882901 	add	r2, r8, #16384	; 0x4000
   2f37c:	e5920ff8 	ldr	r0, [r2, #4088]	; 0xff8
   2f380:	e5923ff4 	ldr	r3, [r2, #4084]	; 0xff4
   2f384:	e5971804 	ldr	r1, [r7, #2052]	; 0x804
   2f388:	e5972800 	ldr	r2, [r7, #2048]	; 0x800
   2f38c:	e98d0003 	stmib	sp, {r0, r1}
   2f390:	e58d2000 	str	r2, [sp]
   2f394:	e3a010c8 	mov	r1, #200	; 0xc8
   2f398:	e59f2114 	ldr	r2, [pc, #276]	; 2f4b4 <CommandHandler::handleFileEnd(char const*)+0x2ac>
   2f39c:	e1a00006 	mov	r0, r6
   2f3a0:	ebfff9c3 	bl	2dab4 <snprintf>
   2f3a4:	e1a01006 	mov	r1, r6
   2f3a8:	e1a00008 	mov	r0, r8
   2f3ac:	ebffff73 	bl	2f180 <CommandHandler::logDebugMessage(char const*)>
   2f3b0:	e28dde17 	add	sp, sp, #368	; 0x170
   2f3b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f3b8:	e1560007 	cmp	r6, r7
   2f3bc:	0a000013 	beq	2f410 <CommandHandler::handleFileEnd(char const*)+0x208>
   2f3c0:	ebffdc32 	bl	26490 <CLogger::Get()>
   2f3c4:	e58d500c 	str	r5, [sp, #12]
   2f3c8:	e88d00d0 	stm	sp, {r4, r6, r7}
   2f3cc:	e59f30e4 	ldr	r3, [pc, #228]	; 2f4b8 <CommandHandler::handleFileEnd(char const*)+0x2b0>
   2f3d0:	e3a02002 	mov	r2, #2
   2f3d4:	e59f10cc 	ldr	r1, [pc, #204]	; 2f4a8 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   2f3d8:	ebffdb69 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f3dc:	eaffffb6 	b	2f2bc <CommandHandler::handleFileEnd(char const*)+0xb4>
   2f3e0:	e28d002c 	add	r0, sp, #44	; 0x2c
   2f3e4:	e3a02010 	mov	r2, #16
   2f3e8:	e3a01000 	mov	r1, #0
   2f3ec:	ebffea9f 	bl	29e70 <strtoul>
   2f3f0:	e1a06000 	mov	r6, r0
   2f3f4:	eaffff98 	b	2f25c <CommandHandler::handleFileEnd(char const*)+0x54>
   2f3f8:	e28d0014 	add	r0, sp, #20
   2f3fc:	e3a0200a 	mov	r2, #10
   2f400:	e3a01000 	mov	r1, #0
   2f404:	ebffea99 	bl	29e70 <strtoul>
   2f408:	e1a05000 	mov	r5, r0
   2f40c:	eaffff8b 	b	2f240 <CommandHandler::handleFileEnd(char const*)+0x38>
   2f410:	e3a03000 	mov	r3, #0
   2f414:	e28d2044 	add	r2, sp, #68	; 0x44
   2f418:	e58d3004 	str	r3, [sp, #4]
   2f41c:	e58d3000 	str	r3, [sp]
   2f420:	e59f1094 	ldr	r1, [pc, #148]	; 2f4bc <CommandHandler::handleFileEnd(char const*)+0x2b4>
   2f424:	e1a00008 	mov	r0, r8
   2f428:	ebfffe6e 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f42c:	e59f108c 	ldr	r1, [pc, #140]	; 2f4c0 <CommandHandler::handleFileEnd(char const*)+0x2b8>
   2f430:	e2840065 	add	r0, r4, #101	; 0x65
   2f434:	ebffe965 	bl	299d0 <strcasecmp>
   2f438:	e3500000 	cmp	r0, #0
   2f43c:	03a05001 	moveq	r5, #1
   2f440:	13a05000 	movne	r5, #0
   2f444:	1a000008 	bne	2f46c <CommandHandler::handleFileEnd(char const*)+0x264>
   2f448:	e59f0074 	ldr	r0, [pc, #116]	; 2f4c4 <CommandHandler::handleFileEnd(char const*)+0x2bc>
   2f44c:	ebfff8ee 	bl	2d80c <microsDelay>
   2f450:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   2f454:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   2f458:	e284108e 	add	r1, r4, #142	; 0x8e
   2f45c:	e58d5000 	str	r5, [sp]
   2f460:	e1a00008 	mov	r0, r8
   2f464:	ebfffd7c 	bl	2ea5c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   2f468:	eaffff9a 	b	2f2d8 <CommandHandler::handleFileEnd(char const*)+0xd0>
   2f46c:	ebffdc07 	bl	26490 <CLogger::Get()>
   2f470:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   2f474:	e3a02004 	mov	r2, #4
   2f478:	e58d3004 	str	r3, [sp, #4]
   2f47c:	e58d4000 	str	r4, [sp]
   2f480:	e59f3040 	ldr	r3, [pc, #64]	; 2f4c8 <CommandHandler::handleFileEnd(char const*)+0x2c0>
   2f484:	e59f101c 	ldr	r1, [pc, #28]	; 2f4a8 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   2f488:	ebffdb3d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f48c:	eaffffef 	b	2f450 <CommandHandler::handleFileEnd(char const*)+0x248>
   2f490:	e28d60a8 	add	r6, sp, #168	; 0xa8
   2f494:	eaffffb7 	b	2f378 <CommandHandler::handleFileEnd(char const*)+0x170>
   2f498:	000479c0 	.word	0x000479c0
   2f49c:	000479cc 	.word	0x000479cc
   2f4a0:	000479d0 	.word	0x000479d0
   2f4a4:	00047a14 	.word	0x00047a14
   2f4a8:	000478c8 	.word	0x000478c8
   2f4ac:	00047a48 	.word	0x00047a48
   2f4b0:	00047b0c 	.word	0x00047b0c
   2f4b4:	00047ad0 	.word	0x00047ad0
   2f4b8:	00047a54 	.word	0x00047a54
   2f4bc:	00047aa0 	.word	0x00047aa0
   2f4c0:	00047aac 	.word	0x00047aac
   2f4c4:	000186a0 	.word	0x000186a0
   2f4c8:	00047ab8 	.word	0x00047ab8

0002f4cc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   2f4cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f4d0:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   2f4d4:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   2f4d8:	e28dc0f0 	add	ip, sp, #240	; 0xf0
   2f4dc:	e1a05000 	mov	r5, r0
   2f4e0:	e1a08002 	mov	r8, r2
   2f4e4:	e1a07003 	mov	r7, r3
   2f4e8:	e1a0200c 	mov	r2, ip
   2f4ec:	e3a030c8 	mov	r3, #200	; 0xc8
   2f4f0:	e59f026c 	ldr	r0, [pc, #620]	; 2f764 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   2f4f4:	e58dc008 	str	ip, [sp, #8]
   2f4f8:	e1a04001 	mov	r4, r1
   2f4fc:	ebfff9ab 	bl	2dbb0 <jsonGetValueForKey>
   2f500:	e3500000 	cmp	r0, #0
   2f504:	1a000002 	bne	2f514 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x48>
   2f508:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   2f50c:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   2f510:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f514:	e3a06000 	mov	r6, #0
   2f518:	e3a03014 	mov	r3, #20
   2f51c:	e28d2014 	add	r2, sp, #20
   2f520:	e1a01004 	mov	r1, r4
   2f524:	e59f023c 	ldr	r0, [pc, #572]	; 2f768 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   2f528:	e5cd6014 	strb	r6, [sp, #20]
   2f52c:	ebfff99f 	bl	2dbb0 <jsonGetValueForKey>
   2f530:	e1a01006 	mov	r1, r6
   2f534:	e3a0200a 	mov	r2, #10
   2f538:	e28d0014 	add	r0, sp, #20
   2f53c:	e5cd61bc 	strb	r6, [sp, #444]	; 0x1bc
   2f540:	ebffea4a 	bl	29e70 <strtoul>
   2f544:	e59f1220 	ldr	r1, [pc, #544]	; 2f76c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   2f548:	e1a09000 	mov	r9, r0
   2f54c:	e59d0008 	ldr	r0, [sp, #8]
   2f550:	ebffe91e 	bl	299d0 <strcasecmp>
   2f554:	e1500006 	cmp	r0, r6
   2f558:	0a00000a 	beq	2f588 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xbc>
   2f55c:	e59f120c 	ldr	r1, [pc, #524]	; 2f770 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   2f560:	e59d0008 	ldr	r0, [sp, #8]
   2f564:	ebffe919 	bl	299d0 <strcasecmp>
   2f568:	e3500000 	cmp	r0, #0
   2f56c:	1a00000b 	bne	2f5a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd4>
   2f570:	e1a03007 	mov	r3, r7
   2f574:	e1a02008 	mov	r2, r8
   2f578:	e1a01004 	mov	r1, r4
   2f57c:	e1a00005 	mov	r0, r5
   2f580:	ebfffd9c 	bl	2ebf8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   2f584:	eaffffdf 	b	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f588:	e1a01004 	mov	r1, r4
   2f58c:	e1a00005 	mov	r0, r5
   2f590:	ebfffd5b 	bl	2eb04 <CommandHandler::handleFileStart(char const*)>
   2f594:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   2f598:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   2f59c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f5a0:	e59f11cc 	ldr	r1, [pc, #460]	; 2f774 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   2f5a4:	e59d0008 	ldr	r0, [sp, #8]
   2f5a8:	ebffe908 	bl	299d0 <strcasecmp>
   2f5ac:	e3500000 	cmp	r0, #0
   2f5b0:	0a00003e 	beq	2f6b0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1e4>
   2f5b4:	e59f11bc 	ldr	r1, [pc, #444]	; 2f778 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   2f5b8:	e59d0008 	ldr	r0, [sp, #8]
   2f5bc:	ebffe903 	bl	299d0 <strcasecmp>
   2f5c0:	e3500000 	cmp	r0, #0
   2f5c4:	1a00003d 	bne	2f6c0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1f4>
   2f5c8:	e28d3f6f 	add	r3, sp, #444	; 0x1bc
   2f5cc:	e1a01008 	mov	r1, r8
   2f5d0:	e1a00003 	mov	r0, r3
   2f5d4:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   2f5d8:	e58d300c 	str	r3, [sp, #12]
   2f5dc:	ebfff8bd 	bl	2d8d8 <strlcpy>
   2f5e0:	e59d000c 	ldr	r0, [sp, #12]
   2f5e4:	ebffe8d4 	bl	2993c <strlen>
   2f5e8:	e2477001 	sub	r7, r7, #1
   2f5ec:	e0577000 	subs	r7, r7, r0
   2f5f0:	e0888000 	add	r8, r8, r0
   2f5f4:	e3a030c8 	mov	r3, #200	; 0xc8
   2f5f8:	e59d2008 	ldr	r2, [sp, #8]
   2f5fc:	e59d100c 	ldr	r1, [sp, #12]
   2f600:	e59f015c 	ldr	r0, [pc, #348]	; 2f764 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   2f604:	12888001 	addne	r8, r8, #1
   2f608:	ebfff968 	bl	2dbb0 <jsonGetValueForKey>
   2f60c:	e3a03014 	mov	r3, #20
   2f610:	e59d100c 	ldr	r1, [sp, #12]
   2f614:	e08d2003 	add	r2, sp, r3
   2f618:	e59f0148 	ldr	r0, [pc, #328]	; 2f768 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   2f61c:	ebfff963 	bl	2dbb0 <jsonGetValueForKey>
   2f620:	e59f1154 	ldr	r1, [pc, #340]	; 2f77c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   2f624:	e59d0008 	ldr	r0, [sp, #8]
   2f628:	ebffe8e8 	bl	299d0 <strcasecmp>
   2f62c:	e2501000 	subs	r1, r0, #0
   2f630:	0a000042 	beq	2f740 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x274>
   2f634:	e3a0c000 	mov	ip, #0
   2f638:	e59f0140 	ldr	r0, [pc, #320]	; 2f780 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   2f63c:	e28d4e99 	add	r4, sp, #2448	; 0x990
   2f640:	e28de028 	add	lr, sp, #40	; 0x28
   2f644:	e1a03007 	mov	r3, r7
   2f648:	e59d100c 	ldr	r1, [sp, #12]
   2f64c:	e1a02008 	mov	r2, r8
   2f650:	e58d0004 	str	r0, [sp, #4]
   2f654:	e58d4000 	str	r4, [sp]
   2f658:	e1a00005 	mov	r0, r5
   2f65c:	e58de00c 	str	lr, [sp, #12]
   2f660:	e5cdc990 	strb	ip, [sp, #2448]	; 0x990
   2f664:	ebfffcb6 	bl	2e944 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   2f668:	e59d1008 	ldr	r1, [sp, #8]
   2f66c:	e3a020c8 	mov	r2, #200	; 0xc8
   2f670:	e59d000c 	ldr	r0, [sp, #12]
   2f674:	ebfff897 	bl	2d8d8 <strlcpy>
   2f678:	e3a020c8 	mov	r2, #200	; 0xc8
   2f67c:	e59f1100 	ldr	r1, [pc, #256]	; 2f784 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   2f680:	e59d000c 	ldr	r0, [sp, #12]
   2f684:	ebfff8af 	bl	2d948 <strlcat>
   2f688:	e1a00004 	mov	r0, r4
   2f68c:	ebffe8aa 	bl	2993c <strlen>
   2f690:	e3500000 	cmp	r0, #0
   2f694:	0affff9b 	beq	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f698:	e1a03004 	mov	r3, r4
   2f69c:	e59d200c 	ldr	r2, [sp, #12]
   2f6a0:	e1a01009 	mov	r1, r9
   2f6a4:	e1a00005 	mov	r0, r5
   2f6a8:	ebfffe47 	bl	2efcc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   2f6ac:	eaffff95 	b	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f6b0:	e1a01004 	mov	r1, r4
   2f6b4:	e1a00005 	mov	r0, r5
   2f6b8:	ebfffed2 	bl	2f208 <CommandHandler::handleFileEnd(char const*)>
   2f6bc:	eaffff91 	b	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f6c0:	e59f00b8 	ldr	r0, [pc, #184]	; 2f780 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   2f6c4:	e28d9e99 	add	r9, sp, #2448	; 0x990
   2f6c8:	e28dc028 	add	ip, sp, #40	; 0x28
   2f6cc:	e1a03007 	mov	r3, r7
   2f6d0:	e1a02008 	mov	r2, r8
   2f6d4:	e1a01004 	mov	r1, r4
   2f6d8:	e58d0004 	str	r0, [sp, #4]
   2f6dc:	e58d9000 	str	r9, [sp]
   2f6e0:	e1a00005 	mov	r0, r5
   2f6e4:	e58dc00c 	str	ip, [sp, #12]
   2f6e8:	e5cd6990 	strb	r6, [sp, #2448]	; 0x990
   2f6ec:	ebfffc94 	bl	2e944 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   2f6f0:	e59d1008 	ldr	r1, [sp, #8]
   2f6f4:	e3a020c8 	mov	r2, #200	; 0xc8
   2f6f8:	e59d000c 	ldr	r0, [sp, #12]
   2f6fc:	ebfff875 	bl	2d8d8 <strlcpy>
   2f700:	e3a020c8 	mov	r2, #200	; 0xc8
   2f704:	e59f1078 	ldr	r1, [pc, #120]	; 2f784 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   2f708:	e59d000c 	ldr	r0, [sp, #12]
   2f70c:	ebfff88d 	bl	2d948 <strlcat>
   2f710:	e1a00009 	mov	r0, r9
   2f714:	ebffe888 	bl	2993c <strlen>
   2f718:	e3500000 	cmp	r0, #0
   2f71c:	0affff79 	beq	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f720:	e58d6004 	str	r6, [sp, #4]
   2f724:	e58d6000 	str	r6, [sp]
   2f728:	e1a03006 	mov	r3, r6
   2f72c:	e1a02009 	mov	r2, r9
   2f730:	e59d100c 	ldr	r1, [sp, #12]
   2f734:	e1a00005 	mov	r0, r5
   2f738:	ebfffdaa 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f73c:	eaffff71 	b	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f740:	e28d0014 	add	r0, sp, #20
   2f744:	e3a0200a 	mov	r2, #10
   2f748:	ebffe9c8 	bl	29e70 <strtoul>
   2f74c:	e59f3034 	ldr	r3, [pc, #52]	; 2f788 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   2f750:	e1a01000 	mov	r1, r0
   2f754:	e59f2030 	ldr	r2, [pc, #48]	; 2f78c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   2f758:	e1a00005 	mov	r0, r5
   2f75c:	ebfffe1a 	bl	2efcc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   2f760:	eaffff68 	b	2f508 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f764:	00040804 	.word	0x00040804
   2f768:	00047b44 	.word	0x00047b44
   2f76c:	00047b4c 	.word	0x00047b4c
   2f770:	00047b54 	.word	0x00047b54
   2f774:	00047b5c 	.word	0x00047b5c
   2f778:	000479a0 	.word	0x000479a0
   2f77c:	00047b64 	.word	0x00047b64
   2f780:	00004e20 	.word	0x00004e20
   2f784:	00047b84 	.word	0x00047b84
   2f788:	00047b6c 	.word	0x00047b6c
   2f78c:	00047b78 	.word	0x00047b78

0002f790 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   2f790:	e92d4070 	push	{r4, r5, r6, lr}
   2f794:	e24dde7e 	sub	sp, sp, #2016	; 0x7e0
   2f798:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   2f79c:	e28d300c 	add	r3, sp, #12
   2f7a0:	e1a04002 	mov	r4, r2
   2f7a4:	e1a06000 	mov	r6, r0
   2f7a8:	92822001 	addls	r2, r2, #1
   2f7ac:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   2f7b0:	e1a00003 	mov	r0, r3
   2f7b4:	e1a05001 	mov	r5, r1
   2f7b8:	e58d3004 	str	r3, [sp, #4]
   2f7bc:	ebfff845 	bl	2d8d8 <strlcpy>
   2f7c0:	e59d0004 	ldr	r0, [sp, #4]
   2f7c4:	ebffe85c 	bl	2993c <strlen>
   2f7c8:	e2444001 	sub	r4, r4, #1
   2f7cc:	e2802001 	add	r2, r0, #1
   2f7d0:	e0443000 	sub	r3, r4, r0
   2f7d4:	e59d1004 	ldr	r1, [sp, #4]
   2f7d8:	e0852002 	add	r2, r5, r2
   2f7dc:	e1a00006 	mov	r0, r6
   2f7e0:	ebffff39 	bl	2f4cc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   2f7e4:	e28dde7e 	add	sp, sp, #2016	; 0x7e0
   2f7e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f7ec <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   2f7ec:	e59f3018 	ldr	r3, [pc, #24]	; 2f80c <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   2f7f0:	e5933000 	ldr	r3, [r3]
   2f7f4:	e3530000 	cmp	r3, #0
   2f7f8:	012fff1e 	bxeq	lr
   2f7fc:	e1a02001 	mov	r2, r1
   2f800:	e1a01000 	mov	r1, r0
   2f804:	e1a00003 	mov	r0, r3
   2f808:	eaffffe0 	b	2f790 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   2f80c:	0005022c 	.word	0x0005022c

0002f810 <CommandHandler::logDebugJson(char const*)>:
   2f810:	e3a03000 	mov	r3, #0
   2f814:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f818:	e24dd00c 	sub	sp, sp, #12
   2f81c:	e1a02001 	mov	r2, r1
   2f820:	e58d3004 	str	r3, [sp, #4]
   2f824:	e58d3000 	str	r3, [sp]
   2f828:	e59f1008 	ldr	r1, [pc, #8]	; 2f838 <CommandHandler::logDebugJson(char const*)+0x28>
   2f82c:	ebfffd6d 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f830:	e28dd00c 	add	sp, sp, #12
   2f834:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f838:	000479bc 	.word	0x000479bc

0002f83c <CommandHandler::logDebug(char const*, char const*, char const*)>:
   2f83c:	e92d4030 	push	{r4, r5, lr}
   2f840:	e1a05001 	mov	r5, r1
   2f844:	e24ddd9e 	sub	sp, sp, #10112	; 0x2780
   2f848:	e24dd00c 	sub	sp, sp, #12
   2f84c:	e28d1074 	add	r1, sp, #116	; 0x74
   2f850:	e1a00003 	mov	r0, r3
   2f854:	e1a04002 	mov	r4, r2
   2f858:	e59f20fc 	ldr	r2, [pc, #252]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f85c:	e58d100c 	str	r1, [sp, #12]
   2f860:	ebfff97d 	bl	2de5c <jsonEscape>
   2f864:	e28d3b05 	add	r3, sp, #5120	; 0x1400
   2f868:	e2833008 	add	r3, r3, #8
   2f86c:	e243300c 	sub	r3, r3, #12
   2f870:	e1a00003 	mov	r0, r3
   2f874:	e59f20e0 	ldr	r2, [pc, #224]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f878:	e59f10e0 	ldr	r1, [pc, #224]	; 2f960 <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f87c:	e58d3008 	str	r3, [sp, #8]
   2f880:	ebfff814 	bl	2d8d8 <strlcpy>
   2f884:	e59d100c 	ldr	r1, [sp, #12]
   2f888:	e59f20cc 	ldr	r2, [pc, #204]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f88c:	e59d0008 	ldr	r0, [sp, #8]
   2f890:	ebfff82c 	bl	2d948 <strlcat>
   2f894:	e59f20c0 	ldr	r2, [pc, #192]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f898:	e59f10c4 	ldr	r1, [pc, #196]	; 2f964 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   2f89c:	e59d0008 	ldr	r0, [sp, #8]
   2f8a0:	ebfff828 	bl	2d948 <strlcat>
   2f8a4:	e59f20b0 	ldr	r2, [pc, #176]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f8a8:	e59f10b8 	ldr	r1, [pc, #184]	; 2f968 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   2f8ac:	e59d0008 	ldr	r0, [sp, #8]
   2f8b0:	ebfff824 	bl	2d948 <strlcat>
   2f8b4:	e1a01005 	mov	r1, r5
   2f8b8:	e59f209c 	ldr	r2, [pc, #156]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f8bc:	e59d0008 	ldr	r0, [sp, #8]
   2f8c0:	ebfff820 	bl	2d948 <strlcat>
   2f8c4:	e59f2090 	ldr	r2, [pc, #144]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f8c8:	e59f1094 	ldr	r1, [pc, #148]	; 2f964 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   2f8cc:	e59d0008 	ldr	r0, [sp, #8]
   2f8d0:	ebfff81c 	bl	2d948 <strlcat>
   2f8d4:	e59f2080 	ldr	r2, [pc, #128]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f8d8:	e59f108c 	ldr	r1, [pc, #140]	; 2f96c <CommandHandler::logDebug(char const*, char const*, char const*)+0x130>
   2f8dc:	e59d0008 	ldr	r0, [sp, #8]
   2f8e0:	ebfff818 	bl	2d948 <strlcat>
   2f8e4:	ebfff7c0 	bl	2d7ec <micros>
   2f8e8:	e28d3010 	add	r3, sp, #16
   2f8ec:	e58d300c 	str	r3, [sp, #12]
   2f8f0:	e59f2078 	ldr	r2, [pc, #120]	; 2f970 <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   2f8f4:	e1a03000 	mov	r3, r0
   2f8f8:	e3a01064 	mov	r1, #100	; 0x64
   2f8fc:	e58d4000 	str	r4, [sp]
   2f900:	e59d000c 	ldr	r0, [sp, #12]
   2f904:	ebfff86a 	bl	2dab4 <snprintf>
   2f908:	e59d100c 	ldr	r1, [sp, #12]
   2f90c:	e59f2048 	ldr	r2, [pc, #72]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f910:	e59d0008 	ldr	r0, [sp, #8]
   2f914:	ebfff80b 	bl	2d948 <strlcat>
   2f918:	e59d0008 	ldr	r0, [sp, #8]
   2f91c:	e59f2038 	ldr	r2, [pc, #56]	; 2f95c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   2f920:	e59f104c 	ldr	r1, [pc, #76]	; 2f974 <CommandHandler::logDebug(char const*, char const*, char const*)+0x138>
   2f924:	ebfff807 	bl	2d948 <strlcat>
   2f928:	e59f3048 	ldr	r3, [pc, #72]	; 2f978 <CommandHandler::logDebug(char const*, char const*, char const*)+0x13c>
   2f92c:	e5930000 	ldr	r0, [r3]
   2f930:	e3500000 	cmp	r0, #0
   2f934:	0a000005 	beq	2f950 <CommandHandler::logDebug(char const*, char const*, char const*)+0x114>
   2f938:	e3a03000 	mov	r3, #0
   2f93c:	e59d2008 	ldr	r2, [sp, #8]
   2f940:	e58d3004 	str	r3, [sp, #4]
   2f944:	e58d3000 	str	r3, [sp]
   2f948:	e59f102c 	ldr	r1, [pc, #44]	; 2f97c <CommandHandler::logDebug(char const*, char const*, char const*)+0x140>
   2f94c:	ebfffd25 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f950:	e28ddd9e 	add	sp, sp, #10112	; 0x2780
   2f954:	e28dd00c 	add	sp, sp, #12
   2f958:	e8bd8030 	pop	{r4, r5, pc}
   2f95c:	00001388 	.word	0x00001388
   2f960:	000479b4 	.word	0x000479b4
   2f964:	00047b8c 	.word	0x00047b8c
   2f968:	00047b90 	.word	0x00047b90
   2f96c:	00047b98 	.word	0x00047b98
   2f970:	00047ba0 	.word	0x00047ba0
   2f974:	000488f4 	.word	0x000488f4
   2f978:	0005022c 	.word	0x0005022c
   2f97c:	000479bc 	.word	0x000479bc

0002f980 <CommandHandler::service()>:
   2f980:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f984:	e2804a05 	add	r4, r0, #20480	; 0x5000
   2f988:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   2f98c:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   2f990:	e24dd084 	sub	sp, sp, #132	; 0x84
   2f994:	e1520003 	cmp	r2, r3
   2f998:	0a000016 	beq	2f9f8 <CommandHandler::service()+0x78>
   2f99c:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   2f9a0:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   2f9a4:	e0803003 	add	r3, r0, r3
   2f9a8:	e2822001 	add	r2, r2, #1
   2f9ac:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2f9b0:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   2f9b4:	e5842874 	str	r2, [r4, #2164]	; 0x874
   2f9b8:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   2f9bc:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   2f9c0:	e1a05000 	mov	r5, r0
   2f9c4:	e1510002 	cmp	r1, r2
   2f9c8:	23a02000 	movcs	r2, #0
   2f9cc:	e3a01064 	mov	r1, #100	; 0x64
   2f9d0:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   2f9d4:	e28d001c 	add	r0, sp, #28
   2f9d8:	e59f20a8 	ldr	r2, [pc, #168]	; 2fa88 <CommandHandler::service()+0x108>
   2f9dc:	ebfff834 	bl	2dab4 <snprintf>
   2f9e0:	e28d001c 	add	r0, sp, #28
   2f9e4:	ebffe7d4 	bl	2993c <strlen>
   2f9e8:	e28d101c 	add	r1, sp, #28
   2f9ec:	e2802001 	add	r2, r0, #1
   2f9f0:	e2850f65 	add	r0, r5, #404	; 0x194
   2f9f4:	eb000362 	bl	30784 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2f9f8:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   2f9fc:	e3530000 	cmp	r3, #0
   2fa00:	0a000006 	beq	2fa20 <CommandHandler::service()+0xa0>
   2fa04:	e59f5080 	ldr	r5, [pc, #128]	; 2fa8c <CommandHandler::service()+0x10c>
   2fa08:	ebfff778 	bl	2d7f0 <millis>
   2fa0c:	e1a02005 	mov	r2, r5
   2fa10:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   2fa14:	ebfff792 	bl	2d864 <isTimeout>
   2fa18:	e3500000 	cmp	r0, #0
   2fa1c:	1a000001 	bne	2fa28 <CommandHandler::service()+0xa8>
   2fa20:	e28dd084 	add	sp, sp, #132	; 0x84
   2fa24:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fa28:	ebffda98 	bl	26490 <CLogger::Get()>
   2fa2c:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   2fa30:	e1a06000 	mov	r6, r0
   2fa34:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   2fa38:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   2fa3c:	ebfff76b 	bl	2d7f0 <millis>
   2fa40:	e58d9000 	str	r9, [sp]
   2fa44:	e58d000c 	str	r0, [sp, #12]
   2fa48:	e98d0180 	stmib	sp, {r7, r8}
   2fa4c:	e1a00006 	mov	r0, r6
   2fa50:	e58d5010 	str	r5, [sp, #16]
   2fa54:	e59f3034 	ldr	r3, [pc, #52]	; 2fa90 <CommandHandler::service()+0x110>
   2fa58:	e3a02004 	mov	r2, #4
   2fa5c:	e59f1030 	ldr	r1, [pc, #48]	; 2fa94 <CommandHandler::service()+0x114>
   2fa60:	ebffd9c7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fa64:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   2fa68:	e3500000 	cmp	r0, #0
   2fa6c:	0a000000 	beq	2fa74 <CommandHandler::service()+0xf4>
   2fa70:	ebffebb7 	bl	2a954 <operator delete[](void*)>
   2fa74:	e3a03000 	mov	r3, #0
   2fa78:	e5843860 	str	r3, [r4, #2144]	; 0x860
   2fa7c:	e5843864 	str	r3, [r4, #2148]	; 0x864
   2fa80:	e28dd084 	add	sp, sp, #132	; 0x84
   2fa84:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fa88:	00047ba8 	.word	0x00047ba8
   2fa8c:	00000bb8 	.word	0x00000bb8
   2fa90:	00047bc8 	.word	0x00047bc8
   2fa94:	000478c8 	.word	0x000478c8

0002fa98 <CommandHandler::fileReceiveCleardown()>:
   2fa98:	e92d4010 	push	{r4, lr}
   2fa9c:	e2804a05 	add	r4, r0, #20480	; 0x5000
   2faa0:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   2faa4:	e3500000 	cmp	r0, #0
   2faa8:	0a000000 	beq	2fab0 <CommandHandler::fileReceiveCleardown()+0x18>
   2faac:	ebffeba8 	bl	2a954 <operator delete[](void*)>
   2fab0:	e3a03000 	mov	r3, #0
   2fab4:	e5843860 	str	r3, [r4, #2144]	; 0x860
   2fab8:	e5843864 	str	r3, [r4, #2148]	; 0x864
   2fabc:	e8bd8010 	pop	{r4, pc}

0002fac0 <CommandHandler::~CommandHandler()>:
   2fac0:	e92d4010 	push	{r4, lr}
   2fac4:	e1a04000 	mov	r4, r0
   2fac8:	e2800f65 	add	r0, r0, #404	; 0x194
   2facc:	eb0000a7 	bl	2fd70 <MiniHDLC::~MiniHDLC()>
   2fad0:	e1a00004 	mov	r0, r4
   2fad4:	e8bd8010 	pop	{r4, pc}

0002fad8 <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   2fad8:	e3a00000 	mov	r0, #0
   2fadc:	e12fff1e 	bx	lr

0002fae0 <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   2fae0:	e59f3020 	ldr	r3, [pc, #32]	; 2fb08 <CommsManager::serialPutStr(unsigned char const*, unsigned int)+0x28>
   2fae4:	e5933000 	ldr	r3, [r3]
   2fae8:	e2833a07 	add	r3, r3, #28672	; 0x7000
   2faec:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   2faf0:	e3530000 	cmp	r3, #0
   2faf4:	012fff1e 	bxeq	lr
   2faf8:	e1a02001 	mov	r2, r1
   2fafc:	e1a01000 	mov	r1, r0
   2fb00:	e1a00003 	mov	r0, r3
   2fb04:	eafff590 	b	2d14c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   2fb08:	00050238 	.word	0x00050238

0002fb0c <CommsManager::serialTxAvailable()>:
   2fb0c:	e59f3014 	ldr	r3, [pc, #20]	; 2fb28 <CommsManager::serialTxAvailable()+0x1c>
   2fb10:	e5933000 	ldr	r3, [r3]
   2fb14:	e2833a07 	add	r3, r3, #28672	; 0x7000
   2fb18:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   2fb1c:	e3500000 	cmp	r0, #0
   2fb20:	012fff1e 	bxeq	lr
   2fb24:	eafff54c 	b	2d05c <CUartMaxiSerialDevice::AvailableForWrite()>
   2fb28:	00050238 	.word	0x00050238

0002fb2c <CommsManager::performUpdate(unsigned char const*, unsigned int)>:
   2fb2c:	e92d4030 	push	{r4, r5, lr}
   2fb30:	e1a05001 	mov	r5, r1
   2fb34:	e1a04000 	mov	r4, r0
   2fb38:	e24dd014 	sub	sp, sp, #20
   2fb3c:	ebffda53 	bl	26490 <CLogger::Get()>
   2fb40:	e0843005 	add	r3, r4, r5
   2fb44:	e5532001 	ldrb	r2, [r3, #-1]
   2fb48:	e5d43000 	ldrb	r3, [r4]
   2fb4c:	e59f1034 	ldr	r1, [pc, #52]	; 2fb88 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x5c>
   2fb50:	e58d2008 	str	r2, [sp, #8]
   2fb54:	e58d3004 	str	r3, [sp, #4]
   2fb58:	e3a02004 	mov	r2, #4
   2fb5c:	e59f3028 	ldr	r3, [pc, #40]	; 2fb8c <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x60>
   2fb60:	e58d5000 	str	r5, [sp]
   2fb64:	ebffd986 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fb68:	e59f0020 	ldr	r0, [pc, #32]	; 2fb90 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x64>
   2fb6c:	ebfff726 	bl	2d80c <microsDelay>
   2fb70:	e1a00004 	mov	r0, r4
   2fb74:	e1a01005 	mov	r1, r5
   2fb78:	ebffea6b 	bl	2a52c <EnableChainBoot>
   2fb7c:	e3a00001 	mov	r0, #1
   2fb80:	e28dd014 	add	sp, sp, #20
   2fb84:	e8bd8030 	pop	{r4, r5, pc}
   2fb88:	00047c5c 	.word	0x00047c5c
   2fb8c:	00047c24 	.word	0x00047c24
   2fb90:	000f4240 	.word	0x000f4240

0002fb94 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>:
   2fb94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2fb98:	e1a04000 	mov	r4, r0
   2fb9c:	e24dd008 	sub	sp, sp, #8
   2fba0:	e1a06001 	mov	r6, r1
   2fba4:	e1a08002 	mov	r8, r2
   2fba8:	ebfffb0b 	bl	2e7dc <CommandHandler::CommandHandler()>
   2fbac:	e3a0e000 	mov	lr, #0
   2fbb0:	e2843a07 	add	r3, r4, #28672	; 0x7000
   2fbb4:	e59f004c 	ldr	r0, [pc, #76]	; 2fc08 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x74>
   2fbb8:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   2fbbc:	e5838810 	str	r8, [r3, #2064]	; 0x810
   2fbc0:	e59fc044 	ldr	ip, [pc, #68]	; 2fc0c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x78>
   2fbc4:	e58de004 	str	lr, [sp, #4]
   2fbc8:	e59f7040 	ldr	r7, [pc, #64]	; 2fc10 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x7c>
   2fbcc:	e59fe040 	ldr	lr, [pc, #64]	; 2fc14 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x80>
   2fbd0:	e59f5040 	ldr	r5, [pc, #64]	; 2fc18 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x84>
   2fbd4:	e59f6040 	ldr	r6, [pc, #64]	; 2fc1c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x88>
   2fbd8:	e58d0000 	str	r0, [sp]
   2fbdc:	e1a01004 	mov	r1, r4
   2fbe0:	e1a00004 	mov	r0, r4
   2fbe4:	e59f3034 	ldr	r3, [pc, #52]	; 2fc20 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x8c>
   2fbe8:	e3a02001 	mov	r2, #1
   2fbec:	e5874000 	str	r4, [r7]
   2fbf0:	e5856000 	str	r6, [r5]
   2fbf4:	e58ce000 	str	lr, [ip]
   2fbf8:	ebfffb26 	bl	2e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   2fbfc:	e1a00004 	mov	r0, r4
   2fc00:	e28dd008 	add	sp, sp, #8
   2fc04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2fc08:	0002fb2c 	.word	0x0002fb2c
   2fc0c:	00050234 	.word	0x00050234
   2fc10:	00050238 	.word	0x00050238
   2fc14:	0002fb0c 	.word	0x0002fb0c
   2fc18:	00050230 	.word	0x00050230
   2fc1c:	0002fae0 	.word	0x0002fae0
   2fc20:	0002fad8 	.word	0x0002fad8

0002fc24 <CommsManager::~CommsManager()>:
   2fc24:	e92d4010 	push	{r4, lr}
   2fc28:	e1a04000 	mov	r4, r0
   2fc2c:	ebffffa3 	bl	2fac0 <CommandHandler::~CommandHandler()>
   2fc30:	e1a00004 	mov	r0, r4
   2fc34:	e8bd8010 	pop	{r4, pc}

0002fc38 <CommsManager::setup()>:
   2fc38:	e3a00001 	mov	r0, #1
   2fc3c:	e12fff1e 	bx	lr

0002fc40 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   2fc40:	e92d4010 	push	{r4, lr}
   2fc44:	e1a04001 	mov	r4, r1
   2fc48:	e24dd008 	sub	sp, sp, #8
   2fc4c:	ebffda0f 	bl	26490 <CLogger::Get()>
   2fc50:	e59fe04c 	ldr	lr, [pc, #76]	; 2fca4 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   2fc54:	e5d41000 	ldrb	r1, [r4]
   2fc58:	e59e3004 	ldr	r3, [lr, #4]
   2fc5c:	e5d42001 	ldrb	r2, [r4, #1]
   2fc60:	e59f4040 	ldr	r4, [pc, #64]	; 2fca8 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   2fc64:	e283c001 	add	ip, r3, #1
   2fc68:	e0822401 	add	r2, r2, r1, lsl #8
   2fc6c:	e58d2004 	str	r2, [sp, #4]
   2fc70:	e58d3000 	str	r3, [sp]
   2fc74:	e1a01004 	mov	r1, r4
   2fc78:	e59f302c 	ldr	r3, [pc, #44]	; 2fcac <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   2fc7c:	e3a02003 	mov	r2, #3
   2fc80:	e58ec004 	str	ip, [lr, #4]
   2fc84:	ebffd93e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc88:	ebffda00 	bl	26490 <CLogger::Get()>
   2fc8c:	e1a01004 	mov	r1, r4
   2fc90:	e3a02003 	mov	r2, #3
   2fc94:	e59f3014 	ldr	r3, [pc, #20]	; 2fcb0 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x70>
   2fc98:	e28dd008 	add	sp, sp, #8
   2fc9c:	e8bd4010 	pop	{r4, lr}
   2fca0:	eaffd937 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fca4:	00050238 	.word	0x00050238
   2fca8:	00047c5c 	.word	0x00047c5c
   2fcac:	00047c6c 	.word	0x00047c6c
   2fcb0:	00047c80 	.word	0x00047c80

0002fcb4 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   2fcb4:	e59f300c 	ldr	r3, [pc, #12]	; 2fcc8 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   2fcb8:	e1a02001 	mov	r2, r1
   2fcbc:	e1a01000 	mov	r1, r0
   2fcc0:	e5930000 	ldr	r0, [r3]
   2fcc4:	eaffffdd 	b	2fc40 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   2fcc8:	00050238 	.word	0x00050238

0002fccc <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   2fccc:	e59f3020 	ldr	r3, [pc, #32]	; 2fcf4 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   2fcd0:	e5933000 	ldr	r3, [r3]
   2fcd4:	e2833a07 	add	r3, r3, #28672	; 0x7000
   2fcd8:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   2fcdc:	e3530000 	cmp	r3, #0
   2fce0:	012fff1e 	bxeq	lr
   2fce4:	e1a02001 	mov	r2, r1
   2fce8:	e1a01000 	mov	r1, r0
   2fcec:	e1a00003 	mov	r0, r3
   2fcf0:	eafff515 	b	2d14c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   2fcf4:	00050238 	.word	0x00050238

0002fcf8 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   2fcf8:	e2800a07 	add	r0, r0, #28672	; 0x7000
   2fcfc:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   2fd00:	e3500000 	cmp	r0, #0
   2fd04:	012fff1e 	bxeq	lr
   2fd08:	eafff50f 	b	2d14c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002fd0c <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2fd0c:	eafffc35 	b	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

0002fd10 <CommsManager::serviceGetFromSerial()>:
   2fd10:	e2803a07 	add	r3, r0, #28672	; 0x7000
   2fd14:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   2fd18:	e3530000 	cmp	r3, #0
   2fd1c:	012fff1e 	bxeq	lr
   2fd20:	e92d4010 	push	{r4, lr}
   2fd24:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   2fd28:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   2fd2c:	e1a04000 	mov	r4, r0
   2fd30:	e1a0100d 	mov	r1, sp
   2fd34:	e1a00003 	mov	r0, r3
   2fd38:	ebfff569 	bl	2d2e4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   2fd3c:	e2502000 	subs	r2, r0, #0
   2fd40:	da000002 	ble	2fd50 <CommsManager::serviceGetFromSerial()+0x40>
   2fd44:	e1a0100d 	mov	r1, sp
   2fd48:	e1a00004 	mov	r0, r4
   2fd4c:	ebfffaec 	bl	2e904 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   2fd50:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   2fd54:	e8bd8010 	pop	{r4, pc}

0002fd58 <CommsManager::service()>:
   2fd58:	e92d4010 	push	{r4, lr}
   2fd5c:	e1a04000 	mov	r4, r0
   2fd60:	ebffff06 	bl	2f980 <CommandHandler::service()>
   2fd64:	e1a00004 	mov	r0, r4
   2fd68:	e8bd4010 	pop	{r4, lr}
   2fd6c:	eaffffe7 	b	2fd10 <CommsManager::serviceGetFromSerial()>

0002fd70 <MiniHDLC::~MiniHDLC()>:
   2fd70:	e12fff1e 	bx	lr

0002fd74 <MiniHDLC::~MiniHDLC()>:
   2fd74:	e92d4010 	push	{r4, lr}
   2fd78:	e1a04000 	mov	r4, r0
   2fd7c:	e59f1008 	ldr	r1, [pc, #8]	; 2fd8c <MiniHDLC::~MiniHDLC()+0x18>
   2fd80:	ebffeaf9 	bl	2a96c <operator delete(void*, unsigned int)>
   2fd84:	e1a00004 	mov	r0, r4
   2fd88:	e8bd8010 	pop	{r4, pc}
   2fd8c:	00004e6c 	.word	0x00004e6c

0002fd90 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>:
   2fd90:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2fd94:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2fd98:	e59de01c 	ldr	lr, [sp, #28]
   2fd9c:	e3560000 	cmp	r6, #0
   2fda0:	e59d8020 	ldr	r8, [sp, #32]
   2fda4:	0a00001d 	beq	2fe20 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2fda8:	e28ec002 	add	ip, lr, #2
   2fdac:	e152000c 	cmp	r2, ip
   2fdb0:	859f9074 	ldrhi	r9, [pc, #116]	; 2fe2c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x9c>
   2fdb4:	8a00000b 	bhi	2fde8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x58>
   2fdb8:	ea000018 	b	2fe20 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2fdbc:	e5d05004 	ldrb	r5, [r0, #4]
   2fdc0:	e155000c 	cmp	r5, ip
   2fdc4:	0a000011 	beq	2fe10 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x80>
   2fdc8:	e2566001 	subs	r6, r6, #1
   2fdcc:	e7c1c00e 	strb	ip, [r1, lr]
   2fdd0:	e28e4003 	add	r4, lr, #3
   2fdd4:	e28ec001 	add	ip, lr, #1
   2fdd8:	0a000011 	beq	2fe24 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2fddc:	e1540002 	cmp	r4, r2
   2fde0:	e1a0e00c 	mov	lr, ip
   2fde4:	2a00000e 	bcs	2fe24 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2fde8:	e4d8c001 	ldrb	ip, [r8], #1
   2fdec:	e1d370b0 	ldrh	r7, [r3]
   2fdf0:	e02c5427 	eor	r5, ip, r7, lsr #8
   2fdf4:	e1a05085 	lsl	r5, r5, #1
   2fdf8:	e19940b5 	ldrh	r4, [r9, r5]
   2fdfc:	e0244407 	eor	r4, r4, r7, lsl #8
   2fe00:	e1c340b0 	strh	r4, [r3]
   2fe04:	e5d04005 	ldrb	r4, [r0, #5]
   2fe08:	e15c0004 	cmp	ip, r4
   2fe0c:	1affffea 	bne	2fdbc <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x2c>
   2fe10:	e7c1400e 	strb	r4, [r1, lr]
   2fe14:	e22cc020 	eor	ip, ip, #32
   2fe18:	e28ee001 	add	lr, lr, #1
   2fe1c:	eaffffe9 	b	2fdc8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x38>
   2fe20:	e1a0c00e 	mov	ip, lr
   2fe24:	e1a0000c 	mov	r0, ip
   2fe28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fe2c:	00047c98 	.word	0x00047c98

0002fe30 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>:
   2fe30:	e92d4070 	push	{r4, r5, r6, lr}
   2fe34:	e1d330b0 	ldrh	r3, [r3]
   2fe38:	e5d0e007 	ldrb	lr, [r0, #7]
   2fe3c:	e59d4010 	ldr	r4, [sp, #16]
   2fe40:	e35e0000 	cmp	lr, #0
   2fe44:	e6efc073 	uxtb	ip, r3
   2fe48:	e1a03423 	lsr	r3, r3, #8
   2fe4c:	11a0e003 	movne	lr, r3
   2fe50:	01a05003 	moveq	r5, r3
   2fe54:	e2843002 	add	r3, r4, #2
   2fe58:	01a0e00c 	moveq	lr, ip
   2fe5c:	11a0500c 	movne	r5, ip
   2fe60:	e1530002 	cmp	r3, r2
   2fe64:	2a000018 	bcs	2fecc <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x9c>
   2fe68:	e5d02005 	ldrb	r2, [r0, #5]
   2fe6c:	e1a03005 	mov	r3, r5
   2fe70:	e152000e 	cmp	r2, lr
   2fe74:	0a000010 	beq	2febc <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2fe78:	e5d06004 	ldrb	r6, [r0, #4]
   2fe7c:	e1a0c00e 	mov	ip, lr
   2fe80:	e156000e 	cmp	r6, lr
   2fe84:	0a00000c 	beq	2febc <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2fe88:	e7c1c004 	strb	ip, [r1, r4]
   2fe8c:	e5d0c005 	ldrb	ip, [r0, #5]
   2fe90:	e2842001 	add	r2, r4, #1
   2fe94:	e15c0005 	cmp	ip, r5
   2fe98:	0a00000d 	beq	2fed4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2fe9c:	e5d0e004 	ldrb	lr, [r0, #4]
   2fea0:	e15e0005 	cmp	lr, r5
   2fea4:	0a00000a 	beq	2fed4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2fea8:	e7e13002 	strb	r3, [r1, r2]!
   2feac:	e5d03004 	ldrb	r3, [r0, #4]
   2feb0:	e2820002 	add	r0, r2, #2
   2feb4:	e5c13001 	strb	r3, [r1, #1]
   2feb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2febc:	e7c12004 	strb	r2, [r1, r4]
   2fec0:	e22ec020 	eor	ip, lr, #32
   2fec4:	e2844001 	add	r4, r4, #1
   2fec8:	eaffffee 	b	2fe88 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x58>
   2fecc:	e3a00000 	mov	r0, #0
   2fed0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fed4:	e7c1c002 	strb	ip, [r1, r2]
   2fed8:	e2253020 	eor	r3, r5, #32
   2fedc:	e2842002 	add	r2, r4, #2
   2fee0:	eafffff0 	b	2fea8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x78>

0002fee4 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2fee4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2fee8:	e59fe09c 	ldr	lr, [pc, #156]	; 2ff8c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2feec:	e59f509c 	ldr	r5, [pc, #156]	; 2ff90 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2fef0:	e580e000 	str	lr, [r0]
   2fef4:	e59fe098 	ldr	lr, [pc, #152]	; 2ff94 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2fef8:	e2807901 	add	r7, r0, #16384	; 0x4000
   2fefc:	e2804a02 	add	r4, r0, #8192	; 0x2000
   2ff00:	e3a0c000 	mov	ip, #0
   2ff04:	e580501c 	str	r5, [r0, #28]
   2ff08:	e3e06000 	mvn	r6, #0
   2ff0c:	e5845738 	str	r5, [r4, #1848]	; 0x738
   2ff10:	e584e730 	str	lr, [r4, #1840]	; 0x730
   2ff14:	e587ee4c 	str	lr, [r7, #3660]	; 0xe4c
   2ff18:	e1a0e007 	mov	lr, r7
   2ff1c:	e59f5074 	ldr	r5, [pc, #116]	; 2ff98 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2ff20:	e5875e50 	str	r5, [r7, #3664]	; 0xe50
   2ff24:	e5dd5014 	ldrb	r5, [sp, #20]
   2ff28:	e58ece5c 	str	ip, [lr, #3676]	; 0xe5c
   2ff2c:	e58ece60 	str	ip, [lr, #3680]	; 0xe60
   2ff30:	e58ece64 	str	ip, [lr, #3684]	; 0xe64
   2ff34:	e58ece68 	str	ip, [lr, #3688]	; 0xe68
   2ff38:	e5dd7018 	ldrb	r7, [sp, #24]
   2ff3c:	e1c060bc 	strh	r6, [r0, #12]
   2ff40:	e580c008 	str	ip, [r0, #8]
   2ff44:	e5c0c00e 	strb	ip, [r0, #14]
   2ff48:	e5c0c00f 	strb	ip, [r0, #15]
   2ff4c:	e5c0c010 	strb	ip, [r0, #16]
   2ff50:	e580c014 	str	ip, [r0, #20]
   2ff54:	e580c018 	str	ip, [r0, #24]
   2ff58:	e5dd601c 	ldrb	r6, [sp, #28]
   2ff5c:	e58ece54 	str	ip, [lr, #3668]	; 0xe54
   2ff60:	e58ece58 	str	ip, [lr, #3672]	; 0xe58
   2ff64:	e5c05004 	strb	r5, [r0, #4]
   2ff68:	e59fe02c 	ldr	lr, [pc, #44]	; 2ff9c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb8>
   2ff6c:	e5dd5020 	ldrb	r5, [sp, #32]
   2ff70:	e5c07005 	strb	r7, [r0, #5]
   2ff74:	e5c06007 	strb	r6, [r0, #7]
   2ff78:	e5c05006 	strb	r5, [r0, #6]
   2ff7c:	e58ec000 	str	ip, [lr]
   2ff80:	e5841734 	str	r1, [r4, #1844]	; 0x734
   2ff84:	e58e3004 	str	r3, [lr, #4]
   2ff88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ff8c:	00047ea0 	.word	0x00047ea0
   2ff90:	00047c90 	.word	0x00047c90
   2ff94:	00002710 	.word	0x00002710
   2ff98:	00001388 	.word	0x00001388
   2ff9c:	00050240 	.word	0x00050240

0002ffa0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2ffa0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2ffa4:	e59f409c 	ldr	r4, [pc, #156]	; 30048 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2ffa8:	e59f609c 	ldr	r6, [pc, #156]	; 3004c <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2ffac:	e5804000 	str	r4, [r0]
   2ffb0:	e59f4098 	ldr	r4, [pc, #152]	; 30050 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2ffb4:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2ffb8:	e2808901 	add	r8, r0, #16384	; 0x4000
   2ffbc:	e3a0e000 	mov	lr, #0
   2ffc0:	e580601c 	str	r6, [r0, #28]
   2ffc4:	e3e07000 	mvn	r7, #0
   2ffc8:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2ffcc:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2ffd0:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2ffd4:	e1a04008 	mov	r4, r8
   2ffd8:	e5dd901c 	ldrb	r9, [sp, #28]
   2ffdc:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2ffe0:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2ffe4:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2ffe8:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2ffec:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2fff0:	e580e008 	str	lr, [r0, #8]
   2fff4:	e5c0e00e 	strb	lr, [r0, #14]
   2fff8:	e5c0e00f 	strb	lr, [r0, #15]
   2fffc:	e5c0e010 	strb	lr, [r0, #16]
   30000:	e580e014 	str	lr, [r0, #20]
   30004:	e580e018 	str	lr, [r0, #24]
   30008:	e1c070bc 	strh	r7, [r0, #12]
   3000c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   30010:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   30014:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   30018:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   3001c:	e5c03004 	strb	r3, [r0, #4]
   30020:	e59de020 	ldr	lr, [sp, #32]
   30024:	e59f3028 	ldr	r3, [pc, #40]	; 30054 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb4>
   30028:	e5c09005 	strb	r9, [r0, #5]
   3002c:	e5c08007 	strb	r8, [r0, #7]
   30030:	e5c07006 	strb	r7, [r0, #6]
   30034:	e5831000 	str	r1, [r3]
   30038:	e5856734 	str	r6, [r5, #1844]	; 0x734
   3003c:	e5832004 	str	r2, [r3, #4]
   30040:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   30044:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30048:	00047ea0 	.word	0x00047ea0
   3004c:	00047c90 	.word	0x00047c90
   30050:	00002710 	.word	0x00002710
   30054:	00050240 	.word	0x00050240

00030058 <MiniHDLC::clear()>:
   30058:	e3a03000 	mov	r3, #0
   3005c:	e92d4010 	push	{r4, lr}
   30060:	e3e0e000 	mvn	lr, #0
   30064:	e59f1048 	ldr	r1, [pc, #72]	; 300b4 <MiniHDLC::clear()+0x5c>
   30068:	e59fc048 	ldr	ip, [pc, #72]	; 300b8 <MiniHDLC::clear()+0x60>
   3006c:	e2802901 	add	r2, r0, #16384	; 0x4000
   30070:	e2804a02 	add	r4, r0, #8192	; 0x2000
   30074:	e5c03007 	strb	r3, [r0, #7]
   30078:	e5c03006 	strb	r3, [r0, #6]
   3007c:	e58c3004 	str	r3, [ip, #4]
   30080:	e5841734 	str	r1, [r4, #1844]	; 0x734
   30084:	e58c3000 	str	r3, [ip]
   30088:	e5821e50 	str	r1, [r2, #3664]	; 0xe50
   3008c:	e5803008 	str	r3, [r0, #8]
   30090:	e5c0300e 	strb	r3, [r0, #14]
   30094:	e5c0300f 	strb	r3, [r0, #15]
   30098:	e5c03010 	strb	r3, [r0, #16]
   3009c:	e5803014 	str	r3, [r0, #20]
   300a0:	e5803018 	str	r3, [r0, #24]
   300a4:	e1c0e0bc 	strh	lr, [r0, #12]
   300a8:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   300ac:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   300b0:	e8bd8010 	pop	{r4, pc}
   300b4:	00001388 	.word	0x00001388
   300b8:	00050240 	.word	0x00050240

000300bc <MiniHDLC::handleChar(unsigned char)>:
   300bc:	e92d4070 	push	{r4, r5, r6, lr}
   300c0:	e5d03004 	ldrb	r3, [r0, #4]
   300c4:	e24dd010 	sub	sp, sp, #16
   300c8:	e1530001 	cmp	r3, r1
   300cc:	e1a04000 	mov	r4, r0
   300d0:	0a000035 	beq	301ac <MiniHDLC::handleChar(unsigned char)+0xf0>
   300d4:	e5d0300e 	ldrb	r3, [r0, #14]
   300d8:	e3530000 	cmp	r3, #0
   300dc:	1a00001a 	bne	3014c <MiniHDLC::handleChar(unsigned char)+0x90>
   300e0:	e5d03005 	ldrb	r3, [r0, #5]
   300e4:	e1530001 	cmp	r3, r1
   300e8:	03a03001 	moveq	r3, #1
   300ec:	05c0300e 	strbeq	r3, [r0, #14]
   300f0:	0a000013 	beq	30144 <MiniHDLC::handleChar(unsigned char)+0x88>
   300f4:	e2842a02 	add	r2, r4, #8192	; 0x2000
   300f8:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   300fc:	e5943008 	ldr	r3, [r4, #8]
   30100:	e1530000 	cmp	r3, r0
   30104:	3a000014 	bcc	3015c <MiniHDLC::handleChar(unsigned char)+0xa0>
   30108:	e3a00000 	mov	r0, #0
   3010c:	e3e01000 	mvn	r1, #0
   30110:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   30114:	e1530002 	cmp	r3, r2
   30118:	e2842901 	add	r2, r4, #16384	; 0x4000
   3011c:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   30120:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   30124:	22833001 	addcs	r3, r3, #1
   30128:	32833001 	addcc	r3, r3, #1
   3012c:	25840008 	strcs	r0, [r4, #8]
   30130:	21c410bc 	strhcs	r1, [r4, #12]
   30134:	35840008 	strcc	r0, [r4, #8]
   30138:	31c410bc 	strhcc	r1, [r4, #12]
   3013c:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   30140:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   30144:	e28dd010 	add	sp, sp, #16
   30148:	e8bd8070 	pop	{r4, r5, r6, pc}
   3014c:	e3a03000 	mov	r3, #0
   30150:	e2211020 	eor	r1, r1, #32
   30154:	e5c0300e 	strb	r3, [r0, #14]
   30158:	eaffffe5 	b	300f4 <MiniHDLC::handleChar(unsigned char)+0x38>
   3015c:	e0842003 	add	r2, r4, r3
   30160:	e3530001 	cmp	r3, #1
   30164:	e5c21020 	strb	r1, [r2, #32]
   30168:	9a00000b 	bls	3019c <MiniHDLC::handleChar(unsigned char)+0xe0>
   3016c:	e2431002 	sub	r1, r3, #2
   30170:	e1510000 	cmp	r1, r0
   30174:	23a02000 	movcs	r2, #0
   30178:	30841001 	addcc	r1, r4, r1
   3017c:	e1d400bc 	ldrh	r0, [r4, #12]
   30180:	35d12020 	ldrbcc	r2, [r1, #32]
   30184:	e59f11b4 	ldr	r1, [pc, #436]	; 30340 <MiniHDLC::handleChar(unsigned char)+0x284>
   30188:	e0222420 	eor	r2, r2, r0, lsr #8
   3018c:	e1a02082 	lsl	r2, r2, #1
   30190:	e19120b2 	ldrh	r2, [r1, r2]
   30194:	e0222400 	eor	r2, r2, r0, lsl #8
   30198:	e1c420bc 	strh	r2, [r4, #12]
   3019c:	e2833001 	add	r3, r3, #1
   301a0:	e5843008 	str	r3, [r4, #8]
   301a4:	e28dd010 	add	sp, sp, #16
   301a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   301ac:	e5900008 	ldr	r0, [r0, #8]
   301b0:	e3500001 	cmp	r0, #1
   301b4:	9a00005d 	bls	30330 <MiniHDLC::handleChar(unsigned char)+0x274>
   301b8:	e5d43007 	ldrb	r3, [r4, #7]
   301bc:	e3530000 	cmp	r3, #0
   301c0:	1a00003f 	bne	302c4 <MiniHDLC::handleChar(unsigned char)+0x208>
   301c4:	e2842a02 	add	r2, r4, #8192	; 0x2000
   301c8:	e592c730 	ldr	ip, [r2, #1840]	; 0x730
   301cc:	e2401002 	sub	r1, r0, #2
   301d0:	e151000c 	cmp	r1, ip
   301d4:	30843001 	addcc	r3, r4, r1
   301d8:	35d33020 	ldrbcc	r3, [r3, #32]
   301dc:	e2402001 	sub	r2, r0, #1
   301e0:	e15c0002 	cmp	ip, r2
   301e4:	e6bf5073 	sxth	r5, r3
   301e8:	9a000052 	bls	30338 <MiniHDLC::handleChar(unsigned char)+0x27c>
   301ec:	e0843002 	add	r3, r4, r2
   301f0:	e5d33020 	ldrb	r3, [r3, #32]
   301f4:	e1a03403 	lsl	r3, r3, #8
   301f8:	e1855003 	orr	r5, r5, r3
   301fc:	e1d430bc 	ldrh	r3, [r4, #12]
   30200:	e1530005 	cmp	r3, r5
   30204:	0a00003d 	beq	30300 <MiniHDLC::handleChar(unsigned char)+0x244>
   30208:	e35c0000 	cmp	ip, #0
   3020c:	0a00001e 	beq	3028c <MiniHDLC::handleChar(unsigned char)+0x1d0>
   30210:	e5d43020 	ldrb	r3, [r4, #32]
   30214:	e3530000 	cmp	r3, #0
   30218:	0a00001b 	beq	3028c <MiniHDLC::handleChar(unsigned char)+0x1d0>
   3021c:	e2846020 	add	r6, r4, #32
   30220:	e1a02006 	mov	r2, r6
   30224:	e3a03001 	mov	r3, #1
   30228:	ea000007 	b	3024c <MiniHDLC::handleChar(unsigned char)+0x190>
   3022c:	e5f21001 	ldrb	r1, [r2, #1]!
   30230:	e3510000 	cmp	r1, #0
   30234:	0a000006 	beq	30254 <MiniHDLC::handleChar(unsigned char)+0x198>
   30238:	e2833001 	add	r3, r3, #1
   3023c:	e1500003 	cmp	r0, r3
   30240:	0a000011 	beq	3028c <MiniHDLC::handleChar(unsigned char)+0x1d0>
   30244:	e35300c8 	cmp	r3, #200	; 0xc8
   30248:	0a00000f 	beq	3028c <MiniHDLC::handleChar(unsigned char)+0x1d0>
   3024c:	e153000c 	cmp	r3, ip
   30250:	1afffff5 	bne	3022c <MiniHDLC::handleChar(unsigned char)+0x170>
   30254:	e2433001 	sub	r3, r3, #1
   30258:	e35300c6 	cmp	r3, #198	; 0xc6
   3025c:	8a00000a 	bhi	3028c <MiniHDLC::handleChar(unsigned char)+0x1d0>
   30260:	ebffd88a 	bl	26490 <CLogger::Get()>
   30264:	e1d420bc 	ldrh	r2, [r4, #12]
   30268:	e5943008 	ldr	r3, [r4, #8]
   3026c:	e59f10d0 	ldr	r1, [pc, #208]	; 30344 <MiniHDLC::handleChar(unsigned char)+0x288>
   30270:	e58d2008 	str	r2, [sp, #8]
   30274:	e58d3000 	str	r3, [sp]
   30278:	e58d600c 	str	r6, [sp, #12]
   3027c:	e58d5004 	str	r5, [sp, #4]
   30280:	e59f30c0 	ldr	r3, [pc, #192]	; 30348 <MiniHDLC::handleChar(unsigned char)+0x28c>
   30284:	e3a02003 	mov	r2, #3
   30288:	ebffd7bd 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3028c:	e2843901 	add	r3, r4, #16384	; 0x4000
   30290:	e5932e60 	ldr	r2, [r3, #3680]	; 0xe60
   30294:	e2822001 	add	r2, r2, #1
   30298:	e5832e60 	str	r2, [r3, #3680]	; 0xe60
   3029c:	e3a01000 	mov	r1, #0
   302a0:	e3e00000 	mvn	r0, #0
   302a4:	e5932e5c 	ldr	r2, [r3, #3676]	; 0xe5c
   302a8:	e5c4100e 	strb	r1, [r4, #14]
   302ac:	e2822001 	add	r2, r2, #1
   302b0:	e5841008 	str	r1, [r4, #8]
   302b4:	e1c400bc 	strh	r0, [r4, #12]
   302b8:	e5832e5c 	str	r2, [r3, #3676]	; 0xe5c
   302bc:	e28dd010 	add	sp, sp, #16
   302c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   302c4:	e2843a02 	add	r3, r4, #8192	; 0x2000
   302c8:	e593c730 	ldr	ip, [r3, #1840]	; 0x730
   302cc:	e2402001 	sub	r2, r0, #1
   302d0:	e152000c 	cmp	r2, ip
   302d4:	23a05000 	movcs	r5, #0
   302d8:	30843002 	addcc	r3, r4, r2
   302dc:	35d35020 	ldrbcc	r5, [r3, #32]
   302e0:	e2401002 	sub	r1, r0, #2
   302e4:	e15c0001 	cmp	ip, r1
   302e8:	e6bf5075 	sxth	r5, r5
   302ec:	9a000011 	bls	30338 <MiniHDLC::handleChar(unsigned char)+0x27c>
   302f0:	e0843001 	add	r3, r4, r1
   302f4:	e5d33020 	ldrb	r3, [r3, #32]
   302f8:	e1a03403 	lsl	r3, r3, #8
   302fc:	eaffffbd 	b	301f8 <MiniHDLC::handleChar(unsigned char)+0x13c>
   30300:	e152000c 	cmp	r2, ip
   30304:	8a000009 	bhi	30330 <MiniHDLC::handleChar(unsigned char)+0x274>
   30308:	e151000c 	cmp	r1, ip
   3030c:	33a02000 	movcc	r2, #0
   30310:	30843001 	addcc	r3, r4, r1
   30314:	35c32020 	strbcc	r2, [r3, #32]
   30318:	e59f302c 	ldr	r3, [pc, #44]	; 3034c <MiniHDLC::handleChar(unsigned char)+0x290>
   3031c:	e5933004 	ldr	r3, [r3, #4]
   30320:	e3530000 	cmp	r3, #0
   30324:	0a000001 	beq	30330 <MiniHDLC::handleChar(unsigned char)+0x274>
   30328:	e2840020 	add	r0, r4, #32
   3032c:	e12fff33 	blx	r3
   30330:	e2843901 	add	r3, r4, #16384	; 0x4000
   30334:	eaffffd8 	b	3029c <MiniHDLC::handleChar(unsigned char)+0x1e0>
   30338:	e3a03000 	mov	r3, #0
   3033c:	eaffffad 	b	301f8 <MiniHDLC::handleChar(unsigned char)+0x13c>
   30340:	00047c98 	.word	0x00047c98
   30344:	00047ee8 	.word	0x00047ee8
   30348:	00047ea8 	.word	0x00047ea8
   3034c:	00050240 	.word	0x00050240

00030350 <MiniHDLC::handleBit(unsigned char)>:
   30350:	e3510000 	cmp	r1, #0
   30354:	13e0207f 	mvnne	r2, #127	; 0x7f
   30358:	03a02000 	moveq	r2, #0
   3035c:	e5d0300f 	ldrb	r3, [r0, #15]
   30360:	e5d01004 	ldrb	r1, [r0, #4]
   30364:	e18230a3 	orr	r3, r2, r3, lsr #1
   30368:	e6ef3073 	uxtb	r3, r3
   3036c:	e1510003 	cmp	r1, r3
   30370:	e92d4010 	push	{r4, lr}
   30374:	e5c0300f 	strb	r3, [r0, #15]
   30378:	e1a04000 	mov	r4, r0
   3037c:	0a00000b 	beq	303b0 <MiniHDLC::handleBit(unsigned char)+0x60>
   30380:	e20330fc 	and	r3, r3, #252	; 0xfc
   30384:	e353007c 	cmp	r3, #124	; 0x7c
   30388:	08bd8010 	popeq	{r4, pc}
   3038c:	e5d01010 	ldrb	r1, [r0, #16]
   30390:	e5903014 	ldr	r3, [r0, #20]
   30394:	e18210a1 	orr	r1, r2, r1, lsr #1
   30398:	e2833001 	add	r3, r3, #1
   3039c:	e6ef1071 	uxtb	r1, r1
   303a0:	e3530008 	cmp	r3, #8
   303a4:	e5c01010 	strb	r1, [r0, #16]
   303a8:	e5803014 	str	r3, [r0, #20]
   303ac:	18bd8010 	popne	{r4, pc}
   303b0:	ebffff41 	bl	300bc <MiniHDLC::handleChar(unsigned char)>
   303b4:	e3a03000 	mov	r3, #0
   303b8:	e5c43010 	strb	r3, [r4, #16]
   303bc:	e5843014 	str	r3, [r4, #20]
   303c0:	e8bd8010 	pop	{r4, pc}

000303c4 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   303c4:	e92d4070 	push	{r4, r5, r6, lr}
   303c8:	e2525000 	subs	r5, r2, #0
   303cc:	08bd8070 	popeq	{r4, r5, r6, pc}
   303d0:	e1a06000 	mov	r6, r0
   303d4:	e1a04001 	mov	r4, r1
   303d8:	e0815005 	add	r5, r1, r5
   303dc:	e4d41001 	ldrb	r1, [r4], #1
   303e0:	e1a00006 	mov	r0, r6
   303e4:	ebffff34 	bl	300bc <MiniHDLC::handleChar(unsigned char)>
   303e8:	e1540005 	cmp	r4, r5
   303ec:	1afffffa 	bne	303dc <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x18>
   303f0:	e8bd8070 	pop	{r4, r5, r6, pc}

000303f4 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   303f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   303f8:	e3e0e000 	mvn	lr, #0
   303fc:	e24dd01c 	sub	sp, sp, #28
   30400:	e3520003 	cmp	r2, #3
   30404:	e1cde1b6 	strh	lr, [sp, #22]
   30408:	9a000010 	bls	30450 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   3040c:	e3a0e001 	mov	lr, #1
   30410:	e5d0c004 	ldrb	ip, [r0, #4]
   30414:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   30418:	e58de000 	str	lr, [sp]
   3041c:	e98d0088 	stmib	sp, {r3, r7}
   30420:	e5c1c000 	strb	ip, [r1]
   30424:	e28d3016 	add	r3, sp, #22
   30428:	e1a05000 	mov	r5, r0
   3042c:	ebfffe57 	bl	2fd90 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   30430:	e3500000 	cmp	r0, #0
   30434:	0a000005 	beq	30450 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   30438:	e58d0000 	str	r0, [sp]
   3043c:	e28d3016 	add	r3, sp, #22
   30440:	e1a00005 	mov	r0, r5
   30444:	ebfffe79 	bl	2fe30 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   30448:	e28dd01c 	add	sp, sp, #28
   3044c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   30450:	e3a00000 	mov	r0, #0
   30454:	e28dd01c 	add	sp, sp, #28
   30458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003045c <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   3045c:	e3e0c000 	mvn	ip, #0
   30460:	e3520003 	cmp	r2, #3
   30464:	e1c3c0b0 	strh	ip, [r3]
   30468:	85d03004 	ldrbhi	r3, [r0, #4]
   3046c:	83a00001 	movhi	r0, #1
   30470:	85c13000 	strbhi	r3, [r1]
   30474:	93a00000 	movls	r0, #0
   30478:	e12fff1e 	bx	lr

0003047c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   3047c:	e92d4010 	push	{r4, lr}
   30480:	e59dc008 	ldr	ip, [sp, #8]
   30484:	e59de00c 	ldr	lr, [sp, #12]
   30488:	e35c0000 	cmp	ip, #0
   3048c:	e59d4010 	ldr	r4, [sp, #16]
   30490:	0a000001 	beq	3049c <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x20>
   30494:	e8bd4010 	pop	{r4, lr}
   30498:	eafffe3c 	b	2fd90 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   3049c:	e1a0000c 	mov	r0, ip
   304a0:	e8bd8010 	pop	{r4, pc}

000304a4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   304a4:	e59dc000 	ldr	ip, [sp]
   304a8:	e35c0000 	cmp	ip, #0
   304ac:	0a000000 	beq	304b4 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   304b0:	eafffe5e 	b	2fe30 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   304b4:	e1a0000c 	mov	r0, ip
   304b8:	e12fff1e 	bx	lr

000304bc <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   304bc:	e3520000 	cmp	r2, #0
   304c0:	0a000011 	beq	3050c <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x50>
   304c4:	e92d4010 	push	{r4, lr}
   304c8:	e1a04000 	mov	r4, r0
   304cc:	e1a00002 	mov	r0, r2
   304d0:	e5d4e004 	ldrb	lr, [r4, #4]
   304d4:	e0812002 	add	r2, r1, r2
   304d8:	ea000004 	b	304f0 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   304dc:	e5d4c005 	ldrb	ip, [r4, #5]
   304e0:	e15c0003 	cmp	ip, r3
   304e4:	0a000004 	beq	304fc <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x40>
   304e8:	e1510002 	cmp	r1, r2
   304ec:	0a000005 	beq	30508 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x4c>
   304f0:	e4d13001 	ldrb	r3, [r1], #1
   304f4:	e15e0003 	cmp	lr, r3
   304f8:	1afffff7 	bne	304dc <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x20>
   304fc:	e1510002 	cmp	r1, r2
   30500:	e2800001 	add	r0, r0, #1
   30504:	1afffff9 	bne	304f0 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   30508:	e8bd8010 	pop	{r4, pc}
   3050c:	e1a00002 	mov	r0, r2
   30510:	e12fff1e 	bx	lr

00030514 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   30514:	e0211420 	eor	r1, r1, r0, lsr #8
   30518:	e59f3010 	ldr	r3, [pc, #16]	; 30530 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   3051c:	e1a01081 	lsl	r1, r1, #1
   30520:	e19330b1 	ldrh	r3, [r3, r1]
   30524:	e0230400 	eor	r0, r3, r0, lsl #8
   30528:	e6ff0070 	uxth	r0, r0
   3052c:	e12fff1e 	bx	lr
   30530:	00047c98 	.word	0x00047c98

00030534 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   30534:	e3520000 	cmp	r2, #0
   30538:	012fff1e 	bxeq	lr
   3053c:	e59fc024 	ldr	ip, [pc, #36]	; 30568 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x34>
   30540:	e0812002 	add	r2, r1, r2
   30544:	e4d13001 	ldrb	r3, [r1], #1
   30548:	e0233420 	eor	r3, r3, r0, lsr #8
   3054c:	e1a03083 	lsl	r3, r3, #1
   30550:	e19c30b3 	ldrh	r3, [ip, r3]
   30554:	e1520001 	cmp	r2, r1
   30558:	e0230400 	eor	r0, r3, r0, lsl #8
   3055c:	e6ff0070 	uxth	r0, r0
   30560:	1afffff7 	bne	30544 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x10>
   30564:	e12fff1e 	bx	lr
   30568:	00047c98 	.word	0x00047c98

0003056c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   3056c:	e5d0c005 	ldrb	ip, [r0, #5]
   30570:	e15c0001 	cmp	ip, r1
   30574:	0a000005 	beq	30590 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   30578:	e5d00004 	ldrb	r0, [r0, #4]
   3057c:	e1500001 	cmp	r0, r1
   30580:	0a000002 	beq	30590 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   30584:	e7c21003 	strb	r1, [r2, r3]
   30588:	e2830001 	add	r0, r3, #1
   3058c:	e12fff1e 	bx	lr
   30590:	e7c2c003 	strb	ip, [r2, r3]
   30594:	e2211020 	eor	r1, r1, #32
   30598:	e2833001 	add	r3, r3, #1
   3059c:	eafffff8 	b	30584 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

000305a0 <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   305a0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   305a4:	e5801734 	str	r1, [r0, #1844]	; 0x734
   305a8:	e12fff1e 	bx	lr

000305ac <MiniHDLC::putCharToFrame(unsigned char)>:
   305ac:	e2803901 	add	r3, r0, #16384	; 0x4000
   305b0:	e5932e54 	ldr	r2, [r3, #3668]	; 0xe54
   305b4:	e593ce50 	ldr	ip, [r3, #3664]	; 0xe50
   305b8:	e152000c 	cmp	r2, ip
   305bc:	2a000017 	bcs	30620 <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   305c0:	e5d0c006 	ldrb	ip, [r0, #6]
   305c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   305c8:	e35c0000 	cmp	ip, #0
   305cc:	e593ee4c 	ldr	lr, [r3, #3660]	; 0xe4c
   305d0:	0a00000b 	beq	30604 <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   305d4:	e593ce58 	ldr	ip, [r3, #3672]	; 0xe58
   305d8:	e35c0000 	cmp	ip, #0
   305dc:	1a000013 	bne	30630 <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   305e0:	e3510000 	cmp	r1, #0
   305e4:	13a01080 	movne	r1, #128	; 0x80
   305e8:	e152000e 	cmp	r2, lr
   305ec:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   305f0:	30800002 	addcc	r0, r0, r2
   305f4:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   305f8:	e3a02001 	mov	r2, #1
   305fc:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   30600:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30604:	e152000e 	cmp	r2, lr
   30608:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   3060c:	e282c001 	add	ip, r2, #1
   30610:	30800002 	addcc	r0, r0, r2
   30614:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   30618:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   3061c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30620:	e3a02000 	mov	r2, #0
   30624:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   30628:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   3062c:	e12fff1e 	bx	lr
   30630:	e152000e 	cmp	r2, lr
   30634:	2a000009 	bcs	30660 <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   30638:	e2800a02 	add	r0, r0, #8192	; 0x2000
   3063c:	e080e002 	add	lr, r0, r2
   30640:	e5dee73c 	ldrb	lr, [lr, #1852]	; 0x73c
   30644:	e3510000 	cmp	r1, #0
   30648:	e1a010ce 	asr	r1, lr, #1
   3064c:	e6afe071 	sxtb	lr, r1
   30650:	138e1080 	orrne	r1, lr, #128	; 0x80
   30654:	06ef1071 	uxtbeq	r1, r1
   30658:	e0800002 	add	r0, r0, r2
   3065c:	e5c0173c 	strb	r1, [r0, #1852]	; 0x73c
   30660:	e28cc001 	add	ip, ip, #1
   30664:	e35c0008 	cmp	ip, #8
   30668:	03a01000 	moveq	r1, #0
   3066c:	02820001 	addeq	r0, r2, #1
   30670:	1583ce58 	strne	ip, [r3, #3672]	; 0xe58
   30674:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   30678:	05831e58 	streq	r1, [r3, #3672]	; 0xe58
   3067c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00030680 <MiniHDLC::sendChar(unsigned char)>:
   30680:	e5d03006 	ldrb	r3, [r0, #6]
   30684:	e3530000 	cmp	r3, #0
   30688:	0a00000a 	beq	306b8 <MiniHDLC::sendChar(unsigned char)+0x38>
   3068c:	e92d4070 	push	{r4, r5, r6, lr}
   30690:	e1a06000 	mov	r6, r0
   30694:	e1a04001 	mov	r4, r1
   30698:	e3a05008 	mov	r5, #8
   3069c:	e2041001 	and	r1, r4, #1
   306a0:	e1a00006 	mov	r0, r6
   306a4:	ebffffc0 	bl	305ac <MiniHDLC::putCharToFrame(unsigned char)>
   306a8:	e2555001 	subs	r5, r5, #1
   306ac:	e1a040a4 	lsr	r4, r4, #1
   306b0:	1afffff9 	bne	3069c <MiniHDLC::sendChar(unsigned char)+0x1c>
   306b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   306b8:	eaffffbb 	b	305ac <MiniHDLC::putCharToFrame(unsigned char)>

000306bc <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   306bc:	e5d03006 	ldrb	r3, [r0, #6]
   306c0:	e3530000 	cmp	r3, #0
   306c4:	0a000019 	beq	30730 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   306c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   306cc:	e1a07000 	mov	r7, r0
   306d0:	e1a05001 	mov	r5, r1
   306d4:	e3a06008 	mov	r6, #8
   306d8:	e3a08000 	mov	r8, #0
   306dc:	e2054001 	and	r4, r5, #1
   306e0:	e1a01004 	mov	r1, r4
   306e4:	e1a00007 	mov	r0, r7
   306e8:	ebffffaf 	bl	305ac <MiniHDLC::putCharToFrame(unsigned char)>
   306ec:	e3540000 	cmp	r4, #0
   306f0:	05874018 	streq	r4, [r7, #24]
   306f4:	0a000004 	beq	3070c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   306f8:	e5973018 	ldr	r3, [r7, #24]
   306fc:	e2833001 	add	r3, r3, #1
   30700:	e3530005 	cmp	r3, #5
   30704:	e5873018 	str	r3, [r7, #24]
   30708:	0a000003 	beq	3071c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
   3070c:	e2566001 	subs	r6, r6, #1
   30710:	e1a050a5 	lsr	r5, r5, #1
   30714:	1afffff0 	bne	306dc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x20>
   30718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3071c:	e1a01008 	mov	r1, r8
   30720:	e1a00007 	mov	r0, r7
   30724:	ebffffa0 	bl	305ac <MiniHDLC::putCharToFrame(unsigned char)>
   30728:	e5878018 	str	r8, [r7, #24]
   3072c:	eafffff6 	b	3070c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   30730:	eaffffd2 	b	30680 <MiniHDLC::sendChar(unsigned char)>

00030734 <MiniHDLC::sendEscaped(unsigned char)>:
   30734:	e92d4070 	push	{r4, r5, r6, lr}
   30738:	e1a04001 	mov	r4, r1
   3073c:	e5d01005 	ldrb	r1, [r0, #5]
   30740:	e1a05000 	mov	r5, r0
   30744:	e1510004 	cmp	r1, r4
   30748:	0a000006 	beq	30768 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   3074c:	e5d03004 	ldrb	r3, [r0, #4]
   30750:	e1530004 	cmp	r3, r4
   30754:	0a000003 	beq	30768 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   30758:	e1a01004 	mov	r1, r4
   3075c:	e1a00005 	mov	r0, r5
   30760:	e8bd4070 	pop	{r4, r5, r6, lr}
   30764:	eaffffd4 	b	306bc <MiniHDLC::sendCharWithStuffing(unsigned char)>
   30768:	e1a00005 	mov	r0, r5
   3076c:	e2244020 	eor	r4, r4, #32
   30770:	ebffffd1 	bl	306bc <MiniHDLC::sendCharWithStuffing(unsigned char)>
   30774:	e1a01004 	mov	r1, r4
   30778:	e1a00005 	mov	r0, r5
   3077c:	e8bd4070 	pop	{r4, r5, r6, lr}
   30780:	eaffffcd 	b	306bc <MiniHDLC::sendCharWithStuffing(unsigned char)>

00030784 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   30784:	e3a03000 	mov	r3, #0
   30788:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3078c:	e1a09002 	mov	r9, r2
   30790:	e2807901 	add	r7, r0, #16384	; 0x4000
   30794:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   30798:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   3079c:	e1a05001 	mov	r5, r1
   307a0:	e5d01004 	ldrb	r1, [r0, #4]
   307a4:	e1a06000 	mov	r6, r0
   307a8:	ebffffb4 	bl	30680 <MiniHDLC::sendChar(unsigned char)>
   307ac:	e3590000 	cmp	r9, #0
   307b0:	0a000029 	beq	3085c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xd8>
   307b4:	e59f20ac 	ldr	r2, [pc, #172]	; 30868 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe4>
   307b8:	e59f80ac 	ldr	r8, [pc, #172]	; 3086c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   307bc:	e4d51001 	ldrb	r1, [r5], #1
   307c0:	e1a00006 	mov	r0, r6
   307c4:	e0213422 	eor	r3, r1, r2, lsr #8
   307c8:	e1a03083 	lsl	r3, r3, #1
   307cc:	e19840b3 	ldrh	r4, [r8, r3]
   307d0:	e0244402 	eor	r4, r4, r2, lsl #8
   307d4:	e6bf4074 	sxth	r4, r4
   307d8:	ebffffd5 	bl	30734 <MiniHDLC::sendEscaped(unsigned char)>
   307dc:	e2599001 	subs	r9, r9, #1
   307e0:	e6ff2074 	uxth	r2, r4
   307e4:	1afffff4 	bne	307bc <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x38>
   307e8:	e6ef1074 	uxtb	r1, r4
   307ec:	e1a02422 	lsr	r2, r2, #8
   307f0:	e5d63007 	ldrb	r3, [r6, #7]
   307f4:	e1a00006 	mov	r0, r6
   307f8:	e3530000 	cmp	r3, #0
   307fc:	11a05001 	movne	r5, r1
   30800:	01a05002 	moveq	r5, r2
   30804:	11a01002 	movne	r1, r2
   30808:	ebffffc9 	bl	30734 <MiniHDLC::sendEscaped(unsigned char)>
   3080c:	e1a01005 	mov	r1, r5
   30810:	e1a00006 	mov	r0, r6
   30814:	ebffffc6 	bl	30734 <MiniHDLC::sendEscaped(unsigned char)>
   30818:	e5d61004 	ldrb	r1, [r6, #4]
   3081c:	e1a00006 	mov	r0, r6
   30820:	ebffff96 	bl	30680 <MiniHDLC::sendChar(unsigned char)>
   30824:	e59f3044 	ldr	r3, [pc, #68]	; 30870 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   30828:	e5933000 	ldr	r3, [r3]
   3082c:	e3530000 	cmp	r3, #0
   30830:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   30834:	e5971e54 	ldr	r1, [r7, #3668]	; 0xe54
   30838:	e3510000 	cmp	r1, #0
   3083c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   30840:	e2860c27 	add	r0, r6, #9984	; 0x2700
   30844:	e280003c 	add	r0, r0, #60	; 0x3c
   30848:	e12fff33 	blx	r3
   3084c:	e3a03000 	mov	r3, #0
   30850:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   30854:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   30858:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3085c:	e3a020ff 	mov	r2, #255	; 0xff
   30860:	e1a01002 	mov	r1, r2
   30864:	eaffffe1 	b	307f0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x6c>
   30868:	0000ffff 	.word	0x0000ffff
   3086c:	00047c98 	.word	0x00047c98
   30870:	00050240 	.word	0x00050240

00030874 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   30874:	e3510000 	cmp	r1, #0
   30878:	0a00000c 	beq	308b0 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x3c>
   3087c:	e1a02000 	mov	r2, r0
   30880:	e59fc030 	ldr	ip, [pc, #48]	; 308b8 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   30884:	e59f0030 	ldr	r0, [pc, #48]	; 308bc <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   30888:	e0821001 	add	r1, r2, r1
   3088c:	e4d23001 	ldrb	r3, [r2], #1
   30890:	e0233420 	eor	r3, r3, r0, lsr #8
   30894:	e1a03083 	lsl	r3, r3, #1
   30898:	e19c30b3 	ldrh	r3, [ip, r3]
   3089c:	e1510002 	cmp	r1, r2
   308a0:	e0230400 	eor	r0, r3, r0, lsl #8
   308a4:	e6ff0070 	uxth	r0, r0
   308a8:	1afffff7 	bne	3088c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x18>
   308ac:	e12fff1e 	bx	lr
   308b0:	e59f0004 	ldr	r0, [pc, #4]	; 308bc <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   308b4:	e12fff1e 	bx	lr
   308b8:	00047c98 	.word	0x00047c98
   308bc:	0000ffff 	.word	0x0000ffff

000308c0 <SimpleBuffer::~SimpleBuffer()>:
   308c0:	e12fff1e 	bx	lr

000308c4 <SimpleBuffer::~SimpleBuffer()>:
   308c4:	e92d4010 	push	{r4, lr}
   308c8:	e1a04000 	mov	r4, r0
   308cc:	e59f1008 	ldr	r1, [pc, #8]	; 308dc <SimpleBuffer::~SimpleBuffer()+0x18>
   308d0:	ebffe825 	bl	2a96c <operator delete(void*, unsigned int)>
   308d4:	e1a00004 	mov	r0, r4
   308d8:	e8bd8010 	pop	{r4, pc}
   308dc:	00002718 	.word	0x00002718

000308e0 <BusAccess::busActionHandleStart() [clone .part.7]>:
   308e0:	e92d4070 	push	{r4, r5, r6, lr}
   308e4:	e5d011d8 	ldrb	r1, [r0, #472]	; 0x1d8
   308e8:	e3a02001 	mov	r2, #1
   308ec:	e1a04000 	mov	r4, r0
   308f0:	eb000a74 	bl	332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   308f4:	ebfff3bc 	bl	2d7ec <micros>
   308f8:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   308fc:	e1a00004 	mov	r0, r4
   30900:	e59461d4 	ldr	r6, [r4, #468]	; 0x1d4
   30904:	e5d451d8 	ldrb	r5, [r4, #472]	; 0x1d8
   30908:	eb00080d 	bl	32944 <BusAccess::clockCurFreqHz()>
   3090c:	e6ef5075 	uxtb	r5, r5
   30910:	e3550004 	cmp	r5, #4
   30914:	e1a01000 	mov	r1, r0
   30918:	0a00000b 	beq	3094c <BusAccess::busActionHandleStart() [clone .part.7]+0x6c>
   3091c:	e3550001 	cmp	r5, #1
   30920:	0a00000e 	beq	30960 <BusAccess::busActionHandleStart() [clone .part.7]+0x80>
   30924:	e3550002 	cmp	r5, #2
   30928:	0a000017 	beq	3098c <BusAccess::busActionHandleStart() [clone .part.7]+0xac>
   3092c:	e3550003 	cmp	r5, #3
   30930:	13a00000 	movne	r0, #0
   30934:	0a00001d 	beq	309b0 <BusAccess::busActionHandleStart() [clone .part.7]+0xd0>
   30938:	e3a03002 	mov	r3, #2
   3093c:	e58401e4 	str	r0, [r4, #484]	; 0x1e4
   30940:	e3a00001 	mov	r0, #1
   30944:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   30948:	e8bd8070 	pop	{r4, r5, r6, pc}
   3094c:	e59f0074 	ldr	r0, [pc, #116]	; 309c8 <BusAccess::busActionHandleStart() [clone .part.7]+0xe8>
   30950:	eb003c12 	bl	3f9a0 <__aeabi_uidiv>
   30954:	e3500000 	cmp	r0, #0
   30958:	03a00001 	moveq	r0, #1
   3095c:	eafffff5 	b	30938 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   30960:	e3a0302c 	mov	r3, #44	; 0x2c
   30964:	e0264693 	mla	r6, r3, r6, r4
   30968:	e5963018 	ldr	r3, [r6, #24]
   3096c:	e3530000 	cmp	r3, #0
   30970:	0a00000c 	beq	309a8 <BusAccess::busActionHandleStart() [clone .part.7]+0xc8>
   30974:	e59f0050 	ldr	r0, [pc, #80]	; 309cc <BusAccess::busActionHandleStart() [clone .part.7]+0xec>
   30978:	e0000390 	mul	r0, r0, r3
   3097c:	eb003c07 	bl	3f9a0 <__aeabi_uidiv>
   30980:	e3500000 	cmp	r0, #0
   30984:	03a00001 	moveq	r0, #1
   30988:	eaffffea 	b	30938 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   3098c:	e3a0302c 	mov	r3, #44	; 0x2c
   30990:	e0264693 	mla	r6, r3, r6, r4
   30994:	e5963020 	ldr	r3, [r6, #32]
   30998:	e3530000 	cmp	r3, #0
   3099c:	1afffff4 	bne	30974 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   309a0:	e59f0028 	ldr	r0, [pc, #40]	; 309d0 <BusAccess::busActionHandleStart() [clone .part.7]+0xf0>
   309a4:	eafffff4 	b	3097c <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   309a8:	e59f0024 	ldr	r0, [pc, #36]	; 309d4 <BusAccess::busActionHandleStart() [clone .part.7]+0xf4>
   309ac:	eafffff2 	b	3097c <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   309b0:	e3a0302c 	mov	r3, #44	; 0x2c
   309b4:	e0264693 	mla	r6, r3, r6, r4
   309b8:	e5963028 	ldr	r3, [r6, #40]	; 0x28
   309bc:	e3530000 	cmp	r3, #0
   309c0:	0afffff6 	beq	309a0 <BusAccess::busActionHandleStart() [clone .part.7]+0xc0>
   309c4:	eaffffea 	b	30974 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   309c8:	3b9aca00 	.word	0x3b9aca00
   309cc:	000f4240 	.word	0x000f4240
   309d0:	01e84800 	.word	0x01e84800
   309d4:	05f5e100 	.word	0x05f5e100

000309d8 <BusAccess::busActionCheck() [clone .part.6]>:
   309d8:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   309dc:	e35c0000 	cmp	ip, #0
   309e0:	d12fff1e 	bxle	lr
   309e4:	e92d4010 	push	{r4, lr}
   309e8:	e1a02000 	mov	r2, r0
   309ec:	e3a03000 	mov	r3, #0
   309f0:	e3a0402c 	mov	r4, #44	; 0x2c
   309f4:	e5d21004 	ldrb	r1, [r2, #4]
   309f8:	e282202c 	add	r2, r2, #44	; 0x2c
   309fc:	e3510000 	cmp	r1, #0
   30a00:	0a00001a 	beq	30a70 <BusAccess::busActionCheck() [clone .part.6]+0x98>
   30a04:	e0210394 	mla	r1, r4, r3, r0
   30a08:	e5d1e02c 	ldrb	lr, [r1, #44]	; 0x2c
   30a0c:	e35e0000 	cmp	lr, #0
   30a10:	0a00000d 	beq	30a4c <BusAccess::busActionCheck() [clone .part.6]+0x74>
   30a14:	e3a0202c 	mov	r2, #44	; 0x2c
   30a18:	e0220392 	mla	r2, r2, r3, r0
   30a1c:	e58031d4 	str	r3, [r0, #468]	; 0x1d4
   30a20:	e5d2302c 	ldrb	r3, [r2, #44]	; 0x2c
   30a24:	e3530000 	cmp	r3, #0
   30a28:	13a03004 	movne	r3, #4
   30a2c:	0a000013 	beq	30a80 <BusAccess::busActionCheck() [clone .part.6]+0xa8>
   30a30:	e3a02001 	mov	r2, #1
   30a34:	e5c031d8 	strb	r3, [r0, #472]	; 0x1d8
   30a38:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   30a3c:	e1a04000 	mov	r4, r0
   30a40:	ebfff369 	bl	2d7ec <micros>
   30a44:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   30a48:	e8bd8010 	pop	{r4, pc}
   30a4c:	e5d1e016 	ldrb	lr, [r1, #22]
   30a50:	e35e0000 	cmp	lr, #0
   30a54:	1affffee 	bne	30a14 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   30a58:	e5d1e01c 	ldrb	lr, [r1, #28]
   30a5c:	e35e0000 	cmp	lr, #0
   30a60:	1affffeb 	bne	30a14 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   30a64:	e5d11024 	ldrb	r1, [r1, #36]	; 0x24
   30a68:	e3510000 	cmp	r1, #0
   30a6c:	1affffe8 	bne	30a14 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   30a70:	e2833001 	add	r3, r3, #1
   30a74:	e153000c 	cmp	r3, ip
   30a78:	1affffdd 	bne	309f4 <BusAccess::busActionCheck() [clone .part.6]+0x1c>
   30a7c:	e8bd8010 	pop	{r4, pc}
   30a80:	e5d23016 	ldrb	r3, [r2, #22]
   30a84:	e3530000 	cmp	r3, #0
   30a88:	13a03001 	movne	r3, #1
   30a8c:	1affffe7 	bne	30a30 <BusAccess::busActionCheck() [clone .part.6]+0x58>
   30a90:	e5d2301c 	ldrb	r3, [r2, #28]
   30a94:	e3530000 	cmp	r3, #0
   30a98:	13a03002 	movne	r3, #2
   30a9c:	1affffe3 	bne	30a30 <BusAccess::busActionCheck() [clone .part.6]+0x58>
   30aa0:	e5d23024 	ldrb	r3, [r2, #36]	; 0x24
   30aa4:	e3530000 	cmp	r3, #0
   30aa8:	13a03003 	movne	r3, #3
   30aac:	03a03000 	moveq	r3, #0
   30ab0:	eaffffde 	b	30a30 <BusAccess::busActionCheck() [clone .part.6]+0x58>

00030ab4 <BusAccess::BusAccess()>:
   30ab4:	e3a02000 	mov	r2, #0
   30ab8:	e92d4030 	push	{r4, r5, lr}
   30abc:	e3a01001 	mov	r1, #1
   30ac0:	e3a05064 	mov	r5, #100	; 0x64
   30ac4:	e3e0e000 	mvn	lr, #0
   30ac8:	e3a0c014 	mov	ip, #20
   30acc:	e59f40b0 	ldr	r4, [pc, #176]	; 30b84 <BusAccess::BusAccess()+0xd0>
   30ad0:	e5c021c3 	strb	r2, [r0, #451]	; 0x1c3
   30ad4:	e58051ec 	str	r5, [r0, #492]	; 0x1ec
   30ad8:	e5804224 	str	r4, [r0, #548]	; 0x224
   30adc:	e580e22c 	str	lr, [r0, #556]	; 0x22c
   30ae0:	e580c000 	str	ip, [r0]
   30ae4:	e5c02228 	strb	r2, [r0, #552]	; 0x228
   30ae8:	e5802230 	str	r2, [r0, #560]	; 0x230
   30aec:	e5802234 	str	r2, [r0, #564]	; 0x234
   30af0:	e5802238 	str	r2, [r0, #568]	; 0x238
   30af4:	e580223c 	str	r2, [r0, #572]	; 0x23c
   30af8:	e5802240 	str	r2, [r0, #576]	; 0x240
   30afc:	e5802244 	str	r2, [r0, #580]	; 0x244
   30b00:	e5802248 	str	r2, [r0, #584]	; 0x248
   30b04:	e580224c 	str	r2, [r0, #588]	; 0x24c
   30b08:	e5802250 	str	r2, [r0, #592]	; 0x250
   30b0c:	e5802268 	str	r2, [r0, #616]	; 0x268
   30b10:	e580226c 	str	r2, [r0, #620]	; 0x26c
   30b14:	e5802270 	str	r2, [r0, #624]	; 0x270
   30b18:	e5802274 	str	r2, [r0, #628]	; 0x274
   30b1c:	e5802278 	str	r2, [r0, #632]	; 0x278
   30b20:	e580227c 	str	r2, [r0, #636]	; 0x27c
   30b24:	e5802254 	str	r2, [r0, #596]	; 0x254
   30b28:	e5802258 	str	r2, [r0, #600]	; 0x258
   30b2c:	e580225c 	str	r2, [r0, #604]	; 0x25c
   30b30:	e5802260 	str	r2, [r0, #608]	; 0x260
   30b34:	e5802264 	str	r2, [r0, #612]	; 0x264
   30b38:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   30b3c:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   30b40:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   30b44:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   30b48:	e5c011c0 	strb	r1, [r0, #448]	; 0x1c0
   30b4c:	e58021cc 	str	r2, [r0, #460]	; 0x1cc
   30b50:	e5c021d0 	strb	r2, [r0, #464]	; 0x1d0
   30b54:	e5c021d1 	strb	r2, [r0, #465]	; 0x1d1
   30b58:	e58021d4 	str	r2, [r0, #468]	; 0x1d4
   30b5c:	e5c021d8 	strb	r2, [r0, #472]	; 0x1d8
   30b60:	e58021dc 	str	r2, [r0, #476]	; 0x1dc
   30b64:	e58021e0 	str	r2, [r0, #480]	; 0x1e0
   30b68:	e58021e4 	str	r2, [r0, #484]	; 0x1e4
   30b6c:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   30b70:	e5c021e8 	strb	r2, [r0, #488]	; 0x1e8
   30b74:	e5c021c5 	strb	r2, [r0, #453]	; 0x1c5
   30b78:	e5c021c4 	strb	r2, [r0, #452]	; 0x1c4
   30b7c:	e5c021f1 	strb	r2, [r0, #497]	; 0x1f1
   30b80:	e8bd8030 	pop	{r4, r5, pc}
   30b84:	000f4240 	.word	0x000f4240

00030b88 <BusAccess::init()>:
   30b88:	e92d4070 	push	{r4, r5, r6, lr}
   30b8c:	e1a04000 	mov	r4, r0
   30b90:	e3a05000 	mov	r5, #0
   30b94:	eb0005f6 	bl	32374 <BusAccess::clockSetup()>
   30b98:	e1a00004 	mov	r0, r4
   30b9c:	e59f10ac 	ldr	r1, [pc, #172]	; 30c50 <BusAccess::init()+0xc8>
   30ba0:	eb00066c 	bl	32558 <BusAccess::clockSetFreqHz(unsigned long)>
   30ba4:	e1a00004 	mov	r0, r4
   30ba8:	e3a01001 	mov	r1, #1
   30bac:	eb0006f1 	bl	32778 <BusAccess::clockEnable(bool)>
   30bb0:	e1a00004 	mov	r0, r4
   30bb4:	e1a02005 	mov	r2, r5
   30bb8:	e3a0100b 	mov	r1, #11
   30bbc:	eb0008b2 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30bc0:	e1a00004 	mov	r0, r4
   30bc4:	e1a02005 	mov	r2, r5
   30bc8:	e3a01009 	mov	r1, #9
   30bcc:	eb0008ae 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30bd0:	e1a00004 	mov	r0, r4
   30bd4:	e1a02005 	mov	r2, r5
   30bd8:	e3a0100a 	mov	r1, #10
   30bdc:	eb0008aa 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30be0:	e1a00004 	mov	r0, r4
   30be4:	e3a02001 	mov	r2, #1
   30be8:	e3a01010 	mov	r1, #16
   30bec:	eb0008a6 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30bf0:	e1a00004 	mov	r0, r4
   30bf4:	e3a02001 	mov	r2, #1
   30bf8:	e3a01013 	mov	r1, #19
   30bfc:	eb0008a2 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30c00:	e1a02005 	mov	r2, r5
   30c04:	e1a00004 	mov	r0, r4
   30c08:	e3a01007 	mov	r1, #7
   30c0c:	e5c451f1 	strb	r5, [r4, #497]	; 0x1f1
   30c10:	eb00089d 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30c14:	e1a00004 	mov	r0, r4
   30c18:	e3a02001 	mov	r2, #1
   30c1c:	e3a01006 	mov	r1, #6
   30c20:	eb000899 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30c24:	e3a02001 	mov	r2, #1
   30c28:	e1a00004 	mov	r0, r4
   30c2c:	e3a01008 	mov	r1, #8
   30c30:	eb000895 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   30c34:	e1a01005 	mov	r1, r5
   30c38:	e1a00004 	mov	r0, r4
   30c3c:	eb000a0b 	bl	33470 <BusAccess::busPagePinSetActive(bool)>
   30c40:	e1a00004 	mov	r0, r4
   30c44:	eb00081f 	bl	32cc8 <BusAccess::waitSetupMREQAndIORQEnables()>
   30c48:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   30c4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   30c50:	000f4240 	.word	0x000f4240

00030c54 <BusAccess::busAccessReset()>:
   30c54:	e92d4010 	push	{r4, lr}
   30c58:	e1a04000 	mov	r4, r0
   30c5c:	eb0009e8 	bl	33404 <BusAccess::busAccessCallbackPageIn()>
   30c60:	e5943000 	ldr	r3, [r4]
   30c64:	e3a0e040 	mov	lr, #64	; 0x40
   30c68:	e3530011 	cmp	r3, #17
   30c6c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   30c70:	13a01801 	movne	r1, #65536	; 0x10000
   30c74:	13a02c0e 	movne	r2, #3584	; 0xe00
   30c78:	159f3070 	ldrne	r3, [pc, #112]	; 30cf0 <BusAccess::busAccessReset()+0x9c>
   30c7c:	059f306c 	ldreq	r3, [pc, #108]	; 30cf0 <BusAccess::busAccessReset()+0x9c>
   30c80:	1583101c 	strne	r1, [r3, #28]
   30c84:	e5832028 	str	r2, [r3, #40]	; 0x28
   30c88:	e3a03000 	mov	r3, #0
   30c8c:	e59f205c 	ldr	r2, [pc, #92]	; 30cf0 <BusAccess::busAccessReset()+0x9c>
   30c90:	e1a01003 	mov	r1, r3
   30c94:	e592c008 	ldr	ip, [r2, #8]
   30c98:	e1a00004 	mov	r0, r4
   30c9c:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   30ca0:	e582c008 	str	ip, [r2, #8]
   30ca4:	e582e01c 	str	lr, [r2, #28]
   30ca8:	e5c431c4 	strb	r3, [r4, #452]	; 0x1c4
   30cac:	e58431c8 	str	r3, [r4, #456]	; 0x1c8
   30cb0:	eb0003ab 	bl	31b64 <BusAccess::waitForBusAck(bool)>
   30cb4:	e1a00004 	mov	r0, r4
   30cb8:	eb000a04 	bl	334d0 <BusAccess::waitGenerationDisable()>
   30cbc:	ebffd5f3 	bl	26490 <CLogger::Get()>
   30cc0:	e59f302c 	ldr	r3, [pc, #44]	; 30cf4 <BusAccess::busAccessReset()+0xa0>
   30cc4:	e3a02004 	mov	r2, #4
   30cc8:	e59f1028 	ldr	r1, [pc, #40]	; 30cf8 <BusAccess::busAccessReset()+0xa4>
   30ccc:	ebffd52c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30cd0:	e3a01001 	mov	r1, #1
   30cd4:	e1a00004 	mov	r0, r4
   30cd8:	eb00083f 	bl	32ddc <BusAccess::waitResetFlipFlops(bool)>
   30cdc:	e1a00004 	mov	r0, r4
   30ce0:	eb00071e 	bl	32960 <BusAccess::waitEnablementUpdate()>
   30ce4:	e3a03001 	mov	r3, #1
   30ce8:	e5c431c0 	strb	r3, [r4, #448]	; 0x1c0
   30cec:	e8bd8010 	pop	{r4, pc}
   30cf0:	20200000 	.word	0x20200000
   30cf4:	00047ef4 	.word	0x00047ef4
   30cf8:	00047f04 	.word	0x00047f04

00030cfc <BusAccess::waitOnMemory(int, bool)>:
   30cfc:	e3510000 	cmp	r1, #0
   30d00:	b12fff1e 	bxlt	lr
   30d04:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   30d08:	e151000c 	cmp	r1, ip
   30d0c:	a12fff1e 	bxge	lr
   30d10:	e3a0c02c 	mov	ip, #44	; 0x2c
   30d14:	e021019c 	mla	r1, ip, r1, r0
   30d18:	e5c12014 	strb	r2, [r1, #20]
   30d1c:	ea00070f 	b	32960 <BusAccess::waitEnablementUpdate()>

00030d20 <BusAccess::waitOnIO(int, bool)>:
   30d20:	e3510000 	cmp	r1, #0
   30d24:	b12fff1e 	bxlt	lr
   30d28:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   30d2c:	e151000c 	cmp	r1, ip
   30d30:	a12fff1e 	bxge	lr
   30d34:	e3a0c02c 	mov	ip, #44	; 0x2c
   30d38:	e021019c 	mla	r1, ip, r1, r0
   30d3c:	e5c12015 	strb	r2, [r1, #21]
   30d40:	ea000706 	b	32960 <BusAccess::waitEnablementUpdate()>

00030d44 <BusAccess::waitIsOnMemory()>:
   30d44:	e5d001c1 	ldrb	r0, [r0, #449]	; 0x1c1
   30d48:	e12fff1e 	bx	lr

00030d4c <BusAccess::waitSetCycleUs(unsigned long)>:
   30d4c:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   30d50:	e12fff1e 	bx	lr

00030d54 <BusAccess::waitIsHeld()>:
   30d54:	e5d001d0 	ldrb	r0, [r0, #464]	; 0x1d0
   30d58:	e12fff1e 	bx	lr

00030d5c <BusAccess::waitHold(int, bool)>:
   30d5c:	e3510000 	cmp	r1, #0
   30d60:	b12fff1e 	bxlt	lr
   30d64:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   30d68:	e151000c 	cmp	r1, ip
   30d6c:	a12fff1e 	bxge	lr
   30d70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   30d74:	e3a0e02c 	mov	lr, #44	; 0x2c
   30d78:	e021019e 	mla	r1, lr, r1, r0
   30d7c:	e35c0000 	cmp	ip, #0
   30d80:	e5c1202e 	strb	r2, [r1, #46]	; 0x2e
   30d84:	da00000c 	ble	30dbc <BusAccess::waitHold(int, bool)+0x60>
   30d88:	e1a02000 	mov	r2, r0
   30d8c:	e3a03000 	mov	r3, #0
   30d90:	e5d21004 	ldrb	r1, [r2, #4]
   30d94:	e282202c 	add	r2, r2, #44	; 0x2c
   30d98:	e3510000 	cmp	r1, #0
   30d9c:	0a000003 	beq	30db0 <BusAccess::waitHold(int, bool)+0x54>
   30da0:	e021039e 	mla	r1, lr, r3, r0
   30da4:	e5d1102e 	ldrb	r1, [r1, #46]	; 0x2e
   30da8:	e3510000 	cmp	r1, #0
   30dac:	1a000005 	bne	30dc8 <BusAccess::waitHold(int, bool)+0x6c>
   30db0:	e2833001 	add	r3, r3, #1
   30db4:	e15c0003 	cmp	ip, r3
   30db8:	1afffff4 	bne	30d90 <BusAccess::waitHold(int, bool)+0x34>
   30dbc:	e3a03000 	mov	r3, #0
   30dc0:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   30dc4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30dc8:	e3a03001 	mov	r3, #1
   30dcc:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   30dd0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00030dd4 <BusAccess::targetReqReset(int, int)>:
   30dd4:	e3510000 	cmp	r1, #0
   30dd8:	b12fff1e 	bxlt	lr
   30ddc:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   30de0:	e1510003 	cmp	r1, r3
   30de4:	a12fff1e 	bxge	lr
   30de8:	e3a0c02c 	mov	ip, #44	; 0x2c
   30dec:	e3520000 	cmp	r2, #0
   30df0:	d3a02064 	movle	r2, #100	; 0x64
   30df4:	e3a03001 	mov	r3, #1
   30df8:	e92d4010 	push	{r4, lr}
   30dfc:	e021019c 	mla	r1, ip, r1, r0
   30e00:	e5812018 	str	r2, [r1, #24]
   30e04:	e5c13016 	strb	r3, [r1, #22]
   30e08:	ebffd5a0 	bl	26490 <CLogger::Get()>
   30e0c:	e8bd4010 	pop	{r4, lr}
   30e10:	e59f3008 	ldr	r3, [pc, #8]	; 30e20 <BusAccess::targetReqReset(int, int)+0x4c>
   30e14:	e3a02004 	mov	r2, #4
   30e18:	e59f1004 	ldr	r1, [pc, #4]	; 30e24 <BusAccess::targetReqReset(int, int)+0x50>
   30e1c:	eaffd4d8 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30e20:	00047f10 	.word	0x00047f10
   30e24:	00047f04 	.word	0x00047f04

00030e28 <BusAccess::targetReqNMI(int, int)>:
   30e28:	e3510000 	cmp	r1, #0
   30e2c:	b12fff1e 	bxlt	lr
   30e30:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   30e34:	e1510003 	cmp	r1, r3
   30e38:	a12fff1e 	bxge	lr
   30e3c:	e3a0c02c 	mov	ip, #44	; 0x2c
   30e40:	e3520000 	cmp	r2, #0
   30e44:	d3a02020 	movle	r2, #32
   30e48:	e3a03001 	mov	r3, #1
   30e4c:	e021019c 	mla	r1, ip, r1, r0
   30e50:	e5812020 	str	r2, [r1, #32]
   30e54:	e5c1301c 	strb	r3, [r1, #28]
   30e58:	e12fff1e 	bx	lr

00030e5c <BusAccess::targetReqIRQ(int, int)>:
   30e5c:	e3510000 	cmp	r1, #0
   30e60:	b12fff1e 	bxlt	lr
   30e64:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   30e68:	e1510003 	cmp	r1, r3
   30e6c:	a12fff1e 	bxge	lr
   30e70:	e3a0c02c 	mov	ip, #44	; 0x2c
   30e74:	e3520000 	cmp	r2, #0
   30e78:	d3a02020 	movle	r2, #32
   30e7c:	e3a03001 	mov	r3, #1
   30e80:	e021019c 	mla	r1, ip, r1, r0
   30e84:	e5812028 	str	r2, [r1, #40]	; 0x28
   30e88:	e5c13024 	strb	r3, [r1, #36]	; 0x24
   30e8c:	e12fff1e 	bx	lr

00030e90 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>:
   30e90:	e92d4030 	push	{r4, r5, lr}
   30e94:	e2514000 	subs	r4, r1, #0
   30e98:	e24dd00c 	sub	sp, sp, #12
   30e9c:	e1a05000 	mov	r5, r0
   30ea0:	ba00000f 	blt	30ee4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   30ea4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   30ea8:	e1540003 	cmp	r4, r3
   30eac:	aa00000c 	bge	30ee4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   30eb0:	e3a0102c 	mov	r1, #44	; 0x2c
   30eb4:	e3a03001 	mov	r3, #1
   30eb8:	e0240491 	mla	r4, r1, r4, r0
   30ebc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   30ec0:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
   30ec4:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   30ec8:	e3530000 	cmp	r3, #0
   30ecc:	0a00000e 	beq	30f0c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x7c>
   30ed0:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   30ed4:	e3530001 	cmp	r3, #1
   30ed8:	0a00000f 	beq	30f1c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x8c>
   30edc:	e28dd00c 	add	sp, sp, #12
   30ee0:	e8bd8030 	pop	{r4, r5, pc}
   30ee4:	ebffd569 	bl	26490 <CLogger::Get()>
   30ee8:	e59531bc 	ldr	r3, [r5, #444]	; 0x1bc
   30eec:	e3a02004 	mov	r2, #4
   30ef0:	e58d3004 	str	r3, [sp, #4]
   30ef4:	e58d4000 	str	r4, [sp]
   30ef8:	e59f302c 	ldr	r3, [pc, #44]	; 30f2c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x9c>
   30efc:	e59f102c 	ldr	r1, [pc, #44]	; 30f30 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa0>
   30f00:	ebffd49f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30f04:	e28dd00c 	add	sp, sp, #12
   30f08:	e8bd8030 	pop	{r4, r5, pc}
   30f0c:	ebfffeb1 	bl	309d8 <BusAccess::busActionCheck() [clone .part.6]>
   30f10:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   30f14:	e3530001 	cmp	r3, #1
   30f18:	1affffef 	bne	30edc <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x4c>
   30f1c:	e1a00005 	mov	r0, r5
   30f20:	e28dd00c 	add	sp, sp, #12
   30f24:	e8bd4030 	pop	{r4, r5, lr}
   30f28:	eafffe6c 	b	308e0 <BusAccess::busActionHandleStart() [clone .part.7]>
   30f2c:	00047f20 	.word	0x00047f20
   30f30:	00047f48 	.word	0x00047f48

00030f34 <BusAccess::targetPageForInjection(int, bool)>:
   30f34:	e3520000 	cmp	r2, #0
   30f38:	0a00001a 	beq	30fa8 <BusAccess::targetPageForInjection(int, bool)+0x74>
   30f3c:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   30f40:	e3520000 	cmp	r2, #0
   30f44:	d12fff1e 	bxle	lr
   30f48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30f4c:	e1a06000 	mov	r6, r0
   30f50:	e1a04000 	mov	r4, r0
   30f54:	e3a05000 	mov	r5, #0
   30f58:	e3a08004 	mov	r8, #4
   30f5c:	e3a07007 	mov	r7, #7
   30f60:	ea000002 	b	30f70 <BusAccess::targetPageForInjection(int, bool)+0x3c>
   30f64:	e1520005 	cmp	r2, r5
   30f68:	e284402c 	add	r4, r4, #44	; 0x2c
   30f6c:	da00000c 	ble	30fa4 <BusAccess::targetPageForInjection(int, bool)+0x70>
   30f70:	e5d43004 	ldrb	r3, [r4, #4]
   30f74:	e2855001 	add	r5, r5, #1
   30f78:	e3530000 	cmp	r3, #0
   30f7c:	0afffff8 	beq	30f64 <BusAccess::targetPageForInjection(int, bool)+0x30>
   30f80:	e594300c 	ldr	r3, [r4, #12]
   30f84:	e1a02008 	mov	r2, r8
   30f88:	e5940010 	ldr	r0, [r4, #16]
   30f8c:	e1a01007 	mov	r1, r7
   30f90:	e12fff33 	blx	r3
   30f94:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   30f98:	e284402c 	add	r4, r4, #44	; 0x2c
   30f9c:	e1520005 	cmp	r2, r5
   30fa0:	cafffff2 	bgt	30f70 <BusAccess::targetPageForInjection(int, bool)+0x3c>
   30fa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30fa8:	e3a03001 	mov	r3, #1
   30fac:	e5c031c5 	strb	r3, [r0, #453]	; 0x1c5
   30fb0:	e12fff1e 	bx	lr

00030fb4 <BusAccess::busActionCheck()>:
   30fb4:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   30fb8:	e3530000 	cmp	r3, #0
   30fbc:	112fff1e 	bxne	lr
   30fc0:	eafffe84 	b	309d8 <BusAccess::busActionCheck() [clone .part.6]>

00030fc4 <BusAccess::busActionHandleStart()>:
   30fc4:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   30fc8:	e3530001 	cmp	r3, #1
   30fcc:	0a000001 	beq	30fd8 <BusAccess::busActionHandleStart()+0x14>
   30fd0:	e3a00000 	mov	r0, #0
   30fd4:	e12fff1e 	bx	lr
   30fd8:	eafffe40 	b	308e0 <BusAccess::busActionHandleStart() [clone .part.7]>

00030fdc <BusAccess::busAccessHandleIrqAck()>:
   30fdc:	e5d021d8 	ldrb	r2, [r0, #472]	; 0x1d8
   30fe0:	e3520003 	cmp	r2, #3
   30fe4:	0a000001 	beq	30ff0 <BusAccess::busAccessHandleIrqAck()+0x14>
   30fe8:	e3a00000 	mov	r0, #0
   30fec:	e12fff1e 	bx	lr
   30ff0:	e92d4010 	push	{r4, lr}
   30ff4:	e1a04000 	mov	r4, r0
   30ff8:	eb00030b 	bl	31c2c <BusAccess::controlBusRead()>
   30ffc:	e59f3094 	ldr	r3, [pc, #148]	; 31098 <BusAccess::busAccessHandleIrqAck()+0xbc>
   31000:	e0033000 	and	r3, r3, r0
   31004:	e3530018 	cmp	r3, #24
   31008:	0a000001 	beq	31014 <BusAccess::busAccessHandleIrqAck()+0x38>
   3100c:	e3a00000 	mov	r0, #0
   31010:	e8bd8010 	pop	{r4, pc}
   31014:	e3a02000 	mov	r2, #0
   31018:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   3101c:	e1a00004 	mov	r0, r4
   31020:	eb0008a8 	bl	332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31024:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31028:	e3510000 	cmp	r1, #0
   3102c:	c3a02000 	movgt	r2, #0
   31030:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31034:	c1a00002 	movgt	r0, r2
   31038:	da000013 	ble	3108c <BusAccess::busAccessHandleIrqAck()+0xb0>
   3103c:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31040:	e6ef3073 	uxtb	r3, r3
   31044:	e3530004 	cmp	r3, #4
   31048:	0023429c 	mlaeq	r3, ip, r2, r4
   3104c:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31050:	0a00000a 	beq	31080 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31054:	e3530001 	cmp	r3, #1
   31058:	0023429c 	mlaeq	r3, ip, r2, r4
   3105c:	05c30016 	strbeq	r0, [r3, #22]
   31060:	0a000006 	beq	31080 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31064:	e3530002 	cmp	r3, #2
   31068:	0023429c 	mlaeq	r3, ip, r2, r4
   3106c:	05c3001c 	strbeq	r0, [r3, #28]
   31070:	0a000002 	beq	31080 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31074:	e3530003 	cmp	r3, #3
   31078:	0023429c 	mlaeq	r3, ip, r2, r4
   3107c:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31080:	e2822001 	add	r2, r2, #1
   31084:	e1520001 	cmp	r2, r1
   31088:	1affffeb 	bne	3103c <BusAccess::busAccessHandleIrqAck()+0x60>
   3108c:	e3a03000 	mov	r3, #0
   31090:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31094:	eaffffdc 	b	3100c <BusAccess::busAccessHandleIrqAck()+0x30>
   31098:	00000418 	.word	0x00000418

0003109c <BusAccess::busActionClearFlags()>:
   3109c:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   310a0:	e3510000 	cmp	r1, #0
   310a4:	da00001a 	ble	31114 <BusAccess::busActionClearFlags()+0x78>
   310a8:	e3a02000 	mov	r2, #0
   310ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   310b0:	e1a0c002 	mov	ip, r2
   310b4:	e3a0e02c 	mov	lr, #44	; 0x2c
   310b8:	e5d031d8 	ldrb	r3, [r0, #472]	; 0x1d8
   310bc:	e6ef3073 	uxtb	r3, r3
   310c0:	e3530004 	cmp	r3, #4
   310c4:	0023029e 	mlaeq	r3, lr, r2, r0
   310c8:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   310cc:	0a00000a 	beq	310fc <BusAccess::busActionClearFlags()+0x60>
   310d0:	e3530001 	cmp	r3, #1
   310d4:	0023029e 	mlaeq	r3, lr, r2, r0
   310d8:	05c3c016 	strbeq	ip, [r3, #22]
   310dc:	0a000006 	beq	310fc <BusAccess::busActionClearFlags()+0x60>
   310e0:	e3530002 	cmp	r3, #2
   310e4:	0023029e 	mlaeq	r3, lr, r2, r0
   310e8:	05c3c01c 	strbeq	ip, [r3, #28]
   310ec:	0a000002 	beq	310fc <BusAccess::busActionClearFlags()+0x60>
   310f0:	e3530003 	cmp	r3, #3
   310f4:	0023029e 	mlaeq	r3, lr, r2, r0
   310f8:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   310fc:	e2822001 	add	r2, r2, #1
   31100:	e1520001 	cmp	r2, r1
   31104:	1affffeb 	bne	310b8 <BusAccess::busActionClearFlags()+0x1c>
   31108:	e3a03000 	mov	r3, #0
   3110c:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   31110:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31114:	e3a03000 	mov	r3, #0
   31118:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   3111c:	e12fff1e 	bx	lr

00031120 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   31120:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31124:	e3530000 	cmp	r3, #0
   31128:	da00002b 	ble	311dc <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
   3112c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31130:	e1a09002 	mov	r9, r2
   31134:	e1a08001 	mov	r8, r1
   31138:	e1a07000 	mov	r7, r0
   3113c:	e1a04000 	mov	r4, r0
   31140:	e3a05000 	mov	r5, #0
   31144:	e5d4c004 	ldrb	ip, [r4, #4]
   31148:	e2855001 	add	r5, r5, #1
   3114c:	e35c0000 	cmp	ip, #0
   31150:	0a000007 	beq	31174 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   31154:	e594600c 	ldr	r6, [r4, #12]
   31158:	e3560000 	cmp	r6, #0
   3115c:	0a000004 	beq	31174 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   31160:	e1a02009 	mov	r2, r9
   31164:	e1a01008 	mov	r1, r8
   31168:	e5940010 	ldr	r0, [r4, #16]
   3116c:	e12fff36 	blx	r6
   31170:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   31174:	e1530005 	cmp	r3, r5
   31178:	e284402c 	add	r4, r4, #44	; 0x2c
   3117c:	cafffff0 	bgt	31144 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x24>
   31180:	e3590002 	cmp	r9, #2
   31184:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   31188:	e3530000 	cmp	r3, #0
   3118c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   31190:	e1a04007 	mov	r4, r7
   31194:	e3a05000 	mov	r5, #0
   31198:	e3a09001 	mov	r9, #1
   3119c:	e5d42004 	ldrb	r2, [r4, #4]
   311a0:	e2855001 	add	r5, r5, #1
   311a4:	e3520000 	cmp	r2, #0
   311a8:	0a000007 	beq	311cc <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   311ac:	e594600c 	ldr	r6, [r4, #12]
   311b0:	e3560000 	cmp	r6, #0
   311b4:	0a000004 	beq	311cc <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   311b8:	e1a02009 	mov	r2, r9
   311bc:	e1a01008 	mov	r1, r8
   311c0:	e5940010 	ldr	r0, [r4, #16]
   311c4:	e12fff36 	blx	r6
   311c8:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   311cc:	e1530005 	cmp	r3, r5
   311d0:	e284402c 	add	r4, r4, #44	; 0x2c
   311d4:	cafffff0 	bgt	3119c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x7c>
   311d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   311dc:	e12fff1e 	bx	lr

000311e0 <BusAccess::busActionHandleActive()>:
   311e0:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   311e4:	e92d4070 	push	{r4, r5, r6, lr}
   311e8:	e3530001 	cmp	r3, #1
   311ec:	e1a04000 	mov	r4, r0
   311f0:	0a000068 	beq	31398 <BusAccess::busActionHandleActive()+0x1b8>
   311f4:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   311f8:	e3530002 	cmp	r3, #2
   311fc:	18bd8070 	popne	{r4, r5, r6, pc}
   31200:	e5d461d8 	ldrb	r6, [r4, #472]	; 0x1d8
   31204:	e6ef6076 	uxtb	r6, r6
   31208:	e3560004 	cmp	r6, #4
   3120c:	0a000035 	beq	312e8 <BusAccess::busActionHandleActive()+0x108>
   31210:	e1a00004 	mov	r0, r4
   31214:	ebffff70 	bl	30fdc <BusAccess::busAccessHandleIrqAck()>
   31218:	e2505000 	subs	r5, r0, #0
   3121c:	18bd8070 	popne	{r4, r5, r6, pc}
   31220:	ebfff171 	bl	2d7ec <micros>
   31224:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   31228:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   3122c:	ebfff18c 	bl	2d864 <isTimeout>
   31230:	e3500000 	cmp	r0, #0
   31234:	08bd8070 	popeq	{r4, r5, r6, pc}
   31238:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   3123c:	e3a02004 	mov	r2, #4
   31240:	e1a00004 	mov	r0, r4
   31244:	ebffffb5 	bl	31120 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31248:	e1a02005 	mov	r2, r5
   3124c:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31250:	e1a00004 	mov	r0, r4
   31254:	eb00081b 	bl	332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31258:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   3125c:	e3510000 	cmp	r1, #0
   31260:	c1a02005 	movgt	r2, r5
   31264:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31268:	c1a00002 	movgt	r0, r2
   3126c:	da000013 	ble	312c0 <BusAccess::busActionHandleActive()+0xe0>
   31270:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31274:	e6ef3073 	uxtb	r3, r3
   31278:	e3530004 	cmp	r3, #4
   3127c:	0023429c 	mlaeq	r3, ip, r2, r4
   31280:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31284:	0a00000a 	beq	312b4 <BusAccess::busActionHandleActive()+0xd4>
   31288:	e3530001 	cmp	r3, #1
   3128c:	0023429c 	mlaeq	r3, ip, r2, r4
   31290:	05c30016 	strbeq	r0, [r3, #22]
   31294:	0a000006 	beq	312b4 <BusAccess::busActionHandleActive()+0xd4>
   31298:	e3530002 	cmp	r3, #2
   3129c:	0023429c 	mlaeq	r3, ip, r2, r4
   312a0:	05c3001c 	strbeq	r0, [r3, #28]
   312a4:	0a000002 	beq	312b4 <BusAccess::busActionHandleActive()+0xd4>
   312a8:	e3530003 	cmp	r3, #3
   312ac:	0023429c 	mlaeq	r3, ip, r2, r4
   312b0:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   312b4:	e2822001 	add	r2, r2, #1
   312b8:	e1520001 	cmp	r2, r1
   312bc:	1affffeb 	bne	31270 <BusAccess::busActionHandleActive()+0x90>
   312c0:	e3a03000 	mov	r3, #0
   312c4:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   312c8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   312cc:	e3530001 	cmp	r3, #1
   312d0:	18bd8070 	popne	{r4, r5, r6, pc}
   312d4:	e1a00004 	mov	r0, r4
   312d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   312dc:	e3a02004 	mov	r2, #4
   312e0:	e3a01009 	mov	r1, #9
   312e4:	eaffff8d 	b	31120 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   312e8:	e59f31fc 	ldr	r3, [pc, #508]	; 314ec <BusAccess::busActionHandleActive()+0x30c>
   312ec:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   312f0:	e2125004 	ands	r5, r2, #4
   312f4:	1a00004e 	bne	31434 <BusAccess::busActionHandleActive()+0x254>
   312f8:	e1a00004 	mov	r0, r4
   312fc:	eb0006ef 	bl	32ec0 <BusAccess::controlTake()>
   31300:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31304:	e3510000 	cmp	r1, #0
   31308:	c1a02005 	movgt	r2, r5
   3130c:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31310:	c1a00002 	movgt	r0, r2
   31314:	da000013 	ble	31368 <BusAccess::busActionHandleActive()+0x188>
   31318:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   3131c:	e6ef3073 	uxtb	r3, r3
   31320:	e3530004 	cmp	r3, #4
   31324:	0023429c 	mlaeq	r3, ip, r2, r4
   31328:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   3132c:	0a00000a 	beq	3135c <BusAccess::busActionHandleActive()+0x17c>
   31330:	e3530001 	cmp	r3, #1
   31334:	0023429c 	mlaeq	r3, ip, r2, r4
   31338:	05c30016 	strbeq	r0, [r3, #22]
   3133c:	0a000006 	beq	3135c <BusAccess::busActionHandleActive()+0x17c>
   31340:	e3530002 	cmp	r3, #2
   31344:	0023429c 	mlaeq	r3, ip, r2, r4
   31348:	05c3001c 	strbeq	r0, [r3, #28]
   3134c:	0a000002 	beq	3135c <BusAccess::busActionHandleActive()+0x17c>
   31350:	e3530003 	cmp	r3, #3
   31354:	0023429c 	mlaeq	r3, ip, r2, r4
   31358:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   3135c:	e2822001 	add	r2, r2, #1
   31360:	e1520001 	cmp	r2, r1
   31364:	1affffeb 	bne	31318 <BusAccess::busActionHandleActive()+0x138>
   31368:	e3a03000 	mov	r3, #0
   3136c:	e3a0202c 	mov	r2, #44	; 0x2c
   31370:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31374:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31378:	e1a00004 	mov	r0, r4
   3137c:	e0234392 	mla	r3, r2, r3, r4
   31380:	e3a01004 	mov	r1, #4
   31384:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31388:	ebffff64 	bl	31120 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   3138c:	e1a00004 	mov	r0, r4
   31390:	e8bd4070 	pop	{r4, r5, r6, lr}
   31394:	ea0005d2 	b	32ae4 <BusAccess::controlRelease()>
   31398:	ebfff113 	bl	2d7ec <micros>
   3139c:	e59411dc 	ldr	r1, [r4, #476]	; 0x1dc
   313a0:	e59f2148 	ldr	r2, [pc, #328]	; 314f0 <BusAccess::busActionHandleActive()+0x310>
   313a4:	ebfff12e 	bl	2d864 <isTimeout>
   313a8:	e3500000 	cmp	r0, #0
   313ac:	0affff90 	beq	311f4 <BusAccess::busActionHandleActive()+0x14>
   313b0:	e3a02000 	mov	r2, #0
   313b4:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   313b8:	e1a00004 	mov	r0, r4
   313bc:	eb0007c1 	bl	332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   313c0:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   313c4:	e3510000 	cmp	r1, #0
   313c8:	c3a02000 	movgt	r2, #0
   313cc:	c3a0c02c 	movgt	ip, #44	; 0x2c
   313d0:	c1a00002 	movgt	r0, r2
   313d4:	da000013 	ble	31428 <BusAccess::busActionHandleActive()+0x248>
   313d8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   313dc:	e6ef3073 	uxtb	r3, r3
   313e0:	e3530004 	cmp	r3, #4
   313e4:	0023429c 	mlaeq	r3, ip, r2, r4
   313e8:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   313ec:	0a00000a 	beq	3141c <BusAccess::busActionHandleActive()+0x23c>
   313f0:	e3530001 	cmp	r3, #1
   313f4:	0023429c 	mlaeq	r3, ip, r2, r4
   313f8:	05c30016 	strbeq	r0, [r3, #22]
   313fc:	0a000006 	beq	3141c <BusAccess::busActionHandleActive()+0x23c>
   31400:	e3530002 	cmp	r3, #2
   31404:	0023429c 	mlaeq	r3, ip, r2, r4
   31408:	05c3001c 	strbeq	r0, [r3, #28]
   3140c:	0a000002 	beq	3141c <BusAccess::busActionHandleActive()+0x23c>
   31410:	e3530003 	cmp	r3, #3
   31414:	0023429c 	mlaeq	r3, ip, r2, r4
   31418:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   3141c:	e2822001 	add	r2, r2, #1
   31420:	e1520001 	cmp	r2, r1
   31424:	1affffeb 	bne	313d8 <BusAccess::busActionHandleActive()+0x1f8>
   31428:	e3a03000 	mov	r3, #0
   3142c:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31430:	eaffff6f 	b	311f4 <BusAccess::busActionHandleActive()+0x14>
   31434:	ebfff0ec 	bl	2d7ec <micros>
   31438:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   3143c:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   31440:	ebfff107 	bl	2d864 <isTimeout>
   31444:	e3500000 	cmp	r0, #0
   31448:	08bd8070 	popeq	{r4, r5, r6, pc}
   3144c:	e3a0502c 	mov	r5, #44	; 0x2c
   31450:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31454:	e3a01005 	mov	r1, #5
   31458:	e0234395 	mla	r3, r5, r3, r4
   3145c:	e1a00004 	mov	r0, r4
   31460:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31464:	ebffff2d 	bl	31120 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31468:	e3a02000 	mov	r2, #0
   3146c:	e1a01006 	mov	r1, r6
   31470:	e1a00004 	mov	r0, r4
   31474:	eb000793 	bl	332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31478:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   3147c:	e3510000 	cmp	r1, #0
   31480:	c3a02000 	movgt	r2, #0
   31484:	c1a00005 	movgt	r0, r5
   31488:	c1a0c002 	movgt	ip, r2
   3148c:	da000013 	ble	314e0 <BusAccess::busActionHandleActive()+0x300>
   31490:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31494:	e6ef3073 	uxtb	r3, r3
   31498:	e3530004 	cmp	r3, #4
   3149c:	00234290 	mlaeq	r3, r0, r2, r4
   314a0:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   314a4:	0a00000a 	beq	314d4 <BusAccess::busActionHandleActive()+0x2f4>
   314a8:	e3530001 	cmp	r3, #1
   314ac:	00234290 	mlaeq	r3, r0, r2, r4
   314b0:	05c3c016 	strbeq	ip, [r3, #22]
   314b4:	0a000006 	beq	314d4 <BusAccess::busActionHandleActive()+0x2f4>
   314b8:	e3530002 	cmp	r3, #2
   314bc:	00234290 	mlaeq	r3, r0, r2, r4
   314c0:	05c3c01c 	strbeq	ip, [r3, #28]
   314c4:	0a000002 	beq	314d4 <BusAccess::busActionHandleActive()+0x2f4>
   314c8:	e3530003 	cmp	r3, #3
   314cc:	00234290 	mlaeq	r3, r0, r2, r4
   314d0:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   314d4:	e2822001 	add	r2, r2, #1
   314d8:	e1520001 	cmp	r2, r1
   314dc:	1affffeb 	bne	31490 <BusAccess::busActionHandleActive()+0x2b0>
   314e0:	e3a03000 	mov	r3, #0
   314e4:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   314e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   314ec:	20200000 	.word	0x20200000
   314f0:	000186a0 	.word	0x000186a0

000314f4 <BusAccess::stepTimerISR(void*)>:
   314f4:	e12fff1e 	bx	lr

000314f8 <BusAccess::waitHandleReadRelease()>:
   314f8:	e5d031c4 	ldrb	r3, [r0, #452]	; 0x1c4
   314fc:	e3530000 	cmp	r3, #0
   31500:	012fff1e 	bxeq	lr
   31504:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31508:	e1a08000 	mov	r8, r0
   3150c:	ebfff0b6 	bl	2d7ec <micros>
   31510:	e3a0500a 	mov	r5, #10
   31514:	e1a06000 	mov	r6, r0
   31518:	e59f4064 	ldr	r4, [pc, #100]	; 31584 <BusAccess::waitHandleReadRelease()+0x8c>
   3151c:	ea000003 	b	31530 <BusAccess::waitHandleReadRelease()+0x38>
   31520:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31524:	e2033003 	and	r3, r3, #3
   31528:	e3530003 	cmp	r3, #3
   3152c:	0a000008 	beq	31554 <BusAccess::waitHandleReadRelease()+0x5c>
   31530:	ebfff0ad 	bl	2d7ec <micros>
   31534:	e1a02005 	mov	r2, r5
   31538:	e1a01006 	mov	r1, r6
   3153c:	ebfff0c8 	bl	2d864 <isTimeout>
   31540:	e2507000 	subs	r7, r0, #0
   31544:	0afffff5 	beq	31520 <BusAccess::waitHandleReadRelease()+0x28>
   31548:	e3a03000 	mov	r3, #0
   3154c:	e5c831c4 	strb	r3, [r8, #452]	; 0x1c4
   31550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31554:	e3a02040 	mov	r2, #64	; 0x40
   31558:	e5943008 	ldr	r3, [r4, #8]
   3155c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   31560:	e5843008 	str	r3, [r4, #8]
   31564:	e584201c 	str	r2, [r4, #28]
   31568:	e5d831c5 	ldrb	r3, [r8, #453]	; 0x1c5
   3156c:	e3530000 	cmp	r3, #0
   31570:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31574:	e1a00008 	mov	r0, r8
   31578:	eb0007a1 	bl	33404 <BusAccess::busAccessCallbackPageIn()>
   3157c:	e5c871c5 	strb	r7, [r8, #453]	; 0x1c5
   31580:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31584:	20200000 	.word	0x20200000

00031588 <BusAccess::waitRelease()>:
   31588:	e92d4010 	push	{r4, lr}
   3158c:	e1a04000 	mov	r4, r0
   31590:	e3a01000 	mov	r1, #0
   31594:	eb000610 	bl	32ddc <BusAccess::waitResetFlipFlops(bool)>
   31598:	e1a00004 	mov	r0, r4
   3159c:	e8bd4010 	pop	{r4, lr}
   315a0:	eaffffd4 	b	314f8 <BusAccess::waitHandleReadRelease()>

000315a4 <BusAccess::waitHandleNew()>:
   315a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   315a8:	e1a06000 	mov	r6, r0
   315ac:	e24dd018 	sub	sp, sp, #24
   315b0:	e3a04000 	mov	r4, #0
   315b4:	ebfff08c 	bl	2d7ec <micros>
   315b8:	e5d631c5 	ldrb	r3, [r6, #453]	; 0x1c5
   315bc:	e1a08000 	mov	r8, r0
   315c0:	e1530004 	cmp	r3, r4
   315c4:	e58d400c 	str	r4, [sp, #12]
   315c8:	e58d4010 	str	r4, [sp, #16]
   315cc:	1a000076 	bne	317ac <BusAccess::waitHandleNew()+0x208>
   315d0:	e1a00006 	mov	r0, r6
   315d4:	eb000194 	bl	31c2c <BusAccess::controlBusRead()>
   315d8:	e5d631d1 	ldrb	r3, [r6, #465]	; 0x1d1
   315dc:	e1a07000 	mov	r7, r0
   315e0:	e3530000 	cmp	r3, #0
   315e4:	0a00006b 	beq	31798 <BusAccess::waitHandleNew()+0x1f4>
   315e8:	e3a03000 	mov	r3, #0
   315ec:	e5c631d1 	strb	r3, [r6, #465]	; 0x1d1
   315f0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   315f4:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   315f8:	e58d3014 	str	r3, [sp, #20]
   315fc:	e3520000 	cmp	r2, #0
   31600:	c1a04006 	movgt	r4, r6
   31604:	c3a05000 	movgt	r5, #0
   31608:	c28d9014 	addgt	r9, sp, #20
   3160c:	da000010 	ble	31654 <BusAccess::waitHandleNew()+0xb0>
   31610:	e5d43004 	ldrb	r3, [r4, #4]
   31614:	e2855001 	add	r5, r5, #1
   31618:	e3530000 	cmp	r3, #0
   3161c:	0a000009 	beq	31648 <BusAccess::waitHandleNew()+0xa4>
   31620:	e594a008 	ldr	sl, [r4, #8]
   31624:	e35a0000 	cmp	sl, #0
   31628:	0a000006 	beq	31648 <BusAccess::waitHandleNew()+0xa4>
   3162c:	e59d2010 	ldr	r2, [sp, #16]
   31630:	e5940010 	ldr	r0, [r4, #16]
   31634:	e59d100c 	ldr	r1, [sp, #12]
   31638:	e58d9000 	str	r9, [sp]
   3163c:	e1a03007 	mov	r3, r7
   31640:	e12fff3a 	blx	sl
   31644:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31648:	e1520005 	cmp	r2, r5
   3164c:	e284402c 	add	r4, r4, #44	; 0x2c
   31650:	caffffee 	bgt	31610 <BusAccess::waitHandleNew()+0x6c>
   31654:	e2174001 	ands	r4, r7, #1
   31658:	0a000001 	beq	31664 <BusAccess::waitHandleNew()+0xc0>
   3165c:	e317000c 	tst	r7, #12
   31660:	1a000026 	bne	31700 <BusAccess::waitHandleNew()+0x15c>
   31664:	e2073018 	and	r3, r7, #24
   31668:	e3530018 	cmp	r3, #24
   3166c:	0a000023 	beq	31700 <BusAccess::waitHandleNew()+0x15c>
   31670:	ebfff05d 	bl	2d7ec <micros>
   31674:	e5963234 	ldr	r3, [r6, #564]	; 0x234
   31678:	e3170004 	tst	r7, #4
   3167c:	e2833001 	add	r3, r3, #1
   31680:	e0408008 	sub	r8, r0, r8
   31684:	e5863234 	str	r3, [r6, #564]	; 0x234
   31688:	0a000033 	beq	3175c <BusAccess::waitHandleNew()+0x1b8>
   3168c:	e3540000 	cmp	r4, #0
   31690:	0a00003b 	beq	31784 <BusAccess::waitHandleNew()+0x1e0>
   31694:	e5963254 	ldr	r3, [r6, #596]	; 0x254
   31698:	e2833001 	add	r3, r3, #1
   3169c:	e5863254 	str	r3, [r6, #596]	; 0x254
   316a0:	e59f319c 	ldr	r3, [pc, #412]	; 31844 <BusAccess::waitHandleNew()+0x2a0>
   316a4:	e5962238 	ldr	r2, [r6, #568]	; 0x238
   316a8:	e1520003 	cmp	r2, r3
   316ac:	83a03000 	movhi	r3, #0
   316b0:	85863238 	strhi	r3, [r6, #568]	; 0x238
   316b4:	8586323c 	strhi	r3, [r6, #572]	; 0x23c
   316b8:	e59f3188 	ldr	r3, [pc, #392]	; 31848 <BusAccess::waitHandleNew()+0x2a4>
   316bc:	e1580003 	cmp	r8, r3
   316c0:	8a000009 	bhi	316ec <BusAccess::waitHandleNew()+0x148>
   316c4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   316c8:	e5963238 	ldr	r3, [r6, #568]	; 0x238
   316cc:	e596123c 	ldr	r1, [r6, #572]	; 0x23c
   316d0:	e0883003 	add	r3, r8, r3
   316d4:	e2811001 	add	r1, r1, #1
   316d8:	e5863238 	str	r3, [r6, #568]	; 0x238
   316dc:	e0000390 	mul	r0, r0, r3
   316e0:	e586123c 	str	r1, [r6, #572]	; 0x23c
   316e4:	eb0038ad 	bl	3f9a0 <__aeabi_uidiv>
   316e8:	e5860240 	str	r0, [r6, #576]	; 0x240
   316ec:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   316f0:	e1580003 	cmp	r8, r3
   316f4:	85868244 	strhi	r8, [r6, #580]	; 0x244
   316f8:	e28dd018 	add	sp, sp, #24
   316fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31700:	e59d3014 	ldr	r3, [sp, #20]
   31704:	e3530000 	cmp	r3, #0
   31708:	baffffd8 	blt	31670 <BusAccess::waitHandleNew()+0xcc>
   3170c:	e5d621d1 	ldrb	r2, [r6, #465]	; 0x1d1
   31710:	e3520000 	cmp	r2, #0
   31714:	1a00002c 	bne	317cc <BusAccess::waitHandleNew()+0x228>
   31718:	e3a0c040 	mov	ip, #64	; 0x40
   3171c:	e1a03a03 	lsl	r3, r3, #20
   31720:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   31724:	e1e01003 	mvn	r1, r3
   31728:	e3a0e001 	mov	lr, #1
   3172c:	e59f2118 	ldr	r2, [pc, #280]	; 3184c <BusAccess::waitHandleNew()+0x2a8>
   31730:	e59f0118 	ldr	r0, [pc, #280]	; 31850 <BusAccess::waitHandleNew()+0x2ac>
   31734:	e582c028 	str	ip, [r2, #40]	; 0x28
   31738:	e592c008 	ldr	ip, [r2, #8]
   3173c:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   31740:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   31744:	e18c0000 	orr	r0, ip, r0
   31748:	e5820008 	str	r0, [r2, #8]
   3174c:	e582301c 	str	r3, [r2, #28]
   31750:	e5821028 	str	r1, [r2, #40]	; 0x28
   31754:	e5c6e1c4 	strb	lr, [r6, #452]	; 0x1c4
   31758:	eaffffc4 	b	31670 <BusAccess::waitHandleNew()+0xcc>
   3175c:	e3170008 	tst	r7, #8
   31760:	0affffce 	beq	316a0 <BusAccess::waitHandleNew()+0xfc>
   31764:	e3540000 	cmp	r4, #0
   31768:	1a000013 	bne	317bc <BusAccess::waitHandleNew()+0x218>
   3176c:	e3170002 	tst	r7, #2
   31770:	0a000024 	beq	31808 <BusAccess::waitHandleNew()+0x264>
   31774:	e5963260 	ldr	r3, [r6, #608]	; 0x260
   31778:	e2833001 	add	r3, r3, #1
   3177c:	e5863260 	str	r3, [r6, #608]	; 0x260
   31780:	eaffffc6 	b	316a0 <BusAccess::waitHandleNew()+0xfc>
   31784:	e3170002 	tst	r7, #2
   31788:	15963258 	ldrne	r3, [r6, #600]	; 0x258
   3178c:	12833001 	addne	r3, r3, #1
   31790:	15863258 	strne	r3, [r6, #600]	; 0x258
   31794:	eaffffc1 	b	316a0 <BusAccess::waitHandleNew()+0xfc>
   31798:	e28d2010 	add	r2, sp, #16
   3179c:	e28d100c 	add	r1, sp, #12
   317a0:	e1a00006 	mov	r0, r6
   317a4:	eb00016d 	bl	31d60 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   317a8:	eaffff90 	b	315f0 <BusAccess::waitHandleNew()+0x4c>
   317ac:	e1a00006 	mov	r0, r6
   317b0:	eb000713 	bl	33404 <BusAccess::busAccessCallbackPageIn()>
   317b4:	e5c641c5 	strb	r4, [r6, #453]	; 0x1c5
   317b8:	eaffff84 	b	315d0 <BusAccess::waitHandleNew()+0x2c>
   317bc:	e596325c 	ldr	r3, [r6, #604]	; 0x25c
   317c0:	e2833001 	add	r3, r3, #1
   317c4:	e586325c 	str	r3, [r6, #604]	; 0x25c
   317c8:	eaffffb4 	b	316a0 <BusAccess::waitHandleNew()+0xfc>
   317cc:	e5963000 	ldr	r3, [r6]
   317d0:	e3530011 	cmp	r3, #17
   317d4:	0a000010 	beq	3181c <BusAccess::waitHandleNew()+0x278>
   317d8:	e3a03c02 	mov	r3, #512	; 0x200
   317dc:	e3a02c0e 	mov	r2, #3584	; 0xe00
   317e0:	e3a09801 	mov	r9, #65536	; 0x10000
   317e4:	e59f5060 	ldr	r5, [pc, #96]	; 3184c <BusAccess::waitHandleNew()+0x2a8>
   317e8:	e3a0000a 	mov	r0, #10
   317ec:	e5852028 	str	r2, [r5, #40]	; 0x28
   317f0:	e585301c 	str	r3, [r5, #28]
   317f4:	e5859028 	str	r9, [r5, #40]	; 0x28
   317f8:	eb003b22 	bl	40488 <lowlev_cycleDelay>
   317fc:	e59d3014 	ldr	r3, [sp, #20]
   31800:	e585901c 	str	r9, [r5, #28]
   31804:	eaffffc3 	b	31718 <BusAccess::waitHandleNew()+0x174>
   31808:	e3170010 	tst	r7, #16
   3180c:	15963264 	ldrne	r3, [r6, #612]	; 0x264
   31810:	12833001 	addne	r3, r3, #1
   31814:	15863264 	strne	r3, [r6, #612]	; 0x264
   31818:	eaffffa0 	b	316a0 <BusAccess::waitHandleNew()+0xfc>
   3181c:	e3a03c02 	mov	r3, #512	; 0x200
   31820:	e3a09c0e 	mov	r9, #3584	; 0xe00
   31824:	e59f5020 	ldr	r5, [pc, #32]	; 3184c <BusAccess::waitHandleNew()+0x2a8>
   31828:	e3a0000a 	mov	r0, #10
   3182c:	e5859028 	str	r9, [r5, #40]	; 0x28
   31830:	e585301c 	str	r3, [r5, #28]
   31834:	eb003b13 	bl	40488 <lowlev_cycleDelay>
   31838:	e5859028 	str	r9, [r5, #40]	; 0x28
   3183c:	e59d3014 	ldr	r3, [sp, #20]
   31840:	eaffffb4 	b	31718 <BusAccess::waitHandleNew()+0x174>
   31844:	3b9aca00 	.word	0x3b9aca00
   31848:	000f423f 	.word	0x000f423f
   3184c:	20200000 	.word	0x20200000
   31850:	00249249 	.word	0x00249249

00031854 <BusAccess::serviceWaitActivity()>:
   31854:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31858:	e92d4010 	push	{r4, lr}
   3185c:	e3530000 	cmp	r3, #0
   31860:	e1a04000 	mov	r4, r0
   31864:	0a00002d 	beq	31920 <BusAccess::serviceWaitActivity()+0xcc>
   31868:	e1a00004 	mov	r0, r4
   3186c:	ebfffe5b 	bl	311e0 <BusAccess::busActionHandleActive()>
   31870:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   31874:	e3530000 	cmp	r3, #0
   31878:	1a00000a 	bne	318a8 <BusAccess::serviceWaitActivity()+0x54>
   3187c:	e59f30d8 	ldr	r3, [pc, #216]	; 3195c <BusAccess::serviceWaitActivity()+0x108>
   31880:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31884:	e2033024 	and	r3, r3, #36	; 0x24
   31888:	e3530004 	cmp	r3, #4
   3188c:	0a000025 	beq	31928 <BusAccess::serviceWaitActivity()+0xd4>
   31890:	e5d431c1 	ldrb	r3, [r4, #449]	; 0x1c1
   31894:	e3530000 	cmp	r3, #0
   31898:	1a000002 	bne	318a8 <BusAccess::serviceWaitActivity()+0x54>
   3189c:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   318a0:	e3530001 	cmp	r3, #1
   318a4:	0a000029 	beq	31950 <BusAccess::serviceWaitActivity()+0xfc>
   318a8:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   318ac:	e3530000 	cmp	r3, #0
   318b0:	08bd8010 	popeq	{r4, pc}
   318b4:	e59f30a0 	ldr	r3, [pc, #160]	; 3195c <BusAccess::serviceWaitActivity()+0x108>
   318b8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   318bc:	e3130001 	tst	r3, #1
   318c0:	0a00000e 	beq	31900 <BusAccess::serviceWaitActivity()+0xac>
   318c4:	ebffefc8 	bl	2d7ec <micros>
   318c8:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   318cc:	e59421c8 	ldr	r2, [r4, #456]	; 0x1c8
   318d0:	ebffefe3 	bl	2d864 <isTimeout>
   318d4:	e3500000 	cmp	r0, #0
   318d8:	08bd8010 	popeq	{r4, pc}
   318dc:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   318e0:	e3530001 	cmp	r3, #1
   318e4:	0a000016 	beq	31944 <BusAccess::serviceWaitActivity()+0xf0>
   318e8:	e1a00004 	mov	r0, r4
   318ec:	e3a01000 	mov	r1, #0
   318f0:	eb000539 	bl	32ddc <BusAccess::waitResetFlipFlops(bool)>
   318f4:	e1a00004 	mov	r0, r4
   318f8:	e8bd4010 	pop	{r4, lr}
   318fc:	eafffefd 	b	314f8 <BusAccess::waitHandleReadRelease()>
   31900:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   31904:	e3530000 	cmp	r3, #0
   31908:	0affffed 	beq	318c4 <BusAccess::serviceWaitActivity()+0x70>
   3190c:	ebffefb6 	bl	2d7ec <micros>
   31910:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   31914:	ebffefb4 	bl	2d7ec <micros>
   31918:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   3191c:	e8bd8010 	pop	{r4, pc}
   31920:	ebfffc2c 	bl	309d8 <BusAccess::busActionCheck() [clone .part.6]>
   31924:	eaffffcf 	b	31868 <BusAccess::serviceWaitActivity()+0x14>
   31928:	ebffefaf 	bl	2d7ec <micros>
   3192c:	e3a03001 	mov	r3, #1
   31930:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   31934:	e1a00004 	mov	r0, r4
   31938:	e5c431c3 	strb	r3, [r4, #451]	; 0x1c3
   3193c:	ebffff18 	bl	315a4 <BusAccess::waitHandleNew()>
   31940:	eaffffd8 	b	318a8 <BusAccess::serviceWaitActivity()+0x54>
   31944:	e1a00004 	mov	r0, r4
   31948:	ebfffbe4 	bl	308e0 <BusAccess::busActionHandleStart() [clone .part.7]>
   3194c:	eaffffe5 	b	318e8 <BusAccess::serviceWaitActivity()+0x94>
   31950:	e1a00004 	mov	r0, r4
   31954:	ebfffbe1 	bl	308e0 <BusAccess::busActionHandleStart() [clone .part.7]>
   31958:	eaffffd2 	b	318a8 <BusAccess::serviceWaitActivity()+0x54>
   3195c:	20200000 	.word	0x20200000

00031960 <BusAccess::service()>:
   31960:	e5d031c0 	ldrb	r3, [r0, #448]	; 0x1c0
   31964:	e3530000 	cmp	r3, #0
   31968:	012fff1e 	bxeq	lr
   3196c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31970:	e1a04000 	mov	r4, r0
   31974:	ebffef9c 	bl	2d7ec <micros>
   31978:	e3a0500a 	mov	r5, #10
   3197c:	e1a07000 	mov	r7, r0
   31980:	e59f6048 	ldr	r6, [pc, #72]	; 319d0 <BusAccess::service()+0x70>
   31984:	e1a00004 	mov	r0, r4
   31988:	ebffffb1 	bl	31854 <BusAccess::serviceWaitActivity()>
   3198c:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31990:	e3530002 	cmp	r3, #2
   31994:	0a000002 	beq	319a4 <BusAccess::service()+0x44>
   31998:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   3199c:	e3530000 	cmp	r3, #0
   319a0:	0a000009 	beq	319cc <BusAccess::service()+0x6c>
   319a4:	ebffef90 	bl	2d7ec <micros>
   319a8:	e1a02006 	mov	r2, r6
   319ac:	e1a01007 	mov	r1, r7
   319b0:	ebffefab 	bl	2d864 <isTimeout>
   319b4:	e3500000 	cmp	r0, #0
   319b8:	1a000002 	bne	319c8 <BusAccess::service()+0x68>
   319bc:	e2555001 	subs	r5, r5, #1
   319c0:	1affffef 	bne	31984 <BusAccess::service()+0x24>
   319c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   319c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   319cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   319d0:	00002710 	.word	0x00002710

000319d4 <BusAccessStatusInfo::getJson()>:
   319d4:	e92d4070 	push	{r4, r5, r6, lr}
   319d8:	e1a04000 	mov	r4, r0
   319dc:	e5902048 	ldr	r2, [r0, #72]	; 0x48
   319e0:	e24ddf9e 	sub	sp, sp, #632	; 0x278
   319e4:	e5903000 	ldr	r3, [r0]
   319e8:	e280003c 	add	r0, r0, #60	; 0x3c
   319ec:	e8905001 	ldm	r0, {r0, ip, lr}
   319f0:	e5941010 	ldr	r1, [r4, #16]
   319f4:	e58d2014 	str	r2, [sp, #20]
   319f8:	e594200c 	ldr	r2, [r4, #12]
   319fc:	e59f5088 	ldr	r5, [pc, #136]	; 31a8c <BusAccessStatusInfo::getJson()+0xb8>
   31a00:	e58de010 	str	lr, [sp, #16]
   31a04:	e58dc00c 	str	ip, [sp, #12]
   31a08:	e58d0008 	str	r0, [sp, #8]
   31a0c:	e58d1004 	str	r1, [sp, #4]
   31a10:	e58d2000 	str	r2, [sp]
   31a14:	e1a00005 	mov	r0, r5
   31a18:	e59f2070 	ldr	r2, [pc, #112]	; 31a90 <BusAccessStatusInfo::getJson()+0xbc>
   31a1c:	e3a01f96 	mov	r1, #600	; 0x258
   31a20:	ebfff023 	bl	2dab4 <snprintf>
   31a24:	e594201c 	ldr	r2, [r4, #28]
   31a28:	e5943020 	ldr	r3, [r4, #32]
   31a2c:	e594e014 	ldr	lr, [r4, #20]
   31a30:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   31a34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   31a38:	e5946018 	ldr	r6, [r4, #24]
   31a3c:	e58d2018 	str	r2, [sp, #24]
   31a40:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   31a44:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   31a48:	e58de010 	str	lr, [sp, #16]
   31a4c:	e58dc00c 	str	ip, [sp, #12]
   31a50:	e58d0008 	str	r0, [sp, #8]
   31a54:	e58d1004 	str	r1, [sp, #4]
   31a58:	e58d2000 	str	r2, [sp]
   31a5c:	e58d6014 	str	r6, [sp, #20]
   31a60:	e28d0020 	add	r0, sp, #32
   31a64:	e59f2028 	ldr	r2, [pc, #40]	; 31a94 <BusAccessStatusInfo::getJson()+0xc0>
   31a68:	e3a01f96 	mov	r1, #600	; 0x258
   31a6c:	ebfff010 	bl	2dab4 <snprintf>
   31a70:	e28d1020 	add	r1, sp, #32
   31a74:	e1a00005 	mov	r0, r5
   31a78:	e3a02f96 	mov	r2, #600	; 0x258
   31a7c:	ebffefb1 	bl	2d948 <strlcat>
   31a80:	e1a00005 	mov	r0, r5
   31a84:	e28ddf9e 	add	sp, sp, #632	; 0x278
   31a88:	e8bd8070 	pop	{r4, r5, r6, pc}
   31a8c:	00050248 	.word	0x00050248
   31a90:	00047f4c 	.word	0x00047f4c
   31a94:	00047fb8 	.word	0x00047fb8

00031a98 <BusAccess::busSocketIsEnabled(int)>:
   31a98:	e3510000 	cmp	r1, #0
   31a9c:	ba000006 	blt	31abc <BusAccess::busSocketIsEnabled(int)+0x24>
   31aa0:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31aa4:	e1510003 	cmp	r1, r3
   31aa8:	aa000003 	bge	31abc <BusAccess::busSocketIsEnabled(int)+0x24>
   31aac:	e3a0302c 	mov	r3, #44	; 0x2c
   31ab0:	e0210193 	mla	r1, r3, r1, r0
   31ab4:	e5d10004 	ldrb	r0, [r1, #4]
   31ab8:	e12fff1e 	bx	lr
   31abc:	e3a00000 	mov	r0, #0
   31ac0:	e12fff1e 	bx	lr

00031ac4 <BusAccess::getStatus(BusAccessStatusInfo&)>:
   31ac4:	e1a03001 	mov	r3, r1
   31ac8:	e92d4010 	push	{r4, lr}
   31acc:	e2801f8d 	add	r1, r0, #564	; 0x234
   31ad0:	e3a0204c 	mov	r2, #76	; 0x4c
   31ad4:	e1a00003 	mov	r0, r3
   31ad8:	ebffe1bc 	bl	2a1d0 <memcpy>
   31adc:	e8bd8010 	pop	{r4, pc}

00031ae0 <BusAccess::clearStatus()>:
   31ae0:	e3a03000 	mov	r3, #0
   31ae4:	e5803234 	str	r3, [r0, #564]	; 0x234
   31ae8:	e5803238 	str	r3, [r0, #568]	; 0x238
   31aec:	e580323c 	str	r3, [r0, #572]	; 0x23c
   31af0:	e5803240 	str	r3, [r0, #576]	; 0x240
   31af4:	e5803244 	str	r3, [r0, #580]	; 0x244
   31af8:	e5803248 	str	r3, [r0, #584]	; 0x248
   31afc:	e580324c 	str	r3, [r0, #588]	; 0x24c
   31b00:	e5803250 	str	r3, [r0, #592]	; 0x250
   31b04:	e5803268 	str	r3, [r0, #616]	; 0x268
   31b08:	e580326c 	str	r3, [r0, #620]	; 0x26c
   31b0c:	e5803270 	str	r3, [r0, #624]	; 0x270
   31b10:	e5803274 	str	r3, [r0, #628]	; 0x274
   31b14:	e5803278 	str	r3, [r0, #632]	; 0x278
   31b18:	e580327c 	str	r3, [r0, #636]	; 0x27c
   31b1c:	e5803254 	str	r3, [r0, #596]	; 0x254
   31b20:	e5803258 	str	r3, [r0, #600]	; 0x258
   31b24:	e580325c 	str	r3, [r0, #604]	; 0x25c
   31b28:	e5803260 	str	r3, [r0, #608]	; 0x260
   31b2c:	e5803264 	str	r3, [r0, #612]	; 0x264
   31b30:	e12fff1e 	bx	lr

00031b34 <BusAccess::isUnderControl()>:
   31b34:	e5d001f1 	ldrb	r0, [r0, #497]	; 0x1f1
   31b38:	e12fff1e 	bx	lr

00031b3c <BusAccess::controlRequest()>:
   31b3c:	e3a0c040 	mov	ip, #64	; 0x40
   31b40:	e59f3018 	ldr	r3, [pc, #24]	; 31b60 <BusAccess::controlRequest()+0x24>
   31b44:	e3a01000 	mov	r1, #0
   31b48:	e5932008 	ldr	r2, [r3, #8]
   31b4c:	e3a00013 	mov	r0, #19
   31b50:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31b54:	e5832008 	str	r2, [r3, #8]
   31b58:	e583c01c 	str	ip, [r3, #28]
   31b5c:	ea003a1c 	b	403d4 <digitalWrite>
   31b60:	20200000 	.word	0x20200000

00031b64 <BusAccess::waitForBusAck(bool)>:
   31b64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31b68:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   31b6c:	e1a04001 	mov	r4, r1
   31b70:	e59f10ac 	ldr	r1, [pc, #172]	; 31c24 <BusAccess::waitForBusAck(bool)+0xc0>
   31b74:	ea000001 	b	31b80 <BusAccess::waitForBusAck(bool)+0x1c>
   31b78:	e2522001 	subs	r2, r2, #1
   31b7c:	0a000005 	beq	31b98 <BusAccess::waitForBusAck(bool)+0x34>
   31b80:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   31b84:	e1a03123 	lsr	r3, r3, #2
   31b88:	e2233001 	eor	r3, r3, #1
   31b8c:	e2033001 	and	r3, r3, #1
   31b90:	e1540003 	cmp	r4, r3
   31b94:	1afffff7 	bne	31b78 <BusAccess::waitForBusAck(bool)+0x14>
   31b98:	e59f5084 	ldr	r5, [pc, #132]	; 31c24 <BusAccess::waitForBusAck(bool)+0xc0>
   31b9c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   31ba0:	e1a03123 	lsr	r3, r3, #2
   31ba4:	e2233001 	eor	r3, r3, #1
   31ba8:	e2033001 	and	r3, r3, #1
   31bac:	e1540003 	cmp	r4, r3
   31bb0:	0a000012 	beq	31c00 <BusAccess::waitForBusAck(bool)+0x9c>
   31bb4:	e5901224 	ldr	r1, [r0, #548]	; 0x224
   31bb8:	e59f0068 	ldr	r0, [pc, #104]	; 31c28 <BusAccess::waitForBusAck(bool)+0xc4>
   31bbc:	eb003777 	bl	3f9a0 <__aeabi_uidiv>
   31bc0:	e3500000 	cmp	r0, #0
   31bc4:	11a07000 	movne	r7, r0
   31bc8:	03a07001 	moveq	r7, #1
   31bcc:	e3a08000 	mov	r8, #0
   31bd0:	e3a06001 	mov	r6, #1
   31bd4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   31bd8:	e2888001 	add	r8, r8, #1
   31bdc:	e1a03123 	lsr	r3, r3, #2
   31be0:	e2233001 	eor	r3, r3, #1
   31be4:	e2033001 	and	r3, r3, #1
   31be8:	e1540003 	cmp	r4, r3
   31bec:	0a000003 	beq	31c00 <BusAccess::waitForBusAck(bool)+0x9c>
   31bf0:	e1a00006 	mov	r0, r6
   31bf4:	ebffef04 	bl	2d80c <microsDelay>
   31bf8:	e1580007 	cmp	r8, r7
   31bfc:	1afffff4 	bne	31bd4 <BusAccess::waitForBusAck(bool)+0x70>
   31c00:	e59f301c 	ldr	r3, [pc, #28]	; 31c24 <BusAccess::waitForBusAck(bool)+0xc0>
   31c04:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   31c08:	e1a00120 	lsr	r0, r0, #2
   31c0c:	e2200001 	eor	r0, r0, #1
   31c10:	e2000001 	and	r0, r0, #1
   31c14:	e0400004 	sub	r0, r0, r4
   31c18:	e16f0f10 	clz	r0, r0
   31c1c:	e1a002a0 	lsr	r0, r0, #5
   31c20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31c24:	20200000 	.word	0x20200000
   31c28:	3b9aca00 	.word	0x3b9aca00

00031c2c <BusAccess::controlBusRead()>:
   31c2c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31c30:	e1a05000 	mov	r5, r0
   31c34:	ebffeeec 	bl	2d7ec <micros>
   31c38:	e595b000 	ldr	fp, [r5]
   31c3c:	e59f4118 	ldr	r4, [pc, #280]	; 31d5c <BusAccess::controlBusRead()+0x130>
   31c40:	e35b0011 	cmp	fp, #17
   31c44:	e3a08000 	mov	r8, #0
   31c48:	e1a07000 	mov	r7, r0
   31c4c:	e3a0600a 	mov	r6, #10
   31c50:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31c54:	0a000031 	beq	31d20 <BusAccess::controlBusRead()+0xf4>
   31c58:	e3130802 	tst	r3, #131072	; 0x20000
   31c5c:	13a0a000 	movne	sl, #0
   31c60:	03a0a002 	moveq	sl, #2
   31c64:	e3130001 	tst	r3, #1
   31c68:	13a0e000 	movne	lr, #0
   31c6c:	03a0e004 	moveq	lr, #4
   31c70:	e3130002 	tst	r3, #2
   31c74:	13a0c000 	movne	ip, #0
   31c78:	03a0c008 	moveq	ip, #8
   31c7c:	e3130020 	tst	r3, #32
   31c80:	13a00000 	movne	r0, #0
   31c84:	03a00020 	moveq	r0, #32
   31c88:	e3130008 	tst	r3, #8
   31c8c:	13a01000 	movne	r1, #0
   31c90:	03a01010 	moveq	r1, #16
   31c94:	e3130004 	tst	r3, #4
   31c98:	13a09000 	movne	r9, #0
   31c9c:	03a09b01 	moveq	r9, #1024	; 0x400
   31ca0:	e1a02923 	lsr	r2, r3, #18
   31ca4:	e2222001 	eor	r2, r2, #1
   31ca8:	e2022001 	and	r2, r2, #1
   31cac:	e18a2002 	orr	r2, sl, r2
   31cb0:	e18ee002 	orr	lr, lr, r2
   31cb4:	e18cc00e 	orr	ip, ip, lr
   31cb8:	e180000c 	orr	r0, r0, ip
   31cbc:	e1811000 	orr	r1, r1, r0
   31cc0:	e35b0011 	cmp	fp, #17
   31cc4:	e2888001 	add	r8, r8, #1
   31cc8:	e1899001 	orr	r9, r9, r1
   31ccc:	0a00001c 	beq	31d44 <BusAccess::controlBusRead()+0x118>
   31cd0:	e319000c 	tst	r9, #12
   31cd4:	e2093018 	and	r3, r9, #24
   31cd8:	0a000003 	beq	31cec <BusAccess::controlBusRead()+0xc0>
   31cdc:	e3190003 	tst	r9, #3
   31ce0:	0a000001 	beq	31cec <BusAccess::controlBusRead()+0xc0>
   31ce4:	e1a00009 	mov	r0, r9
   31ce8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31cec:	e3530018 	cmp	r3, #24
   31cf0:	0afffffb 	beq	31ce4 <BusAccess::controlBusRead()+0xb8>
   31cf4:	ebffeebc 	bl	2d7ec <micros>
   31cf8:	e1a02006 	mov	r2, r6
   31cfc:	e1a01007 	mov	r1, r7
   31d00:	ebffeed7 	bl	2d864 <isTimeout>
   31d04:	e3500000 	cmp	r0, #0
   31d08:	13580064 	cmpne	r8, #100	; 0x64
   31d0c:	cafffff4 	bgt	31ce4 <BusAccess::controlBusRead()+0xb8>
   31d10:	e595b000 	ldr	fp, [r5]
   31d14:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31d18:	e35b0011 	cmp	fp, #17
   31d1c:	1affffcd 	bne	31c58 <BusAccess::controlBusRead()+0x2c>
   31d20:	e3a03040 	mov	r3, #64	; 0x40
   31d24:	e3a00064 	mov	r0, #100	; 0x64
   31d28:	e5843028 	str	r3, [r4, #40]	; 0x28
   31d2c:	eb0039d5 	bl	40488 <lowlev_cycleDelay>
   31d30:	e3a02040 	mov	r2, #64	; 0x40
   31d34:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31d38:	e584201c 	str	r2, [r4, #28]
   31d3c:	e595b000 	ldr	fp, [r5]
   31d40:	eaffffc4 	b	31c58 <BusAccess::controlBusRead()+0x2c>
   31d44:	e3130601 	tst	r3, #1048576	; 0x100000
   31d48:	13a03000 	movne	r3, #0
   31d4c:	03a03010 	moveq	r3, #16
   31d50:	e3c99010 	bic	r9, r9, #16
   31d54:	e1839009 	orr	r9, r3, r9
   31d58:	eaffffdc 	b	31cd0 <BusAccess::controlBusRead()+0xa4>
   31d5c:	20200000 	.word	0x20200000

00031d60 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   31d60:	e5903000 	ldr	r3, [r0]
   31d64:	e92d4070 	push	{r4, r5, r6, lr}
   31d68:	e3530011 	cmp	r3, #17
   31d6c:	e1a05002 	mov	r5, r2
   31d70:	03a02040 	moveq	r2, #64	; 0x40
   31d74:	059f315c 	ldreq	r3, [pc, #348]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31d78:	e1a06001 	mov	r6, r1
   31d7c:	05832028 	streq	r2, [r3, #40]	; 0x28
   31d80:	e59f3150 	ldr	r3, [pc, #336]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31d84:	e1a04000 	mov	r4, r0
   31d88:	e5932008 	ldr	r2, [r3, #8]
   31d8c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   31d90:	e5832008 	str	r2, [r3, #8]
   31d94:	e5902000 	ldr	r2, [r0]
   31d98:	e3a00064 	mov	r0, #100	; 0x64
   31d9c:	e3520011 	cmp	r2, #17
   31da0:	03a02c0e 	moveq	r2, #3584	; 0xe00
   31da4:	13a02801 	movne	r2, #65536	; 0x10000
   31da8:	13a01c0e 	movne	r1, #3584	; 0xe00
   31dac:	1583201c 	strne	r2, [r3, #28]
   31db0:	05832028 	streq	r2, [r3, #40]	; 0x28
   31db4:	15831028 	strne	r1, [r3, #40]	; 0x28
   31db8:	0583201c 	streq	r2, [r3, #28]
   31dbc:	1583101c 	strne	r1, [r3, #28]
   31dc0:	15832028 	strne	r2, [r3, #40]	; 0x28
   31dc4:	eb0039af 	bl	40488 <lowlev_cycleDelay>
   31dc8:	e59f2108 	ldr	r2, [pc, #264]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31dcc:	e5941000 	ldr	r1, [r4]
   31dd0:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   31dd4:	e3510011 	cmp	r1, #17
   31dd8:	e1a03623 	lsr	r3, r3, #12
   31ddc:	e2033cff 	and	r3, r3, #65280	; 0xff00
   31de0:	e5863000 	str	r3, [r6]
   31de4:	0a00002e 	beq	31ea4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x144>
   31de8:	e3a03801 	mov	r3, #65536	; 0x10000
   31dec:	e3a00c0e 	mov	r0, #3584	; 0xe00
   31df0:	e3a01c06 	mov	r1, #1536	; 0x600
   31df4:	e582301c 	str	r3, [r2, #28]
   31df8:	e5820028 	str	r0, [r2, #40]	; 0x28
   31dfc:	e582101c 	str	r1, [r2, #28]
   31e00:	e5823028 	str	r3, [r2, #40]	; 0x28
   31e04:	e3a00032 	mov	r0, #50	; 0x32
   31e08:	eb00399e 	bl	40488 <lowlev_cycleDelay>
   31e0c:	e59f10c4 	ldr	r1, [pc, #196]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31e10:	e5963000 	ldr	r3, [r6]
   31e14:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   31e18:	e5940000 	ldr	r0, [r4]
   31e1c:	e1a02202 	lsl	r2, r2, #4
   31e20:	e1833c22 	orr	r3, r3, r2, lsr #24
   31e24:	e3500011 	cmp	r0, #17
   31e28:	e5863000 	str	r3, [r6]
   31e2c:	13a02801 	movne	r2, #65536	; 0x10000
   31e30:	03a03c0e 	moveq	r3, #3584	; 0xe00
   31e34:	13a03c0e 	movne	r3, #3584	; 0xe00
   31e38:	1581201c 	strne	r2, [r1, #28]
   31e3c:	e3a00032 	mov	r0, #50	; 0x32
   31e40:	e5813028 	str	r3, [r1, #40]	; 0x28
   31e44:	eb00398f 	bl	40488 <lowlev_cycleDelay>
   31e48:	e3a03040 	mov	r3, #64	; 0x40
   31e4c:	e59f6084 	ldr	r6, [pc, #132]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31e50:	e586301c 	str	r3, [r6, #28]
   31e54:	e5943000 	ldr	r3, [r4]
   31e58:	e3530011 	cmp	r3, #17
   31e5c:	0a000015 	beq	31eb8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x158>
   31e60:	e3a02c0e 	mov	r2, #3584	; 0xe00
   31e64:	e3a03c02 	mov	r3, #512	; 0x200
   31e68:	e3a04801 	mov	r4, #65536	; 0x10000
   31e6c:	e5862028 	str	r2, [r6, #40]	; 0x28
   31e70:	e3a0000a 	mov	r0, #10
   31e74:	e586301c 	str	r3, [r6, #28]
   31e78:	e5864028 	str	r4, [r6, #40]	; 0x28
   31e7c:	eb003981 	bl	40488 <lowlev_cycleDelay>
   31e80:	e586401c 	str	r4, [r6, #28]
   31e84:	e3a00032 	mov	r0, #50	; 0x32
   31e88:	eb00397e 	bl	40488 <lowlev_cycleDelay>
   31e8c:	e59f3044 	ldr	r3, [pc, #68]	; 31ed8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   31e90:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   31e94:	e1a03a23 	lsr	r3, r3, #20
   31e98:	e6ef3073 	uxtb	r3, r3
   31e9c:	e5853000 	str	r3, [r5]
   31ea0:	e8bd8070 	pop	{r4, r5, r6, pc}
   31ea4:	e3a01c0e 	mov	r1, #3584	; 0xe00
   31ea8:	e3a03c06 	mov	r3, #1536	; 0x600
   31eac:	e5821028 	str	r1, [r2, #40]	; 0x28
   31eb0:	e582301c 	str	r3, [r2, #28]
   31eb4:	eaffffd2 	b	31e04 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xa4>
   31eb8:	e3a04c0e 	mov	r4, #3584	; 0xe00
   31ebc:	e3a03c02 	mov	r3, #512	; 0x200
   31ec0:	e5864028 	str	r4, [r6, #40]	; 0x28
   31ec4:	e3a0000a 	mov	r0, #10
   31ec8:	e586301c 	str	r3, [r6, #28]
   31ecc:	eb00396d 	bl	40488 <lowlev_cycleDelay>
   31ed0:	e5864028 	str	r4, [r6, #40]	; 0x28
   31ed4:	eaffffea 	b	31e84 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x124>
   31ed8:	20200000 	.word	0x20200000

00031edc <BusAccess::addrLowSet(unsigned long)>:
   31edc:	e5903000 	ldr	r3, [r0]
   31ee0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31ee4:	e3530011 	cmp	r3, #17
   31ee8:	e1a05000 	mov	r5, r0
   31eec:	e1a08001 	mov	r8, r1
   31ef0:	0a00002f 	beq	31fb4 <BusAccess::addrLowSet(unsigned long)+0xd8>
   31ef4:	e3a03b02 	mov	r3, #2048	; 0x800
   31ef8:	e3a06801 	mov	r6, #65536	; 0x10000
   31efc:	e3a07c0e 	mov	r7, #3584	; 0xe00
   31f00:	e59f40f0 	ldr	r4, [pc, #240]	; 31ff8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   31f04:	e3a0000f 	mov	r0, #15
   31f08:	e5847028 	str	r7, [r4, #40]	; 0x28
   31f0c:	e584301c 	str	r3, [r4, #28]
   31f10:	e5846028 	str	r6, [r4, #40]	; 0x28
   31f14:	eb00395b 	bl	40488 <lowlev_cycleDelay>
   31f18:	e584601c 	str	r6, [r4, #28]
   31f1c:	e5953000 	ldr	r3, [r5]
   31f20:	e3530011 	cmp	r3, #17
   31f24:	0a000012 	beq	31f74 <BusAccess::addrLowSet(unsigned long)+0x98>
   31f28:	e3a03000 	mov	r3, #0
   31f2c:	e6ef8078 	uxtb	r8, r8
   31f30:	e5847028 	str	r7, [r4, #40]	; 0x28
   31f34:	e2888001 	add	r8, r8, #1
   31f38:	e584301c 	str	r3, [r4, #28]
   31f3c:	e3a04000 	mov	r4, #0
   31f40:	e3a07801 	mov	r7, #65536	; 0x10000
   31f44:	e3a0600f 	mov	r6, #15
   31f48:	e59f50a8 	ldr	r5, [pc, #168]	; 31ff8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   31f4c:	e1a00006 	mov	r0, r6
   31f50:	e5857028 	str	r7, [r5, #40]	; 0x28
   31f54:	eb00394b 	bl	40488 <lowlev_cycleDelay>
   31f58:	e2844001 	add	r4, r4, #1
   31f5c:	e585701c 	str	r7, [r5, #28]
   31f60:	e1a00006 	mov	r0, r6
   31f64:	eb003947 	bl	40488 <lowlev_cycleDelay>
   31f68:	e1540008 	cmp	r4, r8
   31f6c:	1afffff6 	bne	31f4c <BusAccess::addrLowSet(unsigned long)+0x70>
   31f70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31f74:	e3a04000 	mov	r4, #0
   31f78:	e3a07801 	mov	r7, #65536	; 0x10000
   31f7c:	e3a0600f 	mov	r6, #15
   31f80:	e6ef8078 	uxtb	r8, r8
   31f84:	e59f506c 	ldr	r5, [pc, #108]	; 31ff8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   31f88:	e2888001 	add	r8, r8, #1
   31f8c:	e1a00006 	mov	r0, r6
   31f90:	e585701c 	str	r7, [r5, #28]
   31f94:	eb00393b 	bl	40488 <lowlev_cycleDelay>
   31f98:	e2844001 	add	r4, r4, #1
   31f9c:	e5857028 	str	r7, [r5, #40]	; 0x28
   31fa0:	e1a00006 	mov	r0, r6
   31fa4:	eb003937 	bl	40488 <lowlev_cycleDelay>
   31fa8:	e1540008 	cmp	r4, r8
   31fac:	1afffff6 	bne	31f8c <BusAccess::addrLowSet(unsigned long)+0xb0>
   31fb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31fb4:	e3a03b02 	mov	r3, #2048	; 0x800
   31fb8:	e3a06c0e 	mov	r6, #3584	; 0xe00
   31fbc:	e59f4034 	ldr	r4, [pc, #52]	; 31ff8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   31fc0:	e3a0000a 	mov	r0, #10
   31fc4:	e5846028 	str	r6, [r4, #40]	; 0x28
   31fc8:	e584301c 	str	r3, [r4, #28]
   31fcc:	eb00392d 	bl	40488 <lowlev_cycleDelay>
   31fd0:	e5846028 	str	r6, [r4, #40]	; 0x28
   31fd4:	e5953000 	ldr	r3, [r5]
   31fd8:	e3530011 	cmp	r3, #17
   31fdc:	0affffe4 	beq	31f74 <BusAccess::addrLowSet(unsigned long)+0x98>
   31fe0:	e3a03000 	mov	r3, #0
   31fe4:	e6ef8078 	uxtb	r8, r8
   31fe8:	e5846028 	str	r6, [r4, #40]	; 0x28
   31fec:	e2888001 	add	r8, r8, #1
   31ff0:	e584301c 	str	r3, [r4, #28]
   31ff4:	eaffffd0 	b	31f3c <BusAccess::addrLowSet(unsigned long)+0x60>
   31ff8:	20200000 	.word	0x20200000

00031ffc <BusAccess::addrLowInc()>:
   31ffc:	e5903000 	ldr	r3, [r0]
   32000:	e92d4070 	push	{r4, r5, r6, lr}
   32004:	e3530011 	cmp	r3, #17
   32008:	0a000008 	beq	32030 <BusAccess::addrLowInc()+0x34>
   3200c:	e3a03c0e 	mov	r3, #3584	; 0xe00
   32010:	e3a05801 	mov	r5, #65536	; 0x10000
   32014:	e59f4038 	ldr	r4, [pc, #56]	; 32054 <BusAccess::addrLowInc()+0x58>
   32018:	e3a0000f 	mov	r0, #15
   3201c:	e5843028 	str	r3, [r4, #40]	; 0x28
   32020:	e5845028 	str	r5, [r4, #40]	; 0x28
   32024:	eb003917 	bl	40488 <lowlev_cycleDelay>
   32028:	e584501c 	str	r5, [r4, #28]
   3202c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32030:	e3a05801 	mov	r5, #65536	; 0x10000
   32034:	e59f4018 	ldr	r4, [pc, #24]	; 32054 <BusAccess::addrLowInc()+0x58>
   32038:	e3a0000f 	mov	r0, #15
   3203c:	e584501c 	str	r5, [r4, #28]
   32040:	eb003910 	bl	40488 <lowlev_cycleDelay>
   32044:	e5845028 	str	r5, [r4, #40]	; 0x28
   32048:	e3a0000f 	mov	r0, #15
   3204c:	e8bd4070 	pop	{r4, r5, r6, lr}
   32050:	ea00390c 	b	40488 <lowlev_cycleDelay>
   32054:	20200000 	.word	0x20200000

00032058 <BusAccess::addrHighSet(unsigned long)>:
   32058:	e5902000 	ldr	r2, [r0]
   3205c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32060:	e3520011 	cmp	r2, #17
   32064:	e1a08000 	mov	r8, r0
   32068:	e1a04001 	mov	r4, r1
   3206c:	0a00002a 	beq	3211c <BusAccess::addrHighSet(unsigned long)+0xc4>
   32070:	e3a0b009 	mov	fp, #9
   32074:	e59f5140 	ldr	r5, [pc, #320]	; 321bc <BusAccess::addrHighSet(unsigned long)+0x164>
   32078:	e3a09801 	mov	r9, #65536	; 0x10000
   3207c:	e3a0ac0e 	mov	sl, #3584	; 0xe00
   32080:	e3a07014 	mov	r7, #20
   32084:	e3a06080 	mov	r6, #128	; 0x80
   32088:	ea00000c 	b	320c0 <BusAccess::addrHighSet(unsigned long)+0x68>
   3208c:	e3520011 	cmp	r2, #17
   32090:	1585901c 	strne	r9, [r5, #28]
   32094:	e585a028 	str	sl, [r5, #40]	; 0x28
   32098:	e1a00007 	mov	r0, r7
   3209c:	eb0038f9 	bl	40488 <lowlev_cycleDelay>
   320a0:	e585601c 	str	r6, [r5, #28]
   320a4:	e1a00007 	mov	r0, r7
   320a8:	eb0038f6 	bl	40488 <lowlev_cycleDelay>
   320ac:	e25bb001 	subs	fp, fp, #1
   320b0:	e1a04084 	lsl	r4, r4, #1
   320b4:	e5856028 	str	r6, [r5, #40]	; 0x28
   320b8:	0a00000c 	beq	320f0 <BusAccess::addrHighSet(unsigned long)+0x98>
   320bc:	e5982000 	ldr	r2, [r8]
   320c0:	e3140080 	tst	r4, #128	; 0x80
   320c4:	1afffff0 	bne	3208c <BusAccess::addrHighSet(unsigned long)+0x34>
   320c8:	e3520011 	cmp	r2, #17
   320cc:	03a03b02 	moveq	r3, #2048	; 0x800
   320d0:	13a03b02 	movne	r3, #2048	; 0x800
   320d4:	1585901c 	strne	r9, [r5, #28]
   320d8:	0585a028 	streq	sl, [r5, #40]	; 0x28
   320dc:	1585a028 	strne	sl, [r5, #40]	; 0x28
   320e0:	0585301c 	streq	r3, [r5, #28]
   320e4:	1585301c 	strne	r3, [r5, #28]
   320e8:	15859028 	strne	r9, [r5, #40]	; 0x28
   320ec:	eaffffe9 	b	32098 <BusAccess::addrHighSet(unsigned long)+0x40>
   320f0:	e3a00014 	mov	r0, #20
   320f4:	eb0038e3 	bl	40488 <lowlev_cycleDelay>
   320f8:	e5983000 	ldr	r3, [r8]
   320fc:	e3530011 	cmp	r3, #17
   32100:	0a000029 	beq	321ac <BusAccess::addrHighSet(unsigned long)+0x154>
   32104:	e3a01801 	mov	r1, #65536	; 0x10000
   32108:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3210c:	e59f30a8 	ldr	r3, [pc, #168]	; 321bc <BusAccess::addrHighSet(unsigned long)+0x164>
   32110:	e583101c 	str	r1, [r3, #28]
   32114:	e5832028 	str	r2, [r3, #40]	; 0x28
   32118:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3211c:	e3a0a009 	mov	sl, #9
   32120:	e3a07801 	mov	r7, #65536	; 0x10000
   32124:	e3a09c0e 	mov	r9, #3584	; 0xe00
   32128:	e3a06014 	mov	r6, #20
   3212c:	e3a05080 	mov	r5, #128	; 0x80
   32130:	e59fb084 	ldr	fp, [pc, #132]	; 321bc <BusAccess::addrHighSet(unsigned long)+0x164>
   32134:	ea000012 	b	32184 <BusAccess::addrHighSet(unsigned long)+0x12c>
   32138:	e3520011 	cmp	r2, #17
   3213c:	03a03b02 	moveq	r3, #2048	; 0x800
   32140:	13a03b02 	movne	r3, #2048	; 0x800
   32144:	158b701c 	strne	r7, [fp, #28]
   32148:	058b9028 	streq	r9, [fp, #40]	; 0x28
   3214c:	158b9028 	strne	r9, [fp, #40]	; 0x28
   32150:	058b301c 	streq	r3, [fp, #28]
   32154:	158b301c 	strne	r3, [fp, #28]
   32158:	158b7028 	strne	r7, [fp, #40]	; 0x28
   3215c:	e1a00006 	mov	r0, r6
   32160:	eb0038c8 	bl	40488 <lowlev_cycleDelay>
   32164:	e58b501c 	str	r5, [fp, #28]
   32168:	e1a00006 	mov	r0, r6
   3216c:	eb0038c5 	bl	40488 <lowlev_cycleDelay>
   32170:	e25aa001 	subs	sl, sl, #1
   32174:	e1a04084 	lsl	r4, r4, #1
   32178:	e58b5028 	str	r5, [fp, #40]	; 0x28
   3217c:	0affffdb 	beq	320f0 <BusAccess::addrHighSet(unsigned long)+0x98>
   32180:	e5982000 	ldr	r2, [r8]
   32184:	e2141080 	ands	r1, r4, #128	; 0x80
   32188:	1affffea 	bne	32138 <BusAccess::addrHighSet(unsigned long)+0xe0>
   3218c:	e3520011 	cmp	r2, #17
   32190:	158b701c 	strne	r7, [fp, #28]
   32194:	058b9028 	streq	r9, [fp, #40]	; 0x28
   32198:	158b9028 	strne	r9, [fp, #40]	; 0x28
   3219c:	058b101c 	streq	r1, [fp, #28]
   321a0:	158b101c 	strne	r1, [fp, #28]
   321a4:	158b7028 	strne	r7, [fp, #40]	; 0x28
   321a8:	eaffffeb 	b	3215c <BusAccess::addrHighSet(unsigned long)+0x104>
   321ac:	e3a02c0e 	mov	r2, #3584	; 0xe00
   321b0:	e59f3004 	ldr	r3, [pc, #4]	; 321bc <BusAccess::addrHighSet(unsigned long)+0x164>
   321b4:	e5832028 	str	r2, [r3, #40]	; 0x28
   321b8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   321bc:	20200000 	.word	0x20200000

000321c0 <BusAccess::addrSet(unsigned int)>:
   321c0:	e92d4070 	push	{r4, r5, r6, lr}
   321c4:	e1a04001 	mov	r4, r1
   321c8:	e1a05000 	mov	r5, r0
   321cc:	e1a01421 	lsr	r1, r1, #8
   321d0:	ebffffa0 	bl	32058 <BusAccess::addrHighSet(unsigned long)>
   321d4:	e6ef1074 	uxtb	r1, r4
   321d8:	e1a00005 	mov	r0, r5
   321dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   321e0:	eaffff3d 	b	31edc <BusAccess::addrLowSet(unsigned long)>

000321e4 <BusAccess::byteWrite(unsigned long, int)>:
   321e4:	e1a01a01 	lsl	r1, r1, #20
   321e8:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   321ec:	e59f30b0 	ldr	r3, [pc, #176]	; 322a4 <BusAccess::byteWrite(unsigned long, int)+0xc0>
   321f0:	e92d4070 	push	{r4, r5, r6, lr}
   321f4:	e3520000 	cmp	r2, #0
   321f8:	e1e0e001 	mvn	lr, r1
   321fc:	e59fc0a4 	ldr	ip, [pc, #164]	; 322a8 <BusAccess::byteWrite(unsigned long, int)+0xc4>
   32200:	e3a05c02 	mov	r5, #512	; 0x200
   32204:	01a0c003 	moveq	ip, r3
   32208:	e59f309c 	ldr	r3, [pc, #156]	; 322ac <BusAccess::byteWrite(unsigned long, int)+0xc8>
   3220c:	e20ee6ff 	and	lr, lr, #267386880	; 0xff00000
   32210:	e583101c 	str	r1, [r3, #28]
   32214:	e583e028 	str	lr, [r3, #40]	; 0x28
   32218:	e583c028 	str	ip, [r3, #40]	; 0x28
   3221c:	e583501c 	str	r5, [r3, #28]
   32220:	e5901000 	ldr	r1, [r0]
   32224:	e1a05002 	mov	r5, r2
   32228:	e3510011 	cmp	r1, #17
   3222c:	03a02802 	moveq	r2, #131072	; 0x20000
   32230:	13a02803 	movne	r2, #196608	; 0x30000
   32234:	e1a04000 	mov	r4, r0
   32238:	e5832028 	str	r2, [r3, #40]	; 0x28
   3223c:	e3a000fa 	mov	r0, #250	; 0xfa
   32240:	eb003890 	bl	40488 <lowlev_cycleDelay>
   32244:	e5943000 	ldr	r3, [r4]
   32248:	e3530011 	cmp	r3, #17
   3224c:	0a000006 	beq	3226c <BusAccess::byteWrite(unsigned long, int)+0x88>
   32250:	e59f3058 	ldr	r3, [pc, #88]	; 322b0 <BusAccess::byteWrite(unsigned long, int)+0xcc>
   32254:	e3550000 	cmp	r5, #0
   32258:	e59f2054 	ldr	r2, [pc, #84]	; 322b4 <BusAccess::byteWrite(unsigned long, int)+0xd0>
   3225c:	11a02003 	movne	r2, r3
   32260:	e59f1044 	ldr	r1, [pc, #68]	; 322ac <BusAccess::byteWrite(unsigned long, int)+0xc8>
   32264:	e581201c 	str	r2, [r1, #28]
   32268:	e8bd8070 	pop	{r4, r5, r6, pc}
   3226c:	e59f1044 	ldr	r1, [pc, #68]	; 322b8 <BusAccess::byteWrite(unsigned long, int)+0xd4>
   32270:	e3550000 	cmp	r5, #0
   32274:	e59f2040 	ldr	r2, [pc, #64]	; 322bc <BusAccess::byteWrite(unsigned long, int)+0xd8>
   32278:	01a02001 	moveq	r2, r1
   3227c:	e59f3028 	ldr	r3, [pc, #40]	; 322ac <BusAccess::byteWrite(unsigned long, int)+0xc8>
   32280:	e583201c 	str	r2, [r3, #28]
   32284:	e5942000 	ldr	r2, [r4]
   32288:	e3520011 	cmp	r2, #17
   3228c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32290:	13a01801 	movne	r1, #65536	; 0x10000
   32294:	13a02c0e 	movne	r2, #3584	; 0xe00
   32298:	1583101c 	strne	r1, [r3, #28]
   3229c:	e5832028 	str	r2, [r3, #40]	; 0x28
   322a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   322a4:	00000e41 	.word	0x00000e41
   322a8:	00000e42 	.word	0x00000e42
   322ac:	20200000 	.word	0x20200000
   322b0:	00030042 	.word	0x00030042
   322b4:	00030041 	.word	0x00030041
   322b8:	00020041 	.word	0x00020041
   322bc:	00020042 	.word	0x00020042

000322c0 <BusAccess::byteRead(int)>:
   322c0:	e59f2090 	ldr	r2, [pc, #144]	; 32358 <BusAccess::byteRead(int)+0x98>
   322c4:	e3510000 	cmp	r1, #0
   322c8:	e59f308c 	ldr	r3, [pc, #140]	; 3235c <BusAccess::byteRead(int)+0x9c>
   322cc:	e3a0cd09 	mov	ip, #576	; 0x240
   322d0:	01a03002 	moveq	r3, r2
   322d4:	e59f2084 	ldr	r2, [pc, #132]	; 32360 <BusAccess::byteRead(int)+0xa0>
   322d8:	e92d4070 	push	{r4, r5, r6, lr}
   322dc:	e5823028 	str	r3, [r2, #40]	; 0x28
   322e0:	e582c01c 	str	ip, [r2, #28]
   322e4:	e5903000 	ldr	r3, [r0]
   322e8:	e1a04000 	mov	r4, r0
   322ec:	e3530011 	cmp	r3, #17
   322f0:	13a03801 	movne	r3, #65536	; 0x10000
   322f4:	e3a00032 	mov	r0, #50	; 0x32
   322f8:	15823028 	strne	r3, [r2, #40]	; 0x28
   322fc:	e1a05001 	mov	r5, r1
   32300:	eb003860 	bl	40488 <lowlev_cycleDelay>
   32304:	e59f3054 	ldr	r3, [pc, #84]	; 32360 <BusAccess::byteRead(int)+0xa0>
   32308:	e5942000 	ldr	r2, [r4]
   3230c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32310:	e3520011 	cmp	r2, #17
   32314:	e1a00a20 	lsr	r0, r0, #20
   32318:	e6ef0070 	uxtb	r0, r0
   3231c:	0a000005 	beq	32338 <BusAccess::byteRead(int)+0x78>
   32320:	e59f203c 	ldr	r2, [pc, #60]	; 32364 <BusAccess::byteRead(int)+0xa4>
   32324:	e3550000 	cmp	r5, #0
   32328:	e59f1038 	ldr	r1, [pc, #56]	; 32368 <BusAccess::byteRead(int)+0xa8>
   3232c:	11a01002 	movne	r1, r2
   32330:	e583101c 	str	r1, [r3, #28]
   32334:	e8bd8070 	pop	{r4, r5, r6, pc}
   32338:	e59fc02c 	ldr	ip, [pc, #44]	; 3236c <BusAccess::byteRead(int)+0xac>
   3233c:	e3550000 	cmp	r5, #0
   32340:	e59f1028 	ldr	r1, [pc, #40]	; 32370 <BusAccess::byteRead(int)+0xb0>
   32344:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32348:	01a0100c 	moveq	r1, ip
   3234c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32350:	e583101c 	str	r1, [r3, #28]
   32354:	e8bd8070 	pop	{r4, r5, r6, pc}
   32358:	00040e01 	.word	0x00040e01
   3235c:	00040e02 	.word	0x00040e02
   32360:	20200000 	.word	0x20200000
   32364:	00050002 	.word	0x00050002
   32368:	00050001 	.word	0x00050001
   3236c:	00040001 	.word	0x00040001
   32370:	00040002 	.word	0x00040002

00032374 <BusAccess::clockSetup()>:
   32374:	e3a03004 	mov	r3, #4
   32378:	e5d02228 	ldrb	r2, [r0, #552]	; 0x228
   3237c:	e5803230 	str	r3, [r0, #560]	; 0x230
   32380:	e3520000 	cmp	r2, #0
   32384:	1a000001 	bne	32390 <BusAccess::clockSetup()+0x1c>
   32388:	e580322c 	str	r3, [r0, #556]	; 0x22c
   3238c:	e12fff1e 	bx	lr
   32390:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32394:	e3a07000 	mov	r7, #0
   32398:	e59f5184 	ldr	r5, [pc, #388]	; 32524 <BusAccess::clockSetup()+0x1b0>
   3239c:	e59f1184 	ldr	r1, [pc, #388]	; 32528 <BusAccess::clockSetup()+0x1b4>
   323a0:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   323a4:	e24dd020 	sub	sp, sp, #32
   323a8:	e0022001 	and	r2, r2, r1
   323ac:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   323b0:	e5852070 	str	r2, [r5, #112]	; 0x70
   323b4:	e580322c 	str	r3, [r0, #556]	; 0x22c
   323b8:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   323bc:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   323c0:	e0033001 	and	r3, r3, r1
   323c4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   323c8:	e5853070 	str	r3, [r5, #112]	; 0x70
   323cc:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   323d0:	e1a06000 	mov	r6, r0
   323d4:	e3730001 	cmn	r3, #1
   323d8:	0a000004 	beq	323f0 <BusAccess::clockSetup()+0x7c>
   323dc:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   323e0:	e1530007 	cmp	r3, r7
   323e4:	11a04007 	movne	r4, r7
   323e8:	13a08001 	movne	r8, #1
   323ec:	1a000012 	bne	3243c <BusAccess::clockSetup()+0xc8>
   323f0:	e3a03000 	mov	r3, #0
   323f4:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   323f8:	ebffd024 	bl	26490 <CLogger::Get()>
   323fc:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   32400:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32404:	e59f1120 	ldr	r1, [pc, #288]	; 3252c <BusAccess::clockSetup()+0x1b8>
   32408:	e58d2004 	str	r2, [sp, #4]
   3240c:	e58d3000 	str	r3, [sp]
   32410:	e3a02001 	mov	r2, #1
   32414:	e59f3114 	ldr	r3, [pc, #276]	; 32530 <BusAccess::clockSetup()+0x1bc>
   32418:	ebffcf59 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3241c:	e28dd020 	add	sp, sp, #32
   32420:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32424:	e2844001 	add	r4, r4, #1
   32428:	e1a00008 	mov	r0, r8
   3242c:	ebffecf6 	bl	2d80c <microsDelay>
   32430:	e3540064 	cmp	r4, #100	; 0x64
   32434:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32438:	0a000002 	beq	32448 <BusAccess::clockSetup()+0xd4>
   3243c:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32440:	e3130080 	tst	r3, #128	; 0x80
   32444:	1afffff6 	bne	32424 <BusAccess::clockSetup()+0xb0>
   32448:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   3244c:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32450:	eb00379f 	bl	402d4 <pinMode>
   32454:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32458:	e59f20d4 	ldr	r2, [pc, #212]	; 32534 <BusAccess::clockSetup()+0x1c0>
   3245c:	e59f10d4 	ldr	r1, [pc, #212]	; 32538 <BusAccess::clockSetup()+0x1c4>
   32460:	e1500002 	cmp	r0, r2
   32464:	e59f20d0 	ldr	r2, [pc, #208]	; 3253c <BusAccess::clockSetup()+0x1c8>
   32468:	e59f30d0 	ldr	r3, [pc, #208]	; 32540 <BusAccess::clockSetup()+0x1cc>
   3246c:	81a03001 	movhi	r3, r1
   32470:	e59f80cc 	ldr	r8, [pc, #204]	; 32544 <BusAccess::clockSetup()+0x1d0>
   32474:	81a08002 	movhi	r8, r2
   32478:	e59f90a4 	ldr	r9, [pc, #164]	; 32524 <BusAccess::clockSetup()+0x1b0>
   3247c:	e59f20c4 	ldr	r2, [pc, #196]	; 32548 <BusAccess::clockSetup()+0x1d4>
   32480:	e5893070 	str	r3, [r9, #112]	; 0x70
   32484:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32488:	e59fa0bc 	ldr	sl, [pc, #188]	; 3254c <BusAccess::clockSetup()+0x1d8>
   3248c:	81a0a002 	movhi	sl, r2
   32490:	ebffecdd 	bl	2d80c <microsDelay>
   32494:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32498:	e1a00008 	mov	r0, r8
   3249c:	eb00353f 	bl	3f9a0 <__aeabi_uidiv>
   324a0:	e59f50a8 	ldr	r5, [pc, #168]	; 32550 <BusAccess::clockSetup()+0x1dc>
   324a4:	e1500005 	cmp	r0, r5
   324a8:	31a05000 	movcc	r5, r0
   324ac:	e1a03605 	lsl	r3, r5, #12
   324b0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   324b4:	e5893074 	str	r3, [r9, #116]	; 0x74
   324b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   324bc:	ebffecd2 	bl	2d80c <microsDelay>
   324c0:	e3a03001 	mov	r3, #1
   324c4:	e589a070 	str	sl, [r9, #112]	; 0x70
   324c8:	e1a01005 	mov	r1, r5
   324cc:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   324d0:	e1a00008 	mov	r0, r8
   324d4:	eb003531 	bl	3f9a0 <__aeabi_uidiv>
   324d8:	e1a09000 	mov	r9, r0
   324dc:	ebffcfeb 	bl	26490 <CLogger::Get()>
   324e0:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   324e4:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   324e8:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   324ec:	e58d1014 	str	r1, [sp, #20]
   324f0:	e58d2010 	str	r2, [sp, #16]
   324f4:	e58d3004 	str	r3, [sp, #4]
   324f8:	e58d500c 	str	r5, [sp, #12]
   324fc:	e58d8008 	str	r8, [sp, #8]
   32500:	e58d9000 	str	r9, [sp]
   32504:	e58d701c 	str	r7, [sp, #28]
   32508:	e58d4018 	str	r4, [sp, #24]
   3250c:	e59f3040 	ldr	r3, [pc, #64]	; 32554 <BusAccess::clockSetup()+0x1e0>
   32510:	e3a02003 	mov	r2, #3
   32514:	e59f1010 	ldr	r1, [pc, #16]	; 3252c <BusAccess::clockSetup()+0x1b8>
   32518:	ebffcf19 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3251c:	e28dd020 	add	sp, sp, #32
   32520:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32524:	20101000 	.word	0x20101000
   32528:	00000f0f 	.word	0x00000f0f
   3252c:	0004804c 	.word	0x0004804c
   32530:	0004802c 	.word	0x0004802c
   32534:	0003d08f 	.word	0x0003d08f
   32538:	5a000006 	.word	0x5a000006
   3253c:	1dcd6500 	.word	0x1dcd6500
   32540:	5a000001 	.word	0x5a000001
   32544:	0124f800 	.word	0x0124f800
   32548:	5a000016 	.word	0x5a000016
   3254c:	5a000011 	.word	0x5a000011
   32550:	00000fff 	.word	0x00000fff
   32554:	00048058 	.word	0x00048058

00032558 <BusAccess::clockSetFreqHz(unsigned long)>:
   32558:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3255c:	e1a04001 	mov	r4, r1
   32560:	e1a06000 	mov	r6, r0
   32564:	e5d05228 	ldrb	r5, [r0, #552]	; 0x228
   32568:	e24dd020 	sub	sp, sp, #32
   3256c:	ebffcfc7 	bl	26490 <CLogger::Get()>
   32570:	e59f31c8 	ldr	r3, [pc, #456]	; 32740 <BusAccess::clockSetFreqHz(unsigned long)+0x1e8>
   32574:	e88d0030 	stm	sp, {r4, r5}
   32578:	e3a02004 	mov	r2, #4
   3257c:	e59f11c0 	ldr	r1, [pc, #448]	; 32744 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32580:	ebffceff 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32584:	e5d63228 	ldrb	r3, [r6, #552]	; 0x228
   32588:	e3530000 	cmp	r3, #0
   3258c:	1a000062 	bne	3271c <BusAccess::clockSetFreqHz(unsigned long)+0x1c4>
   32590:	e3550000 	cmp	r5, #0
   32594:	e5864224 	str	r4, [r6, #548]	; 0x224
   32598:	1a000001 	bne	325a4 <BusAccess::clockSetFreqHz(unsigned long)+0x4c>
   3259c:	e28dd020 	add	sp, sp, #32
   325a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   325a4:	e5d67228 	ldrb	r7, [r6, #552]	; 0x228
   325a8:	e3570000 	cmp	r7, #0
   325ac:	1afffffa 	bne	3259c <BusAccess::clockSetFreqHz(unsigned long)+0x44>
   325b0:	e59f5190 	ldr	r5, [pc, #400]	; 32748 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   325b4:	e59f3190 	ldr	r3, [pc, #400]	; 3274c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   325b8:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   325bc:	e0033002 	and	r3, r3, r2
   325c0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   325c4:	e5853070 	str	r3, [r5, #112]	; 0x70
   325c8:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   325cc:	e3730001 	cmn	r3, #1
   325d0:	0a000004 	beq	325e8 <BusAccess::clockSetFreqHz(unsigned long)+0x90>
   325d4:	e5963230 	ldr	r3, [r6, #560]	; 0x230
   325d8:	e3530000 	cmp	r3, #0
   325dc:	11a04007 	movne	r4, r7
   325e0:	13a08001 	movne	r8, #1
   325e4:	1a000012 	bne	32634 <BusAccess::clockSetFreqHz(unsigned long)+0xdc>
   325e8:	e3a03000 	mov	r3, #0
   325ec:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   325f0:	ebffcfa6 	bl	26490 <CLogger::Get()>
   325f4:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   325f8:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   325fc:	e59f1140 	ldr	r1, [pc, #320]	; 32744 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32600:	e58d2004 	str	r2, [sp, #4]
   32604:	e58d3000 	str	r3, [sp]
   32608:	e3a02001 	mov	r2, #1
   3260c:	e59f313c 	ldr	r3, [pc, #316]	; 32750 <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   32610:	ebffcedb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32614:	e28dd020 	add	sp, sp, #32
   32618:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3261c:	e2844001 	add	r4, r4, #1
   32620:	e1a00008 	mov	r0, r8
   32624:	ebffec78 	bl	2d80c <microsDelay>
   32628:	e3540064 	cmp	r4, #100	; 0x64
   3262c:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32630:	0a000002 	beq	32640 <BusAccess::clockSetFreqHz(unsigned long)+0xe8>
   32634:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32638:	e3130080 	tst	r3, #128	; 0x80
   3263c:	1afffff6 	bne	3261c <BusAccess::clockSetFreqHz(unsigned long)+0xc4>
   32640:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32644:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32648:	eb003721 	bl	402d4 <pinMode>
   3264c:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32650:	e59f20fc 	ldr	r2, [pc, #252]	; 32754 <BusAccess::clockSetFreqHz(unsigned long)+0x1fc>
   32654:	e59f10fc 	ldr	r1, [pc, #252]	; 32758 <BusAccess::clockSetFreqHz(unsigned long)+0x200>
   32658:	e1500002 	cmp	r0, r2
   3265c:	e59f20f8 	ldr	r2, [pc, #248]	; 3275c <BusAccess::clockSetFreqHz(unsigned long)+0x204>
   32660:	e59f30f8 	ldr	r3, [pc, #248]	; 32760 <BusAccess::clockSetFreqHz(unsigned long)+0x208>
   32664:	81a03001 	movhi	r3, r1
   32668:	e59f80f4 	ldr	r8, [pc, #244]	; 32764 <BusAccess::clockSetFreqHz(unsigned long)+0x20c>
   3266c:	81a08002 	movhi	r8, r2
   32670:	e59f90d0 	ldr	r9, [pc, #208]	; 32748 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32674:	e59f20ec 	ldr	r2, [pc, #236]	; 32768 <BusAccess::clockSetFreqHz(unsigned long)+0x210>
   32678:	e5893070 	str	r3, [r9, #112]	; 0x70
   3267c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32680:	e59fa0e4 	ldr	sl, [pc, #228]	; 3276c <BusAccess::clockSetFreqHz(unsigned long)+0x214>
   32684:	81a0a002 	movhi	sl, r2
   32688:	ebffec5f 	bl	2d80c <microsDelay>
   3268c:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32690:	e1a00008 	mov	r0, r8
   32694:	eb0034c1 	bl	3f9a0 <__aeabi_uidiv>
   32698:	e59f50d0 	ldr	r5, [pc, #208]	; 32770 <BusAccess::clockSetFreqHz(unsigned long)+0x218>
   3269c:	e1500005 	cmp	r0, r5
   326a0:	31a05000 	movcc	r5, r0
   326a4:	e1a03605 	lsl	r3, r5, #12
   326a8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   326ac:	e5893074 	str	r3, [r9, #116]	; 0x74
   326b0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   326b4:	ebffec54 	bl	2d80c <microsDelay>
   326b8:	e3a03001 	mov	r3, #1
   326bc:	e589a070 	str	sl, [r9, #112]	; 0x70
   326c0:	e1a01005 	mov	r1, r5
   326c4:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   326c8:	e1a00008 	mov	r0, r8
   326cc:	eb0034b3 	bl	3f9a0 <__aeabi_uidiv>
   326d0:	e1a09000 	mov	r9, r0
   326d4:	ebffcf6d 	bl	26490 <CLogger::Get()>
   326d8:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   326dc:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   326e0:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   326e4:	e58d1014 	str	r1, [sp, #20]
   326e8:	e58d2010 	str	r2, [sp, #16]
   326ec:	e58d3004 	str	r3, [sp, #4]
   326f0:	e58d500c 	str	r5, [sp, #12]
   326f4:	e58d8008 	str	r8, [sp, #8]
   326f8:	e58d9000 	str	r9, [sp]
   326fc:	e58d701c 	str	r7, [sp, #28]
   32700:	e58d4018 	str	r4, [sp, #24]
   32704:	e59f3068 	ldr	r3, [pc, #104]	; 32774 <BusAccess::clockSetFreqHz(unsigned long)+0x21c>
   32708:	e3a02003 	mov	r2, #3
   3270c:	e59f1030 	ldr	r1, [pc, #48]	; 32744 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32710:	ebffce9b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32714:	e28dd020 	add	sp, sp, #32
   32718:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3271c:	e3a01000 	mov	r1, #0
   32720:	e59f2020 	ldr	r2, [pc, #32]	; 32748 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32724:	e59f3020 	ldr	r3, [pc, #32]	; 3274c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32728:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   3272c:	e0033000 	and	r3, r3, r0
   32730:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32734:	e5823070 	str	r3, [r2, #112]	; 0x70
   32738:	e5c61228 	strb	r1, [r6, #552]	; 0x228
   3273c:	eaffff93 	b	32590 <BusAccess::clockSetFreqHz(unsigned long)+0x38>
   32740:	000480ac 	.word	0x000480ac
   32744:	0004804c 	.word	0x0004804c
   32748:	20101000 	.word	0x20101000
   3274c:	00000f0f 	.word	0x00000f0f
   32750:	0004802c 	.word	0x0004802c
   32754:	0003d08f 	.word	0x0003d08f
   32758:	5a000006 	.word	0x5a000006
   3275c:	1dcd6500 	.word	0x1dcd6500
   32760:	5a000001 	.word	0x5a000001
   32764:	0124f800 	.word	0x0124f800
   32768:	5a000016 	.word	0x5a000016
   3276c:	5a000011 	.word	0x5a000011
   32770:	00000fff 	.word	0x00000fff
   32774:	00048058 	.word	0x00048058

00032778 <BusAccess::clockEnable(bool)>:
   32778:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   3277c:	e1530001 	cmp	r3, r1
   32780:	012fff1e 	bxeq	lr
   32784:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32788:	e59f5180 	ldr	r5, [pc, #384]	; 32910 <BusAccess::clockEnable(bool)+0x198>
   3278c:	e59f3180 	ldr	r3, [pc, #384]	; 32914 <BusAccess::clockEnable(bool)+0x19c>
   32790:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32794:	e3510000 	cmp	r1, #0
   32798:	e0033002 	and	r3, r3, r2
   3279c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   327a0:	e5853070 	str	r3, [r5, #112]	; 0x70
   327a4:	e24dd020 	sub	sp, sp, #32
   327a8:	05c01228 	strbeq	r1, [r0, #552]	; 0x228
   327ac:	0a000048 	beq	328d4 <BusAccess::clockEnable(bool)+0x15c>
   327b0:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   327b4:	e1a06000 	mov	r6, r0
   327b8:	e3730001 	cmn	r3, #1
   327bc:	0a000046 	beq	328dc <BusAccess::clockEnable(bool)+0x164>
   327c0:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   327c4:	e3530000 	cmp	r3, #0
   327c8:	0a000043 	beq	328dc <BusAccess::clockEnable(bool)+0x164>
   327cc:	e3a07000 	mov	r7, #0
   327d0:	e3a08001 	mov	r8, #1
   327d4:	e1a04007 	mov	r4, r7
   327d8:	ea000005 	b	327f4 <BusAccess::clockEnable(bool)+0x7c>
   327dc:	e2844001 	add	r4, r4, #1
   327e0:	e1a00008 	mov	r0, r8
   327e4:	ebffec08 	bl	2d80c <microsDelay>
   327e8:	e3540064 	cmp	r4, #100	; 0x64
   327ec:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   327f0:	0a000002 	beq	32800 <BusAccess::clockEnable(bool)+0x88>
   327f4:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   327f8:	e3130080 	tst	r3, #128	; 0x80
   327fc:	1afffff6 	bne	327dc <BusAccess::clockEnable(bool)+0x64>
   32800:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32804:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32808:	eb0036b1 	bl	402d4 <pinMode>
   3280c:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32810:	e59f2100 	ldr	r2, [pc, #256]	; 32918 <BusAccess::clockEnable(bool)+0x1a0>
   32814:	e59f1100 	ldr	r1, [pc, #256]	; 3291c <BusAccess::clockEnable(bool)+0x1a4>
   32818:	e1500002 	cmp	r0, r2
   3281c:	e59f20fc 	ldr	r2, [pc, #252]	; 32920 <BusAccess::clockEnable(bool)+0x1a8>
   32820:	e59f30fc 	ldr	r3, [pc, #252]	; 32924 <BusAccess::clockEnable(bool)+0x1ac>
   32824:	81a03001 	movhi	r3, r1
   32828:	e59f80f8 	ldr	r8, [pc, #248]	; 32928 <BusAccess::clockEnable(bool)+0x1b0>
   3282c:	81a08002 	movhi	r8, r2
   32830:	e59f90d8 	ldr	r9, [pc, #216]	; 32910 <BusAccess::clockEnable(bool)+0x198>
   32834:	e59f20f0 	ldr	r2, [pc, #240]	; 3292c <BusAccess::clockEnable(bool)+0x1b4>
   32838:	e5893070 	str	r3, [r9, #112]	; 0x70
   3283c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32840:	e59fa0e8 	ldr	sl, [pc, #232]	; 32930 <BusAccess::clockEnable(bool)+0x1b8>
   32844:	81a0a002 	movhi	sl, r2
   32848:	ebffebef 	bl	2d80c <microsDelay>
   3284c:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32850:	e1a00008 	mov	r0, r8
   32854:	eb003451 	bl	3f9a0 <__aeabi_uidiv>
   32858:	e59f50d4 	ldr	r5, [pc, #212]	; 32934 <BusAccess::clockEnable(bool)+0x1bc>
   3285c:	e1500005 	cmp	r0, r5
   32860:	31a05000 	movcc	r5, r0
   32864:	e1a03605 	lsl	r3, r5, #12
   32868:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   3286c:	e5893074 	str	r3, [r9, #116]	; 0x74
   32870:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32874:	ebffebe4 	bl	2d80c <microsDelay>
   32878:	e3a03001 	mov	r3, #1
   3287c:	e589a070 	str	sl, [r9, #112]	; 0x70
   32880:	e1a01005 	mov	r1, r5
   32884:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32888:	e1a00008 	mov	r0, r8
   3288c:	eb003443 	bl	3f9a0 <__aeabi_uidiv>
   32890:	e1a09000 	mov	r9, r0
   32894:	ebffcefd 	bl	26490 <CLogger::Get()>
   32898:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   3289c:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   328a0:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   328a4:	e58d1014 	str	r1, [sp, #20]
   328a8:	e58d2010 	str	r2, [sp, #16]
   328ac:	e58d3004 	str	r3, [sp, #4]
   328b0:	e58d500c 	str	r5, [sp, #12]
   328b4:	e58d8008 	str	r8, [sp, #8]
   328b8:	e58d9000 	str	r9, [sp]
   328bc:	e58d701c 	str	r7, [sp, #28]
   328c0:	e58d4018 	str	r4, [sp, #24]
   328c4:	e59f306c 	ldr	r3, [pc, #108]	; 32938 <BusAccess::clockEnable(bool)+0x1c0>
   328c8:	e3a02003 	mov	r2, #3
   328cc:	e59f1068 	ldr	r1, [pc, #104]	; 3293c <BusAccess::clockEnable(bool)+0x1c4>
   328d0:	ebffce2b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   328d4:	e28dd020 	add	sp, sp, #32
   328d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   328dc:	e3a03000 	mov	r3, #0
   328e0:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   328e4:	ebffcee9 	bl	26490 <CLogger::Get()>
   328e8:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   328ec:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   328f0:	e59f1044 	ldr	r1, [pc, #68]	; 3293c <BusAccess::clockEnable(bool)+0x1c4>
   328f4:	e58d2004 	str	r2, [sp, #4]
   328f8:	e58d3000 	str	r3, [sp]
   328fc:	e3a02001 	mov	r2, #1
   32900:	e59f3038 	ldr	r3, [pc, #56]	; 32940 <BusAccess::clockEnable(bool)+0x1c8>
   32904:	ebffce1e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32908:	e28dd020 	add	sp, sp, #32
   3290c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32910:	20101000 	.word	0x20101000
   32914:	00000f0f 	.word	0x00000f0f
   32918:	0003d08f 	.word	0x0003d08f
   3291c:	5a000006 	.word	0x5a000006
   32920:	1dcd6500 	.word	0x1dcd6500
   32924:	5a000001 	.word	0x5a000001
   32928:	0124f800 	.word	0x0124f800
   3292c:	5a000016 	.word	0x5a000016
   32930:	5a000011 	.word	0x5a000011
   32934:	00000fff 	.word	0x00000fff
   32938:	00048058 	.word	0x00048058
   3293c:	0004804c 	.word	0x0004804c
   32940:	0004802c 	.word	0x0004802c

00032944 <BusAccess::clockCurFreqHz()>:
   32944:	e5900224 	ldr	r0, [r0, #548]	; 0x224
   32948:	e12fff1e 	bx	lr

0003294c <BusAccess::clockGetMinFreqHz()>:
   3294c:	e3a00001 	mov	r0, #1
   32950:	e12fff1e 	bx	lr

00032954 <BusAccess::clockGetMaxFreqHz()>:
   32954:	e59f0000 	ldr	r0, [pc]	; 3295c <BusAccess::clockGetMaxFreqHz()+0x8>
   32958:	e12fff1e 	bx	lr
   3295c:	017d7840 	.word	0x017d7840

00032960 <BusAccess::waitEnablementUpdate()>:
   32960:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   32964:	e3510000 	cmp	r1, #0
   32968:	da00001c 	ble	329e0 <BusAccess::waitEnablementUpdate()+0x80>
   3296c:	e3a0c000 	mov	ip, #0
   32970:	e3a0202c 	mov	r2, #44	; 0x2c
   32974:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   32978:	e1a03000 	mov	r3, r0
   3297c:	e1a0e00c 	mov	lr, ip
   32980:	e0210192 	mla	r1, r2, r1, r0
   32984:	e5d32004 	ldrb	r2, [r3, #4]
   32988:	e3520000 	cmp	r2, #0
   3298c:	0a000003 	beq	329a0 <BusAccess::waitEnablementUpdate()+0x40>
   32990:	e35c0000 	cmp	ip, #0
   32994:	05d3c014 	ldrbeq	ip, [r3, #20]
   32998:	e35e0000 	cmp	lr, #0
   3299c:	05d3e015 	ldrbeq	lr, [r3, #21]
   329a0:	e283302c 	add	r3, r3, #44	; 0x2c
   329a4:	e1530001 	cmp	r3, r1
   329a8:	1afffff5 	bne	32984 <BusAccess::waitEnablementUpdate()+0x24>
   329ac:	e59f3054 	ldr	r3, [pc, #84]	; 32a08 <BusAccess::waitEnablementUpdate()+0xa8>
   329b0:	e35e0000 	cmp	lr, #0
   329b4:	e5933000 	ldr	r3, [r3]
   329b8:	e59f2048 	ldr	r2, [pc, #72]	; 32a08 <BusAccess::waitEnablementUpdate()+0xa8>
   329bc:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   329c0:	e3c33008 	bic	r3, r3, #8
   329c4:	13833008 	orrne	r3, r3, #8
   329c8:	e35c0000 	cmp	ip, #0
   329cc:	13833b02 	orrne	r3, r3, #2048	; 0x800
   329d0:	e5c0c1c1 	strb	ip, [r0, #449]	; 0x1c1
   329d4:	e5c0e1c2 	strb	lr, [r0, #450]	; 0x1c2
   329d8:	e5823000 	str	r3, [r2]
   329dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   329e0:	e3a02000 	mov	r2, #0
   329e4:	e59f301c 	ldr	r3, [pc, #28]	; 32a08 <BusAccess::waitEnablementUpdate()+0xa8>
   329e8:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   329ec:	e5933000 	ldr	r3, [r3]
   329f0:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   329f4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   329f8:	e59f2008 	ldr	r2, [pc, #8]	; 32a08 <BusAccess::waitEnablementUpdate()+0xa8>
   329fc:	e3c33008 	bic	r3, r3, #8
   32a00:	e5823000 	str	r3, [r2]
   32a04:	e12fff1e 	bx	lr
   32a08:	2020c000 	.word	0x2020c000

00032a0c <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   32a0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a10:	e59041bc 	ldr	r4, [r0, #444]	; 0x1bc
   32a14:	e24dd00c 	sub	sp, sp, #12
   32a18:	e3540009 	cmp	r4, #9
   32a1c:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
   32a20:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   32a24:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   32a28:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   32a2c:	e5dd9048 	ldrb	r9, [sp, #72]	; 0x48
   32a30:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   32a34:	e5dd5054 	ldrb	r5, [sp, #84]	; 0x54
   32a38:	e5dde058 	ldrb	lr, [sp, #88]	; 0x58
   32a3c:	ca00001d 	bgt	32ab8 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xac>
   32a40:	e88d000c 	stm	sp, {r2, r3}
   32a44:	e3a0302c 	mov	r3, #44	; 0x2c
   32a48:	e0230493 	mla	r3, r3, r4, r0
   32a4c:	e5c31004 	strb	r1, [r3, #4]
   32a50:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   32a54:	e5c3b016 	strb	fp, [r3, #22]
   32a58:	e5831018 	str	r1, [r3, #24]
   32a5c:	e59d1000 	ldr	r1, [sp]
   32a60:	e5c3a01c 	strb	sl, [r3, #28]
   32a64:	e5831008 	str	r1, [r3, #8]
   32a68:	e59d1004 	ldr	r1, [sp, #4]
   32a6c:	e2842001 	add	r2, r4, #1
   32a70:	e583100c 	str	r1, [r3, #12]
   32a74:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   32a78:	e5c38014 	strb	r8, [r3, #20]
   32a7c:	e5831020 	str	r1, [r3, #32]
   32a80:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   32a84:	e5c39024 	strb	r9, [r3, #36]	; 0x24
   32a88:	e5831010 	str	r1, [r3, #16]
   32a8c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   32a90:	e5c37015 	strb	r7, [r3, #21]
   32a94:	e5831028 	str	r1, [r3, #40]	; 0x28
   32a98:	e5c3602c 	strb	r6, [r3, #44]	; 0x2c
   32a9c:	e5c3502d 	strb	r5, [r3, #45]	; 0x2d
   32aa0:	e5c3e02e 	strb	lr, [r3, #46]	; 0x2e
   32aa4:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   32aa8:	ebffffac 	bl	32960 <BusAccess::waitEnablementUpdate()>
   32aac:	e1a00004 	mov	r0, r4
   32ab0:	e28dd00c 	add	sp, sp, #12
   32ab4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ab8:	e3e04000 	mvn	r4, #0
   32abc:	eafffffa 	b	32aac <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xa0>

00032ac0 <BusAccess::busSocketEnable(int, bool)>:
   32ac0:	e3510000 	cmp	r1, #0
   32ac4:	b12fff1e 	bxlt	lr
   32ac8:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   32acc:	e151000c 	cmp	r1, ip
   32ad0:	a12fff1e 	bxge	lr
   32ad4:	e3a0c02c 	mov	ip, #44	; 0x2c
   32ad8:	e021019c 	mla	r1, ip, r1, r0
   32adc:	e5c12004 	strb	r2, [r1, #4]
   32ae0:	eaffff9e 	b	32960 <BusAccess::waitEnablementUpdate()>

00032ae4 <BusAccess::controlRelease()>:
   32ae4:	e5903000 	ldr	r3, [r0]
   32ae8:	e92d4070 	push	{r4, r5, r6, lr}
   32aec:	e3530011 	cmp	r3, #17
   32af0:	e1a04000 	mov	r4, r0
   32af4:	0a000053 	beq	32c48 <BusAccess::controlRelease()+0x164>
   32af8:	e3a06001 	mov	r6, #1
   32afc:	e59f51a8 	ldr	r5, [pc, #424]	; 32cac <BusAccess::controlRelease()+0x1c8>
   32b00:	e59f31a8 	ldr	r3, [pc, #424]	; 32cb0 <BusAccess::controlRelease()+0x1cc>
   32b04:	e3a00014 	mov	r0, #20
   32b08:	e585301c 	str	r3, [r5, #28]
   32b0c:	eb00365d 	bl	40488 <lowlev_cycleDelay>
   32b10:	e5856028 	str	r6, [r5, #40]	; 0x28
   32b14:	e3a00014 	mov	r0, #20
   32b18:	eb00365a 	bl	40488 <lowlev_cycleDelay>
   32b1c:	e585601c 	str	r6, [r5, #28]
   32b20:	e3a01040 	mov	r1, #64	; 0x40
   32b24:	e59f3180 	ldr	r3, [pc, #384]	; 32cac <BusAccess::controlRelease()+0x1c8>
   32b28:	e5932008 	ldr	r2, [r3, #8]
   32b2c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32b30:	e5832008 	str	r2, [r3, #8]
   32b34:	e583101c 	str	r1, [r3, #28]
   32b38:	e5942000 	ldr	r2, [r4]
   32b3c:	e3520011 	cmp	r2, #17
   32b40:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32b44:	13a01801 	movne	r1, #65536	; 0x10000
   32b48:	13a02c0e 	movne	r2, #3584	; 0xe00
   32b4c:	1583101c 	strne	r1, [r3, #28]
   32b50:	e5832028 	str	r2, [r3, #40]	; 0x28
   32b54:	e5943000 	ldr	r3, [r4]
   32b58:	e3530011 	cmp	r3, #17
   32b5c:	0a00004e 	beq	32c9c <BusAccess::controlRelease()+0x1b8>
   32b60:	e59f314c 	ldr	r3, [pc, #332]	; 32cb4 <BusAccess::controlRelease()+0x1d0>
   32b64:	e5932004 	ldr	r2, [r3, #4]
   32b68:	e3120001 	tst	r2, #1
   32b6c:	1a00000b 	bne	32ba0 <BusAccess::controlRelease()+0xbc>
   32b70:	e5d411c2 	ldrb	r1, [r4, #450]	; 0x1c2
   32b74:	e5d421c1 	ldrb	r2, [r4, #449]	; 0x1c1
   32b78:	e3510000 	cmp	r1, #0
   32b7c:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   32b80:	03a01000 	moveq	r1, #0
   32b84:	e3520000 	cmp	r2, #0
   32b88:	03a02000 	moveq	r2, #0
   32b8c:	13e024ff 	mvnne	r2, #-16777216	; 0xff000000
   32b90:	e59f0114 	ldr	r0, [pc, #276]	; 32cac <BusAccess::controlRelease()+0x1c8>
   32b94:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   32b98:	e5831018 	str	r1, [r3, #24]
   32b9c:	e5832018 	str	r2, [r3, #24]
   32ba0:	e3a05000 	mov	r5, #0
   32ba4:	e1a00004 	mov	r0, r4
   32ba8:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   32bac:	ebffff6b 	bl	32960 <BusAccess::waitEnablementUpdate()>
   32bb0:	e1a00004 	mov	r0, r4
   32bb4:	ebfff8fe 	bl	30fb4 <BusAccess::busActionCheck()>
   32bb8:	e1a00004 	mov	r0, r4
   32bbc:	ebfff900 	bl	30fc4 <BusAccess::busActionHandleStart()>
   32bc0:	e5940000 	ldr	r0, [r4]
   32bc4:	e59f10ec 	ldr	r1, [pc, #236]	; 32cb8 <BusAccess::controlRelease()+0x1d4>
   32bc8:	e3500011 	cmp	r0, #17
   32bcc:	e59f30e8 	ldr	r3, [pc, #232]	; 32cbc <BusAccess::controlRelease()+0x1d8>
   32bd0:	11a03001 	movne	r3, r1
   32bd4:	e59f20d0 	ldr	r2, [pc, #208]	; 32cac <BusAccess::controlRelease()+0x1c8>
   32bd8:	e1a01005 	mov	r1, r5
   32bdc:	e582301c 	str	r3, [r2, #28]
   32be0:	e3a00011 	mov	r0, #17
   32be4:	eb0035ba 	bl	402d4 <pinMode>
   32be8:	e1a01005 	mov	r1, r5
   32bec:	e3a00012 	mov	r0, #18
   32bf0:	eb0035b7 	bl	402d4 <pinMode>
   32bf4:	e1a01005 	mov	r1, r5
   32bf8:	e1a00005 	mov	r0, r5
   32bfc:	eb0035b4 	bl	402d4 <pinMode>
   32c00:	e1a01005 	mov	r1, r5
   32c04:	e3a00001 	mov	r0, #1
   32c08:	eb0035b1 	bl	402d4 <pinMode>
   32c0c:	e1a01005 	mov	r1, r5
   32c10:	e3a00005 	mov	r0, #5
   32c14:	eb0035ae 	bl	402d4 <pinMode>
   32c18:	e5943000 	ldr	r3, [r4]
   32c1c:	e3530011 	cmp	r3, #17
   32c20:	0a000002 	beq	32c30 <BusAccess::controlRelease()+0x14c>
   32c24:	e1a01005 	mov	r1, r5
   32c28:	e3a00003 	mov	r0, #3
   32c2c:	eb0035a8 	bl	402d4 <pinMode>
   32c30:	e3a01000 	mov	r1, #0
   32c34:	e1a00004 	mov	r0, r4
   32c38:	ebfffbc9 	bl	31b64 <BusAccess::waitForBusAck(bool)>
   32c3c:	e3a03000 	mov	r3, #0
   32c40:	e5c431f1 	strb	r3, [r4, #497]	; 0x1f1
   32c44:	e8bd8070 	pop	{r4, r5, r6, pc}
   32c48:	e3a02040 	mov	r2, #64	; 0x40
   32c4c:	e3a06001 	mov	r6, #1
   32c50:	e59f5054 	ldr	r5, [pc, #84]	; 32cac <BusAccess::controlRelease()+0x1c8>
   32c54:	e59f3064 	ldr	r3, [pc, #100]	; 32cc0 <BusAccess::controlRelease()+0x1dc>
   32c58:	e5852028 	str	r2, [r5, #40]	; 0x28
   32c5c:	e5952008 	ldr	r2, [r5, #8]
   32c60:	e59f105c 	ldr	r1, [pc, #92]	; 32cc4 <BusAccess::controlRelease()+0x1e0>
   32c64:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32c68:	e1823003 	orr	r3, r2, r3
   32c6c:	e5853008 	str	r3, [r5, #8]
   32c70:	e3a00064 	mov	r0, #100	; 0x64
   32c74:	e585101c 	str	r1, [r5, #28]
   32c78:	eb003602 	bl	40488 <lowlev_cycleDelay>
   32c7c:	e5856028 	str	r6, [r5, #40]	; 0x28
   32c80:	e3a00014 	mov	r0, #20
   32c84:	eb0035ff 	bl	40488 <lowlev_cycleDelay>
   32c88:	e585601c 	str	r6, [r5, #28]
   32c8c:	e5953008 	ldr	r3, [r5, #8]
   32c90:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32c94:	e5853008 	str	r3, [r5, #8]
   32c98:	eaffffa0 	b	32b20 <BusAccess::controlRelease()+0x3c>
   32c9c:	e3a01001 	mov	r1, #1
   32ca0:	e3a00003 	mov	r0, #3
   32ca4:	eb0035ca 	bl	403d4 <digitalWrite>
   32ca8:	eaffffac 	b	32b60 <BusAccess::controlRelease()+0x7c>
   32cac:	20200000 	.word	0x20200000
   32cb0:	0006000b 	.word	0x0006000b
   32cb4:	2020c000 	.word	0x2020c000
   32cb8:	000e002b 	.word	0x000e002b
   32cbc:	000e0023 	.word	0x000e0023
   32cc0:	00249249 	.word	0x00249249
   32cc4:	00100002 	.word	0x00100002

00032cc8 <BusAccess::waitSetupMREQAndIORQEnables()>:
   32cc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32ccc:	e3a06000 	mov	r6, #0
   32cd0:	e59f30dc 	ldr	r3, [pc, #220]	; 32db4 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   32cd4:	e59f20dc 	ldr	r2, [pc, #220]	; 32db8 <BusAccess::waitSetupMREQAndIORQEnables()+0xf0>
   32cd8:	e24dd010 	sub	sp, sp, #16
   32cdc:	e1a05006 	mov	r5, r6
   32ce0:	e1a04003 	mov	r4, r3
   32ce4:	e3a08001 	mov	r8, #1
   32ce8:	e59f70cc 	ldr	r7, [pc, #204]	; 32dbc <BusAccess::waitSetupMREQAndIORQEnables()+0xf4>
   32cec:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   32cf0:	ea000005 	b	32d0c <BusAccess::waitSetupMREQAndIORQEnables()+0x44>
   32cf4:	e2855001 	add	r5, r5, #1
   32cf8:	e1a00008 	mov	r0, r8
   32cfc:	ebffeac2 	bl	2d80c <microsDelay>
   32d00:	e1550007 	cmp	r5, r7
   32d04:	e59460a0 	ldr	r6, [r4, #160]	; 0xa0
   32d08:	0a000023 	beq	32d9c <BusAccess::waitSetupMREQAndIORQEnables()+0xd4>
   32d0c:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   32d10:	e2133080 	ands	r3, r3, #128	; 0x80
   32d14:	1afffff6 	bne	32cf4 <BusAccess::waitSetupMREQAndIORQEnables()+0x2c>
   32d18:	e1a04003 	mov	r4, r3
   32d1c:	e3a01004 	mov	r1, #4
   32d20:	e3a0000d 	mov	r0, #13
   32d24:	eb00356a 	bl	402d4 <pinMode>
   32d28:	e3a01004 	mov	r1, #4
   32d2c:	e3a0000c 	mov	r0, #12
   32d30:	eb003567 	bl	402d4 <pinMode>
   32d34:	e3e02000 	mvn	r2, #0
   32d38:	e59f7080 	ldr	r7, [pc, #128]	; 32dc0 <BusAccess::waitSetupMREQAndIORQEnables()+0xf8>
   32d3c:	e59f8070 	ldr	r8, [pc, #112]	; 32db4 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   32d40:	e59f307c 	ldr	r3, [pc, #124]	; 32dc4 <BusAccess::waitSetupMREQAndIORQEnables()+0xfc>
   32d44:	e5872004 	str	r2, [r7, #4]
   32d48:	e3a00001 	mov	r0, #1
   32d4c:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   32d50:	ebffeaad 	bl	2d80c <microsDelay>
   32d54:	e59f306c 	ldr	r3, [pc, #108]	; 32dc8 <BusAccess::waitSetupMREQAndIORQEnables()+0x100>
   32d58:	e3a00001 	mov	r0, #1
   32d5c:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   32d60:	ebffeaa9 	bl	2d80c <microsDelay>
   32d64:	e59f3060 	ldr	r3, [pc, #96]	; 32dcc <BusAccess::waitSetupMREQAndIORQEnables()+0x104>
   32d68:	e3a00001 	mov	r0, #1
   32d6c:	e5873000 	str	r3, [r7]
   32d70:	ebffeaa5 	bl	2d80c <microsDelay>
   32d74:	ebffcdc5 	bl	26490 <CLogger::Get()>
   32d78:	e3a03010 	mov	r3, #16
   32d7c:	e58d400c 	str	r4, [sp, #12]
   32d80:	e88d0068 	stm	sp, {r3, r5, r6}
   32d84:	e3a02004 	mov	r2, #4
   32d88:	e59f3040 	ldr	r3, [pc, #64]	; 32dd0 <BusAccess::waitSetupMREQAndIORQEnables()+0x108>
   32d8c:	e59f1040 	ldr	r1, [pc, #64]	; 32dd4 <BusAccess::waitSetupMREQAndIORQEnables()+0x10c>
   32d90:	ebffccfb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32d94:	e28dd010 	add	sp, sp, #16
   32d98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32d9c:	e59f3034 	ldr	r3, [pc, #52]	; 32dd8 <BusAccess::waitSetupMREQAndIORQEnables()+0x110>
   32da0:	e3a00001 	mov	r0, #1
   32da4:	e58430a0 	str	r3, [r4, #160]	; 0xa0
   32da8:	ebffea97 	bl	2d80c <microsDelay>
   32dac:	e59440a0 	ldr	r4, [r4, #160]	; 0xa0
   32db0:	eaffffd9 	b	32d1c <BusAccess::waitSetupMREQAndIORQEnables()+0x54>
   32db4:	20101000 	.word	0x20101000
   32db8:	5a000006 	.word	0x5a000006
   32dbc:	000186a0 	.word	0x000186a0
   32dc0:	2020c000 	.word	0x2020c000
   32dc4:	5a010000 	.word	0x5a010000
   32dc8:	5a000016 	.word	0x5a000016
   32dcc:	00002363 	.word	0x00002363
   32dd0:	000480cc 	.word	0x000480cc
   32dd4:	00047f04 	.word	0x00047f04
   32dd8:	5a000026 	.word	0x5a000026

00032ddc <BusAccess::waitResetFlipFlops(bool)>:
   32ddc:	e59f3088 	ldr	r3, [pc, #136]	; 32e6c <BusAccess::waitResetFlipFlops(bool)+0x90>
   32de0:	e5932004 	ldr	r2, [r3, #4]
   32de4:	e3120001 	tst	r2, #1
   32de8:	1a00000d 	bne	32e24 <BusAccess::waitResetFlipFlops(bool)+0x48>
   32dec:	e59f207c 	ldr	r2, [pc, #124]	; 32e70 <BusAccess::waitResetFlipFlops(bool)+0x94>
   32df0:	e3510000 	cmp	r1, #0
   32df4:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   32df8:	0a00000c 	beq	32e30 <BusAccess::waitResetFlipFlops(bool)+0x54>
   32dfc:	e5d021c2 	ldrb	r2, [r0, #450]	; 0x1c2
   32e00:	e3520000 	cmp	r2, #0
   32e04:	1a000016 	bne	32e64 <BusAccess::waitResetFlipFlops(bool)+0x88>
   32e08:	e5832018 	str	r2, [r3, #24]
   32e0c:	e5d031c1 	ldrb	r3, [r0, #449]	; 0x1c1
   32e10:	e3530000 	cmp	r3, #0
   32e14:	0a00000a 	beq	32e44 <BusAccess::waitResetFlipFlops(bool)+0x68>
   32e18:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   32e1c:	e59f3048 	ldr	r3, [pc, #72]	; 32e6c <BusAccess::waitResetFlipFlops(bool)+0x90>
   32e20:	e5832018 	str	r2, [r3, #24]
   32e24:	e3a03000 	mov	r3, #0
   32e28:	e5c031c3 	strb	r3, [r0, #451]	; 0x1c3
   32e2c:	e12fff1e 	bx	lr
   32e30:	e3120002 	tst	r2, #2
   32e34:	0a000004 	beq	32e4c <BusAccess::waitResetFlipFlops(bool)+0x70>
   32e38:	e5831018 	str	r1, [r3, #24]
   32e3c:	e3120001 	tst	r2, #1
   32e40:	0afffff1 	beq	32e0c <BusAccess::waitResetFlipFlops(bool)+0x30>
   32e44:	e3a02000 	mov	r2, #0
   32e48:	eafffff3 	b	32e1c <BusAccess::waitResetFlipFlops(bool)+0x40>
   32e4c:	e5d011c2 	ldrb	r1, [r0, #450]	; 0x1c2
   32e50:	e3510000 	cmp	r1, #0
   32e54:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   32e58:	15831018 	strne	r1, [r3, #24]
   32e5c:	1afffff6 	bne	32e3c <BusAccess::waitResetFlipFlops(bool)+0x60>
   32e60:	eafffff4 	b	32e38 <BusAccess::waitResetFlipFlops(bool)+0x5c>
   32e64:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   32e68:	eaffffe6 	b	32e08 <BusAccess::waitResetFlipFlops(bool)+0x2c>
   32e6c:	2020c000 	.word	0x2020c000
   32e70:	20200000 	.word	0x20200000

00032e74 <BusAccess::waitClearDetected()>:
   32e74:	e12fff1e 	bx	lr

00032e78 <BusAccess::waitSuspendBusDetailOneCycle()>:
   32e78:	e5903000 	ldr	r3, [r0]
   32e7c:	e3530011 	cmp	r3, #17
   32e80:	03a03001 	moveq	r3, #1
   32e84:	05c031d1 	strbeq	r3, [r0, #465]	; 0x1d1
   32e88:	e12fff1e 	bx	lr

00032e8c <BusAccess::setPinOut(int, bool)>:
   32e8c:	e92d4070 	push	{r4, r5, r6, lr}
   32e90:	e1a05002 	mov	r5, r2
   32e94:	e6ef4071 	uxtb	r4, r1
   32e98:	e1a00004 	mov	r0, r4
   32e9c:	e1a01002 	mov	r1, r2
   32ea0:	eb00354b 	bl	403d4 <digitalWrite>
   32ea4:	e1a00004 	mov	r0, r4
   32ea8:	e3a01001 	mov	r1, #1
   32eac:	eb003508 	bl	402d4 <pinMode>
   32eb0:	e1a01005 	mov	r1, r5
   32eb4:	e1a00004 	mov	r0, r4
   32eb8:	e8bd4070 	pop	{r4, r5, r6, lr}
   32ebc:	ea003544 	b	403d4 <digitalWrite>

00032ec0 <BusAccess::controlTake()>:
   32ec0:	e92d4070 	push	{r4, r5, r6, lr}
   32ec4:	e3a04001 	mov	r4, #1
   32ec8:	e3a0e040 	mov	lr, #64	; 0x40
   32ecc:	e1a05000 	mov	r5, r0
   32ed0:	e59f209c 	ldr	r2, [pc, #156]	; 32f74 <BusAccess::controlTake()+0xb4>
   32ed4:	e5c041f1 	strb	r4, [r0, #497]	; 0x1f1
   32ed8:	e5923000 	ldr	r3, [r2]
   32edc:	e59fc094 	ldr	ip, [pc, #148]	; 32f78 <BusAccess::controlTake()+0xb8>
   32ee0:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   32ee4:	e3c33008 	bic	r3, r3, #8
   32ee8:	e5823000 	str	r3, [r2]
   32eec:	e59c3008 	ldr	r3, [ip, #8]
   32ef0:	e1a02004 	mov	r2, r4
   32ef4:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   32ef8:	e58c3008 	str	r3, [ip, #8]
   32efc:	e3a01011 	mov	r1, #17
   32f00:	e58ce01c 	str	lr, [ip, #28]
   32f04:	ebffffe0 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f08:	e1a02004 	mov	r2, r4
   32f0c:	e1a00005 	mov	r0, r5
   32f10:	e3a01012 	mov	r1, #18
   32f14:	ebffffdc 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f18:	e1a02004 	mov	r2, r4
   32f1c:	e1a00005 	mov	r0, r5
   32f20:	e3a01000 	mov	r1, #0
   32f24:	ebffffd8 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f28:	e1a02004 	mov	r2, r4
   32f2c:	e1a01004 	mov	r1, r4
   32f30:	e1a00005 	mov	r0, r5
   32f34:	ebffffd4 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f38:	e1a02004 	mov	r2, r4
   32f3c:	e1a00005 	mov	r0, r5
   32f40:	e3a01005 	mov	r1, #5
   32f44:	ebffffd0 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f48:	e1a02004 	mov	r2, r4
   32f4c:	e1a00005 	mov	r0, r5
   32f50:	e3a01003 	mov	r1, #3
   32f54:	ebffffcc 	bl	32e8c <BusAccess::setPinOut(int, bool)>
   32f58:	e5953000 	ldr	r3, [r5]
   32f5c:	e3530011 	cmp	r3, #17
   32f60:	18bd8070 	popne	{r4, r5, r6, pc}
   32f64:	e3a01000 	mov	r1, #0
   32f68:	e8bd4070 	pop	{r4, r5, r6, lr}
   32f6c:	e3a00003 	mov	r0, #3
   32f70:	ea003517 	b	403d4 <digitalWrite>
   32f74:	2020c000 	.word	0x2020c000
   32f78:	20200000 	.word	0x20200000

00032f7c <BusAccess::controlRequestAndTake()>:
   32f7c:	e3a0c040 	mov	ip, #64	; 0x40
   32f80:	e92d4010 	push	{r4, lr}
   32f84:	e1a04000 	mov	r4, r0
   32f88:	e59f3048 	ldr	r3, [pc, #72]	; 32fd8 <BusAccess::controlRequestAndTake()+0x5c>
   32f8c:	e3a01000 	mov	r1, #0
   32f90:	e5932008 	ldr	r2, [r3, #8]
   32f94:	e3a00013 	mov	r0, #19
   32f98:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32f9c:	e5832008 	str	r2, [r3, #8]
   32fa0:	e583c01c 	str	ip, [r3, #28]
   32fa4:	eb00350a 	bl	403d4 <digitalWrite>
   32fa8:	e1a00004 	mov	r0, r4
   32fac:	e3a01001 	mov	r1, #1
   32fb0:	ebfffaeb 	bl	31b64 <BusAccess::waitForBusAck(bool)>
   32fb4:	e3500000 	cmp	r0, #0
   32fb8:	e1a00004 	mov	r0, r4
   32fbc:	1a000002 	bne	32fcc <BusAccess::controlRequestAndTake()+0x50>
   32fc0:	ebfffec7 	bl	32ae4 <BusAccess::controlRelease()>
   32fc4:	e3a00002 	mov	r0, #2
   32fc8:	e8bd8010 	pop	{r4, pc}
   32fcc:	ebffffbb 	bl	32ec0 <BusAccess::controlTake()>
   32fd0:	e3a00000 	mov	r0, #0
   32fd4:	e8bd8010 	pop	{r4, pc}
   32fd8:	20200000 	.word	0x20200000

00032fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>:
   32fdc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32fe0:	e5dda020 	ldrb	sl, [sp, #32]
   32fe4:	e1a07002 	mov	r7, r2
   32fe8:	e35a0000 	cmp	sl, #0
   32fec:	e1a08003 	mov	r8, r3
   32ff0:	e1a05000 	mov	r5, r0
   32ff4:	e1a06001 	mov	r6, r1
   32ff8:	e5dd9024 	ldrb	r9, [sp, #36]	; 0x24
   32ffc:	0a00002c 	beq	330b4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0xd8>
   33000:	ebffffdd 	bl	32f7c <BusAccess::controlRequestAndTake()>
   33004:	e3500000 	cmp	r0, #0
   33008:	1a000041 	bne	33114 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x138>
   3300c:	e59f4104 	ldr	r4, [pc, #260]	; 33118 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x13c>
   33010:	e1a01006 	mov	r1, r6
   33014:	e5943008 	ldr	r3, [r4, #8]
   33018:	e1a00005 	mov	r0, r5
   3301c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33020:	e5843008 	str	r3, [r4, #8]
   33024:	ebfffc65 	bl	321c0 <BusAccess::addrSet(unsigned int)>
   33028:	e5942008 	ldr	r2, [r4, #8]
   3302c:	e59f30e8 	ldr	r3, [pc, #232]	; 3311c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x140>
   33030:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33034:	e1823003 	orr	r3, r2, r3
   33038:	e3580000 	cmp	r8, #0
   3303c:	e5843008 	str	r3, [r4, #8]
   33040:	0a00002c 	beq	330f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x11c>
   33044:	e1a04007 	mov	r4, r7
   33048:	e0466007 	sub	r6, r6, r7
   3304c:	ea000002 	b	3305c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x80>
   33050:	e0443007 	sub	r3, r4, r7
   33054:	e1530008 	cmp	r3, r8
   33058:	2a00000d 	bcs	33094 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0xb8>
   3305c:	e4d41001 	ldrb	r1, [r4], #1
   33060:	e1a02009 	mov	r2, r9
   33064:	e1a00005 	mov	r0, r5
   33068:	ebfffc5d 	bl	321e4 <BusAccess::byteWrite(unsigned long, int)>
   3306c:	e1a00005 	mov	r0, r5
   33070:	ebfffbe1 	bl	31ffc <BusAccess::addrLowInc()>
   33074:	e0841006 	add	r1, r4, r6
   33078:	e31100ff 	tst	r1, #255	; 0xff
   3307c:	1afffff3 	bne	33050 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x74>
   33080:	e1a00005 	mov	r0, r5
   33084:	ebfffc4d 	bl	321c0 <BusAccess::addrSet(unsigned int)>
   33088:	e0443007 	sub	r3, r4, r7
   3308c:	e1530008 	cmp	r3, r8
   33090:	3afffff1 	bcc	3305c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x80>
   33094:	e59f207c 	ldr	r2, [pc, #124]	; 33118 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x13c>
   33098:	e35a0000 	cmp	sl, #0
   3309c:	e5923008 	ldr	r3, [r2, #8]
   330a0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   330a4:	e5823008 	str	r3, [r2, #8]
   330a8:	1a000015 	bne	33104 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x128>
   330ac:	e3a00000 	mov	r0, #0
   330b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   330b4:	e59f405c 	ldr	r4, [pc, #92]	; 33118 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x13c>
   330b8:	e5943008 	ldr	r3, [r4, #8]
   330bc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   330c0:	e5843008 	str	r3, [r4, #8]
   330c4:	ebfffc3d 	bl	321c0 <BusAccess::addrSet(unsigned int)>
   330c8:	e5942008 	ldr	r2, [r4, #8]
   330cc:	e59f3048 	ldr	r3, [pc, #72]	; 3311c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x140>
   330d0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   330d4:	e1823003 	orr	r3, r2, r3
   330d8:	e3580000 	cmp	r8, #0
   330dc:	e5843008 	str	r3, [r4, #8]
   330e0:	1affffd7 	bne	33044 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x68>
   330e4:	e5943008 	ldr	r3, [r4, #8]
   330e8:	e1a00008 	mov	r0, r8
   330ec:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   330f0:	e5843008 	str	r3, [r4, #8]
   330f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   330f8:	e5943008 	ldr	r3, [r4, #8]
   330fc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33100:	e5843008 	str	r3, [r4, #8]
   33104:	e1a00005 	mov	r0, r5
   33108:	ebfffe75 	bl	32ae4 <BusAccess::controlRelease()>
   3310c:	e3a00000 	mov	r0, #0
   33110:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33114:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33118:	20200000 	.word	0x20200000
   3311c:	00249249 	.word	0x00249249

00033120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   33120:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33124:	e24dd00c 	sub	sp, sp, #12
   33128:	e5ddc030 	ldrb	ip, [sp, #48]	; 0x30
   3312c:	e1a0a001 	mov	sl, r1
   33130:	e35c0000 	cmp	ip, #0
   33134:	e58dc000 	str	ip, [sp]
   33138:	e1a0b003 	mov	fp, r3
   3313c:	e1a05000 	mov	r5, r0
   33140:	e5dd4034 	ldrb	r4, [sp, #52]	; 0x34
   33144:	0a000004 	beq	3315c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x3c>
   33148:	e58d2004 	str	r2, [sp, #4]
   3314c:	ebffff8a 	bl	32f7c <BusAccess::controlRequestAndTake()>
   33150:	e3500000 	cmp	r0, #0
   33154:	e59d2004 	ldr	r2, [sp, #4]
   33158:	1a000036 	bne	33238 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x118>
   3315c:	e3a00040 	mov	r0, #64	; 0x40
   33160:	e59f90f4 	ldr	r9, [pc, #244]	; 3325c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x13c>
   33164:	e58d2004 	str	r2, [sp, #4]
   33168:	e5993008 	ldr	r3, [r9, #8]
   3316c:	e1a0100a 	mov	r1, sl
   33170:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33174:	e5893008 	str	r3, [r9, #8]
   33178:	e589001c 	str	r0, [r9, #28]
   3317c:	e1a00005 	mov	r0, r5
   33180:	ebfffc0e 	bl	321c0 <BusAccess::addrSet(unsigned int)>
   33184:	e59f30d4 	ldr	r3, [pc, #212]	; 33260 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x140>
   33188:	e3540000 	cmp	r4, #0
   3318c:	e59f60d0 	ldr	r6, [pc, #208]	; 33264 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x144>
   33190:	01a06003 	moveq	r6, r3
   33194:	e35b0000 	cmp	fp, #0
   33198:	e59d2004 	ldr	r2, [sp, #4]
   3319c:	0a000021 	beq	33228 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x108>
   331a0:	e1a04002 	mov	r4, r2
   331a4:	e3a08c0e 	mov	r8, #3584	; 0xe00
   331a8:	e3a07801 	mov	r7, #65536	; 0x10000
   331ac:	e082b00b 	add	fp, r2, fp
   331b0:	e04aa002 	sub	sl, sl, r2
   331b4:	ea000001 	b	331c0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0xa0>
   331b8:	e15b0004 	cmp	fp, r4
   331bc:	0a000019 	beq	33228 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x108>
   331c0:	e5953000 	ldr	r3, [r5]
   331c4:	e3a0000a 	mov	r0, #10
   331c8:	e3530011 	cmp	r3, #17
   331cc:	e3a03c02 	mov	r3, #512	; 0x200
   331d0:	e5898028 	str	r8, [r9, #40]	; 0x28
   331d4:	e589301c 	str	r3, [r9, #28]
   331d8:	0a000018 	beq	33240 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x120>
   331dc:	e5897028 	str	r7, [r9, #40]	; 0x28
   331e0:	eb0034a8 	bl	40488 <lowlev_cycleDelay>
   331e4:	e589701c 	str	r7, [r9, #28]
   331e8:	e3a00032 	mov	r0, #50	; 0x32
   331ec:	e5896028 	str	r6, [r9, #40]	; 0x28
   331f0:	eb0034a4 	bl	40488 <lowlev_cycleDelay>
   331f4:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   331f8:	e1a00005 	mov	r0, r5
   331fc:	e1a03a23 	lsr	r3, r3, #20
   33200:	e4c43001 	strb	r3, [r4], #1
   33204:	e589601c 	str	r6, [r9, #28]
   33208:	ebfffb7b 	bl	31ffc <BusAccess::addrLowInc()>
   3320c:	e084100a 	add	r1, r4, sl
   33210:	e31100ff 	tst	r1, #255	; 0xff
   33214:	1affffe7 	bne	331b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x98>
   33218:	e1a00005 	mov	r0, r5
   3321c:	ebfffbe7 	bl	321c0 <BusAccess::addrSet(unsigned int)>
   33220:	e15b0004 	cmp	fp, r4
   33224:	1affffe5 	bne	331c0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0xa0>
   33228:	e59d3000 	ldr	r3, [sp]
   3322c:	e3530000 	cmp	r3, #0
   33230:	1a000005 	bne	3324c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x12c>
   33234:	e3a00000 	mov	r0, #0
   33238:	e28dd00c 	add	sp, sp, #12
   3323c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33240:	eb003490 	bl	40488 <lowlev_cycleDelay>
   33244:	e5898028 	str	r8, [r9, #40]	; 0x28
   33248:	eaffffe6 	b	331e8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0xc8>
   3324c:	e1a00005 	mov	r0, r5
   33250:	ebfffe23 	bl	32ae4 <BusAccess::controlRelease()>
   33254:	e3a00000 	mov	r0, #0
   33258:	eafffff6 	b	33238 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x118>
   3325c:	20200000 	.word	0x20200000
   33260:	00040001 	.word	0x00040001
   33264:	00040002 	.word	0x00040002

00033268 <BusAccess::isrAssert(int)>:
   33268:	e351000b 	cmp	r1, #11
   3326c:	d0800101 	addle	r0, r0, r1, lsl #2
   33270:	d59031f4 	ldrle	r3, [r0, #500]	; 0x1f4
   33274:	d2833001 	addle	r3, r3, #1
   33278:	d58031f4 	strle	r3, [r0, #500]	; 0x1f4
   3327c:	e12fff1e 	bx	lr

00033280 <BusAccess::isrAssertGetCount(int)>:
   33280:	e351000b 	cmp	r1, #11
   33284:	d281107c 	addle	r1, r1, #124	; 0x7c
   33288:	d0801101 	addle	r1, r0, r1, lsl #2
   3328c:	d5910004 	ldrle	r0, [r1, #4]
   33290:	c3a00000 	movgt	r0, #0
   33294:	e12fff1e 	bx	lr

00033298 <BusAccess::isrValue(int, int)>:
   33298:	e351000b 	cmp	r1, #11
   3329c:	d281107c 	addle	r1, r1, #124	; 0x7c
   332a0:	d0801101 	addle	r1, r0, r1, lsl #2
   332a4:	d5812004 	strle	r2, [r1, #4]
   332a8:	e12fff1e 	bx	lr

000332ac <BusAccess::isrPeak(int, int)>:
   332ac:	e351000b 	cmp	r1, #11
   332b0:	c12fff1e 	bxgt	lr
   332b4:	e0800101 	add	r0, r0, r1, lsl #2
   332b8:	e59031f4 	ldr	r3, [r0, #500]	; 0x1f4
   332bc:	e1530002 	cmp	r3, r2
   332c0:	b58021f4 	strlt	r2, [r0, #500]	; 0x1f4
   332c4:	e12fff1e 	bx	lr

000332c8 <BusAccess::setSignal(BR_BUS_ACTION, bool)>:
   332c8:	e2411001 	sub	r1, r1, #1
   332cc:	e3510003 	cmp	r1, #3
   332d0:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   332d4:	ea000003 	b	332e8 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x20>
   332d8:	00033368 	.word	0x00033368
   332dc:	00033330 	.word	0x00033330
   332e0:	000332f8 	.word	0x000332f8
   332e4:	000332ec 	.word	0x000332ec
   332e8:	e12fff1e 	bx	lr
   332ec:	e3520000 	cmp	r2, #0
   332f0:	1a000033 	bne	333c4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xfc>
   332f4:	eafffdfa 	b	32ae4 <BusAccess::controlRelease()>
   332f8:	e3520000 	cmp	r2, #0
   332fc:	e5903000 	ldr	r3, [r0]
   33300:	0a000026 	beq	333a0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33304:	e3530011 	cmp	r3, #17
   33308:	13a02801 	movne	r2, #65536	; 0x10000
   3330c:	13a00c0e 	movne	r0, #3584	; 0xe00
   33310:	13a01b01 	movne	r1, #1024	; 0x400
   33314:	1a00001b 	bne	33388 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33318:	e3a01c0e 	mov	r1, #3584	; 0xe00
   3331c:	e3a02b01 	mov	r2, #1024	; 0x400
   33320:	e59f30d8 	ldr	r3, [pc, #216]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33324:	e5831028 	str	r1, [r3, #40]	; 0x28
   33328:	e583201c 	str	r2, [r3, #28]
   3332c:	e12fff1e 	bx	lr
   33330:	e3520000 	cmp	r2, #0
   33334:	e5903000 	ldr	r3, [r0]
   33338:	0a000018 	beq	333a0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   3333c:	e3530011 	cmp	r3, #17
   33340:	13a02801 	movne	r2, #65536	; 0x10000
   33344:	13a00c0e 	movne	r0, #3584	; 0xe00
   33348:	13a01b03 	movne	r1, #3072	; 0xc00
   3334c:	1a00000d 	bne	33388 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33350:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33354:	e3a02b03 	mov	r2, #3072	; 0xc00
   33358:	e59f30a0 	ldr	r3, [pc, #160]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   3335c:	e5831028 	str	r1, [r3, #40]	; 0x28
   33360:	e583201c 	str	r2, [r3, #28]
   33364:	e12fff1e 	bx	lr
   33368:	e3520000 	cmp	r2, #0
   3336c:	e5903000 	ldr	r3, [r0]
   33370:	0a00000a 	beq	333a0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33374:	e3530011 	cmp	r3, #17
   33378:	13a02801 	movne	r2, #65536	; 0x10000
   3337c:	13a00c0e 	movne	r0, #3584	; 0xe00
   33380:	13a01c0a 	movne	r1, #2560	; 0xa00
   33384:	0a000017 	beq	333e8 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x120>
   33388:	e59f3070 	ldr	r3, [pc, #112]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   3338c:	e583201c 	str	r2, [r3, #28]
   33390:	e5830028 	str	r0, [r3, #40]	; 0x28
   33394:	e583101c 	str	r1, [r3, #28]
   33398:	e5832028 	str	r2, [r3, #40]	; 0x28
   3339c:	e12fff1e 	bx	lr
   333a0:	e3530011 	cmp	r3, #17
   333a4:	03a02c0e 	moveq	r2, #3584	; 0xe00
   333a8:	13a01801 	movne	r1, #65536	; 0x10000
   333ac:	13a02c0e 	movne	r2, #3584	; 0xe00
   333b0:	159f3048 	ldrne	r3, [pc, #72]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   333b4:	059f3044 	ldreq	r3, [pc, #68]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   333b8:	1583101c 	strne	r1, [r3, #28]
   333bc:	e5832028 	str	r2, [r3, #40]	; 0x28
   333c0:	e12fff1e 	bx	lr
   333c4:	e3a0c040 	mov	ip, #64	; 0x40
   333c8:	e59f3030 	ldr	r3, [pc, #48]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   333cc:	e3a01000 	mov	r1, #0
   333d0:	e5932008 	ldr	r2, [r3, #8]
   333d4:	e3a00013 	mov	r0, #19
   333d8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   333dc:	e5832008 	str	r2, [r3, #8]
   333e0:	e583c01c 	str	ip, [r3, #28]
   333e4:	ea0033fa 	b	403d4 <digitalWrite>
   333e8:	e3a01c0e 	mov	r1, #3584	; 0xe00
   333ec:	e3a02c0a 	mov	r2, #2560	; 0xa00
   333f0:	e59f3008 	ldr	r3, [pc, #8]	; 33400 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   333f4:	e5831028 	str	r1, [r3, #40]	; 0x28
   333f8:	e583201c 	str	r2, [r3, #28]
   333fc:	e12fff1e 	bx	lr
   33400:	20200000 	.word	0x20200000

00033404 <BusAccess::busAccessCallbackPageIn()>:
   33404:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   33408:	e3520000 	cmp	r2, #0
   3340c:	d12fff1e 	bxle	lr
   33410:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33414:	e1a06000 	mov	r6, r0
   33418:	e1a04000 	mov	r4, r0
   3341c:	e3a05000 	mov	r5, #0
   33420:	e3a08004 	mov	r8, #4
   33424:	e3a07008 	mov	r7, #8
   33428:	ea000002 	b	33438 <BusAccess::busAccessCallbackPageIn()+0x34>
   3342c:	e1520005 	cmp	r2, r5
   33430:	e284402c 	add	r4, r4, #44	; 0x2c
   33434:	da00000c 	ble	3346c <BusAccess::busAccessCallbackPageIn()+0x68>
   33438:	e5d43004 	ldrb	r3, [r4, #4]
   3343c:	e2855001 	add	r5, r5, #1
   33440:	e3530000 	cmp	r3, #0
   33444:	0afffff8 	beq	3342c <BusAccess::busAccessCallbackPageIn()+0x28>
   33448:	e594300c 	ldr	r3, [r4, #12]
   3344c:	e1a02008 	mov	r2, r8
   33450:	e5940010 	ldr	r0, [r4, #16]
   33454:	e1a01007 	mov	r1, r7
   33458:	e12fff33 	blx	r3
   3345c:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   33460:	e284402c 	add	r4, r4, #44	; 0x2c
   33464:	e1520005 	cmp	r2, r5
   33468:	cafffff2 	bgt	33438 <BusAccess::busAccessCallbackPageIn()+0x34>
   3346c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00033470 <BusAccess::busPagePinSetActive(bool)>:
   33470:	e5903000 	ldr	r3, [r0]
   33474:	e3a00008 	mov	r0, #8
   33478:	e3530011 	cmp	r3, #17
   3347c:	12211001 	eorne	r1, r1, #1
   33480:	ea0033d3 	b	403d4 <digitalWrite>

00033484 <BusAccess::rawBusControlEnable(bool)>:
   33484:	e92d4070 	push	{r4, r5, r6, lr}
   33488:	e1a04001 	mov	r4, r1
   3348c:	e1a05000 	mov	r5, r0
   33490:	e2244001 	eor	r4, r4, #1
   33494:	ebfff5ee 	bl	30c54 <BusAccess::busAccessReset()>
   33498:	e5c541c0 	strb	r4, [r5, #448]	; 0x1c0
   3349c:	e8bd8070 	pop	{r4, r5, r6, pc}

000334a0 <BusAccess::rawBusControlClearWait()>:
   334a0:	e92d4010 	push	{r4, lr}
   334a4:	e3a01000 	mov	r1, #0
   334a8:	ebfffe4b 	bl	32ddc <BusAccess::waitResetFlipFlops(bool)>
   334ac:	e8bd4010 	pop	{r4, lr}
   334b0:	eafff810 	b	314f8 <BusAccess::waitHandleReadRelease()>

000334b4 <BusAccess::rawBusControlWaitDisable()>:
   334b4:	e59f2010 	ldr	r2, [pc, #16]	; 334cc <BusAccess::rawBusControlWaitDisable()+0x18>
   334b8:	e5923000 	ldr	r3, [r2]
   334bc:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   334c0:	e3c33008 	bic	r3, r3, #8
   334c4:	e5823000 	str	r3, [r2]
   334c8:	e12fff1e 	bx	lr
   334cc:	2020c000 	.word	0x2020c000

000334d0 <BusAccess::waitGenerationDisable()>:
   334d0:	eafffff7 	b	334b4 <BusAccess::rawBusControlWaitDisable()>

000334d4 <BusAccess::rawBusControlClockEnable(bool)>:
   334d4:	e3510000 	cmp	r1, #0
   334d8:	0a000125 	beq	33974 <BusAccess::rawBusControlClockEnable(bool)+0x4a0>
   334dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   334e0:	e3a04004 	mov	r4, #4
   334e4:	e5d07228 	ldrb	r7, [r0, #552]	; 0x228
   334e8:	e24dd020 	sub	sp, sp, #32
   334ec:	e3570000 	cmp	r7, #0
   334f0:	e1a05000 	mov	r5, r0
   334f4:	e5804230 	str	r4, [r0, #560]	; 0x230
   334f8:	1a00005d 	bne	33674 <BusAccess::rawBusControlClockEnable(bool)+0x1a0>
   334fc:	e59f6530 	ldr	r6, [pc, #1328]	; 33a34 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33500:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33504:	ebffcbe1 	bl	26490 <CLogger::Get()>
   33508:	e59f3528 	ldr	r3, [pc, #1320]	; 33a38 <BusAccess::rawBusControlClockEnable(bool)+0x564>
   3350c:	e58d7004 	str	r7, [sp, #4]
   33510:	e1a02004 	mov	r2, r4
   33514:	e58d6000 	str	r6, [sp]
   33518:	e59f151c 	ldr	r1, [pc, #1308]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   3351c:	ebffcb18 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33520:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33524:	e3530000 	cmp	r3, #0
   33528:	05856224 	streq	r6, [r5, #548]	; 0x224
   3352c:	1a00012a 	bne	339dc <BusAccess::rawBusControlClockEnable(bool)+0x508>
   33530:	e59f6508 	ldr	r6, [pc, #1288]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33534:	e59f3508 	ldr	r3, [pc, #1288]	; 33a44 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33538:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   3353c:	e0033002 	and	r3, r3, r2
   33540:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33544:	e5863070 	str	r3, [r6, #112]	; 0x70
   33548:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   3354c:	e3730001 	cmn	r3, #1
   33550:	0a000114 	beq	339a8 <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33554:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   33558:	e3530000 	cmp	r3, #0
   3355c:	0a000111 	beq	339a8 <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33560:	e3a07000 	mov	r7, #0
   33564:	e3a08001 	mov	r8, #1
   33568:	e1a04007 	mov	r4, r7
   3356c:	ea000005 	b	33588 <BusAccess::rawBusControlClockEnable(bool)+0xb4>
   33570:	e2844001 	add	r4, r4, #1
   33574:	e1a00008 	mov	r0, r8
   33578:	ebffe8a3 	bl	2d80c <microsDelay>
   3357c:	e3540064 	cmp	r4, #100	; 0x64
   33580:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33584:	0a000002 	beq	33594 <BusAccess::rawBusControlClockEnable(bool)+0xc0>
   33588:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   3358c:	e3130080 	tst	r3, #128	; 0x80
   33590:	1afffff6 	bne	33570 <BusAccess::rawBusControlClockEnable(bool)+0x9c>
   33594:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33598:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   3359c:	eb00334c 	bl	402d4 <pinMode>
   335a0:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   335a4:	e59f249c 	ldr	r2, [pc, #1180]	; 33a48 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   335a8:	e59f149c 	ldr	r1, [pc, #1180]	; 33a4c <BusAccess::rawBusControlClockEnable(bool)+0x578>
   335ac:	e1500002 	cmp	r0, r2
   335b0:	e59f2498 	ldr	r2, [pc, #1176]	; 33a50 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   335b4:	e59f3498 	ldr	r3, [pc, #1176]	; 33a54 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   335b8:	91a03001 	movls	r3, r1
   335bc:	e59f6494 	ldr	r6, [pc, #1172]	; 33a58 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   335c0:	91a06002 	movls	r6, r2
   335c4:	e59f9474 	ldr	r9, [pc, #1140]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   335c8:	e59f248c 	ldr	r2, [pc, #1164]	; 33a5c <BusAccess::rawBusControlClockEnable(bool)+0x588>
   335cc:	e5893070 	str	r3, [r9, #112]	; 0x70
   335d0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   335d4:	e59fa484 	ldr	sl, [pc, #1156]	; 33a60 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   335d8:	91a0a002 	movls	sl, r2
   335dc:	ebffe88a 	bl	2d80c <microsDelay>
   335e0:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   335e4:	e1a00006 	mov	r0, r6
   335e8:	eb0030ec 	bl	3f9a0 <__aeabi_uidiv>
   335ec:	e59f3470 	ldr	r3, [pc, #1136]	; 33a64 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   335f0:	e1500003 	cmp	r0, r3
   335f4:	31a08000 	movcc	r8, r0
   335f8:	21a08003 	movcs	r8, r3
   335fc:	e1a03608 	lsl	r3, r8, #12
   33600:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33604:	e5893074 	str	r3, [r9, #116]	; 0x74
   33608:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3360c:	ebffe87e 	bl	2d80c <microsDelay>
   33610:	e3a03001 	mov	r3, #1
   33614:	e589a070 	str	sl, [r9, #112]	; 0x70
   33618:	e1a01008 	mov	r1, r8
   3361c:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33620:	e1a00006 	mov	r0, r6
   33624:	eb0030dd 	bl	3f9a0 <__aeabi_uidiv>
   33628:	e1a09000 	mov	r9, r0
   3362c:	ebffcb97 	bl	26490 <CLogger::Get()>
   33630:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   33634:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33638:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   3363c:	e58d1014 	str	r1, [sp, #20]
   33640:	e58d2010 	str	r2, [sp, #16]
   33644:	e58d3004 	str	r3, [sp, #4]
   33648:	e58d800c 	str	r8, [sp, #12]
   3364c:	e58d6008 	str	r6, [sp, #8]
   33650:	e58d9000 	str	r9, [sp]
   33654:	e58d701c 	str	r7, [sp, #28]
   33658:	e58d4018 	str	r4, [sp, #24]
   3365c:	e59f3404 	ldr	r3, [pc, #1028]	; 33a68 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   33660:	e3a02003 	mov	r2, #3
   33664:	e59f13d0 	ldr	r1, [pc, #976]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33668:	ebffcac5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3366c:	e28dd020 	add	sp, sp, #32
   33670:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33674:	e3a07000 	mov	r7, #0
   33678:	e59f63c0 	ldr	r6, [pc, #960]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   3367c:	e59f13c0 	ldr	r1, [pc, #960]	; 33a44 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33680:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33684:	e0022001 	and	r2, r2, r1
   33688:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   3368c:	e5862070 	str	r2, [r6, #112]	; 0x70
   33690:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33694:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33698:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   3369c:	e0033001 	and	r3, r3, r1
   336a0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   336a4:	e5863070 	str	r3, [r6, #112]	; 0x70
   336a8:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   336ac:	e3730001 	cmn	r3, #1
   336b0:	0a000004 	beq	336c8 <BusAccess::rawBusControlClockEnable(bool)+0x1f4>
   336b4:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   336b8:	e1530007 	cmp	r3, r7
   336bc:	11a04007 	movne	r4, r7
   336c0:	13a08001 	movne	r8, #1
   336c4:	1a000011 	bne	33710 <BusAccess::rawBusControlClockEnable(bool)+0x23c>
   336c8:	e3a03000 	mov	r3, #0
   336cc:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   336d0:	ebffcb6e 	bl	26490 <CLogger::Get()>
   336d4:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   336d8:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   336dc:	e59f1358 	ldr	r1, [pc, #856]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   336e0:	e58d2004 	str	r2, [sp, #4]
   336e4:	e58d3000 	str	r3, [sp]
   336e8:	e3a02001 	mov	r2, #1
   336ec:	e59f3378 	ldr	r3, [pc, #888]	; 33a6c <BusAccess::rawBusControlClockEnable(bool)+0x598>
   336f0:	ebffcaa3 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   336f4:	ea00003d 	b	337f0 <BusAccess::rawBusControlClockEnable(bool)+0x31c>
   336f8:	e2844001 	add	r4, r4, #1
   336fc:	e1a00008 	mov	r0, r8
   33700:	ebffe841 	bl	2d80c <microsDelay>
   33704:	e3540064 	cmp	r4, #100	; 0x64
   33708:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   3370c:	0a000002 	beq	3371c <BusAccess::rawBusControlClockEnable(bool)+0x248>
   33710:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33714:	e3130080 	tst	r3, #128	; 0x80
   33718:	1afffff6 	bne	336f8 <BusAccess::rawBusControlClockEnable(bool)+0x224>
   3371c:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33720:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33724:	eb0032ea 	bl	402d4 <pinMode>
   33728:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   3372c:	e59f2314 	ldr	r2, [pc, #788]	; 33a48 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   33730:	e59f131c 	ldr	r1, [pc, #796]	; 33a54 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   33734:	e1500002 	cmp	r0, r2
   33738:	e59f2318 	ldr	r2, [pc, #792]	; 33a58 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   3373c:	e59f3308 	ldr	r3, [pc, #776]	; 33a4c <BusAccess::rawBusControlClockEnable(bool)+0x578>
   33740:	81a03001 	movhi	r3, r1
   33744:	e59f8304 	ldr	r8, [pc, #772]	; 33a50 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   33748:	81a08002 	movhi	r8, r2
   3374c:	e59fa2ec 	ldr	sl, [pc, #748]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33750:	e59f2308 	ldr	r2, [pc, #776]	; 33a60 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   33754:	e58a3070 	str	r3, [sl, #112]	; 0x70
   33758:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3375c:	e59f92f8 	ldr	r9, [pc, #760]	; 33a5c <BusAccess::rawBusControlClockEnable(bool)+0x588>
   33760:	81a09002 	movhi	r9, r2
   33764:	ebffe828 	bl	2d80c <microsDelay>
   33768:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   3376c:	e1a00008 	mov	r0, r8
   33770:	eb00308a 	bl	3f9a0 <__aeabi_uidiv>
   33774:	e59f62e8 	ldr	r6, [pc, #744]	; 33a64 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   33778:	e1500006 	cmp	r0, r6
   3377c:	31a06000 	movcc	r6, r0
   33780:	e1a03606 	lsl	r3, r6, #12
   33784:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33788:	e58a3074 	str	r3, [sl, #116]	; 0x74
   3378c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33790:	ebffe81d 	bl	2d80c <microsDelay>
   33794:	e3a03001 	mov	r3, #1
   33798:	e58a9070 	str	r9, [sl, #112]	; 0x70
   3379c:	e1a01006 	mov	r1, r6
   337a0:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   337a4:	e1a00008 	mov	r0, r8
   337a8:	eb00307c 	bl	3f9a0 <__aeabi_uidiv>
   337ac:	e1a09000 	mov	r9, r0
   337b0:	ebffcb36 	bl	26490 <CLogger::Get()>
   337b4:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   337b8:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   337bc:	e58d600c 	str	r6, [sp, #12]
   337c0:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   337c4:	e58d1014 	str	r1, [sp, #20]
   337c8:	e58d2010 	str	r2, [sp, #16]
   337cc:	e58d3004 	str	r3, [sp, #4]
   337d0:	e58d8008 	str	r8, [sp, #8]
   337d4:	e58d9000 	str	r9, [sp]
   337d8:	e58d701c 	str	r7, [sp, #28]
   337dc:	e58d4018 	str	r4, [sp, #24]
   337e0:	e59f3280 	ldr	r3, [pc, #640]	; 33a68 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   337e4:	e3a02003 	mov	r2, #3
   337e8:	e59f124c 	ldr	r1, [pc, #588]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   337ec:	ebffca64 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   337f0:	e5d57228 	ldrb	r7, [r5, #552]	; 0x228
   337f4:	ebffcb25 	bl	26490 <CLogger::Get()>
   337f8:	e59f3234 	ldr	r3, [pc, #564]	; 33a34 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   337fc:	e3a02004 	mov	r2, #4
   33800:	e88d0088 	stm	sp, {r3, r7}
   33804:	e59f1230 	ldr	r1, [pc, #560]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33808:	e59f3228 	ldr	r3, [pc, #552]	; 33a38 <BusAccess::rawBusControlClockEnable(bool)+0x564>
   3380c:	ebffca5c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33810:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33814:	e3530000 	cmp	r3, #0
   33818:	1a00006f 	bne	339dc <BusAccess::rawBusControlClockEnable(bool)+0x508>
   3381c:	e59f3210 	ldr	r3, [pc, #528]	; 33a34 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33820:	e3570000 	cmp	r7, #0
   33824:	e5853224 	str	r3, [r5, #548]	; 0x224
   33828:	0affff40 	beq	33530 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   3382c:	e59f620c 	ldr	r6, [pc, #524]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33830:	e59f320c 	ldr	r3, [pc, #524]	; 33a44 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33834:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33838:	e0033002 	and	r3, r3, r2
   3383c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33840:	e5863070 	str	r3, [r6, #112]	; 0x70
   33844:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33848:	e3730001 	cmn	r3, #1
   3384c:	0a00006b 	beq	33a00 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   33850:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   33854:	e3530000 	cmp	r3, #0
   33858:	0a000068 	beq	33a00 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   3385c:	e3a08000 	mov	r8, #0
   33860:	e3a07001 	mov	r7, #1
   33864:	e1a04008 	mov	r4, r8
   33868:	ea000005 	b	33884 <BusAccess::rawBusControlClockEnable(bool)+0x3b0>
   3386c:	e2844001 	add	r4, r4, #1
   33870:	e1a00007 	mov	r0, r7
   33874:	ebffe7e4 	bl	2d80c <microsDelay>
   33878:	e3540064 	cmp	r4, #100	; 0x64
   3387c:	e59680a0 	ldr	r8, [r6, #160]	; 0xa0
   33880:	0a000002 	beq	33890 <BusAccess::rawBusControlClockEnable(bool)+0x3bc>
   33884:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33888:	e3130080 	tst	r3, #128	; 0x80
   3388c:	1afffff6 	bne	3386c <BusAccess::rawBusControlClockEnable(bool)+0x398>
   33890:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33894:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33898:	eb00328d 	bl	402d4 <pinMode>
   3389c:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   338a0:	e59f21a0 	ldr	r2, [pc, #416]	; 33a48 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   338a4:	e59f11a0 	ldr	r1, [pc, #416]	; 33a4c <BusAccess::rawBusControlClockEnable(bool)+0x578>
   338a8:	e1500002 	cmp	r0, r2
   338ac:	e59f219c 	ldr	r2, [pc, #412]	; 33a50 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   338b0:	e59f319c 	ldr	r3, [pc, #412]	; 33a54 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   338b4:	91a03001 	movls	r3, r1
   338b8:	e59f7198 	ldr	r7, [pc, #408]	; 33a58 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   338bc:	91a07002 	movls	r7, r2
   338c0:	e59f9178 	ldr	r9, [pc, #376]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   338c4:	e59f2190 	ldr	r2, [pc, #400]	; 33a5c <BusAccess::rawBusControlClockEnable(bool)+0x588>
   338c8:	e5893070 	str	r3, [r9, #112]	; 0x70
   338cc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   338d0:	e59fa188 	ldr	sl, [pc, #392]	; 33a60 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   338d4:	91a0a002 	movls	sl, r2
   338d8:	ebffe7cb 	bl	2d80c <microsDelay>
   338dc:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   338e0:	e1a00007 	mov	r0, r7
   338e4:	eb00302d 	bl	3f9a0 <__aeabi_uidiv>
   338e8:	e59f6174 	ldr	r6, [pc, #372]	; 33a64 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   338ec:	e1500006 	cmp	r0, r6
   338f0:	31a06000 	movcc	r6, r0
   338f4:	e1a03606 	lsl	r3, r6, #12
   338f8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   338fc:	e5893074 	str	r3, [r9, #116]	; 0x74
   33900:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33904:	ebffe7c0 	bl	2d80c <microsDelay>
   33908:	e3a03001 	mov	r3, #1
   3390c:	e589a070 	str	sl, [r9, #112]	; 0x70
   33910:	e1a01006 	mov	r1, r6
   33914:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33918:	e1a00007 	mov	r0, r7
   3391c:	eb00301f 	bl	3f9a0 <__aeabi_uidiv>
   33920:	e1a09000 	mov	r9, r0
   33924:	ebffcad9 	bl	26490 <CLogger::Get()>
   33928:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   3392c:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33930:	e58d600c 	str	r6, [sp, #12]
   33934:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   33938:	e58d1014 	str	r1, [sp, #20]
   3393c:	e58d2010 	str	r2, [sp, #16]
   33940:	e58d3004 	str	r3, [sp, #4]
   33944:	e58d7008 	str	r7, [sp, #8]
   33948:	e59f3118 	ldr	r3, [pc, #280]	; 33a68 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   3394c:	e58d9000 	str	r9, [sp]
   33950:	e58d801c 	str	r8, [sp, #28]
   33954:	e58d4018 	str	r4, [sp, #24]
   33958:	e3a02003 	mov	r2, #3
   3395c:	e59f10d8 	ldr	r1, [pc, #216]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33960:	ebffca07 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33964:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33968:	e3530000 	cmp	r3, #0
   3396c:	0afffeef 	beq	33530 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   33970:	eaffff3d 	b	3366c <BusAccess::rawBusControlClockEnable(bool)+0x198>
   33974:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   33978:	e3530000 	cmp	r3, #0
   3397c:	0a000006 	beq	3399c <BusAccess::rawBusControlClockEnable(bool)+0x4c8>
   33980:	e59f20b8 	ldr	r2, [pc, #184]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33984:	e59f30b8 	ldr	r3, [pc, #184]	; 33a44 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33988:	e592c070 	ldr	ip, [r2, #112]	; 0x70
   3398c:	e003300c 	and	r3, r3, ip
   33990:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33994:	e5823070 	str	r3, [r2, #112]	; 0x70
   33998:	e5c01228 	strb	r1, [r0, #552]	; 0x228
   3399c:	e3a01001 	mov	r1, #1
   339a0:	e3a00004 	mov	r0, #4
   339a4:	ea00324a 	b	402d4 <pinMode>
   339a8:	e3a03000 	mov	r3, #0
   339ac:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   339b0:	ebffcab6 	bl	26490 <CLogger::Get()>
   339b4:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   339b8:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   339bc:	e59f1078 	ldr	r1, [pc, #120]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   339c0:	e58d2004 	str	r2, [sp, #4]
   339c4:	e58d3000 	str	r3, [sp]
   339c8:	e3a02001 	mov	r2, #1
   339cc:	e59f3098 	ldr	r3, [pc, #152]	; 33a6c <BusAccess::rawBusControlClockEnable(bool)+0x598>
   339d0:	ebffc9eb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   339d4:	e28dd020 	add	sp, sp, #32
   339d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   339dc:	e3a01000 	mov	r1, #0
   339e0:	e59f2058 	ldr	r2, [pc, #88]	; 33a40 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   339e4:	e59f3058 	ldr	r3, [pc, #88]	; 33a44 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   339e8:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   339ec:	e0033000 	and	r3, r3, r0
   339f0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   339f4:	e5823070 	str	r3, [r2, #112]	; 0x70
   339f8:	e5c51228 	strb	r1, [r5, #552]	; 0x228
   339fc:	eaffff86 	b	3381c <BusAccess::rawBusControlClockEnable(bool)+0x348>
   33a00:	e3a03000 	mov	r3, #0
   33a04:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33a08:	ebffcaa0 	bl	26490 <CLogger::Get()>
   33a0c:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   33a10:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33a14:	e59f1020 	ldr	r1, [pc, #32]	; 33a3c <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33a18:	e58d2004 	str	r2, [sp, #4]
   33a1c:	e58d3000 	str	r3, [sp]
   33a20:	e3a02001 	mov	r2, #1
   33a24:	e59f3040 	ldr	r3, [pc, #64]	; 33a6c <BusAccess::rawBusControlClockEnable(bool)+0x598>
   33a28:	ebffc9d5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33a2c:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33a30:	eaffffcc 	b	33968 <BusAccess::rawBusControlClockEnable(bool)+0x494>
   33a34:	000f4240 	.word	0x000f4240
   33a38:	000480ac 	.word	0x000480ac
   33a3c:	0004804c 	.word	0x0004804c
   33a40:	20101000 	.word	0x20101000
   33a44:	00000f0f 	.word	0x00000f0f
   33a48:	0003d08f 	.word	0x0003d08f
   33a4c:	5a000001 	.word	0x5a000001
   33a50:	0124f800 	.word	0x0124f800
   33a54:	5a000006 	.word	0x5a000006
   33a58:	1dcd6500 	.word	0x1dcd6500
   33a5c:	5a000011 	.word	0x5a000011
   33a60:	5a000016 	.word	0x5a000016
   33a64:	00000fff 	.word	0x00000fff
   33a68:	00048058 	.word	0x00048058
   33a6c:	0004802c 	.word	0x0004802c

00033a70 <BusAccess::rawBusControlTakeBus()>:
   33a70:	e92d4010 	push	{r4, lr}
   33a74:	ebfffd40 	bl	32f7c <BusAccess::controlRequestAndTake()>
   33a78:	e16f0f10 	clz	r0, r0
   33a7c:	e1a002a0 	lsr	r0, r0, #5
   33a80:	e8bd8010 	pop	{r4, pc}

00033a84 <BusAccess::rawBusControlReleaseBus()>:
   33a84:	eafffc16 	b	32ae4 <BusAccess::controlRelease()>

00033a88 <BusAccess::rawBusControlSetAddress(unsigned long)>:
   33a88:	eafff9cc 	b	321c0 <BusAccess::addrSet(unsigned int)>

00033a8c <BusAccess::rawBusControlSetData(unsigned long)>:
   33a8c:	e1a01a01 	lsl	r1, r1, #20
   33a90:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   33a94:	e1e03001 	mvn	r3, r1
   33a98:	e92d4070 	push	{r4, r5, r6, lr}
   33a9c:	e3a05d39 	mov	r5, #3648	; 0xe40
   33aa0:	e3a0ec02 	mov	lr, #512	; 0x200
   33aa4:	e59f4064 	ldr	r4, [pc, #100]	; 33b10 <BusAccess::rawBusControlSetData(unsigned long)+0x84>
   33aa8:	e59f2064 	ldr	r2, [pc, #100]	; 33b14 <BusAccess::rawBusControlSetData(unsigned long)+0x88>
   33aac:	e594c008 	ldr	ip, [r4, #8]
   33ab0:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   33ab4:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   33ab8:	e18c2002 	orr	r2, ip, r2
   33abc:	e5842008 	str	r2, [r4, #8]
   33ac0:	e584101c 	str	r1, [r4, #28]
   33ac4:	e5843028 	str	r3, [r4, #40]	; 0x28
   33ac8:	e5845028 	str	r5, [r4, #40]	; 0x28
   33acc:	e584e01c 	str	lr, [r4, #28]
   33ad0:	e5903000 	ldr	r3, [r0]
   33ad4:	e3530011 	cmp	r3, #17
   33ad8:	0a000007 	beq	33afc <BusAccess::rawBusControlSetData(unsigned long)+0x70>
   33adc:	e3a05801 	mov	r5, #65536	; 0x10000
   33ae0:	e3a0000a 	mov	r0, #10
   33ae4:	e5845028 	str	r5, [r4, #40]	; 0x28
   33ae8:	eb003266 	bl	40488 <lowlev_cycleDelay>
   33aec:	e3a03c0e 	mov	r3, #3584	; 0xe00
   33af0:	e584501c 	str	r5, [r4, #28]
   33af4:	e5843028 	str	r3, [r4, #40]	; 0x28
   33af8:	e8bd8070 	pop	{r4, r5, r6, pc}
   33afc:	e3a0000a 	mov	r0, #10
   33b00:	eb003260 	bl	40488 <lowlev_cycleDelay>
   33b04:	e3a03c0e 	mov	r3, #3584	; 0xe00
   33b08:	e5843028 	str	r3, [r4, #40]	; 0x28
   33b0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   33b10:	20200000 	.word	0x20200000
   33b14:	00249249 	.word	0x00249249

00033b18 <BusAccess::rawBusControlReadRaw()>:
   33b18:	e59f3004 	ldr	r3, [pc, #4]	; 33b24 <BusAccess::rawBusControlReadRaw()+0xc>
   33b1c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   33b20:	e12fff1e 	bx	lr
   33b24:	20200000 	.word	0x20200000

00033b28 <BusAccess::rawBusControlReadCtrl()>:
   33b28:	eafff83f 	b	31c2c <BusAccess::controlBusRead()>

00033b2c <BusAccess::rawBusControlReadAll(unsigned long&, unsigned long&, unsigned long&)>:
   33b2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33b30:	e1a06001 	mov	r6, r1
   33b34:	e1a05002 	mov	r5, r2
   33b38:	e1a07003 	mov	r7, r3
   33b3c:	e1a04000 	mov	r4, r0
   33b40:	ebfff839 	bl	31c2c <BusAccess::controlBusRead()>
   33b44:	e1a02007 	mov	r2, r7
   33b48:	e5860000 	str	r0, [r6]
   33b4c:	e1a01005 	mov	r1, r5
   33b50:	e1a00004 	mov	r0, r4
   33b54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   33b58:	eafff880 	b	31d60 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>

00033b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>:
   33b5c:	e6ef0071 	uxtb	r0, r1
   33b60:	e1a01002 	mov	r1, r2
   33b64:	ea00321a 	b	403d4 <digitalWrite>

00033b68 <BusAccess::rawBusControlGetPin(unsigned long)>:
   33b68:	e92d4010 	push	{r4, lr}
   33b6c:	e6ef0071 	uxtb	r0, r1
   33b70:	eb00322d 	bl	4042c <digitalRead>
   33b74:	e2900000 	adds	r0, r0, #0
   33b78:	13a00001 	movne	r0, #1
   33b7c:	e8bd8010 	pop	{r4, pc}

00033b80 <BusAccess::rawBusControlReadPIB()>:
   33b80:	e59f3018 	ldr	r3, [pc, #24]	; 33ba0 <BusAccess::rawBusControlReadPIB()+0x20>
   33b84:	e5932008 	ldr	r2, [r3, #8]
   33b88:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33b8c:	e5832008 	str	r2, [r3, #8]
   33b90:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   33b94:	e1a00a20 	lsr	r0, r0, #20
   33b98:	e6ef0070 	uxtb	r0, r0
   33b9c:	e12fff1e 	bx	lr
   33ba0:	20200000 	.word	0x20200000

00033ba4 <BusAccess::rawBusControlWritePIB(unsigned long)>:
   33ba4:	e1a01a01 	lsl	r1, r1, #20
   33ba8:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   33bac:	e1e02001 	mvn	r2, r1
   33bb0:	e59f3020 	ldr	r3, [pc, #32]	; 33bd8 <BusAccess::rawBusControlWritePIB(unsigned long)+0x34>
   33bb4:	e59f0020 	ldr	r0, [pc, #32]	; 33bdc <BusAccess::rawBusControlWritePIB(unsigned long)+0x38>
   33bb8:	e593c008 	ldr	ip, [r3, #8]
   33bbc:	e20226ff 	and	r2, r2, #267386880	; 0xff00000
   33bc0:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   33bc4:	e18c0000 	orr	r0, ip, r0
   33bc8:	e5830008 	str	r0, [r3, #8]
   33bcc:	e583101c 	str	r1, [r3, #28]
   33bd0:	e5832028 	str	r2, [r3, #40]	; 0x28
   33bd4:	e12fff1e 	bx	lr
   33bd8:	20200000 	.word	0x20200000
   33bdc:	00249249 	.word	0x00249249

00033be0 <BusAccess::rawBusControlMuxSet(unsigned long)>:
   33be0:	e5903000 	ldr	r3, [r0]
   33be4:	e3530011 	cmp	r3, #17
   33be8:	0a000008 	beq	33c10 <BusAccess::rawBusControlMuxSet(unsigned long)+0x30>
   33bec:	e3a02801 	mov	r2, #65536	; 0x10000
   33bf0:	e3a00c0e 	mov	r0, #3584	; 0xe00
   33bf4:	e59f302c 	ldr	r3, [pc, #44]	; 33c28 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   33bf8:	e1a01481 	lsl	r1, r1, #9
   33bfc:	e583201c 	str	r2, [r3, #28]
   33c00:	e5830028 	str	r0, [r3, #40]	; 0x28
   33c04:	e583101c 	str	r1, [r3, #28]
   33c08:	e5832028 	str	r2, [r3, #40]	; 0x28
   33c0c:	e12fff1e 	bx	lr
   33c10:	e3a02c0e 	mov	r2, #3584	; 0xe00
   33c14:	e59f300c 	ldr	r3, [pc, #12]	; 33c28 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   33c18:	e1a01481 	lsl	r1, r1, #9
   33c1c:	e5832028 	str	r2, [r3, #40]	; 0x28
   33c20:	e583101c 	str	r1, [r3, #28]
   33c24:	e12fff1e 	bx	lr
   33c28:	20200000 	.word	0x20200000

00033c2c <BusAccess::rawBusControlMuxClear()>:
   33c2c:	e5903000 	ldr	r3, [r0]
   33c30:	e3530011 	cmp	r3, #17
   33c34:	03a02c0e 	moveq	r2, #3584	; 0xe00
   33c38:	13a01801 	movne	r1, #65536	; 0x10000
   33c3c:	13a02c0e 	movne	r2, #3584	; 0xe00
   33c40:	159f300c 	ldrne	r3, [pc, #12]	; 33c54 <BusAccess::rawBusControlMuxClear()+0x28>
   33c44:	059f3008 	ldreq	r3, [pc, #8]	; 33c54 <BusAccess::rawBusControlMuxClear()+0x28>
   33c48:	1583101c 	strne	r1, [r3, #28]
   33c4c:	e5832028 	str	r2, [r3, #40]	; 0x28
   33c50:	e12fff1e 	bx	lr
   33c54:	20200000 	.word	0x20200000

00033c58 <BusAccess::formatCtrlBus(unsigned long, char*, int)>:
   33c58:	e3530013 	cmp	r3, #19
   33c5c:	d12fff1e 	bxle	lr
   33c60:	e1a0c001 	mov	ip, r1
   33c64:	e31c0004 	tst	ip, #4
   33c68:	e1a01003 	mov	r1, r3
   33c6c:	13a0304d 	movne	r3, #77	; 0x4d
   33c70:	03a0302e 	moveq	r3, #46	; 0x2e
   33c74:	e31c0008 	tst	ip, #8
   33c78:	e92d4030 	push	{r4, r5, lr}
   33c7c:	13a05049 	movne	r5, #73	; 0x49
   33c80:	03a0502e 	moveq	r5, #46	; 0x2e
   33c84:	e31c0001 	tst	ip, #1
   33c88:	13a04052 	movne	r4, #82	; 0x52
   33c8c:	03a0402e 	moveq	r4, #46	; 0x2e
   33c90:	e31c0002 	tst	ip, #2
   33c94:	13a0e057 	movne	lr, #87	; 0x57
   33c98:	03a0e02e 	moveq	lr, #46	; 0x2e
   33c9c:	e31c0010 	tst	ip, #16
   33ca0:	e1a00002 	mov	r0, r2
   33ca4:	13a02031 	movne	r2, #49	; 0x31
   33ca8:	03a0202e 	moveq	r2, #46	; 0x2e
   33cac:	e24dd014 	sub	sp, sp, #20
   33cb0:	e58d200c 	str	r2, [sp, #12]
   33cb4:	e58d5000 	str	r5, [sp]
   33cb8:	e98d4010 	stmib	sp, {r4, lr}
   33cbc:	e59f2008 	ldr	r2, [pc, #8]	; 33ccc <BusAccess::formatCtrlBus(unsigned long, char*, int)+0x74>
   33cc0:	ebffe77b 	bl	2dab4 <snprintf>
   33cc4:	e28dd014 	add	sp, sp, #20
   33cc8:	e8bd8030 	pop	{r4, r5, pc}
   33ccc:	00048104 	.word	0x00048104

00033cd0 <TargetProgrammer::TargetProgrammer()>:
   33cd0:	e3a02000 	mov	r2, #0
   33cd4:	e2803601 	add	r3, r0, #1048576	; 0x100000
   33cd8:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   33cdc:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   33ce0:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   33ce4:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   33ce8:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   33cec:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   33cf0:	e58320ac 	str	r2, [r3, #172]	; 0xac
   33cf4:	e58320a8 	str	r2, [r3, #168]	; 0xa8
   33cf8:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   33cfc:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   33d00:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   33d04:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   33d08:	e58320c8 	str	r2, [r3, #200]	; 0xc8
   33d0c:	e58320ec 	str	r2, [r3, #236]	; 0xec
   33d10:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   33d14:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   33d18:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   33d1c:	e58320dc 	str	r2, [r3, #220]	; 0xdc
   33d20:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   33d24:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   33d28:	e12fff1e 	bx	lr

00033d2c <TargetProgrammer::clear()>:
   33d2c:	e3a03000 	mov	r3, #0
   33d30:	e2802601 	add	r2, r0, #1048576	; 0x100000
   33d34:	e5c230a4 	strb	r3, [r2, #164]	; 0xa4
   33d38:	e58230a0 	str	r3, [r2, #160]	; 0xa0
   33d3c:	e1a01003 	mov	r1, r3
   33d40:	e2823004 	add	r3, r2, #4
   33d44:	e28220a4 	add	r2, r2, #164	; 0xa4
   33d48:	e4831008 	str	r1, [r3], #8
   33d4c:	e1530002 	cmp	r3, r2
   33d50:	1afffffc 	bne	33d48 <TargetProgrammer::clear()+0x1c>
   33d54:	e3a01000 	mov	r1, #0
   33d58:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   33d5c:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   33d60:	e2403001 	sub	r3, r0, #1
   33d64:	e5e31001 	strb	r1, [r3, #1]!
   33d68:	e1520003 	cmp	r2, r3
   33d6c:	1afffffc 	bne	33d64 <TargetProgrammer::clear()+0x38>
   33d70:	e12fff1e 	bx	lr

00033d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   33d74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33d78:	e2807601 	add	r7, r0, #1048576	; 0x100000
   33d7c:	e59760a0 	ldr	r6, [r7, #160]	; 0xa0
   33d80:	e3560000 	cmp	r6, #0
   33d84:	da000012 	ble	33dd4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x60>
   33d88:	e5975004 	ldr	r5, [r7, #4]
   33d8c:	e597c000 	ldr	ip, [r7]
   33d90:	e085c00c 	add	ip, r5, ip
   33d94:	e151000c 	cmp	r1, ip
   33d98:	13a04000 	movne	r4, #0
   33d9c:	1287c008 	addne	ip, r7, #8
   33da0:	1a000006 	bne	33dc0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x4c>
   33da4:	ea00001b 	b	33e18 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa4>
   33da8:	e59c5004 	ldr	r5, [ip, #4]
   33dac:	e59ce000 	ldr	lr, [ip]
   33db0:	e28cc008 	add	ip, ip, #8
   33db4:	e085e00e 	add	lr, r5, lr
   33db8:	e15e0001 	cmp	lr, r1
   33dbc:	0a000016 	beq	33e1c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   33dc0:	e2844001 	add	r4, r4, #1
   33dc4:	e1540006 	cmp	r4, r6
   33dc8:	1afffff6 	bne	33da8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x34>
   33dcc:	e3540013 	cmp	r4, #19
   33dd0:	ca000017 	bgt	33e34 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc0>
   33dd4:	e080c186 	add	ip, r0, r6, lsl #3
   33dd8:	e28cc601 	add	ip, ip, #1048576	; 0x100000
   33ddc:	e2866001 	add	r6, r6, #1
   33de0:	e88c000a 	stm	ip, {r1, r3}
   33de4:	e58760a0 	str	r6, [r7, #160]	; 0xa0
   33de8:	e3530000 	cmp	r3, #0
   33dec:	159fc058 	ldrne	ip, [pc, #88]	; 33e4c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xd8>
   33df0:	10813003 	addne	r3, r1, r3
   33df4:	0a00000d 	beq	33e30 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xbc>
   33df8:	e151000c 	cmp	r1, ip
   33dfc:	95d2e000 	ldrbls	lr, [r2]
   33e00:	e2822001 	add	r2, r2, #1
   33e04:	97c0e001 	strbls	lr, [r0, r1]
   33e08:	e2811001 	add	r1, r1, #1
   33e0c:	e1510003 	cmp	r1, r3
   33e10:	1afffff8 	bne	33df8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x84>
   33e14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33e18:	e3a04000 	mov	r4, #0
   33e1c:	e2844802 	add	r4, r4, #131072	; 0x20000
   33e20:	e0804184 	add	r4, r0, r4, lsl #3
   33e24:	e0835005 	add	r5, r3, r5
   33e28:	e5845004 	str	r5, [r4, #4]
   33e2c:	eaffffed 	b	33de8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x74>
   33e30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33e34:	ebffc995 	bl	26490 <CLogger::Get()>
   33e38:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   33e3c:	e59f300c 	ldr	r3, [pc, #12]	; 33e50 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xdc>
   33e40:	e3a02004 	mov	r2, #4
   33e44:	e59f1008 	ldr	r1, [pc, #8]	; 33e54 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe0>
   33e48:	eaffc8cd 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33e4c:	000fffff 	.word	0x000fffff
   33e50:	00048124 	.word	0x00048124
   33e54:	00048110 	.word	0x00048110

00033e58 <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   33e58:	e253c000 	subs	ip, r3, #0
   33e5c:	012fff1e 	bxeq	lr
   33e60:	e1a03002 	mov	r3, r2
   33e64:	e1a02001 	mov	r2, r1
   33e68:	e1a01000 	mov	r1, r0
   33e6c:	e1a0000c 	mov	r0, ip
   33e70:	eaffffbf 	b	33d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

00033e74 <TargetProgrammer::numMemoryBlocks()>:
   33e74:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33e78:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
   33e7c:	e12fff1e 	bx	lr

00033e80 <TargetProgrammer::getMemoryBlock(int)>:
   33e80:	e2811802 	add	r1, r1, #131072	; 0x20000
   33e84:	e0800181 	add	r0, r0, r1, lsl #3
   33e88:	e12fff1e 	bx	lr

00033e8c <TargetProgrammer::getMemoryImagePtr()>:
   33e8c:	e12fff1e 	bx	lr

00033e90 <TargetProgrammer::getMemoryImageSize()>:
   33e90:	e3a00601 	mov	r0, #1048576	; 0x100000
   33e94:	e12fff1e 	bx	lr

00033e98 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   33e98:	e92d4030 	push	{r4, r5, lr}
   33e9c:	e2805601 	add	r5, r0, #1048576	; 0x100000
   33ea0:	e24dd00c 	sub	sp, sp, #12
   33ea4:	e3a02048 	mov	r2, #72	; 0x48
   33ea8:	e28500a8 	add	r0, r5, #168	; 0xa8
   33eac:	e1a04001 	mov	r4, r1
   33eb0:	ebffd8c6 	bl	2a1d0 <memcpy>
   33eb4:	e3a03001 	mov	r3, #1
   33eb8:	e5c530a4 	strb	r3, [r5, #164]	; 0xa4
   33ebc:	ebffc973 	bl	26490 <CLogger::Get()>
   33ec0:	e5942004 	ldr	r2, [r4, #4]
   33ec4:	e5943000 	ldr	r3, [r4]
   33ec8:	e59f1018 	ldr	r1, [pc, #24]	; 33ee8 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x50>
   33ecc:	e58d2004 	str	r2, [sp, #4]
   33ed0:	e58d3000 	str	r3, [sp]
   33ed4:	e3a02004 	mov	r2, #4
   33ed8:	e59f300c 	ldr	r3, [pc, #12]	; 33eec <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x54>
   33edc:	ebffc8a8 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33ee0:	e28dd00c 	add	sp, sp, #12
   33ee4:	e8bd8030 	pop	{r4, r5, pc}
   33ee8:	00048110 	.word	0x00048110
   33eec:	00048144 	.word	0x00048144

00033ef0 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   33ef0:	e2513000 	subs	r3, r1, #0
   33ef4:	012fff1e 	bxeq	lr
   33ef8:	e1a01000 	mov	r1, r0
   33efc:	e1a00003 	mov	r0, r3
   33f00:	eaffffe4 	b	33e98 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

00033f04 <TargetProgrammer::areRegistersValid()>:
   33f04:	e2800601 	add	r0, r0, #1048576	; 0x100000
   33f08:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   33f0c:	e12fff1e 	bx	lr

00033f10 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   33f10:	e92d4010 	push	{r4, lr}
   33f14:	e1a04001 	mov	r4, r1
   33f18:	e2801601 	add	r1, r0, #1048576	; 0x100000
   33f1c:	e24dd008 	sub	sp, sp, #8
   33f20:	e28110a8 	add	r1, r1, #168	; 0xa8
   33f24:	e3a02048 	mov	r2, #72	; 0x48
   33f28:	e1a00004 	mov	r0, r4
   33f2c:	ebffd8a7 	bl	2a1d0 <memcpy>
   33f30:	ebffc956 	bl	26490 <CLogger::Get()>
   33f34:	e5942000 	ldr	r2, [r4]
   33f38:	e59f3014 	ldr	r3, [pc, #20]	; 33f54 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x44>
   33f3c:	e58d2000 	str	r2, [sp]
   33f40:	e59f1010 	ldr	r1, [pc, #16]	; 33f58 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x48>
   33f44:	e3a02004 	mov	r2, #4
   33f48:	ebffc88d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33f4c:	e28dd008 	add	sp, sp, #8
   33f50:	e8bd8010 	pop	{r4, pc}
   33f54:	00048164 	.word	0x00048164
   33f58:	00048110 	.word	0x00048110

00033f5c <HwManager::HwManager(CommandHandler&, BusAccess&)>:
   33f5c:	e3a0c000 	mov	ip, #0
   33f60:	e92d4010 	push	{r4, lr}
   33f64:	e3e0e000 	mvn	lr, #0
   33f68:	e59f4024 	ldr	r4, [pc, #36]	; 33f94 <HwManager::HwManager(CommandHandler&, BusAccess&)+0x38>
   33f6c:	e8800006 	stm	r0, {r1, r2}
   33f70:	e580e034 	str	lr, [r0, #52]	; 0x34
   33f74:	e5840000 	str	r0, [r4]
   33f78:	e580e038 	str	lr, [r0, #56]	; 0x38
   33f7c:	e5c0c03c 	strb	ip, [r0, #60]	; 0x3c
   33f80:	e5c0c03e 	strb	ip, [r0, #62]	; 0x3e
   33f84:	e5c0c03f 	strb	ip, [r0, #63]	; 0x3f
   33f88:	e5c0c03d 	strb	ip, [r0, #61]	; 0x3d
   33f8c:	e580c030 	str	ip, [r0, #48]	; 0x30
   33f90:	e8bd8010 	pop	{r4, pc}
   33f94:	000504a0 	.word	0x000504a0

00033f98 <HwManager::init()>:
   33f98:	e92d4010 	push	{r4, lr}
   33f9c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   33fa0:	e24dd030 	sub	sp, sp, #48	; 0x30
   33fa4:	e3530000 	cmp	r3, #0
   33fa8:	e1a04000 	mov	r4, r0
   33fac:	ba00001a 	blt	3401c <HwManager::init()+0x84>
   33fb0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   33fb4:	e3530000 	cmp	r3, #0
   33fb8:	ba000006 	blt	33fd8 <HwManager::init()+0x40>
   33fbc:	e3a00044 	mov	r0, #68	; 0x44
   33fc0:	ebffda5b 	bl	2a934 <operator new(unsigned int)>
   33fc4:	e1a01004 	mov	r1, r4
   33fc8:	e5942004 	ldr	r2, [r4, #4]
   33fcc:	e28dd030 	add	sp, sp, #48	; 0x30
   33fd0:	e8bd4010 	pop	{r4, lr}
   33fd4:	ea00050e 	b	35414 <HwRAMROM::HwRAMROM(HwManager&, BusAccess&)>
   33fd8:	e3a03000 	mov	r3, #0
   33fdc:	e5940000 	ldr	r0, [r4]
   33fe0:	e1a01004 	mov	r1, r4
   33fe4:	e58d3004 	str	r3, [sp, #4]
   33fe8:	e58d3000 	str	r3, [sp]
   33fec:	e3a02001 	mov	r2, #1
   33ff0:	e59f3078 	ldr	r3, [pc, #120]	; 34070 <HwManager::init()+0xd8>
   33ff4:	ebffea27 	bl	2e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   33ff8:	e5840038 	str	r0, [r4, #56]	; 0x38
   33ffc:	ebffc923 	bl	26490 <CLogger::Get()>
   34000:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   34004:	e59f3068 	ldr	r3, [pc, #104]	; 34074 <HwManager::init()+0xdc>
   34008:	e58d2000 	str	r2, [sp]
   3400c:	e59f1064 	ldr	r1, [pc, #100]	; 34078 <HwManager::init()+0xe0>
   34010:	e3a02004 	mov	r2, #4
   34014:	ebffc85a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34018:	eaffffe7 	b	33fbc <HwManager::init()+0x24>
   3401c:	e3a03000 	mov	r3, #0
   34020:	e3a02004 	mov	r2, #4
   34024:	e5900004 	ldr	r0, [r0, #4]
   34028:	e3a01001 	mov	r1, #1
   3402c:	e58d3028 	str	r3, [sp, #40]	; 0x28
   34030:	e58d3020 	str	r3, [sp, #32]
   34034:	e58d301c 	str	r3, [sp, #28]
   34038:	e58d3018 	str	r3, [sp, #24]
   3403c:	e58d3014 	str	r3, [sp, #20]
   34040:	e58d3010 	str	r3, [sp, #16]
   34044:	e58d300c 	str	r3, [sp, #12]
   34048:	e58d3008 	str	r3, [sp, #8]
   3404c:	e58d3004 	str	r3, [sp, #4]
   34050:	e58d3000 	str	r3, [sp]
   34054:	e58d2024 	str	r2, [sp, #36]	; 0x24
   34058:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   3405c:	e59f3018 	ldr	r3, [pc, #24]	; 3407c <HwManager::init()+0xe4>
   34060:	e59f2018 	ldr	r2, [pc, #24]	; 34080 <HwManager::init()+0xe8>
   34064:	ebfffa68 	bl	32a0c <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   34068:	e5840034 	str	r0, [r4, #52]	; 0x34
   3406c:	eaffffcf 	b	33fb0 <HwManager::init()+0x18>
   34070:	00034c80 	.word	0x00034c80
   34074:	00048188 	.word	0x00048188
   34078:	0004817c 	.word	0x0004817c
   3407c:	00034794 	.word	0x00034794
   34080:	0003485c 	.word	0x0003485c

00034084 <HwManager::service()>:
   34084:	e12fff1e 	bx	lr

00034088 <HwManager::addHardwareElementStatic(HwBase*)>:
   34088:	e59f301c 	ldr	r3, [pc, #28]	; 340ac <HwManager::addHardwareElementStatic(HwBase*)+0x24>
   3408c:	e5932000 	ldr	r2, [r3]
   34090:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   34094:	e3530009 	cmp	r3, #9
   34098:	d2831001 	addle	r1, r3, #1
   3409c:	d2833002 	addle	r3, r3, #2
   340a0:	d5821030 	strle	r1, [r2, #48]	; 0x30
   340a4:	d7820103 	strle	r0, [r2, r3, lsl #2]
   340a8:	e12fff1e 	bx	lr
   340ac:	000504a0 	.word	0x000504a0

000340b0 <HwManager::setMemoryEmulationMode(bool)>:
   340b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   340b4:	e1a08001 	mov	r8, r1
   340b8:	e24dd008 	sub	sp, sp, #8
   340bc:	e1a06000 	mov	r6, r0
   340c0:	ebffc8f2 	bl	26490 <CLogger::Get()>
   340c4:	e59f20b0 	ldr	r2, [pc, #176]	; 3417c <HwManager::setMemoryEmulationMode(bool)+0xcc>
   340c8:	e3580000 	cmp	r8, #0
   340cc:	e59f10ac 	ldr	r1, [pc, #172]	; 34180 <HwManager::setMemoryEmulationMode(bool)+0xd0>
   340d0:	01a01002 	moveq	r1, r2
   340d4:	e59f30a8 	ldr	r3, [pc, #168]	; 34184 <HwManager::setMemoryEmulationMode(bool)+0xd4>
   340d8:	e58d1000 	str	r1, [sp]
   340dc:	e3a02004 	mov	r2, #4
   340e0:	e59f10a0 	ldr	r1, [pc, #160]	; 34188 <HwManager::setMemoryEmulationMode(bool)+0xd8>
   340e4:	ebffc826 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   340e8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   340ec:	e3530000 	cmp	r3, #0
   340f0:	da00001c 	ble	34168 <HwManager::setMemoryEmulationMode(bool)+0xb8>
   340f4:	e3a05000 	mov	r5, #0
   340f8:	e59f708c 	ldr	r7, [pc, #140]	; 3418c <HwManager::setMemoryEmulationMode(bool)+0xdc>
   340fc:	e2864008 	add	r4, r6, #8
   34100:	ea000004 	b	34118 <HwManager::setMemoryEmulationMode(bool)+0x68>
   34104:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34108:	e2855001 	add	r5, r5, #1
   3410c:	e1530005 	cmp	r3, r5
   34110:	e2844004 	add	r4, r4, #4
   34114:	da000013 	ble	34168 <HwManager::setMemoryEmulationMode(bool)+0xb8>
   34118:	e5940000 	ldr	r0, [r4]
   3411c:	e3500000 	cmp	r0, #0
   34120:	0afffff8 	beq	34108 <HwManager::setMemoryEmulationMode(bool)+0x58>
   34124:	e5903000 	ldr	r3, [r0]
   34128:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3412c:	e1530007 	cmp	r3, r7
   34130:	1a00000f 	bne	34174 <HwManager::setMemoryEmulationMode(bool)+0xc4>
   34134:	e5d0000c 	ldrb	r0, [r0, #12]
   34138:	e3500000 	cmp	r0, #0
   3413c:	0afffff0 	beq	34104 <HwManager::setMemoryEmulationMode(bool)+0x54>
   34140:	e5940000 	ldr	r0, [r4]
   34144:	e1a01008 	mov	r1, r8
   34148:	e5903000 	ldr	r3, [r0]
   3414c:	e2855001 	add	r5, r5, #1
   34150:	e5933008 	ldr	r3, [r3, #8]
   34154:	e12fff33 	blx	r3
   34158:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3415c:	e2844004 	add	r4, r4, #4
   34160:	e1530005 	cmp	r3, r5
   34164:	caffffeb 	bgt	34118 <HwManager::setMemoryEmulationMode(bool)+0x68>
   34168:	e5c6803c 	strb	r8, [r6, #60]	; 0x3c
   3416c:	e28dd008 	add	sp, sp, #8
   34170:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34174:	e12fff33 	blx	r3
   34178:	eaffffee 	b	34138 <HwManager::setMemoryEmulationMode(bool)+0x88>
   3417c:	000481a4 	.word	0x000481a4
   34180:	000481a0 	.word	0x000481a0
   34184:	000481a8 	.word	0x000481a8
   34188:	0004817c 	.word	0x0004817c
   3418c:	000350ec 	.word	0x000350ec

00034190 <HwManager::pageOutForInjection(bool)>:
   34190:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34194:	e3530000 	cmp	r3, #0
   34198:	d12fff1e 	bxle	lr
   3419c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   341a0:	e1a08001 	mov	r8, r1
   341a4:	e1a06000 	mov	r6, r0
   341a8:	e3a05000 	mov	r5, #0
   341ac:	e59f7074 	ldr	r7, [pc, #116]	; 34228 <HwManager::pageOutForInjection(bool)+0x98>
   341b0:	e2804008 	add	r4, r0, #8
   341b4:	ea000004 	b	341cc <HwManager::pageOutForInjection(bool)+0x3c>
   341b8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   341bc:	e2855001 	add	r5, r5, #1
   341c0:	e1530005 	cmp	r3, r5
   341c4:	e2844004 	add	r4, r4, #4
   341c8:	da000013 	ble	3421c <HwManager::pageOutForInjection(bool)+0x8c>
   341cc:	e5940000 	ldr	r0, [r4]
   341d0:	e3500000 	cmp	r0, #0
   341d4:	0afffff8 	beq	341bc <HwManager::pageOutForInjection(bool)+0x2c>
   341d8:	e5903000 	ldr	r3, [r0]
   341dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   341e0:	e1530007 	cmp	r3, r7
   341e4:	1a00000d 	bne	34220 <HwManager::pageOutForInjection(bool)+0x90>
   341e8:	e5d0000c 	ldrb	r0, [r0, #12]
   341ec:	e3500000 	cmp	r0, #0
   341f0:	0afffff0 	beq	341b8 <HwManager::pageOutForInjection(bool)+0x28>
   341f4:	e5940000 	ldr	r0, [r4]
   341f8:	e1a01008 	mov	r1, r8
   341fc:	e5903000 	ldr	r3, [r0]
   34200:	e2855001 	add	r5, r5, #1
   34204:	e5933010 	ldr	r3, [r3, #16]
   34208:	e12fff33 	blx	r3
   3420c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34210:	e2844004 	add	r4, r4, #4
   34214:	e1530005 	cmp	r3, r5
   34218:	caffffeb 	bgt	341cc <HwManager::pageOutForInjection(bool)+0x3c>
   3421c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34220:	e12fff33 	blx	r3
   34224:	eafffff0 	b	341ec <HwManager::pageOutForInjection(bool)+0x5c>
   34228:	000350ec 	.word	0x000350ec

0003422c <HwManager::setMemoryPagingEnable(bool)>:
   3422c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34230:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34234:	e3530000 	cmp	r3, #0
   34238:	e1a08000 	mov	r8, r0
   3423c:	e1a07001 	mov	r7, r1
   34240:	da00001c 	ble	342b8 <HwManager::setMemoryPagingEnable(bool)+0x8c>
   34244:	e3a05000 	mov	r5, #0
   34248:	e59f6078 	ldr	r6, [pc, #120]	; 342c8 <HwManager::setMemoryPagingEnable(bool)+0x9c>
   3424c:	e2804008 	add	r4, r0, #8
   34250:	ea000004 	b	34268 <HwManager::setMemoryPagingEnable(bool)+0x3c>
   34254:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34258:	e2855001 	add	r5, r5, #1
   3425c:	e1530005 	cmp	r3, r5
   34260:	e2844004 	add	r4, r4, #4
   34264:	da000013 	ble	342b8 <HwManager::setMemoryPagingEnable(bool)+0x8c>
   34268:	e5940000 	ldr	r0, [r4]
   3426c:	e3500000 	cmp	r0, #0
   34270:	0afffff8 	beq	34258 <HwManager::setMemoryPagingEnable(bool)+0x2c>
   34274:	e5903000 	ldr	r3, [r0]
   34278:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3427c:	e1530006 	cmp	r3, r6
   34280:	1a00000e 	bne	342c0 <HwManager::setMemoryPagingEnable(bool)+0x94>
   34284:	e5d0000c 	ldrb	r0, [r0, #12]
   34288:	e3500000 	cmp	r0, #0
   3428c:	0afffff0 	beq	34254 <HwManager::setMemoryPagingEnable(bool)+0x28>
   34290:	e5940000 	ldr	r0, [r4]
   34294:	e1a01007 	mov	r1, r7
   34298:	e5903000 	ldr	r3, [r0]
   3429c:	e2855001 	add	r5, r5, #1
   342a0:	e593300c 	ldr	r3, [r3, #12]
   342a4:	e12fff33 	blx	r3
   342a8:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   342ac:	e2844004 	add	r4, r4, #4
   342b0:	e1530005 	cmp	r3, r5
   342b4:	caffffeb 	bgt	34268 <HwManager::setMemoryPagingEnable(bool)+0x3c>
   342b8:	e5c8703e 	strb	r7, [r8, #62]	; 0x3e
   342bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   342c0:	e12fff33 	blx	r3
   342c4:	eaffffef 	b	34288 <HwManager::setMemoryPagingEnable(bool)+0x5c>
   342c8:	000350ec 	.word	0x000350ec

000342cc <HwManager::setOpcodeInjectEnable(bool)>:
   342cc:	e92d4030 	push	{r4, r5, lr}
   342d0:	e1a04001 	mov	r4, r1
   342d4:	e24dd00c 	sub	sp, sp, #12
   342d8:	e1a05000 	mov	r5, r0
   342dc:	ebffc86b 	bl	26490 <CLogger::Get()>
   342e0:	e59f2028 	ldr	r2, [pc, #40]	; 34310 <HwManager::setOpcodeInjectEnable(bool)+0x44>
   342e4:	e3540000 	cmp	r4, #0
   342e8:	e59f1024 	ldr	r1, [pc, #36]	; 34314 <HwManager::setOpcodeInjectEnable(bool)+0x48>
   342ec:	01a01002 	moveq	r1, r2
   342f0:	e59f3020 	ldr	r3, [pc, #32]	; 34318 <HwManager::setOpcodeInjectEnable(bool)+0x4c>
   342f4:	e58d1000 	str	r1, [sp]
   342f8:	e3a02004 	mov	r2, #4
   342fc:	e59f1018 	ldr	r1, [pc, #24]	; 3431c <HwManager::setOpcodeInjectEnable(bool)+0x50>
   34300:	ebffc79f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34304:	e5c5403f 	strb	r4, [r5, #63]	; 0x3f
   34308:	e28dd00c 	add	sp, sp, #12
   3430c:	e8bd8030 	pop	{r4, r5, pc}
   34310:	000481a4 	.word	0x000481a4
   34314:	000481a0 	.word	0x000481a0
   34318:	000481c4 	.word	0x000481c4
   3431c:	0004817c 	.word	0x0004817c

00034320 <HwManager::setMirrorMode(bool)>:
   34320:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34324:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34328:	e3530000 	cmp	r3, #0
   3432c:	e1a08000 	mov	r8, r0
   34330:	e1a07001 	mov	r7, r1
   34334:	da00001c 	ble	343ac <HwManager::setMirrorMode(bool)+0x8c>
   34338:	e3a05000 	mov	r5, #0
   3433c:	e59f6078 	ldr	r6, [pc, #120]	; 343bc <HwManager::setMirrorMode(bool)+0x9c>
   34340:	e2804008 	add	r4, r0, #8
   34344:	ea000004 	b	3435c <HwManager::setMirrorMode(bool)+0x3c>
   34348:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   3434c:	e2855001 	add	r5, r5, #1
   34350:	e1530005 	cmp	r3, r5
   34354:	e2844004 	add	r4, r4, #4
   34358:	da000013 	ble	343ac <HwManager::setMirrorMode(bool)+0x8c>
   3435c:	e5940000 	ldr	r0, [r4]
   34360:	e3500000 	cmp	r0, #0
   34364:	0afffff8 	beq	3434c <HwManager::setMirrorMode(bool)+0x2c>
   34368:	e5903000 	ldr	r3, [r0]
   3436c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34370:	e1530006 	cmp	r3, r6
   34374:	1a00000e 	bne	343b4 <HwManager::setMirrorMode(bool)+0x94>
   34378:	e5d0000c 	ldrb	r0, [r0, #12]
   3437c:	e3500000 	cmp	r0, #0
   34380:	0afffff0 	beq	34348 <HwManager::setMirrorMode(bool)+0x28>
   34384:	e5940000 	ldr	r0, [r4]
   34388:	e1a01007 	mov	r1, r7
   3438c:	e5903000 	ldr	r3, [r0]
   34390:	e2855001 	add	r5, r5, #1
   34394:	e5933014 	ldr	r3, [r3, #20]
   34398:	e12fff33 	blx	r3
   3439c:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   343a0:	e2844004 	add	r4, r4, #4
   343a4:	e1530005 	cmp	r3, r5
   343a8:	caffffeb 	bgt	3435c <HwManager::setMirrorMode(bool)+0x3c>
   343ac:	e5c8703d 	strb	r7, [r8, #61]	; 0x3d
   343b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   343b4:	e12fff33 	blx	r3
   343b8:	eaffffef 	b	3437c <HwManager::setMirrorMode(bool)+0x5c>
   343bc:	000350ec 	.word	0x000350ec

000343c0 <HwManager::getMaxAddress()>:
   343c0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   343c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   343c8:	e3530000 	cmp	r3, #0
   343cc:	da000023 	ble	34460 <HwManager::getMaxAddress()+0xa0>
   343d0:	e1a06000 	mov	r6, r0
   343d4:	e3a05000 	mov	r5, #0
   343d8:	e59f8088 	ldr	r8, [pc, #136]	; 34468 <HwManager::getMaxAddress()+0xa8>
   343dc:	e59f7088 	ldr	r7, [pc, #136]	; 3446c <HwManager::getMaxAddress()+0xac>
   343e0:	e2804008 	add	r4, r0, #8
   343e4:	ea000004 	b	343fc <HwManager::getMaxAddress()+0x3c>
   343e8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   343ec:	e2855001 	add	r5, r5, #1
   343f0:	e1530005 	cmp	r3, r5
   343f4:	e2844004 	add	r4, r4, #4
   343f8:	da000014 	ble	34450 <HwManager::getMaxAddress()+0x90>
   343fc:	e5940000 	ldr	r0, [r4]
   34400:	e3500000 	cmp	r0, #0
   34404:	0afffff8 	beq	343ec <HwManager::getMaxAddress()+0x2c>
   34408:	e5903000 	ldr	r3, [r0]
   3440c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34410:	e1530007 	cmp	r3, r7
   34414:	1a00000f 	bne	34458 <HwManager::getMaxAddress()+0x98>
   34418:	e5d0000c 	ldrb	r0, [r0, #12]
   3441c:	e3500000 	cmp	r0, #0
   34420:	0afffff0 	beq	343e8 <HwManager::getMaxAddress()+0x28>
   34424:	e5940000 	ldr	r0, [r4]
   34428:	e2855001 	add	r5, r5, #1
   3442c:	e5903000 	ldr	r3, [r0]
   34430:	e2844004 	add	r4, r4, #4
   34434:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   34438:	e12fff33 	blx	r3
   3443c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34440:	e1580000 	cmp	r8, r0
   34444:	31a08000 	movcc	r8, r0
   34448:	e1530005 	cmp	r3, r5
   3444c:	caffffea 	bgt	343fc <HwManager::getMaxAddress()+0x3c>
   34450:	e1a00008 	mov	r0, r8
   34454:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34458:	e12fff33 	blx	r3
   3445c:	eaffffee 	b	3441c <HwManager::getMaxAddress()+0x5c>
   34460:	e59f8000 	ldr	r8, [pc]	; 34468 <HwManager::getMaxAddress()+0xa8>
   34464:	eafffff9 	b	34450 <HwManager::getMaxAddress()+0x90>
   34468:	0000ffff 	.word	0x0000ffff
   3446c:	000350ec 	.word	0x000350ec

00034470 <HwManager::getMirrorMemForAddr(unsigned long)>:
   34470:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34474:	e3530000 	cmp	r3, #0
   34478:	da000020 	ble	34500 <HwManager::getMirrorMemForAddr(unsigned long)+0x90>
   3447c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34480:	e1a08001 	mov	r8, r1
   34484:	e1a06000 	mov	r6, r0
   34488:	e3a05000 	mov	r5, #0
   3448c:	e59f7074 	ldr	r7, [pc, #116]	; 34508 <HwManager::getMirrorMemForAddr(unsigned long)+0x98>
   34490:	e2804008 	add	r4, r0, #8
   34494:	ea00000e 	b	344d4 <HwManager::getMirrorMemForAddr(unsigned long)+0x64>
   34498:	e5d0000c 	ldrb	r0, [r0, #12]
   3449c:	e3500000 	cmp	r0, #0
   344a0:	0a000006 	beq	344c0 <HwManager::getMirrorMemForAddr(unsigned long)+0x50>
   344a4:	e5940000 	ldr	r0, [r4]
   344a8:	e1a01008 	mov	r1, r8
   344ac:	e5903000 	ldr	r3, [r0]
   344b0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   344b4:	e12fff33 	blx	r3
   344b8:	e3500000 	cmp	r0, #0
   344bc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   344c0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   344c4:	e2855001 	add	r5, r5, #1
   344c8:	e1530005 	cmp	r3, r5
   344cc:	e2844004 	add	r4, r4, #4
   344d0:	da000008 	ble	344f8 <HwManager::getMirrorMemForAddr(unsigned long)+0x88>
   344d4:	e5940000 	ldr	r0, [r4]
   344d8:	e3500000 	cmp	r0, #0
   344dc:	0afffff8 	beq	344c4 <HwManager::getMirrorMemForAddr(unsigned long)+0x54>
   344e0:	e5903000 	ldr	r3, [r0]
   344e4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   344e8:	e1530007 	cmp	r3, r7
   344ec:	0affffe9 	beq	34498 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
   344f0:	e12fff33 	blx	r3
   344f4:	eaffffe8 	b	3449c <HwManager::getMirrorMemForAddr(unsigned long)+0x2c>
   344f8:	e3a00000 	mov	r0, #0
   344fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34500:	e3a00000 	mov	r0, #0
   34504:	e12fff1e 	bx	lr
   34508:	000350ec 	.word	0x000350ec

0003450c <HwManager::mirrorClone()>:
   3450c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34510:	e3530000 	cmp	r3, #0
   34514:	d12fff1e 	bxle	lr
   34518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3451c:	e1a06000 	mov	r6, r0
   34520:	e3a05000 	mov	r5, #0
   34524:	e59f7070 	ldr	r7, [pc, #112]	; 3459c <HwManager::mirrorClone()+0x90>
   34528:	e2804008 	add	r4, r0, #8
   3452c:	ea000004 	b	34544 <HwManager::mirrorClone()+0x38>
   34530:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34534:	e2855001 	add	r5, r5, #1
   34538:	e1530005 	cmp	r3, r5
   3453c:	e2844004 	add	r4, r4, #4
   34540:	da000012 	ble	34590 <HwManager::mirrorClone()+0x84>
   34544:	e5940000 	ldr	r0, [r4]
   34548:	e3500000 	cmp	r0, #0
   3454c:	0afffff8 	beq	34534 <HwManager::mirrorClone()+0x28>
   34550:	e5903000 	ldr	r3, [r0]
   34554:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34558:	e1530007 	cmp	r3, r7
   3455c:	1a00000c 	bne	34594 <HwManager::mirrorClone()+0x88>
   34560:	e5d0000c 	ldrb	r0, [r0, #12]
   34564:	e3500000 	cmp	r0, #0
   34568:	0afffff0 	beq	34530 <HwManager::mirrorClone()+0x24>
   3456c:	e5940000 	ldr	r0, [r4]
   34570:	e2855001 	add	r5, r5, #1
   34574:	e5903000 	ldr	r3, [r0]
   34578:	e2844004 	add	r4, r4, #4
   3457c:	e5933018 	ldr	r3, [r3, #24]
   34580:	e12fff33 	blx	r3
   34584:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34588:	e1530005 	cmp	r3, r5
   3458c:	caffffec 	bgt	34544 <HwManager::mirrorClone()+0x38>
   34590:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34594:	e12fff33 	blx	r3
   34598:	eafffff1 	b	34564 <HwManager::mirrorClone()+0x58>
   3459c:	000350ec 	.word	0x000350ec

000345a0 <HwManager::tracerClone()>:
   345a0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   345a4:	e3530000 	cmp	r3, #0
   345a8:	d12fff1e 	bxle	lr
   345ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   345b0:	e1a06000 	mov	r6, r0
   345b4:	e3a05000 	mov	r5, #0
   345b8:	e59f7070 	ldr	r7, [pc, #112]	; 34630 <HwManager::tracerClone()+0x90>
   345bc:	e2804008 	add	r4, r0, #8
   345c0:	ea000004 	b	345d8 <HwManager::tracerClone()+0x38>
   345c4:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   345c8:	e2855001 	add	r5, r5, #1
   345cc:	e1530005 	cmp	r3, r5
   345d0:	e2844004 	add	r4, r4, #4
   345d4:	da000012 	ble	34624 <HwManager::tracerClone()+0x84>
   345d8:	e5940000 	ldr	r0, [r4]
   345dc:	e3500000 	cmp	r0, #0
   345e0:	0afffff8 	beq	345c8 <HwManager::tracerClone()+0x28>
   345e4:	e5903000 	ldr	r3, [r0]
   345e8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   345ec:	e1530007 	cmp	r3, r7
   345f0:	1a00000c 	bne	34628 <HwManager::tracerClone()+0x88>
   345f4:	e5d0000c 	ldrb	r0, [r0, #12]
   345f8:	e3500000 	cmp	r0, #0
   345fc:	0afffff0 	beq	345c4 <HwManager::tracerClone()+0x24>
   34600:	e5940000 	ldr	r0, [r4]
   34604:	e2855001 	add	r5, r5, #1
   34608:	e5903000 	ldr	r3, [r0]
   3460c:	e2844004 	add	r4, r4, #4
   34610:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   34614:	e12fff33 	blx	r3
   34618:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3461c:	e1530005 	cmp	r3, r5
   34620:	caffffec 	bgt	345d8 <HwManager::tracerClone()+0x38>
   34624:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34628:	e12fff33 	blx	r3
   3462c:	eafffff1 	b	345f8 <HwManager::tracerClone()+0x58>
   34630:	000350ec 	.word	0x000350ec

00034634 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34634:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   34638:	e35c0000 	cmp	ip, #0
   3463c:	d12fff1e 	bxle	lr
   34640:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34644:	e1a0b003 	mov	fp, r3
   34648:	e24dd00c 	sub	sp, sp, #12
   3464c:	e1a0a002 	mov	sl, r2
   34650:	e1a09001 	mov	r9, r1
   34654:	e1a06000 	mov	r6, r0
   34658:	e3a05000 	mov	r5, #0
   3465c:	e59f7088 	ldr	r7, [pc, #136]	; 346ec <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   34660:	e2804008 	add	r4, r0, #8
   34664:	ea000004 	b	3467c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   34668:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   3466c:	e2855001 	add	r5, r5, #1
   34670:	e15c0005 	cmp	ip, r5
   34674:	e2844004 	add	r4, r4, #4
   34678:	da000017 	ble	346dc <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   3467c:	e5940000 	ldr	r0, [r4]
   34680:	e3500000 	cmp	r0, #0
   34684:	0afffff8 	beq	3466c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   34688:	e5903000 	ldr	r3, [r0]
   3468c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34690:	e1530007 	cmp	r3, r7
   34694:	1a000012 	bne	346e4 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   34698:	e5d0000c 	ldrb	r0, [r0, #12]
   3469c:	e3500000 	cmp	r0, #0
   346a0:	0afffff0 	beq	34668 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   346a4:	e5940000 	ldr	r0, [r4]
   346a8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   346ac:	e5902000 	ldr	r2, [r0]
   346b0:	e58d1000 	str	r1, [sp]
   346b4:	e592802c 	ldr	r8, [r2, #44]	; 0x2c
   346b8:	e1a0300b 	mov	r3, fp
   346bc:	e1a0200a 	mov	r2, sl
   346c0:	e1a01009 	mov	r1, r9
   346c4:	e12fff38 	blx	r8
   346c8:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   346cc:	e2855001 	add	r5, r5, #1
   346d0:	e15c0005 	cmp	ip, r5
   346d4:	e2844004 	add	r4, r4, #4
   346d8:	caffffe7 	bgt	3467c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   346dc:	e28dd00c 	add	sp, sp, #12
   346e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346e4:	e12fff33 	blx	r3
   346e8:	eaffffeb 	b	3469c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   346ec:	000350ec 	.word	0x000350ec

000346f0 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   346f0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   346f4:	e3530000 	cmp	r3, #0
   346f8:	d12fff1e 	bxle	lr
   346fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34700:	e1a09002 	mov	r9, r2
   34704:	e1a08001 	mov	r8, r1
   34708:	e1a06000 	mov	r6, r0
   3470c:	e3a05000 	mov	r5, #0
   34710:	e59f7078 	ldr	r7, [pc, #120]	; 34790 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa0>
   34714:	e2804008 	add	r4, r0, #8
   34718:	ea000004 	b	34730 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   3471c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34720:	e2855001 	add	r5, r5, #1
   34724:	e1530005 	cmp	r3, r5
   34728:	e2844004 	add	r4, r4, #4
   3472c:	da000014 	ble	34784 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   34730:	e5940000 	ldr	r0, [r4]
   34734:	e3500000 	cmp	r0, #0
   34738:	0afffff8 	beq	34720 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x30>
   3473c:	e5903000 	ldr	r3, [r0]
   34740:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34744:	e1530007 	cmp	r3, r7
   34748:	1a00000e 	bne	34788 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x98>
   3474c:	e5d0000c 	ldrb	r0, [r0, #12]
   34750:	e3500000 	cmp	r0, #0
   34754:	0afffff0 	beq	3471c <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2c>
   34758:	e5940000 	ldr	r0, [r4]
   3475c:	e1a02009 	mov	r2, r9
   34760:	e5903000 	ldr	r3, [r0]
   34764:	e1a01008 	mov	r1, r8
   34768:	e5933000 	ldr	r3, [r3]
   3476c:	e12fff33 	blx	r3
   34770:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34774:	e2855001 	add	r5, r5, #1
   34778:	e1530005 	cmp	r3, r5
   3477c:	e2844004 	add	r4, r4, #4
   34780:	caffffea 	bgt	34730 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   34784:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34788:	e12fff33 	blx	r3
   3478c:	eaffffef 	b	34750 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   34790:	000350ec 	.word	0x000350ec

00034794 <HwManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   34794:	e3500000 	cmp	r0, #0
   34798:	012fff1e 	bxeq	lr
   3479c:	eaffffd3 	b	346f0 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

000347a0 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   347a0:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   347a4:	e35c0000 	cmp	ip, #0
   347a8:	d12fff1e 	bxle	lr
   347ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   347b0:	e1a0b003 	mov	fp, r3
   347b4:	e24dd00c 	sub	sp, sp, #12
   347b8:	e1a0a002 	mov	sl, r2
   347bc:	e1a09001 	mov	r9, r1
   347c0:	e1a06000 	mov	r6, r0
   347c4:	e3a05000 	mov	r5, #0
   347c8:	e59f7088 	ldr	r7, [pc, #136]	; 34858 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   347cc:	e2804008 	add	r4, r0, #8
   347d0:	ea000004 	b	347e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   347d4:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   347d8:	e2855001 	add	r5, r5, #1
   347dc:	e15c0005 	cmp	ip, r5
   347e0:	e2844004 	add	r4, r4, #4
   347e4:	da000017 	ble	34848 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   347e8:	e5940000 	ldr	r0, [r4]
   347ec:	e3500000 	cmp	r0, #0
   347f0:	0afffff8 	beq	347d8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   347f4:	e5903000 	ldr	r3, [r0]
   347f8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   347fc:	e1530007 	cmp	r3, r7
   34800:	1a000012 	bne	34850 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   34804:	e5d0000c 	ldrb	r0, [r0, #12]
   34808:	e3500000 	cmp	r0, #0
   3480c:	0afffff0 	beq	347d4 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   34810:	e5940000 	ldr	r0, [r4]
   34814:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   34818:	e5902000 	ldr	r2, [r0]
   3481c:	e58d1000 	str	r1, [sp]
   34820:	e5928004 	ldr	r8, [r2, #4]
   34824:	e1a0300b 	mov	r3, fp
   34828:	e1a0200a 	mov	r2, sl
   3482c:	e1a01009 	mov	r1, r9
   34830:	e12fff38 	blx	r8
   34834:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   34838:	e2855001 	add	r5, r5, #1
   3483c:	e15c0005 	cmp	ip, r5
   34840:	e2844004 	add	r4, r4, #4
   34844:	caffffe7 	bgt	347e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   34848:	e28dd00c 	add	sp, sp, #12
   3484c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34850:	e12fff33 	blx	r3
   34854:	eaffffeb 	b	34808 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   34858:	000350ec 	.word	0x000350ec

0003485c <HwManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3485c:	e3500000 	cmp	r0, #0
   34860:	012fff1e 	bxeq	lr
   34864:	eaffffcd 	b	347a0 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>

00034868 <HwManager::enableHw(char const*, bool)>:
   34868:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3486c:	e3530000 	cmp	r3, #0
   34870:	da00002c 	ble	34928 <HwManager::enableHw(char const*, bool)+0xc0>
   34874:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34878:	e1a08002 	mov	r8, r2
   3487c:	e1a07001 	mov	r7, r1
   34880:	e1a06000 	mov	r6, r0
   34884:	e3a04000 	mov	r4, #0
   34888:	e59f90a0 	ldr	r9, [pc, #160]	; 34930 <HwManager::enableHw(char const*, bool)+0xc8>
   3488c:	e2805004 	add	r5, r0, #4
   34890:	ea000008 	b	348b8 <HwManager::enableHw(char const*, bool)+0x50>
   34894:	e5900010 	ldr	r0, [r0, #16]
   34898:	e1a01007 	mov	r1, r7
   3489c:	ebffd44b 	bl	299d0 <strcasecmp>
   348a0:	e3500000 	cmp	r0, #0
   348a4:	0a00000f 	beq	348e8 <HwManager::enableHw(char const*, bool)+0x80>
   348a8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   348ac:	e2844001 	add	r4, r4, #1
   348b0:	e1530004 	cmp	r3, r4
   348b4:	da000015 	ble	34910 <HwManager::enableHw(char const*, bool)+0xa8>
   348b8:	e5b50004 	ldr	r0, [r5, #4]!
   348bc:	e3500000 	cmp	r0, #0
   348c0:	0afffff9 	beq	348ac <HwManager::enableHw(char const*, bool)+0x44>
   348c4:	e5903000 	ldr	r3, [r0]
   348c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   348cc:	e1530009 	cmp	r3, r9
   348d0:	0affffef 	beq	34894 <HwManager::enableHw(char const*, bool)+0x2c>
   348d4:	e12fff33 	blx	r3
   348d8:	e1a01007 	mov	r1, r7
   348dc:	ebffd43b 	bl	299d0 <strcasecmp>
   348e0:	e3500000 	cmp	r0, #0
   348e4:	1affffef 	bne	348a8 <HwManager::enableHw(char const*, bool)+0x40>
   348e8:	e2844002 	add	r4, r4, #2
   348ec:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   348f0:	e59f203c 	ldr	r2, [pc, #60]	; 34934 <HwManager::enableHw(char const*, bool)+0xcc>
   348f4:	e5903000 	ldr	r3, [r0]
   348f8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   348fc:	e1530002 	cmp	r3, r2
   34900:	1a000004 	bne	34918 <HwManager::enableHw(char const*, bool)+0xb0>
   34904:	e5c0800c 	strb	r8, [r0, #12]
   34908:	e3a00001 	mov	r0, #1
   3490c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34910:	e3a00000 	mov	r0, #0
   34914:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34918:	e1a01008 	mov	r1, r8
   3491c:	e12fff33 	blx	r3
   34920:	e3a00001 	mov	r0, #1
   34924:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34928:	e3a00000 	mov	r0, #0
   3492c:	e12fff1e 	bx	lr
   34930:	000350fc 	.word	0x000350fc
   34934:	000350f4 	.word	0x000350f4

00034938 <HwManager::disableAll()>:
   34938:	e5902030 	ldr	r2, [r0, #48]	; 0x30
   3493c:	e3520000 	cmp	r2, #0
   34940:	d12fff1e 	bxle	lr
   34944:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34948:	e3a04000 	mov	r4, #0
   3494c:	e1a08000 	mov	r8, r0
   34950:	e1a07004 	mov	r7, r4
   34954:	e59f604c 	ldr	r6, [pc, #76]	; 349a8 <HwManager::disableAll()+0x70>
   34958:	e2805004 	add	r5, r0, #4
   3495c:	ea000002 	b	3496c <HwManager::disableAll()+0x34>
   34960:	e2844001 	add	r4, r4, #1
   34964:	e1520004 	cmp	r2, r4
   34968:	da00000d 	ble	349a4 <HwManager::disableAll()+0x6c>
   3496c:	e5b50004 	ldr	r0, [r5, #4]!
   34970:	e3500000 	cmp	r0, #0
   34974:	0afffff9 	beq	34960 <HwManager::disableAll()+0x28>
   34978:	e5903000 	ldr	r3, [r0]
   3497c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   34980:	e1530006 	cmp	r3, r6
   34984:	05c0700c 	strbeq	r7, [r0, #12]
   34988:	0afffff4 	beq	34960 <HwManager::disableAll()+0x28>
   3498c:	e1a01007 	mov	r1, r7
   34990:	e12fff33 	blx	r3
   34994:	e5982030 	ldr	r2, [r8, #48]	; 0x30
   34998:	e2844001 	add	r4, r4, #1
   3499c:	e1520004 	cmp	r2, r4
   349a0:	cafffff1 	bgt	3496c <HwManager::disableAll()+0x34>
   349a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   349a8:	000350f4 	.word	0x000350f4

000349ac <HwManager::configureHw(char const*, char const*)>:
   349ac:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   349b0:	e3530000 	cmp	r3, #0
   349b4:	d12fff1e 	bxle	lr
   349b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   349bc:	e1a08002 	mov	r8, r2
   349c0:	e1a07001 	mov	r7, r1
   349c4:	e1a06000 	mov	r6, r0
   349c8:	e3a04000 	mov	r4, #0
   349cc:	e59f9078 	ldr	r9, [pc, #120]	; 34a4c <HwManager::configureHw(char const*, char const*)+0xa0>
   349d0:	e2805004 	add	r5, r0, #4
   349d4:	ea000008 	b	349fc <HwManager::configureHw(char const*, char const*)+0x50>
   349d8:	e5900010 	ldr	r0, [r0, #16]
   349dc:	e1a01007 	mov	r1, r7
   349e0:	ebffd3fa 	bl	299d0 <strcasecmp>
   349e4:	e3500000 	cmp	r0, #0
   349e8:	0a00000f 	beq	34a2c <HwManager::configureHw(char const*, char const*)+0x80>
   349ec:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   349f0:	e2844001 	add	r4, r4, #1
   349f4:	e1530004 	cmp	r3, r4
   349f8:	da000012 	ble	34a48 <HwManager::configureHw(char const*, char const*)+0x9c>
   349fc:	e5b50004 	ldr	r0, [r5, #4]!
   34a00:	e3500000 	cmp	r0, #0
   34a04:	0afffff9 	beq	349f0 <HwManager::configureHw(char const*, char const*)+0x44>
   34a08:	e5903000 	ldr	r3, [r0]
   34a0c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   34a10:	e1530009 	cmp	r3, r9
   34a14:	0affffef 	beq	349d8 <HwManager::configureHw(char const*, char const*)+0x2c>
   34a18:	e12fff33 	blx	r3
   34a1c:	e1a01007 	mov	r1, r7
   34a20:	ebffd3ea 	bl	299d0 <strcasecmp>
   34a24:	e3500000 	cmp	r0, #0
   34a28:	1affffef 	bne	349ec <HwManager::configureHw(char const*, char const*)+0x40>
   34a2c:	e2844002 	add	r4, r4, #2
   34a30:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   34a34:	e1a01008 	mov	r1, r8
   34a38:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   34a3c:	e5903000 	ldr	r3, [r0]
   34a40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   34a44:	e12fff13 	bx	r3
   34a48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34a4c:	000350fc 	.word	0x000350fc

00034a50 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   34a50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a54:	e24dde49 	sub	sp, sp, #1168	; 0x490
   34a58:	e24dd00c 	sub	sp, sp, #12
   34a5c:	e28d3014 	add	r3, sp, #20
   34a60:	e58d300c 	str	r3, [sp, #12]
   34a64:	e1a02003 	mov	r2, r3
   34a68:	e1a07000 	mov	r7, r0
   34a6c:	e3a03032 	mov	r3, #50	; 0x32
   34a70:	e59f01d0 	ldr	r0, [pc, #464]	; 34c48 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f8>
   34a74:	e1a05001 	mov	r5, r1
   34a78:	ebffe44c 	bl	2dbb0 <jsonGetValueForKey>
   34a7c:	e2504000 	subs	r4, r0, #0
   34a80:	1a000004 	bne	34a98 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   34a84:	e3a04000 	mov	r4, #0
   34a88:	e1a00004 	mov	r0, r4
   34a8c:	e28dde49 	add	sp, sp, #1168	; 0x490
   34a90:	e28dd00c 	add	sp, sp, #12
   34a94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a98:	e59f11ac 	ldr	r1, [pc, #428]	; 34c4c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1fc>
   34a9c:	e59d000c 	ldr	r0, [sp, #12]
   34aa0:	ebffd3ca 	bl	299d0 <strcasecmp>
   34aa4:	e2506000 	subs	r6, r0, #0
   34aa8:	0a000033 	beq	34b7c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x12c>
   34aac:	e59d000c 	ldr	r0, [sp, #12]
   34ab0:	e59f1198 	ldr	r1, [pc, #408]	; 34c50 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x200>
   34ab4:	ebffd3c5 	bl	299d0 <strcasecmp>
   34ab8:	e2505000 	subs	r5, r0, #0
   34abc:	1afffff0 	bne	34a84 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   34ac0:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34ac4:	e59f1188 	ldr	r1, [pc, #392]	; 34c54 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x204>
   34ac8:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34acc:	ebffe381 	bl	2d8d8 <strlcpy>
   34ad0:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   34ad4:	e3530000 	cmp	r3, #0
   34ad8:	da000055 	ble	34c34 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   34adc:	e1a08005 	mov	r8, r5
   34ae0:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   34ae4:	e59fa16c 	ldr	sl, [pc, #364]	; 34c58 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   34ae8:	e59f916c 	ldr	r9, [pc, #364]	; 34c5c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x20c>
   34aec:	e2876008 	add	r6, r7, #8
   34af0:	ea000009 	b	34b1c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
   34af4:	e1a08004 	mov	r8, r4
   34af8:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34afc:	e28d10b0 	add	r1, sp, #176	; 0xb0
   34b00:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34b04:	ebffe38f 	bl	2d948 <strlcat>
   34b08:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   34b0c:	e2855001 	add	r5, r5, #1
   34b10:	e1530005 	cmp	r3, r5
   34b14:	e2866004 	add	r6, r6, #4
   34b18:	da000045 	ble	34c34 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   34b1c:	e5960000 	ldr	r0, [r6]
   34b20:	e3500000 	cmp	r0, #0
   34b24:	0afffff8 	beq	34b0c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   34b28:	e5902000 	ldr	r2, [r0]
   34b2c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   34b30:	e153000a 	cmp	r3, sl
   34b34:	1a000039 	bne	34c20 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d0>
   34b38:	e5903010 	ldr	r3, [r0, #16]
   34b3c:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   34b40:	e1520009 	cmp	r2, r9
   34b44:	1a000031 	bne	34c10 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1c0>
   34b48:	e5d0000c 	ldrb	r0, [r0, #12]
   34b4c:	e58d0000 	str	r0, [sp]
   34b50:	e59f2108 	ldr	r2, [pc, #264]	; 34c60 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x210>
   34b54:	e1a0100b 	mov	r1, fp
   34b58:	e28d00b0 	add	r0, sp, #176	; 0xb0
   34b5c:	ebffe3d4 	bl	2dab4 <snprintf>
   34b60:	e3580000 	cmp	r8, #0
   34b64:	0affffe2 	beq	34af4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   34b68:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34b6c:	e59f10f0 	ldr	r1, [pc, #240]	; 34c64 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x214>
   34b70:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34b74:	ebffe373 	bl	2d948 <strlcat>
   34b78:	eaffffdd 	b	34af4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   34b7c:	e28d2048 	add	r2, sp, #72	; 0x48
   34b80:	e3a03064 	mov	r3, #100	; 0x64
   34b84:	e1a01005 	mov	r1, r5
   34b88:	e59f00d8 	ldr	r0, [pc, #216]	; 34c68 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x218>
   34b8c:	ebffe407 	bl	2dbb0 <jsonGetValueForKey>
   34b90:	e3500000 	cmp	r0, #0
   34b94:	0affffba 	beq	34a84 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   34b98:	e28d20b0 	add	r2, sp, #176	; 0xb0
   34b9c:	e3a03064 	mov	r3, #100	; 0x64
   34ba0:	e1a01005 	mov	r1, r5
   34ba4:	e59f00c0 	ldr	r0, [pc, #192]	; 34c6c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   34ba8:	ebffe400 	bl	2dbb0 <jsonGetValueForKey>
   34bac:	e2504000 	subs	r4, r0, #0
   34bb0:	0affffb3 	beq	34a84 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   34bb4:	e1a01006 	mov	r1, r6
   34bb8:	e28d00b0 	add	r0, sp, #176	; 0xb0
   34bbc:	e3a0200a 	mov	r2, #10
   34bc0:	ebffd4aa 	bl	29e70 <strtoul>
   34bc4:	e2902000 	adds	r2, r0, #0
   34bc8:	13a02001 	movne	r2, #1
   34bcc:	e28d1048 	add	r1, sp, #72	; 0x48
   34bd0:	e1a00007 	mov	r0, r7
   34bd4:	ebffff23 	bl	34868 <HwManager::enableHw(char const*, bool)>
   34bd8:	e1a06000 	mov	r6, r0
   34bdc:	e1a02005 	mov	r2, r5
   34be0:	e28d1048 	add	r1, sp, #72	; 0x48
   34be4:	e1a00007 	mov	r0, r7
   34be8:	ebffff6f 	bl	349ac <HwManager::configureHw(char const*, char const*)>
   34bec:	e59f107c 	ldr	r1, [pc, #124]	; 34c70 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x220>
   34bf0:	e3560000 	cmp	r6, #0
   34bf4:	e59f3078 	ldr	r3, [pc, #120]	; 34c74 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x224>
   34bf8:	e59f2078 	ldr	r2, [pc, #120]	; 34c78 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x228>
   34bfc:	11a03001 	movne	r3, r1
   34c00:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34c04:	e59d14c4 	ldr	r1, [sp, #1220]	; 0x4c4
   34c08:	ebffe3a9 	bl	2dab4 <snprintf>
   34c0c:	eaffff9d 	b	34a88 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   34c10:	e58d300c 	str	r3, [sp, #12]
   34c14:	e12fff32 	blx	r2
   34c18:	e59d300c 	ldr	r3, [sp, #12]
   34c1c:	eaffffca 	b	34b4c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xfc>
   34c20:	e12fff33 	blx	r3
   34c24:	e1a03000 	mov	r3, r0
   34c28:	e5960000 	ldr	r0, [r6]
   34c2c:	e5902000 	ldr	r2, [r0]
   34c30:	eaffffc1 	b	34b3c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec>
   34c34:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   34c38:	e59f103c 	ldr	r1, [pc, #60]	; 34c7c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x22c>
   34c3c:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   34c40:	ebffe340 	bl	2d948 <strlcat>
   34c44:	eaffff8f 	b	34a88 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   34c48:	00040804 	.word	0x00040804
   34c4c:	000481f0 	.word	0x000481f0
   34c50:	00048218 	.word	0x00048218
   34c54:	00048220 	.word	0x00048220
   34c58:	000350fc 	.word	0x000350fc
   34c5c:	000350ec 	.word	0x000350ec
   34c60:	0004823c 	.word	0x0004823c
   34c64:	00044b54 	.word	0x00044b54
   34c68:	000481fc 	.word	0x000481fc
   34c6c:	00048204 	.word	0x00048204
   34c70:	000481e0 	.word	0x000481e0
   34c74:	000481e4 	.word	0x000481e4
   34c78:	0004820c 	.word	0x0004820c
   34c7c:	00048238 	.word	0x00048238

00034c80 <HwManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   34c80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   34c84:	e99d5000 	ldmib	sp, {ip, lr}
   34c88:	e3500000 	cmp	r0, #0
   34c8c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   34c90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   34c94:	eaffff6d 	b	34a50 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00034c98 <HwManager::setupFromJson(char const*, char const*)>:
   34c98:	e1a03001 	mov	r3, r1
   34c9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ca0:	e24ddd61 	sub	sp, sp, #6208	; 0x1840
   34ca4:	e24dd01c 	sub	sp, sp, #28
   34ca8:	e28d1e4d 	add	r1, sp, #1232	; 0x4d0
   34cac:	e58d1014 	str	r1, [sp, #20]
   34cb0:	e58d001c 	str	r0, [sp, #28]
   34cb4:	e1a01002 	mov	r1, r2
   34cb8:	e1a00003 	mov	r0, r3
   34cbc:	e59d2014 	ldr	r2, [sp, #20]
   34cc0:	e59f31e8 	ldr	r3, [pc, #488]	; 34eb0 <HwManager::setupFromJson(char const*, char const*)+0x218>
   34cc4:	ebffe3b9 	bl	2dbb0 <jsonGetValueForKey>
   34cc8:	e3500000 	cmp	r0, #0
   34ccc:	1a000060 	bne	34e54 <HwManager::setupFromJson(char const*, char const*)+0x1bc>
   34cd0:	e59f31dc 	ldr	r3, [pc, #476]	; 34eb4 <HwManager::setupFromJson(char const*, char const*)+0x21c>
   34cd4:	e5937000 	ldr	r7, [r3]
   34cd8:	e1a00007 	mov	r0, r7
   34cdc:	ebffe3ec 	bl	2dc94 <jsonGetArrayLen>
   34ce0:	e1a08000 	mov	r8, r0
   34ce4:	ebffc5e9 	bl	26490 <CLogger::Get()>
   34ce8:	e58d8000 	str	r8, [sp]
   34cec:	e59f31c4 	ldr	r3, [pc, #452]	; 34eb8 <HwManager::setupFromJson(char const*, char const*)+0x220>
   34cf0:	e3a02004 	mov	r2, #4
   34cf4:	e59f11c0 	ldr	r1, [pc, #448]	; 34ebc <HwManager::setupFromJson(char const*, char const*)+0x224>
   34cf8:	ebffc521 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34cfc:	e3580000 	cmp	r8, #0
   34d00:	da000050 	ble	34e48 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   34d04:	e3a04000 	mov	r4, #0
   34d08:	e59fa1b0 	ldr	sl, [pc, #432]	; 34ec0 <HwManager::setupFromJson(char const*, char const*)+0x228>
   34d0c:	e59f91a8 	ldr	r9, [pc, #424]	; 34ebc <HwManager::setupFromJson(char const*, char const*)+0x224>
   34d10:	e59fb1ac 	ldr	fp, [pc, #428]	; 34ec4 <HwManager::setupFromJson(char const*, char const*)+0x22c>
   34d14:	e28d60e8 	add	r6, sp, #232	; 0xe8
   34d18:	ea000002 	b	34d28 <HwManager::setupFromJson(char const*, char const*)+0x90>
   34d1c:	e2844001 	add	r4, r4, #1
   34d20:	e1580004 	cmp	r8, r4
   34d24:	0a000047 	beq	34e48 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   34d28:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   34d2c:	e1a02006 	mov	r2, r6
   34d30:	e1a01007 	mov	r1, r7
   34d34:	e1a00004 	mov	r0, r4
   34d38:	ebffe3f1 	bl	2dd04 <jsonGetArrayElem>
   34d3c:	e1a05000 	mov	r5, r0
   34d40:	ebffc5d2 	bl	26490 <CLogger::Get()>
   34d44:	e88d0060 	stm	sp, {r5, r6}
   34d48:	e1a0300a 	mov	r3, sl
   34d4c:	e3a02004 	mov	r2, #4
   34d50:	e1a01009 	mov	r1, r9
   34d54:	ebffc50a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34d58:	e3550000 	cmp	r5, #0
   34d5c:	0affffee 	beq	34d1c <HwManager::setupFromJson(char const*, char const*)+0x84>
   34d60:	e28d3020 	add	r3, sp, #32
   34d64:	e58d3014 	str	r3, [sp, #20]
   34d68:	e1a02003 	mov	r2, r3
   34d6c:	e1a01006 	mov	r1, r6
   34d70:	e3a03064 	mov	r3, #100	; 0x64
   34d74:	e1a0000b 	mov	r0, fp
   34d78:	ebffe38c 	bl	2dbb0 <jsonGetValueForKey>
   34d7c:	e2505000 	subs	r5, r0, #0
   34d80:	0affffe5 	beq	34d1c <HwManager::setupFromJson(char const*, char const*)+0x84>
   34d84:	ebffc5c1 	bl	26490 <CLogger::Get()>
   34d88:	e59d3014 	ldr	r3, [sp, #20]
   34d8c:	e3a02004 	mov	r2, #4
   34d90:	e58d3004 	str	r3, [sp, #4]
   34d94:	e1a01009 	mov	r1, r9
   34d98:	e59f3128 	ldr	r3, [pc, #296]	; 34ec8 <HwManager::setupFromJson(char const*, char const*)+0x230>
   34d9c:	e58d4000 	str	r4, [sp]
   34da0:	ebffc4f7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34da4:	e28d3084 	add	r3, sp, #132	; 0x84
   34da8:	e1a00003 	mov	r0, r3
   34dac:	e59f1118 	ldr	r1, [pc, #280]	; 34ecc <HwManager::setupFromJson(char const*, char const*)+0x234>
   34db0:	e58d3018 	str	r3, [sp, #24]
   34db4:	ebffd39e 	bl	29c34 <strcpy>
   34db8:	e59d2018 	ldr	r2, [sp, #24]
   34dbc:	e3a03064 	mov	r3, #100	; 0x64
   34dc0:	e1a01006 	mov	r1, r6
   34dc4:	e59f0104 	ldr	r0, [pc, #260]	; 34ed0 <HwManager::setupFromJson(char const*, char const*)+0x238>
   34dc8:	ebffe378 	bl	2dbb0 <jsonGetValueForKey>
   34dcc:	e3500000 	cmp	r0, #0
   34dd0:	0a000032 	beq	34ea0 <HwManager::setupFromJson(char const*, char const*)+0x208>
   34dd4:	e59f10f8 	ldr	r1, [pc, #248]	; 34ed4 <HwManager::setupFromJson(char const*, char const*)+0x23c>
   34dd8:	e59d0018 	ldr	r0, [sp, #24]
   34ddc:	ebffd2fb 	bl	299d0 <strcasecmp>
   34de0:	e3500000 	cmp	r0, #0
   34de4:	03a03001 	moveq	r3, #1
   34de8:	1a000024 	bne	34e80 <HwManager::setupFromJson(char const*, char const*)+0x1e8>
   34dec:	e1a02005 	mov	r2, r5
   34df0:	e59d501c 	ldr	r5, [sp, #28]
   34df4:	e59d1014 	ldr	r1, [sp, #20]
   34df8:	e1a00005 	mov	r0, r5
   34dfc:	e58d3018 	str	r3, [sp, #24]
   34e00:	ebfffe98 	bl	34868 <HwManager::enableHw(char const*, bool)>
   34e04:	ebffc5a1 	bl	26490 <CLogger::Get()>
   34e08:	e59d3018 	ldr	r3, [sp, #24]
   34e0c:	e58d4000 	str	r4, [sp]
   34e10:	e58d3008 	str	r3, [sp, #8]
   34e14:	e59d3014 	ldr	r3, [sp, #20]
   34e18:	e3a02004 	mov	r2, #4
   34e1c:	e58d3004 	str	r3, [sp, #4]
   34e20:	e1a01009 	mov	r1, r9
   34e24:	e59f30ac 	ldr	r3, [pc, #172]	; 34ed8 <HwManager::setupFromJson(char const*, char const*)+0x240>
   34e28:	ebffc4d5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34e2c:	e2844001 	add	r4, r4, #1
   34e30:	e1a02006 	mov	r2, r6
   34e34:	e59d1014 	ldr	r1, [sp, #20]
   34e38:	e1a00005 	mov	r0, r5
   34e3c:	ebfffeda 	bl	349ac <HwManager::configureHw(char const*, char const*)>
   34e40:	e1580004 	cmp	r8, r4
   34e44:	1affffb7 	bne	34d28 <HwManager::setupFromJson(char const*, char const*)+0x90>
   34e48:	e28ddd61 	add	sp, sp, #6208	; 0x1840
   34e4c:	e28dd01c 	add	sp, sp, #28
   34e50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e54:	e59d0014 	ldr	r0, [sp, #20]
   34e58:	ebffd2b7 	bl	2993c <strlen>
   34e5c:	e3500000 	cmp	r0, #0
   34e60:	0affff9a 	beq	34cd0 <HwManager::setupFromJson(char const*, char const*)+0x38>
   34e64:	e59f1070 	ldr	r1, [pc, #112]	; 34edc <HwManager::setupFromJson(char const*, char const*)+0x244>
   34e68:	e59d0014 	ldr	r0, [sp, #20]
   34e6c:	ebffd2d7 	bl	299d0 <strcasecmp>
   34e70:	e3500000 	cmp	r0, #0
   34e74:	0affff95 	beq	34cd0 <HwManager::setupFromJson(char const*, char const*)+0x38>
   34e78:	e59d7014 	ldr	r7, [sp, #20]
   34e7c:	eaffff95 	b	34cd8 <HwManager::setupFromJson(char const*, char const*)+0x40>
   34e80:	e59d0018 	ldr	r0, [sp, #24]
   34e84:	e3a0200a 	mov	r2, #10
   34e88:	e3a01000 	mov	r1, #0
   34e8c:	ebffd3f7 	bl	29e70 <strtoul>
   34e90:	e2905000 	adds	r5, r0, #0
   34e94:	13a05001 	movne	r5, #1
   34e98:	e1a03005 	mov	r3, r5
   34e9c:	eaffffd2 	b	34dec <HwManager::setupFromJson(char const*, char const*)+0x154>
   34ea0:	e59f1024 	ldr	r1, [pc, #36]	; 34ecc <HwManager::setupFromJson(char const*, char const*)+0x234>
   34ea4:	e59d0018 	ldr	r0, [sp, #24]
   34ea8:	ebffd361 	bl	29c34 <strcpy>
   34eac:	eaffffc8 	b	34dd4 <HwManager::setupFromJson(char const*, char const*)+0x13c>
   34eb0:	00001388 	.word	0x00001388
   34eb4:	00049d94 	.word	0x00049d94
   34eb8:	0004825c 	.word	0x0004825c
   34ebc:	0004817c 	.word	0x0004817c
   34ec0:	00048274 	.word	0x00048274
   34ec4:	00048294 	.word	0x00048294
   34ec8:	0004829c 	.word	0x0004829c
   34ecc:	00041880 	.word	0x00041880
   34ed0:	00048204 	.word	0x00048204
   34ed4:	00046bc4 	.word	0x00046bc4
   34ed8:	000482b0 	.word	0x000482b0
   34edc:	00048258 	.word	0x00048258

00034ee0 <HwManager::busAccessAvailable()>:
   34ee0:	e92d4010 	push	{r4, lr}
   34ee4:	e1a04000 	mov	r4, r0
   34ee8:	e5900004 	ldr	r0, [r0, #4]
   34eec:	ebffef98 	bl	30d54 <BusAccess::waitIsHeld()>
   34ef0:	e3500000 	cmp	r0, #0
   34ef4:	1a000008 	bne	34f1c <HwManager::busAccessAvailable()+0x3c>
   34ef8:	e5d4303c 	ldrb	r3, [r4, #60]	; 0x3c
   34efc:	e3530000 	cmp	r3, #0
   34f00:	18bd8010 	popne	{r4, pc}
   34f04:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   34f08:	e5940004 	ldr	r0, [r4, #4]
   34f0c:	ebfff2e1 	bl	31a98 <BusAccess::busSocketIsEnabled(int)>
   34f10:	e2200001 	eor	r0, r0, #1
   34f14:	e6ef0070 	uxtb	r0, r0
   34f18:	e8bd8010 	pop	{r4, pc}
   34f1c:	e3a00000 	mov	r0, #0
   34f20:	e8bd8010 	pop	{r4, pc}

00034f24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   34f24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f28:	e24dd024 	sub	sp, sp, #36	; 0x24
   34f2c:	e5dd9050 	ldrb	r9, [sp, #80]	; 0x50
   34f30:	e58d1010 	str	r1, [sp, #16]
   34f34:	e3590000 	cmp	r9, #0
   34f38:	e58d2014 	str	r2, [sp, #20]
   34f3c:	e58d3018 	str	r3, [sp, #24]
   34f40:	e1a06000 	mov	r6, r0
   34f44:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   34f48:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   34f4c:	0a000028 	beq	34ff4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xd0>
   34f50:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34f54:	e3530000 	cmp	r3, #0
   34f58:	da000020 	ble	34fe0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xbc>
   34f5c:	e3a05000 	mov	r5, #0
   34f60:	e59f709c 	ldr	r7, [pc, #156]	; 35004 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xe0>
   34f64:	e58d501c 	str	r5, [sp, #28]
   34f68:	e2864008 	add	r4, r6, #8
   34f6c:	ea000012 	b	34fbc <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x98>
   34f70:	e5d0000c 	ldrb	r0, [r0, #12]
   34f74:	e3500000 	cmp	r0, #0
   34f78:	0a00000a 	beq	34fa8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x84>
   34f7c:	e5940000 	ldr	r0, [r4]
   34f80:	e59d3018 	ldr	r3, [sp, #24]
   34f84:	e5902000 	ldr	r2, [r0]
   34f88:	e88d0c00 	stm	sp, {sl, fp}
   34f8c:	e58d9008 	str	r9, [sp, #8]
   34f90:	e592801c 	ldr	r8, [r2, #28]
   34f94:	e59d1010 	ldr	r1, [sp, #16]
   34f98:	e59d2014 	ldr	r2, [sp, #20]
   34f9c:	e12fff38 	blx	r8
   34fa0:	e31000fb 	tst	r0, #251	; 0xfb
   34fa4:	158d001c 	strne	r0, [sp, #28]
   34fa8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34fac:	e2855001 	add	r5, r5, #1
   34fb0:	e1530005 	cmp	r3, r5
   34fb4:	e2844004 	add	r4, r4, #4
   34fb8:	da00000a 	ble	34fe8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xc4>
   34fbc:	e5940000 	ldr	r0, [r4]
   34fc0:	e3500000 	cmp	r0, #0
   34fc4:	0afffff8 	beq	34fac <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x88>
   34fc8:	e5903000 	ldr	r3, [r0]
   34fcc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34fd0:	e1530007 	cmp	r3, r7
   34fd4:	0affffe5 	beq	34f70 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x4c>
   34fd8:	e12fff33 	blx	r3
   34fdc:	eaffffe4 	b	34f74 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x50>
   34fe0:	e3a03000 	mov	r3, #0
   34fe4:	e58d301c 	str	r3, [sp, #28]
   34fe8:	e59d001c 	ldr	r0, [sp, #28]
   34fec:	e28dd024 	add	sp, sp, #36	; 0x24
   34ff0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ff4:	ebffffb9 	bl	34ee0 <HwManager::busAccessAvailable()>
   34ff8:	e2200001 	eor	r0, r0, #1
   34ffc:	e6ef9070 	uxtb	r9, r0
   35000:	eaffffd2 	b	34f50 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x2c>
   35004:	000350ec 	.word	0x000350ec

00035008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   35008:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3500c:	e24dd024 	sub	sp, sp, #36	; 0x24
   35010:	e5dd9050 	ldrb	r9, [sp, #80]	; 0x50
   35014:	e58d1010 	str	r1, [sp, #16]
   35018:	e3590000 	cmp	r9, #0
   3501c:	e58d2014 	str	r2, [sp, #20]
   35020:	e58d3018 	str	r3, [sp, #24]
   35024:	e1a06000 	mov	r6, r0
   35028:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   3502c:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   35030:	0a000028 	beq	350d8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xd0>
   35034:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35038:	e3530000 	cmp	r3, #0
   3503c:	da000020 	ble	350c4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xbc>
   35040:	e3a05000 	mov	r5, #0
   35044:	e59f709c 	ldr	r7, [pc, #156]	; 350e8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xe0>
   35048:	e58d501c 	str	r5, [sp, #28]
   3504c:	e2864008 	add	r4, r6, #8
   35050:	ea000012 	b	350a0 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x98>
   35054:	e5d0000c 	ldrb	r0, [r0, #12]
   35058:	e3500000 	cmp	r0, #0
   3505c:	0a00000a 	beq	3508c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x84>
   35060:	e5940000 	ldr	r0, [r4]
   35064:	e59d3018 	ldr	r3, [sp, #24]
   35068:	e5902000 	ldr	r2, [r0]
   3506c:	e88d0c00 	stm	sp, {sl, fp}
   35070:	e58d9008 	str	r9, [sp, #8]
   35074:	e5928020 	ldr	r8, [r2, #32]
   35078:	e59d1010 	ldr	r1, [sp, #16]
   3507c:	e59d2014 	ldr	r2, [sp, #20]
   35080:	e12fff38 	blx	r8
   35084:	e31000fb 	tst	r0, #251	; 0xfb
   35088:	158d001c 	strne	r0, [sp, #28]
   3508c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35090:	e2855001 	add	r5, r5, #1
   35094:	e1530005 	cmp	r3, r5
   35098:	e2844004 	add	r4, r4, #4
   3509c:	da00000a 	ble	350cc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xc4>
   350a0:	e5940000 	ldr	r0, [r4]
   350a4:	e3500000 	cmp	r0, #0
   350a8:	0afffff8 	beq	35090 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x88>
   350ac:	e5903000 	ldr	r3, [r0]
   350b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   350b4:	e1530007 	cmp	r3, r7
   350b8:	0affffe5 	beq	35054 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x4c>
   350bc:	e12fff33 	blx	r3
   350c0:	eaffffe4 	b	35058 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x50>
   350c4:	e3a03000 	mov	r3, #0
   350c8:	e58d301c 	str	r3, [sp, #28]
   350cc:	e59d001c 	ldr	r0, [sp, #28]
   350d0:	e28dd024 	add	sp, sp, #36	; 0x24
   350d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350d8:	ebffff80 	bl	34ee0 <HwManager::busAccessAvailable()>
   350dc:	e2200001 	eor	r0, r0, #1
   350e0:	e6ef9070 	uxtb	r9, r0
   350e4:	eaffffd2 	b	35034 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x2c>
   350e8:	000350ec 	.word	0x000350ec

000350ec <HwBase::isEnabled()>:
   350ec:	e5d0000c 	ldrb	r0, [r0, #12]
   350f0:	e12fff1e 	bx	lr

000350f4 <HwBase::enable(bool)>:
   350f4:	e5c0100c 	strb	r1, [r0, #12]
   350f8:	e12fff1e 	bx	lr

000350fc <HwBase::name()>:
   350fc:	e5900010 	ldr	r0, [r0, #16]
   35100:	e12fff1e 	bx	lr

00035104 <HwRAMROM::setMirrorMode(bool)>:
   35104:	e5c01017 	strb	r1, [r0, #23]
   35108:	e12fff1e 	bx	lr

0003510c <HwRAMROM::configure(char const*)>:
   3510c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   35110:	e24dd0ec 	sub	sp, sp, #236	; 0xec
   35114:	e1a04000 	mov	r4, r0
   35118:	e28d2018 	add	r2, sp, #24
   3511c:	e3a03064 	mov	r3, #100	; 0x64
   35120:	e59f01d0 	ldr	r0, [pc, #464]	; 352f8 <HwRAMROM::configure(char const*)+0x1ec>
   35124:	e1a05001 	mov	r5, r1
   35128:	ebffe2a0 	bl	2dbb0 <jsonGetValueForKey>
   3512c:	e3500000 	cmp	r0, #0
   35130:	03a06601 	moveq	r6, #1048576	; 0x100000
   35134:	03a07b01 	moveq	r7, #1024	; 0x400
   35138:	1a00003d 	bne	35234 <HwRAMROM::configure(char const*)+0x128>
   3513c:	e3a03000 	mov	r3, #0
   35140:	e28d2080 	add	r2, sp, #128	; 0x80
   35144:	e5c43034 	strb	r3, [r4, #52]	; 0x34
   35148:	e1a01005 	mov	r1, r5
   3514c:	e3a03064 	mov	r3, #100	; 0x64
   35150:	e59f01a4 	ldr	r0, [pc, #420]	; 352fc <HwRAMROM::configure(char const*)+0x1f0>
   35154:	ebffe295 	bl	2dbb0 <jsonGetValueForKey>
   35158:	e3500000 	cmp	r0, #0
   3515c:	1a000050 	bne	352a4 <HwRAMROM::configure(char const*)+0x198>
   35160:	e3a02000 	mov	r2, #0
   35164:	e3a03064 	mov	r3, #100	; 0x64
   35168:	e5c42035 	strb	r2, [r4, #53]	; 0x35
   3516c:	e1a01005 	mov	r1, r5
   35170:	e28d2080 	add	r2, sp, #128	; 0x80
   35174:	e59f0184 	ldr	r0, [pc, #388]	; 35300 <HwRAMROM::configure(char const*)+0x1f4>
   35178:	ebffe28c 	bl	2dbb0 <jsonGetValueForKey>
   3517c:	e3500000 	cmp	r0, #0
   35180:	1a000039 	bne	3526c <HwRAMROM::configure(char const*)+0x160>
   35184:	e3a02001 	mov	r2, #1
   35188:	e3a03064 	mov	r3, #100	; 0x64
   3518c:	e5c42015 	strb	r2, [r4, #21]
   35190:	e1a01005 	mov	r1, r5
   35194:	e28d2080 	add	r2, sp, #128	; 0x80
   35198:	e59f0164 	ldr	r0, [pc, #356]	; 35304 <HwRAMROM::configure(char const*)+0x1f8>
   3519c:	ebffe283 	bl	2dbb0 <jsonGetValueForKey>
   351a0:	e3500000 	cmp	r0, #0
   351a4:	1a000029 	bne	35250 <HwRAMROM::configure(char const*)+0x144>
   351a8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   351ac:	e1530006 	cmp	r3, r6
   351b0:	0a000007 	beq	351d4 <HwRAMROM::configure(char const*)+0xc8>
   351b4:	e5940018 	ldr	r0, [r4, #24]
   351b8:	e5846030 	str	r6, [r4, #48]	; 0x30
   351bc:	e3500000 	cmp	r0, #0
   351c0:	e584601c 	str	r6, [r4, #28]
   351c4:	0a000002 	beq	351d4 <HwRAMROM::configure(char const*)+0xc8>
   351c8:	ebffd5e1 	bl	2a954 <operator delete[](void*)>
   351cc:	e3a03000 	mov	r3, #0
   351d0:	e5843018 	str	r3, [r4, #24]
   351d4:	ebffc4ad 	bl	26490 <CLogger::Get()>
   351d8:	e5d41015 	ldrb	r1, [r4, #21]
   351dc:	e5d4c034 	ldrb	ip, [r4, #52]	; 0x34
   351e0:	e59f3120 	ldr	r3, [pc, #288]	; 35308 <HwRAMROM::configure(char const*)+0x1fc>
   351e4:	e3510000 	cmp	r1, #0
   351e8:	e59f111c 	ldr	r1, [pc, #284]	; 3530c <HwRAMROM::configure(char const*)+0x200>
   351ec:	e59f211c 	ldr	r2, [pc, #284]	; 35310 <HwRAMROM::configure(char const*)+0x204>
   351f0:	11a02003 	movne	r2, r3
   351f4:	e35c0000 	cmp	ip, #0
   351f8:	e59f3114 	ldr	r3, [pc, #276]	; 35314 <HwRAMROM::configure(char const*)+0x208>
   351fc:	01a03001 	moveq	r3, r1
   35200:	e58d5014 	str	r5, [sp, #20]
   35204:	e5d41035 	ldrb	r1, [r4, #53]	; 0x35
   35208:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   3520c:	e88d000c 	stm	sp, {r2, r3}
   35210:	e58d1008 	str	r1, [sp, #8]
   35214:	e58d7010 	str	r7, [sp, #16]
   35218:	e58dc00c 	str	ip, [sp, #12]
   3521c:	e59f30f4 	ldr	r3, [pc, #244]	; 35318 <HwRAMROM::configure(char const*)+0x20c>
   35220:	e3a02004 	mov	r2, #4
   35224:	e59f10f0 	ldr	r1, [pc, #240]	; 3531c <HwRAMROM::configure(char const*)+0x210>
   35228:	ebffc3d5 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3522c:	e28dd0ec 	add	sp, sp, #236	; 0xec
   35230:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   35234:	e28d0018 	add	r0, sp, #24
   35238:	e3a0200a 	mov	r2, #10
   3523c:	e3a01000 	mov	r1, #0
   35240:	ebffd30a 	bl	29e70 <strtoul>
   35244:	e1a07000 	mov	r7, r0
   35248:	e1a06500 	lsl	r6, r0, #10
   3524c:	eaffffba 	b	3513c <HwRAMROM::configure(char const*)+0x30>
   35250:	e28d0080 	add	r0, sp, #128	; 0x80
   35254:	e59f10c4 	ldr	r1, [pc, #196]	; 35320 <HwRAMROM::configure(char const*)+0x214>
   35258:	ebffd1dc 	bl	299d0 <strcasecmp>
   3525c:	e3500000 	cmp	r0, #0
   35260:	13a03000 	movne	r3, #0
   35264:	15c43015 	strbne	r3, [r4, #21]
   35268:	eaffffce 	b	351a8 <HwRAMROM::configure(char const*)+0x9c>
   3526c:	e59f10b0 	ldr	r1, [pc, #176]	; 35324 <HwRAMROM::configure(char const*)+0x218>
   35270:	e28d0080 	add	r0, sp, #128	; 0x80
   35274:	ebffd1d5 	bl	299d0 <strcasecmp>
   35278:	e3500000 	cmp	r0, #0
   3527c:	03a03001 	moveq	r3, #1
   35280:	e59f10a0 	ldr	r1, [pc, #160]	; 35328 <HwRAMROM::configure(char const*)+0x21c>
   35284:	05c43035 	strbeq	r3, [r4, #53]	; 0x35
   35288:	e28d0080 	add	r0, sp, #128	; 0x80
   3528c:	ebffd1cf 	bl	299d0 <strcasecmp>
   35290:	e3500000 	cmp	r0, #0
   35294:	1a00000a 	bne	352c4 <HwRAMROM::configure(char const*)+0x1b8>
   35298:	e3a03004 	mov	r3, #4
   3529c:	e5c43035 	strb	r3, [r4, #53]	; 0x35
   352a0:	eaffffb7 	b	35184 <HwRAMROM::configure(char const*)+0x78>
   352a4:	e59f1080 	ldr	r1, [pc, #128]	; 3532c <HwRAMROM::configure(char const*)+0x220>
   352a8:	e28d0080 	add	r0, sp, #128	; 0x80
   352ac:	ebffd1c7 	bl	299d0 <strcasecmp>
   352b0:	e3500000 	cmp	r0, #0
   352b4:	1a000009 	bne	352e0 <HwRAMROM::configure(char const*)+0x1d4>
   352b8:	e3a03001 	mov	r3, #1
   352bc:	e5c43034 	strb	r3, [r4, #52]	; 0x34
   352c0:	eaffffa6 	b	35160 <HwRAMROM::configure(char const*)+0x54>
   352c4:	e59f1064 	ldr	r1, [pc, #100]	; 35330 <HwRAMROM::configure(char const*)+0x224>
   352c8:	e28d0080 	add	r0, sp, #128	; 0x80
   352cc:	ebffd1bf 	bl	299d0 <strcasecmp>
   352d0:	e3500000 	cmp	r0, #0
   352d4:	03a03008 	moveq	r3, #8
   352d8:	05c43035 	strbeq	r3, [r4, #53]	; 0x35
   352dc:	eaffffa8 	b	35184 <HwRAMROM::configure(char const*)+0x78>
   352e0:	e59f104c 	ldr	r1, [pc, #76]	; 35334 <HwRAMROM::configure(char const*)+0x228>
   352e4:	e28d0080 	add	r0, sp, #128	; 0x80
   352e8:	ebffd1b8 	bl	299d0 <strcasecmp>
   352ec:	e3500000 	cmp	r0, #0
   352f0:	0afffff0 	beq	352b8 <HwRAMROM::configure(char const*)+0x1ac>
   352f4:	eaffff99 	b	35160 <HwRAMROM::configure(char const*)+0x54>
   352f8:	0004838c 	.word	0x0004838c
   352fc:	00048398 	.word	0x00048398
   35300:	000483a8 	.word	0x000483a8
   35304:	000483e0 	.word	0x000483e0
   35308:	000481a0 	.word	0x000481a0
   3530c:	0004837c 	.word	0x0004837c
   35310:	000481a4 	.word	0x000481a4
   35314:	00048384 	.word	0x00048384
   35318:	000483f0 	.word	0x000483f0
   3531c:	00048434 	.word	0x00048434
   35320:	000483e8 	.word	0x000483e8
   35324:	000483b0 	.word	0x000483b0
   35328:	000483bc 	.word	0x000483bc
   3532c:	000483b4 	.word	0x000483b4
   35330:	000483cc 	.word	0x000483cc
   35334:	000483a0 	.word	0x000483a0

00035338 <HwRAMROM::setMemoryEmulationMode(bool)>:
   35338:	e5d03015 	ldrb	r3, [r0, #21]
   3533c:	e5c01014 	strb	r1, [r0, #20]
   35340:	e3530000 	cmp	r3, #0
   35344:	012fff1e 	bxeq	lr
   35348:	e92d4030 	push	{r4, r5, lr}
   3534c:	e1a05001 	mov	r5, r1
   35350:	e24dd00c 	sub	sp, sp, #12
   35354:	e1a04000 	mov	r4, r0
   35358:	ebffc44c 	bl	26490 <CLogger::Get()>
   3535c:	e3550000 	cmp	r5, #0
   35360:	0a00000a 	beq	35390 <HwRAMROM::setMemoryEmulationMode(bool)+0x58>
   35364:	e59f2060 	ldr	r2, [pc, #96]	; 353cc <HwRAMROM::setMemoryEmulationMode(bool)+0x94>
   35368:	e59f3060 	ldr	r3, [pc, #96]	; 353d0 <HwRAMROM::setMemoryEmulationMode(bool)+0x98>
   3536c:	e58d2000 	str	r2, [sp]
   35370:	e59f105c 	ldr	r1, [pc, #92]	; 353d4 <HwRAMROM::setMemoryEmulationMode(bool)+0x9c>
   35374:	e3a02004 	mov	r2, #4
   35378:	ebffc381 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3537c:	e3a01001 	mov	r1, #1
   35380:	e5940008 	ldr	r0, [r4, #8]
   35384:	e28dd00c 	add	sp, sp, #12
   35388:	e8bd4030 	pop	{r4, r5, lr}
   3538c:	eafff837 	b	33470 <BusAccess::busPagePinSetActive(bool)>
   35390:	e59f2040 	ldr	r2, [pc, #64]	; 353d8 <HwRAMROM::setMemoryEmulationMode(bool)+0xa0>
   35394:	e59f1038 	ldr	r1, [pc, #56]	; 353d4 <HwRAMROM::setMemoryEmulationMode(bool)+0x9c>
   35398:	e58d2000 	str	r2, [sp]
   3539c:	e59f302c 	ldr	r3, [pc, #44]	; 353d0 <HwRAMROM::setMemoryEmulationMode(bool)+0x98>
   353a0:	e3a02004 	mov	r2, #4
   353a4:	ebffc376 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   353a8:	e5d41016 	ldrb	r1, [r4, #22]
   353ac:	e3510000 	cmp	r1, #0
   353b0:	0a000001 	beq	353bc <HwRAMROM::setMemoryEmulationMode(bool)+0x84>
   353b4:	e28dd00c 	add	sp, sp, #12
   353b8:	e8bd8030 	pop	{r4, r5, pc}
   353bc:	e5940008 	ldr	r0, [r4, #8]
   353c0:	e28dd00c 	add	sp, sp, #12
   353c4:	e8bd4030 	pop	{r4, r5, lr}
   353c8:	eafff828 	b	33470 <BusAccess::busPagePinSetActive(bool)>
   353cc:	000481a0 	.word	0x000481a0
   353d0:	000481a8 	.word	0x000481a8
   353d4:	00048434 	.word	0x00048434
   353d8:	000481a4 	.word	0x000481a4

000353dc <HwRAMROM::pageOutForInjection(bool)>:
   353dc:	e5d02015 	ldrb	r2, [r0, #21]
   353e0:	e5c01016 	strb	r1, [r0, #22]
   353e4:	e3520000 	cmp	r2, #0
   353e8:	012fff1e 	bxeq	lr
   353ec:	e3510000 	cmp	r1, #0
   353f0:	1a000004 	bne	35408 <HwRAMROM::pageOutForInjection(bool)+0x2c>
   353f4:	e5d03014 	ldrb	r3, [r0, #20]
   353f8:	e3530000 	cmp	r3, #0
   353fc:	112fff1e 	bxne	lr
   35400:	e5900008 	ldr	r0, [r0, #8]
   35404:	eafff819 	b	33470 <BusAccess::busPagePinSetActive(bool)>
   35408:	e5900008 	ldr	r0, [r0, #8]
   3540c:	e3a01001 	mov	r1, #1
   35410:	eafff816 	b	33470 <BusAccess::busPagePinSetActive(bool)>

00035414 <HwRAMROM::HwRAMROM(HwManager&, BusAccess&)>:
   35414:	e92d4070 	push	{r4, r5, r6, lr}
   35418:	e1a04000 	mov	r4, r0
   3541c:	e3a05801 	mov	r5, #65536	; 0x10000
   35420:	eb0002b7 	bl	35f04 <HwBase::HwBase(HwManager&, BusAccess&)>
   35424:	e3a03000 	mov	r3, #0
   35428:	e3a02601 	mov	r2, #1048576	; 0x100000
   3542c:	e3a0c078 	mov	ip, #120	; 0x78
   35430:	e3a0007c 	mov	r0, #124	; 0x7c
   35434:	e3a01001 	mov	r1, #1
   35438:	e59fe060 	ldr	lr, [pc, #96]	; 354a0 <HwRAMROM::HwRAMROM(HwManager&, BusAccess&)+0x8c>
   3543c:	e59f6060 	ldr	r6, [pc, #96]	; 354a4 <HwRAMROM::HwRAMROM(HwManager&, BusAccess&)+0x90>
   35440:	e59ee000 	ldr	lr, [lr]
   35444:	e5840040 	str	r0, [r4, #64]	; 0x40
   35448:	e5846000 	str	r6, [r4]
   3544c:	e5845028 	str	r5, [r4, #40]	; 0x28
   35450:	e584e010 	str	lr, [r4, #16]
   35454:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   35458:	e5c41015 	strb	r1, [r4, #21]
   3545c:	e5842030 	str	r2, [r4, #48]	; 0x30
   35460:	e584201c 	str	r2, [r4, #28]
   35464:	e5843018 	str	r3, [r4, #24]
   35468:	e5c43020 	strb	r3, [r4, #32]
   3546c:	e5843024 	str	r3, [r4, #36]	; 0x24
   35470:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   35474:	e5c43014 	strb	r3, [r4, #20]
   35478:	e5c43034 	strb	r3, [r4, #52]	; 0x34
   3547c:	e5c43035 	strb	r3, [r4, #53]	; 0x35
   35480:	e5c4303a 	strb	r3, [r4, #58]	; 0x3a
   35484:	e5c43036 	strb	r3, [r4, #54]	; 0x36
   35488:	e5c43037 	strb	r3, [r4, #55]	; 0x37
   3548c:	e5c43038 	strb	r3, [r4, #56]	; 0x38
   35490:	e5c43039 	strb	r3, [r4, #57]	; 0x39
   35494:	e5c43016 	strb	r3, [r4, #22]
   35498:	e1a00004 	mov	r0, r4
   3549c:	e8bd8070 	pop	{r4, r5, r6, pc}
   354a0:	00049d98 	.word	0x00049d98
   354a4:	00048330 	.word	0x00048330

000354a8 <HwRAMROM::hwReset()>:
   354a8:	e12fff1e 	bx	lr

000354ac <HwRAMROM::getMirrorMemory()>:
   354ac:	e92d4010 	push	{r4, lr}
   354b0:	e1a04000 	mov	r4, r0
   354b4:	e5900018 	ldr	r0, [r0, #24]
   354b8:	e24dd008 	sub	sp, sp, #8
   354bc:	e3500000 	cmp	r0, #0
   354c0:	0a000001 	beq	354cc <HwRAMROM::getMirrorMemory()+0x20>
   354c4:	e28dd008 	add	sp, sp, #8
   354c8:	e8bd8010 	pop	{r4, pc}
   354cc:	e594001c 	ldr	r0, [r4, #28]
   354d0:	ebffd518 	bl	2a938 <operator new[](unsigned int)>
   354d4:	e5d43020 	ldrb	r3, [r4, #32]
   354d8:	e5840018 	str	r0, [r4, #24]
   354dc:	e3530000 	cmp	r3, #0
   354e0:	1afffff7 	bne	354c4 <HwRAMROM::getMirrorMemory()+0x18>
   354e4:	e3a03001 	mov	r3, #1
   354e8:	e5c43020 	strb	r3, [r4, #32]
   354ec:	ebffc3e7 	bl	26490 <CLogger::Get()>
   354f0:	e594c018 	ldr	ip, [r4, #24]
   354f4:	e59f1028 	ldr	r1, [pc, #40]	; 35524 <HwRAMROM::getMirrorMemory()+0x78>
   354f8:	e35c0000 	cmp	ip, #0
   354fc:	e59f3024 	ldr	r3, [pc, #36]	; 35528 <HwRAMROM::getMirrorMemory()+0x7c>
   35500:	11a03001 	movne	r3, r1
   35504:	e594201c 	ldr	r2, [r4, #28]
   35508:	e59f101c 	ldr	r1, [pc, #28]	; 3552c <HwRAMROM::getMirrorMemory()+0x80>
   3550c:	e88d000c 	stm	sp, {r2, r3}
   35510:	e59f3018 	ldr	r3, [pc, #24]	; 35530 <HwRAMROM::getMirrorMemory()+0x84>
   35514:	e3a02004 	mov	r2, #4
   35518:	ebffc319 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3551c:	e5940018 	ldr	r0, [r4, #24]
   35520:	eaffffe7 	b	354c4 <HwRAMROM::getMirrorMemory()+0x18>
   35524:	00048440 	.word	0x00048440
   35528:	00048444 	.word	0x00048444
   3552c:	00048434 	.word	0x00048434
   35530:	0004844c 	.word	0x0004844c

00035534 <HwRAMROM::mirrorClone()>:
   35534:	e92d4030 	push	{r4, r5, lr}
   35538:	e5d05014 	ldrb	r5, [r0, #20]
   3553c:	e24dd00c 	sub	sp, sp, #12
   35540:	e3550000 	cmp	r5, #0
   35544:	0a000001 	beq	35550 <HwRAMROM::mirrorClone()+0x1c>
   35548:	e28dd00c 	add	sp, sp, #12
   3554c:	e8bd8030 	pop	{r4, r5, pc}
   35550:	e1a04000 	mov	r4, r0
   35554:	ebffffd4 	bl	354ac <HwRAMROM::getMirrorMemory()>
   35558:	e2502000 	subs	r2, r0, #0
   3555c:	0afffff9 	beq	35548 <HwRAMROM::mirrorClone()+0x14>
   35560:	e594301c 	ldr	r3, [r4, #28]
   35564:	e5940008 	ldr	r0, [r4, #8]
   35568:	e1a01005 	mov	r1, r5
   3556c:	e58d5004 	str	r5, [sp, #4]
   35570:	e58d5000 	str	r5, [sp]
   35574:	ebfff6e9 	bl	33120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35578:	e28dd00c 	add	sp, sp, #12
   3557c:	e8bd8030 	pop	{r4, r5, pc}

00035580 <HwRAMROM::getMirrorMemForAddr(unsigned long)>:
   35580:	e92d4010 	push	{r4, lr}
   35584:	e1a04001 	mov	r4, r1
   35588:	ebffffc7 	bl	354ac <HwRAMROM::getMirrorMemory()>
   3558c:	e3500000 	cmp	r0, #0
   35590:	10800004 	addne	r0, r0, r4
   35594:	e8bd8010 	pop	{r4, pc}

00035598 <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35598:	e3130004 	tst	r3, #4
   3559c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   355a0:	e1a05003 	mov	r5, r3
   355a4:	e1a06000 	mov	r6, r0
   355a8:	e1a04001 	mov	r4, r1
   355ac:	e1a07002 	mov	r7, r2
   355b0:	0a000013 	beq	35604 <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   355b4:	e5d03014 	ldrb	r3, [r0, #20]
   355b8:	e3530000 	cmp	r3, #0
   355bc:	1a000002 	bne	355cc <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   355c0:	e5d03017 	ldrb	r3, [r0, #23]
   355c4:	e3530000 	cmp	r3, #0
   355c8:	0a00000d 	beq	35604 <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   355cc:	e1a00006 	mov	r0, r6
   355d0:	ebffffb5 	bl	354ac <HwRAMROM::getMirrorMemory()>
   355d4:	e3500000 	cmp	r0, #0
   355d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   355dc:	e3150002 	tst	r5, #2
   355e0:	17c07004 	strbne	r7, [r0, r4]
   355e4:	1a000006 	bne	35604 <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   355e8:	e3150001 	tst	r5, #1
   355ec:	0a000004 	beq	35604 <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   355f0:	e5d63017 	ldrb	r3, [r6, #23]
   355f4:	e3530000 	cmp	r3, #0
   355f8:	07d03004 	ldrbeq	r3, [r0, r4]
   355fc:	059d2018 	ldreq	r2, [sp, #24]
   35600:	01c230b0 	strheq	r3, [r2]
   35604:	e3150008 	tst	r5, #8
   35608:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3560c:	e596303c 	ldr	r3, [r6, #60]	; 0x3c
   35610:	e6ef1074 	uxtb	r1, r4
   35614:	e1510003 	cmp	r1, r3
   35618:	3a000007 	bcc	3563c <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa4>
   3561c:	e2832004 	add	r2, r3, #4
   35620:	e1510002 	cmp	r1, r2
   35624:	2a000004 	bcs	3563c <HwRAMROM::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa4>
   35628:	e3150002 	tst	r5, #2
   3562c:	10411003 	subne	r1, r1, r3
   35630:	10861001 	addne	r1, r6, r1
   35634:	15c17036 	strbne	r7, [r1, #54]	; 0x36
   35638:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3563c:	e5963040 	ldr	r3, [r6, #64]	; 0x40
   35640:	e1510003 	cmp	r1, r3
   35644:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   35648:	e3150002 	tst	r5, #2
   3564c:	12077001 	andne	r7, r7, #1
   35650:	15c6703a 	strbne	r7, [r6, #58]	; 0x3a
   35654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00035658 <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)>:
   35658:	e92d4030 	push	{r4, r5, lr}
   3565c:	e3510000 	cmp	r1, #0
   35660:	e24dd014 	sub	sp, sp, #20
   35664:	e28d4010 	add	r4, sp, #16
   35668:	e1a05000 	mov	r5, r0
   3566c:	1a000016 	bne	356cc <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)+0x74>
   35670:	e3a03001 	mov	r3, #1
   35674:	e59f2084 	ldr	r2, [pc, #132]	; 35700 <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)+0xa8>
   35678:	e5900008 	ldr	r0, [r0, #8]
   3567c:	e5922050 	ldr	r2, [r2, #80]	; 0x50
   35680:	e58d1000 	str	r1, [sp]
   35684:	e5242004 	str	r2, [r4, #-4]!
   35688:	e1a02004 	mov	r2, r4
   3568c:	e58d3004 	str	r3, [sp, #4]
   35690:	e3a01078 	mov	r1, #120	; 0x78
   35694:	e3a03004 	mov	r3, #4
   35698:	ebfff64f 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   3569c:	e3a0c001 	mov	ip, #1
   356a0:	e3a01000 	mov	r1, #0
   356a4:	e5950008 	ldr	r0, [r5, #8]
   356a8:	e1a02004 	mov	r2, r4
   356ac:	e58d1000 	str	r1, [sp]
   356b0:	e58dc004 	str	ip, [sp, #4]
   356b4:	e1a0300c 	mov	r3, ip
   356b8:	e3a0107c 	mov	r1, #124	; 0x7c
   356bc:	e5cdc00c 	strb	ip, [sp, #12]
   356c0:	ebfff645 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   356c4:	e28dd014 	add	sp, sp, #20
   356c8:	e8bd8030 	pop	{r4, r5, pc}
   356cc:	e3a01001 	mov	r1, #1
   356d0:	e3a03000 	mov	r3, #0
   356d4:	e59f2024 	ldr	r2, [pc, #36]	; 35700 <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)+0xa8>
   356d8:	e5900008 	ldr	r0, [r0, #8]
   356dc:	e592204c 	ldr	r2, [r2, #76]	; 0x4c
   356e0:	e58d1004 	str	r1, [sp, #4]
   356e4:	e5242004 	str	r2, [r4, #-4]!
   356e8:	e1a02004 	mov	r2, r4
   356ec:	e58d3000 	str	r3, [sp]
   356f0:	e3a01078 	mov	r1, #120	; 0x78
   356f4:	e3a03004 	mov	r3, #4
   356f8:	ebfff637 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   356fc:	eaffffe6 	b	3569c <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)+0x44>
   35700:	00048328 	.word	0x00048328

00035704 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   35704:	e92d4030 	push	{r4, r5, lr}
   35708:	e2411001 	sub	r1, r1, #1
   3570c:	e24dd014 	sub	sp, sp, #20
   35710:	e1a04000 	mov	r4, r0
   35714:	e3510007 	cmp	r1, #7
   35718:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   3571c:	ea00001d 	b	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   35720:	000357d0 	.word	0x000357d0
   35724:	00035798 	.word	0x00035798
   35728:	00035798 	.word	0x00035798
   3572c:	00035740 	.word	0x00035740
   35730:	00035798 	.word	0x00035798
   35734:	00035798 	.word	0x00035798
   35738:	000357b8 	.word	0x000357b8
   3573c:	000357a0 	.word	0x000357a0
   35740:	e3520001 	cmp	r2, #1
   35744:	0a00002b 	beq	357f8 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xf4>
   35748:	e3520003 	cmp	r2, #3
   3574c:	1a000011 	bne	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   35750:	e5d01035 	ldrb	r1, [r0, #53]	; 0x35
   35754:	e3110001 	tst	r1, #1
   35758:	0a000008 	beq	35780 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x7c>
   3575c:	e3a03001 	mov	r3, #1
   35760:	e28d2010 	add	r2, sp, #16
   35764:	e5900008 	ldr	r0, [r0, #8]
   35768:	e5623004 	strb	r3, [r2, #-4]!
   3576c:	e3a0107e 	mov	r1, #126	; 0x7e
   35770:	e58d3004 	str	r3, [sp, #4]
   35774:	e58d3000 	str	r3, [sp]
   35778:	ebfff617 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   3577c:	e5d41035 	ldrb	r1, [r4, #53]	; 0x35
   35780:	e311000c 	tst	r1, #12
   35784:	0a000003 	beq	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   35788:	e1a011a1 	lsr	r1, r1, #3
   3578c:	e2011001 	and	r1, r1, #1
   35790:	e1a00004 	mov	r0, r4
   35794:	ebffffaf 	bl	35658 <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)>
   35798:	e28dd014 	add	sp, sp, #20
   3579c:	e8bd8030 	pop	{r4, r5, pc}
   357a0:	e5903000 	ldr	r3, [r0]
   357a4:	e3a01000 	mov	r1, #0
   357a8:	e5933010 	ldr	r3, [r3, #16]
   357ac:	e12fff33 	blx	r3
   357b0:	e28dd014 	add	sp, sp, #20
   357b4:	e8bd8030 	pop	{r4, r5, pc}
   357b8:	e5903000 	ldr	r3, [r0]
   357bc:	e3a01001 	mov	r1, #1
   357c0:	e5933010 	ldr	r3, [r3, #16]
   357c4:	e12fff33 	blx	r3
   357c8:	e28dd014 	add	sp, sp, #20
   357cc:	e8bd8030 	pop	{r4, r5, pc}
   357d0:	e5d03035 	ldrb	r3, [r0, #53]	; 0x35
   357d4:	e313000d 	tst	r3, #13
   357d8:	0affffee 	beq	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   357dc:	e5903004 	ldr	r3, [r0, #4]
   357e0:	e3a02003 	mov	r2, #3
   357e4:	e5900008 	ldr	r0, [r0, #8]
   357e8:	e5931034 	ldr	r1, [r3, #52]	; 0x34
   357ec:	ebffeda7 	bl	30e90 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   357f0:	e28dd014 	add	sp, sp, #20
   357f4:	e8bd8030 	pop	{r4, r5, pc}
   357f8:	e5d03017 	ldrb	r3, [r0, #23]
   357fc:	e3530000 	cmp	r3, #0
   35800:	0affffe4 	beq	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   35804:	e5905008 	ldr	r5, [r0, #8]
   35808:	ebffff27 	bl	354ac <HwRAMROM::getMirrorMemory()>
   3580c:	e3a01000 	mov	r1, #0
   35810:	e594301c 	ldr	r3, [r4, #28]
   35814:	e1a02000 	mov	r2, r0
   35818:	e58d1004 	str	r1, [sp, #4]
   3581c:	e1a00005 	mov	r0, r5
   35820:	e58d1000 	str	r1, [sp]
   35824:	ebfff63d 	bl	33120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35828:	eaffffda 	b	35798 <HwRAMROM::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>

0003582c <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   3582c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35830:	e3a09001 	mov	r9, #1
   35834:	e3a04000 	mov	r4, #0
   35838:	e1a05003 	mov	r5, r3
   3583c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   35840:	e28dc038 	add	ip, sp, #56	; 0x38
   35844:	e56c900c 	strb	r9, [ip, #-12]!
   35848:	e1a07002 	mov	r7, r2
   3584c:	e1a0200c 	mov	r2, ip
   35850:	e5ddc060 	ldrb	ip, [sp, #96]	; 0x60
   35854:	e1a08000 	mov	r8, r0
   35858:	e58dc014 	str	ip, [sp, #20]
   3585c:	e5ddc064 	ldrb	ip, [sp, #100]	; 0x64
   35860:	e5900008 	ldr	r0, [r0, #8]
   35864:	e1a06001 	mov	r6, r1
   35868:	e58d9004 	str	r9, [sp, #4]
   3586c:	e1a03009 	mov	r3, r9
   35870:	e58d4000 	str	r4, [sp]
   35874:	e3a0107c 	mov	r1, #124	; 0x7c
   35878:	e58dc00c 	str	ip, [sp, #12]
   3587c:	ebfff5d6 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35880:	e1550004 	cmp	r5, r4
   35884:	1a000019 	bne	358f0 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0xc4>
   35888:	e28d3034 	add	r3, sp, #52	; 0x34
   3588c:	e58d3010 	str	r3, [sp, #16]
   35890:	e3a0b000 	mov	fp, #0
   35894:	e3a04001 	mov	r4, #1
   35898:	e3a05000 	mov	r5, #0
   3589c:	e5d8303a 	ldrb	r3, [r8, #58]	; 0x3a
   358a0:	e28d2038 	add	r2, sp, #56	; 0x38
   358a4:	e5623008 	strb	r3, [r2, #-8]!
   358a8:	e5980008 	ldr	r0, [r8, #8]
   358ac:	e1a03004 	mov	r3, r4
   358b0:	e58d4004 	str	r4, [sp, #4]
   358b4:	e58d5000 	str	r5, [sp]
   358b8:	e3a0107c 	mov	r1, #124	; 0x7c
   358bc:	ebfff5c6 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   358c0:	e5d8c036 	ldrb	ip, [r8, #54]	; 0x36
   358c4:	e5980008 	ldr	r0, [r8, #8]
   358c8:	e1a03004 	mov	r3, r4
   358cc:	e58d4004 	str	r4, [sp, #4]
   358d0:	e58d5000 	str	r5, [sp]
   358d4:	e59d2010 	ldr	r2, [sp, #16]
   358d8:	e3a01078 	mov	r1, #120	; 0x78
   358dc:	e5cdc034 	strb	ip, [sp, #52]	; 0x34
   358e0:	ebfff5bd 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   358e4:	e1a0000b 	mov	r0, fp
   358e8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   358ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   358f0:	e1a03906 	lsl	r3, r6, #18
   358f4:	e1a03923 	lsr	r3, r3, #18
   358f8:	e245a001 	sub	sl, r5, #1
   358fc:	e08aa003 	add	sl, sl, r3
   35900:	e58d3024 	str	r3, [sp, #36]	; 0x24
   35904:	e1a06726 	lsr	r6, r6, #14
   35908:	e2633901 	rsb	r3, r3, #16384	; 0x4000
   3590c:	e1a0a72a 	lsr	sl, sl, #14
   35910:	e6ef2076 	uxtb	r2, r6
   35914:	e58d3020 	str	r3, [sp, #32]
   35918:	e28d3034 	add	r3, sp, #52	; 0x34
   3591c:	e58d901c 	str	r9, [sp, #28]
   35920:	e58d2018 	str	r2, [sp, #24]
   35924:	e1a09004 	mov	r9, r4
   35928:	e28aa001 	add	sl, sl, #1
   3592c:	e58d3010 	str	r3, [sp, #16]
   35930:	ea00000e 	b	35970 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x144>
   35934:	e59d3014 	ldr	r3, [sp, #20]
   35938:	e5980008 	ldr	r0, [r8, #8]
   3593c:	e1a0100b 	mov	r1, fp
   35940:	e58d3004 	str	r3, [sp, #4]
   35944:	e58d9000 	str	r9, [sp]
   35948:	e1a03006 	mov	r3, r6
   3594c:	e1a02007 	mov	r2, r7
   35950:	ebfff5a1 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35954:	e3500000 	cmp	r0, #0
   35958:	e2844001 	add	r4, r4, #1
   3595c:	1a000028 	bne	35a04 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x1d8>
   35960:	e15a0004 	cmp	sl, r4
   35964:	e0877006 	add	r7, r7, r6
   35968:	e0455006 	sub	r5, r5, r6
   3596c:	0affffc7 	beq	35890 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x64>
   35970:	e59d3020 	ldr	r3, [sp, #32]
   35974:	e35a0001 	cmp	sl, #1
   35978:	11a06003 	movne	r6, r3
   3597c:	e59d3018 	ldr	r3, [sp, #24]
   35980:	01a06005 	moveq	r6, r5
   35984:	e083c004 	add	ip, r3, r4
   35988:	e3540000 	cmp	r4, #0
   3598c:	e6efc07c 	uxtb	ip, ip
   35990:	0a00001d 	beq	35a0c <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x1e0>
   35994:	e3550901 	cmp	r5, #16384	; 0x4000
   35998:	31a06005 	movcc	r6, r5
   3599c:	23a06901 	movcs	r6, #16384	; 0x4000
   359a0:	e1a0b009 	mov	fp, r9
   359a4:	e59d301c 	ldr	r3, [sp, #28]
   359a8:	e5980008 	ldr	r0, [r8, #8]
   359ac:	e59d2010 	ldr	r2, [sp, #16]
   359b0:	e58d3004 	str	r3, [sp, #4]
   359b4:	e58d9000 	str	r9, [sp]
   359b8:	e3a03001 	mov	r3, #1
   359bc:	e3a01078 	mov	r1, #120	; 0x78
   359c0:	e5cdc034 	strb	ip, [sp, #52]	; 0x34
   359c4:	ebfff584 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   359c8:	e59d300c 	ldr	r3, [sp, #12]
   359cc:	e3530000 	cmp	r3, #0
   359d0:	1affffd7 	bne	35934 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x108>
   359d4:	e59d3014 	ldr	r3, [sp, #20]
   359d8:	e1a0100b 	mov	r1, fp
   359dc:	e58d3004 	str	r3, [sp, #4]
   359e0:	e59d300c 	ldr	r3, [sp, #12]
   359e4:	e1a02007 	mov	r2, r7
   359e8:	e58d3000 	str	r3, [sp]
   359ec:	e5980008 	ldr	r0, [r8, #8]
   359f0:	e1a03006 	mov	r3, r6
   359f4:	ebfff5c9 	bl	33120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   359f8:	e3500000 	cmp	r0, #0
   359fc:	e2844001 	add	r4, r4, #1
   35a00:	0affffd6 	beq	35960 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x134>
   35a04:	e1a0b000 	mov	fp, r0
   35a08:	eaffffa1 	b	35894 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   35a0c:	e59db024 	ldr	fp, [sp, #36]	; 0x24
   35a10:	eaffffe3 	b	359a4 <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)+0x178>

00035a14 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   35a14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a18:	e5d0c034 	ldrb	ip, [r0, #52]	; 0x34
   35a1c:	e24dd014 	sub	sp, sp, #20
   35a20:	e35c0000 	cmp	ip, #0
   35a24:	e1a04000 	mov	r4, r0
   35a28:	e5ddc038 	ldrb	ip, [sp, #56]	; 0x38
   35a2c:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
   35a30:	e5dd8040 	ldrb	r8, [sp, #64]	; 0x40
   35a34:	1a00002d 	bne	35af0 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xdc>
   35a38:	e0810003 	add	r0, r1, r3
   35a3c:	e3500801 	cmp	r0, #65536	; 0x10000
   35a40:	e1a06001 	mov	r6, r1
   35a44:	e1a07003 	mov	r7, r3
   35a48:	8a000009 	bhi	35a74 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x60>
   35a4c:	e3580000 	cmp	r8, #0
   35a50:	e5940008 	ldr	r0, [r4, #8]
   35a54:	e58d9004 	str	r9, [sp, #4]
   35a58:	e58dc000 	str	ip, [sp]
   35a5c:	0a00002d 	beq	35b18 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x104>
   35a60:	ebfff55d 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35a64:	e1a05000 	mov	r5, r0
   35a68:	e1a00005 	mov	r0, r5
   35a6c:	e28dd014 	add	sp, sp, #20
   35a70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a74:	e35c0000 	cmp	ip, #0
   35a78:	e1a0a002 	mov	sl, r2
   35a7c:	0a00002a 	beq	35b2c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x118>
   35a80:	e5940008 	ldr	r0, [r4, #8]
   35a84:	ebfff53c 	bl	32f7c <BusAccess::controlRequestAndTake()>
   35a88:	e2505000 	subs	r5, r0, #0
   35a8c:	1a000048 	bne	35bb4 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x1a0>
   35a90:	e3a0b001 	mov	fp, #1
   35a94:	e28d2010 	add	r2, sp, #16
   35a98:	e562b008 	strb	fp, [r2, #-8]!
   35a9c:	e5940008 	ldr	r0, [r4, #8]
   35aa0:	e1a0300b 	mov	r3, fp
   35aa4:	e88d0820 	stm	sp, {r5, fp}
   35aa8:	e3a0107e 	mov	r1, #126	; 0x7e
   35aac:	ebfff54a 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35ab0:	e1a03007 	mov	r3, r7
   35ab4:	e58d8004 	str	r8, [sp, #4]
   35ab8:	e58d9000 	str	r9, [sp]
   35abc:	e1a0200a 	mov	r2, sl
   35ac0:	e1a01006 	mov	r1, r6
   35ac4:	e1a00004 	mov	r0, r4
   35ac8:	ebffff57 	bl	3582c <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35acc:	e5d43035 	ldrb	r3, [r4, #53]	; 0x35
   35ad0:	e1a05000 	mov	r5, r0
   35ad4:	e013300b 	ands	r3, r3, fp
   35ad8:	0a00003b 	beq	35bcc <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x1b8>
   35adc:	e5940008 	ldr	r0, [r4, #8]
   35ae0:	ebfff3ff 	bl	32ae4 <BusAccess::controlRelease()>
   35ae4:	e1a00005 	mov	r0, r5
   35ae8:	e28dd014 	add	sp, sp, #20
   35aec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35af0:	e58d8004 	str	r8, [sp, #4]
   35af4:	e58d9000 	str	r9, [sp]
   35af8:	ebffff4b 	bl	3582c <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35afc:	e5d41035 	ldrb	r1, [r4, #53]	; 0x35
   35b00:	e311000c 	tst	r1, #12
   35b04:	03a05004 	moveq	r5, #4
   35b08:	1a000023 	bne	35b9c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x188>
   35b0c:	e1a00005 	mov	r0, r5
   35b10:	e28dd014 	add	sp, sp, #20
   35b14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b18:	ebfff580 	bl	33120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35b1c:	e1a05000 	mov	r5, r0
   35b20:	e1a00005 	mov	r0, r5
   35b24:	e28dd014 	add	sp, sp, #20
   35b28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b2c:	e3a0b001 	mov	fp, #1
   35b30:	e28d2010 	add	r2, sp, #16
   35b34:	e562b008 	strb	fp, [r2, #-8]!
   35b38:	e5940008 	ldr	r0, [r4, #8]
   35b3c:	e1a0300b 	mov	r3, fp
   35b40:	e58dc000 	str	ip, [sp]
   35b44:	e3a0107e 	mov	r1, #126	; 0x7e
   35b48:	e58db004 	str	fp, [sp, #4]
   35b4c:	ebfff522 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35b50:	e1a03007 	mov	r3, r7
   35b54:	e58d8004 	str	r8, [sp, #4]
   35b58:	e58d9000 	str	r9, [sp]
   35b5c:	e1a0200a 	mov	r2, sl
   35b60:	e1a01006 	mov	r1, r6
   35b64:	e1a00004 	mov	r0, r4
   35b68:	ebffff2f 	bl	3582c <HwRAMROM::readWriteBankedMemory(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35b6c:	e5d43035 	ldrb	r3, [r4, #53]	; 0x35
   35b70:	e1a05000 	mov	r5, r0
   35b74:	e013300b 	ands	r3, r3, fp
   35b78:	1affffe3 	bne	35b0c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   35b7c:	e28d2010 	add	r2, sp, #16
   35b80:	e5623004 	strb	r3, [r2, #-4]!
   35b84:	e5940008 	ldr	r0, [r4, #8]
   35b88:	e3a0107e 	mov	r1, #126	; 0x7e
   35b8c:	e88d0808 	stm	sp, {r3, fp}
   35b90:	e1a0300b 	mov	r3, fp
   35b94:	ebfff510 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35b98:	eaffffdb 	b	35b0c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   35b9c:	e1a011a1 	lsr	r1, r1, #3
   35ba0:	e2011001 	and	r1, r1, #1
   35ba4:	e1a00004 	mov	r0, r4
   35ba8:	ebfffeaa 	bl	35658 <HwRAMROM::setBanksToEmulate64KAddrSpace(bool)>
   35bac:	e3a05004 	mov	r5, #4
   35bb0:	eaffffd5 	b	35b0c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   35bb4:	ebffc235 	bl	26490 <CLogger::Get()>
   35bb8:	e59f302c 	ldr	r3, [pc, #44]	; 35bec <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x1d8>
   35bbc:	e3a02004 	mov	r2, #4
   35bc0:	e59f1028 	ldr	r1, [pc, #40]	; 35bf0 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x1dc>
   35bc4:	ebffc16e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35bc8:	eaffffcf 	b	35b0c <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   35bcc:	e28d2010 	add	r2, sp, #16
   35bd0:	e5623004 	strb	r3, [r2, #-4]!
   35bd4:	e5940008 	ldr	r0, [r4, #8]
   35bd8:	e3a0107e 	mov	r1, #126	; 0x7e
   35bdc:	e88d0808 	stm	sp, {r3, fp}
   35be0:	e1a0300b 	mov	r3, fp
   35be4:	ebfff4fc 	bl	32fdc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   35be8:	eaffffbb 	b	35adc <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xc8>
   35bec:	00048470 	.word	0x00048470
   35bf0:	00048434 	.word	0x00048434

00035bf4 <HwRAMROM::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   35bf4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35bf8:	e5ddc020 	ldrb	ip, [sp, #32]
   35bfc:	e5dde018 	ldrb	lr, [sp, #24]
   35c00:	e35c0000 	cmp	ip, #0
   35c04:	e5ddc01c 	ldrb	ip, [sp, #28]
   35c08:	0a000003 	beq	35c1c <HwRAMROM::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x28>
   35c0c:	e35c0000 	cmp	ip, #0
   35c10:	0a000007 	beq	35c34 <HwRAMROM::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x40>
   35c14:	e3a00004 	mov	r0, #4
   35c18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35c1c:	e3a04001 	mov	r4, #1
   35c20:	e58dc01c 	str	ip, [sp, #28]
   35c24:	e58de018 	str	lr, [sp, #24]
   35c28:	e58d4020 	str	r4, [sp, #32]
   35c2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   35c30:	eaffff77 	b	35a14 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   35c34:	e1a06000 	mov	r6, r0
   35c38:	e1a05001 	mov	r5, r1
   35c3c:	e1a07002 	mov	r7, r2
   35c40:	e1a04003 	mov	r4, r3
   35c44:	ebfffe18 	bl	354ac <HwRAMROM::getMirrorMemory()>
   35c48:	e3500000 	cmp	r0, #0
   35c4c:	0a00000b 	beq	35c80 <HwRAMROM::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x8c>
   35c50:	e596301c 	ldr	r3, [r6, #28]
   35c54:	e0852004 	add	r2, r5, r4
   35c58:	e1520003 	cmp	r2, r3
   35c5c:	80434005 	subhi	r4, r3, r5
   35c60:	e3540000 	cmp	r4, #0
   35c64:	0a000003 	beq	35c78 <HwRAMROM::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x84>
   35c68:	e1a02004 	mov	r2, r4
   35c6c:	e1a01007 	mov	r1, r7
   35c70:	e0800005 	add	r0, r0, r5
   35c74:	ebffd155 	bl	2a1d0 <memcpy>
   35c78:	e3a00000 	mov	r0, #0
   35c7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35c80:	e3a00001 	mov	r0, #1
   35c84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00035c88 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   35c88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35c8c:	e5ddc020 	ldrb	ip, [sp, #32]
   35c90:	e5dd7018 	ldrb	r7, [sp, #24]
   35c94:	e35c0000 	cmp	ip, #0
   35c98:	e5dde01c 	ldrb	lr, [sp, #28]
   35c9c:	0a000003 	beq	35cb0 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x28>
   35ca0:	e35e0000 	cmp	lr, #0
   35ca4:	0a000006 	beq	35cc4 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x3c>
   35ca8:	e3a00004 	mov	r0, #4
   35cac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35cb0:	e58dc020 	str	ip, [sp, #32]
   35cb4:	e58de01c 	str	lr, [sp, #28]
   35cb8:	e58d7018 	str	r7, [sp, #24]
   35cbc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   35cc0:	eaffff53 	b	35a14 <HwRAMROM::physicalBlockAccess(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   35cc4:	e1a06000 	mov	r6, r0
   35cc8:	e1a05001 	mov	r5, r1
   35ccc:	e1a08002 	mov	r8, r2
   35cd0:	e1a04003 	mov	r4, r3
   35cd4:	ebfffdf4 	bl	354ac <HwRAMROM::getMirrorMemory()>
   35cd8:	e2507000 	subs	r7, r0, #0
   35cdc:	0a000017 	beq	35d40 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xb8>
   35ce0:	e596301c 	ldr	r3, [r6, #28]
   35ce4:	e1540003 	cmp	r4, r3
   35ce8:	21a04003 	movcs	r4, r3
   35cec:	e0852004 	add	r2, r5, r4
   35cf0:	e1530002 	cmp	r3, r2
   35cf4:	21a06004 	movcs	r6, r4
   35cf8:	30436005 	subcc	r6, r3, r5
   35cfc:	e3560000 	cmp	r6, #0
   35d00:	1a000009 	bne	35d2c <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa4>
   35d04:	e1560004 	cmp	r6, r4
   35d08:	3a000001 	bcc	35d14 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x8c>
   35d0c:	e3a00000 	mov	r0, #0
   35d10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35d14:	e0442006 	sub	r2, r4, r6
   35d18:	e1a01007 	mov	r1, r7
   35d1c:	e0880006 	add	r0, r8, r6
   35d20:	ebffd12a 	bl	2a1d0 <memcpy>
   35d24:	e3a00000 	mov	r0, #0
   35d28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35d2c:	e0871005 	add	r1, r7, r5
   35d30:	e1a02006 	mov	r2, r6
   35d34:	e1a00008 	mov	r0, r8
   35d38:	ebffd124 	bl	2a1d0 <memcpy>
   35d3c:	eafffff0 	b	35d04 <HwRAMROM::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x7c>
   35d40:	e3a00001 	mov	r0, #1
   35d44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00035d48 <HwRAMROM::getTracerMemory()>:
   35d48:	e92d4010 	push	{r4, lr}
   35d4c:	e1a04000 	mov	r4, r0
   35d50:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   35d54:	e24dd008 	sub	sp, sp, #8
   35d58:	e3500000 	cmp	r0, #0
   35d5c:	0a000001 	beq	35d68 <HwRAMROM::getTracerMemory()+0x20>
   35d60:	e28dd008 	add	sp, sp, #8
   35d64:	e8bd8010 	pop	{r4, pc}
   35d68:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35d6c:	ebffd2f1 	bl	2a938 <operator new[](unsigned int)>
   35d70:	e5d4302c 	ldrb	r3, [r4, #44]	; 0x2c
   35d74:	e5840024 	str	r0, [r4, #36]	; 0x24
   35d78:	e3530000 	cmp	r3, #0
   35d7c:	1afffff7 	bne	35d60 <HwRAMROM::getTracerMemory()+0x18>
   35d80:	e3a03001 	mov	r3, #1
   35d84:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   35d88:	ebffc1c0 	bl	26490 <CLogger::Get()>
   35d8c:	e594c024 	ldr	ip, [r4, #36]	; 0x24
   35d90:	e59f1028 	ldr	r1, [pc, #40]	; 35dc0 <HwRAMROM::getTracerMemory()+0x78>
   35d94:	e35c0000 	cmp	ip, #0
   35d98:	e59f3024 	ldr	r3, [pc, #36]	; 35dc4 <HwRAMROM::getTracerMemory()+0x7c>
   35d9c:	11a03001 	movne	r3, r1
   35da0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35da4:	e59f101c 	ldr	r1, [pc, #28]	; 35dc8 <HwRAMROM::getTracerMemory()+0x80>
   35da8:	e88d000c 	stm	sp, {r2, r3}
   35dac:	e59f3018 	ldr	r3, [pc, #24]	; 35dcc <HwRAMROM::getTracerMemory()+0x84>
   35db0:	e3a02004 	mov	r2, #4
   35db4:	ebffc0f2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35db8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   35dbc:	eaffffe7 	b	35d60 <HwRAMROM::getTracerMemory()+0x18>
   35dc0:	00048440 	.word	0x00048440
   35dc4:	00048444 	.word	0x00048444
   35dc8:	00048434 	.word	0x00048434
   35dcc:	00048488 	.word	0x00048488

00035dd0 <HwRAMROM::tracerClone()>:
   35dd0:	e92d4070 	push	{r4, r5, r6, lr}
   35dd4:	e24dd008 	sub	sp, sp, #8
   35dd8:	e1a04000 	mov	r4, r0
   35ddc:	ebffc1ab 	bl	26490 <CLogger::Get()>
   35de0:	e1a05000 	mov	r5, r0
   35de4:	e1a00004 	mov	r0, r4
   35de8:	e5d46014 	ldrb	r6, [r4, #20]
   35dec:	ebffffd5 	bl	35d48 <HwRAMROM::getTracerMemory()>
   35df0:	e59f3080 	ldr	r3, [pc, #128]	; 35e78 <HwRAMROM::tracerClone()+0xa8>
   35df4:	e58d0004 	str	r0, [sp, #4]
   35df8:	e3a02004 	mov	r2, #4
   35dfc:	e1a00005 	mov	r0, r5
   35e00:	e59f1074 	ldr	r1, [pc, #116]	; 35e7c <HwRAMROM::tracerClone()+0xac>
   35e04:	e58d6000 	str	r6, [sp]
   35e08:	ebffc0dd 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35e0c:	e1a00004 	mov	r0, r4
   35e10:	ebffffcc 	bl	35d48 <HwRAMROM::getTracerMemory()>
   35e14:	e2505000 	subs	r5, r0, #0
   35e18:	0a000014 	beq	35e70 <HwRAMROM::tracerClone()+0xa0>
   35e1c:	e5d41014 	ldrb	r1, [r4, #20]
   35e20:	e3510000 	cmp	r1, #0
   35e24:	0a00000b 	beq	35e58 <HwRAMROM::tracerClone()+0x88>
   35e28:	e1a00004 	mov	r0, r4
   35e2c:	ebfffd9e 	bl	354ac <HwRAMROM::getMirrorMemory()>
   35e30:	e2501000 	subs	r1, r0, #0
   35e34:	0a00000d 	beq	35e70 <HwRAMROM::tracerClone()+0xa0>
   35e38:	e594201c 	ldr	r2, [r4, #28]
   35e3c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35e40:	e1a00005 	mov	r0, r5
   35e44:	e1520003 	cmp	r2, r3
   35e48:	21a02003 	movcs	r2, r3
   35e4c:	e28dd008 	add	sp, sp, #8
   35e50:	e8bd4070 	pop	{r4, r5, r6, lr}
   35e54:	eaffd0dd 	b	2a1d0 <memcpy>
   35e58:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35e5c:	e5940008 	ldr	r0, [r4, #8]
   35e60:	e1a02005 	mov	r2, r5
   35e64:	e58d1004 	str	r1, [sp, #4]
   35e68:	e58d1000 	str	r1, [sp]
   35e6c:	ebfff4ab 	bl	33120 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   35e70:	e28dd008 	add	sp, sp, #8
   35e74:	e8bd8070 	pop	{r4, r5, r6, pc}
   35e78:	000484ac 	.word	0x000484ac
   35e7c:	00048434 	.word	0x00048434

00035e80 <HwRAMROM::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35e80:	e92d4070 	push	{r4, r5, r6, lr}
   35e84:	e1a05001 	mov	r5, r1
   35e88:	e1a06002 	mov	r6, r2
   35e8c:	e1a04003 	mov	r4, r3
   35e90:	ebffffac 	bl	35d48 <HwRAMROM::getTracerMemory()>
   35e94:	e3500000 	cmp	r0, #0
   35e98:	08bd8070 	popeq	{r4, r5, r6, pc}
   35e9c:	e3140004 	tst	r4, #4
   35ea0:	08bd8070 	popeq	{r4, r5, r6, pc}
   35ea4:	e3140002 	tst	r4, #2
   35ea8:	1a000004 	bne	35ec0 <HwRAMROM::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x40>
   35eac:	e3140001 	tst	r4, #1
   35eb0:	17d03005 	ldrbne	r3, [r0, r5]
   35eb4:	159d2010 	ldrne	r2, [sp, #16]
   35eb8:	15823000 	strne	r3, [r2]
   35ebc:	e8bd8070 	pop	{r4, r5, r6, pc}
   35ec0:	e7c06005 	strb	r6, [r0, r5]
   35ec4:	e8bd8070 	pop	{r4, r5, r6, pc}

00035ec8 <HwRAMROM::setMemoryPagingEnable(bool)>:
   35ec8:	e5c01015 	strb	r1, [r0, #21]
   35ecc:	e12fff1e 	bx	lr

00035ed0 <HwRAMROM::getMaxAddress()>:
   35ed0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   35ed4:	e1a00500 	lsl	r0, r0, #10
   35ed8:	e2400001 	sub	r0, r0, #1
   35edc:	e12fff1e 	bx	lr

00035ee0 <HwBase::setMirrorMode(bool)>:
   35ee0:	e12fff1e 	bx	lr

00035ee4 <HwBase::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   35ee4:	e12fff1e 	bx	lr

00035ee8 <HwBase::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   35ee8:	e3a00004 	mov	r0, #4
   35eec:	e12fff1e 	bx	lr

00035ef0 <HwBase::getMirrorMemForAddr(unsigned long)>:
   35ef0:	e3a00000 	mov	r0, #0
   35ef4:	e12fff1e 	bx	lr

00035ef8 <HwBase::mirrorClone()>:
   35ef8:	e12fff1e 	bx	lr

00035efc <HwBase::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35efc:	e12fff1e 	bx	lr

00035f00 <HwBase::configure(char const*)>:
   35f00:	e12fff1e 	bx	lr

00035f04 <HwBase::HwBase(HwManager&, BusAccess&)>:
   35f04:	e59f3028 	ldr	r3, [pc, #40]	; 35f34 <HwBase::HwBase(HwManager&, BusAccess&)+0x30>
   35f08:	e92d4010 	push	{r4, lr}
   35f0c:	e9800006 	stmib	r0, {r1, r2}
   35f10:	e5803000 	str	r3, [r0]
   35f14:	e1a04000 	mov	r4, r0
   35f18:	ebfff85a 	bl	34088 <HwManager::addHardwareElementStatic(HwBase*)>
   35f1c:	e3a02000 	mov	r2, #0
   35f20:	e59f3010 	ldr	r3, [pc, #16]	; 35f38 <HwBase::HwBase(HwManager&, BusAccess&)+0x34>
   35f24:	e5c4200c 	strb	r2, [r4, #12]
   35f28:	e5843010 	str	r3, [r4, #16]
   35f2c:	e1a00004 	mov	r0, r4
   35f30:	e8bd8010 	pop	{r4, pc}
   35f34:	000484dc 	.word	0x000484dc
   35f38:	00048520 	.word	0x00048520

00035f3c <HwBase::getMaxAddress()>:
   35f3c:	e3a00801 	mov	r0, #65536	; 0x10000
   35f40:	e12fff1e 	bx	lr

00035f44 <BusControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35f44:	e12fff1e 	bx	lr

00035f48 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>:
   35f48:	e92d4030 	push	{r4, r5, lr}
   35f4c:	e3a0e000 	mov	lr, #0
   35f50:	e3e04000 	mvn	r4, #0
   35f54:	e59f5034 	ldr	r5, [pc, #52]	; 35f90 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)+0x48>
   35f58:	e880000e 	stm	r0, {r1, r2, r3}
   35f5c:	e580400c 	str	r4, [r0, #12]
   35f60:	e5850000 	str	r0, [r5]
   35f64:	e5804010 	str	r4, [r0, #16]
   35f68:	e5c0e414 	strb	lr, [r0, #1044]	; 0x414
   35f6c:	e5c0e415 	strb	lr, [r0, #1045]	; 0x415
   35f70:	e580e418 	str	lr, [r0, #1048]	; 0x418
   35f74:	e580e41c 	str	lr, [r0, #1052]	; 0x41c
   35f78:	e5c0e420 	strb	lr, [r0, #1056]	; 0x420
   35f7c:	e580e424 	str	lr, [r0, #1060]	; 0x424
   35f80:	e5c0e4f0 	strb	lr, [r0, #1264]	; 0x4f0
   35f84:	e5c0e4f1 	strb	lr, [r0, #1265]	; 0x4f1
   35f88:	e5c0e4f2 	strb	lr, [r0, #1266]	; 0x4f2
   35f8c:	e8bd8030 	pop	{r4, r5, pc}
   35f90:	000504a4 	.word	0x000504a4

00035f94 <BusControlAPI::init()>:
   35f94:	e92d4010 	push	{r4, lr}
   35f98:	e590300c 	ldr	r3, [r0, #12]
   35f9c:	e24dd030 	sub	sp, sp, #48	; 0x30
   35fa0:	e3530000 	cmp	r3, #0
   35fa4:	e1a04000 	mov	r4, r0
   35fa8:	ba00000f 	blt	35fec <BusControlAPI::init()+0x58>
   35fac:	e5943010 	ldr	r3, [r4, #16]
   35fb0:	e3530000 	cmp	r3, #0
   35fb4:	ba000001 	blt	35fc0 <BusControlAPI::init()+0x2c>
   35fb8:	e28dd030 	add	sp, sp, #48	; 0x30
   35fbc:	e8bd8010 	pop	{r4, pc}
   35fc0:	e3a03000 	mov	r3, #0
   35fc4:	e5940000 	ldr	r0, [r4]
   35fc8:	e3a02001 	mov	r2, #1
   35fcc:	e58d3004 	str	r3, [sp, #4]
   35fd0:	e58d3000 	str	r3, [sp]
   35fd4:	e1a01004 	mov	r1, r4
   35fd8:	e59f3060 	ldr	r3, [pc, #96]	; 36040 <BusControlAPI::init()+0xac>
   35fdc:	ebffe22d 	bl	2e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   35fe0:	e5840010 	str	r0, [r4, #16]
   35fe4:	e28dd030 	add	sp, sp, #48	; 0x30
   35fe8:	e8bd8010 	pop	{r4, pc}
   35fec:	e3a03000 	mov	r3, #0
   35ff0:	e3a02004 	mov	r2, #4
   35ff4:	e5900008 	ldr	r0, [r0, #8]
   35ff8:	e3a01001 	mov	r1, #1
   35ffc:	e58d3028 	str	r3, [sp, #40]	; 0x28
   36000:	e58d3020 	str	r3, [sp, #32]
   36004:	e58d301c 	str	r3, [sp, #28]
   36008:	e58d3018 	str	r3, [sp, #24]
   3600c:	e58d3014 	str	r3, [sp, #20]
   36010:	e58d3010 	str	r3, [sp, #16]
   36014:	e58d300c 	str	r3, [sp, #12]
   36018:	e58d3008 	str	r3, [sp, #8]
   3601c:	e58d3004 	str	r3, [sp, #4]
   36020:	e58d3000 	str	r3, [sp]
   36024:	e58d2024 	str	r2, [sp, #36]	; 0x24
   36028:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   3602c:	e59f3010 	ldr	r3, [pc, #16]	; 36044 <BusControlAPI::init()+0xb0>
   36030:	e59f2010 	ldr	r2, [pc, #16]	; 36048 <BusControlAPI::init()+0xb4>
   36034:	ebfff274 	bl	32a0c <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   36038:	e584000c 	str	r0, [r4, #12]
   3603c:	eaffffda 	b	35fac <BusControlAPI::init()+0x18>
   36040:	000376d4 	.word	0x000376d4
   36044:	00036874 	.word	0x00036874
   36048:	00035f44 	.word	0x00035f44

0003604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   3604c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36050:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   36054:	e1a08003 	mov	r8, r3
   36058:	e1a09001 	mov	r9, r1
   3605c:	e1a05002 	mov	r5, r2
   36060:	e1a01003 	mov	r1, r3
   36064:	e28d206c 	add	r2, sp, #108	; 0x6c
   36068:	e3a030c8 	mov	r3, #200	; 0xc8
   3606c:	e59f01b4 	ldr	r0, [pc, #436]	; 36228 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1dc>
   36070:	e5dda16c 	ldrb	sl, [sp, #364]	; 0x16c
   36074:	ebffdecd 	bl	2dbb0 <jsonGetValueForKey>
   36078:	e2507000 	subs	r7, r0, #0
   3607c:	0a00000e 	beq	360bc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   36080:	e2955001 	adds	r5, r5, #1
   36084:	e28d406c 	add	r4, sp, #108	; 0x6c
   36088:	4a000038 	bmi	36170 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x124>
   3608c:	e3a0b000 	mov	fp, #0
   36090:	e59f6194 	ldr	r6, [pc, #404]	; 3622c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e0>
   36094:	ea000002 	b	360a4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x58>
   36098:	e15b0005 	cmp	fp, r5
   3609c:	e2804001 	add	r4, r0, #1
   360a0:	ca000030 	bgt	36168 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x11c>
   360a4:	e1a00004 	mov	r0, r4
   360a8:	e1a01006 	mov	r1, r6
   360ac:	ebffcf1f 	bl	29d30 <strstr>
   360b0:	e3500000 	cmp	r0, #0
   360b4:	e28bb001 	add	fp, fp, #1
   360b8:	1afffff6 	bne	36098 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x4c>
   360bc:	e3a02032 	mov	r2, #50	; 0x32
   360c0:	e1a01009 	mov	r1, r9
   360c4:	e28d0038 	add	r0, sp, #56	; 0x38
   360c8:	ebffde02 	bl	2d8d8 <strlcpy>
   360cc:	e3a02032 	mov	r2, #50	; 0x32
   360d0:	e59f1158 	ldr	r1, [pc, #344]	; 36230 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e4>
   360d4:	e28d0038 	add	r0, sp, #56	; 0x38
   360d8:	ebffde1a 	bl	2d948 <strlcat>
   360dc:	e1a00009 	mov	r0, r9
   360e0:	e28d2004 	add	r2, sp, #4
   360e4:	e3a03032 	mov	r3, #50	; 0x32
   360e8:	e1a01008 	mov	r1, r8
   360ec:	ebffdeaf 	bl	2dbb0 <jsonGetValueForKey>
   360f0:	e2507000 	subs	r7, r0, #0
   360f4:	0a000034 	beq	361cc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x180>
   360f8:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   360fc:	e3530000 	cmp	r3, #0
   36100:	0a000003 	beq	36114 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xc8>
   36104:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   36108:	e28d1004 	add	r1, sp, #4
   3610c:	e1a00003 	mov	r0, r3
   36110:	ebffddf0 	bl	2d8d8 <strlcpy>
   36114:	e35a0000 	cmp	sl, #0
   36118:	0a000009 	beq	36144 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf8>
   3611c:	e28d0004 	add	r0, sp, #4
   36120:	e3a0200a 	mov	r2, #10
   36124:	e3a01000 	mov	r1, #0
   36128:	ebffcf50 	bl	29e70 <strtoul>
   3612c:	e1a0700a 	mov	r7, sl
   36130:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   36134:	e5830000 	str	r0, [r3]
   36138:	e1a00007 	mov	r0, r7
   3613c:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   36140:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36144:	e1a0100a 	mov	r1, sl
   36148:	e28d0004 	add	r0, sp, #4
   3614c:	e3a02010 	mov	r2, #16
   36150:	ebffcf46 	bl	29e70 <strtoul>
   36154:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   36158:	e5830000 	str	r0, [r3]
   3615c:	e1a00007 	mov	r0, r7
   36160:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   36164:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36168:	e3540000 	cmp	r4, #0
   3616c:	0affffd2 	beq	360bc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   36170:	e1a00004 	mov	r0, r4
   36174:	ebffcdf0 	bl	2993c <strlen>
   36178:	e3500000 	cmp	r0, #0
   3617c:	0affffce 	beq	360bc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   36180:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   36184:	e3530000 	cmp	r3, #0
   36188:	0a000003 	beq	3619c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x150>
   3618c:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   36190:	e1a01004 	mov	r1, r4
   36194:	e1a00003 	mov	r0, r3
   36198:	ebffddce 	bl	2d8d8 <strlcpy>
   3619c:	e35a0000 	cmp	sl, #0
   361a0:	11a00004 	movne	r0, r4
   361a4:	1affffdd 	bne	36120 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd4>
   361a8:	e1a0100a 	mov	r1, sl
   361ac:	e1a00004 	mov	r0, r4
   361b0:	e3a02010 	mov	r2, #16
   361b4:	ebffcf2d 	bl	29e70 <strtoul>
   361b8:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   361bc:	e5830000 	str	r0, [r3]
   361c0:	e1a00007 	mov	r0, r7
   361c4:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   361c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361cc:	e1a01008 	mov	r1, r8
   361d0:	e28d0038 	add	r0, sp, #56	; 0x38
   361d4:	e3a03032 	mov	r3, #50	; 0x32
   361d8:	e28d2004 	add	r2, sp, #4
   361dc:	ebffde73 	bl	2dbb0 <jsonGetValueForKey>
   361e0:	e2507000 	subs	r7, r0, #0
   361e4:	0affffdc 	beq	3615c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x110>
   361e8:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   361ec:	e3530000 	cmp	r3, #0
   361f0:	0a000003 	beq	36204 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1b8>
   361f4:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   361f8:	e28d1004 	add	r1, sp, #4
   361fc:	e1a00003 	mov	r0, r3
   36200:	ebffddb4 	bl	2d8d8 <strlcpy>
   36204:	e28d0004 	add	r0, sp, #4
   36208:	e3a0200a 	mov	r2, #10
   3620c:	e3a01000 	mov	r1, #0
   36210:	ebffcf16 	bl	29e70 <strtoul>
   36214:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   36218:	e5830000 	str	r0, [r3]
   3621c:	e1a00007 	mov	r0, r7
   36220:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   36224:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36228:	0004853c 	.word	0x0004853c
   3622c:	00048a68 	.word	0x00048a68
   36230:	00047064 	.word	0x00047064

00036234 <BusControlAPI::busLineHandler(char const*)>:
   36234:	e92d4070 	push	{r4, r5, r6, lr}
   36238:	e1a04001 	mov	r4, r1
   3623c:	e3a01032 	mov	r1, #50	; 0x32
   36240:	e3a05000 	mov	r5, #0
   36244:	e24dd050 	sub	sp, sp, #80	; 0x50
   36248:	e28d2014 	add	r2, sp, #20
   3624c:	e58d1008 	str	r1, [sp, #8]
   36250:	e28d101c 	add	r1, sp, #28
   36254:	e58d1004 	str	r1, [sp, #4]
   36258:	e58d2000 	str	r2, [sp]
   3625c:	e1a03004 	mov	r3, r4
   36260:	e58d500c 	str	r5, [sp, #12]
   36264:	e3a02001 	mov	r2, #1
   36268:	e59f129c 	ldr	r1, [pc, #668]	; 3650c <BusControlAPI::busLineHandler(char const*)+0x2d8>
   3626c:	e1a06000 	mov	r6, r0
   36270:	ebffff75 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36274:	e1500005 	cmp	r0, r5
   36278:	1a000003 	bne	3628c <BusControlAPI::busLineHandler(char const*)+0x58>
   3627c:	e3a04000 	mov	r4, #0
   36280:	e1a00004 	mov	r0, r4
   36284:	e28dd050 	add	sp, sp, #80	; 0x50
   36288:	e8bd8070 	pop	{r4, r5, r6, pc}
   3628c:	e59f127c 	ldr	r1, [pc, #636]	; 36510 <BusControlAPI::busLineHandler(char const*)+0x2dc>
   36290:	e28d001c 	add	r0, sp, #28
   36294:	ebffcea5 	bl	29d30 <strstr>
   36298:	e3a02000 	mov	r2, #0
   3629c:	e3500000 	cmp	r0, #0
   362a0:	e28d1050 	add	r1, sp, #80	; 0x50
   362a4:	15c05000 	strbne	r5, [r0]
   362a8:	e5212038 	str	r2, [r1, #-56]!	; 0xffffffc8
   362ac:	e88d0006 	stm	sp, {r1, r2}
   362b0:	e1a03004 	mov	r3, r4
   362b4:	e58d200c 	str	r2, [sp, #12]
   362b8:	e58d2008 	str	r2, [sp, #8]
   362bc:	e59f1250 	ldr	r1, [pc, #592]	; 36514 <BusControlAPI::busLineHandler(char const*)+0x2e0>
   362c0:	e3a02002 	mov	r2, #2
   362c4:	e1a00006 	mov	r0, r6
   362c8:	ebffff5f 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   362cc:	e2504000 	subs	r4, r0, #0
   362d0:	0affffe9 	beq	3627c <BusControlAPI::busLineHandler(char const*)+0x48>
   362d4:	e5965008 	ldr	r5, [r6, #8]
   362d8:	ebffc06c 	bl	26490 <CLogger::Get()>
   362dc:	e59d3018 	ldr	r3, [sp, #24]
   362e0:	e28d201c 	add	r2, sp, #28
   362e4:	e88d000c 	stm	sp, {r2, r3}
   362e8:	e59f1228 	ldr	r1, [pc, #552]	; 36518 <BusControlAPI::busLineHandler(char const*)+0x2e4>
   362ec:	e59f3228 	ldr	r3, [pc, #552]	; 3651c <BusControlAPI::busLineHandler(char const*)+0x2e8>
   362f0:	e3a02004 	mov	r2, #4
   362f4:	ebffbfa2 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   362f8:	e59f1220 	ldr	r1, [pc, #544]	; 36520 <BusControlAPI::busLineHandler(char const*)+0x2ec>
   362fc:	e28d001c 	add	r0, sp, #28
   36300:	ebffcdb2 	bl	299d0 <strcasecmp>
   36304:	e3500000 	cmp	r0, #0
   36308:	0a000036 	beq	363e8 <BusControlAPI::busLineHandler(char const*)+0x1b4>
   3630c:	e59f1210 	ldr	r1, [pc, #528]	; 36524 <BusControlAPI::busLineHandler(char const*)+0x2f0>
   36310:	e28d001c 	add	r0, sp, #28
   36314:	ebffcdad 	bl	299d0 <strcasecmp>
   36318:	e3500000 	cmp	r0, #0
   3631c:	0a00003e 	beq	3641c <BusControlAPI::busLineHandler(char const*)+0x1e8>
   36320:	e59f1200 	ldr	r1, [pc, #512]	; 36528 <BusControlAPI::busLineHandler(char const*)+0x2f4>
   36324:	e28d001c 	add	r0, sp, #28
   36328:	ebffcda8 	bl	299d0 <strcasecmp>
   3632c:	e2501000 	subs	r1, r0, #0
   36330:	0a000033 	beq	36404 <BusControlAPI::busLineHandler(char const*)+0x1d0>
   36334:	e59f11f0 	ldr	r1, [pc, #496]	; 3652c <BusControlAPI::busLineHandler(char const*)+0x2f8>
   36338:	e28d001c 	add	r0, sp, #28
   3633c:	ebffcda3 	bl	299d0 <strcasecmp>
   36340:	e3500000 	cmp	r0, #0
   36344:	0a00003b 	beq	36438 <BusControlAPI::busLineHandler(char const*)+0x204>
   36348:	e59f11e0 	ldr	r1, [pc, #480]	; 36530 <BusControlAPI::busLineHandler(char const*)+0x2fc>
   3634c:	e28d001c 	add	r0, sp, #28
   36350:	ebffcd9e 	bl	299d0 <strcasecmp>
   36354:	e3500000 	cmp	r0, #0
   36358:	0a000036 	beq	36438 <BusControlAPI::busLineHandler(char const*)+0x204>
   3635c:	e59f11d0 	ldr	r1, [pc, #464]	; 36534 <BusControlAPI::busLineHandler(char const*)+0x300>
   36360:	e28d001c 	add	r0, sp, #28
   36364:	ebffcd99 	bl	299d0 <strcasecmp>
   36368:	e3500000 	cmp	r0, #0
   3636c:	0a000038 	beq	36454 <BusControlAPI::busLineHandler(char const*)+0x220>
   36370:	e59f11c0 	ldr	r1, [pc, #448]	; 36538 <BusControlAPI::busLineHandler(char const*)+0x304>
   36374:	e28d001c 	add	r0, sp, #28
   36378:	ebffcd94 	bl	299d0 <strcasecmp>
   3637c:	e3500000 	cmp	r0, #0
   36380:	0a00003a 	beq	36470 <BusControlAPI::busLineHandler(char const*)+0x23c>
   36384:	e59f11b0 	ldr	r1, [pc, #432]	; 3653c <BusControlAPI::busLineHandler(char const*)+0x308>
   36388:	e28d001c 	add	r0, sp, #28
   3638c:	ebffcd8f 	bl	299d0 <strcasecmp>
   36390:	e3500000 	cmp	r0, #0
   36394:	0a00003c 	beq	3648c <BusControlAPI::busLineHandler(char const*)+0x258>
   36398:	e59f11a0 	ldr	r1, [pc, #416]	; 36540 <BusControlAPI::busLineHandler(char const*)+0x30c>
   3639c:	e28d001c 	add	r0, sp, #28
   363a0:	ebffcd8a 	bl	299d0 <strcasecmp>
   363a4:	e3500000 	cmp	r0, #0
   363a8:	0a00003e 	beq	364a8 <BusControlAPI::busLineHandler(char const*)+0x274>
   363ac:	e59f1190 	ldr	r1, [pc, #400]	; 36544 <BusControlAPI::busLineHandler(char const*)+0x310>
   363b0:	e28d001c 	add	r0, sp, #28
   363b4:	ebffcd85 	bl	299d0 <strcasecmp>
   363b8:	e3500000 	cmp	r0, #0
   363bc:	1a000040 	bne	364c4 <BusControlAPI::busLineHandler(char const*)+0x290>
   363c0:	e5953000 	ldr	r3, [r5]
   363c4:	e3530011 	cmp	r3, #17
   363c8:	1affffac 	bne	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   363cc:	e59d2018 	ldr	r2, [sp, #24]
   363d0:	e1a00005 	mov	r0, r5
   363d4:	e2922000 	adds	r2, r2, #0
   363d8:	13a02001 	movne	r2, #1
   363dc:	e3a01003 	mov	r1, #3
   363e0:	ebfff5dd 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   363e4:	eaffffa5 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   363e8:	e59d2018 	ldr	r2, [sp, #24]
   363ec:	e1a00005 	mov	r0, r5
   363f0:	e2922000 	adds	r2, r2, #0
   363f4:	13a02001 	movne	r2, #1
   363f8:	e3a01011 	mov	r1, #17
   363fc:	ebfff5d6 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36400:	eaffff9e 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   36404:	e59d2018 	ldr	r2, [sp, #24]
   36408:	e1a00005 	mov	r0, r5
   3640c:	e2922000 	adds	r2, r2, #0
   36410:	13a02001 	movne	r2, #1
   36414:	ebfff5d0 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36418:	eaffff98 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   3641c:	e59d2018 	ldr	r2, [sp, #24]
   36420:	e1a00005 	mov	r0, r5
   36424:	e2922000 	adds	r2, r2, #0
   36428:	13a02001 	movne	r2, #1
   3642c:	e3a01012 	mov	r1, #18
   36430:	ebfff5c9 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36434:	eaffff91 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   36438:	e59d2018 	ldr	r2, [sp, #24]
   3643c:	e1a00005 	mov	r0, r5
   36440:	e2922000 	adds	r2, r2, #0
   36444:	13a02001 	movne	r2, #1
   36448:	e3a01001 	mov	r1, #1
   3644c:	ebfff5c2 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36450:	eaffff8a 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   36454:	e59d2018 	ldr	r2, [sp, #24]
   36458:	e1a00005 	mov	r0, r5
   3645c:	e2922000 	adds	r2, r2, #0
   36460:	13a02001 	movne	r2, #1
   36464:	e3a01006 	mov	r1, #6
   36468:	ebfff5bb 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   3646c:	eaffff83 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   36470:	e59d2018 	ldr	r2, [sp, #24]
   36474:	e1a00005 	mov	r0, r5
   36478:	e2922000 	adds	r2, r2, #0
   3647c:	13a02001 	movne	r2, #1
   36480:	e3a0100c 	mov	r1, #12
   36484:	ebfff5b4 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36488:	eaffff7c 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   3648c:	e59d2018 	ldr	r2, [sp, #24]
   36490:	e1a00005 	mov	r0, r5
   36494:	e2922000 	adds	r2, r2, #0
   36498:	13a02001 	movne	r2, #1
   3649c:	e3a0100d 	mov	r1, #13
   364a0:	ebfff5ad 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   364a4:	eaffff75 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   364a8:	e59d2018 	ldr	r2, [sp, #24]
   364ac:	e1a00005 	mov	r0, r5
   364b0:	e2922000 	adds	r2, r2, #0
   364b4:	13a02001 	movne	r2, #1
   364b8:	e3a01007 	mov	r1, #7
   364bc:	ebfff5a6 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   364c0:	eaffff6e 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   364c4:	e59f107c 	ldr	r1, [pc, #124]	; 36548 <BusControlAPI::busLineHandler(char const*)+0x314>
   364c8:	e28d001c 	add	r0, sp, #28
   364cc:	ebffcd3f 	bl	299d0 <strcasecmp>
   364d0:	e3500000 	cmp	r0, #0
   364d4:	0a000005 	beq	364f0 <BusControlAPI::busLineHandler(char const*)+0x2bc>
   364d8:	e28d001c 	add	r0, sp, #28
   364dc:	e59f1068 	ldr	r1, [pc, #104]	; 3654c <BusControlAPI::busLineHandler(char const*)+0x318>
   364e0:	ebffcd3a 	bl	299d0 <strcasecmp>
   364e4:	e3500000 	cmp	r0, #0
   364e8:	1affff64 	bne	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   364ec:	eaffffb6 	b	363cc <BusControlAPI::busLineHandler(char const*)+0x198>
   364f0:	e59d2018 	ldr	r2, [sp, #24]
   364f4:	e1a00005 	mov	r0, r5
   364f8:	e2922000 	adds	r2, r2, #0
   364fc:	13a02001 	movne	r2, #1
   36500:	e3a01004 	mov	r1, #4
   36504:	ebfff594 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36508:	eaffff5c 	b	36280 <BusControlAPI::busLineHandler(char const*)+0x4c>
   3650c:	00048544 	.word	0x00048544
   36510:	00048a68 	.word	0x00048a68
   36514:	0004854c 	.word	0x0004854c
   36518:	0004852c 	.word	0x0004852c
   3651c:	00048554 	.word	0x00048554
   36520:	00048568 	.word	0x00048568
   36524:	0004856c 	.word	0x0004856c
   36528:	00048570 	.word	0x00048570
   3652c:	00048578 	.word	0x00048578
   36530:	00048580 	.word	0x00048580
   36534:	00048588 	.word	0x00048588
   36538:	00048594 	.word	0x00048594
   3653c:	000485a4 	.word	0x000485a4
   36540:	000485b4 	.word	0x000485b4
   36544:	000485c0 	.word	0x000485c0
   36548:	000485cc 	.word	0x000485cc
   3654c:	000485d4 	.word	0x000485d4

00036550 <BusControlAPI::muxLineHandler(char const*)>:
   36550:	e92d4070 	push	{r4, r5, r6, lr}
   36554:	e3a0c032 	mov	ip, #50	; 0x32
   36558:	e3a04000 	mov	r4, #0
   3655c:	e24dd048 	sub	sp, sp, #72	; 0x48
   36560:	e28d2010 	add	r2, sp, #16
   36564:	e1a03001 	mov	r3, r1
   36568:	e28d1014 	add	r1, sp, #20
   3656c:	e58d1004 	str	r1, [sp, #4]
   36570:	e58d2000 	str	r2, [sp]
   36574:	e58d400c 	str	r4, [sp, #12]
   36578:	e58dc008 	str	ip, [sp, #8]
   3657c:	e3a02001 	mov	r2, #1
   36580:	e59f1170 	ldr	r1, [pc, #368]	; 366f8 <BusControlAPI::muxLineHandler(char const*)+0x1a8>
   36584:	e1a06000 	mov	r6, r0
   36588:	ebfffeaf 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3658c:	e2505000 	subs	r5, r0, #0
   36590:	1a000002 	bne	365a0 <BusControlAPI::muxLineHandler(char const*)+0x50>
   36594:	e1a00005 	mov	r0, r5
   36598:	e28dd048 	add	sp, sp, #72	; 0x48
   3659c:	e8bd8070 	pop	{r4, r5, r6, pc}
   365a0:	e59f1154 	ldr	r1, [pc, #340]	; 366fc <BusControlAPI::muxLineHandler(char const*)+0x1ac>
   365a4:	e28d0014 	add	r0, sp, #20
   365a8:	ebffcde0 	bl	29d30 <strstr>
   365ac:	e3500000 	cmp	r0, #0
   365b0:	15c04000 	strbne	r4, [r0]
   365b4:	ebffbfb5 	bl	26490 <CLogger::Get()>
   365b8:	e28d3014 	add	r3, sp, #20
   365bc:	e58d3000 	str	r3, [sp]
   365c0:	e3a02004 	mov	r2, #4
   365c4:	e59f3134 	ldr	r3, [pc, #308]	; 36700 <BusControlAPI::muxLineHandler(char const*)+0x1b0>
   365c8:	e59f1134 	ldr	r1, [pc, #308]	; 36704 <BusControlAPI::muxLineHandler(char const*)+0x1b4>
   365cc:	ebffbeec 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   365d0:	e59f1130 	ldr	r1, [pc, #304]	; 36708 <BusControlAPI::muxLineHandler(char const*)+0x1b8>
   365d4:	e28d0014 	add	r0, sp, #20
   365d8:	e5964008 	ldr	r4, [r6, #8]
   365dc:	ebffccfb 	bl	299d0 <strcasecmp>
   365e0:	e2501000 	subs	r1, r0, #0
   365e4:	0a00002a 	beq	36694 <BusControlAPI::muxLineHandler(char const*)+0x144>
   365e8:	e59f111c 	ldr	r1, [pc, #284]	; 3670c <BusControlAPI::muxLineHandler(char const*)+0x1bc>
   365ec:	e28d0014 	add	r0, sp, #20
   365f0:	ebffccf6 	bl	299d0 <strcasecmp>
   365f4:	e3500000 	cmp	r0, #0
   365f8:	0a000021 	beq	36684 <BusControlAPI::muxLineHandler(char const*)+0x134>
   365fc:	e59f110c 	ldr	r1, [pc, #268]	; 36710 <BusControlAPI::muxLineHandler(char const*)+0x1c0>
   36600:	e28d0014 	add	r0, sp, #20
   36604:	ebffccf1 	bl	299d0 <strcasecmp>
   36608:	e3500000 	cmp	r0, #0
   3660c:	0a000025 	beq	366a8 <BusControlAPI::muxLineHandler(char const*)+0x158>
   36610:	e59f10fc 	ldr	r1, [pc, #252]	; 36714 <BusControlAPI::muxLineHandler(char const*)+0x1c4>
   36614:	e28d0014 	add	r0, sp, #20
   36618:	ebffccec 	bl	299d0 <strcasecmp>
   3661c:	e3500000 	cmp	r0, #0
   36620:	0a000028 	beq	366c8 <BusControlAPI::muxLineHandler(char const*)+0x178>
   36624:	e59f10ec 	ldr	r1, [pc, #236]	; 36718 <BusControlAPI::muxLineHandler(char const*)+0x1c8>
   36628:	e28d0014 	add	r0, sp, #20
   3662c:	ebffcce7 	bl	299d0 <strcasecmp>
   36630:	e3500000 	cmp	r0, #0
   36634:	0a00001f 	beq	366b8 <BusControlAPI::muxLineHandler(char const*)+0x168>
   36638:	e59f10dc 	ldr	r1, [pc, #220]	; 3671c <BusControlAPI::muxLineHandler(char const*)+0x1cc>
   3663c:	e28d0014 	add	r0, sp, #20
   36640:	ebffcce2 	bl	299d0 <strcasecmp>
   36644:	e3500000 	cmp	r0, #0
   36648:	0a000022 	beq	366d8 <BusControlAPI::muxLineHandler(char const*)+0x188>
   3664c:	e59f10cc 	ldr	r1, [pc, #204]	; 36720 <BusControlAPI::muxLineHandler(char const*)+0x1d0>
   36650:	e28d0014 	add	r0, sp, #20
   36654:	ebffccdd 	bl	299d0 <strcasecmp>
   36658:	e3500000 	cmp	r0, #0
   3665c:	0a000021 	beq	366e8 <BusControlAPI::muxLineHandler(char const*)+0x198>
   36660:	e28d0014 	add	r0, sp, #20
   36664:	e59f10b8 	ldr	r1, [pc, #184]	; 36724 <BusControlAPI::muxLineHandler(char const*)+0x1d4>
   36668:	ebffccd8 	bl	299d0 <strcasecmp>
   3666c:	e3500000 	cmp	r0, #0
   36670:	1affffc7 	bne	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   36674:	e1a00004 	mov	r0, r4
   36678:	e3a01007 	mov	r1, #7
   3667c:	ebfff557 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36680:	eaffffc3 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   36684:	e1a00004 	mov	r0, r4
   36688:	e3a01004 	mov	r1, #4
   3668c:	ebfff553 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36690:	eaffffbf 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   36694:	e1a00004 	mov	r0, r4
   36698:	ebfff550 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   3669c:	e1a00005 	mov	r0, r5
   366a0:	e28dd048 	add	sp, sp, #72	; 0x48
   366a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   366a8:	e1a00004 	mov	r0, r4
   366ac:	e3a01001 	mov	r1, #1
   366b0:	ebfff54a 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   366b4:	eaffffb6 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   366b8:	e1a00004 	mov	r0, r4
   366bc:	e3a01002 	mov	r1, #2
   366c0:	ebfff546 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   366c4:	eaffffb2 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   366c8:	e1a00004 	mov	r0, r4
   366cc:	e3a01005 	mov	r1, #5
   366d0:	ebfff542 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   366d4:	eaffffae 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   366d8:	e1a00004 	mov	r0, r4
   366dc:	e3a01006 	mov	r1, #6
   366e0:	ebfff53e 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   366e4:	eaffffaa 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   366e8:	e1a00004 	mov	r0, r4
   366ec:	e3a01003 	mov	r1, #3
   366f0:	ebfff53a 	bl	33be0 <BusAccess::rawBusControlMuxSet(unsigned long)>
   366f4:	eaffffa6 	b	36594 <BusControlAPI::muxLineHandler(char const*)+0x44>
   366f8:	00048544 	.word	0x00048544
   366fc:	00048a68 	.word	0x00048a68
   36700:	000485d8 	.word	0x000485d8
   36704:	0004852c 	.word	0x0004852c
   36708:	000485e4 	.word	0x000485e4
   3670c:	000485f0 	.word	0x000485f0
   36710:	00048600 	.word	0x00048600
   36714:	00040c44 	.word	0x00040c44
   36718:	0004860c 	.word	0x0004860c
   3671c:	00048610 	.word	0x00048610
   36720:	00048614 	.word	0x00048614
   36724:	00048624 	.word	0x00048624

00036728 <BusControlAPI::busLinesRead(char*, int)>:
   36728:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3672c:	e5906008 	ldr	r6, [r0, #8]
   36730:	e24dd01c 	sub	sp, sp, #28
   36734:	e1a00006 	mov	r0, r6
   36738:	e1a08002 	mov	r8, r2
   3673c:	e1a07001 	mov	r7, r1
   36740:	ebfff4f4 	bl	33b18 <BusAccess::rawBusControlReadRaw()>
   36744:	e5963000 	ldr	r3, [r6]
   36748:	e1a05000 	mov	r5, r0
   3674c:	e3530011 	cmp	r3, #17
   36750:	11a021a0 	lsrne	r2, r0, #3
   36754:	01a02a20 	lsreq	r2, r0, #20
   36758:	e1a00006 	mov	r0, r6
   3675c:	e2024001 	and	r4, r2, #1
   36760:	ebfff4ec 	bl	33b18 <BusAccess::rawBusControlReadRaw()>
   36764:	e1a09000 	mov	r9, r0
   36768:	e1a00006 	mov	r0, r6
   3676c:	ebfff4e9 	bl	33b18 <BusAccess::rawBusControlReadRaw()>
   36770:	e3150001 	tst	r5, #1
   36774:	13a0604d 	movne	r6, #77	; 0x4d
   36778:	03a0602e 	moveq	r6, #46	; 0x2e
   3677c:	e3150002 	tst	r5, #2
   36780:	13a0e049 	movne	lr, #73	; 0x49
   36784:	03a0e02e 	moveq	lr, #46	; 0x2e
   36788:	e3150701 	tst	r5, #262144	; 0x40000
   3678c:	13a0c052 	movne	ip, #82	; 0x52
   36790:	03a0c02e 	moveq	ip, #46	; 0x2e
   36794:	e3150802 	tst	r5, #131072	; 0x20000
   36798:	13a05057 	movne	r5, #87	; 0x57
   3679c:	03a0502e 	moveq	r5, #46	; 0x2e
   367a0:	e3540000 	cmp	r4, #0
   367a4:	13a02031 	movne	r2, #49	; 0x31
   367a8:	03a0202e 	moveq	r2, #46	; 0x2e
   367ac:	e1a00a20 	lsr	r0, r0, #20
   367b0:	e6ef0070 	uxtb	r0, r0
   367b4:	e58d0000 	str	r0, [sp]
   367b8:	e58d2014 	str	r2, [sp, #20]
   367bc:	e1a03009 	mov	r3, r9
   367c0:	e1a01008 	mov	r1, r8
   367c4:	e1a00007 	mov	r0, r7
   367c8:	e98d4040 	stmib	sp, {r6, lr}
   367cc:	e58dc00c 	str	ip, [sp, #12]
   367d0:	e58d5010 	str	r5, [sp, #16]
   367d4:	e59f2008 	ldr	r2, [pc, #8]	; 367e4 <BusControlAPI::busLinesRead(char*, int)+0xbc>
   367d8:	ebffdcb5 	bl	2dab4 <snprintf>
   367dc:	e28dd01c 	add	sp, sp, #28
   367e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   367e4:	00048634 	.word	0x00048634

000367e8 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   367e8:	e3510004 	cmp	r1, #4
   367ec:	112fff1e 	bxne	lr
   367f0:	e5d03414 	ldrb	r3, [r0, #1044]	; 0x414
   367f4:	e3530000 	cmp	r3, #0
   367f8:	012fff1e 	bxeq	lr
   367fc:	e92d4010 	push	{r4, lr}
   36800:	e5d02415 	ldrb	r2, [r0, #1045]	; 0x415
   36804:	e1a04000 	mov	r4, r0
   36808:	e3520000 	cmp	r2, #0
   3680c:	e24dd010 	sub	sp, sp, #16
   36810:	e5900004 	ldr	r0, [r0, #4]
   36814:	0a00000b 	beq	36848 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   36818:	e3a02000 	mov	r2, #0
   3681c:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   36820:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   36824:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   36828:	e58d2008 	str	r2, [sp, #8]
   3682c:	e88d1004 	stm	sp, {r2, ip}
   36830:	e2842014 	add	r2, r4, #20
   36834:	ebfff9ba 	bl	34f24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   36838:	e3a03000 	mov	r3, #0
   3683c:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   36840:	e28dd010 	add	sp, sp, #16
   36844:	e8bd8010 	pop	{r4, pc}
   36848:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   3684c:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   36850:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   36854:	e58d2008 	str	r2, [sp, #8]
   36858:	e88d1004 	stm	sp, {r2, ip}
   3685c:	e2842014 	add	r2, r4, #20
   36860:	ebfff9e8 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   36864:	e3a03000 	mov	r3, #0
   36868:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   3686c:	e28dd010 	add	sp, sp, #16
   36870:	e8bd8010 	pop	{r4, pc}

00036874 <BusControlAPI::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   36874:	e3500000 	cmp	r0, #0
   36878:	012fff1e 	bxeq	lr
   3687c:	eaffffd9 	b	367e8 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

00036880 <BusControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   36880:	e12fff1e 	bx	lr

00036884 <BusControlAPI::service()>:
   36884:	e12fff1e 	bx	lr

00036888 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   36888:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3688c:	e1a09003 	mov	r9, r3
   36890:	e3a03001 	mov	r3, #1
   36894:	e3590b01 	cmp	r9, #1024	; 0x400
   36898:	e1a0a002 	mov	sl, r2
   3689c:	83a02b01 	movhi	r2, #1024	; 0x400
   368a0:	e5dd8024 	ldrb	r8, [sp, #36]	; 0x24
   368a4:	e5c03414 	strb	r3, [r0, #1044]	; 0x414
   368a8:	e5dd3020 	ldrb	r3, [sp, #32]
   368ac:	95809418 	strls	r9, [r0, #1048]	; 0x418
   368b0:	85802418 	strhi	r2, [r0, #1048]	; 0x418
   368b4:	e3580000 	cmp	r8, #0
   368b8:	e1a04000 	mov	r4, r0
   368bc:	e5c08415 	strb	r8, [r0, #1045]	; 0x415
   368c0:	e580141c 	str	r1, [r0, #1052]	; 0x41c
   368c4:	e5c03420 	strb	r3, [r0, #1056]	; 0x420
   368c8:	1a00001d 	bne	36944 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xbc>
   368cc:	e5947008 	ldr	r7, [r4, #8]
   368d0:	e3a02004 	mov	r2, #4
   368d4:	e1a00007 	mov	r0, r7
   368d8:	e594100c 	ldr	r1, [r4, #12]
   368dc:	ebffe96b 	bl	30e90 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   368e0:	ebffdbc1 	bl	2d7ec <micros>
   368e4:	e59f5084 	ldr	r5, [pc, #132]	; 36970 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xe8>
   368e8:	e1a06000 	mov	r6, r0
   368ec:	ea000003 	b	36900 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x78>
   368f0:	e3530000 	cmp	r3, #0
   368f4:	0a00000e 	beq	36934 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   368f8:	e1a00007 	mov	r0, r7
   368fc:	ebffec17 	bl	31960 <BusAccess::service()>
   36900:	ebffdbb9 	bl	2d7ec <micros>
   36904:	e1a02005 	mov	r2, r5
   36908:	e1a01006 	mov	r1, r6
   3690c:	ebffdbd4 	bl	2d864 <isTimeout>
   36910:	e3500000 	cmp	r0, #0
   36914:	e5d43414 	ldrb	r3, [r4, #1044]	; 0x414
   36918:	0afffff4 	beq	368f0 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   3691c:	e3530000 	cmp	r3, #0
   36920:	0a000003 	beq	36934 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   36924:	e3a03000 	mov	r3, #0
   36928:	e3a00002 	mov	r0, #2
   3692c:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   36930:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36934:	e3580000 	cmp	r8, #0
   36938:	0a000006 	beq	36958 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xd0>
   3693c:	e3a00000 	mov	r0, #0
   36940:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36944:	e1a02009 	mov	r2, r9
   36948:	e1a0100a 	mov	r1, sl
   3694c:	e2800014 	add	r0, r0, #20
   36950:	ebffce1e 	bl	2a1d0 <memcpy>
   36954:	eaffffdc 	b	368cc <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x44>
   36958:	e1a02009 	mov	r2, r9
   3695c:	e2841014 	add	r1, r4, #20
   36960:	e1a0000a 	mov	r0, sl
   36964:	ebffce19 	bl	2a1d0 <memcpy>
   36968:	e1a00008 	mov	r0, r8
   3696c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36970:	0000c350 	.word	0x0000c350

00036974 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   36974:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36978:	e24ddecb 	sub	sp, sp, #3248	; 0xcb0
   3697c:	e24dd00c 	sub	sp, sp, #12
   36980:	e1a05000 	mov	r5, r0
   36984:	e1a09002 	mov	r9, r2
   36988:	e1a08003 	mov	r8, r3
   3698c:	e28d2020 	add	r2, sp, #32
   36990:	e3a03032 	mov	r3, #50	; 0x32
   36994:	e59f0c38 	ldr	r0, [pc, #3128]	; 375d4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc60>
   36998:	e1a07001 	mov	r7, r1
   3699c:	ebffdc83 	bl	2dbb0 <jsonGetValueForKey>
   369a0:	e2504000 	subs	r4, r0, #0
   369a4:	1a000004 	bne	369bc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   369a8:	e3a04000 	mov	r4, #0
   369ac:	e1a00004 	mov	r0, r4
   369b0:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   369b4:	e28dd00c 	add	sp, sp, #12
   369b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   369bc:	e59f1c14 	ldr	r1, [pc, #3092]	; 375d8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc64>
   369c0:	e28d0020 	add	r0, sp, #32
   369c4:	e595b008 	ldr	fp, [r5, #8]
   369c8:	ebffcc00 	bl	299d0 <strcasecmp>
   369cc:	e2506000 	subs	r6, r0, #0
   369d0:	1a000037 	bne	36ab4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x140>
   369d4:	e28d8ecb 	add	r8, sp, #3248	; 0xcb0
   369d8:	e2888008 	add	r8, r8, #8
   369dc:	e5286ca0 	str	r6, [r8, #-3232]!	; 0xfffff360
   369e0:	e2483004 	sub	r3, r8, #4
   369e4:	e88d0048 	stm	sp, {r3, r6}
   369e8:	e58d600c 	str	r6, [sp, #12]
   369ec:	e58d6008 	str	r6, [sp, #8]
   369f0:	e1a03007 	mov	r3, r7
   369f4:	e3a02001 	mov	r2, #1
   369f8:	e59f1bdc 	ldr	r1, [pc, #3036]	; 375dc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   369fc:	e1a00005 	mov	r0, r5
   36a00:	e58d6014 	str	r6, [sp, #20]
   36a04:	ebfffd90 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36a08:	e3500000 	cmp	r0, #0
   36a0c:	0a00005f 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36a10:	e58d600c 	str	r6, [sp, #12]
   36a14:	e58d6008 	str	r6, [sp, #8]
   36a18:	e58d6004 	str	r6, [sp, #4]
   36a1c:	e58d8000 	str	r8, [sp]
   36a20:	e1a03007 	mov	r3, r7
   36a24:	e3a02002 	mov	r2, #2
   36a28:	e59f1bb0 	ldr	r1, [pc, #2992]	; 375e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   36a2c:	e1a00005 	mov	r0, r5
   36a30:	ebfffd85 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36a34:	e3500000 	cmp	r0, #0
   36a38:	0a000054 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36a3c:	e28d301c 	add	r3, sp, #28
   36a40:	e58d3000 	str	r3, [sp]
   36a44:	e58d600c 	str	r6, [sp, #12]
   36a48:	e58d6008 	str	r6, [sp, #8]
   36a4c:	e58d6004 	str	r6, [sp, #4]
   36a50:	e1a03007 	mov	r3, r7
   36a54:	e3a02003 	mov	r2, #3
   36a58:	e59f1b84 	ldr	r1, [pc, #2948]	; 375e4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   36a5c:	e1a00005 	mov	r0, r5
   36a60:	e58d601c 	str	r6, [sp, #28]
   36a64:	ebfffd78 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36a68:	e3500000 	cmp	r0, #0
   36a6c:	0a000047 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36a70:	e59d3018 	ldr	r3, [sp, #24]
   36a74:	e2432001 	sub	r2, r3, #1
   36a78:	e3520b01 	cmp	r2, #1024	; 0x400
   36a7c:	2a00003e 	bcs	36b7c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   36a80:	e1a00005 	mov	r0, r5
   36a84:	e59d1014 	ldr	r1, [sp, #20]
   36a88:	e58d6004 	str	r6, [sp, #4]
   36a8c:	e58d6000 	str	r6, [sp]
   36a90:	e28d2054 	add	r2, sp, #84	; 0x54
   36a94:	ebffff7b 	bl	36888 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   36a98:	e2505000 	subs	r5, r0, #0
   36a9c:	0a0000f3 	beq	36e70 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4fc>
   36aa0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36aa4:	e59f1b3c 	ldr	r1, [pc, #2876]	; 375e8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   36aa8:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36aac:	ebffdb89 	bl	2d8d8 <strlcpy>
   36ab0:	eaffffbd 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36ab4:	e59f1b30 	ldr	r1, [pc, #2864]	; 375ec <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc78>
   36ab8:	e28d0020 	add	r0, sp, #32
   36abc:	ebffcbc3 	bl	299d0 <strcasecmp>
   36ac0:	e2506000 	subs	r6, r0, #0
   36ac4:	1a000039 	bne	36bb0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x23c>
   36ac8:	e28d301c 	add	r3, sp, #28
   36acc:	e58d3000 	str	r3, [sp]
   36ad0:	e58d600c 	str	r6, [sp, #12]
   36ad4:	e58d6008 	str	r6, [sp, #8]
   36ad8:	e58d6004 	str	r6, [sp, #4]
   36adc:	e1a03007 	mov	r3, r7
   36ae0:	e3a02001 	mov	r2, #1
   36ae4:	e59f1af0 	ldr	r1, [pc, #2800]	; 375dc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   36ae8:	e1a00005 	mov	r0, r5
   36aec:	e58d601c 	str	r6, [sp, #28]
   36af0:	e58d6054 	str	r6, [sp, #84]	; 0x54
   36af4:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   36af8:	ebfffd53 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36afc:	e3500000 	cmp	r0, #0
   36b00:	0a000022 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b04:	e28d3054 	add	r3, sp, #84	; 0x54
   36b08:	e88d0048 	stm	sp, {r3, r6}
   36b0c:	e58d600c 	str	r6, [sp, #12]
   36b10:	e58d6008 	str	r6, [sp, #8]
   36b14:	e1a03007 	mov	r3, r7
   36b18:	e3a02002 	mov	r2, #2
   36b1c:	e59f1abc 	ldr	r1, [pc, #2748]	; 375e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   36b20:	e1a00005 	mov	r0, r5
   36b24:	ebfffd48 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36b28:	e3500000 	cmp	r0, #0
   36b2c:	0a000017 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b30:	e28d3e45 	add	r3, sp, #1104	; 0x450
   36b34:	e2833008 	add	r3, r3, #8
   36b38:	e2432004 	sub	r2, r3, #4
   36b3c:	e58d2000 	str	r2, [sp]
   36b40:	e58d600c 	str	r6, [sp, #12]
   36b44:	e58d6008 	str	r6, [sp, #8]
   36b48:	e58d6004 	str	r6, [sp, #4]
   36b4c:	e1a03007 	mov	r3, r7
   36b50:	e3a02003 	mov	r2, #3
   36b54:	e59f1a88 	ldr	r1, [pc, #2696]	; 375e4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   36b58:	e1a00005 	mov	r0, r5
   36b5c:	ebfffd3a 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36b60:	e3500000 	cmp	r0, #0
   36b64:	0a000009 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b68:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   36b6c:	e2432001 	sub	r2, r3, #1
   36b70:	e1530008 	cmp	r3, r8
   36b74:	93520b01 	cmpls	r2, #1024	; 0x400
   36b78:	3a0000f2 	bcc	36f48 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5d4>
   36b7c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36b80:	e59f1a68 	ldr	r1, [pc, #2664]	; 375f0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc7c>
   36b84:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36b88:	ebffdb52 	bl	2d8d8 <strlcpy>
   36b8c:	eaffff86 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36b90:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36b94:	e59f1a58 	ldr	r1, [pc, #2648]	; 375f4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc80>
   36b98:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36b9c:	ebffdb4d 	bl	2d8d8 <strlcpy>
   36ba0:	e1a00004 	mov	r0, r4
   36ba4:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   36ba8:	e28dd00c 	add	sp, sp, #12
   36bac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36bb0:	e59f1a40 	ldr	r1, [pc, #2624]	; 375f8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc84>
   36bb4:	e28d0020 	add	r0, sp, #32
   36bb8:	ebffcb84 	bl	299d0 <strcasecmp>
   36bbc:	e3500000 	cmp	r0, #0
   36bc0:	0a00009e 	beq	36e40 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4cc>
   36bc4:	e59f1a30 	ldr	r1, [pc, #2608]	; 375fc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc88>
   36bc8:	e28d0020 	add	r0, sp, #32
   36bcc:	ebffcb7f 	bl	299d0 <strcasecmp>
   36bd0:	e3500000 	cmp	r0, #0
   36bd4:	01a0000b 	moveq	r0, fp
   36bd8:	03a01001 	moveq	r1, #1
   36bdc:	0a000040 	beq	36ce4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x370>
   36be0:	e59f1a18 	ldr	r1, [pc, #2584]	; 37600 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8c>
   36be4:	e28d0020 	add	r0, sp, #32
   36be8:	ebffcb78 	bl	299d0 <strcasecmp>
   36bec:	e2501000 	subs	r1, r0, #0
   36bf0:	0a00003a 	beq	36ce0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x36c>
   36bf4:	e59f1a08 	ldr	r1, [pc, #2568]	; 37604 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc90>
   36bf8:	e28d0020 	add	r0, sp, #32
   36bfc:	ebffcb73 	bl	299d0 <strcasecmp>
   36c00:	e3500000 	cmp	r0, #0
   36c04:	0a000092 	beq	36e54 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4e0>
   36c08:	e59f19f8 	ldr	r1, [pc, #2552]	; 37608 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc94>
   36c0c:	e28d0020 	add	r0, sp, #32
   36c10:	ebffcb6e 	bl	299d0 <strcasecmp>
   36c14:	e3500000 	cmp	r0, #0
   36c18:	0a0000bb 	beq	36f0c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x598>
   36c1c:	e59f19e8 	ldr	r1, [pc, #2536]	; 3760c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc98>
   36c20:	e28d0020 	add	r0, sp, #32
   36c24:	ebffcb69 	bl	299d0 <strcasecmp>
   36c28:	e3500000 	cmp	r0, #0
   36c2c:	01a0000b 	moveq	r0, fp
   36c30:	03a01001 	moveq	r1, #1
   36c34:	0a0000bd 	beq	36f30 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5bc>
   36c38:	e59f19d0 	ldr	r1, [pc, #2512]	; 37610 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc9c>
   36c3c:	e28d0020 	add	r0, sp, #32
   36c40:	ebffcb62 	bl	299d0 <strcasecmp>
   36c44:	e3500000 	cmp	r0, #0
   36c48:	0a0000b6 	beq	36f28 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5b4>
   36c4c:	e59f19c0 	ldr	r1, [pc, #2496]	; 37614 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca0>
   36c50:	e28d0020 	add	r0, sp, #32
   36c54:	ebffcb5d 	bl	299d0 <strcasecmp>
   36c58:	e3500000 	cmp	r0, #0
   36c5c:	0a0000c9 	beq	36f88 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x614>
   36c60:	e59f19b0 	ldr	r1, [pc, #2480]	; 37618 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca4>
   36c64:	e28d0020 	add	r0, sp, #32
   36c68:	ebffcb58 	bl	299d0 <strcasecmp>
   36c6c:	e3500000 	cmp	r0, #0
   36c70:	0a0000cb 	beq	36fa4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   36c74:	e59f19a0 	ldr	r1, [pc, #2464]	; 3761c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca8>
   36c78:	e28d0020 	add	r0, sp, #32
   36c7c:	ebffcb53 	bl	299d0 <strcasecmp>
   36c80:	e250c000 	subs	ip, r0, #0
   36c84:	1a0000cd 	bne	36fc0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x64c>
   36c88:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36c8c:	e2822004 	add	r2, r2, #4
   36c90:	e58d2000 	str	r2, [sp]
   36c94:	e58dc00c 	str	ip, [sp, #12]
   36c98:	e58dc008 	str	ip, [sp, #8]
   36c9c:	e58dc004 	str	ip, [sp, #4]
   36ca0:	e1a03007 	mov	r3, r7
   36ca4:	e3a02001 	mov	r2, #1
   36ca8:	e59f192c 	ldr	r1, [pc, #2348]	; 375dc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   36cac:	e1a00005 	mov	r0, r5
   36cb0:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36cb4:	ebfffce4 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36cb8:	e3500000 	cmp	r0, #0
   36cbc:	0affffb3 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36cc0:	e1a0000b 	mov	r0, fp
   36cc4:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36cc8:	ebfff36e 	bl	33a88 <BusAccess::rawBusControlSetAddress(unsigned long)>
   36ccc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36cd0:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36cd4:	e1a00005 	mov	r0, r5
   36cd8:	ebfffe92 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36cdc:	eaffff32 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36ce0:	e1a0000b 	mov	r0, fp
   36ce4:	ebfff1e6 	bl	33484 <BusAccess::rawBusControlEnable(bool)>
   36ce8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36cec:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36cf0:	e1a00005 	mov	r0, r5
   36cf4:	ebfffe8b 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36cf8:	eaffff2b 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36cfc:	e59f191c 	ldr	r1, [pc, #2332]	; 37620 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcac>
   36d00:	e28d0020 	add	r0, sp, #32
   36d04:	ebffcb31 	bl	299d0 <strcasecmp>
   36d08:	e3500000 	cmp	r0, #0
   36d0c:	0a0001cc 	beq	37444 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xad0>
   36d10:	e59f190c 	ldr	r1, [pc, #2316]	; 37624 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb0>
   36d14:	e28d0020 	add	r0, sp, #32
   36d18:	ebffcb2c 	bl	299d0 <strcasecmp>
   36d1c:	e2502000 	subs	r2, r0, #0
   36d20:	0a0001bf 	beq	37424 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab0>
   36d24:	e59f18fc 	ldr	r1, [pc, #2300]	; 37628 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb4>
   36d28:	e28d0020 	add	r0, sp, #32
   36d2c:	ebffcb27 	bl	299d0 <strcasecmp>
   36d30:	e3500000 	cmp	r0, #0
   36d34:	0a0001b3 	beq	37408 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa94>
   36d38:	e59f18ec 	ldr	r1, [pc, #2284]	; 3762c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb8>
   36d3c:	e28d0020 	add	r0, sp, #32
   36d40:	ebffcb22 	bl	299d0 <strcasecmp>
   36d44:	e3500000 	cmp	r0, #0
   36d48:	0a0001aa 	beq	373f8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa84>
   36d4c:	e59f18dc 	ldr	r1, [pc, #2268]	; 37630 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcbc>
   36d50:	e28d0020 	add	r0, sp, #32
   36d54:	ebffcb1d 	bl	299d0 <strcasecmp>
   36d58:	e2502000 	subs	r2, r0, #0
   36d5c:	0a00019d 	beq	373d8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa64>
   36d60:	e59f18cc 	ldr	r1, [pc, #2252]	; 37634 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc0>
   36d64:	e28d0020 	add	r0, sp, #32
   36d68:	ebffcb18 	bl	299d0 <strcasecmp>
   36d6c:	e3500000 	cmp	r0, #0
   36d70:	0a000194 	beq	373c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa54>
   36d74:	e59f18bc 	ldr	r1, [pc, #2236]	; 37638 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc4>
   36d78:	e28d0020 	add	r0, sp, #32
   36d7c:	ebffcb13 	bl	299d0 <strcasecmp>
   36d80:	e2502000 	subs	r2, r0, #0
   36d84:	0a000187 	beq	373a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa34>
   36d88:	e59f18ac 	ldr	r1, [pc, #2220]	; 3763c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc8>
   36d8c:	e28d0020 	add	r0, sp, #32
   36d90:	ebffcb0e 	bl	299d0 <strcasecmp>
   36d94:	e3500000 	cmp	r0, #0
   36d98:	0affff03 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d9c:	e59f189c 	ldr	r1, [pc, #2204]	; 37640 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xccc>
   36da0:	e28d0020 	add	r0, sp, #32
   36da4:	ebffcb09 	bl	299d0 <strcasecmp>
   36da8:	e3500000 	cmp	r0, #0
   36dac:	0afffefe 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36db0:	e59f188c 	ldr	r1, [pc, #2188]	; 37644 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd0>
   36db4:	e28d0020 	add	r0, sp, #32
   36db8:	ebffcb04 	bl	299d0 <strcasecmp>
   36dbc:	e3500000 	cmp	r0, #0
   36dc0:	0afffef9 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dc4:	e59f187c 	ldr	r1, [pc, #2172]	; 37648 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd4>
   36dc8:	e28d0020 	add	r0, sp, #32
   36dcc:	ebffcaff 	bl	299d0 <strcasecmp>
   36dd0:	e3500000 	cmp	r0, #0
   36dd4:	0afffef4 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dd8:	e59f186c 	ldr	r1, [pc, #2156]	; 3764c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd8>
   36ddc:	e28d0020 	add	r0, sp, #32
   36de0:	ebffcafa 	bl	299d0 <strcasecmp>
   36de4:	e3500000 	cmp	r0, #0
   36de8:	0afffeef 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dec:	e28d0020 	add	r0, sp, #32
   36df0:	e59f1858 	ldr	r1, [pc, #2136]	; 37650 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcdc>
   36df4:	ebffcaf5 	bl	299d0 <strcasecmp>
   36df8:	e2505000 	subs	r5, r0, #0
   36dfc:	1afffee9 	bne	369a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   36e00:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36e04:	e1a01007 	mov	r1, r7
   36e08:	e2822004 	add	r2, r2, #4
   36e0c:	e3a03032 	mov	r3, #50	; 0x32
   36e10:	e59f083c 	ldr	r0, [pc, #2108]	; 37654 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce0>
   36e14:	ebffdb65 	bl	2dbb0 <jsonGetValueForKey>
   36e18:	e2504000 	subs	r4, r0, #0
   36e1c:	0afffee2 	beq	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e20:	e28d0e45 	add	r0, sp, #1104	; 0x450
   36e24:	e1a01005 	mov	r1, r5
   36e28:	e2800004 	add	r0, r0, #4
   36e2c:	e3a0200a 	mov	r2, #10
   36e30:	ebffcc0e 	bl	29e70 <strtoul>
   36e34:	e1a01000 	mov	r1, r0
   36e38:	e1a0000b 	mov	r0, fp
   36e3c:	ebffe7c2 	bl	30d4c <BusAccess::waitSetCycleUs(unsigned long)>
   36e40:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e44:	e59f180c 	ldr	r1, [pc, #2060]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e48:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e4c:	ebffdaa1 	bl	2d8d8 <strlcpy>
   36e50:	eafffed5 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e54:	e1a0000b 	mov	r0, fp
   36e58:	ebfff190 	bl	334a0 <BusAccess::rawBusControlClearWait()>
   36e5c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e60:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36e64:	e1a00005 	mov	r0, r5
   36e68:	ebfffe2e 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36e6c:	eafffece 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e70:	e28d1e45 	add	r1, sp, #1104	; 0x450
   36e74:	e59d2014 	ldr	r2, [sp, #20]
   36e78:	e2811008 	add	r1, r1, #8
   36e7c:	e241a004 	sub	sl, r1, #4
   36e80:	e59d3018 	ldr	r3, [sp, #24]
   36e84:	e58d2000 	str	r2, [sp]
   36e88:	e59f17cc 	ldr	r1, [pc, #1996]	; 3765c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36e8c:	e59f27cc 	ldr	r2, [pc, #1996]	; 37660 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcec>
   36e90:	e58d5004 	str	r5, [sp, #4]
   36e94:	e1a0000a 	mov	r0, sl
   36e98:	ebffdb05 	bl	2dab4 <snprintf>
   36e9c:	e1a0000a 	mov	r0, sl
   36ea0:	ebffcaa5 	bl	2993c <strlen>
   36ea4:	e59d3018 	ldr	r3, [sp, #24]
   36ea8:	e3530000 	cmp	r3, #0
   36eac:	0a00000d 	beq	36ee8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x574>
   36eb0:	e59f97ac 	ldr	r9, [pc, #1964]	; 37664 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf0>
   36eb4:	e59f87a0 	ldr	r8, [pc, #1952]	; 3765c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36eb8:	e28d7053 	add	r7, sp, #83	; 0x53
   36ebc:	e08a6000 	add	r6, sl, r0
   36ec0:	e5f73001 	ldrb	r3, [r7, #1]!
   36ec4:	e1a00006 	mov	r0, r6
   36ec8:	e1a02009 	mov	r2, r9
   36ecc:	e1a01008 	mov	r1, r8
   36ed0:	ebffdaf7 	bl	2dab4 <snprintf>
   36ed4:	e59d3018 	ldr	r3, [sp, #24]
   36ed8:	e2855001 	add	r5, r5, #1
   36edc:	e1530005 	cmp	r3, r5
   36ee0:	e2866002 	add	r6, r6, #2
   36ee4:	8afffff5 	bhi	36ec0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x54c>
   36ee8:	e59f276c 	ldr	r2, [pc, #1900]	; 3765c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36eec:	e59f1774 	ldr	r1, [pc, #1908]	; 37668 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf4>
   36ef0:	e1a0000a 	mov	r0, sl
   36ef4:	ebffda93 	bl	2d948 <strlcat>
   36ef8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36efc:	e1a0100a 	mov	r1, sl
   36f00:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36f04:	ebffda73 	bl	2d8d8 <strlcpy>
   36f08:	eafffea7 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f0c:	e1a0000b 	mov	r0, fp
   36f10:	ebfff167 	bl	334b4 <BusAccess::rawBusControlWaitDisable()>
   36f14:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f18:	e59f1738 	ldr	r1, [pc, #1848]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36f1c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36f20:	ebffda6c 	bl	2d8d8 <strlcpy>
   36f24:	eafffea0 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f28:	e1a0000b 	mov	r0, fp
   36f2c:	e3a01000 	mov	r1, #0
   36f30:	ebfff167 	bl	334d4 <BusAccess::rawBusControlClockEnable(bool)>
   36f34:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f38:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f3c:	e1a00005 	mov	r0, r5
   36f40:	ebfffdf8 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36f44:	eafffe98 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f48:	e59dc454 	ldr	ip, [sp, #1108]	; 0x454
   36f4c:	e3a0e001 	mov	lr, #1
   36f50:	e29cc000 	adds	ip, ip, #0
   36f54:	13a0c001 	movne	ip, #1
   36f58:	e1a02009 	mov	r2, r9
   36f5c:	e59d101c 	ldr	r1, [sp, #28]
   36f60:	e1a00005 	mov	r0, r5
   36f64:	e88d5000 	stm	sp, {ip, lr}
   36f68:	ebfffe46 	bl	36888 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   36f6c:	e3500000 	cmp	r0, #0
   36f70:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f74:	0affffb2 	beq	36e44 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4d0>
   36f78:	e59f1668 	ldr	r1, [pc, #1640]	; 375e8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   36f7c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36f80:	ebffda54 	bl	2d8d8 <strlcpy>
   36f84:	eafffe88 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f88:	e1a0000b 	mov	r0, fp
   36f8c:	ebfff2b7 	bl	33a70 <BusAccess::rawBusControlTakeBus()>
   36f90:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f94:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f98:	e1a00005 	mov	r0, r5
   36f9c:	ebfffde1 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36fa0:	eafffe81 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36fa4:	e1a0000b 	mov	r0, fp
   36fa8:	ebfff2b5 	bl	33a84 <BusAccess::rawBusControlReleaseBus()>
   36fac:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36fb0:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36fb4:	e1a00005 	mov	r0, r5
   36fb8:	ebfffdda 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   36fbc:	eafffe7a 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36fc0:	e59f16a4 	ldr	r1, [pc, #1700]	; 3766c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   36fc4:	e28d0020 	add	r0, sp, #32
   36fc8:	ebffca80 	bl	299d0 <strcasecmp>
   36fcc:	e3500000 	cmp	r0, #0
   36fd0:	0a000021 	beq	3705c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x6e8>
   36fd4:	e59f1694 	ldr	r1, [pc, #1684]	; 37670 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcfc>
   36fd8:	e28d0020 	add	r0, sp, #32
   36fdc:	ebffca7b 	bl	299d0 <strcasecmp>
   36fe0:	e250c000 	subs	ip, r0, #0
   36fe4:	1a000023 	bne	37078 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x704>
   36fe8:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36fec:	e2822004 	add	r2, r2, #4
   36ff0:	e58d2000 	str	r2, [sp]
   36ff4:	e58dc00c 	str	ip, [sp, #12]
   36ff8:	e58dc008 	str	ip, [sp, #8]
   36ffc:	e58dc004 	str	ip, [sp, #4]
   37000:	e1a03007 	mov	r3, r7
   37004:	e3a02001 	mov	r2, #1
   37008:	e59f1664 	ldr	r1, [pc, #1636]	; 37674 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   3700c:	e1a00005 	mov	r0, r5
   37010:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   37014:	ebfffc0c 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   37018:	e3500000 	cmp	r0, #0
   3701c:	0afffedb 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   37020:	ebffbd1a 	bl	26490 <CLogger::Get()>
   37024:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   37028:	e59f3648 	ldr	r3, [pc, #1608]	; 37678 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd04>
   3702c:	e58d2000 	str	r2, [sp]
   37030:	e59f1644 	ldr	r1, [pc, #1604]	; 3767c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   37034:	e3a02004 	mov	r2, #4
   37038:	ebffbc51 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3703c:	e1a0000b 	mov	r0, fp
   37040:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   37044:	ebfff290 	bl	33a8c <BusAccess::rawBusControlSetData(unsigned long)>
   37048:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3704c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   37050:	e1a00005 	mov	r0, r5
   37054:	ebfffdb3 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   37058:	eafffe53 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3705c:	e1a0000b 	mov	r0, fp
   37060:	ebfff2c6 	bl	33b80 <BusAccess::rawBusControlReadPIB()>
   37064:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37068:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   3706c:	e1a00005 	mov	r0, r5
   37070:	ebfffdac 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   37074:	eafffe4c 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37078:	e59f1600 	ldr	r1, [pc, #1536]	; 37680 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0c>
   3707c:	e28d0020 	add	r0, sp, #32
   37080:	ebffca52 	bl	299d0 <strcasecmp>
   37084:	e250c000 	subs	ip, r0, #0
   37088:	1a000015 	bne	370e4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x770>
   3708c:	e28d2e45 	add	r2, sp, #1104	; 0x450
   37090:	e2822004 	add	r2, r2, #4
   37094:	e58d2000 	str	r2, [sp]
   37098:	e58dc00c 	str	ip, [sp, #12]
   3709c:	e58dc008 	str	ip, [sp, #8]
   370a0:	e58dc004 	str	ip, [sp, #4]
   370a4:	e1a03007 	mov	r3, r7
   370a8:	e3a02001 	mov	r2, #1
   370ac:	e59f15c0 	ldr	r1, [pc, #1472]	; 37674 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   370b0:	e1a00005 	mov	r0, r5
   370b4:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   370b8:	ebfffbe3 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   370bc:	e3500000 	cmp	r0, #0
   370c0:	0afffeb2 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   370c4:	e1a0000b 	mov	r0, fp
   370c8:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   370cc:	ebfff2b4 	bl	33ba4 <BusAccess::rawBusControlWritePIB(unsigned long)>
   370d0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   370d4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   370d8:	e1a00005 	mov	r0, r5
   370dc:	ebfffd91 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   370e0:	eafffe31 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   370e4:	e59f1598 	ldr	r1, [pc, #1432]	; 37684 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd10>
   370e8:	e28d0020 	add	r0, sp, #32
   370ec:	ebffca37 	bl	299d0 <strcasecmp>
   370f0:	e2506000 	subs	r6, r0, #0
   370f4:	1a000025 	bne	37190 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x81c>
   370f8:	e3a02001 	mov	r2, #1
   370fc:	e28d3054 	add	r3, sp, #84	; 0x54
   37100:	e58d3000 	str	r3, [sp]
   37104:	e58d6008 	str	r6, [sp, #8]
   37108:	e58d6004 	str	r6, [sp, #4]
   3710c:	e58d200c 	str	r2, [sp, #12]
   37110:	e1a03007 	mov	r3, r7
   37114:	e59f156c 	ldr	r1, [pc, #1388]	; 37688 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   37118:	e1a00005 	mov	r0, r5
   3711c:	e58d6054 	str	r6, [sp, #84]	; 0x54
   37120:	ebfffbc9 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   37124:	e3500000 	cmp	r0, #0
   37128:	0afffe98 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   3712c:	e28d2e45 	add	r2, sp, #1104	; 0x450
   37130:	e2822004 	add	r2, r2, #4
   37134:	e58d2000 	str	r2, [sp]
   37138:	e58d600c 	str	r6, [sp, #12]
   3713c:	e58d6008 	str	r6, [sp, #8]
   37140:	e58d6004 	str	r6, [sp, #4]
   37144:	e1a03007 	mov	r3, r7
   37148:	e3a02002 	mov	r2, #2
   3714c:	e59f1538 	ldr	r1, [pc, #1336]	; 3768c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd18>
   37150:	e1a00005 	mov	r0, r5
   37154:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   37158:	ebfffbbb 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3715c:	e3500000 	cmp	r0, #0
   37160:	0afffe8a 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   37164:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   37168:	e1a0000b 	mov	r0, fp
   3716c:	e2922000 	adds	r2, r2, #0
   37170:	13a02001 	movne	r2, #1
   37174:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   37178:	ebfff277 	bl	33b5c <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   3717c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37180:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   37184:	e1a00005 	mov	r0, r5
   37188:	ebfffd66 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   3718c:	eafffe06 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37190:	e59f14f8 	ldr	r1, [pc, #1272]	; 37690 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd1c>
   37194:	e28d0020 	add	r0, sp, #32
   37198:	ebffca0c 	bl	299d0 <strcasecmp>
   3719c:	e250c000 	subs	ip, r0, #0
   371a0:	1a000015 	bne	371fc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x888>
   371a4:	e3a02001 	mov	r2, #1
   371a8:	e28d1e45 	add	r1, sp, #1104	; 0x450
   371ac:	e2811004 	add	r1, r1, #4
   371b0:	e58d1000 	str	r1, [sp]
   371b4:	e58dc008 	str	ip, [sp, #8]
   371b8:	e58dc004 	str	ip, [sp, #4]
   371bc:	e1a03007 	mov	r3, r7
   371c0:	e58d200c 	str	r2, [sp, #12]
   371c4:	e59f14bc 	ldr	r1, [pc, #1212]	; 37688 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   371c8:	e1a00005 	mov	r0, r5
   371cc:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   371d0:	ebfffb9d 	bl	3604c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   371d4:	e3500000 	cmp	r0, #0
   371d8:	0afffe6c 	beq	36b90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   371dc:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   371e0:	e1a0000b 	mov	r0, fp
   371e4:	ebfff25f 	bl	33b68 <BusAccess::rawBusControlGetPin(unsigned long)>
   371e8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   371ec:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   371f0:	e1a00005 	mov	r0, r5
   371f4:	ebfffd4b 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   371f8:	eafffdeb 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   371fc:	e59f1490 	ldr	r1, [pc, #1168]	; 37694 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd20>
   37200:	e28d0020 	add	r0, sp, #32
   37204:	ebffc9f1 	bl	299d0 <strcasecmp>
   37208:	e3500000 	cmp	r0, #0
   3720c:	0a000050 	beq	37354 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9e0>
   37210:	e59f1480 	ldr	r1, [pc, #1152]	; 37698 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd24>
   37214:	e28d0020 	add	r0, sp, #32
   37218:	ebffc9ec 	bl	299d0 <strcasecmp>
   3721c:	e3500000 	cmp	r0, #0
   37220:	0a0000e3 	beq	375b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc40>
   37224:	e59f1470 	ldr	r1, [pc, #1136]	; 3769c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd28>
   37228:	e28d0020 	add	r0, sp, #32
   3722c:	ebffc9e7 	bl	299d0 <strcasecmp>
   37230:	e3500000 	cmp	r0, #0
   37234:	0a0000d6 	beq	37594 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc20>
   37238:	e59f1460 	ldr	r1, [pc, #1120]	; 376a0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd2c>
   3723c:	e28d0020 	add	r0, sp, #32
   37240:	ebffc9e2 	bl	299d0 <strcasecmp>
   37244:	e3500000 	cmp	r0, #0
   37248:	0a0000ca 	beq	37578 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc04>
   3724c:	e59f1450 	ldr	r1, [pc, #1104]	; 376a4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd30>
   37250:	e28d0020 	add	r0, sp, #32
   37254:	ebffc9dd 	bl	299d0 <strcasecmp>
   37258:	e2503000 	subs	r3, r0, #0
   3725c:	0a0000a6 	beq	374fc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb88>
   37260:	e59f1440 	ldr	r1, [pc, #1088]	; 376a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd34>
   37264:	e28d0020 	add	r0, sp, #32
   37268:	ebffc9d8 	bl	299d0 <strcasecmp>
   3726c:	e3500000 	cmp	r0, #0
   37270:	0a00009a 	beq	374e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb6c>
   37274:	e59f1430 	ldr	r1, [pc, #1072]	; 376ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd38>
   37278:	e28d0020 	add	r0, sp, #32
   3727c:	ebffc9d3 	bl	299d0 <strcasecmp>
   37280:	e3500000 	cmp	r0, #0
   37284:	0a00008e 	beq	374c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb50>
   37288:	e59f1420 	ldr	r1, [pc, #1056]	; 376b0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd3c>
   3728c:	e28d0020 	add	r0, sp, #32
   37290:	ebffc9ce 	bl	299d0 <strcasecmp>
   37294:	e3500000 	cmp	r0, #0
   37298:	0a00007b 	beq	3748c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb18>
   3729c:	e59f1410 	ldr	r1, [pc, #1040]	; 376b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd40>
   372a0:	e28d0020 	add	r0, sp, #32
   372a4:	ebffc9c9 	bl	299d0 <strcasecmp>
   372a8:	e3500000 	cmp	r0, #0
   372ac:	0a000068 	beq	37454 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   372b0:	e59f1400 	ldr	r1, [pc, #1024]	; 376b8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd44>
   372b4:	e28d0020 	add	r0, sp, #32
   372b8:	ebffc9c4 	bl	299d0 <strcasecmp>
   372bc:	e3500000 	cmp	r0, #0
   372c0:	0a000063 	beq	37454 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   372c4:	e59f13f0 	ldr	r1, [pc, #1008]	; 376bc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd48>
   372c8:	e28d0020 	add	r0, sp, #32
   372cc:	ebffc9bf 	bl	299d0 <strcasecmp>
   372d0:	e3500000 	cmp	r0, #0
   372d4:	0a00002b 	beq	37388 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa14>
   372d8:	e59f13e0 	ldr	r1, [pc, #992]	; 376c0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4c>
   372dc:	e28d0020 	add	r0, sp, #32
   372e0:	ebffc9ba 	bl	299d0 <strcasecmp>
   372e4:	e3500000 	cmp	r0, #0
   372e8:	1afffe83 	bne	36cfc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x388>
   372ec:	e28dae45 	add	sl, sp, #1104	; 0x450
   372f0:	e28aa004 	add	sl, sl, #4
   372f4:	e1a01007 	mov	r1, r7
   372f8:	e1a0200a 	mov	r2, sl
   372fc:	e3a03032 	mov	r3, #50	; 0x32
   37300:	e59f03bc 	ldr	r0, [pc, #956]	; 376c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   37304:	ebffda29 	bl	2dbb0 <jsonGetValueForKey>
   37308:	e3500000 	cmp	r0, #0
   3730c:	0a000015 	beq	37368 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9f4>
   37310:	e3a0200a 	mov	r2, #10
   37314:	e3a01000 	mov	r1, #0
   37318:	e1a0000a 	mov	r0, sl
   3731c:	ebffcad3 	bl	29e70 <strtoul>
   37320:	e1a01000 	mov	r1, r0
   37324:	e1a0000b 	mov	r0, fp
   37328:	ebffec8a 	bl	32558 <BusAccess::clockSetFreqHz(unsigned long)>
   3732c:	e1a0000b 	mov	r0, fp
   37330:	ebffed83 	bl	32944 <BusAccess::clockCurFreqHz()>
   37334:	e59f238c 	ldr	r2, [pc, #908]	; 376c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   37338:	e1a03000 	mov	r3, r0
   3733c:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   37340:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   37344:	ebffd9da 	bl	2dab4 <snprintf>
   37348:	e1a00004 	mov	r0, r4
   3734c:	e1a04000 	mov	r4, r0
   37350:	eafffd95 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37354:	e1a00005 	mov	r0, r5
   37358:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3735c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   37360:	ebfffcf0 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   37364:	eafffd90 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37368:	e1a01009 	mov	r1, r9
   3736c:	e3a03032 	mov	r3, #50	; 0x32
   37370:	e1a0200a 	mov	r2, sl
   37374:	e59f0348 	ldr	r0, [pc, #840]	; 376c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   37378:	ebffda0c 	bl	2dbb0 <jsonGetValueForKey>
   3737c:	e3500000 	cmp	r0, #0
   37380:	1affffe2 	bne	37310 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x99c>
   37384:	eafffff0 	b	3734c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9d8>
   37388:	e1a0000b 	mov	r0, fp
   3738c:	ebffed6c 	bl	32944 <BusAccess::clockCurFreqHz()>
   37390:	e59f2330 	ldr	r2, [pc, #816]	; 376c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   37394:	e1a03000 	mov	r3, r0
   37398:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   3739c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   373a0:	ebffd9c3 	bl	2dab4 <snprintf>
   373a4:	eafffd80 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   373a8:	e1a0000b 	mov	r0, fp
   373ac:	e595100c 	ldr	r1, [r5, #12]
   373b0:	ebffe65a 	bl	30d20 <BusAccess::waitOnIO(int, bool)>
   373b4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   373b8:	e59f1298 	ldr	r1, [pc, #664]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   373bc:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   373c0:	ebffd944 	bl	2d8d8 <strlcpy>
   373c4:	eafffd78 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   373c8:	e595100c 	ldr	r1, [r5, #12]
   373cc:	e1a0000b 	mov	r0, fp
   373d0:	e3a02001 	mov	r2, #1
   373d4:	eafffff5 	b	373b0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa3c>
   373d8:	e1a0000b 	mov	r0, fp
   373dc:	e595100c 	ldr	r1, [r5, #12]
   373e0:	ebffe645 	bl	30cfc <BusAccess::waitOnMemory(int, bool)>
   373e4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   373e8:	e59f1268 	ldr	r1, [pc, #616]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   373ec:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   373f0:	ebffd938 	bl	2d8d8 <strlcpy>
   373f4:	eafffd6c 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   373f8:	e595100c 	ldr	r1, [r5, #12]
   373fc:	e1a0000b 	mov	r0, fp
   37400:	e3a02001 	mov	r2, #1
   37404:	eafffff5 	b	373e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa6c>
   37408:	e1a0000b 	mov	r0, fp
   3740c:	ebffe85d 	bl	31588 <BusAccess::waitRelease()>
   37410:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37414:	e59f123c 	ldr	r1, [pc, #572]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   37418:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   3741c:	ebffd92d 	bl	2d8d8 <strlcpy>
   37420:	eafffd61 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37424:	e1a0000b 	mov	r0, fp
   37428:	e595100c 	ldr	r1, [r5, #12]
   3742c:	ebffe64a 	bl	30d5c <BusAccess::waitHold(int, bool)>
   37430:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37434:	e59f121c 	ldr	r1, [pc, #540]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   37438:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   3743c:	ebffd925 	bl	2d8d8 <strlcpy>
   37440:	eafffd59 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37444:	e595100c 	ldr	r1, [r5, #12]
   37448:	e1a0000b 	mov	r0, fp
   3744c:	e3a02001 	mov	r2, #1
   37450:	eafffff5 	b	3742c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab8>
   37454:	ebffbc0d 	bl	26490 <CLogger::Get()>
   37458:	e59f326c 	ldr	r3, [pc, #620]	; 376cc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd58>
   3745c:	e3a02004 	mov	r2, #4
   37460:	e59f1214 	ldr	r1, [pc, #532]	; 3767c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   37464:	ebffbb46 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37468:	e595100c 	ldr	r1, [r5, #12]
   3746c:	e1a0000b 	mov	r0, fp
   37470:	e3a02004 	mov	r2, #4
   37474:	ebffe685 	bl	30e90 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   37478:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3747c:	e59f11d4 	ldr	r1, [pc, #468]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   37480:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   37484:	ebffd913 	bl	2d8d8 <strlcpy>
   37488:	eafffd47 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3748c:	ebffbbff 	bl	26490 <CLogger::Get()>
   37490:	e59f3238 	ldr	r3, [pc, #568]	; 376d0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd5c>
   37494:	e3a02004 	mov	r2, #4
   37498:	e59f11dc 	ldr	r1, [pc, #476]	; 3767c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   3749c:	ebffbb38 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   374a0:	e595100c 	ldr	r1, [r5, #12]
   374a4:	e1a0000b 	mov	r0, fp
   374a8:	e3e02000 	mvn	r2, #0
   374ac:	ebffe648 	bl	30dd4 <BusAccess::targetReqReset(int, int)>
   374b0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   374b4:	e59f119c 	ldr	r1, [pc, #412]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   374b8:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   374bc:	ebffd905 	bl	2d8d8 <strlcpy>
   374c0:	eafffd39 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   374c4:	e1a0000b 	mov	r0, fp
   374c8:	ebffe5e1 	bl	30c54 <BusAccess::busAccessReset()>
   374cc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   374d0:	e59f1180 	ldr	r1, [pc, #384]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   374d4:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   374d8:	ebffd8fe 	bl	2d8d8 <strlcpy>
   374dc:	eafffd32 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   374e0:	e1a0000b 	mov	r0, fp
   374e4:	ebffe97d 	bl	31ae0 <BusAccess::clearStatus()>
   374e8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   374ec:	e59f1164 	ldr	r1, [pc, #356]	; 37658 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   374f0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   374f4:	ebffd8f7 	bl	2d8d8 <strlcpy>
   374f8:	eafffd2b 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   374fc:	e28d1e45 	add	r1, sp, #1104	; 0x450
   37500:	e1a0000b 	mov	r0, fp
   37504:	e2811004 	add	r1, r1, #4
   37508:	e58d3454 	str	r3, [sp, #1108]	; 0x454
   3750c:	e58d3458 	str	r3, [sp, #1112]	; 0x458
   37510:	e58d345c 	str	r3, [sp, #1116]	; 0x45c
   37514:	e58d3460 	str	r3, [sp, #1120]	; 0x460
   37518:	e58d3464 	str	r3, [sp, #1124]	; 0x464
   3751c:	e58d3468 	str	r3, [sp, #1128]	; 0x468
   37520:	e58d346c 	str	r3, [sp, #1132]	; 0x46c
   37524:	e58d3470 	str	r3, [sp, #1136]	; 0x470
   37528:	e58d3488 	str	r3, [sp, #1160]	; 0x488
   3752c:	e58d348c 	str	r3, [sp, #1164]	; 0x48c
   37530:	e58d3490 	str	r3, [sp, #1168]	; 0x490
   37534:	e58d3494 	str	r3, [sp, #1172]	; 0x494
   37538:	e58d3498 	str	r3, [sp, #1176]	; 0x498
   3753c:	e58d349c 	str	r3, [sp, #1180]	; 0x49c
   37540:	e58d3474 	str	r3, [sp, #1140]	; 0x474
   37544:	e58d3478 	str	r3, [sp, #1144]	; 0x478
   37548:	e58d347c 	str	r3, [sp, #1148]	; 0x47c
   3754c:	e58d3480 	str	r3, [sp, #1152]	; 0x480
   37550:	e58d3484 	str	r3, [sp, #1156]	; 0x484
   37554:	ebffe95a 	bl	31ac4 <BusAccess::getStatus(BusAccessStatusInfo&)>
   37558:	e28d0e45 	add	r0, sp, #1104	; 0x450
   3755c:	e2800004 	add	r0, r0, #4
   37560:	ebffe91b 	bl	319d4 <BusAccessStatusInfo::getJson()>
   37564:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37568:	e1a01000 	mov	r1, r0
   3756c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   37570:	ebffd8d8 	bl	2d8d8 <strlcpy>
   37574:	eafffd0c 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37578:	e1a0000b 	mov	r0, fp
   3757c:	ebfff1aa 	bl	33c2c <BusAccess::rawBusControlMuxClear()>
   37580:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   37584:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   37588:	e1a00005 	mov	r0, r5
   3758c:	ebfffc65 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   37590:	eafffd05 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   37594:	e1a01007 	mov	r1, r7
   37598:	e1a00005 	mov	r0, r5
   3759c:	ebfffbeb 	bl	36550 <BusControlAPI::muxLineHandler(char const*)>
   375a0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   375a4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   375a8:	e1a00005 	mov	r0, r5
   375ac:	ebfffc5d 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   375b0:	eafffcfd 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   375b4:	e1a01007 	mov	r1, r7
   375b8:	e1a00005 	mov	r0, r5
   375bc:	ebfffb1c 	bl	36234 <BusControlAPI::busLineHandler(char const*)>
   375c0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   375c4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   375c8:	e1a00005 	mov	r0, r5
   375cc:	ebfffc55 	bl	36728 <BusControlAPI::busLinesRead(char*, int)>
   375d0:	eafffcf5 	b	369ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   375d4:	00040804 	.word	0x00040804
   375d8:	00048670 	.word	0x00048670
   375dc:	00048674 	.word	0x00048674
   375e0:	0004868c 	.word	0x0004868c
   375e4:	00048690 	.word	0x00048690
   375e8:	000486ac 	.word	0x000486ac
   375ec:	000486f4 	.word	0x000486f4
   375f0:	00048698 	.word	0x00048698
   375f4:	0004867c 	.word	0x0004867c
   375f8:	00048704 	.word	0x00048704
   375fc:	00048710 	.word	0x00048710
   37600:	00048720 	.word	0x00048720
   37604:	00048734 	.word	0x00048734
   37608:	00048744 	.word	0x00048744
   3760c:	00048758 	.word	0x00048758
   37610:	0004876c 	.word	0x0004876c
   37614:	00048780 	.word	0x00048780
   37618:	0004878c 	.word	0x0004878c
   3761c:	0004879c 	.word	0x0004879c
   37620:	0004890c 	.word	0x0004890c
   37624:	00048918 	.word	0x00048918
   37628:	00048924 	.word	0x00048924
   3762c:	00048930 	.word	0x00048930
   37630:	00048940 	.word	0x00048940
   37634:	00048950 	.word	0x00048950
   37638:	0004895c 	.word	0x0004895c
   3763c:	00048968 	.word	0x00048968
   37640:	00048978 	.word	0x00048978
   37644:	0004898c 	.word	0x0004898c
   37648:	00048998 	.word	0x00048998
   3764c:	000489a0 	.word	0x000489a0
   37650:	000489a8 	.word	0x000489a8
   37654:	000489b4 	.word	0x000489b4
   37658:	000486f8 	.word	0x000486f8
   3765c:	00000864 	.word	0x00000864
   37660:	000486bc 	.word	0x000486bc
   37664:	000493cc 	.word	0x000493cc
   37668:	000488f4 	.word	0x000488f4
   3766c:	000487b0 	.word	0x000487b0
   37670:	000487c0 	.word	0x000487c0
   37674:	000487d0 	.word	0x000487d0
   37678:	000487d8 	.word	0x000487d8
   3767c:	0004852c 	.word	0x0004852c
   37680:	000487e8 	.word	0x000487e8
   37684:	000487f8 	.word	0x000487f8
   37688:	00048808 	.word	0x00048808
   3768c:	0004854c 	.word	0x0004854c
   37690:	0004880c 	.word	0x0004880c
   37694:	0004881c 	.word	0x0004881c
   37698:	0004882c 	.word	0x0004882c
   3769c:	0004883c 	.word	0x0004883c
   376a0:	00048850 	.word	0x00048850
   376a4:	00048860 	.word	0x00048860
   376a8:	0004886c 	.word	0x0004886c
   376ac:	0004887c 	.word	0x0004887c
   376b0:	00048884 	.word	0x00048884
   376b4:	000488a0 	.word	0x000488a0
   376b8:	000488c0 	.word	0x000488c0
   376bc:	000488d0 	.word	0x000488d0
   376c0:	000488f8 	.word	0x000488f8
   376c4:	00048904 	.word	0x00048904
   376c8:	000488dc 	.word	0x000488dc
   376cc:	000488b0 	.word	0x000488b0
   376d0:	00048890 	.word	0x00048890

000376d4 <BusControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   376d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   376d8:	e99d5000 	ldmib	sp, {ip, lr}
   376dc:	e3500000 	cmp	r0, #0
   376e0:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   376e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   376e8:	eafffca1 	b	36974 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000376ec <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   376ec:	e3500000 	cmp	r0, #0
   376f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   376f4:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   376f8:	e2800a02 	add	r0, r0, #8192	; 0x2000
   376fc:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37700:	e3500000 	cmp	r0, #0
   37704:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   37708:	e590e000 	ldr	lr, [r0]
   3770c:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   37710:	e1a0c00e 	mov	ip, lr
   37714:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   37718:	e12fff1c 	bx	ip

0003771c <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   3771c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37720:	e1a04000 	mov	r4, r0
   37724:	e1a05001 	mov	r5, r1
   37728:	e1a06002 	mov	r6, r2
   3772c:	e1a07003 	mov	r7, r3
   37730:	ebffbb56 	bl	26490 <CLogger::Get()>
   37734:	e59f3048 	ldr	r3, [pc, #72]	; 37784 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x68>
   37738:	e3a02004 	mov	r2, #4
   3773c:	e59f1044 	ldr	r1, [pc, #68]	; 37788 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x6c>
   37740:	ebffba8f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37744:	e3540000 	cmp	r4, #0
   37748:	0a00000b 	beq	3777c <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x60>
   3774c:	e2844a02 	add	r4, r4, #8192	; 0x2000
   37750:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37754:	e3500000 	cmp	r0, #0
   37758:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3775c:	e590c000 	ldr	ip, [r0]
   37760:	e1a03007 	mov	r3, r7
   37764:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
   37768:	e1a02006 	mov	r2, r6
   3776c:	e1a01005 	mov	r1, r5
   37770:	e1a0c00e 	mov	ip, lr
   37774:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   37778:	e12fff1c 	bx	ip
   3777c:	e1a00004 	mov	r0, r4
   37780:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37784:	000489c8 	.word	0x000489c8
   37788:	000489bc 	.word	0x000489bc

0003778c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]>:
   3778c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37790:	e2803a02 	add	r3, r0, #8192	; 0x2000
   37794:	e24dd01c 	sub	sp, sp, #28
   37798:	e1a02003 	mov	r2, r3
   3779c:	e58d3010 	str	r3, [sp, #16]
   377a0:	e5d33764 	ldrb	r3, [r3, #1892]	; 0x764
   377a4:	e58d1014 	str	r1, [sp, #20]
   377a8:	e3530000 	cmp	r3, #0
   377ac:	0a000035 	beq	37888 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0xfc>
   377b0:	e3a03000 	mov	r3, #0
   377b4:	e1a05000 	mov	r5, r0
   377b8:	e1a06003 	mov	r6, r3
   377bc:	e1a07003 	mov	r7, r3
   377c0:	e5c23767 	strb	r3, [r2, #1895]	; 0x767
   377c4:	e5950010 	ldr	r0, [r5, #16]
   377c8:	ebfff1a9 	bl	33e74 <TargetProgrammer::numMemoryBlocks()>
   377cc:	e1500006 	cmp	r0, r6
   377d0:	da000025 	ble	3786c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0xe0>
   377d4:	e1a01006 	mov	r1, r6
   377d8:	e5950010 	ldr	r0, [r5, #16]
   377dc:	ebfff1a7 	bl	33e80 <TargetProgrammer::getMemoryBlock(int)>
   377e0:	e1a04000 	mov	r4, r0
   377e4:	e5950010 	ldr	r0, [r5, #16]
   377e8:	e5958008 	ldr	r8, [r5, #8]
   377ec:	ebfff1a6 	bl	33e8c <TargetProgrammer::getMemoryImagePtr()>
   377f0:	e894000a 	ldm	r4, {r1, r3}
   377f4:	e58d7008 	str	r7, [sp, #8]
   377f8:	e0802001 	add	r2, r0, r1
   377fc:	e58d7004 	str	r7, [sp, #4]
   37800:	e1a00008 	mov	r0, r8
   37804:	e58d7000 	str	r7, [sp]
   37808:	ebfff5c5 	bl	34f24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   3780c:	e1a09000 	mov	r9, r0
   37810:	ebffbb1e 	bl	26490 <CLogger::Get()>
   37814:	e8940c00 	ldm	r4, {sl, fp}
   37818:	e1a08000 	mov	r8, r0
   3781c:	ebffd7f2 	bl	2d7ec <micros>
   37820:	e59f30b4 	ldr	r3, [pc, #180]	; 378dc <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x150>
   37824:	e58d000c 	str	r0, [sp, #12]
   37828:	e58d9008 	str	r9, [sp, #8]
   3782c:	e88d0c00 	stm	sp, {sl, fp}
   37830:	e1a00008 	mov	r0, r8
   37834:	e3a02004 	mov	r2, #4
   37838:	e59f10a0 	ldr	r1, [pc, #160]	; 378e0 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x154>
   3783c:	ebffba50 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37840:	e5943000 	ldr	r3, [r4]
   37844:	e2866001 	add	r6, r6, #1
   37848:	e3530000 	cmp	r3, #0
   3784c:	1affffdc 	bne	377c4 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x38>
   37850:	e3a02001 	mov	r2, #1
   37854:	e59d3010 	ldr	r3, [sp, #16]
   37858:	e5950010 	ldr	r0, [r5, #16]
   3785c:	e5c32767 	strb	r2, [r3, #1895]	; 0x767
   37860:	ebfff183 	bl	33e74 <TargetProgrammer::numMemoryBlocks()>
   37864:	e1500006 	cmp	r0, r6
   37868:	caffffd9 	bgt	377d4 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x48>
   3786c:	e59d3010 	ldr	r3, [sp, #16]
   37870:	e5d33765 	ldrb	r3, [r3, #1893]	; 0x765
   37874:	e3530000 	cmp	r3, #0
   37878:	1a000012 	bne	378c8 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x13c>
   3787c:	e3a03000 	mov	r3, #0
   37880:	e59d2010 	ldr	r2, [sp, #16]
   37884:	e5c23764 	strb	r3, [r2, #1892]	; 0x764
   37888:	e59d2010 	ldr	r2, [sp, #16]
   3788c:	e5d23766 	ldrb	r3, [r2, #1894]	; 0x766
   37890:	e3530000 	cmp	r3, #0
   37894:	0a000009 	beq	378c0 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x134>
   37898:	e5920760 	ldr	r0, [r2, #1888]	; 0x760
   3789c:	e3500000 	cmp	r0, #0
   378a0:	0a000003 	beq	378b4 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0x128>
   378a4:	e5903000 	ldr	r3, [r0]
   378a8:	e59d1014 	ldr	r1, [sp, #20]
   378ac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   378b0:	e12fff33 	blx	r3
   378b4:	e3a03000 	mov	r3, #0
   378b8:	e59d2010 	ldr	r2, [sp, #16]
   378bc:	e5c23766 	strb	r3, [r2, #1894]	; 0x766
   378c0:	e28dd01c 	add	sp, sp, #28
   378c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378c8:	e3e02000 	mvn	r2, #0
   378cc:	e5951014 	ldr	r1, [r5, #20]
   378d0:	e595000c 	ldr	r0, [r5, #12]
   378d4:	ebffe53e 	bl	30dd4 <BusAccess::targetReqReset(int, int)>
   378d8:	eaffffe7 	b	3787c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]+0xf0>
   378dc:	000489dc 	.word	0x000489dc
   378e0:	000489bc 	.word	0x000489bc

000378e4 <McManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   378e4:	e2903000 	adds	r3, r0, #0
   378e8:	13a03001 	movne	r3, #1
   378ec:	e3510004 	cmp	r1, #4
   378f0:	13a03000 	movne	r3, #0
   378f4:	e3530000 	cmp	r3, #0
   378f8:	012fff1e 	bxeq	lr
   378fc:	e3a01004 	mov	r1, #4
   37900:	eaffffa1 	b	3778c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]>

00037904 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>:
   37904:	e92d4070 	push	{r4, r5, r6, lr}
   37908:	e3a0c000 	mov	ip, #0
   3790c:	e3e04000 	mvn	r4, #0
   37910:	e3a06ffa 	mov	r6, #1000	; 0x3e8
   37914:	e3a05f7d 	mov	r5, #500	; 0x1f4
   37918:	e8800006 	stm	r0, {r1, r2}
   3791c:	e59d2014 	ldr	r2, [sp, #20]
   37920:	e5803008 	str	r3, [r0, #8]
   37924:	e59f3058 	ldr	r3, [pc, #88]	; 37984 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)+0x80>
   37928:	e5802010 	str	r2, [r0, #16]
   3792c:	e59d1010 	ldr	r1, [sp, #16]
   37930:	e59f2050 	ldr	r2, [pc, #80]	; 37988 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)+0x84>
   37934:	e5830000 	str	r0, [r3]
   37938:	e2803a02 	add	r3, r0, #8192	; 0x2000
   3793c:	e580100c 	str	r1, [r0, #12]
   37940:	e1a0e000 	mov	lr, r0
   37944:	e5836768 	str	r6, [r3, #1896]	; 0x768
   37948:	e583277c 	str	r2, [r3, #1916]	; 0x77c
   3794c:	e5835788 	str	r5, [r3, #1928]	; 0x788
   37950:	e5804014 	str	r4, [r0, #20]
   37954:	e5804018 	str	r4, [r0, #24]
   37958:	e583c75c 	str	ip, [r3, #1884]	; 0x75c
   3795c:	e583c760 	str	ip, [r3, #1888]	; 0x760
   37960:	e583c730 	str	ip, [r3, #1840]	; 0x730
   37964:	e583c76c 	str	ip, [r3, #1900]	; 0x76c
   37968:	e583c774 	str	ip, [r3, #1908]	; 0x774
   3796c:	e583c778 	str	ip, [r3, #1912]	; 0x778
   37970:	e583c770 	str	ip, [r3, #1904]	; 0x770
   37974:	e5c3c780 	strb	ip, [r3, #1920]	; 0x780
   37978:	e583c78c 	str	ip, [r3, #1932]	; 0x78c
   3797c:	e583c784 	str	ip, [r3, #1924]	; 0x784
   37980:	e8bd8070 	pop	{r4, r5, r6, pc}
   37984:	000504a8 	.word	0x000504a8
   37988:	000186a0 	.word	0x000186a0

0003798c <McManager::init()>:
   3798c:	e92d4010 	push	{r4, lr}
   37990:	e5903014 	ldr	r3, [r0, #20]
   37994:	e24dd030 	sub	sp, sp, #48	; 0x30
   37998:	e3530000 	cmp	r3, #0
   3799c:	e1a04000 	mov	r4, r0
   379a0:	ba000025 	blt	37a3c <McManager::init()+0xb0>
   379a4:	e5943018 	ldr	r3, [r4, #24]
   379a8:	e3530000 	cmp	r3, #0
   379ac:	ba000018 	blt	37a14 <McManager::init()+0x88>
   379b0:	e59f00d4 	ldr	r0, [pc, #212]	; 37a8c <McManager::init()+0x100>
   379b4:	ebffcbde 	bl	2a934 <operator new(unsigned int)>
   379b8:	e1a01004 	mov	r1, r4
   379bc:	eb000712 	bl	3960c <McTerminal::McTerminal(McManager&)>
   379c0:	e59f00c8 	ldr	r0, [pc, #200]	; 37a90 <McManager::init()+0x104>
   379c4:	ebffcbda 	bl	2a934 <operator new(unsigned int)>
   379c8:	e1a01004 	mov	r1, r4
   379cc:	eb0008db 	bl	39d40 <McTRS80::McTRS80(McManager&)>
   379d0:	e59f00bc 	ldr	r0, [pc, #188]	; 37a94 <McManager::init()+0x108>
   379d4:	ebffcbd6 	bl	2a934 <operator new(unsigned int)>
   379d8:	e1a01004 	mov	r1, r4
   379dc:	eb0003e6 	bl	3897c <McRobsZ80::McRobsZ80(McManager&)>
   379e0:	e59f00b0 	ldr	r0, [pc, #176]	; 37a98 <McManager::init()+0x10c>
   379e4:	ebffcbd2 	bl	2a934 <operator new(unsigned int)>
   379e8:	e1a01004 	mov	r1, r4
   379ec:	eb000b31 	bl	3a6b8 <McZXSpectrum::McZXSpectrum(McManager&)>
   379f0:	e3a03000 	mov	r3, #0
   379f4:	e3a02001 	mov	r2, #1
   379f8:	e2844a02 	add	r4, r4, #8192	; 0x2000
   379fc:	e5c42780 	strb	r2, [r4, #1920]	; 0x780
   37a00:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   37a04:	e5843774 	str	r3, [r4, #1908]	; 0x774
   37a08:	e5843784 	str	r3, [r4, #1924]	; 0x784
   37a0c:	e28dd030 	add	sp, sp, #48	; 0x30
   37a10:	e8bd8010 	pop	{r4, pc}
   37a14:	e3a02000 	mov	r2, #0
   37a18:	e59f307c 	ldr	r3, [pc, #124]	; 37a9c <McManager::init()+0x110>
   37a1c:	e5940004 	ldr	r0, [r4, #4]
   37a20:	e1a01004 	mov	r1, r4
   37a24:	e88d000c 	stm	sp, {r2, r3}
   37a28:	e59f3070 	ldr	r3, [pc, #112]	; 37aa0 <McManager::init()+0x114>
   37a2c:	e3a02001 	mov	r2, #1
   37a30:	ebffdb98 	bl	2e898 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   37a34:	e5840018 	str	r0, [r4, #24]
   37a38:	eaffffdc 	b	379b0 <McManager::init()+0x24>
   37a3c:	e3a03000 	mov	r3, #0
   37a40:	e590000c 	ldr	r0, [r0, #12]
   37a44:	e59f2058 	ldr	r2, [pc, #88]	; 37aa4 <McManager::init()+0x118>
   37a48:	e58d3028 	str	r3, [sp, #40]	; 0x28
   37a4c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   37a50:	e58d3020 	str	r3, [sp, #32]
   37a54:	e58d301c 	str	r3, [sp, #28]
   37a58:	e58d3018 	str	r3, [sp, #24]
   37a5c:	e58d3014 	str	r3, [sp, #20]
   37a60:	e58d3010 	str	r3, [sp, #16]
   37a64:	e58d300c 	str	r3, [sp, #12]
   37a68:	e58d3008 	str	r3, [sp, #8]
   37a6c:	e58d3004 	str	r3, [sp, #4]
   37a70:	e58d3000 	str	r3, [sp]
   37a74:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   37a78:	e59f3028 	ldr	r3, [pc, #40]	; 37aa8 <McManager::init()+0x11c>
   37a7c:	e3a01001 	mov	r1, #1
   37a80:	ebffebe1 	bl	32a0c <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   37a84:	e5840014 	str	r0, [r4, #20]
   37a88:	eaffffc5 	b	379a4 <McManager::init()+0x18>
   37a8c:	00062f1c 	.word	0x00062f1c
   37a90:	000005e4 	.word	0x000005e4
   37a94:	000040e4 	.word	0x000040e4
   37a98:	00003728 	.word	0x00003728
   37a9c:	0003771c 	.word	0x0003771c
   37aa0:	000385b4 	.word	0x000385b4
   37aa4:	000376ec 	.word	0x000376ec
   37aa8:	000378e4 	.word	0x000378e4

00037aac <McManager::service()>:
   37aac:	e92d4070 	push	{r4, r5, r6, lr}
   37ab0:	e2804a02 	add	r4, r0, #8192	; 0x2000
   37ab4:	e5d46780 	ldrb	r6, [r4, #1920]	; 0x780
   37ab8:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   37abc:	e3560000 	cmp	r6, #0
   37ac0:	e24dd018 	sub	sp, sp, #24
   37ac4:	0a00001e 	beq	37b44 <McManager::service()+0x98>
   37ac8:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   37acc:	e3530000 	cmp	r3, #0
   37ad0:	0a00001b 	beq	37b44 <McManager::service()+0x98>
   37ad4:	e1a05000 	mov	r5, r0
   37ad8:	ebffd743 	bl	2d7ec <micros>
   37adc:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
   37ae0:	e5941784 	ldr	r1, [r4, #1924]	; 0x784
   37ae4:	ebffd75e 	bl	2d864 <isTimeout>
   37ae8:	e3500000 	cmp	r0, #0
   37aec:	0a000014 	beq	37b44 <McManager::service()+0x98>
   37af0:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
   37af4:	e5941788 	ldr	r1, [r4, #1928]	; 0x788
   37af8:	e2832001 	add	r2, r3, #1
   37afc:	e1530001 	cmp	r3, r1
   37b00:	83a03000 	movhi	r3, #0
   37b04:	93a06000 	movls	r6, #0
   37b08:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37b0c:	e584278c 	str	r2, [r4, #1932]	; 0x78c
   37b10:	8584378c 	strhi	r3, [r4, #1932]	; 0x78c
   37b14:	e5902000 	ldr	r2, [r0]
   37b18:	e28d3010 	add	r3, sp, #16
   37b1c:	e58d300c 	str	r3, [sp, #12]
   37b20:	e59d100c 	ldr	r1, [sp, #12]
   37b24:	e1a03006 	mov	r3, r6
   37b28:	e5926044 	ldr	r6, [r2, #68]	; 0x44
   37b2c:	e59f2040 	ldr	r2, [pc, #64]	; 37b74 <McManager::service()+0xc8>
   37b30:	e12fff36 	blx	r6
   37b34:	e2503000 	subs	r3, r0, #0
   37b38:	1a000004 	bne	37b50 <McManager::service()+0xa4>
   37b3c:	ebffd72a 	bl	2d7ec <micros>
   37b40:	e5840784 	str	r0, [r4, #1924]	; 0x784
   37b44:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   37b48:	e28dd018 	add	sp, sp, #24
   37b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   37b50:	e5950004 	ldr	r0, [r5, #4]
   37b54:	e58d3004 	str	r3, [sp, #4]
   37b58:	e59d300c 	ldr	r3, [sp, #12]
   37b5c:	e59f2014 	ldr	r2, [pc, #20]	; 37b78 <McManager::service()+0xcc>
   37b60:	e58d3000 	str	r3, [sp]
   37b64:	e59f1010 	ldr	r1, [pc, #16]	; 37b7c <McManager::service()+0xd0>
   37b68:	e3a03000 	mov	r3, #0
   37b6c:	ebffdc9d 	bl	2ede8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   37b70:	eafffff1 	b	37b3c <McManager::service()+0x90>
   37b74:	00001388 	.word	0x00001388
   37b78:	00049280 	.word	0x00049280
   37b7c:	00048a10 	.word	0x00048a10

00037b80 <McManager::getNumMachines()>:
   37b80:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b84:	e590075c 	ldr	r0, [r0, #1884]	; 0x75c
   37b88:	e12fff1e 	bx	lr

00037b8c <McManager::getMachine()>:
   37b8c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b90:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37b94:	e12fff1e 	bx	lr

00037b98 <McManager::getMachineName()>:
   37b98:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b9c:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37ba0:	e3500000 	cmp	r0, #0
   37ba4:	0a000002 	beq	37bb4 <McManager::getMachineName()+0x1c>
   37ba8:	e5903000 	ldr	r3, [r0]
   37bac:	e5933008 	ldr	r3, [r3, #8]
   37bb0:	e12fff13 	bx	r3
   37bb4:	e59f0000 	ldr	r0, [pc]	; 37bbc <McManager::getMachineName()+0x24>
   37bb8:	e12fff1e 	bx	lr
   37bbc:	000470c8 	.word	0x000470c8

00037bc0 <McManager::getMachineJSON()>:
   37bc0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bc4:	e3a02e46 	mov	r2, #1120	; 0x460
   37bc8:	e2808a02 	add	r8, r0, #8192	; 0x2000
   37bcc:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   37bd0:	e1a0b000 	mov	fp, r0
   37bd4:	e59f114c 	ldr	r1, [pc, #332]	; 37d28 <McManager::getMachineJSON()+0x168>
   37bd8:	e59f014c 	ldr	r0, [pc, #332]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37bdc:	ebffd73d 	bl	2d8d8 <strlcpy>
   37be0:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   37be4:	e3530000 	cmp	r3, #0
   37be8:	da00004b 	ble	37d1c <McManager::getMachineJSON()+0x15c>
   37bec:	e5980734 	ldr	r0, [r8, #1844]	; 0x734
   37bf0:	e59fc134 	ldr	ip, [pc, #308]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37bf4:	e5903000 	ldr	r3, [r0]
   37bf8:	e28d100c 	add	r1, sp, #12
   37bfc:	e593300c 	ldr	r3, [r3, #12]
   37c00:	e3a02f4b 	mov	r2, #300	; 0x12c
   37c04:	e58dc004 	str	ip, [sp, #4]
   37c08:	e28b5c27 	add	r5, fp, #9984	; 0x2700
   37c0c:	e1a0700c 	mov	r7, ip
   37c10:	e2855034 	add	r5, r5, #52	; 0x34
   37c14:	e12fff33 	blx	r3
   37c18:	e3a04000 	mov	r4, #0
   37c1c:	e3a06e46 	mov	r6, #1120	; 0x460
   37c20:	e3a0af4b 	mov	sl, #300	; 0x12c
   37c24:	e59f9104 	ldr	r9, [pc, #260]	; 37d30 <McManager::getMachineJSON()+0x170>
   37c28:	ea000009 	b	37c54 <McManager::getMachineJSON()+0x94>
   37c2c:	e5b50004 	ldr	r0, [r5, #4]!
   37c30:	e1a0200a 	mov	r2, sl
   37c34:	e5903000 	ldr	r3, [r0]
   37c38:	e28d100c 	add	r1, sp, #12
   37c3c:	e593300c 	ldr	r3, [r3, #12]
   37c40:	e12fff33 	blx	r3
   37c44:	e1a02006 	mov	r2, r6
   37c48:	e1a01009 	mov	r1, r9
   37c4c:	e1a00007 	mov	r0, r7
   37c50:	ebffd73c 	bl	2d948 <strlcat>
   37c54:	e1a02006 	mov	r2, r6
   37c58:	e28d100c 	add	r1, sp, #12
   37c5c:	e1a00007 	mov	r0, r7
   37c60:	ebffd738 	bl	2d948 <strlcat>
   37c64:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   37c68:	e2844001 	add	r4, r4, #1
   37c6c:	e1540003 	cmp	r4, r3
   37c70:	baffffed 	blt	37c2c <McManager::getMachineJSON()+0x6c>
   37c74:	e3a02e46 	mov	r2, #1120	; 0x460
   37c78:	e59f10b4 	ldr	r1, [pc, #180]	; 37d34 <McManager::getMachineJSON()+0x174>
   37c7c:	e59f00a8 	ldr	r0, [pc, #168]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37c80:	ebffd730 	bl	2d948 <strlcat>
   37c84:	e3a02e46 	mov	r2, #1120	; 0x460
   37c88:	e59f10a8 	ldr	r1, [pc, #168]	; 37d38 <McManager::getMachineJSON()+0x178>
   37c8c:	e59f0098 	ldr	r0, [pc, #152]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37c90:	ebffd72c 	bl	2d948 <strlcat>
   37c94:	e3a02e46 	mov	r2, #1120	; 0x460
   37c98:	e59f109c 	ldr	r1, [pc, #156]	; 37d3c <McManager::getMachineJSON()+0x17c>
   37c9c:	e59f0088 	ldr	r0, [pc, #136]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37ca0:	ebffd728 	bl	2d948 <strlcat>
   37ca4:	e5980760 	ldr	r0, [r8, #1888]	; 0x760
   37ca8:	e3500000 	cmp	r0, #0
   37cac:	0a000018 	beq	37d14 <McManager::getMachineJSON()+0x154>
   37cb0:	e5903000 	ldr	r3, [r0]
   37cb4:	e5933008 	ldr	r3, [r3, #8]
   37cb8:	e12fff33 	blx	r3
   37cbc:	e1a01000 	mov	r1, r0
   37cc0:	e3a02e46 	mov	r2, #1120	; 0x460
   37cc4:	e59f0060 	ldr	r0, [pc, #96]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37cc8:	ebffd71e 	bl	2d948 <strlcat>
   37ccc:	e3a02e46 	mov	r2, #1120	; 0x460
   37cd0:	e59f1064 	ldr	r1, [pc, #100]	; 37d3c <McManager::getMachineJSON()+0x17c>
   37cd4:	e59f0050 	ldr	r0, [pc, #80]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37cd8:	ebffd71a 	bl	2d948 <strlcat>
   37cdc:	e59b000c 	ldr	r0, [fp, #12]
   37ce0:	ebffeb17 	bl	32944 <BusAccess::clockCurFreqHz()>
   37ce4:	e1a04000 	mov	r4, r0
   37ce8:	e59f003c 	ldr	r0, [pc, #60]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37cec:	ebffc712 	bl	2993c <strlen>
   37cf0:	e59d2004 	ldr	r2, [sp, #4]
   37cf4:	e1a03004 	mov	r3, r4
   37cf8:	e0820000 	add	r0, r2, r0
   37cfc:	e3a01e46 	mov	r1, #1120	; 0x460
   37d00:	e59f2038 	ldr	r2, [pc, #56]	; 37d40 <McManager::getMachineJSON()+0x180>
   37d04:	ebffd76a 	bl	2dab4 <snprintf>
   37d08:	e59f001c 	ldr	r0, [pc, #28]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37d0c:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   37d10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d14:	e59f1028 	ldr	r1, [pc, #40]	; 37d44 <McManager::getMachineJSON()+0x184>
   37d18:	eaffffe8 	b	37cc0 <McManager::getMachineJSON()+0x100>
   37d1c:	e59f3008 	ldr	r3, [pc, #8]	; 37d2c <McManager::getMachineJSON()+0x16c>
   37d20:	e58d3004 	str	r3, [sp, #4]
   37d24:	eaffffd2 	b	37c74 <McManager::getMachineJSON()+0xb4>
   37d28:	00048a20 	.word	0x00048a20
   37d2c:	000504ac 	.word	0x000504ac
   37d30:	00044b54 	.word	0x00044b54
   37d34:	00048238 	.word	0x00048238
   37d38:	00048a30 	.word	0x00048a30
   37d3c:	000488f4 	.word	0x000488f4
   37d40:	00048a40 	.word	0x00048a40
   37d44:	000470c8 	.word	0x000470c8

00037d48 <McManager::getMachineClock()>:
   37d48:	e590000c 	ldr	r0, [r0, #12]
   37d4c:	eaffeafc 	b	32944 <BusAccess::clockCurFreqHz()>

00037d50 <McManager::targetIrq(int)>:
   37d50:	e1a03000 	mov	r3, r0
   37d54:	e1a02001 	mov	r2, r1
   37d58:	e590000c 	ldr	r0, [r0, #12]
   37d5c:	e5931014 	ldr	r1, [r3, #20]
   37d60:	eaffe43d 	b	30e5c <BusAccess::targetReqIRQ(int, int)>

00037d64 <McManager::add(McBase*)>:
   37d64:	e2802a02 	add	r2, r0, #8192	; 0x2000
   37d68:	e592375c 	ldr	r3, [r2, #1884]	; 0x75c
   37d6c:	e3530009 	cmp	r3, #9
   37d70:	d283cd27 	addle	ip, r3, #2496	; 0x9c0
   37d74:	d080010c 	addle	r0, r0, ip, lsl #2
   37d78:	d2833001 	addle	r3, r3, #1
   37d7c:	d582375c 	strle	r3, [r2, #1884]	; 0x75c
   37d80:	d5801034 	strle	r1, [r0, #52]	; 0x34
   37d84:	e12fff1e 	bx	lr

00037d88 <McManager::setupMachine(char const*)>:
   37d88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37d8c:	e24dde1a 	sub	sp, sp, #416	; 0x1a0
   37d90:	e1a07000 	mov	r7, r0
   37d94:	e28d2010 	add	r2, sp, #16
   37d98:	e3a03064 	mov	r3, #100	; 0x64
   37d9c:	e59f01f0 	ldr	r0, [pc, #496]	; 37f94 <McManager::setupMachine(char const*)+0x20c>
   37da0:	e1a08001 	mov	r8, r1
   37da4:	ebffd781 	bl	2dbb0 <jsonGetValueForKey>
   37da8:	e3500000 	cmp	r0, #0
   37dac:	0a000016 	beq	37e0c <McManager::setupMachine(char const*)+0x84>
   37db0:	e2876a02 	add	r6, r7, #8192	; 0x2000
   37db4:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   37db8:	e3530000 	cmp	r3, #0
   37dbc:	da000012 	ble	37e0c <McManager::setupMachine(char const*)+0x84>
   37dc0:	e3a04000 	mov	r4, #0
   37dc4:	e1a0a004 	mov	sl, r4
   37dc8:	e2875c27 	add	r5, r7, #9984	; 0x2700
   37dcc:	e2855030 	add	r5, r5, #48	; 0x30
   37dd0:	e5b50004 	ldr	r0, [r5, #4]!
   37dd4:	e3500000 	cmp	r0, #0
   37dd8:	0a000007 	beq	37dfc <McManager::setupMachine(char const*)+0x74>
   37ddc:	e5903000 	ldr	r3, [r0]
   37de0:	e28d20d8 	add	r2, sp, #216	; 0xd8
   37de4:	e58da0d8 	str	sl, [sp, #216]	; 0xd8
   37de8:	e5933000 	ldr	r3, [r3]
   37dec:	e28d1010 	add	r1, sp, #16
   37df0:	e12fff33 	blx	r3
   37df4:	e2509000 	subs	r9, r0, #0
   37df8:	1a000007 	bne	37e1c <McManager::setupMachine(char const*)+0x94>
   37dfc:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   37e00:	e2844001 	add	r4, r4, #1
   37e04:	e1530004 	cmp	r3, r4
   37e08:	cafffff0 	bgt	37dd0 <McManager::setupMachine(char const*)+0x48>
   37e0c:	e3a09000 	mov	r9, #0
   37e10:	e1a00009 	mov	r0, r9
   37e14:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37e18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37e1c:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   37e20:	e0874104 	add	r4, r7, r4, lsl #2
   37e24:	e5944034 	ldr	r4, [r4, #52]	; 0x34
   37e28:	e3540000 	cmp	r4, #0
   37e2c:	0afffff6 	beq	37e0c <McManager::setupMachine(char const*)+0x84>
   37e30:	e3a02000 	mov	r2, #0
   37e34:	e5971014 	ldr	r1, [r7, #20]
   37e38:	e597000c 	ldr	r0, [r7, #12]
   37e3c:	e5864760 	str	r4, [r6, #1888]	; 0x760
   37e40:	ebffe3b6 	bl	30d20 <BusAccess::waitOnIO(int, bool)>
   37e44:	e3a02000 	mov	r2, #0
   37e48:	e5971014 	ldr	r1, [r7, #20]
   37e4c:	e597000c 	ldr	r0, [r7, #12]
   37e50:	ebffe3a9 	bl	30cfc <BusAccess::waitOnMemory(int, bool)>
   37e54:	e5943000 	ldr	r3, [r4]
   37e58:	e1a02008 	mov	r2, r8
   37e5c:	e28d1010 	add	r1, sp, #16
   37e60:	e5933010 	ldr	r3, [r3, #16]
   37e64:	e1a00004 	mov	r0, r4
   37e68:	e12fff33 	blx	r3
   37e6c:	e5943000 	ldr	r3, [r4]
   37e70:	e5971000 	ldr	r1, [r7]
   37e74:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   37e78:	e1a00004 	mov	r0, r4
   37e7c:	e12fff33 	blx	r3
   37e80:	e5943000 	ldr	r3, [r4]
   37e84:	e59f210c 	ldr	r2, [pc, #268]	; 37f98 <McManager::setupMachine(char const*)+0x210>
   37e88:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   37e8c:	e597500c 	ldr	r5, [r7, #12]
   37e90:	e1530002 	cmp	r3, r2
   37e94:	e5971014 	ldr	r1, [r7, #20]
   37e98:	1a000037 	bne	37f7c <McManager::setupMachine(char const*)+0x1f4>
   37e9c:	e5d420a4 	ldrb	r2, [r4, #164]	; 0xa4
   37ea0:	e1a00005 	mov	r0, r5
   37ea4:	ebffe39d 	bl	30d20 <BusAccess::waitOnIO(int, bool)>
   37ea8:	e5943000 	ldr	r3, [r4]
   37eac:	e59f20e8 	ldr	r2, [pc, #232]	; 37f9c <McManager::setupMachine(char const*)+0x214>
   37eb0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   37eb4:	e597500c 	ldr	r5, [r7, #12]
   37eb8:	e1530002 	cmp	r3, r2
   37ebc:	e5971014 	ldr	r1, [r7, #20]
   37ec0:	1a000027 	bne	37f64 <McManager::setupMachine(char const*)+0x1dc>
   37ec4:	e5d420a5 	ldrb	r2, [r4, #165]	; 0xa5
   37ec8:	e1a00005 	mov	r0, r5
   37ecc:	ebffe38a 	bl	30cfc <BusAccess::waitOnMemory(int, bool)>
   37ed0:	e1a01008 	mov	r1, r8
   37ed4:	e28d2074 	add	r2, sp, #116	; 0x74
   37ed8:	e3a03064 	mov	r3, #100	; 0x64
   37edc:	e59f00bc 	ldr	r0, [pc, #188]	; 37fa0 <McManager::setupMachine(char const*)+0x218>
   37ee0:	ebffd732 	bl	2dbb0 <jsonGetValueForKey>
   37ee4:	e2504000 	subs	r4, r0, #0
   37ee8:	1a000007 	bne	37f0c <McManager::setupMachine(char const*)+0x184>
   37eec:	ebffb967 	bl	26490 <CLogger::Get()>
   37ef0:	e59f30ac 	ldr	r3, [pc, #172]	; 37fa4 <McManager::setupMachine(char const*)+0x21c>
   37ef4:	e3a02004 	mov	r2, #4
   37ef8:	e59f10a8 	ldr	r1, [pc, #168]	; 37fa8 <McManager::setupMachine(char const*)+0x220>
   37efc:	ebffb8a0 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37f00:	e1a00009 	mov	r0, r9
   37f04:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37f08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f0c:	e1a09004 	mov	r9, r4
   37f10:	e3a020c8 	mov	r2, #200	; 0xc8
   37f14:	e59f1090 	ldr	r1, [pc, #144]	; 37fac <McManager::setupMachine(char const*)+0x224>
   37f18:	e28d00d8 	add	r0, sp, #216	; 0xd8
   37f1c:	ebffd66d 	bl	2d8d8 <strlcpy>
   37f20:	e3a020c8 	mov	r2, #200	; 0xc8
   37f24:	e28d1074 	add	r1, sp, #116	; 0x74
   37f28:	e28d00d8 	add	r0, sp, #216	; 0xd8
   37f2c:	ebffd685 	bl	2d948 <strlcat>
   37f30:	e28d10d8 	add	r1, sp, #216	; 0xd8
   37f34:	e5970004 	ldr	r0, [r7, #4]
   37f38:	ebffdc6b 	bl	2f0ec <CommandHandler::sendAPIReq(char const*)>
   37f3c:	ebffb953 	bl	26490 <CLogger::Get()>
   37f40:	e28d30d8 	add	r3, sp, #216	; 0xd8
   37f44:	e58d3000 	str	r3, [sp]
   37f48:	e3a02004 	mov	r2, #4
   37f4c:	e59f305c 	ldr	r3, [pc, #92]	; 37fb0 <McManager::setupMachine(char const*)+0x228>
   37f50:	e59f1050 	ldr	r1, [pc, #80]	; 37fa8 <McManager::setupMachine(char const*)+0x220>
   37f54:	ebffb88a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37f58:	e1a00009 	mov	r0, r9
   37f5c:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37f60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f64:	e58d100c 	str	r1, [sp, #12]
   37f68:	e1a00004 	mov	r0, r4
   37f6c:	e12fff33 	blx	r3
   37f70:	e59d100c 	ldr	r1, [sp, #12]
   37f74:	e1a02000 	mov	r2, r0
   37f78:	eaffffd2 	b	37ec8 <McManager::setupMachine(char const*)+0x140>
   37f7c:	e58d100c 	str	r1, [sp, #12]
   37f80:	e1a00004 	mov	r0, r4
   37f84:	e12fff33 	blx	r3
   37f88:	e59d100c 	ldr	r1, [sp, #12]
   37f8c:	e1a02000 	mov	r2, r0
   37f90:	eaffffc2 	b	37ea0 <McManager::setupMachine(char const*)+0x118>
   37f94:	00048294 	.word	0x00048294
   37f98:	000385ec 	.word	0x000385ec
   37f9c:	000385f4 	.word	0x000385f4
   37fa0:	00048a50 	.word	0x00048a50
   37fa4:	00048a80 	.word	0x00048a80
   37fa8:	000489bc 	.word	0x000489bc
   37fac:	00048a58 	.word	0x00048a58
   37fb0:	00048a6c 	.word	0x00048a6c

00037fb4 <McManager::setMachineByName(char const*)>:
   37fb4:	e92d4010 	push	{r4, lr}
   37fb8:	e1a04000 	mov	r4, r0
   37fbc:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   37fc0:	e1a03001 	mov	r3, r1
   37fc4:	e59f201c 	ldr	r2, [pc, #28]	; 37fe8 <McManager::setMachineByName(char const*)+0x34>
   37fc8:	e1a0000d 	mov	r0, sp
   37fcc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   37fd0:	ebffd6b7 	bl	2dab4 <snprintf>
   37fd4:	e1a0100d 	mov	r1, sp
   37fd8:	e1a00004 	mov	r0, r4
   37fdc:	ebffff69 	bl	37d88 <McManager::setupMachine(char const*)>
   37fe0:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   37fe4:	e8bd8010 	pop	{r4, pc}
   37fe8:	00048a94 	.word	0x00048a94

00037fec <McManager::displayRefresh()>:
   37fec:	e92d4070 	push	{r4, r5, r6, lr}
   37ff0:	e2804a02 	add	r4, r0, #8192	; 0x2000
   37ff4:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37ff8:	e3500000 	cmp	r0, #0
   37ffc:	08bd8070 	popeq	{r4, r5, r6, pc}
   38000:	e5903000 	ldr	r3, [r0]
   38004:	e59f20ec 	ldr	r2, [pc, #236]	; 380f8 <McManager::displayRefresh()+0x10c>
   38008:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   3800c:	e1530002 	cmp	r3, r2
   38010:	1a000030 	bne	380d8 <McManager::displayRefresh()+0xec>
   38014:	e5906070 	ldr	r6, [r0, #112]	; 0x70
   38018:	ebffd5f3 	bl	2d7ec <micros>
   3801c:	e1a01006 	mov	r1, r6
   38020:	e1a05000 	mov	r5, r0
   38024:	e59f00d0 	ldr	r0, [pc, #208]	; 380fc <McManager::displayRefresh()+0x110>
   38028:	eb001e5c 	bl	3f9a0 <__aeabi_uidiv>
   3802c:	e5941774 	ldr	r1, [r4, #1908]	; 0x774
   38030:	e1a02000 	mov	r2, r0
   38034:	e1a00005 	mov	r0, r5
   38038:	ebffd609 	bl	2d864 <isTimeout>
   3803c:	e3500000 	cmp	r0, #0
   38040:	1a000015 	bne	3809c <McManager::displayRefresh()+0xb0>
   38044:	e3a05ffa 	mov	r5, #1000	; 0x3e8
   38048:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   3804c:	e5903000 	ldr	r3, [r0]
   38050:	e5933020 	ldr	r3, [r3, #32]
   38054:	e12fff33 	blx	r3
   38058:	ebffd5e3 	bl	2d7ec <micros>
   3805c:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
   38060:	e5941778 	ldr	r1, [r4, #1912]	; 0x778
   38064:	e0020295 	mul	r2, r5, r2
   38068:	ebffd5fd 	bl	2d864 <isTimeout>
   3806c:	e3500000 	cmp	r0, #0
   38070:	08bd8070 	popeq	{r4, r5, r6, pc}
   38074:	e594076c 	ldr	r0, [r4, #1900]	; 0x76c
   38078:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
   3807c:	e0000095 	mul	r0, r5, r0
   38080:	eb001e46 	bl	3f9a0 <__aeabi_uidiv>
   38084:	e3a03000 	mov	r3, #0
   38088:	e5840770 	str	r0, [r4, #1904]	; 0x770
   3808c:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   38090:	ebffd5d5 	bl	2d7ec <micros>
   38094:	e5840778 	str	r0, [r4, #1912]	; 0x778
   38098:	e8bd8070 	pop	{r4, r5, r6, pc}
   3809c:	ebffd5d2 	bl	2d7ec <micros>
   380a0:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   380a4:	e594276c 	ldr	r2, [r4, #1900]	; 0x76c
   380a8:	e5931000 	ldr	r1, [r3]
   380ac:	e59fc04c 	ldr	ip, [pc, #76]	; 38100 <McManager::displayRefresh()+0x114>
   380b0:	e5915060 	ldr	r5, [r1, #96]	; 0x60
   380b4:	e2822001 	add	r2, r2, #1
   380b8:	e155000c 	cmp	r5, ip
   380bc:	e5840774 	str	r0, [r4, #1908]	; 0x774
   380c0:	e584276c 	str	r2, [r4, #1900]	; 0x76c
   380c4:	1a000006 	bne	380e4 <McManager::displayRefresh()+0xf8>
   380c8:	e591202c 	ldr	r2, [r1, #44]	; 0x2c
   380cc:	e1a00003 	mov	r0, r3
   380d0:	e12fff32 	blx	r2
   380d4:	eaffffda 	b	38044 <McManager::displayRefresh()+0x58>
   380d8:	e12fff33 	blx	r3
   380dc:	e1a06000 	mov	r6, r0
   380e0:	eaffffcc 	b	38018 <McManager::displayRefresh()+0x2c>
   380e4:	e1a00003 	mov	r0, r3
   380e8:	e12fff35 	blx	r5
   380ec:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   380f0:	e5931000 	ldr	r1, [r3]
   380f4:	eafffff3 	b	380c8 <McManager::displayRefresh()+0xdc>
   380f8:	000385fc 	.word	0x000385fc
   380fc:	000f4240 	.word	0x000f4240
   38100:	00038604 	.word	0x00038604

00038104 <McManager::machineHeartbeat()>:
   38104:	e2800a02 	add	r0, r0, #8192	; 0x2000
   38108:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   3810c:	e3500000 	cmp	r0, #0
   38110:	012fff1e 	bxeq	lr
   38114:	e5903000 	ldr	r3, [r0]
   38118:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   3811c:	e12fff13 	bx	r3

00038120 <McManager::getDisplayRefreshRate()>:
   38120:	e2800a02 	add	r0, r0, #8192	; 0x2000
   38124:	e5900770 	ldr	r0, [r0, #1904]	; 0x770
   38128:	e12fff1e 	bx	lr

0003812c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   3812c:	e92d4070 	push	{r4, r5, r6, lr}
   38130:	e2805a02 	add	r5, r0, #8192	; 0x2000
   38134:	e5953730 	ldr	r3, [r5, #1840]	; 0x730
   38138:	e59fc03c 	ldr	ip, [pc, #60]	; 3817c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   3813c:	e083e002 	add	lr, r3, r2
   38140:	e15e000c 	cmp	lr, ip
   38144:	8a000007 	bhi	38168 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x3c>
   38148:	e1a04002 	mov	r4, r2
   3814c:	e280001c 	add	r0, r0, #28
   38150:	e0800003 	add	r0, r0, r3
   38154:	ebffc81d 	bl	2a1d0 <memcpy>
   38158:	e5952730 	ldr	r2, [r5, #1840]	; 0x730
   3815c:	e0822004 	add	r2, r2, r4
   38160:	e5852730 	str	r2, [r5, #1840]	; 0x730
   38164:	e8bd8070 	pop	{r4, r5, r6, pc}
   38168:	e3a03000 	mov	r3, #0
   3816c:	e152000c 	cmp	r2, ip
   38170:	e5853730 	str	r3, [r5, #1840]	; 0x730
   38174:	88bd8070 	pophi	{r4, r5, r6, pc}
   38178:	eafffff2 	b	38148 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x1c>
   3817c:	0000270f 	.word	0x0000270f

00038180 <McManager::hostSerialNumChAvailable()>:
   38180:	e2800a02 	add	r0, r0, #8192	; 0x2000
   38184:	e5900730 	ldr	r0, [r0, #1840]	; 0x730
   38188:	e12fff1e 	bx	lr

0003818c <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   3818c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   38190:	e2806a02 	add	r6, r0, #8192	; 0x2000
   38194:	e5964730 	ldr	r4, [r6, #1840]	; 0x730
   38198:	e1520004 	cmp	r2, r4
   3819c:	31a04002 	movcc	r4, r2
   381a0:	e3540000 	cmp	r4, #0
   381a4:	13510000 	cmpne	r1, #0
   381a8:	03a07001 	moveq	r7, #1
   381ac:	13a07000 	movne	r7, #0
   381b0:	03a04000 	moveq	r4, #0
   381b4:	1a000001 	bne	381c0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x34>
   381b8:	e1a00004 	mov	r0, r4
   381bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   381c0:	e280501c 	add	r5, r0, #28
   381c4:	e1a02004 	mov	r2, r4
   381c8:	e1a00001 	mov	r0, r1
   381cc:	e1a01005 	mov	r1, r5
   381d0:	ebffc7fe 	bl	2a1d0 <memcpy>
   381d4:	e5962730 	ldr	r2, [r6, #1840]	; 0x730
   381d8:	e1520004 	cmp	r2, r4
   381dc:	25867730 	strcs	r7, [r6, #1840]	; 0x730
   381e0:	2afffff4 	bcs	381b8 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>
   381e4:	e0422004 	sub	r2, r2, r4
   381e8:	e0851004 	add	r1, r5, r4
   381ec:	e1a00005 	mov	r0, r5
   381f0:	ebffc5ac 	bl	298a8 <memmove>
   381f4:	e5963730 	ldr	r3, [r6, #1840]	; 0x730
   381f8:	e0433004 	sub	r3, r3, r4
   381fc:	e5863730 	str	r3, [r6, #1840]	; 0x730
   38200:	eaffffec 	b	381b8 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>

00038204 <McManager::sendKeyStrToTargetStatic(char const*)>:
   38204:	e5900004 	ldr	r0, [r0, #4]
   38208:	eaffdae7 	b	2edac <CommandHandler::sendKeyStrToTargetStatic(char const*)>

0003820c <McManager::targetProgrammingStart(bool)>:
   3820c:	e92d4070 	push	{r4, r5, r6, lr}
   38210:	e1a04000 	mov	r4, r0
   38214:	e5900010 	ldr	r0, [r0, #16]
   38218:	e1a05001 	mov	r5, r1
   3821c:	ebffef14 	bl	33e74 <TargetProgrammer::numMemoryBlocks()>
   38220:	e3500000 	cmp	r0, #0
   38224:	0a000013 	beq	38278 <McManager::targetProgrammingStart(bool)+0x6c>
   38228:	e594000c 	ldr	r0, [r4, #12]
   3822c:	ebffe5cb 	bl	31960 <BusAccess::service()>
   38230:	e594000c 	ldr	r0, [r4, #12]
   38234:	ebffe5c9 	bl	31960 <BusAccess::service()>
   38238:	e594000c 	ldr	r0, [r4, #12]
   3823c:	ebffe5c7 	bl	31960 <BusAccess::service()>
   38240:	ebffb892 	bl	26490 <CLogger::Get()>
   38244:	e59f3044 	ldr	r3, [pc, #68]	; 38290 <McManager::targetProgrammingStart(bool)+0x84>
   38248:	e3a02004 	mov	r2, #4
   3824c:	e59f1040 	ldr	r1, [pc, #64]	; 38294 <McManager::targetProgrammingStart(bool)+0x88>
   38250:	ebffb7cb 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38254:	e5941014 	ldr	r1, [r4, #20]
   38258:	e594000c 	ldr	r0, [r4, #12]
   3825c:	e3a02002 	mov	r2, #2
   38260:	ebffe30a 	bl	30e90 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   38264:	e3a03001 	mov	r3, #1
   38268:	e2844a02 	add	r4, r4, #8192	; 0x2000
   3826c:	e5c45765 	strb	r5, [r4, #1893]	; 0x765
   38270:	e5c43764 	strb	r3, [r4, #1892]	; 0x764
   38274:	e8bd8070 	pop	{r4, r5, r6, pc}
   38278:	ebffb884 	bl	26490 <CLogger::Get()>
   3827c:	e8bd4070 	pop	{r4, r5, r6, lr}
   38280:	e59f3010 	ldr	r3, [pc, #16]	; 38298 <McManager::targetProgrammingStart(bool)+0x8c>
   38284:	e3a02004 	mov	r2, #4
   38288:	e59f1004 	ldr	r1, [pc, #4]	; 38294 <McManager::targetProgrammingStart(bool)+0x88>
   3828c:	eaffb7bc 	b	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38290:	00048ac4 	.word	0x00048ac4
   38294:	000489bc 	.word	0x000489bc
   38298:	00048aa0 	.word	0x00048aa0

0003829c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3829c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   382a0:	e24dd0e0 	sub	sp, sp, #224	; 0xe0
   382a4:	e1a05000 	mov	r5, r0
   382a8:	e1a08002 	mov	r8, r2
   382ac:	e1a06003 	mov	r6, r3
   382b0:	e28d2014 	add	r2, sp, #20
   382b4:	e3a030c8 	mov	r3, #200	; 0xc8
   382b8:	e59f02a8 	ldr	r0, [pc, #680]	; 38568 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2cc>
   382bc:	e1a07001 	mov	r7, r1
   382c0:	ebffd63a 	bl	2dbb0 <jsonGetValueForKey>
   382c4:	e2504000 	subs	r4, r0, #0
   382c8:	1a000003 	bne	382dc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40>
   382cc:	e3a04000 	mov	r4, #0
   382d0:	e1a00004 	mov	r0, r4
   382d4:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   382d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   382dc:	e3a03000 	mov	r3, #0
   382e0:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   382e4:	e59f1280 	ldr	r1, [pc, #640]	; 3856c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d0>
   382e8:	e5c23000 	strb	r3, [r2]
   382ec:	e28d0014 	add	r0, sp, #20
   382f0:	ebffc5b6 	bl	299d0 <strcasecmp>
   382f4:	e3500000 	cmp	r0, #0
   382f8:	0a000016 	beq	38358 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   382fc:	e59f126c 	ldr	r1, [pc, #620]	; 38570 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d4>
   38300:	e28d0014 	add	r0, sp, #20
   38304:	ebffc5b1 	bl	299d0 <strcasecmp>
   38308:	e2501000 	subs	r1, r0, #0
   3830c:	0a00000f 	beq	38350 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb4>
   38310:	e59f125c 	ldr	r1, [pc, #604]	; 38574 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   38314:	e28d0014 	add	r0, sp, #20
   38318:	ebffc5ac 	bl	299d0 <strcasecmp>
   3831c:	e3500000 	cmp	r0, #0
   38320:	1a000015 	bne	3837c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0>
   38324:	e3a01001 	mov	r1, #1
   38328:	e59f3248 	ldr	r3, [pc, #584]	; 38578 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   3832c:	e5930000 	ldr	r0, [r3]
   38330:	ebffffb5 	bl	3820c <McManager::targetProgrammingStart(bool)>
   38334:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   38338:	e59f123c 	ldr	r1, [pc, #572]	; 3857c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   3833c:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   38340:	ebffd564 	bl	2d8d8 <strlcpy>
   38344:	e1a00004 	mov	r0, r4
   38348:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   3834c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38350:	e59f3220 	ldr	r3, [pc, #544]	; 38578 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   38354:	eafffff4 	b	3832c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x90>
   38358:	e5950010 	ldr	r0, [r5, #16]
   3835c:	ebffee72 	bl	33d2c <TargetProgrammer::clear()>
   38360:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   38364:	e59f1210 	ldr	r1, [pc, #528]	; 3857c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   38368:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   3836c:	ebffd559 	bl	2d8d8 <strlcpy>
   38370:	e1a00004 	mov	r0, r4
   38374:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   38378:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3837c:	e59f11fc 	ldr	r1, [pc, #508]	; 38580 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e4>
   38380:	e28d0014 	add	r0, sp, #20
   38384:	ebffc591 	bl	299d0 <strcasecmp>
   38388:	e3500000 	cmp	r0, #0
   3838c:	0affffe4 	beq	38324 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x88>
   38390:	e59f11ec 	ldr	r1, [pc, #492]	; 38584 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   38394:	e28d0014 	add	r0, sp, #20
   38398:	ebffc58c 	bl	299d0 <strcasecmp>
   3839c:	e3500000 	cmp	r0, #0
   383a0:	0a000017 	beq	38404 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x168>
   383a4:	e59f11dc 	ldr	r1, [pc, #476]	; 38588 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2ec>
   383a8:	e28d0014 	add	r0, sp, #20
   383ac:	ebffc587 	bl	299d0 <strcasecmp>
   383b0:	e3500000 	cmp	r0, #0
   383b4:	1a00001d 	bne	38430 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x194>
   383b8:	ebffb834 	bl	26490 <CLogger::Get()>
   383bc:	e59f31c8 	ldr	r3, [pc, #456]	; 3858c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f0>
   383c0:	e88d00c0 	stm	sp, {r6, r7}
   383c4:	e3a02004 	mov	r2, #4
   383c8:	e59f11c0 	ldr	r1, [pc, #448]	; 38590 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   383cc:	ebffb76c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   383d0:	e59f31a0 	ldr	r3, [pc, #416]	; 38578 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   383d4:	e5933000 	ldr	r3, [r3]
   383d8:	e2833a02 	add	r3, r3, #8192	; 0x2000
   383dc:	e5930760 	ldr	r0, [r3, #1888]	; 0x760
   383e0:	e3500000 	cmp	r0, #0
   383e4:	0affffd2 	beq	38334 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   383e8:	e590c000 	ldr	ip, [r0]
   383ec:	e1a03006 	mov	r3, r6
   383f0:	e1a02008 	mov	r2, r8
   383f4:	e1a01007 	mov	r1, r7
   383f8:	e59c5038 	ldr	r5, [ip, #56]	; 0x38
   383fc:	e12fff35 	blx	r5
   38400:	eaffffcb 	b	38334 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   38404:	e59f316c 	ldr	r3, [pc, #364]	; 38578 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   38408:	e3e02000 	mvn	r2, #0
   3840c:	e5933000 	ldr	r3, [r3]
   38410:	e5931014 	ldr	r1, [r3, #20]
   38414:	e593000c 	ldr	r0, [r3, #12]
   38418:	ebffe26d 	bl	30dd4 <BusAccess::targetReqReset(int, int)>
   3841c:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   38420:	e59f1154 	ldr	r1, [pc, #340]	; 3857c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   38424:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   38428:	ebffd52a 	bl	2d8d8 <strlcpy>
   3842c:	eaffffa7 	b	382d0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   38430:	e59f115c 	ldr	r1, [pc, #348]	; 38594 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f8>
   38434:	e28d0014 	add	r0, sp, #20
   38438:	ebffc564 	bl	299d0 <strcasecmp>
   3843c:	e3500000 	cmp	r0, #0
   38440:	0affffdc 	beq	383b8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x11c>
   38444:	e59f114c 	ldr	r1, [pc, #332]	; 38598 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   38448:	e28d0014 	add	r0, sp, #20
   3844c:	ebffc55f 	bl	299d0 <strcasecmp>
   38450:	e3500000 	cmp	r0, #0
   38454:	1a000017 	bne	384b8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   38458:	e59f313c 	ldr	r3, [pc, #316]	; 3859c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x300>
   3845c:	e2862001 	add	r2, r6, #1
   38460:	e59f7138 	ldr	r7, [pc, #312]	; 385a0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x304>
   38464:	e1520003 	cmp	r2, r3
   38468:	21a02003 	movcs	r2, r3
   3846c:	e1a01008 	mov	r1, r8
   38470:	e1a00007 	mov	r0, r7
   38474:	ebffd517 	bl	2d8d8 <strlcpy>
   38478:	ebffb804 	bl	26490 <CLogger::Get()>
   3847c:	e59f3120 	ldr	r3, [pc, #288]	; 385a4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x308>
   38480:	e3a02004 	mov	r2, #4
   38484:	e59f1104 	ldr	r1, [pc, #260]	; 38590 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   38488:	e58d7000 	str	r7, [sp]
   3848c:	ebffb73c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38490:	e1a01007 	mov	r1, r7
   38494:	e1a00005 	mov	r0, r5
   38498:	ebfffe3a 	bl	37d88 <McManager::setupMachine(char const*)>
   3849c:	e3500000 	cmp	r0, #0
   384a0:	1affffa3 	bne	38334 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   384a4:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   384a8:	e59f10f8 	ldr	r1, [pc, #248]	; 385a8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   384ac:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   384b0:	ebffd508 	bl	2d8d8 <strlcpy>
   384b4:	eaffff85 	b	382d0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   384b8:	e59f10ec 	ldr	r1, [pc, #236]	; 385ac <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x310>
   384bc:	e28d0014 	add	r0, sp, #20
   384c0:	ebffc542 	bl	299d0 <strcasecmp>
   384c4:	e3500000 	cmp	r0, #0
   384c8:	0a000021 	beq	38554 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   384cc:	e28d0014 	add	r0, sp, #20
   384d0:	e59f10d8 	ldr	r1, [pc, #216]	; 385b0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x314>
   384d4:	ebffc53d 	bl	299d0 <strcasecmp>
   384d8:	e2503000 	subs	r3, r0, #0
   384dc:	1affff7a 	bne	382cc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   384e0:	e1a01003 	mov	r1, r3
   384e4:	e3a02006 	mov	r2, #6
   384e8:	e28d000c 	add	r0, sp, #12
   384ec:	e58d3008 	str	r3, [sp, #8]
   384f0:	ebffc4bf 	bl	297f4 <memset>
   384f4:	e28d1008 	add	r1, sp, #8
   384f8:	e3a0200a 	mov	r2, #10
   384fc:	e1a00008 	mov	r0, r8
   38500:	ebffc65a 	bl	29e70 <strtoul>
   38504:	e28d1008 	add	r1, sp, #8
   38508:	e3a0200a 	mov	r2, #10
   3850c:	e59d0008 	ldr	r0, [sp, #8]
   38510:	ebffc656 	bl	29e70 <strtoul>
   38514:	e2855a02 	add	r5, r5, #8192	; 0x2000
   38518:	e5cd000c 	strb	r0, [sp, #12]
   3851c:	e28d1008 	add	r1, sp, #8
   38520:	e3a0200a 	mov	r2, #10
   38524:	e59d0008 	ldr	r0, [sp, #8]
   38528:	ebffc650 	bl	29e70 <strtoul>
   3852c:	e5953760 	ldr	r3, [r5, #1888]	; 0x760
   38530:	e3530000 	cmp	r3, #0
   38534:	0affff65 	beq	382d0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   38538:	e593c000 	ldr	ip, [r3]
   3853c:	e6ef1070 	uxtb	r1, r0
   38540:	e28d200c 	add	r2, sp, #12
   38544:	e59c5034 	ldr	r5, [ip, #52]	; 0x34
   38548:	e1a00003 	mov	r0, r3
   3854c:	e12fff35 	blx	r5
   38550:	eaffff5e 	b	382d0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   38554:	e1a02006 	mov	r2, r6
   38558:	e1a01008 	mov	r1, r8
   3855c:	e1a00005 	mov	r0, r5
   38560:	ebfffef1 	bl	3812c <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>
   38564:	eaffff59 	b	382d0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   38568:	00040804 	.word	0x00040804
   3856c:	00048ae4 	.word	0x00048ae4
   38570:	00048af0 	.word	0x00048af0
   38574:	00048b00 	.word	0x00048b00
   38578:	000504a8 	.word	0x000504a8
   3857c:	000486f8 	.word	0x000486f8
   38580:	00048b10 	.word	0x00048b10
   38584:	00048b58 	.word	0x00048b58
   38588:	00048b20 	.word	0x00048b20
   3858c:	00048b70 	.word	0x00048b70
   38590:	000489bc 	.word	0x000489bc
   38594:	00048b2c 	.word	0x00048b2c
   38598:	00048b64 	.word	0x00048b64
   3859c:	00002710 	.word	0x00002710
   385a0:	00050910 	.word	0x00050910
   385a4:	00048b38 	.word	0x00048b38
   385a8:	000486ac 	.word	0x000486ac
   385ac:	00048b48 	.word	0x00048b48
   385b0:	00048b50 	.word	0x00048b50

000385b4 <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   385b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   385b8:	e99d5000 	ldmib	sp, {ip, lr}
   385bc:	e3500000 	cmp	r0, #0
   385c0:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   385c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   385c8:	eaffff33 	b	3829c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000385cc <McManager::targetExec()>:
   385cc:	e5901014 	ldr	r1, [r0, #20]
   385d0:	e3e02000 	mvn	r2, #0
   385d4:	e590000c 	ldr	r0, [r0, #12]
   385d8:	eaffe1fd 	b	30dd4 <BusAccess::targetReqReset(int, int)>

000385dc <McManager::targetReset()>:
   385dc:	eafffffa 	b	385cc <McManager::targetExec()>

000385e0 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   385e0:	e3510004 	cmp	r1, #4
   385e4:	112fff1e 	bxne	lr
   385e8:	eafffc67 	b	3778c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.4]>

000385ec <McBase::isMonitorIORQEnabled()>:
   385ec:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   385f0:	e12fff1e 	bx	lr

000385f4 <McBase::isMonitorMREQEnabled()>:
   385f4:	e5d000a5 	ldrb	r0, [r0, #165]	; 0xa5
   385f8:	e12fff1e 	bx	lr

000385fc <McBase::getDisplayRefreshRatePerSec()>:
   385fc:	e5900070 	ldr	r0, [r0, #112]	; 0x70
   38600:	e12fff1e 	bx	lr

00038604 <McBase::isDisplayMemoryMapped()>:
   38604:	e5d00098 	ldrb	r0, [r0, #152]	; 0x98
   38608:	e12fff1e 	bx	lr

0003860c <McRobsZ80::enableMachine()>:
   3860c:	e3a03000 	mov	r3, #0
   38610:	e2800901 	add	r0, r0, #16384	; 0x4000
   38614:	e5c030e0 	strb	r3, [r0, #224]	; 0xe0
   38618:	e12fff1e 	bx	lr

0003861c <McRobsZ80::disableMachine()>:
   3861c:	e12fff1e 	bx	lr

00038620 <McRobsZ80::keyHandler(unsigned char, unsigned char const*)>:
   38620:	e12fff1e 	bx	lr

00038624 <McRobsZ80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38624:	e12fff1e 	bx	lr

00038628 <McRobsZ80::displayRefreshFromMirrorHw()>:
   38628:	e92d4010 	push	{r4, lr}
   3862c:	e5903000 	ldr	r3, [r0]
   38630:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   38634:	e24dd010 	sub	sp, sp, #16
   38638:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3863c:	e1a04000 	mov	r4, r0
   38640:	e12fff33 	blx	r3
   38644:	e3a02000 	mov	r2, #0
   38648:	e3a01001 	mov	r1, #1
   3864c:	e3a03901 	mov	r3, #16384	; 0x4000
   38650:	e58d1008 	str	r1, [sp, #8]
   38654:	e58d2004 	str	r2, [sp, #4]
   38658:	e58d2000 	str	r2, [sp]
   3865c:	e1a01003 	mov	r1, r3
   38660:	e28d2010 	add	r2, sp, #16
   38664:	ebfff267 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   38668:	e3500000 	cmp	r0, #0
   3866c:	1a000005 	bne	38688 <McRobsZ80::displayRefreshFromMirrorHw()+0x60>
   38670:	e5943000 	ldr	r3, [r4]
   38674:	e28d1010 	add	r1, sp, #16
   38678:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   3867c:	e1a00004 	mov	r0, r4
   38680:	e3a02901 	mov	r2, #16384	; 0x4000
   38684:	e12fff33 	blx	r3
   38688:	e28dd901 	add	sp, sp, #16384	; 0x4000
   3868c:	e28dd010 	add	sp, sp, #16
   38690:	e8bd8010 	pop	{r4, pc}

00038694 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)>:
   38694:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   38698:	e24dd094 	sub	sp, sp, #148	; 0x94
   3869c:	e1a06000 	mov	r6, r0
   386a0:	e1a08002 	mov	r8, r2
   386a4:	e1a05003 	mov	r5, r3
   386a8:	e28d2028 	add	r2, sp, #40	; 0x28
   386ac:	e3a03064 	mov	r3, #100	; 0x64
   386b0:	e59f00a8 	ldr	r0, [pc, #168]	; 38760 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xcc>
   386b4:	e1a07001 	mov	r7, r1
   386b8:	ebffd53c 	bl	2dbb0 <jsonGetValueForKey>
   386bc:	e2504000 	subs	r4, r0, #0
   386c0:	1a000002 	bne	386d0 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x3c>
   386c4:	e1a00004 	mov	r0, r4
   386c8:	e28dd094 	add	sp, sp, #148	; 0x94
   386cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   386d0:	e59f108c 	ldr	r1, [pc, #140]	; 38764 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xd0>
   386d4:	e28d0028 	add	r0, sp, #40	; 0x28
   386d8:	ebffc594 	bl	29d30 <strstr>
   386dc:	e1a01007 	mov	r1, r7
   386e0:	e28d2008 	add	r2, sp, #8
   386e4:	e3a0301e 	mov	r3, #30
   386e8:	e59f0078 	ldr	r0, [pc, #120]	; 38768 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xd4>
   386ec:	ebffd52f 	bl	2dbb0 <jsonGetValueForKey>
   386f0:	e2507000 	subs	r7, r0, #0
   386f4:	01a09007 	moveq	r9, r7
   386f8:	1a000011 	bne	38744 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xb0>
   386fc:	ebffb763 	bl	26490 <CLogger::Get()>
   38700:	e3a02004 	mov	r2, #4
   38704:	e59f1060 	ldr	r1, [pc, #96]	; 3876c <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xd8>
   38708:	e58d5004 	str	r5, [sp, #4]
   3870c:	e58d9000 	str	r9, [sp]
   38710:	e59f3058 	ldr	r3, [pc, #88]	; 38770 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xdc>
   38714:	ebffb69a 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38718:	e5963000 	ldr	r3, [r6]
   3871c:	e1a00006 	mov	r0, r6
   38720:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38724:	e12fff33 	blx	r3
   38728:	e1a03005 	mov	r3, r5
   3872c:	e1a02008 	mov	r2, r8
   38730:	e1a01007 	mov	r1, r7
   38734:	ebffed8e 	bl	33d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38738:	e1a00004 	mov	r0, r4
   3873c:	e28dd094 	add	sp, sp, #148	; 0x94
   38740:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38744:	e28d0008 	add	r0, sp, #8
   38748:	e3a02010 	mov	r2, #16
   3874c:	e3a01000 	mov	r1, #0
   38750:	ebffc5c6 	bl	29e70 <strtoul>
   38754:	e6ff9070 	uxth	r9, r0
   38758:	e1a07009 	mov	r7, r9
   3875c:	eaffffe6 	b	386fc <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x68>
   38760:	0004792c 	.word	0x0004792c
   38764:	00040680 	.word	0x00040680
   38768:	00048c0c 	.word	0x00048c0c
   3876c:	00048c48 	.word	0x00048c48
   38770:	00048c18 	.word	0x00048c18

00038774 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.0]>:
   38774:	e92d4010 	push	{r4, lr}
   38778:	e5903000 	ldr	r3, [r0]
   3877c:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   38780:	e24dd010 	sub	sp, sp, #16
   38784:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   38788:	e1a04000 	mov	r4, r0
   3878c:	e12fff33 	blx	r3
   38790:	e3a02000 	mov	r2, #0
   38794:	e3a03901 	mov	r3, #16384	; 0x4000
   38798:	e58d2008 	str	r2, [sp, #8]
   3879c:	e58d2004 	str	r2, [sp, #4]
   387a0:	e58d2000 	str	r2, [sp]
   387a4:	e1a01003 	mov	r1, r3
   387a8:	e28d2010 	add	r2, sp, #16
   387ac:	ebfff215 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   387b0:	e3500000 	cmp	r0, #0
   387b4:	0a000002 	beq	387c4 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.0]+0x50>
   387b8:	e28dd901 	add	sp, sp, #16384	; 0x4000
   387bc:	e28dd010 	add	sp, sp, #16
   387c0:	e8bd8010 	pop	{r4, pc}
   387c4:	e5943000 	ldr	r3, [r4]
   387c8:	e28d1010 	add	r1, sp, #16
   387cc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   387d0:	e1a00004 	mov	r0, r4
   387d4:	e3a02901 	mov	r2, #16384	; 0x4000
   387d8:	e12fff33 	blx	r3
   387dc:	e28dd901 	add	sp, sp, #16384	; 0x4000
   387e0:	e28dd010 	add	sp, sp, #16
   387e4:	e8bd8010 	pop	{r4, pc}

000387e8 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION)>:
   387e8:	e3510004 	cmp	r1, #4
   387ec:	112fff1e 	bxne	lr
   387f0:	eaffffdf 	b	38774 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.0]>

000387f4 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   387f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   387f8:	e5903000 	ldr	r3, [r0]
   387fc:	e59fc170 	ldr	ip, [pc, #368]	; 38974 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x180>
   38800:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   38804:	e24dd01c 	sub	sp, sp, #28
   38808:	e153000c 	cmp	r3, ip
   3880c:	e1a04000 	mov	r4, r0
   38810:	e1a0b001 	mov	fp, r1
   38814:	e1a0a002 	mov	sl, r2
   38818:	1a000052 	bne	38968 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x174>
   3881c:	e59080dc 	ldr	r8, [r0, #220]	; 0xdc
   38820:	e35a0901 	cmp	sl, #16384	; 0x4000
   38824:	23a0a000 	movcs	sl, #0
   38828:	33a0a001 	movcc	sl, #1
   3882c:	e3580000 	cmp	r8, #0
   38830:	038aa001 	orreq	sl, sl, #1
   38834:	e35a0000 	cmp	sl, #0
   38838:	0a000001 	beq	38844 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x50>
   3883c:	e28dd01c 	add	sp, sp, #28
   38840:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38844:	e5943000 	ldr	r3, [r4]
   38848:	e1a00004 	mov	r0, r4
   3884c:	e5933014 	ldr	r3, [r3, #20]
   38850:	e12fff33 	blx	r3
   38854:	e590306c 	ldr	r3, [r0, #108]	; 0x6c
   38858:	e59f9118 	ldr	r9, [pc, #280]	; 38978 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x184>
   3885c:	e2832007 	add	r2, r3, #7
   38860:	e3530000 	cmp	r3, #0
   38864:	b1a03002 	movlt	r3, r2
   38868:	e1a031c3 	asr	r3, r3, #3
   3886c:	e58d3014 	str	r3, [sp, #20]
   38870:	e28430e0 	add	r3, r4, #224	; 0xe0
   38874:	e58d3008 	str	r3, [sp, #8]
   38878:	e2843901 	add	r3, r4, #16384	; 0x4000
   3887c:	e58d3010 	str	r3, [sp, #16]
   38880:	e59d3010 	ldr	r3, [sp, #16]
   38884:	e5d330e0 	ldrb	r3, [r3, #224]	; 0xe0
   38888:	e3530000 	cmp	r3, #0
   3888c:	e5db3000 	ldrb	r3, [fp]
   38890:	0a000003 	beq	388a4 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xb0>
   38894:	e59d2008 	ldr	r2, [sp, #8]
   38898:	e5d22000 	ldrb	r2, [r2]
   3889c:	e1520003 	cmp	r2, r3
   388a0:	0a000024 	beq	38938 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x144>
   388a4:	e59d2008 	ldr	r2, [sp, #8]
   388a8:	e59d4014 	ldr	r4, [sp, #20]
   388ac:	e5c23000 	strb	r3, [r2]
   388b0:	e1a01004 	mov	r1, r4
   388b4:	e1a0000a 	mov	r0, sl
   388b8:	eb001c75 	bl	3fa94 <__aeabi_uidivmod>
   388bc:	e1a0000a 	mov	r0, sl
   388c0:	e1a07181 	lsl	r7, r1, #3
   388c4:	e1a01004 	mov	r1, r4
   388c8:	eb001c34 	bl	3f9a0 <__aeabi_uidiv>
   388cc:	e1a04007 	mov	r4, r7
   388d0:	e58d000c 	str	r0, [sp, #12]
   388d4:	e3a05080 	mov	r5, #128	; 0x80
   388d8:	e2877008 	add	r7, r7, #8
   388dc:	ea000003 	b	388f0 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xfc>
   388e0:	e2844001 	add	r4, r4, #1
   388e4:	e1570004 	cmp	r7, r4
   388e8:	e1a050c5 	asr	r5, r5, #1
   388ec:	0a000011 	beq	38938 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x144>
   388f0:	e5983000 	ldr	r3, [r8]
   388f4:	e5936028 	ldr	r6, [r3, #40]	; 0x28
   388f8:	e1560009 	cmp	r6, r9
   388fc:	0afffff7 	beq	388e0 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   38900:	e3e02000 	mvn	r2, #0
   38904:	e5db3000 	ldrb	r3, [fp]
   38908:	e1a01004 	mov	r1, r4
   3890c:	e1130005 	tst	r3, r5
   38910:	e58d2000 	str	r2, [sp]
   38914:	13a03001 	movne	r3, #1
   38918:	03a03000 	moveq	r3, #0
   3891c:	e59d200c 	ldr	r2, [sp, #12]
   38920:	e1a00008 	mov	r0, r8
   38924:	e2844001 	add	r4, r4, #1
   38928:	e12fff36 	blx	r6
   3892c:	e1570004 	cmp	r7, r4
   38930:	e1a050c5 	asr	r5, r5, #1
   38934:	1affffed 	bne	388f0 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xfc>
   38938:	e59d3008 	ldr	r3, [sp, #8]
   3893c:	e28aa001 	add	sl, sl, #1
   38940:	e2833001 	add	r3, r3, #1
   38944:	e35a0901 	cmp	sl, #16384	; 0x4000
   38948:	e58d3008 	str	r3, [sp, #8]
   3894c:	e28bb001 	add	fp, fp, #1
   38950:	1affffca 	bne	38880 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x8c>
   38954:	e3a03001 	mov	r3, #1
   38958:	e59d2010 	ldr	r2, [sp, #16]
   3895c:	e5c230e0 	strb	r3, [r2, #224]	; 0xe0
   38960:	e28dd01c 	add	sp, sp, #28
   38964:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38968:	e12fff33 	blx	r3
   3896c:	e1a08000 	mov	r8, r0
   38970:	eaffffaa 	b	38820 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   38974:	000389dc 	.word	0x000389dc
   38978:	000389b4 	.word	0x000389b4

0003897c <McRobsZ80::McRobsZ80(McManager&)>:
   3897c:	e92d4010 	push	{r4, lr}
   38980:	e3a03001 	mov	r3, #1
   38984:	e1a04000 	mov	r4, r0
   38988:	e59f201c 	ldr	r2, [pc, #28]	; 389ac <McRobsZ80::McRobsZ80(McManager&)+0x30>
   3898c:	eb0009ec 	bl	3b144 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)>
   38990:	e3a02000 	mov	r2, #0
   38994:	e59f1014 	ldr	r1, [pc, #20]	; 389b0 <McRobsZ80::McRobsZ80(McManager&)+0x34>
   38998:	e2843901 	add	r3, r4, #16384	; 0x4000
   3899c:	e5841000 	str	r1, [r4]
   389a0:	e1a00004 	mov	r0, r4
   389a4:	e5c320e0 	strb	r2, [r3, #224]	; 0xe0
   389a8:	e8bd8010 	pop	{r4, pc}
   389ac:	00049d9c 	.word	0x00049d9c
   389b0:	00048b98 	.word	0x00048b98

000389b4 <DisplayBase::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   389b4:	e12fff1e 	bx	lr

000389b8 <McBase::service()>:
   389b8:	e12fff1e 	bx	lr

000389bc <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   389bc:	e3a00000 	mov	r0, #0
   389c0:	e12fff1e 	bx	lr

000389c4 <McBase::setMonitorIORQEnabled(bool)>:
   389c4:	e5c010a4 	strb	r1, [r0, #164]	; 0xa4
   389c8:	e12fff1e 	bx	lr

000389cc <McBase::setMonitorMREQEnabled(bool)>:
   389cc:	e5c010a5 	strb	r1, [r0, #165]	; 0xa5
   389d0:	e12fff1e 	bx	lr

000389d4 <McBase::getSetRegistersCodeAddr()>:
   389d4:	e59000a8 	ldr	r0, [r0, #168]	; 0xa8
   389d8:	e12fff1e 	bx	lr

000389dc <McBase::getDisplay()>:
   389dc:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   389e0:	e12fff1e 	bx	lr

000389e4 <McTerminal::enableMachine()>:
   389e4:	e12fff1e 	bx	lr

000389e8 <McTerminal::busActionCompleteCallback(BR_BUS_ACTION)>:
   389e8:	e3510001 	cmp	r1, #1
   389ec:	03a03000 	moveq	r3, #0
   389f0:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   389f4:	05c01b81 	strbeq	r1, [r0, #2945]	; 0xb81
   389f8:	05c03b82 	strbeq	r3, [r0, #2946]	; 0xb82
   389fc:	e12fff1e 	bx	lr

00038a00 <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
   38a00:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   38a04:	e24dd094 	sub	sp, sp, #148	; 0x94
   38a08:	e1a06000 	mov	r6, r0
   38a0c:	e1a08002 	mov	r8, r2
   38a10:	e1a05003 	mov	r5, r3
   38a14:	e28d2028 	add	r2, sp, #40	; 0x28
   38a18:	e3a03064 	mov	r3, #100	; 0x64
   38a1c:	e59f00a8 	ldr	r0, [pc, #168]	; 38acc <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xcc>
   38a20:	e1a07001 	mov	r7, r1
   38a24:	ebffd461 	bl	2dbb0 <jsonGetValueForKey>
   38a28:	e2504000 	subs	r4, r0, #0
   38a2c:	1a000002 	bne	38a3c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x3c>
   38a30:	e1a00004 	mov	r0, r4
   38a34:	e28dd094 	add	sp, sp, #148	; 0x94
   38a38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38a3c:	e59f108c 	ldr	r1, [pc, #140]	; 38ad0 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd0>
   38a40:	e28d0028 	add	r0, sp, #40	; 0x28
   38a44:	ebffc4b9 	bl	29d30 <strstr>
   38a48:	e1a01007 	mov	r1, r7
   38a4c:	e28d2008 	add	r2, sp, #8
   38a50:	e3a0301e 	mov	r3, #30
   38a54:	e59f0078 	ldr	r0, [pc, #120]	; 38ad4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd4>
   38a58:	ebffd454 	bl	2dbb0 <jsonGetValueForKey>
   38a5c:	e2507000 	subs	r7, r0, #0
   38a60:	01a09007 	moveq	r9, r7
   38a64:	1a000011 	bne	38ab0 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb0>
   38a68:	ebffb688 	bl	26490 <CLogger::Get()>
   38a6c:	e3a02004 	mov	r2, #4
   38a70:	e59f1060 	ldr	r1, [pc, #96]	; 38ad8 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd8>
   38a74:	e58d5004 	str	r5, [sp, #4]
   38a78:	e58d9000 	str	r9, [sp]
   38a7c:	e59f3058 	ldr	r3, [pc, #88]	; 38adc <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xdc>
   38a80:	ebffb5bf 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38a84:	e5963000 	ldr	r3, [r6]
   38a88:	e1a00006 	mov	r0, r6
   38a8c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38a90:	e12fff33 	blx	r3
   38a94:	e1a03005 	mov	r3, r5
   38a98:	e1a02008 	mov	r2, r8
   38a9c:	e1a01007 	mov	r1, r7
   38aa0:	ebffecb3 	bl	33d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38aa4:	e1a00004 	mov	r0, r4
   38aa8:	e28dd094 	add	sp, sp, #148	; 0x94
   38aac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38ab0:	e28d0008 	add	r0, sp, #8
   38ab4:	e3a02010 	mov	r2, #16
   38ab8:	e3a01000 	mov	r1, #0
   38abc:	ebffc4eb 	bl	29e70 <strtoul>
   38ac0:	e6ff9070 	uxth	r9, r0
   38ac4:	e1a07009 	mov	r7, r9
   38ac8:	eaffffe6 	b	38a68 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x68>
   38acc:	0004792c 	.word	0x0004792c
   38ad0:	00040680 	.word	0x00040680
   38ad4:	00048c0c 	.word	0x00048c0c
   38ad8:	00048cc8 	.word	0x00048cc8
   38adc:	00048c18 	.word	0x00048c18

00038ae0 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38ae0:	e92d4010 	push	{r4, lr}
   38ae4:	e2804a61 	add	r4, r0, #397312	; 0x61000
   38ae8:	e5d4cb80 	ldrb	ip, [r4, #2944]	; 0xb80
   38aec:	e59de008 	ldr	lr, [sp, #8]
   38af0:	e35c0000 	cmp	ip, #0
   38af4:	08bd8010 	popeq	{r4, pc}
   38af8:	e203c018 	and	ip, r3, #24
   38afc:	e35c0008 	cmp	ip, #8
   38b00:	18bd8010 	popne	{r4, pc}
   38b04:	e201c0c0 	and	ip, r1, #192	; 0xc0
   38b08:	e35c0080 	cmp	ip, #128	; 0x80
   38b0c:	18bd8010 	popne	{r4, pc}
   38b10:	e3130001 	tst	r3, #1
   38b14:	1a00000d 	bne	38b50 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   38b18:	e3130002 	tst	r3, #2
   38b1c:	08bd8010 	popeq	{r4, pc}
   38b20:	e2113001 	ands	r3, r1, #1
   38b24:	1a000037 	bne	38c08 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   38b28:	e1a013a2 	lsr	r1, r2, #7
   38b2c:	e2022003 	and	r2, r2, #3
   38b30:	e2011001 	and	r1, r1, #1
   38b34:	e3520003 	cmp	r2, #3
   38b38:	e5c41b83 	strb	r1, [r4, #2947]	; 0xb83
   38b3c:	0a00003c 	beq	38c34 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x154>
   38b40:	e5d42b82 	ldrb	r2, [r4, #2946]	; 0xb82
   38b44:	e3520000 	cmp	r2, #0
   38b48:	15c43b82 	strbne	r3, [r4, #2946]	; 0xb82
   38b4c:	e8bd8010 	pop	{r4, pc}
   38b50:	e3110001 	tst	r1, #1
   38b54:	1a00000c 	bne	38b8c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xac>
   38b58:	e5943b88 	ldr	r3, [r4, #2952]	; 0xb88
   38b5c:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   38b60:	e5d42b81 	ldrb	r2, [r4, #2945]	; 0xb81
   38b64:	e1530001 	cmp	r3, r1
   38b68:	13a03003 	movne	r3, #3
   38b6c:	03a03002 	moveq	r3, #2
   38b70:	e3520000 	cmp	r2, #0
   38b74:	e58e3000 	str	r3, [lr]
   38b78:	1a00002a 	bne	38c28 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x148>
   38b7c:	e5d43b82 	ldrb	r3, [r4, #2946]	; 0xb82
   38b80:	e3530000 	cmp	r3, #0
   38b84:	158e2000 	strne	r2, [lr]
   38b88:	e8bd8010 	pop	{r4, pc}
   38b8c:	e3a01000 	mov	r1, #0
   38b90:	e5942b88 	ldr	r2, [r4, #2952]	; 0xb88
   38b94:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   38b98:	e58e1000 	str	r1, [lr]
   38b9c:	e1520003 	cmp	r2, r3
   38ba0:	0a000015 	beq	38bfc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38ba4:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38ba8:	e59fc094 	ldr	ip, [pc, #148]	; 38c44 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   38bac:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   38bb0:	e0802002 	add	r2, r0, r2
   38bb4:	e7d2200c 	ldrb	r2, [r2, ip]
   38bb8:	e2833001 	add	r3, r3, #1
   38bbc:	e58e2000 	str	r2, [lr]
   38bc0:	e5843b8c 	str	r3, [r4, #2956]	; 0xb8c
   38bc4:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38bc8:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38bcc:	e1520003 	cmp	r2, r3
   38bd0:	e5d43b83 	ldrb	r3, [r4, #2947]	; 0xb83
   38bd4:	25841b8c 	strcs	r1, [r4, #2956]	; 0xb8c
   38bd8:	e3530000 	cmp	r3, #0
   38bdc:	0a000006 	beq	38bfc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38be0:	e5942b88 	ldr	r2, [r4, #2952]	; 0xb88
   38be4:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   38be8:	e1520003 	cmp	r2, r3
   38bec:	0a000002 	beq	38bfc <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38bf0:	e5900004 	ldr	r0, [r0, #4]
   38bf4:	e3e01000 	mvn	r1, #0
   38bf8:	ebfffc54 	bl	37d50 <McManager::targetIrq(int)>
   38bfc:	e3a03000 	mov	r3, #0
   38c00:	e5c43b81 	strb	r3, [r4, #2945]	; 0xb81
   38c04:	e8bd8010 	pop	{r4, pc}
   38c08:	e5940b84 	ldr	r0, [r4, #2948]	; 0xb84
   38c0c:	e3500000 	cmp	r0, #0
   38c10:	08bd8010 	popeq	{r4, pc}
   38c14:	e5903000 	ldr	r3, [r0]
   38c18:	e1a01002 	mov	r1, r2
   38c1c:	e8bd4010 	pop	{r4, lr}
   38c20:	e593300c 	ldr	r3, [r3, #12]
   38c24:	e12fff13 	bx	r3
   38c28:	e3833030 	orr	r3, r3, #48	; 0x30
   38c2c:	e58e3000 	str	r3, [lr]
   38c30:	e8bd8010 	pop	{r4, pc}
   38c34:	e3a02001 	mov	r2, #1
   38c38:	e5c43b81 	strb	r3, [r4, #2945]	; 0xb81
   38c3c:	e5c42b82 	strb	r2, [r4, #2946]	; 0xb82
   38c40:	e8bd8010 	pop	{r4, pc}
   38c44:	00061b94 	.word	0x00061b94

00038c48 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   38c48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c4c:	e3530000 	cmp	r3, #0
   38c50:	e24dd014 	sub	sp, sp, #20
   38c54:	0a00000f 	beq	38c98 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   38c58:	e1a03000 	mov	r3, r0
   38c5c:	e3e0e000 	mvn	lr, #0
   38c60:	e280cbc3 	add	ip, r0, #199680	; 0x30c00
   38c64:	e28ccd05 	add	ip, ip, #320	; 0x140
   38c68:	e5c3e0e3 	strb	lr, [r3, #227]	; 0xe3
   38c6c:	e2833004 	add	r3, r3, #4
   38c70:	e153000c 	cmp	r3, ip
   38c74:	1afffffb 	bne	38c68 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x20>
   38c78:	e3e0e000 	mvn	lr, #0
   38c7c:	e59f314c 	ldr	r3, [pc, #332]	; 38dd0 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x188>
   38c80:	e59fc14c 	ldr	ip, [pc, #332]	; 38dd4 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x18c>
   38c84:	e0803003 	add	r3, r0, r3
   38c88:	e080c00c 	add	ip, r0, ip
   38c8c:	e4c3e004 	strb	lr, [r3], #4
   38c90:	e153000c 	cmp	r3, ip
   38c94:	1afffffc 	bne	38c8c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x44>
   38c98:	e3510000 	cmp	r1, #0
   38c9c:	13520009 	cmpne	r2, #9
   38ca0:	93a03001 	movls	r3, #1
   38ca4:	83a03000 	movhi	r3, #0
   38ca8:	9a000044 	bls	38dc0 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38cac:	e280aa61 	add	sl, r0, #397312	; 0x61000
   38cb0:	e59acb84 	ldr	ip, [sl, #2948]	; 0xb84
   38cb4:	e59cc00c 	ldr	ip, [ip, #12]
   38cb8:	e5c1c000 	strb	ip, [r1]
   38cbc:	e59acb84 	ldr	ip, [sl, #2948]	; 0xb84
   38cc0:	e59cc010 	ldr	ip, [ip, #16]
   38cc4:	e5c1c001 	strb	ip, [r1, #1]
   38cc8:	e59acb84 	ldr	ip, [sl, #2948]	; 0xb84
   38ccc:	e59ce010 	ldr	lr, [ip, #16]
   38cd0:	e35e0000 	cmp	lr, #0
   38cd4:	0a000039 	beq	38dc0 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38cd8:	e58d2004 	str	r2, [sp, #4]
   38cdc:	e1a08001 	mov	r8, r1
   38ce0:	e1a09000 	mov	r9, r0
   38ce4:	e1a0b003 	mov	fp, r3
   38ce8:	e3a02002 	mov	r2, #2
   38cec:	e59c300c 	ldr	r3, [ip, #12]
   38cf0:	e3530000 	cmp	r3, #0
   38cf4:	0a000028 	beq	38d9c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x154>
   38cf8:	e3a05000 	mov	r5, #0
   38cfc:	e023539b 	mla	r3, fp, r3, r5
   38d00:	e59c1008 	ldr	r1, [ip, #8]
   38d04:	e28c7028 	add	r7, ip, #40	; 0x28
   38d08:	e1530001 	cmp	r3, r1
   38d0c:	359c7004 	ldrcc	r7, [ip, #4]
   38d10:	31a03103 	lslcc	r3, r3, #2
   38d14:	21a03103 	lslcs	r3, r3, #2
   38d18:	30877003 	addcc	r7, r7, r3
   38d1c:	e0893003 	add	r3, r9, r3
   38d20:	e2834803 	add	r4, r3, #196608	; 0x30000
   38d24:	e5940e20 	ldr	r0, [r4, #3616]	; 0xe20
   38d28:	e5971000 	ldr	r1, [r7]
   38d2c:	e2826006 	add	r6, r2, #6
   38d30:	e1500001 	cmp	r0, r1
   38d34:	e0880002 	add	r0, r8, r2
   38d38:	0a000012 	beq	38d88 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x140>
   38d3c:	e59d3004 	ldr	r3, [sp, #4]
   38d40:	e1530006 	cmp	r3, r6
   38d44:	3a000018 	bcc	38dac <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x164>
   38d48:	e5cdb009 	strb	fp, [sp, #9]
   38d4c:	e5cd5008 	strb	r5, [sp, #8]
   38d50:	e5d71000 	ldrb	r1, [r7]
   38d54:	e3a02006 	mov	r2, #6
   38d58:	e5cd100a 	strb	r1, [sp, #10]
   38d5c:	e5d7c001 	ldrb	ip, [r7, #1]
   38d60:	e28d1008 	add	r1, sp, #8
   38d64:	e5cdc00b 	strb	ip, [sp, #11]
   38d68:	e5d7c002 	ldrb	ip, [r7, #2]
   38d6c:	e5cdc00c 	strb	ip, [sp, #12]
   38d70:	e5d7c003 	ldrb	ip, [r7, #3]
   38d74:	e5cdc00d 	strb	ip, [sp, #13]
   38d78:	ebffc514 	bl	2a1d0 <memcpy>
   38d7c:	e1a02006 	mov	r2, r6
   38d80:	e5973000 	ldr	r3, [r7]
   38d84:	e5843e20 	str	r3, [r4, #3616]	; 0xe20
   38d88:	e59acb84 	ldr	ip, [sl, #2948]	; 0xb84
   38d8c:	e2855001 	add	r5, r5, #1
   38d90:	e59c300c 	ldr	r3, [ip, #12]
   38d94:	e1530005 	cmp	r3, r5
   38d98:	8affffd7 	bhi	38cfc <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb4>
   38d9c:	e59c3010 	ldr	r3, [ip, #16]
   38da0:	e28bb001 	add	fp, fp, #1
   38da4:	e153000b 	cmp	r3, fp
   38da8:	8affffcf 	bhi	38cec <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xa4>
   38dac:	e3520002 	cmp	r2, #2
   38db0:	0a000002 	beq	38dc0 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38db4:	e1a00002 	mov	r0, r2
   38db8:	e28dd014 	add	sp, sp, #20
   38dbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38dc0:	e3a02000 	mov	r2, #0
   38dc4:	e1a00002 	mov	r0, r2
   38dc8:	e28dd014 	add	sp, sp, #20
   38dcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38dd0:	00030e23 	.word	0x00030e23
   38dd4:	00061b63 	.word	0x00061b63

00038dd8 <McTerminal::displayRefreshFromMirrorHw()>:
   38dd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38ddc:	e5903000 	ldr	r3, [r0]
   38de0:	e59f2454 	ldr	r2, [pc, #1108]	; 3923c <McTerminal::displayRefreshFromMirrorHw()+0x464>
   38de4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   38de8:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   38dec:	e1530002 	cmp	r3, r2
   38df0:	e1a0b000 	mov	fp, r0
   38df4:	1a0000c0 	bne	390fc <McTerminal::displayRefreshFromMirrorHw()+0x324>
   38df8:	e59080dc 	ldr	r8, [r0, #220]	; 0xdc
   38dfc:	e3580000 	cmp	r8, #0
   38e00:	0a00007b 	beq	38ff4 <McTerminal::displayRefreshFromMirrorHw()+0x21c>
   38e04:	e59b0004 	ldr	r0, [fp, #4]
   38e08:	ebfffcdc 	bl	38180 <McManager::hostSerialNumChAvailable()>
   38e0c:	e3500000 	cmp	r0, #0
   38e10:	1a000079 	bne	38ffc <McTerminal::displayRefreshFromMirrorHw()+0x224>
   38e14:	e28baa61 	add	sl, fp, #397312	; 0x61000
   38e18:	e59a0b84 	ldr	r0, [sl, #2948]	; 0xb84
   38e1c:	e3500000 	cmp	r0, #0
   38e20:	0a000073 	beq	38ff4 <McTerminal::displayRefreshFromMirrorHw()+0x21c>
   38e24:	e5903000 	ldr	r3, [r0]
   38e28:	e59f2410 	ldr	r2, [pc, #1040]	; 39240 <McTerminal::displayRefreshFromMirrorHw()+0x468>
   38e2c:	e5933014 	ldr	r3, [r3, #20]
   38e30:	e1530002 	cmp	r3, r2
   38e34:	1a0000d9 	bne	391a0 <McTerminal::displayRefreshFromMirrorHw()+0x3c8>
   38e38:	e5d0001c 	ldrb	r0, [r0, #28]
   38e3c:	e3500000 	cmp	r0, #0
   38e40:	0a000091 	beq	3908c <McTerminal::displayRefreshFromMirrorHw()+0x2b4>
   38e44:	e5da3b68 	ldrb	r3, [sl, #2920]	; 0xb68
   38e48:	e3530000 	cmp	r3, #0
   38e4c:	1a0000d5 	bne	391a8 <McTerminal::displayRefreshFromMirrorHw()+0x3d0>
   38e50:	e59a5b84 	ldr	r5, [sl, #2948]	; 0xb84
   38e54:	e5953010 	ldr	r3, [r5, #16]
   38e58:	e3530000 	cmp	r3, #0
   38e5c:	0a00008b 	beq	39090 <McTerminal::displayRefreshFromMirrorHw()+0x2b8>
   38e60:	e3a09000 	mov	r9, #0
   38e64:	e595300c 	ldr	r3, [r5, #12]
   38e68:	e3530000 	cmp	r3, #0
   38e6c:	0a00007f 	beq	39070 <McTerminal::displayRefreshFromMirrorHw()+0x298>
   38e70:	e3a06000 	mov	r6, #0
   38e74:	ea000010 	b	38ebc <McTerminal::displayRefreshFromMirrorHw()+0xe4>
   38e78:	e1520001 	cmp	r2, r1
   38e7c:	1a000099 	bne	390e8 <McTerminal::displayRefreshFromMirrorHw()+0x310>
   38e80:	e593201c 	ldr	r2, [r3, #28]
   38e84:	e59f13b8 	ldr	r1, [pc, #952]	; 39244 <McTerminal::displayRefreshFromMirrorHw()+0x46c>
   38e88:	e1520001 	cmp	r2, r1
   38e8c:	1a000090 	bne	390d4 <McTerminal::displayRefreshFromMirrorHw()+0x2fc>
   38e90:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38e94:	e59f33ac 	ldr	r3, [pc, #940]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   38e98:	e1570003 	cmp	r7, r3
   38e9c:	1a000027 	bne	38f40 <McTerminal::displayRefreshFromMirrorHw()+0x168>
   38ea0:	e5953000 	ldr	r3, [r5]
   38ea4:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   38ea8:	e59a5b84 	ldr	r5, [sl, #2948]	; 0xb84
   38eac:	e2866001 	add	r6, r6, #1
   38eb0:	e595300c 	ldr	r3, [r5, #12]
   38eb4:	e1530006 	cmp	r3, r6
   38eb8:	9a00006c 	bls	39070 <McTerminal::displayRefreshFromMirrorHw()+0x298>
   38ebc:	e0236399 	mla	r3, r9, r3, r6
   38ec0:	e5952008 	ldr	r2, [r5, #8]
   38ec4:	e1530002 	cmp	r3, r2
   38ec8:	35955004 	ldrcc	r5, [r5, #4]
   38ecc:	31a03103 	lslcc	r3, r3, #2
   38ed0:	21a03103 	lslcs	r3, r3, #2
   38ed4:	30855003 	addcc	r5, r5, r3
   38ed8:	22855028 	addcs	r5, r5, #40	; 0x28
   38edc:	e08b4003 	add	r4, fp, r3
   38ee0:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   38ee4:	e5952000 	ldr	r2, [r5]
   38ee8:	e1520003 	cmp	r2, r3
   38eec:	0affffed 	beq	38ea8 <McTerminal::displayRefreshFromMirrorHw()+0xd0>
   38ef0:	e5d53003 	ldrb	r3, [r5, #3]
   38ef4:	e59f1350 	ldr	r1, [pc, #848]	; 3924c <McTerminal::displayRefreshFromMirrorHw()+0x474>
   38ef8:	e3130010 	tst	r3, #16
   38efc:	e5983000 	ldr	r3, [r8]
   38f00:	e5932018 	ldr	r2, [r3, #24]
   38f04:	1affffdb 	bne	38e78 <McTerminal::displayRefreshFromMirrorHw()+0xa0>
   38f08:	e1520001 	cmp	r2, r1
   38f0c:	1a00006b 	bne	390c0 <McTerminal::displayRefreshFromMirrorHw()+0x2e8>
   38f10:	e593201c 	ldr	r2, [r3, #28]
   38f14:	e59f1328 	ldr	r1, [pc, #808]	; 39244 <McTerminal::displayRefreshFromMirrorHw()+0x46c>
   38f18:	e1520001 	cmp	r2, r1
   38f1c:	0affffdb 	beq	38e90 <McTerminal::displayRefreshFromMirrorHw()+0xb8>
   38f20:	e1d510d2 	ldrsb	r1, [r5, #2]
   38f24:	e1a00008 	mov	r0, r8
   38f28:	e12fff32 	blx	r2
   38f2c:	e5983000 	ldr	r3, [r8]
   38f30:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38f34:	e59f330c 	ldr	r3, [pc, #780]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   38f38:	e1570003 	cmp	r7, r3
   38f3c:	0affffd7 	beq	38ea0 <McTerminal::displayRefreshFromMirrorHw()+0xc8>
   38f40:	e5d53000 	ldrb	r3, [r5]
   38f44:	e1a02009 	mov	r2, r9
   38f48:	e1a01006 	mov	r1, r6
   38f4c:	e1a00008 	mov	r0, r8
   38f50:	e12fff37 	blx	r7
   38f54:	eaffffd1 	b	38ea0 <McTerminal::displayRefreshFromMirrorHw()+0xc8>
   38f58:	ebffd223 	bl	2d7ec <micros>
   38f5c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   38f60:	e59a3b64 	ldr	r3, [sl, #2916]	; 0xb64
   38f64:	e59a1b60 	ldr	r1, [sl, #2912]	; 0xb60
   38f68:	e0020392 	mul	r2, r2, r3
   38f6c:	ebffd23c 	bl	2d864 <isTimeout>
   38f70:	e3500000 	cmp	r0, #0
   38f74:	0a00001e 	beq	38ff4 <McTerminal::displayRefreshFromMirrorHw()+0x21c>
   38f78:	e5daeb68 	ldrb	lr, [sl, #2920]	; 0xb68
   38f7c:	e35e0000 	cmp	lr, #0
   38f80:	1a000092 	bne	391d0 <McTerminal::displayRefreshFromMirrorHw()+0x3f8>
   38f84:	e59a4b84 	ldr	r4, [sl, #2948]	; 0xb84
   38f88:	e28aceb6 	add	ip, sl, #2912	; 0xb60
   38f8c:	e2845014 	add	r5, r4, #20
   38f90:	e28cc00c 	add	ip, ip, #12
   38f94:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   38f98:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   38f9c:	e594300c 	ldr	r3, [r4, #12]
   38fa0:	e59a2b70 	ldr	r2, [sl, #2928]	; 0xb70
   38fa4:	e59a1b6c 	ldr	r1, [sl, #2924]	; 0xb6c
   38fa8:	e5946008 	ldr	r6, [r4, #8]
   38fac:	e0201293 	mla	r0, r3, r2, r1
   38fb0:	e5953000 	ldr	r3, [r5]
   38fb4:	e1500006 	cmp	r0, r6
   38fb8:	e58c3000 	str	r3, [ip]
   38fbc:	35943004 	ldrcc	r3, [r4, #4]
   38fc0:	e598c000 	ldr	ip, [r8]
   38fc4:	22843028 	addcs	r3, r4, #40	; 0x28
   38fc8:	30833100 	addcc	r3, r3, r0, lsl #2
   38fcc:	e59c4024 	ldr	r4, [ip, #36]	; 0x24
   38fd0:	e59f0270 	ldr	r0, [pc, #624]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   38fd4:	e5d33000 	ldrb	r3, [r3]
   38fd8:	e1540000 	cmp	r4, r0
   38fdc:	e58a3b7c 	str	r3, [sl, #2940]	; 0xb7c
   38fe0:	1a000090 	bne	39228 <McTerminal::displayRefreshFromMirrorHw()+0x450>
   38fe4:	e22e3001 	eor	r3, lr, #1
   38fe8:	e5ca3b68 	strb	r3, [sl, #2920]	; 0xb68
   38fec:	ebffd1fe 	bl	2d7ec <micros>
   38ff0:	e58a0b60 	str	r0, [sl, #2912]	; 0xb60
   38ff4:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   38ff8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ffc:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   39000:	b1a02000 	movlt	r2, r0
   39004:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   39008:	e1a0100d 	mov	r1, sp
   3900c:	e59b0004 	ldr	r0, [fp, #4]
   39010:	ebfffc5d 	bl	3818c <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   39014:	e2505000 	subs	r5, r0, #0
   39018:	0affff7d 	beq	38e14 <McTerminal::displayRefreshFromMirrorHw()+0x3c>
   3901c:	e28baa61 	add	sl, fp, #397312	; 0x61000
   39020:	e3a04000 	mov	r4, #0
   39024:	e59a0b84 	ldr	r0, [sl, #2948]	; 0xb84
   39028:	ea000007 	b	3904c <McTerminal::displayRefreshFromMirrorHw()+0x274>
   3902c:	e5903000 	ldr	r3, [r0]
   39030:	e7dd1004 	ldrb	r1, [sp, r4]
   39034:	e593300c 	ldr	r3, [r3, #12]
   39038:	e2844001 	add	r4, r4, #1
   3903c:	e12fff33 	blx	r3
   39040:	e1550004 	cmp	r5, r4
   39044:	e59a0b84 	ldr	r0, [sl, #2948]	; 0xb84
   39048:	0affff73 	beq	38e1c <McTerminal::displayRefreshFromMirrorHw()+0x44>
   3904c:	e3500000 	cmp	r0, #0
   39050:	1afffff5 	bne	3902c <McTerminal::displayRefreshFromMirrorHw()+0x254>
   39054:	e2843001 	add	r3, r4, #1
   39058:	e1550003 	cmp	r5, r3
   3905c:	e2844002 	add	r4, r4, #2
   39060:	0affffe3 	beq	38ff4 <McTerminal::displayRefreshFromMirrorHw()+0x21c>
   39064:	e1550004 	cmp	r5, r4
   39068:	1afffff9 	bne	39054 <McTerminal::displayRefreshFromMirrorHw()+0x27c>
   3906c:	eaffffe0 	b	38ff4 <McTerminal::displayRefreshFromMirrorHw()+0x21c>
   39070:	e5953010 	ldr	r3, [r5, #16]
   39074:	e2899001 	add	r9, r9, #1
   39078:	e1530009 	cmp	r3, r9
   3907c:	8affff78 	bhi	38e64 <McTerminal::displayRefreshFromMirrorHw()+0x8c>
   39080:	e5da3b68 	ldrb	r3, [sl, #2920]	; 0xb68
   39084:	e3530000 	cmp	r3, #0
   39088:	1a00001e 	bne	39108 <McTerminal::displayRefreshFromMirrorHw()+0x330>
   3908c:	e59a5b84 	ldr	r5, [sl, #2948]	; 0xb84
   39090:	e3a02000 	mov	r2, #0
   39094:	e5d5301d 	ldrb	r3, [r5, #29]
   39098:	e5c5201c 	strb	r2, [r5, #28]
   3909c:	e1530002 	cmp	r3, r2
   390a0:	0affffac 	beq	38f58 <McTerminal::displayRefreshFromMirrorHw()+0x180>
   390a4:	e5da3b68 	ldrb	r3, [sl, #2920]	; 0xb68
   390a8:	e3530000 	cmp	r3, #0
   390ac:	1a000030 	bne	39174 <McTerminal::displayRefreshFromMirrorHw()+0x39c>
   390b0:	e3a03000 	mov	r3, #0
   390b4:	e5ca3b68 	strb	r3, [sl, #2920]	; 0xb68
   390b8:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   390bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   390c0:	e1d510d1 	ldrsb	r1, [r5, #1]
   390c4:	e1a00008 	mov	r0, r8
   390c8:	e12fff32 	blx	r2
   390cc:	e5983000 	ldr	r3, [r8]
   390d0:	eaffff8e 	b	38f10 <McTerminal::displayRefreshFromMirrorHw()+0x138>
   390d4:	e1d510d1 	ldrsb	r1, [r5, #1]
   390d8:	e1a00008 	mov	r0, r8
   390dc:	e12fff32 	blx	r2
   390e0:	e5983000 	ldr	r3, [r8]
   390e4:	eaffff69 	b	38e90 <McTerminal::displayRefreshFromMirrorHw()+0xb8>
   390e8:	e1d510d2 	ldrsb	r1, [r5, #2]
   390ec:	e1a00008 	mov	r0, r8
   390f0:	e12fff32 	blx	r2
   390f4:	e5983000 	ldr	r3, [r8]
   390f8:	eaffff60 	b	38e80 <McTerminal::displayRefreshFromMirrorHw()+0xa8>
   390fc:	e12fff33 	blx	r3
   39100:	e1a08000 	mov	r8, r0
   39104:	eaffff3c 	b	38dfc <McTerminal::displayRefreshFromMirrorHw()+0x24>
   39108:	e5983000 	ldr	r3, [r8]
   3910c:	e59f6134 	ldr	r6, [pc, #308]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   39110:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   39114:	e28aceb6 	add	ip, sl, #2912	; 0xb60
   39118:	e285e014 	add	lr, r5, #20
   3911c:	e28cc00c 	add	ip, ip, #12
   39120:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   39124:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   39128:	e595300c 	ldr	r3, [r5, #12]
   3912c:	e59a2b70 	ldr	r2, [sl, #2928]	; 0xb70
   39130:	e59a1b6c 	ldr	r1, [sl, #2924]	; 0xb6c
   39134:	e5957008 	ldr	r7, [r5, #8]
   39138:	e0231293 	mla	r3, r3, r2, r1
   3913c:	e1530007 	cmp	r3, r7
   39140:	35955004 	ldrcc	r5, [r5, #4]
   39144:	e59e0000 	ldr	r0, [lr]
   39148:	22855028 	addcs	r5, r5, #40	; 0x28
   3914c:	e58c0000 	str	r0, [ip]
   39150:	30855103 	addcc	r5, r5, r3, lsl #2
   39154:	e5d53000 	ldrb	r3, [r5]
   39158:	e1540006 	cmp	r4, r6
   3915c:	e58a3b7c 	str	r3, [sl, #2940]	; 0xb7c
   39160:	0affffc9 	beq	3908c <McTerminal::displayRefreshFromMirrorHw()+0x2b4>
   39164:	e59a3b78 	ldr	r3, [sl, #2936]	; 0xb78
   39168:	e1a00008 	mov	r0, r8
   3916c:	e12fff34 	blx	r4
   39170:	eaffffc5 	b	3908c <McTerminal::displayRefreshFromMirrorHw()+0x2b4>
   39174:	e5982000 	ldr	r2, [r8]
   39178:	e59f30c8 	ldr	r3, [pc, #200]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   3917c:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   39180:	e1540003 	cmp	r4, r3
   39184:	0affffc9 	beq	390b0 <McTerminal::displayRefreshFromMirrorHw()+0x2d8>
   39188:	e1a00008 	mov	r0, r8
   3918c:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   39190:	e59a2b70 	ldr	r2, [sl, #2928]	; 0xb70
   39194:	e59a1b6c 	ldr	r1, [sl, #2924]	; 0xb6c
   39198:	e12fff34 	blx	r4
   3919c:	eaffffc3 	b	390b0 <McTerminal::displayRefreshFromMirrorHw()+0x2d8>
   391a0:	e12fff33 	blx	r3
   391a4:	eaffff24 	b	38e3c <McTerminal::displayRefreshFromMirrorHw()+0x64>
   391a8:	e5983000 	ldr	r3, [r8]
   391ac:	e59f6094 	ldr	r6, [pc, #148]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   391b0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   391b4:	e1540006 	cmp	r4, r6
   391b8:	1a000010 	bne	39200 <McTerminal::displayRefreshFromMirrorHw()+0x428>
   391bc:	e59a5b84 	ldr	r5, [sl, #2948]	; 0xb84
   391c0:	e5953010 	ldr	r3, [r5, #16]
   391c4:	e3530000 	cmp	r3, #0
   391c8:	1affff24 	bne	38e60 <McTerminal::displayRefreshFromMirrorHw()+0x88>
   391cc:	eaffffd0 	b	39114 <McTerminal::displayRefreshFromMirrorHw()+0x33c>
   391d0:	e5982000 	ldr	r2, [r8]
   391d4:	e59f306c 	ldr	r3, [pc, #108]	; 39248 <McTerminal::displayRefreshFromMirrorHw()+0x470>
   391d8:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   391dc:	e1540003 	cmp	r4, r3
   391e0:	0affff7f 	beq	38fe4 <McTerminal::displayRefreshFromMirrorHw()+0x20c>
   391e4:	e1a00008 	mov	r0, r8
   391e8:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   391ec:	e59a2b70 	ldr	r2, [sl, #2928]	; 0xb70
   391f0:	e59a1b6c 	ldr	r1, [sl, #2924]	; 0xb6c
   391f4:	e12fff34 	blx	r4
   391f8:	e5daeb68 	ldrb	lr, [sl, #2920]	; 0xb68
   391fc:	eaffff78 	b	38fe4 <McTerminal::displayRefreshFromMirrorHw()+0x20c>
   39200:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   39204:	e59a2b70 	ldr	r2, [sl, #2928]	; 0xb70
   39208:	e59a1b6c 	ldr	r1, [sl, #2924]	; 0xb6c
   3920c:	e1a00008 	mov	r0, r8
   39210:	e12fff34 	blx	r4
   39214:	e59a5b84 	ldr	r5, [sl, #2948]	; 0xb84
   39218:	e5953010 	ldr	r3, [r5, #16]
   3921c:	e3530000 	cmp	r3, #0
   39220:	1affff0e 	bne	38e60 <McTerminal::displayRefreshFromMirrorHw()+0x88>
   39224:	eaffff95 	b	39080 <McTerminal::displayRefreshFromMirrorHw()+0x2a8>
   39228:	e1a00008 	mov	r0, r8
   3922c:	e59a3b78 	ldr	r3, [sl, #2936]	; 0xb78
   39230:	e12fff34 	blx	r4
   39234:	e5daeb68 	ldrb	lr, [sl, #2920]	; 0xb68
   39238:	eaffff69 	b	38fe4 <McTerminal::displayRefreshFromMirrorHw()+0x20c>
   3923c:	000389dc 	.word	0x000389dc
   39240:	00039754 	.word	0x00039754
   39244:	0003974c 	.word	0x0003974c
   39248:	00039750 	.word	0x00039750
   3924c:	00039748 	.word	0x00039748

00039250 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   39250:	e92d4070 	push	{r4, r5, r6, lr}
   39254:	e1a04001 	mov	r4, r1
   39258:	e1a05000 	mov	r5, r0
   3925c:	e59f10b4 	ldr	r1, [pc, #180]	; 39318 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc8>
   39260:	e59f00b4 	ldr	r0, [pc, #180]	; 3931c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39264:	ebffc272 	bl	29c34 <strcpy>
   39268:	e5d43000 	ldrb	r3, [r4]
   3926c:	e353007f 	cmp	r3, #127	; 0x7f
   39270:	da000009 	ble	3929c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   39274:	e5d42001 	ldrb	r2, [r4, #1]
   39278:	e3520000 	cmp	r2, #0
   3927c:	1a00001d 	bne	392f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   39280:	e3e03000 	mvn	r3, #0
   39284:	e59f1090 	ldr	r1, [pc, #144]	; 3931c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39288:	e3150011 	tst	r5, #17
   3928c:	1203301f 	andne	r3, r3, #31
   39290:	e5c13000 	strb	r3, [r1]
   39294:	e59f0080 	ldr	r0, [pc, #128]	; 3931c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39298:	e8bd8070 	pop	{r4, r5, r6, pc}
   3929c:	e3530001 	cmp	r3, #1
   392a0:	da00001a 	ble	39310 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   392a4:	e3150022 	tst	r5, #34	; 0x22
   392a8:	13a00001 	movne	r0, #1
   392ac:	03a00000 	moveq	r0, #0
   392b0:	e3150044 	tst	r5, #68	; 0x44
   392b4:	03a02000 	moveq	r2, #0
   392b8:	13a02002 	movne	r2, #2
   392bc:	e59f1058 	ldr	r1, [pc, #88]	; 3931c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   392c0:	e0822000 	add	r2, r2, r0
   392c4:	e591c004 	ldr	ip, [r1, #4]
   392c8:	e59f0050 	ldr	r0, [pc, #80]	; 39320 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd0>
   392cc:	e083338c 	add	r3, r3, ip, lsl #7
   392d0:	e0823103 	add	r3, r2, r3, lsl #2
   392d4:	e1a03083 	lsl	r3, r3, #1
   392d8:	e19030b3 	ldrh	r3, [r0, r3]
   392dc:	e2432c01 	sub	r2, r3, #256	; 0x100
   392e0:	e3520032 	cmp	r2, #50	; 0x32
   392e4:	86af3073 	sxtbhi	r3, r3
   392e8:	8affffe6 	bhi	39288 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   392ec:	e59f3030 	ldr	r3, [pc, #48]	; 39324 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd4>
   392f0:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   392f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   392f8:	e3520001 	cmp	r2, #1
   392fc:	e1a03002 	mov	r3, r2
   39300:	0a000002 	beq	39310 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   39304:	e352007f 	cmp	r2, #127	; 0x7f
   39308:	caffffdc 	bgt	39280 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   3930c:	eaffffe4 	b	392a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x54>
   39310:	e59f0010 	ldr	r0, [pc, #16]	; 39328 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd8>
   39314:	e8bd8070 	pop	{r4, r5, r6, pc}
   39318:	000406f8 	.word	0x000406f8
   3931c:	00053020 	.word	0x00053020
   39320:	0004e838 	.word	0x0004e838
   39324:	00050038 	.word	0x00050038
   39328:	00049280 	.word	0x00049280

0003932c <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   3932c:	e1a03001 	mov	r3, r1
   39330:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39334:	e1a01002 	mov	r1, r2
   39338:	e1a07000 	mov	r7, r0
   3933c:	e1a00003 	mov	r0, r3
   39340:	ebffffc2 	bl	39250 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   39344:	e1a06000 	mov	r6, r0
   39348:	ebffc17b 	bl	2993c <strlen>
   3934c:	e3500000 	cmp	r0, #0
   39350:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   39354:	e2874a61 	add	r4, r7, #397312	; 0x61000
   39358:	e5d43b80 	ldrb	r3, [r4, #2944]	; 0xb80
   3935c:	e3530000 	cmp	r3, #0
   39360:	0a00002e 	beq	39420 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf4>
   39364:	e3a05000 	mov	r5, #0
   39368:	e3e0a000 	mvn	sl, #0
   3936c:	e1a09005 	mov	r9, r5
   39370:	e59f80b8 	ldr	r8, [pc, #184]	; 39430 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x104>
   39374:	ea000011 	b	393c0 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x94>
   39378:	e2430001 	sub	r0, r3, #1
   3937c:	e3520000 	cmp	r2, #0
   39380:	01500001 	cmpeq	r0, r1
   39384:	0a00000c 	beq	393bc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39388:	e5942b88 	ldr	r2, [r4, #2952]	; 0xb88
   3938c:	e7d61005 	ldrb	r1, [r6, r5]
   39390:	e0872002 	add	r2, r7, r2
   39394:	e7c21008 	strb	r1, [r2, r8]
   39398:	e5942b88 	ldr	r2, [r4, #2952]	; 0xb88
   3939c:	e2822001 	add	r2, r2, #1
   393a0:	e5842b88 	str	r2, [r4, #2952]	; 0xb88
   393a4:	e5942b88 	ldr	r2, [r4, #2952]	; 0xb88
   393a8:	e1520003 	cmp	r2, r3
   393ac:	e5d43b83 	ldrb	r3, [r4, #2947]	; 0xb83
   393b0:	25849b88 	strcs	r9, [r4, #2952]	; 0xb88
   393b4:	e3530000 	cmp	r3, #0
   393b8:	1a000014 	bne	39410 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe4>
   393bc:	e2855001 	add	r5, r5, #1
   393c0:	e1a00006 	mov	r0, r6
   393c4:	ebffc15c 	bl	2993c <strlen>
   393c8:	e1550000 	cmp	r5, r0
   393cc:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   393d0:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   393d4:	e3530000 	cmp	r3, #0
   393d8:	0afffff7 	beq	393bc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   393dc:	e5941b88 	ldr	r1, [r4, #2952]	; 0xb88
   393e0:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   393e4:	e1510002 	cmp	r1, r2
   393e8:	0affffe6 	beq	39388 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   393ec:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   393f0:	e5941b88 	ldr	r1, [r4, #2952]	; 0xb88
   393f4:	e1520001 	cmp	r2, r1
   393f8:	e5941b88 	ldr	r1, [r4, #2952]	; 0xb88
   393fc:	3affffdd 	bcc	39378 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x4c>
   39400:	e0422001 	sub	r2, r2, r1
   39404:	e3520001 	cmp	r2, #1
   39408:	8affffde 	bhi	39388 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   3940c:	eaffffea 	b	393bc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39410:	e1a0100a 	mov	r1, sl
   39414:	e5970004 	ldr	r0, [r7, #4]
   39418:	ebfffa4c 	bl	37d50 <McManager::targetIrq(int)>
   3941c:	eaffffe6 	b	393bc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39420:	e1a01006 	mov	r1, r6
   39424:	e5970004 	ldr	r0, [r7, #4]
   39428:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3942c:	eafffb74 	b	38204 <McManager::sendKeyStrToTargetStatic(char const*)>
   39430:	00061b94 	.word	0x00061b94

00039434 <McTerminal::invalidateScreenCaches(bool)>:
   39434:	e3510000 	cmp	r1, #0
   39438:	0a000007 	beq	3945c <McTerminal::invalidateScreenCaches(bool)+0x28>
   3943c:	e1a03000 	mov	r3, r0
   39440:	e3e01000 	mvn	r1, #0
   39444:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   39448:	e2822d05 	add	r2, r2, #320	; 0x140
   3944c:	e5c310e3 	strb	r1, [r3, #227]	; 0xe3
   39450:	e2833004 	add	r3, r3, #4
   39454:	e1530002 	cmp	r3, r2
   39458:	1afffffb 	bne	3944c <McTerminal::invalidateScreenCaches(bool)+0x18>
   3945c:	e3e01000 	mvn	r1, #0
   39460:	e59f3018 	ldr	r3, [pc, #24]	; 39480 <McTerminal::invalidateScreenCaches(bool)+0x4c>
   39464:	e59f2018 	ldr	r2, [pc, #24]	; 39484 <McTerminal::invalidateScreenCaches(bool)+0x50>
   39468:	e0803003 	add	r3, r0, r3
   3946c:	e0802002 	add	r2, r0, r2
   39470:	e4c31004 	strb	r1, [r3], #4
   39474:	e1530002 	cmp	r3, r2
   39478:	1afffffc 	bne	39470 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   3947c:	e12fff1e 	bx	lr
   39480:	00030e23 	.word	0x00030e23
   39484:	00061b63 	.word	0x00061b63

00039488 <McTerminal::setupMachine(char const*, char const*)>:
   39488:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3948c:	e1a04000 	mov	r4, r0
   39490:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
   39494:	e1a05002 	mov	r5, r2
   39498:	eb000686 	bl	3aeb8 <McBase::setupMachine(char const*, char const*)>
   3949c:	e3a01001 	mov	r1, #1
   394a0:	e3a02000 	mov	r2, #0
   394a4:	e5943000 	ldr	r3, [r4]
   394a8:	e59f7138 	ldr	r7, [pc, #312]	; 395e8 <McTerminal::setupMachine(char const*, char const*)+0x160>
   394ac:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   394b0:	e2846a61 	add	r6, r4, #397312	; 0x61000
   394b4:	e1530007 	cmp	r3, r7
   394b8:	e5c62b83 	strb	r2, [r6, #2947]	; 0xb83
   394bc:	e5c61b80 	strb	r1, [r6, #2944]	; 0xb80
   394c0:	e1a08000 	mov	r8, r0
   394c4:	05c410a4 	strbeq	r1, [r4, #164]	; 0xa4
   394c8:	1a000043 	bne	395dc <McTerminal::setupMachine(char const*, char const*)+0x154>
   394cc:	e28d2008 	add	r2, sp, #8
   394d0:	e3a03064 	mov	r3, #100	; 0x64
   394d4:	e1a01005 	mov	r1, r5
   394d8:	e59f010c 	ldr	r0, [pc, #268]	; 395ec <McTerminal::setupMachine(char const*, char const*)+0x164>
   394dc:	ebffd1b3 	bl	2dbb0 <jsonGetValueForKey>
   394e0:	e3500000 	cmp	r0, #0
   394e4:	1a000019 	bne	39550 <McTerminal::setupMachine(char const*, char const*)+0xc8>
   394e8:	e1a01005 	mov	r1, r5
   394ec:	e28d206c 	add	r2, sp, #108	; 0x6c
   394f0:	e3a03064 	mov	r3, #100	; 0x64
   394f4:	e59f00f4 	ldr	r0, [pc, #244]	; 395f0 <McTerminal::setupMachine(char const*, char const*)+0x168>
   394f8:	ebffd1ac 	bl	2dbb0 <jsonGetValueForKey>
   394fc:	e3500000 	cmp	r0, #0
   39500:	e59f90ec 	ldr	r9, [pc, #236]	; 395f4 <McTerminal::setupMachine(char const*, char const*)+0x16c>
   39504:	1a000023 	bne	39598 <McTerminal::setupMachine(char const*, char const*)+0x110>
   39508:	e59fa0e8 	ldr	sl, [pc, #232]	; 395f8 <McTerminal::setupMachine(char const*, char const*)+0x170>
   3950c:	ebffb3df 	bl	26490 <CLogger::Get()>
   39510:	e5d6cb80 	ldrb	ip, [r6, #2944]	; 0xb80
   39514:	e59f10e0 	ldr	r1, [pc, #224]	; 395fc <McTerminal::setupMachine(char const*, char const*)+0x174>
   39518:	e35c0000 	cmp	ip, #0
   3951c:	e59f30dc 	ldr	r3, [pc, #220]	; 39600 <McTerminal::setupMachine(char const*, char const*)+0x178>
   39520:	01a03001 	moveq	r3, r1
   39524:	e59a2004 	ldr	r2, [sl, #4]
   39528:	e58d3000 	str	r3, [sp]
   3952c:	e7992102 	ldr	r2, [r9, r2, lsl #2]
   39530:	e59f30cc 	ldr	r3, [pc, #204]	; 39604 <McTerminal::setupMachine(char const*, char const*)+0x17c>
   39534:	e58d2004 	str	r2, [sp, #4]
   39538:	e59f10c8 	ldr	r1, [pc, #200]	; 39608 <McTerminal::setupMachine(char const*, char const*)+0x180>
   3953c:	e3a02004 	mov	r2, #4
   39540:	ebffb30f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39544:	e1a00008 	mov	r0, r8
   39548:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   3954c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39550:	e28d0008 	add	r0, sp, #8
   39554:	e3a0200a 	mov	r2, #10
   39558:	e3a01000 	mov	r1, #0
   3955c:	ebffc243 	bl	29e70 <strtoul>
   39560:	e3500000 	cmp	r0, #0
   39564:	13a03001 	movne	r3, #1
   39568:	03a03000 	moveq	r3, #0
   3956c:	e5c63b80 	strb	r3, [r6, #2944]	; 0xb80
   39570:	1affffdc 	bne	394e8 <McTerminal::setupMachine(char const*, char const*)+0x60>
   39574:	e5943000 	ldr	r3, [r4]
   39578:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   3957c:	e1530007 	cmp	r3, r7
   39580:	05c400a4 	strbeq	r0, [r4, #164]	; 0xa4
   39584:	0affffd7 	beq	394e8 <McTerminal::setupMachine(char const*, char const*)+0x60>
   39588:	e1a01000 	mov	r1, r0
   3958c:	e1a00004 	mov	r0, r4
   39590:	e12fff33 	blx	r3
   39594:	eaffffd3 	b	394e8 <McTerminal::setupMachine(char const*, char const*)+0x60>
   39598:	e59fa058 	ldr	sl, [pc, #88]	; 395f8 <McTerminal::setupMachine(char const*, char const*)+0x170>
   3959c:	e3a04000 	mov	r4, #0
   395a0:	e1a05009 	mov	r5, r9
   395a4:	e28a7004 	add	r7, sl, #4
   395a8:	ea000000 	b	395b0 <McTerminal::setupMachine(char const*, char const*)+0x128>
   395ac:	e2844001 	add	r4, r4, #1
   395b0:	e1a00007 	mov	r0, r7
   395b4:	eb001c1a 	bl	40624 <KeyConversion::getNumTypes()>
   395b8:	e1500004 	cmp	r0, r4
   395bc:	9affffd2 	bls	3950c <McTerminal::setupMachine(char const*, char const*)+0x84>
   395c0:	e4951004 	ldr	r1, [r5], #4
   395c4:	e28d006c 	add	r0, sp, #108	; 0x6c
   395c8:	ebffc100 	bl	299d0 <strcasecmp>
   395cc:	e3500000 	cmp	r0, #0
   395d0:	1afffff5 	bne	395ac <McTerminal::setupMachine(char const*, char const*)+0x124>
   395d4:	e58a4004 	str	r4, [sl, #4]
   395d8:	eaffffcb 	b	3950c <McTerminal::setupMachine(char const*, char const*)+0x84>
   395dc:	e1a00004 	mov	r0, r4
   395e0:	e12fff33 	blx	r3
   395e4:	eaffffb8 	b	394cc <McTerminal::setupMachine(char const*, char const*)+0x44>
   395e8:	000389c4 	.word	0x000389c4
   395ec:	00048cd0 	.word	0x00048cd0
   395f0:	00048cdc 	.word	0x00048cdc
   395f4:	00050104 	.word	0x00050104
   395f8:	00053020 	.word	0x00053020
   395fc:	000481a4 	.word	0x000481a4
   39600:	000481a0 	.word	0x000481a0
   39604:	00048cec 	.word	0x00048cec
   39608:	00048cc8 	.word	0x00048cc8

0003960c <McTerminal::McTerminal(McManager&)>:
   3960c:	e92d4070 	push	{r4, r5, r6, lr}
   39610:	e1a04000 	mov	r4, r0
   39614:	e3a03002 	mov	r3, #2
   39618:	e59f2110 	ldr	r2, [pc, #272]	; 39730 <McTerminal::McTerminal(McManager&)+0x124>
   3961c:	eb0006c8 	bl	3b144 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)>
   39620:	e1a03004 	mov	r3, r4
   39624:	e3a0c020 	mov	ip, #32
   39628:	e3a0000f 	mov	r0, #15
   3962c:	e3a02000 	mov	r2, #0
   39630:	e59fe0fc 	ldr	lr, [pc, #252]	; 39734 <McTerminal::McTerminal(McManager&)+0x128>
   39634:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   39638:	e483e0e0 	str	lr, [r3], #224	; 0xe0
   3963c:	e2811e22 	add	r1, r1, #544	; 0x220
   39640:	e5c3c000 	strb	ip, [r3]
   39644:	e5c30001 	strb	r0, [r3, #1]
   39648:	e5c32002 	strb	r2, [r3, #2]
   3964c:	e5c32003 	strb	r2, [r3, #3]
   39650:	e2833004 	add	r3, r3, #4
   39654:	e1530001 	cmp	r3, r1
   39658:	1afffff8 	bne	39640 <McTerminal::McTerminal(McManager&)+0x34>
   3965c:	e3a01020 	mov	r1, #32
   39660:	e3a0c00f 	mov	ip, #15
   39664:	e3a02000 	mov	r2, #0
   39668:	e2845a61 	add	r5, r4, #397312	; 0x61000
   3966c:	e2850eb6 	add	r0, r5, #2912	; 0xb60
   39670:	e5c31000 	strb	r1, [r3]
   39674:	e5c3c001 	strb	ip, [r3, #1]
   39678:	e5c32002 	strb	r2, [r3, #2]
   3967c:	e5c32003 	strb	r2, [r3, #3]
   39680:	e2833004 	add	r3, r3, #4
   39684:	e1530000 	cmp	r3, r0
   39688:	1afffff8 	bne	39670 <McTerminal::McTerminal(McManager&)+0x64>
   3968c:	e3a0005f 	mov	r0, #95	; 0x5f
   39690:	e59f30a0 	ldr	r3, [pc, #160]	; 39738 <McTerminal::McTerminal(McManager&)+0x12c>
   39694:	e5852b88 	str	r2, [r5, #2952]	; 0xb88
   39698:	e5853b90 	str	r3, [r5, #2960]	; 0xb90
   3969c:	e5852b6c 	str	r2, [r5, #2924]	; 0xb6c
   396a0:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   396a4:	e5c52b74 	strb	r2, [r5, #2932]	; 0xb74
   396a8:	e5c52b75 	strb	r2, [r5, #2933]	; 0xb75
   396ac:	e5c52b76 	strb	r2, [r5, #2934]	; 0xb76
   396b0:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   396b4:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   396b8:	e5850b78 	str	r0, [r5, #2936]	; 0xb78
   396bc:	e59f0078 	ldr	r0, [pc, #120]	; 3973c <McTerminal::McTerminal(McManager&)+0x130>
   396c0:	ebffc49b 	bl	2a934 <operator new(unsigned int)>
   396c4:	e1a06000 	mov	r6, r0
   396c8:	eb0006df 	bl	3b24c <TermAnsi::TermAnsi()>
   396cc:	e3a02019 	mov	r2, #25
   396d0:	e3a01050 	mov	r1, #80	; 0x50
   396d4:	e5856b84 	str	r6, [r5, #2948]	; 0xb84
   396d8:	e1a00006 	mov	r0, r6
   396dc:	eb000e4a 	bl	3d00c <TermAnsi::init(unsigned long, unsigned long)>
   396e0:	e3e01000 	mvn	r1, #0
   396e4:	e59f3054 	ldr	r3, [pc, #84]	; 39740 <McTerminal::McTerminal(McManager&)+0x134>
   396e8:	e59f2054 	ldr	r2, [pc, #84]	; 39744 <McTerminal::McTerminal(McManager&)+0x138>
   396ec:	e0843003 	add	r3, r4, r3
   396f0:	e0842002 	add	r2, r4, r2
   396f4:	e4c31004 	strb	r1, [r3], #4
   396f8:	e1530002 	cmp	r3, r2
   396fc:	1afffffc 	bne	396f4 <McTerminal::McTerminal(McManager&)+0xe8>
   39700:	e3a03000 	mov	r3, #0
   39704:	e3a02001 	mov	r2, #1
   39708:	e3a01f7d 	mov	r1, #500	; 0x1f4
   3970c:	e1a00004 	mov	r0, r4
   39710:	e5853b60 	str	r3, [r5, #2912]	; 0xb60
   39714:	e5c53b68 	strb	r3, [r5, #2920]	; 0xb68
   39718:	e5c53b83 	strb	r3, [r5, #2947]	; 0xb83
   3971c:	e5c53b82 	strb	r3, [r5, #2946]	; 0xb82
   39720:	e5851b64 	str	r1, [r5, #2916]	; 0xb64
   39724:	e5c52b80 	strb	r2, [r5, #2944]	; 0xb80
   39728:	e5c52b81 	strb	r2, [r5, #2945]	; 0xb81
   3972c:	e8bd8070 	pop	{r4, r5, r6, pc}
   39730:	00049e40 	.word	0x00049e40
   39734:	00048c58 	.word	0x00048c58
   39738:	00001388 	.word	0x00001388
   3973c:	000008ac 	.word	0x000008ac
   39740:	00030e23 	.word	0x00030e23
   39744:	00061b63 	.word	0x00061b63

00039748 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   39748:	e12fff1e 	bx	lr

0003974c <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   3974c:	e12fff1e 	bx	lr

00039750 <DisplayBase::write(int, int, int)>:
   39750:	e12fff1e 	bx	lr

00039754 <TermEmu::hasChanged()>:
   39754:	e5d0001c 	ldrb	r0, [r0, #28]
   39758:	e12fff1e 	bx	lr

0003975c <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   3975c:	e3a02000 	mov	r2, #0
   39760:	e59f3004 	ldr	r3, [pc, #4]	; 3976c <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   39764:	e5832004 	str	r2, [r3, #4]
   39768:	e12fff1e 	bx	lr
   3976c:	00053020 	.word	0x00053020

00039770 <McTRS80::enableMachine()>:
   39770:	e3a03000 	mov	r3, #0
   39774:	e5c034e0 	strb	r3, [r0, #1248]	; 0x4e0
   39778:	e5c035e1 	strb	r3, [r0, #1505]	; 0x5e1
   3977c:	e12fff1e 	bx	lr

00039780 <McTRS80::disableMachine()>:
   39780:	e12fff1e 	bx	lr

00039784 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   39784:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   39788:	e24dd00c 	sub	sp, sp, #12
   3978c:	e1a0300d 	mov	r3, sp
   39790:	e3a0e000 	mov	lr, #0
   39794:	e28d4008 	add	r4, sp, #8
   39798:	e4c3e001 	strb	lr, [r3], #1
   3979c:	e1530004 	cmp	r3, r4
   397a0:	1afffffc 	bne	39798 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x14>
   397a4:	e201c002 	and	ip, r1, #2
   397a8:	e3a04000 	mov	r4, #0
   397ac:	e2421001 	sub	r1, r2, #1
   397b0:	e3a0e001 	mov	lr, #1
   397b4:	e3e0507f 	mvn	r5, #127	; 0x7f
   397b8:	e2822005 	add	r2, r2, #5
   397bc:	ea000008 	b	397e4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   397c0:	e2433003 	sub	r3, r3, #3
   397c4:	e28d6008 	add	r6, sp, #8
   397c8:	e08671c3 	add	r7, r6, r3, asr #3
   397cc:	e5576008 	ldrb	r6, [r7, #-8]
   397d0:	e2033007 	and	r3, r3, #7
   397d4:	e186331e 	orr	r3, r6, lr, lsl r3
   397d8:	e5473008 	strb	r3, [r7, #-8]
   397dc:	e1510002 	cmp	r1, r2
   397e0:	0a000012 	beq	39830 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xac>
   397e4:	e5f13001 	ldrb	r3, [r1, #1]!
   397e8:	e2436004 	sub	r6, r3, #4
   397ec:	e3560019 	cmp	r6, #25
   397f0:	9afffff2 	bls	397c0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c>
   397f4:	e353001f 	cmp	r3, #31
   397f8:	0a000032 	beq	398c8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x144>
   397fc:	e3530023 	cmp	r3, #35	; 0x23
   39800:	0a000025 	beq	3989c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x118>
   39804:	e3530024 	cmp	r3, #36	; 0x24
   39808:	0a000035 	beq	398e4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x160>
   3980c:	e3530025 	cmp	r3, #37	; 0x25
   39810:	1a000039 	bne	398fc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x178>
   39814:	e35c0000 	cmp	ip, #0
   39818:	0a000022 	beq	398a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   3981c:	e5dd3005 	ldrb	r3, [sp, #5]
   39820:	e1510002 	cmp	r1, r2
   39824:	e3833004 	orr	r3, r3, #4
   39828:	e5cd3005 	strb	r3, [sp, #5]
   3982c:	1affffec 	bne	397e4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   39830:	e3a02000 	mov	r2, #0
   39834:	e3a0c001 	mov	ip, #1
   39838:	e1a05002 	mov	r5, r2
   3983c:	e3540000 	cmp	r4, #0
   39840:	15dd3007 	ldrbne	r3, [sp, #7]
   39844:	e2804e4e 	add	r4, r0, #1248	; 0x4e0
   39848:	13c33003 	bicne	r3, r3, #3
   3984c:	15cd3007 	strbne	r3, [sp, #7]
   39850:	e084400c 	add	r4, r4, ip
   39854:	e1a01005 	mov	r1, r5
   39858:	e3a03000 	mov	r3, #0
   3985c:	e012e31c 	ands	lr, r2, ip, lsl r3
   39860:	17dde003 	ldrbne	lr, [sp, r3]
   39864:	e2833001 	add	r3, r3, #1
   39868:	1181100e 	orrne	r1, r1, lr
   3986c:	e3530008 	cmp	r3, #8
   39870:	1afffff9 	bne	3985c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd8>
   39874:	e5d43000 	ldrb	r3, [r4]
   39878:	e2822001 	add	r2, r2, #1
   3987c:	e1530001 	cmp	r3, r1
   39880:	15c41000 	strbne	r1, [r4]
   39884:	15c0c5e1 	strbne	ip, [r0, #1505]	; 0x5e1
   39888:	e3520c01 	cmp	r2, #256	; 0x100
   3988c:	e2844001 	add	r4, r4, #1
   39890:	1affffef 	bne	39854 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd0>
   39894:	e28dd00c 	add	sp, sp, #12
   39898:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3989c:	e35c0000 	cmp	ip, #0
   398a0:	11a0400e 	movne	r4, lr
   398a4:	1affffcc 	bne	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   398a8:	e243301d 	sub	r3, r3, #29
   398ac:	e28d6008 	add	r6, sp, #8
   398b0:	e08661c3 	add	r6, r6, r3, asr #3
   398b4:	e5567004 	ldrb	r7, [r6, #-4]
   398b8:	e2033007 	and	r3, r3, #7
   398bc:	e187331e 	orr	r3, r7, lr, lsl r3
   398c0:	e5463004 	strb	r3, [r6, #-4]
   398c4:	eaffffc4 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   398c8:	e35c0000 	cmp	ip, #0
   398cc:	0afffff5 	beq	398a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   398d0:	e5dd3000 	ldrb	r3, [sp]
   398d4:	e1a0400e 	mov	r4, lr
   398d8:	e3833001 	orr	r3, r3, #1
   398dc:	e5cd3000 	strb	r3, [sp]
   398e0:	eaffffbd 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   398e4:	e35c0000 	cmp	ip, #0
   398e8:	0affffee 	beq	398a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   398ec:	e5dd3004 	ldrb	r3, [sp, #4]
   398f0:	e3833040 	orr	r3, r3, #64	; 0x40
   398f4:	e5cd3004 	strb	r3, [sp, #4]
   398f8:	eaffffb7 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   398fc:	e3530026 	cmp	r3, #38	; 0x26
   39900:	1a000008 	bne	39928 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1a4>
   39904:	e35c0000 	cmp	ip, #0
   39908:	0affffe6 	beq	398a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   3990c:	e5dd6005 	ldrb	r6, [sp, #5]
   39910:	e5dd3007 	ldrb	r3, [sp, #7]
   39914:	e3866001 	orr	r6, r6, #1
   39918:	e3833001 	orr	r3, r3, #1
   3991c:	e5cd6005 	strb	r6, [sp, #5]
   39920:	e5cd3007 	strb	r3, [sp, #7]
   39924:	eaffffac 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39928:	e3530027 	cmp	r3, #39	; 0x27
   3992c:	1a00000c 	bne	39964 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1e0>
   39930:	e35c0000 	cmp	ip, #0
   39934:	0a000006 	beq	39954 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1d0>
   39938:	e5dd6005 	ldrb	r6, [sp, #5]
   3993c:	e5dd3007 	ldrb	r3, [sp, #7]
   39940:	e3866002 	orr	r6, r6, #2
   39944:	e3833001 	orr	r3, r3, #1
   39948:	e5cd6005 	strb	r6, [sp, #5]
   3994c:	e5cd3007 	strb	r3, [sp, #7]
   39950:	eaffffa1 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39954:	e5dd3004 	ldrb	r3, [sp, #4]
   39958:	e3833001 	orr	r3, r3, #1
   3995c:	e5cd3004 	strb	r3, [sp, #4]
   39960:	eaffff9d 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39964:	e243601e 	sub	r6, r3, #30
   39968:	e3560008 	cmp	r6, #8
   3996c:	9affffcd 	bls	398a8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   39970:	e3530033 	cmp	r3, #51	; 0x33
   39974:	0a000027 	beq	39a18 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x294>
   39978:	e3530034 	cmp	r3, #52	; 0x34
   3997c:	0a000034 	beq	39a54 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2d0>
   39980:	e3530036 	cmp	r3, #54	; 0x36
   39984:	0a00002e 	beq	39a44 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2c0>
   39988:	e3530037 	cmp	r3, #55	; 0x37
   3998c:	0a000028 	beq	39a34 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2b0>
   39990:	e353002e 	cmp	r3, #46	; 0x2e
   39994:	0a000037 	beq	39a78 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2f4>
   39998:	e353002d 	cmp	r3, #45	; 0x2d
   3999c:	0a00004a 	beq	39acc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   399a0:	e3530038 	cmp	r3, #56	; 0x38
   399a4:	0a000044 	beq	39abc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x338>
   399a8:	e3530028 	cmp	r3, #40	; 0x28
   399ac:	0a00003e 	beq	39aac <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x328>
   399b0:	e353002a 	cmp	r3, #42	; 0x2a
   399b4:	0a000038 	beq	39a9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   399b8:	e3530029 	cmp	r3, #41	; 0x29
   399bc:	0a000064 	beq	39b54 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d0>
   399c0:	e3530052 	cmp	r3, #82	; 0x52
   399c4:	0a00005e 	beq	39b44 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c0>
   399c8:	e3530051 	cmp	r3, #81	; 0x51
   399cc:	0a000058 	beq	39b34 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b0>
   399d0:	e3530050 	cmp	r3, #80	; 0x50
   399d4:	0a000030 	beq	39a9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   399d8:	e353004f 	cmp	r3, #79	; 0x4f
   399dc:	0a000050 	beq	39b24 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a0>
   399e0:	e353002c 	cmp	r3, #44	; 0x2c
   399e4:	0a00004a 	beq	39b14 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x390>
   399e8:	e353003a 	cmp	r3, #58	; 0x3a
   399ec:	0a000044 	beq	39b04 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x380>
   399f0:	e35300e1 	cmp	r3, #225	; 0xe1
   399f4:	0a00003e 	beq	39af4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x370>
   399f8:	e35300e5 	cmp	r3, #229	; 0xe5
   399fc:	0a000038 	beq	39ae4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x360>
   39a00:	e20330fb 	and	r3, r3, #251	; 0xfb
   39a04:	e35300e0 	cmp	r3, #224	; 0xe0
   39a08:	05dd3007 	ldrbeq	r3, [sp, #7]
   39a0c:	03833010 	orreq	r3, r3, #16
   39a10:	05cd3007 	strbeq	r3, [sp, #7]
   39a14:	eaffff70 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a18:	e5dd3005 	ldrb	r3, [sp, #5]
   39a1c:	e35c0000 	cmp	ip, #0
   39a20:	03833008 	orreq	r3, r3, #8
   39a24:	13833004 	orrne	r3, r3, #4
   39a28:	e1a0400e 	mov	r4, lr
   39a2c:	e5cd3005 	strb	r3, [sp, #5]
   39a30:	eaffff69 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a34:	e5dd3005 	ldrb	r3, [sp, #5]
   39a38:	e3833040 	orr	r3, r3, #64	; 0x40
   39a3c:	e5cd3005 	strb	r3, [sp, #5]
   39a40:	eaffff65 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a44:	e5dd3005 	ldrb	r3, [sp, #5]
   39a48:	e3833010 	orr	r3, r3, #16
   39a4c:	e5cd3005 	strb	r3, [sp, #5]
   39a50:	eaffff61 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a54:	e35c0000 	cmp	ip, #0
   39a58:	0affff5f 	beq	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a5c:	e5dd6004 	ldrb	r6, [sp, #4]
   39a60:	e5dd3007 	ldrb	r3, [sp, #7]
   39a64:	e3866004 	orr	r6, r6, #4
   39a68:	e3833001 	orr	r3, r3, #1
   39a6c:	e5cd6004 	strb	r6, [sp, #4]
   39a70:	e5cd3007 	strb	r3, [sp, #7]
   39a74:	eaffff58 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a78:	e5dd6005 	ldrb	r6, [sp, #5]
   39a7c:	e5dd3007 	ldrb	r3, [sp, #7]
   39a80:	e35c0000 	cmp	ip, #0
   39a84:	03866020 	orreq	r6, r6, #32
   39a88:	13866008 	orrne	r6, r6, #8
   39a8c:	e3833001 	orr	r3, r3, #1
   39a90:	e5cd6005 	strb	r6, [sp, #5]
   39a94:	e5cd3007 	strb	r3, [sp, #7]
   39a98:	eaffff4f 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39a9c:	e5dd3006 	ldrb	r3, [sp, #6]
   39aa0:	e3833020 	orr	r3, r3, #32
   39aa4:	e5cd3006 	strb	r3, [sp, #6]
   39aa8:	eaffff4b 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39aac:	e5dd3006 	ldrb	r3, [sp, #6]
   39ab0:	e3833001 	orr	r3, r3, #1
   39ab4:	e5cd3006 	strb	r3, [sp, #6]
   39ab8:	eaffff47 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39abc:	e5dd3005 	ldrb	r3, [sp, #5]
   39ac0:	e1833005 	orr	r3, r3, r5
   39ac4:	e5cd3005 	strb	r3, [sp, #5]
   39ac8:	eaffff43 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39acc:	e35c0000 	cmp	ip, #0
   39ad0:	05dd3005 	ldrbeq	r3, [sp, #5]
   39ad4:	01a0400e 	moveq	r4, lr
   39ad8:	03833020 	orreq	r3, r3, #32
   39adc:	05cd3005 	strbeq	r3, [sp, #5]
   39ae0:	eaffff3d 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39ae4:	e5dd3007 	ldrb	r3, [sp, #7]
   39ae8:	e3833002 	orr	r3, r3, #2
   39aec:	e5cd3007 	strb	r3, [sp, #7]
   39af0:	eaffff39 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39af4:	e5dd3007 	ldrb	r3, [sp, #7]
   39af8:	e3833001 	orr	r3, r3, #1
   39afc:	e5cd3007 	strb	r3, [sp, #7]
   39b00:	eaffff35 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b04:	e5dd3006 	ldrb	r3, [sp, #6]
   39b08:	e3833002 	orr	r3, r3, #2
   39b0c:	e5cd3006 	strb	r3, [sp, #6]
   39b10:	eaffff31 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b14:	e5dd3006 	ldrb	r3, [sp, #6]
   39b18:	e1833005 	orr	r3, r3, r5
   39b1c:	e5cd3006 	strb	r3, [sp, #6]
   39b20:	eaffff2d 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b24:	e5dd3006 	ldrb	r3, [sp, #6]
   39b28:	e3833040 	orr	r3, r3, #64	; 0x40
   39b2c:	e5cd3006 	strb	r3, [sp, #6]
   39b30:	eaffff29 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b34:	e5dd3006 	ldrb	r3, [sp, #6]
   39b38:	e3833010 	orr	r3, r3, #16
   39b3c:	e5cd3006 	strb	r3, [sp, #6]
   39b40:	eaffff25 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b44:	e5dd3006 	ldrb	r3, [sp, #6]
   39b48:	e3833008 	orr	r3, r3, #8
   39b4c:	e5cd3006 	strb	r3, [sp, #6]
   39b50:	eaffff21 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   39b54:	e5dd3006 	ldrb	r3, [sp, #6]
   39b58:	e3833004 	orr	r3, r3, #4
   39b5c:	e5cd3006 	strb	r3, [sp, #6]
   39b60:	eaffff1d 	b	397dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>

00039b64 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   39b64:	e2033009 	and	r3, r3, #9
   39b68:	e3530009 	cmp	r3, #9
   39b6c:	03510013 	cmpeq	r1, #19
   39b70:	03a030ff 	moveq	r3, #255	; 0xff
   39b74:	059d2000 	ldreq	r2, [sp]
   39b78:	05823000 	streq	r3, [r2]
   39b7c:	e12fff1e 	bx	lr

00039b80 <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
   39b80:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   39b84:	e1a04001 	mov	r4, r1
   39b88:	e24dd094 	sub	sp, sp, #148	; 0x94
   39b8c:	e1a08002 	mov	r8, r2
   39b90:	e1a06003 	mov	r6, r3
   39b94:	e1a05000 	mov	r5, r0
   39b98:	ebffb23c 	bl	26490 <CLogger::Get()>
   39b9c:	e59f316c 	ldr	r3, [pc, #364]	; 39d10 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x190>
   39ba0:	e3a02004 	mov	r2, #4
   39ba4:	e59f1168 	ldr	r1, [pc, #360]	; 39d14 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   39ba8:	e58d4000 	str	r4, [sp]
   39bac:	ebffb174 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39bb0:	e1a01004 	mov	r1, r4
   39bb4:	e28d2028 	add	r2, sp, #40	; 0x28
   39bb8:	e3a03064 	mov	r3, #100	; 0x64
   39bbc:	e59f0154 	ldr	r0, [pc, #340]	; 39d18 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x198>
   39bc0:	ebffcffa 	bl	2dbb0 <jsonGetValueForKey>
   39bc4:	e2507000 	subs	r7, r0, #0
   39bc8:	0a000041 	beq	39cd4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x154>
   39bcc:	e59f1148 	ldr	r1, [pc, #328]	; 39d1c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x19c>
   39bd0:	e28d0028 	add	r0, sp, #40	; 0x28
   39bd4:	ebffc055 	bl	29d30 <strstr>
   39bd8:	e59f3140 	ldr	r3, [pc, #320]	; 39d20 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a0>
   39bdc:	e3500000 	cmp	r0, #0
   39be0:	01a00003 	moveq	r0, r3
   39be4:	e59f1138 	ldr	r1, [pc, #312]	; 39d24 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a4>
   39be8:	ebffbf78 	bl	299d0 <strcasecmp>
   39bec:	e3500000 	cmp	r0, #0
   39bf0:	0a000019 	beq	39c5c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xdc>
   39bf4:	e1a01004 	mov	r1, r4
   39bf8:	e28d2008 	add	r2, sp, #8
   39bfc:	e3a0301e 	mov	r3, #30
   39c00:	e59f0120 	ldr	r0, [pc, #288]	; 39d28 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a8>
   39c04:	ebffcfe9 	bl	2dbb0 <jsonGetValueForKey>
   39c08:	e2504000 	subs	r4, r0, #0
   39c0c:	01a09004 	moveq	r9, r4
   39c10:	1a000037 	bne	39cf4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x174>
   39c14:	ebffb21d 	bl	26490 <CLogger::Get()>
   39c18:	e3a02004 	mov	r2, #4
   39c1c:	e59f10f0 	ldr	r1, [pc, #240]	; 39d14 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   39c20:	e58d6004 	str	r6, [sp, #4]
   39c24:	e58d9000 	str	r9, [sp]
   39c28:	e59f30fc 	ldr	r3, [pc, #252]	; 39d2c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1ac>
   39c2c:	ebffb154 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39c30:	e5953000 	ldr	r3, [r5]
   39c34:	e1a00005 	mov	r0, r5
   39c38:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   39c3c:	e12fff33 	blx	r3
   39c40:	e1a03006 	mov	r3, r6
   39c44:	e1a02008 	mov	r2, r8
   39c48:	e1a01004 	mov	r1, r4
   39c4c:	ebffe848 	bl	33d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   39c50:	e1a00007 	mov	r0, r7
   39c54:	e28dd094 	add	sp, sp, #148	; 0x94
   39c58:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   39c5c:	e28d0008 	add	r0, sp, #8
   39c60:	eb000d7b 	bl	3d254 <McTRS80CmdFormat::McTRS80CmdFormat()>
   39c64:	ebffb209 	bl	26490 <CLogger::Get()>
   39c68:	e3a02004 	mov	r2, #4
   39c6c:	e59f10a0 	ldr	r1, [pc, #160]	; 39d14 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   39c70:	e58d6000 	str	r6, [sp]
   39c74:	e59f30b4 	ldr	r3, [pc, #180]	; 39d30 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b0>
   39c78:	ebffb141 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39c7c:	e5953000 	ldr	r3, [r5]
   39c80:	e1a00005 	mov	r0, r5
   39c84:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   39c88:	e12fff33 	blx	r3
   39c8c:	e5953000 	ldr	r3, [r5]
   39c90:	e1a00005 	mov	r0, r5
   39c94:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   39c98:	e12fff33 	blx	r3
   39c9c:	e5953000 	ldr	r3, [r5]
   39ca0:	e1a00005 	mov	r0, r5
   39ca4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   39ca8:	e12fff33 	blx	r3
   39cac:	e58d6004 	str	r6, [sp, #4]
   39cb0:	e1a03000 	mov	r3, r0
   39cb4:	e58d8000 	str	r8, [sp]
   39cb8:	e28d0008 	add	r0, sp, #8
   39cbc:	e59f2070 	ldr	r2, [pc, #112]	; 39d34 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b4>
   39cc0:	e59f1070 	ldr	r1, [pc, #112]	; 39d38 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b8>
   39cc4:	eb000d63 	bl	3d258 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   39cc8:	e1a00007 	mov	r0, r7
   39ccc:	e28dd094 	add	sp, sp, #148	; 0x94
   39cd0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   39cd4:	ebffb1ed 	bl	26490 <CLogger::Get()>
   39cd8:	e59f305c 	ldr	r3, [pc, #92]	; 39d3c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1bc>
   39cdc:	e3a02004 	mov	r2, #4
   39ce0:	e59f102c 	ldr	r1, [pc, #44]	; 39d14 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   39ce4:	ebffb126 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39ce8:	e1a00007 	mov	r0, r7
   39cec:	e28dd094 	add	sp, sp, #148	; 0x94
   39cf0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   39cf4:	e28d0008 	add	r0, sp, #8
   39cf8:	e3a02010 	mov	r2, #16
   39cfc:	e3a01000 	mov	r1, #0
   39d00:	ebffc05a 	bl	29e70 <strtoul>
   39d04:	e6ff9070 	uxth	r9, r0
   39d08:	e1a04009 	mov	r4, r9
   39d0c:	eaffffc0 	b	39c14 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x94>
   39d10:	00048d90 	.word	0x00048d90
   39d14:	00048da0 	.word	0x00048da0
   39d18:	0004792c 	.word	0x0004792c
   39d1c:	00040680 	.word	0x00040680
   39d20:	00049280 	.word	0x00049280
   39d24:	00048dc4 	.word	0x00048dc4
   39d28:	00048c0c 	.word	0x00048c0c
   39d2c:	00048c18 	.word	0x00048c18
   39d30:	00048dcc 	.word	0x00048dcc
   39d34:	00033ef0 	.word	0x00033ef0
   39d38:	00033e58 	.word	0x00033e58
   39d3c:	00048da8 	.word	0x00048da8

00039d40 <McTRS80::McTRS80(McManager&)>:
   39d40:	e92d4010 	push	{r4, lr}
   39d44:	e1a04000 	mov	r4, r0
   39d48:	e3a03001 	mov	r3, #1
   39d4c:	e59f2034 	ldr	r2, [pc, #52]	; 39d88 <McTRS80::McTRS80(McManager&)+0x48>
   39d50:	eb0004fb 	bl	3b144 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)>
   39d54:	e1a03004 	mov	r3, r4
   39d58:	e3a02000 	mov	r2, #0
   39d5c:	e59f0028 	ldr	r0, [pc, #40]	; 39d8c <McTRS80::McTRS80(McManager&)+0x4c>
   39d60:	e2841e5e 	add	r1, r4, #1504	; 0x5e0
   39d64:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   39d68:	e5e32001 	strb	r2, [r3, #1]!
   39d6c:	e1530001 	cmp	r3, r1
   39d70:	1afffffc 	bne	39d68 <McTRS80::McTRS80(McManager&)+0x28>
   39d74:	e3a03001 	mov	r3, #1
   39d78:	e5c424e0 	strb	r2, [r4, #1248]	; 0x4e0
   39d7c:	e5c435e1 	strb	r3, [r4, #1505]	; 0x5e1
   39d80:	e1a00004 	mov	r0, r4
   39d84:	e8bd8010 	pop	{r4, pc}
   39d88:	00049f88 	.word	0x00049f88
   39d8c:	00048d20 	.word	0x00048d20

00039d90 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   39d90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d94:	e5903000 	ldr	r3, [r0]
   39d98:	e59fc18c 	ldr	ip, [pc, #396]	; 39f2c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x19c>
   39d9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   39da0:	e24dd014 	sub	sp, sp, #20
   39da4:	e153000c 	cmp	r3, ip
   39da8:	e1a09000 	mov	r9, r0
   39dac:	e1a05001 	mov	r5, r1
   39db0:	1a000058 	bne	39f18 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   39db4:	e590a0dc 	ldr	sl, [r0, #220]	; 0xdc
   39db8:	e3520b01 	cmp	r2, #1024	; 0x400
   39dbc:	23a02000 	movcs	r2, #0
   39dc0:	33a02001 	movcc	r2, #1
   39dc4:	e35a0000 	cmp	sl, #0
   39dc8:	11a04002 	movne	r4, r2
   39dcc:	03824001 	orreq	r4, r2, #1
   39dd0:	e3540000 	cmp	r4, #0
   39dd4:	0a000001 	beq	39de0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x50>
   39dd8:	e28dd014 	add	sp, sp, #20
   39ddc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39de0:	e5993000 	ldr	r3, [r9]
   39de4:	e1a00009 	mov	r0, r9
   39de8:	e5933014 	ldr	r3, [r3, #20]
   39dec:	e12fff33 	blx	r3
   39df0:	e5993000 	ldr	r3, [r9]
   39df4:	e590606c 	ldr	r6, [r0, #108]	; 0x6c
   39df8:	e5933014 	ldr	r3, [r3, #20]
   39dfc:	e1a00009 	mov	r0, r9
   39e00:	e12fff33 	blx	r3
   39e04:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   39e08:	e1a00006 	mov	r0, r6
   39e0c:	eb001728 	bl	3fab4 <__aeabi_idiv>
   39e10:	e5993000 	ldr	r3, [r9]
   39e14:	e1a08000 	mov	r8, r0
   39e18:	e5933014 	ldr	r3, [r3, #20]
   39e1c:	e1a00009 	mov	r0, r9
   39e20:	e12fff33 	blx	r3
   39e24:	e5993000 	ldr	r3, [r9]
   39e28:	e5906070 	ldr	r6, [r0, #112]	; 0x70
   39e2c:	e5933014 	ldr	r3, [r3, #20]
   39e30:	e1a00009 	mov	r0, r9
   39e34:	e12fff33 	blx	r3
   39e38:	e5901078 	ldr	r1, [r0, #120]	; 0x78
   39e3c:	e1a00006 	mov	r0, r6
   39e40:	eb00171b 	bl	3fab4 <__aeabi_idiv>
   39e44:	e2503000 	subs	r3, r0, #0
   39e48:	e58d300c 	str	r3, [sp, #12]
   39e4c:	da00002d 	ble	39f08 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x178>
   39e50:	e28930e0 	add	r3, r9, #224	; 0xe0
   39e54:	e59fb0d4 	ldr	fp, [pc, #212]	; 39f30 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1a0>
   39e58:	e58d5008 	str	r5, [sp, #8]
   39e5c:	e58d4000 	str	r4, [sp]
   39e60:	e58d3004 	str	r3, [sp, #4]
   39e64:	e3580000 	cmp	r8, #0
   39e68:	da00001a 	ble	39ed8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   39e6c:	e99d0050 	ldmib	sp, {r4, r6}
   39e70:	e3a05000 	mov	r5, #0
   39e74:	ea000005 	b	39e90 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   39e78:	e5c43000 	strb	r3, [r4]
   39e7c:	e2855001 	add	r5, r5, #1
   39e80:	e1580005 	cmp	r8, r5
   39e84:	e2844001 	add	r4, r4, #1
   39e88:	e2866001 	add	r6, r6, #1
   39e8c:	0a000011 	beq	39ed8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   39e90:	e5d934e0 	ldrb	r3, [r9, #1248]	; 0x4e0
   39e94:	e3530000 	cmp	r3, #0
   39e98:	e5d63000 	ldrb	r3, [r6]
   39e9c:	0a000002 	beq	39eac <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   39ea0:	e5d42000 	ldrb	r2, [r4]
   39ea4:	e1520003 	cmp	r2, r3
   39ea8:	0afffff3 	beq	39e7c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   39eac:	e59a2000 	ldr	r2, [sl]
   39eb0:	e5927024 	ldr	r7, [r2, #36]	; 0x24
   39eb4:	e157000b 	cmp	r7, fp
   39eb8:	0affffee 	beq	39e78 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   39ebc:	e6af3073 	sxtb	r3, r3
   39ec0:	e59d2000 	ldr	r2, [sp]
   39ec4:	e1a01005 	mov	r1, r5
   39ec8:	e1a0000a 	mov	r0, sl
   39ecc:	e12fff37 	blx	r7
   39ed0:	e5d63000 	ldrb	r3, [r6]
   39ed4:	eaffffe7 	b	39e78 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   39ed8:	e59d3000 	ldr	r3, [sp]
   39edc:	e59d200c 	ldr	r2, [sp, #12]
   39ee0:	e2833001 	add	r3, r3, #1
   39ee4:	e58d3000 	str	r3, [sp]
   39ee8:	e1520003 	cmp	r2, r3
   39eec:	e59d3004 	ldr	r3, [sp, #4]
   39ef0:	e0833008 	add	r3, r3, r8
   39ef4:	e58d3004 	str	r3, [sp, #4]
   39ef8:	e59d3008 	ldr	r3, [sp, #8]
   39efc:	e0833008 	add	r3, r3, r8
   39f00:	e58d3008 	str	r3, [sp, #8]
   39f04:	1affffd6 	bne	39e64 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xd4>
   39f08:	e3a03001 	mov	r3, #1
   39f0c:	e5c934e0 	strb	r3, [r9, #1248]	; 0x4e0
   39f10:	e28dd014 	add	sp, sp, #20
   39f14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f18:	e58d2000 	str	r2, [sp]
   39f1c:	e12fff33 	blx	r3
   39f20:	e59d2000 	ldr	r2, [sp]
   39f24:	e1a0a000 	mov	sl, r0
   39f28:	eaffffa2 	b	39db8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x28>
   39f2c:	000389dc 	.word	0x000389dc
   39f30:	00039750 	.word	0x00039750

00039f34 <McTRS80::displayRefreshFromMirrorHw()>:
   39f34:	e92d4030 	push	{r4, r5, lr}
   39f38:	e5903000 	ldr	r3, [r0]
   39f3c:	e24dde41 	sub	sp, sp, #1040	; 0x410
   39f40:	e24dd004 	sub	sp, sp, #4
   39f44:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   39f48:	e1a04000 	mov	r4, r0
   39f4c:	e12fff33 	blx	r3
   39f50:	e3a03000 	mov	r3, #0
   39f54:	e3a02001 	mov	r2, #1
   39f58:	e58d3004 	str	r3, [sp, #4]
   39f5c:	e58d2008 	str	r2, [sp, #8]
   39f60:	e58d3000 	str	r3, [sp]
   39f64:	e28d2010 	add	r2, sp, #16
   39f68:	e3a03b01 	mov	r3, #1024	; 0x400
   39f6c:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   39f70:	ebffec24 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   39f74:	e3500000 	cmp	r0, #0
   39f78:	0a000005 	beq	39f94 <McTRS80::displayRefreshFromMirrorHw()+0x60>
   39f7c:	e5d435e1 	ldrb	r3, [r4, #1505]	; 0x5e1
   39f80:	e3530000 	cmp	r3, #0
   39f84:	1a000009 	bne	39fb0 <McTRS80::displayRefreshFromMirrorHw()+0x7c>
   39f88:	e28dde41 	add	sp, sp, #1040	; 0x410
   39f8c:	e28dd004 	add	sp, sp, #4
   39f90:	e8bd8030 	pop	{r4, r5, pc}
   39f94:	e28d1010 	add	r1, sp, #16
   39f98:	e3a02b01 	mov	r2, #1024	; 0x400
   39f9c:	e1a00004 	mov	r0, r4
   39fa0:	ebffff7a 	bl	39d90 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   39fa4:	e5d435e1 	ldrb	r3, [r4, #1505]	; 0x5e1
   39fa8:	e3530000 	cmp	r3, #0
   39fac:	0afffff5 	beq	39f88 <McTRS80::displayRefreshFromMirrorHw()+0x54>
   39fb0:	e5943000 	ldr	r3, [r4]
   39fb4:	e1a00004 	mov	r0, r4
   39fb8:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   39fbc:	e12fff33 	blx	r3
   39fc0:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   39fc4:	e3530000 	cmp	r3, #0
   39fc8:	0affffee 	beq	39f88 <McTRS80::displayRefreshFromMirrorHw()+0x54>
   39fcc:	e5943000 	ldr	r3, [r4]
   39fd0:	e1a00004 	mov	r0, r4
   39fd4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   39fd8:	e12fff33 	blx	r3
   39fdc:	e3a05000 	mov	r5, #0
   39fe0:	e3a03001 	mov	r3, #1
   39fe4:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   39fe8:	e58d3008 	str	r3, [sp, #8]
   39fec:	e0822003 	add	r2, r2, r3
   39ff0:	e58d5004 	str	r5, [sp, #4]
   39ff4:	e58d5000 	str	r5, [sp]
   39ff8:	e3a03c01 	mov	r3, #256	; 0x100
   39ffc:	e3a01b0e 	mov	r1, #14336	; 0x3800
   3a000:	ebffebc7 	bl	34f24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   3a004:	e5c455e1 	strb	r5, [r4, #1505]	; 0x5e1
   3a008:	e28dde41 	add	sp, sp, #1040	; 0x410
   3a00c:	e28dd004 	add	sp, sp, #4
   3a010:	e8bd8030 	pop	{r4, r5, pc}

0003a014 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]>:
   3a014:	e92d4030 	push	{r4, r5, lr}
   3a018:	e5903000 	ldr	r3, [r0]
   3a01c:	e24dde42 	sub	sp, sp, #1056	; 0x420
   3a020:	e24dd00c 	sub	sp, sp, #12
   3a024:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3a028:	e1a04000 	mov	r4, r0
   3a02c:	e12fff33 	blx	r3
   3a030:	e3a03000 	mov	r3, #0
   3a034:	e28d2028 	add	r2, sp, #40	; 0x28
   3a038:	e58d3008 	str	r3, [sp, #8]
   3a03c:	e58d3004 	str	r3, [sp, #4]
   3a040:	e58d3000 	str	r3, [sp]
   3a044:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   3a048:	e3a03b01 	mov	r3, #1024	; 0x400
   3a04c:	ebffebed 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   3a050:	e3500000 	cmp	r0, #0
   3a054:	0a000005 	beq	3a070 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]+0x5c>
   3a058:	e5d435e1 	ldrb	r3, [r4, #1505]	; 0x5e1
   3a05c:	e3530000 	cmp	r3, #0
   3a060:	1a000009 	bne	3a08c <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]+0x78>
   3a064:	e28dde42 	add	sp, sp, #1056	; 0x420
   3a068:	e28dd00c 	add	sp, sp, #12
   3a06c:	e8bd8030 	pop	{r4, r5, pc}
   3a070:	e28d1028 	add	r1, sp, #40	; 0x28
   3a074:	e3a02b01 	mov	r2, #1024	; 0x400
   3a078:	e1a00004 	mov	r0, r4
   3a07c:	ebffff43 	bl	39d90 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   3a080:	e5d435e1 	ldrb	r3, [r4, #1505]	; 0x5e1
   3a084:	e3530000 	cmp	r3, #0
   3a088:	0afffff5 	beq	3a064 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]+0x50>
   3a08c:	e3a05000 	mov	r5, #0
   3a090:	ebffb0fe 	bl	26490 <CLogger::Get()>
   3a094:	e5d4c561 	ldrb	ip, [r4, #1377]	; 0x561
   3a098:	e5d41521 	ldrb	r1, [r4, #1313]	; 0x521
   3a09c:	e5d4e4e9 	ldrb	lr, [r4, #1257]	; 0x4e9
   3a0a0:	e5d42501 	ldrb	r2, [r4, #1281]	; 0x501
   3a0a4:	e5d434f1 	ldrb	r3, [r4, #1265]	; 0x4f1
   3a0a8:	e58dc020 	str	ip, [sp, #32]
   3a0ac:	e5d4c4e5 	ldrb	ip, [r4, #1253]	; 0x4e5
   3a0b0:	e58d101c 	str	r1, [sp, #28]
   3a0b4:	e5d414e3 	ldrb	r1, [r4, #1251]	; 0x4e3
   3a0b8:	e58d2018 	str	r2, [sp, #24]
   3a0bc:	e5d424e2 	ldrb	r2, [r4, #1250]	; 0x4e2
   3a0c0:	e58d3014 	str	r3, [sp, #20]
   3a0c4:	e5d434e1 	ldrb	r3, [r4, #1249]	; 0x4e1
   3a0c8:	e58de010 	str	lr, [sp, #16]
   3a0cc:	e58dc00c 	str	ip, [sp, #12]
   3a0d0:	e58d1008 	str	r1, [sp, #8]
   3a0d4:	e58d2004 	str	r2, [sp, #4]
   3a0d8:	e58d3000 	str	r3, [sp]
   3a0dc:	e3a02004 	mov	r2, #4
   3a0e0:	e59f1044 	ldr	r1, [pc, #68]	; 3a12c <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]+0x118>
   3a0e4:	e59f3044 	ldr	r3, [pc, #68]	; 3a130 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]+0x11c>
   3a0e8:	ebffb025 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3a0ec:	e5943000 	ldr	r3, [r4]
   3a0f0:	e1a00004 	mov	r0, r4
   3a0f4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3a0f8:	e12fff33 	blx	r3
   3a0fc:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   3a100:	e58d5008 	str	r5, [sp, #8]
   3a104:	e58d5004 	str	r5, [sp, #4]
   3a108:	e58d5000 	str	r5, [sp]
   3a10c:	e2822001 	add	r2, r2, #1
   3a110:	e3a03c01 	mov	r3, #256	; 0x100
   3a114:	e3a01b0e 	mov	r1, #14336	; 0x3800
   3a118:	ebffeb81 	bl	34f24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   3a11c:	e5c455e1 	strb	r5, [r4, #1505]	; 0x5e1
   3a120:	e28dde42 	add	sp, sp, #1056	; 0x420
   3a124:	e28dd00c 	add	sp, sp, #12
   3a128:	e8bd8030 	pop	{r4, r5, pc}
   3a12c:	00048da0 	.word	0x00048da0
   3a130:	00048df0 	.word	0x00048df0

0003a134 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION)>:
   3a134:	e3510004 	cmp	r1, #4
   3a138:	112fff1e 	bxne	lr
   3a13c:	eaffffb4 	b	3a014 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.1]>

0003a140 <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3a140:	e12fff1e 	bx	lr

0003a144 <McZXSpectrum::enableMachine()>:
   3a144:	e3a03000 	mov	r3, #0
   3a148:	e2802a01 	add	r2, r0, #4096	; 0x1000
   3a14c:	e2800a03 	add	r0, r0, #12288	; 0x3000
   3a150:	e5c23be0 	strb	r3, [r2, #3040]	; 0xbe0
   3a154:	e5c036f0 	strb	r3, [r0, #1776]	; 0x6f0
   3a158:	e5823be4 	str	r3, [r2, #3044]	; 0xbe4
   3a15c:	e5823be8 	str	r3, [r2, #3048]	; 0xbe8
   3a160:	e5823bec 	str	r3, [r2, #3052]	; 0xbec
   3a164:	e58036f4 	str	r3, [r0, #1780]	; 0x6f4
   3a168:	e58036f8 	str	r3, [r0, #1784]	; 0x6f8
   3a16c:	e12fff1e 	bx	lr

0003a170 <McZXSpectrum::disableMachine()>:
   3a170:	e12fff1e 	bx	lr

0003a174 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)>:
   3a174:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a178:	e59f8110 	ldr	r8, [pc, #272]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a17c:	e3e00000 	mvn	r0, #0
   3a180:	e1a03008 	mov	r3, r8
   3a184:	e24dd00c 	sub	sp, sp, #12
   3a188:	e58d1004 	str	r1, [sp, #4]
   3a18c:	e2881008 	add	r1, r8, #8
   3a190:	e4c30001 	strb	r0, [r3], #1
   3a194:	e1530001 	cmp	r3, r1
   3a198:	1afffffc 	bne	3a190 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1c>
   3a19c:	e242a001 	sub	sl, r2, #1
   3a1a0:	e1a0600a 	mov	r6, sl
   3a1a4:	e3a09000 	mov	r9, #0
   3a1a8:	e2822005 	add	r2, r2, #5
   3a1ac:	e5f63001 	ldrb	r3, [r6, #1]!
   3a1b0:	e353002a 	cmp	r3, #42	; 0x2a
   3a1b4:	03a09001 	moveq	r9, #1
   3a1b8:	e1560002 	cmp	r6, r2
   3a1bc:	1afffffa 	bne	3a1ac <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x38>
   3a1c0:	e3a07091 	mov	r7, #145	; 0x91
   3a1c4:	e59f50c8 	ldr	r5, [pc, #200]	; 3a294 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x120>
   3a1c8:	e285b08c 	add	fp, r5, #140	; 0x8c
   3a1cc:	e1a0e00a 	mov	lr, sl
   3a1d0:	e3a040ff 	mov	r4, #255	; 0xff
   3a1d4:	e285c010 	add	ip, r5, #16
   3a1d8:	e1a03005 	mov	r3, r5
   3a1dc:	e1a01007 	mov	r1, r7
   3a1e0:	e3a02001 	mov	r2, #1
   3a1e4:	e5fe0001 	ldrb	r0, [lr, #1]!
   3a1e8:	e1510000 	cmp	r1, r0
   3a1ec:	01c44002 	biceq	r4, r4, r2
   3a1f0:	e153000c 	cmp	r3, ip
   3a1f4:	e1a02082 	lsl	r2, r2, #1
   3a1f8:	15b31004 	ldrne	r1, [r3, #4]!
   3a1fc:	1afffff9 	bne	3a1e8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x74>
   3a200:	e15e0006 	cmp	lr, r6
   3a204:	1afffff3 	bne	3a1d8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x64>
   3a208:	e155000b 	cmp	r5, fp
   3a20c:	e4c84001 	strb	r4, [r8], #1
   3a210:	15b57014 	ldrne	r7, [r5, #20]!
   3a214:	1affffec 	bne	3a1cc <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x58>
   3a218:	e3590000 	cmp	r9, #0
   3a21c:	1a00000c 	bne	3a254 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xe0>
   3a220:	e59d3004 	ldr	r3, [sp, #4]
   3a224:	e3130022 	tst	r3, #34	; 0x22
   3a228:	1a000012 	bne	3a278 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x104>
   3a22c:	e59d3004 	ldr	r3, [sp, #4]
   3a230:	e3130011 	tst	r3, #17
   3a234:	0a000004 	beq	3a24c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xd8>
   3a238:	e59f3050 	ldr	r3, [pc, #80]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a23c:	e59f204c 	ldr	r2, [pc, #76]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a240:	e5d33007 	ldrb	r3, [r3, #7]
   3a244:	e3c33002 	bic	r3, r3, #2
   3a248:	e5c23007 	strb	r3, [r2, #7]
   3a24c:	e28dd00c 	add	sp, sp, #12
   3a250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a254:	e59f3034 	ldr	r3, [pc, #52]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a258:	e59f1030 	ldr	r1, [pc, #48]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a25c:	e5d32000 	ldrb	r2, [r3]
   3a260:	e5d33004 	ldrb	r3, [r3, #4]
   3a264:	e3c22001 	bic	r2, r2, #1
   3a268:	e3c33001 	bic	r3, r3, #1
   3a26c:	e5c12000 	strb	r2, [r1]
   3a270:	e5c13004 	strb	r3, [r1, #4]
   3a274:	eaffffec 	b	3a22c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xb8>
   3a278:	e59f3010 	ldr	r3, [pc, #16]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a27c:	e59f200c 	ldr	r2, [pc, #12]	; 3a290 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x11c>
   3a280:	e5d33000 	ldrb	r3, [r3]
   3a284:	e3c33001 	bic	r3, r3, #1
   3a288:	e5c23000 	strb	r3, [r2]
   3a28c:	eaffffe6 	b	3a22c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xb8>
   3a290:	00053028 	.word	0x00053028
   3a294:	00048e24 	.word	0x00048e24

0003a298 <McZXSpectrum::machineHeartbeat()>:
   3a298:	e5900004 	ldr	r0, [r0, #4]
   3a29c:	e3e01000 	mvn	r1, #0
   3a2a0:	eafff6aa 	b	37d50 <McManager::targetIrq(int)>

0003a2a4 <McZXSpectrum::displayRefreshFromMirrorHw()>:
   3a2a4:	e92d4070 	push	{r4, r5, r6, lr}
   3a2a8:	e1a04000 	mov	r4, r0
   3a2ac:	e49430e0 	ldr	r3, [r4], #224	; 0xe0
   3a2b0:	e24dd010 	sub	sp, sp, #16
   3a2b4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3a2b8:	e1a05000 	mov	r5, r0
   3a2bc:	e3a06001 	mov	r6, #1
   3a2c0:	e12fff33 	blx	r3
   3a2c4:	e3a03000 	mov	r3, #0
   3a2c8:	e1a02004 	mov	r2, r4
   3a2cc:	e98d0048 	stmib	sp, {r3, r6}
   3a2d0:	e58d3000 	str	r3, [sp]
   3a2d4:	e3a01901 	mov	r1, #16384	; 0x4000
   3a2d8:	e3a03c1b 	mov	r3, #6912	; 0x1b00
   3a2dc:	ebffeb49 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   3a2e0:	e3500000 	cmp	r0, #0
   3a2e4:	02855a01 	addeq	r5, r5, #4096	; 0x1000
   3a2e8:	05c56be0 	strbeq	r6, [r5, #3040]	; 0xbe0
   3a2ec:	e28dd010 	add	sp, sp, #16
   3a2f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0003a2f4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)>:
   3a2f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3a2f8:	e24dd094 	sub	sp, sp, #148	; 0x94
   3a2fc:	e1a04000 	mov	r4, r0
   3a300:	e1a08002 	mov	r8, r2
   3a304:	e1a07003 	mov	r7, r3
   3a308:	e28d2028 	add	r2, sp, #40	; 0x28
   3a30c:	e3a03064 	mov	r3, #100	; 0x64
   3a310:	e59f0240 	ldr	r0, [pc, #576]	; 3a558 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x264>
   3a314:	e1a09001 	mov	r9, r1
   3a318:	ebffce24 	bl	2dbb0 <jsonGetValueForKey>
   3a31c:	e2505000 	subs	r5, r0, #0
   3a320:	1a000002 	bne	3a330 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x3c>
   3a324:	e1a00005 	mov	r0, r5
   3a328:	e28dd094 	add	sp, sp, #148	; 0x94
   3a32c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3a330:	e59f1224 	ldr	r1, [pc, #548]	; 3a55c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x268>
   3a334:	e28d0028 	add	r0, sp, #40	; 0x28
   3a338:	ebffbe7c 	bl	29d30 <strstr>
   3a33c:	e3500000 	cmp	r0, #0
   3a340:	e59f6218 	ldr	r6, [pc, #536]	; 3a560 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x26c>
   3a344:	11a06000 	movne	r6, r0
   3a348:	e59f1214 	ldr	r1, [pc, #532]	; 3a564 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x270>
   3a34c:	e1a00006 	mov	r0, r6
   3a350:	ebffbd9e 	bl	299d0 <strcasecmp>
   3a354:	e3500000 	cmp	r0, #0
   3a358:	0a00003d 	beq	3a454 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x160>
   3a35c:	e59f1204 	ldr	r1, [pc, #516]	; 3a568 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x274>
   3a360:	e1a00006 	mov	r0, r6
   3a364:	ebffbd99 	bl	299d0 <strcasecmp>
   3a368:	e3500000 	cmp	r0, #0
   3a36c:	0a00001c 	beq	3a3e4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xf0>
   3a370:	e1a00006 	mov	r0, r6
   3a374:	e59f11f0 	ldr	r1, [pc, #496]	; 3a56c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x278>
   3a378:	ebffbd94 	bl	299d0 <strcasecmp>
   3a37c:	e3500000 	cmp	r0, #0
   3a380:	0a000051 	beq	3a4cc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x1d8>
   3a384:	e1a01009 	mov	r1, r9
   3a388:	e28d2008 	add	r2, sp, #8
   3a38c:	e3a0301e 	mov	r3, #30
   3a390:	e59f01d8 	ldr	r0, [pc, #472]	; 3a570 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x27c>
   3a394:	ebffce05 	bl	2dbb0 <jsonGetValueForKey>
   3a398:	e2506000 	subs	r6, r0, #0
   3a39c:	01a09006 	moveq	r9, r6
   3a3a0:	1a000065 	bne	3a53c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x248>
   3a3a4:	ebffb039 	bl	26490 <CLogger::Get()>
   3a3a8:	e3a02004 	mov	r2, #4
   3a3ac:	e59f11c0 	ldr	r1, [pc, #448]	; 3a574 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x280>
   3a3b0:	e58d7004 	str	r7, [sp, #4]
   3a3b4:	e58d9000 	str	r9, [sp]
   3a3b8:	e59f31b8 	ldr	r3, [pc, #440]	; 3a578 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x284>
   3a3bc:	ebffaf70 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3a3c0:	e5943000 	ldr	r3, [r4]
   3a3c4:	e1a00004 	mov	r0, r4
   3a3c8:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a3cc:	e12fff33 	blx	r3
   3a3d0:	e1a03007 	mov	r3, r7
   3a3d4:	e1a02008 	mov	r2, r8
   3a3d8:	e1a01006 	mov	r1, r6
   3a3dc:	ebffe664 	bl	33d74 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   3a3e0:	eaffffcf 	b	3a324 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x30>
   3a3e4:	e28d0008 	add	r0, sp, #8
   3a3e8:	eb000e4c 	bl	3dd20 <McZXSpectrumZ80Format::McZXSpectrumZ80Format()>
   3a3ec:	ebffb027 	bl	26490 <CLogger::Get()>
   3a3f0:	e3a02004 	mov	r2, #4
   3a3f4:	e59f1178 	ldr	r1, [pc, #376]	; 3a574 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x280>
   3a3f8:	e58d7000 	str	r7, [sp]
   3a3fc:	e59f3178 	ldr	r3, [pc, #376]	; 3a57c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x288>
   3a400:	ebffaf5f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3a404:	e5943000 	ldr	r3, [r4]
   3a408:	e1a00004 	mov	r0, r4
   3a40c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a410:	e12fff33 	blx	r3
   3a414:	e5943000 	ldr	r3, [r4]
   3a418:	e1a00004 	mov	r0, r4
   3a41c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a420:	e12fff33 	blx	r3
   3a424:	e5943000 	ldr	r3, [r4]
   3a428:	e1a00004 	mov	r0, r4
   3a42c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a430:	e12fff33 	blx	r3
   3a434:	e58d7004 	str	r7, [sp, #4]
   3a438:	e1a03000 	mov	r3, r0
   3a43c:	e58d8000 	str	r8, [sp]
   3a440:	e28d0008 	add	r0, sp, #8
   3a444:	e59f2134 	ldr	r2, [pc, #308]	; 3a580 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x28c>
   3a448:	e59f1134 	ldr	r1, [pc, #308]	; 3a584 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x290>
   3a44c:	eb000e50 	bl	3dd94 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   3a450:	eaffffb3 	b	3a324 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x30>
   3a454:	e28d0008 	add	r0, sp, #8
   3a458:	eb000ca4 	bl	3d6f0 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()>
   3a45c:	ebffb00b 	bl	26490 <CLogger::Get()>
   3a460:	e3a02004 	mov	r2, #4
   3a464:	e59f1108 	ldr	r1, [pc, #264]	; 3a574 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x280>
   3a468:	e58d7000 	str	r7, [sp]
   3a46c:	e59f3114 	ldr	r3, [pc, #276]	; 3a588 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x294>
   3a470:	ebffaf43 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3a474:	e5943000 	ldr	r3, [r4]
   3a478:	e1a00004 	mov	r0, r4
   3a47c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a480:	e12fff33 	blx	r3
   3a484:	e5943000 	ldr	r3, [r4]
   3a488:	e1a00004 	mov	r0, r4
   3a48c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a490:	e12fff33 	blx	r3
   3a494:	e5943000 	ldr	r3, [r4]
   3a498:	e1a00004 	mov	r0, r4
   3a49c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a4a0:	e12fff33 	blx	r3
   3a4a4:	e58d7004 	str	r7, [sp, #4]
   3a4a8:	e1a03000 	mov	r3, r0
   3a4ac:	e58d8000 	str	r8, [sp]
   3a4b0:	e28d0008 	add	r0, sp, #8
   3a4b4:	e59f20c4 	ldr	r2, [pc, #196]	; 3a580 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x28c>
   3a4b8:	e59f10c4 	ldr	r1, [pc, #196]	; 3a584 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x290>
   3a4bc:	eb000dab 	bl	3db70 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   3a4c0:	e1a00005 	mov	r0, r5
   3a4c4:	e28dd094 	add	sp, sp, #148	; 0x94
   3a4c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3a4cc:	e28d0008 	add	r0, sp, #8
   3a4d0:	eb000c09 	bl	3d4fc <McZXSpectrumSNAFormat::McZXSpectrumSNAFormat()>
   3a4d4:	ebffafed 	bl	26490 <CLogger::Get()>
   3a4d8:	e3a02004 	mov	r2, #4
   3a4dc:	e59f1090 	ldr	r1, [pc, #144]	; 3a574 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x280>
   3a4e0:	e58d7000 	str	r7, [sp]
   3a4e4:	e59f30a0 	ldr	r3, [pc, #160]	; 3a58c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x298>
   3a4e8:	ebffaf25 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3a4ec:	e5943000 	ldr	r3, [r4]
   3a4f0:	e1a00004 	mov	r0, r4
   3a4f4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a4f8:	e12fff33 	blx	r3
   3a4fc:	e5943000 	ldr	r3, [r4]
   3a500:	e1a00004 	mov	r0, r4
   3a504:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a508:	e12fff33 	blx	r3
   3a50c:	e5943000 	ldr	r3, [r4]
   3a510:	e1a00004 	mov	r0, r4
   3a514:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   3a518:	e12fff33 	blx	r3
   3a51c:	e58d7004 	str	r7, [sp, #4]
   3a520:	e1a03000 	mov	r3, r0
   3a524:	e58d8000 	str	r8, [sp]
   3a528:	e28d0008 	add	r0, sp, #8
   3a52c:	e59f204c 	ldr	r2, [pc, #76]	; 3a580 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x28c>
   3a530:	e59f104c 	ldr	r1, [pc, #76]	; 3a584 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x290>
   3a534:	eb000bf1 	bl	3d500 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   3a538:	eaffff79 	b	3a324 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x30>
   3a53c:	e28d0008 	add	r0, sp, #8
   3a540:	e3a02010 	mov	r2, #16
   3a544:	e3a01000 	mov	r1, #0
   3a548:	ebffbe48 	bl	29e70 <strtoul>
   3a54c:	e6ff9070 	uxth	r9, r0
   3a550:	e1a06009 	mov	r6, r9
   3a554:	eaffff92 	b	3a3a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb0>
   3a558:	0004792c 	.word	0x0004792c
   3a55c:	00040680 	.word	0x00040680
   3a560:	00049280 	.word	0x00049280
   3a564:	00048f4c 	.word	0x00048f4c
   3a568:	00048f7c 	.word	0x00048f7c
   3a56c:	00048fa0 	.word	0x00048fa0
   3a570:	00048c0c 	.word	0x00048c0c
   3a574:	00048f70 	.word	0x00048f70
   3a578:	00048c18 	.word	0x00048c18
   3a57c:	00048f84 	.word	0x00048f84
   3a580:	00033ef0 	.word	0x00033ef0
   3a584:	00033e58 	.word	0x00033e58
   3a588:	00048f54 	.word	0x00048f54
   3a58c:	00048fa8 	.word	0x00048fa8

0003a590 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3a590:	e2033009 	and	r3, r3, #9
   3a594:	e92d4010 	push	{r4, lr}
   3a598:	e3530009 	cmp	r3, #9
   3a59c:	e59dc008 	ldr	ip, [sp, #8]
   3a5a0:	18bd8010 	popne	{r4, pc}
   3a5a4:	e3110001 	tst	r1, #1
   3a5a8:	1a00000e 	bne	3a5e8 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x58>
   3a5ac:	e3a000ff 	mov	r0, #255	; 0xff
   3a5b0:	e3a02c01 	mov	r2, #256	; 0x100
   3a5b4:	e59f3040 	ldr	r3, [pc, #64]	; 3a5fc <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
   3a5b8:	e58c0000 	str	r0, [ip]
   3a5bc:	e283e008 	add	lr, r3, #8
   3a5c0:	e1110002 	tst	r1, r2
   3a5c4:	05d34000 	ldrbeq	r4, [r3]
   3a5c8:	059c0000 	ldreq	r0, [ip]
   3a5cc:	e2833001 	add	r3, r3, #1
   3a5d0:	00000004 	andeq	r0, r0, r4
   3a5d4:	058c0000 	streq	r0, [ip]
   3a5d8:	e15e0003 	cmp	lr, r3
   3a5dc:	e1a02082 	lsl	r2, r2, #1
   3a5e0:	1afffff6 	bne	3a5c0 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x30>
   3a5e4:	e8bd8010 	pop	{r4, pc}
   3a5e8:	e6ef1071 	uxtb	r1, r1
   3a5ec:	e351001f 	cmp	r1, #31
   3a5f0:	03a03000 	moveq	r3, #0
   3a5f4:	058c3000 	streq	r3, [ip]
   3a5f8:	e8bd8010 	pop	{r4, pc}
   3a5fc:	00053028 	.word	0x00053028

0003a600 <McZXSpectrum::busActionCompleteCallback(BR_BUS_ACTION)>:
   3a600:	e3510004 	cmp	r1, #4
   3a604:	112fff1e 	bxne	lr
   3a608:	e92d4030 	push	{r4, r5, lr}
   3a60c:	e1a05000 	mov	r5, r0
   3a610:	e49530e0 	ldr	r3, [r5], #224	; 0xe0
   3a614:	e24dd014 	sub	sp, sp, #20
   3a618:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3a61c:	e1a04000 	mov	r4, r0
   3a620:	e12fff33 	blx	r3
   3a624:	e3a03000 	mov	r3, #0
   3a628:	e1a02005 	mov	r2, r5
   3a62c:	e58d3008 	str	r3, [sp, #8]
   3a630:	e58d3004 	str	r3, [sp, #4]
   3a634:	e58d3000 	str	r3, [sp]
   3a638:	e3a01901 	mov	r1, #16384	; 0x4000
   3a63c:	e3a03c1b 	mov	r3, #6912	; 0x1b00
   3a640:	ebffea70 	bl	35008 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   3a644:	e3500000 	cmp	r0, #0
   3a648:	03a02001 	moveq	r2, #1
   3a64c:	02843a01 	addeq	r3, r4, #4096	; 0x1000
   3a650:	05c32be0 	strbeq	r2, [r3, #3040]	; 0xbe0
   3a654:	e28dd014 	add	sp, sp, #20
   3a658:	e8bd8030 	pop	{r4, r5, pc}

0003a65c <McZXSpectrum::canProcFileType(char const*)>:
   3a65c:	e92d4010 	push	{r4, lr}
   3a660:	e1a04001 	mov	r4, r1
   3a664:	e59f1040 	ldr	r1, [pc, #64]	; 3a6ac <McZXSpectrum::canProcFileType(char const*)+0x50>
   3a668:	e1a00004 	mov	r0, r4
   3a66c:	ebffbcd7 	bl	299d0 <strcasecmp>
   3a670:	e3500000 	cmp	r0, #0
   3a674:	1a000001 	bne	3a680 <McZXSpectrum::canProcFileType(char const*)+0x24>
   3a678:	e3a00001 	mov	r0, #1
   3a67c:	e8bd8010 	pop	{r4, pc}
   3a680:	e59f1028 	ldr	r1, [pc, #40]	; 3a6b0 <McZXSpectrum::canProcFileType(char const*)+0x54>
   3a684:	e1a00004 	mov	r0, r4
   3a688:	ebffbcd0 	bl	299d0 <strcasecmp>
   3a68c:	e3500000 	cmp	r0, #0
   3a690:	0afffff8 	beq	3a678 <McZXSpectrum::canProcFileType(char const*)+0x1c>
   3a694:	e1a00004 	mov	r0, r4
   3a698:	e59f1014 	ldr	r1, [pc, #20]	; 3a6b4 <McZXSpectrum::canProcFileType(char const*)+0x58>
   3a69c:	ebffbccb 	bl	299d0 <strcasecmp>
   3a6a0:	e16f0f10 	clz	r0, r0
   3a6a4:	e1a002a0 	lsr	r0, r0, #5
   3a6a8:	e8bd8010 	pop	{r4, pc}
   3a6ac:	00048fc4 	.word	0x00048fc4
   3a6b0:	00048fc8 	.word	0x00048fc8
   3a6b4:	00048fcc 	.word	0x00048fcc

0003a6b8 <McZXSpectrum::McZXSpectrum(McManager&)>:
   3a6b8:	e92d4070 	push	{r4, r5, r6, lr}
   3a6bc:	e59f607c 	ldr	r6, [pc, #124]	; 3a740 <McZXSpectrum::McZXSpectrum(McManager&)+0x88>
   3a6c0:	e1a05000 	mov	r5, r0
   3a6c4:	e1a02006 	mov	r2, r6
   3a6c8:	e3a03001 	mov	r3, #1
   3a6cc:	eb00029c 	bl	3b144 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)>
   3a6d0:	e3a03000 	mov	r3, #0
   3a6d4:	e5961070 	ldr	r1, [r6, #112]	; 0x70
   3a6d8:	e59f0064 	ldr	r0, [pc, #100]	; 3a744 <McZXSpectrum::McZXSpectrum(McManager&)+0x8c>
   3a6dc:	e2852a01 	add	r2, r5, #4096	; 0x1000
   3a6e0:	e2854a03 	add	r4, r5, #12288	; 0x3000
   3a6e4:	e5850000 	str	r0, [r5]
   3a6e8:	e5c23be0 	strb	r3, [r2, #3040]	; 0xbe0
   3a6ec:	e1a00001 	mov	r0, r1
   3a6f0:	e5c436f0 	strb	r3, [r4, #1776]	; 0x6f0
   3a6f4:	e5823be4 	str	r3, [r2, #3044]	; 0xbe4
   3a6f8:	e5823be8 	str	r3, [r2, #3048]	; 0xbe8
   3a6fc:	e5823bec 	str	r3, [r2, #3052]	; 0xbec
   3a700:	e58436f4 	str	r3, [r4, #1780]	; 0x6f4
   3a704:	e58436f8 	str	r3, [r4, #1784]	; 0x6f8
   3a708:	eb0014e9 	bl	3fab4 <__aeabi_idiv>
   3a70c:	e596106c 	ldr	r1, [r6, #108]	; 0x6c
   3a710:	e584071c 	str	r0, [r4, #1820]	; 0x71c
   3a714:	e1a00001 	mov	r0, r1
   3a718:	eb0014e5 	bl	3fab4 <__aeabi_idiv>
   3a71c:	e3e01000 	mvn	r1, #0
   3a720:	e59f3020 	ldr	r3, [pc, #32]	; 3a748 <McZXSpectrum::McZXSpectrum(McManager&)+0x90>
   3a724:	e5840718 	str	r0, [r4, #1816]	; 0x718
   3a728:	e2832008 	add	r2, r3, #8
   3a72c:	e4c31001 	strb	r1, [r3], #1
   3a730:	e1530002 	cmp	r3, r2
   3a734:	1afffffc 	bne	3a72c <McZXSpectrum::McZXSpectrum(McManager&)+0x74>
   3a738:	e1a00005 	mov	r0, r5
   3a73c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a740:	0004a02c 	.word	0x0004a02c
   3a744:	00048ecc 	.word	0x00048ecc
   3a748:	00053028 	.word	0x00053028

0003a74c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   3a74c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a750:	e5903000 	ldr	r3, [r0]
   3a754:	e59fc4c0 	ldr	ip, [pc, #1216]	; 3ac1c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4d0>
   3a758:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   3a75c:	e24dd034 	sub	sp, sp, #52	; 0x34
   3a760:	e153000c 	cmp	r3, ip
   3a764:	e1a06000 	mov	r6, r0
   3a768:	e1a0b001 	mov	fp, r1
   3a76c:	e1a05002 	mov	r5, r2
   3a770:	1a00008f 	bne	3a9b4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x268>
   3a774:	e59070dc 	ldr	r7, [r0, #220]	; 0xdc
   3a778:	e3550c1b 	cmp	r5, #6912	; 0x1b00
   3a77c:	23a05000 	movcs	r5, #0
   3a780:	33a05001 	movcc	r5, #1
   3a784:	e3570000 	cmp	r7, #0
   3a788:	03855001 	orreq	r5, r5, #1
   3a78c:	e3550000 	cmp	r5, #0
   3a790:	0a000001 	beq	3a79c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x50>
   3a794:	e28dd034 	add	sp, sp, #52	; 0x34
   3a798:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a79c:	e5963000 	ldr	r3, [r6]
   3a7a0:	e1a00006 	mov	r0, r6
   3a7a4:	e5933014 	ldr	r3, [r3, #20]
   3a7a8:	e12fff33 	blx	r3
   3a7ac:	e590307c 	ldr	r3, [r0, #124]	; 0x7c
   3a7b0:	e3530004 	cmp	r3, #4
   3a7b4:	1afffff6 	bne	3a794 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x48>
   3a7b8:	e2864a03 	add	r4, r6, #12288	; 0x3000
   3a7bc:	e59436f4 	ldr	r3, [r4, #1780]	; 0x6f4
   3a7c0:	e3530000 	cmp	r3, #0
   3a7c4:	0a0000a9 	beq	3aa70 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x324>
   3a7c8:	e2863a01 	add	r3, r6, #4096	; 0x1000
   3a7cc:	e5931be8 	ldr	r1, [r3, #3048]	; 0xbe8
   3a7d0:	e5940718 	ldr	r0, [r4, #1816]	; 0x718
   3a7d4:	e281e001 	add	lr, r1, #1
   3a7d8:	e15e0000 	cmp	lr, r0
   3a7dc:	e58d300c 	str	r3, [sp, #12]
   3a7e0:	e1a07003 	mov	r7, r3
   3a7e4:	e583ebe8 	str	lr, [r3, #3048]	; 0xbe8
   3a7e8:	e5933be4 	ldr	r3, [r3, #3044]	; 0xbe4
   3a7ec:	3a000084 	bcc	3aa04 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2b8>
   3a7f0:	e3a0c000 	mov	ip, #0
   3a7f4:	e594e71c 	ldr	lr, [r4, #1820]	; 0x71c
   3a7f8:	e2832001 	add	r2, r3, #1
   3a7fc:	e152000e 	cmp	r2, lr
   3a800:	e5872be4 	str	r2, [r7, #3044]	; 0xbe4
   3a804:	e587cbe8 	str	ip, [r7, #3048]	; 0xbe8
   3a808:	2587cbe4 	strcs	ip, [r7, #3044]	; 0xbe4
   3a80c:	e594c714 	ldr	ip, [r4, #1812]	; 0x714
   3a810:	e594e710 	ldr	lr, [r4, #1808]	; 0x710
   3a814:	e00c019c 	mul	ip, ip, r1
   3a818:	e2812b06 	add	r2, r1, #6144	; 0x1800
   3a81c:	e0222390 	mla	r2, r0, r3, r2
   3a820:	e02cc39e 	mla	ip, lr, r3, ip
   3a824:	e5d476f0 	ldrb	r7, [r4, #1776]	; 0x6f0
   3a828:	e58dc004 	str	ip, [sp, #4]
   3a82c:	e3570000 	cmp	r7, #0
   3a830:	e7db9002 	ldrb	r9, [fp, r2]
   3a834:	1a000087 	bne	3aa58 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x30c>
   3a838:	e3a05001 	mov	r5, #1
   3a83c:	e3520c1b 	cmp	r2, #6912	; 0x1b00
   3a840:	30862002 	addcc	r2, r6, r2
   3a844:	32822d6f 	addcc	r2, r2, #7104	; 0x1bc0
   3a848:	35c29030 	strbcc	r9, [r2, #48]	; 0x30
   3a84c:	e594e70c 	ldr	lr, [r4, #1804]	; 0x70c
   3a850:	e2032018 	and	r2, r3, #24
   3a854:	e002029e 	mul	r2, lr, r2
   3a858:	e2033007 	and	r3, r3, #7
   3a85c:	e0232390 	mla	r3, r0, r3, r2
   3a860:	e5947720 	ldr	r7, [r4, #1824]	; 0x720
   3a864:	e0833001 	add	r3, r3, r1
   3a868:	e3570000 	cmp	r7, #0
   3a86c:	e58d3000 	str	r3, [sp]
   3a870:	0a000059 	beq	3a9dc <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x290>
   3a874:	e3a00000 	mov	r0, #0
   3a878:	e59d3000 	ldr	r3, [sp]
   3a87c:	e59f839c 	ldr	r8, [pc, #924]	; 3ac20 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4d4>
   3a880:	e2832d6f 	add	r2, r3, #7104	; 0x1bc0
   3a884:	e2822030 	add	r2, r2, #48	; 0x30
   3a888:	e7dbc003 	ldrb	ip, [fp, r3]
   3a88c:	e7d61002 	ldrb	r1, [r6, r2]
   3a890:	e2800001 	add	r0, r0, #1
   3a894:	e051100c 	subs	r1, r1, ip
   3a898:	13a01001 	movne	r1, #1
   3a89c:	e1530008 	cmp	r3, r8
   3a8a0:	83a01000 	movhi	r1, #0
   3a8a4:	e3510000 	cmp	r1, #0
   3a8a8:	11a05001 	movne	r5, r1
   3a8ac:	17c6c002 	strbne	ip, [r6, r2]
   3a8b0:	e1500007 	cmp	r0, r7
   3a8b4:	e083300e 	add	r3, r3, lr
   3a8b8:	1afffff0 	bne	3a880 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x134>
   3a8bc:	e3550000 	cmp	r5, #0
   3a8c0:	0a000045 	beq	3a9dc <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x290>
   3a8c4:	e3a0c000 	mov	ip, #0
   3a8c8:	e1a011c9 	asr	r1, r9, #3
   3a8cc:	e2093007 	and	r3, r9, #7
   3a8d0:	e2010008 	and	r0, r1, #8
   3a8d4:	e59f2348 	ldr	r2, [pc, #840]	; 3ac24 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4d8>
   3a8d8:	e1833000 	orr	r3, r3, r0
   3a8dc:	e201100f 	and	r1, r1, #15
   3a8e0:	e0823003 	add	r3, r2, r3
   3a8e4:	e0822001 	add	r2, r2, r1
   3a8e8:	e2833f46 	add	r3, r3, #280	; 0x118
   3a8ec:	e2822f46 	add	r2, r2, #280	; 0x118
   3a8f0:	e1d3a0d0 	ldrsb	sl, [r3]
   3a8f4:	e1d290d0 	ldrsb	r9, [r2]
   3a8f8:	e59476f4 	ldr	r7, [r4, #1780]	; 0x6f4
   3a8fc:	e59de000 	ldr	lr, [sp]
   3a900:	e58db008 	str	fp, [sp, #8]
   3a904:	e3a06080 	mov	r6, #128	; 0x80
   3a908:	e5942708 	ldr	r2, [r4, #1800]	; 0x708
   3a90c:	e59456fc 	ldr	r5, [r4, #1788]	; 0x6fc
   3a910:	e59d3008 	ldr	r3, [sp, #8]
   3a914:	e0050295 	mul	r5, r5, r2
   3a918:	e083b00e 	add	fp, r3, lr
   3a91c:	e59d3004 	ldr	r3, [sp, #4]
   3a920:	e58dc000 	str	ip, [sp]
   3a924:	e025359c 	mla	r5, ip, r5, r3
   3a928:	e2858020 	add	r8, r5, #32
   3a92c:	e0878008 	add	r8, r7, r8
   3a930:	e0875005 	add	r5, r7, r5
   3a934:	e5943700 	ldr	r3, [r4, #1792]	; 0x700
   3a938:	e5db1000 	ldrb	r1, [fp]
   3a93c:	e1a03103 	lsl	r3, r3, #2
   3a940:	e0235392 	mla	r3, r2, r3, r5
   3a944:	e59406f8 	ldr	r0, [r4, #1784]	; 0x6f8
   3a948:	e1110006 	tst	r1, r6
   3a94c:	e0870000 	add	r0, r7, r0
   3a950:	01a01009 	moveq	r1, r9
   3a954:	11a0100a 	movne	r1, sl
   3a958:	e1530000 	cmp	r3, r0
   3a95c:	e1a03005 	mov	r3, r5
   3a960:	2a00000d 	bcs	3a99c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x250>
   3a964:	e3520000 	cmp	r2, #0
   3a968:	0a00000b 	beq	3a99c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x250>
   3a96c:	e3a02000 	mov	r2, #0
   3a970:	e1a0c801 	lsl	ip, r1, #16
   3a974:	e08ccc01 	add	ip, ip, r1, lsl #24
   3a978:	e08cc001 	add	ip, ip, r1
   3a97c:	e08cc401 	add	ip, ip, r1, lsl #8
   3a980:	e583c000 	str	ip, [r3]
   3a984:	e5940708 	ldr	r0, [r4, #1800]	; 0x708
   3a988:	e2822001 	add	r2, r2, #1
   3a98c:	e5941700 	ldr	r1, [r4, #1792]	; 0x700
   3a990:	e1500002 	cmp	r0, r2
   3a994:	e0833101 	add	r3, r3, r1, lsl #2
   3a998:	8afffff8 	bhi	3a980 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x234>
   3a99c:	e2855004 	add	r5, r5, #4
   3a9a0:	e1580005 	cmp	r8, r5
   3a9a4:	e1a060a6 	lsr	r6, r6, #1
   3a9a8:	0a000004 	beq	3a9c0 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x274>
   3a9ac:	e5942708 	ldr	r2, [r4, #1800]	; 0x708
   3a9b0:	eaffffdf 	b	3a934 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1e8>
   3a9b4:	e12fff33 	blx	r3
   3a9b8:	e1a07000 	mov	r7, r0
   3a9bc:	eaffff6d 	b	3a778 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   3a9c0:	e59dc000 	ldr	ip, [sp]
   3a9c4:	e5942720 	ldr	r2, [r4, #1824]	; 0x720
   3a9c8:	e28cc001 	add	ip, ip, #1
   3a9cc:	e594370c 	ldr	r3, [r4, #1804]	; 0x70c
   3a9d0:	e152000c 	cmp	r2, ip
   3a9d4:	e08ee003 	add	lr, lr, r3
   3a9d8:	8affffc9 	bhi	3a904 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1b8>
   3a9dc:	e59d300c 	ldr	r3, [sp, #12]
   3a9e0:	e5933be8 	ldr	r3, [r3, #3048]	; 0xbe8
   3a9e4:	e3530000 	cmp	r3, #0
   3a9e8:	1affff69 	bne	3a794 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x48>
   3a9ec:	e59d300c 	ldr	r3, [sp, #12]
   3a9f0:	e5933be4 	ldr	r3, [r3, #3044]	; 0xbe4
   3a9f4:	e3530000 	cmp	r3, #0
   3a9f8:	03a03001 	moveq	r3, #1
   3a9fc:	05c436f0 	strbeq	r3, [r4, #1776]	; 0x6f0
   3aa00:	eaffff63 	b	3a794 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x48>
   3aa04:	e594c714 	ldr	ip, [r4, #1812]	; 0x714
   3aa08:	e5947710 	ldr	r7, [r4, #1808]	; 0x710
   3aa0c:	e00c019c 	mul	ip, ip, r1
   3aa10:	e2812b06 	add	r2, r1, #6144	; 0x1800
   3aa14:	e0222390 	mla	r2, r0, r3, r2
   3aa18:	e02cc397 	mla	ip, r7, r3, ip
   3aa1c:	e5d486f0 	ldrb	r8, [r4, #1776]	; 0x6f0
   3aa20:	e58dc004 	str	ip, [sp, #4]
   3aa24:	e3580000 	cmp	r8, #0
   3aa28:	e7db9002 	ldrb	r9, [fp, r2]
   3aa2c:	0affff81 	beq	3a838 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   3aa30:	e086c002 	add	ip, r6, r2
   3aa34:	e28ccd6f 	add	ip, ip, #7104	; 0x1bc0
   3aa38:	e5dcc030 	ldrb	ip, [ip, #48]	; 0x30
   3aa3c:	e159000c 	cmp	r9, ip
   3aa40:	1affff7c 	bne	3a838 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   3aa44:	e35e001f 	cmp	lr, #31
   3aa48:	1affff7f 	bne	3a84c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   3aa4c:	e3530017 	cmp	r3, #23
   3aa50:	1affff7d 	bne	3a84c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   3aa54:	eaffff77 	b	3a838 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   3aa58:	e086c002 	add	ip, r6, r2
   3aa5c:	e28ccd6f 	add	ip, ip, #7104	; 0x1bc0
   3aa60:	e5dcc030 	ldrb	ip, [ip, #48]	; 0x30
   3aa64:	e159000c 	cmp	r9, ip
   3aa68:	1affff72 	bne	3a838 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   3aa6c:	eaffff76 	b	3a84c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   3aa70:	e5973000 	ldr	r3, [r7]
   3aa74:	e59f21ac 	ldr	r2, [pc, #428]	; 3ac28 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4dc>
   3aa78:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   3aa7c:	e1530002 	cmp	r3, r2
   3aa80:	0a000002 	beq	3aa90 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x344>
   3aa84:	e1a00007 	mov	r0, r7
   3aa88:	e28d1010 	add	r1, sp, #16
   3aa8c:	e12fff33 	blx	r3
   3aa90:	e59d201c 	ldr	r2, [sp, #28]
   3aa94:	e59d1014 	ldr	r1, [sp, #20]
   3aa98:	e3520000 	cmp	r2, #0
   3aa9c:	e2823003 	add	r3, r2, #3
   3aaa0:	a1a03002 	movge	r3, r2
   3aaa4:	e59d0018 	ldr	r0, [sp, #24]
   3aaa8:	e58426fc 	str	r2, [r4, #1788]	; 0x6fc
   3aaac:	e0000190 	mul	r0, r0, r1
   3aab0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
   3aab4:	e1a03143 	asr	r3, r3, #2
   3aab8:	e0020091 	mul	r2, r1, r0
   3aabc:	e5961000 	ldr	r1, [r6]
   3aac0:	e59d0020 	ldr	r0, [sp, #32]
   3aac4:	e5843700 	str	r3, [r4, #1792]	; 0x700
   3aac8:	e58426f8 	str	r2, [r4, #1784]	; 0x6f8
   3aacc:	e5913014 	ldr	r3, [r1, #20]
   3aad0:	e58406f4 	str	r0, [r4, #1780]	; 0x6f4
   3aad4:	e1a00006 	mov	r0, r6
   3aad8:	e12fff33 	blx	r3
   3aadc:	e5963000 	ldr	r3, [r6]
   3aae0:	e590207c 	ldr	r2, [r0, #124]	; 0x7c
   3aae4:	e5933014 	ldr	r3, [r3, #20]
   3aae8:	e1a00006 	mov	r0, r6
   3aaec:	e5842704 	str	r2, [r4, #1796]	; 0x704
   3aaf0:	e12fff33 	blx	r3
   3aaf4:	e5963000 	ldr	r3, [r6]
   3aaf8:	e5902080 	ldr	r2, [r0, #128]	; 0x80
   3aafc:	e5933014 	ldr	r3, [r3, #20]
   3ab00:	e1a00006 	mov	r0, r6
   3ab04:	e5842708 	str	r2, [r4, #1800]	; 0x708
   3ab08:	e12fff33 	blx	r3
   3ab0c:	e5963000 	ldr	r3, [r6]
   3ab10:	e5908078 	ldr	r8, [r0, #120]	; 0x78
   3ab14:	e5933014 	ldr	r3, [r3, #20]
   3ab18:	e1a00006 	mov	r0, r6
   3ab1c:	e12fff33 	blx	r3
   3ab20:	e5963000 	ldr	r3, [r6]
   3ab24:	e590706c 	ldr	r7, [r0, #108]	; 0x6c
   3ab28:	e5933014 	ldr	r3, [r3, #20]
   3ab2c:	e1a00006 	mov	r0, r6
   3ab30:	e12fff33 	blx	r3
   3ab34:	e0070897 	mul	r7, r7, r8
   3ab38:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   3ab3c:	e1a00007 	mov	r0, r7
   3ab40:	eb0013db 	bl	3fab4 <__aeabi_idiv>
   3ab44:	e5963000 	ldr	r3, [r6]
   3ab48:	e584070c 	str	r0, [r4, #1804]	; 0x70c
   3ab4c:	e5933014 	ldr	r3, [r3, #20]
   3ab50:	e1a00006 	mov	r0, r6
   3ab54:	e12fff33 	blx	r3
   3ab58:	e5963000 	ldr	r3, [r6]
   3ab5c:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   3ab60:	e5933014 	ldr	r3, [r3, #20]
   3ab64:	e1a00006 	mov	r0, r6
   3ab68:	e5842720 	str	r2, [r4, #1824]	; 0x720
   3ab6c:	e12fff33 	blx	r3
   3ab70:	e5963000 	ldr	r3, [r6]
   3ab74:	e5902074 	ldr	r2, [r0, #116]	; 0x74
   3ab78:	e5933014 	ldr	r3, [r3, #20]
   3ab7c:	e1a00006 	mov	r0, r6
   3ab80:	e5842724 	str	r2, [r4, #1828]	; 0x724
   3ab84:	e12fff33 	blx	r3
   3ab88:	e59436fc 	ldr	r3, [r4, #1788]	; 0x6fc
   3ab8c:	e5941708 	ldr	r1, [r4, #1800]	; 0x708
   3ab90:	e5902078 	ldr	r2, [r0, #120]	; 0x78
   3ab94:	e0010193 	mul	r1, r3, r1
   3ab98:	e5940724 	ldr	r0, [r4, #1828]	; 0x724
   3ab9c:	e5943704 	ldr	r3, [r4, #1796]	; 0x704
   3aba0:	e0020192 	mul	r2, r2, r1
   3aba4:	e0030093 	mul	r3, r3, r0
   3aba8:	e5961000 	ldr	r1, [r6]
   3abac:	e1a00006 	mov	r0, r6
   3abb0:	e5842710 	str	r2, [r4, #1808]	; 0x710
   3abb4:	e5843714 	str	r3, [r4, #1812]	; 0x714
   3abb8:	e5913014 	ldr	r3, [r1, #20]
   3abbc:	e12fff33 	blx	r3
   3abc0:	e5963000 	ldr	r3, [r6]
   3abc4:	e590706c 	ldr	r7, [r0, #108]	; 0x6c
   3abc8:	e5933014 	ldr	r3, [r3, #20]
   3abcc:	e1a00006 	mov	r0, r6
   3abd0:	e12fff33 	blx	r3
   3abd4:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   3abd8:	e1a00007 	mov	r0, r7
   3abdc:	eb0013b4 	bl	3fab4 <__aeabi_idiv>
   3abe0:	e5963000 	ldr	r3, [r6]
   3abe4:	e5840718 	str	r0, [r4, #1816]	; 0x718
   3abe8:	e5933014 	ldr	r3, [r3, #20]
   3abec:	e1a00006 	mov	r0, r6
   3abf0:	e12fff33 	blx	r3
   3abf4:	e5963000 	ldr	r3, [r6]
   3abf8:	e5907070 	ldr	r7, [r0, #112]	; 0x70
   3abfc:	e5933014 	ldr	r3, [r3, #20]
   3ac00:	e1a00006 	mov	r0, r6
   3ac04:	e12fff33 	blx	r3
   3ac08:	e5901078 	ldr	r1, [r0, #120]	; 0x78
   3ac0c:	e1a00007 	mov	r0, r7
   3ac10:	eb0013a7 	bl	3fab4 <__aeabi_idiv>
   3ac14:	e584071c 	str	r0, [r4, #1820]	; 0x71c
   3ac18:	eafffeea 	b	3a7c8 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x7c>
   3ac1c:	000389dc 	.word	0x000389dc
   3ac20:	000017ff 	.word	0x000017ff
   3ac24:	00048e24 	.word	0x00048e24
   3ac28:	0003acd4 	.word	0x0003acd4

0003ac2c <McZXSpectrum::service()>:
   3ac2c:	e92d4010 	push	{r4, lr}
   3ac30:	e2804a01 	add	r4, r0, #4096	; 0x1000
   3ac34:	e5d43be0 	ldrb	r3, [r4, #3040]	; 0xbe0
   3ac38:	e2802a03 	add	r2, r0, #12288	; 0x3000
   3ac3c:	e3530000 	cmp	r3, #0
   3ac40:	13a03000 	movne	r3, #0
   3ac44:	11a01003 	movne	r1, r3
   3ac48:	15843bec 	strne	r3, [r4, #3052]	; 0xbec
   3ac4c:	15c43be0 	strbne	r3, [r4, #3040]	; 0xbe0
   3ac50:	e592c71c 	ldr	ip, [r2, #1820]	; 0x71c
   3ac54:	e5923718 	ldr	r3, [r2, #1816]	; 0x718
   3ac58:	05941bec 	ldreq	r1, [r4, #3052]	; 0xbec
   3ac5c:	e0030c93 	mul	r3, r3, ip
   3ac60:	e1530001 	cmp	r3, r1
   3ac64:	08bd8010 	popeq	{r4, pc}
   3ac68:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   3ac6c:	e28010e0 	add	r1, r0, #224	; 0xe0
   3ac70:	ebfffeb5 	bl	3a74c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   3ac74:	e5943bec 	ldr	r3, [r4, #3052]	; 0xbec
   3ac78:	e2833001 	add	r3, r3, #1
   3ac7c:	e5843bec 	str	r3, [r4, #3052]	; 0xbec
   3ac80:	e8bd8010 	pop	{r4, pc}

0003ac84 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)>:
   3ac84:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3ac88:	e1a06000 	mov	r6, r0
   3ac8c:	e3a000ff 	mov	r0, #255	; 0xff
   3ac90:	e2827006 	add	r7, r2, #6
   3ac94:	e0865101 	add	r5, r6, r1, lsl #2
   3ac98:	e3510000 	cmp	r1, #0
   3ac9c:	da000008 	ble	3acc4 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x40>
   3aca0:	e1a03006 	mov	r3, r6
   3aca4:	e3a0c001 	mov	ip, #1
   3aca8:	e5d24000 	ldrb	r4, [r2]
   3acac:	e493e004 	ldr	lr, [r3], #4
   3acb0:	e15e0004 	cmp	lr, r4
   3acb4:	01c0000c 	biceq	r0, r0, ip
   3acb8:	e1550003 	cmp	r5, r3
   3acbc:	e1a0c08c 	lsl	ip, ip, #1
   3acc0:	1afffff9 	bne	3acac <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x28>
   3acc4:	e2822001 	add	r2, r2, #1
   3acc8:	e1520007 	cmp	r2, r7
   3accc:	1afffff1 	bne	3ac98 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x14>
   3acd0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003acd4 <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3acd4:	e12fff1e 	bx	lr

0003acd8 <McBase::getDescriptorTable()>:
   3acd8:	e2800008 	add	r0, r0, #8
   3acdc:	e12fff1e 	bx	lr

0003ace0 <McBase::getMachineName()>:
   3ace0:	e2800008 	add	r0, r0, #8
   3ace4:	e12fff1e 	bx	lr

0003ace8 <McBase::machineHeartbeat()>:
   3ace8:	e12fff1e 	bx	lr

0003acec <McBase::reset(bool, bool)>:
   3acec:	e3a00000 	mov	r0, #0
   3acf0:	e12fff1e 	bx	lr

0003acf4 <McBase::canProcFileType(char const*)>:
   3acf4:	e3a00000 	mov	r0, #0
   3acf8:	e12fff1e 	bx	lr

0003acfc <McBase::getHwManager()>:
   3acfc:	e5903004 	ldr	r3, [r0, #4]
   3ad00:	e5930008 	ldr	r0, [r3, #8]
   3ad04:	e12fff1e 	bx	lr

0003ad08 <McBase::getTargetProgrammer()>:
   3ad08:	e5903004 	ldr	r3, [r0, #4]
   3ad0c:	e5930010 	ldr	r0, [r3, #16]
   3ad10:	e12fff1e 	bx	lr

0003ad14 <McBase::isCalled(char const*, unsigned long&)>:
   3ad14:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   3ad18:	e3530000 	cmp	r3, #0
   3ad1c:	0a000014 	beq	3ad74 <McBase::isCalled(char const*, unsigned long&)+0x60>
   3ad20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3ad24:	e1a08002 	mov	r8, r2
   3ad28:	e1a07001 	mov	r7, r1
   3ad2c:	e1a06000 	mov	r6, r0
   3ad30:	e3a04000 	mov	r4, #0
   3ad34:	e28050a8 	add	r5, r0, #168	; 0xa8
   3ad38:	ea000003 	b	3ad4c <McBase::isCalled(char const*, unsigned long&)+0x38>
   3ad3c:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
   3ad40:	e2844001 	add	r4, r4, #1
   3ad44:	e1530004 	cmp	r3, r4
   3ad48:	9a000007 	bls	3ad6c <McBase::isCalled(char const*, unsigned long&)+0x58>
   3ad4c:	e1a01007 	mov	r1, r7
   3ad50:	e5b50004 	ldr	r0, [r5, #4]!
   3ad54:	ebffbb1d 	bl	299d0 <strcasecmp>
   3ad58:	e3500000 	cmp	r0, #0
   3ad5c:	1afffff6 	bne	3ad3c <McBase::isCalled(char const*, unsigned long&)+0x28>
   3ad60:	e5884000 	str	r4, [r8]
   3ad64:	e3a00001 	mov	r0, #1
   3ad68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3ad6c:	e3a00000 	mov	r0, #0
   3ad70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3ad74:	e3a00000 	mov	r0, #0
   3ad78:	e12fff1e 	bx	lr

0003ad7c <McBase::getMachineNames(char*, unsigned long)>:
   3ad7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ad80:	e3a06000 	mov	r6, #0
   3ad84:	e5c16000 	strb	r6, [r1]
   3ad88:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   3ad8c:	e1530006 	cmp	r3, r6
   3ad90:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ad94:	e1a05002 	mov	r5, r2
   3ad98:	e1a09000 	mov	r9, r0
   3ad9c:	e1a04001 	mov	r4, r1
   3ada0:	e59f705c 	ldr	r7, [pc, #92]	; 3ae04 <McBase::getMachineNames(char*, unsigned long)+0x88>
   3ada4:	e59fa05c 	ldr	sl, [pc, #92]	; 3ae08 <McBase::getMachineNames(char*, unsigned long)+0x8c>
   3ada8:	e28080a8 	add	r8, r0, #168	; 0xa8
   3adac:	e1a02005 	mov	r2, r5
   3adb0:	e1a01007 	mov	r1, r7
   3adb4:	e1a00004 	mov	r0, r4
   3adb8:	ebffcae2 	bl	2d948 <strlcat>
   3adbc:	e1a02005 	mov	r2, r5
   3adc0:	e5b81004 	ldr	r1, [r8, #4]!
   3adc4:	e1a00004 	mov	r0, r4
   3adc8:	ebffcade 	bl	2d948 <strlcat>
   3adcc:	e1a02005 	mov	r2, r5
   3add0:	e1a01007 	mov	r1, r7
   3add4:	e1a00004 	mov	r0, r4
   3add8:	ebffcada 	bl	2d948 <strlcat>
   3addc:	e59930d4 	ldr	r3, [r9, #212]	; 0xd4
   3ade0:	e2866001 	add	r6, r6, #1
   3ade4:	e1560003 	cmp	r6, r3
   3ade8:	2a000004 	bcs	3ae00 <McBase::getMachineNames(char*, unsigned long)+0x84>
   3adec:	e1a02005 	mov	r2, r5
   3adf0:	e1a0100a 	mov	r1, sl
   3adf4:	e1a00004 	mov	r0, r4
   3adf8:	ebffcad2 	bl	2d948 <strlcat>
   3adfc:	eaffffea 	b	3adac <McBase::getMachineNames(char*, unsigned long)+0x30>
   3ae00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ae04:	000488f4 	.word	0x000488f4
   3ae08:	00044b54 	.word	0x00044b54

0003ae0c <McBase::setupDisplay(DisplayBase*)>:
   3ae0c:	e92d4070 	push	{r4, r5, r6, lr}
   3ae10:	e1a04000 	mov	r4, r0
   3ae14:	e1a05001 	mov	r5, r1
   3ae18:	e24dd018 	sub	sp, sp, #24
   3ae1c:	e58010dc 	str	r1, [r0, #220]	; 0xdc
   3ae20:	ebffad9a 	bl	26490 <CLogger::Get()>
   3ae24:	e5942078 	ldr	r2, [r4, #120]	; 0x78
   3ae28:	e5943074 	ldr	r3, [r4, #116]	; 0x74
   3ae2c:	e59f1078 	ldr	r1, [pc, #120]	; 3aeac <McBase::setupDisplay(DisplayBase*)+0xa0>
   3ae30:	e58d2004 	str	r2, [sp, #4]
   3ae34:	e58d3000 	str	r3, [sp]
   3ae38:	e3a02004 	mov	r2, #4
   3ae3c:	e59f306c 	ldr	r3, [pc, #108]	; 3aeb0 <McBase::setupDisplay(DisplayBase*)+0xa4>
   3ae40:	ebffaccf 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3ae44:	e3550000 	cmp	r5, #0
   3ae48:	0a000004 	beq	3ae60 <McBase::setupDisplay(DisplayBase*)+0x54>
   3ae4c:	e5952000 	ldr	r2, [r5]
   3ae50:	e59f305c 	ldr	r3, [pc, #92]	; 3aeb4 <McBase::setupDisplay(DisplayBase*)+0xa8>
   3ae54:	e5926030 	ldr	r6, [r2, #48]	; 0x30
   3ae58:	e1560003 	cmp	r6, r3
   3ae5c:	1a000001 	bne	3ae68 <McBase::setupDisplay(DisplayBase*)+0x5c>
   3ae60:	e28dd018 	add	sp, sp, #24
   3ae64:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ae68:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   3ae6c:	e2841074 	add	r1, r4, #116	; 0x74
   3ae70:	e594e090 	ldr	lr, [r4, #144]	; 0x90
   3ae74:	e891000e 	ldm	r1, {r1, r2, r3}
   3ae78:	e58dc014 	str	ip, [sp, #20]
   3ae7c:	e594c08c 	ldr	ip, [r4, #140]	; 0x8c
   3ae80:	e58de010 	str	lr, [sp, #16]
   3ae84:	e1a00005 	mov	r0, r5
   3ae88:	e5945088 	ldr	r5, [r4, #136]	; 0x88
   3ae8c:	e58dc00c 	str	ip, [sp, #12]
   3ae90:	e594e084 	ldr	lr, [r4, #132]	; 0x84
   3ae94:	e594c080 	ldr	ip, [r4, #128]	; 0x80
   3ae98:	e58d5008 	str	r5, [sp, #8]
   3ae9c:	e88d5000 	stm	sp, {ip, lr}
   3aea0:	e12fff36 	blx	r6
   3aea4:	e28dd018 	add	sp, sp, #24
   3aea8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3aeac:	00048fd0 	.word	0x00048fd0
   3aeb0:	00049050 	.word	0x00049050
   3aeb4:	0003b1f0 	.word	0x0003b1f0

0003aeb8 <McBase::setupMachine(char const*, char const*)>:
   3aeb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3aebc:	e3a0e000 	mov	lr, #0
   3aec0:	e24dd070 	sub	sp, sp, #112	; 0x70
   3aec4:	e28d3070 	add	r3, sp, #112	; 0x70
   3aec8:	e590c000 	ldr	ip, [r0]
   3aecc:	e523e068 	str	lr, [r3, #-104]!	; 0xffffff98
   3aed0:	e1a06002 	mov	r6, r2
   3aed4:	e59c5000 	ldr	r5, [ip]
   3aed8:	e1a02003 	mov	r2, r3
   3aedc:	e1a04000 	mov	r4, r0
   3aee0:	e1a08001 	mov	r8, r1
   3aee4:	e12fff35 	blx	r5
   3aee8:	e2507000 	subs	r7, r0, #0
   3aeec:	0a00004f 	beq	3b030 <McBase::setupMachine(char const*, char const*)+0x178>
   3aef0:	e59d3008 	ldr	r3, [sp, #8]
   3aef4:	e2845008 	add	r5, r4, #8
   3aef8:	e0842103 	add	r2, r4, r3, lsl #2
   3aefc:	e58430d8 	str	r3, [r4, #216]	; 0xd8
   3af00:	e59210ac 	ldr	r1, [r2, #172]	; 0xac
   3af04:	e1a00005 	mov	r0, r5
   3af08:	e3a020a4 	mov	r2, #164	; 0xa4
   3af0c:	ebffbcaf 	bl	2a1d0 <memcpy>
   3af10:	ebffad5e 	bl	26490 <CLogger::Get()>
   3af14:	e5943000 	ldr	r3, [r4]
   3af18:	e59f81fc 	ldr	r8, [pc, #508]	; 3b11c <McBase::setupMachine(char const*, char const*)+0x264>
   3af1c:	e5933008 	ldr	r3, [r3, #8]
   3af20:	e1a09000 	mov	r9, r0
   3af24:	e1530008 	cmp	r3, r8
   3af28:	01a00005 	moveq	r0, r5
   3af2c:	1a000052 	bne	3b07c <McBase::setupMachine(char const*, char const*)+0x1c4>
   3af30:	e58d0000 	str	r0, [sp]
   3af34:	e59f31e4 	ldr	r3, [pc, #484]	; 3b120 <McBase::setupMachine(char const*, char const*)+0x268>
   3af38:	e3a02004 	mov	r2, #4
   3af3c:	e59f11e0 	ldr	r1, [pc, #480]	; 3b124 <McBase::setupMachine(char const*, char const*)+0x26c>
   3af40:	e1a00009 	mov	r0, r9
   3af44:	ebffac8e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3af48:	e5943000 	ldr	r3, [r4]
   3af4c:	e59f11d4 	ldr	r1, [pc, #468]	; 3b128 <McBase::setupMachine(char const*, char const*)+0x270>
   3af50:	e593201c 	ldr	r2, [r3, #28]
   3af54:	e1520001 	cmp	r2, r1
   3af58:	1a00003d 	bne	3b054 <McBase::setupMachine(char const*, char const*)+0x19c>
   3af5c:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3af60:	e59f91c4 	ldr	r9, [pc, #452]	; 3b12c <McBase::setupMachine(char const*, char const*)+0x274>
   3af64:	e1530009 	cmp	r3, r9
   3af68:	1a000040 	bne	3b070 <McBase::setupMachine(char const*, char const*)+0x1b8>
   3af6c:	e5943004 	ldr	r3, [r4, #4]
   3af70:	e5930008 	ldr	r0, [r3, #8]
   3af74:	ebffe66f 	bl	34938 <HwManager::disableAll()>
   3af78:	e5943000 	ldr	r3, [r4]
   3af7c:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3af80:	e1530009 	cmp	r3, r9
   3af84:	1a00005a 	bne	3b0f4 <McBase::setupMachine(char const*, char const*)+0x23c>
   3af88:	e5943004 	ldr	r3, [r4, #4]
   3af8c:	e5930008 	ldr	r0, [r3, #8]
   3af90:	e1a02006 	mov	r2, r6
   3af94:	e59f1194 	ldr	r1, [pc, #404]	; 3b130 <McBase::setupMachine(char const*, char const*)+0x278>
   3af98:	ebffe73e 	bl	34c98 <HwManager::setupFromJson(char const*, char const*)>
   3af9c:	e594c004 	ldr	ip, [r4, #4]
   3afa0:	e1a01006 	mov	r1, r6
   3afa4:	e28d200c 	add	r2, sp, #12
   3afa8:	e3a03064 	mov	r3, #100	; 0x64
   3afac:	e59f0180 	ldr	r0, [pc, #384]	; 3b134 <McBase::setupMachine(char const*, char const*)+0x27c>
   3afb0:	e59c600c 	ldr	r6, [ip, #12]
   3afb4:	e594909c 	ldr	r9, [r4, #156]	; 0x9c
   3afb8:	ebffcafc 	bl	2dbb0 <jsonGetValueForKey>
   3afbc:	e3500000 	cmp	r0, #0
   3afc0:	1a00003d 	bne	3b0bc <McBase::setupMachine(char const*, char const*)+0x204>
   3afc4:	e1a00006 	mov	r0, r6
   3afc8:	ebffde5f 	bl	3294c <BusAccess::clockGetMinFreqHz()>
   3afcc:	e1590000 	cmp	r9, r0
   3afd0:	2a00002c 	bcs	3b088 <McBase::setupMachine(char const*, char const*)+0x1d0>
   3afd4:	e1a00006 	mov	r0, r6
   3afd8:	e3a01000 	mov	r1, #0
   3afdc:	ebffdde5 	bl	32778 <BusAccess::clockEnable(bool)>
   3afe0:	e5943000 	ldr	r3, [r4]
   3afe4:	e59f214c 	ldr	r2, [pc, #332]	; 3b138 <McBase::setupMachine(char const*, char const*)+0x280>
   3afe8:	e5933018 	ldr	r3, [r3, #24]
   3afec:	e1530002 	cmp	r3, r2
   3aff0:	1a000046 	bne	3b110 <McBase::setupMachine(char const*, char const*)+0x258>
   3aff4:	ebffad25 	bl	26490 <CLogger::Get()>
   3aff8:	e5943000 	ldr	r3, [r4]
   3affc:	e1a06000 	mov	r6, r0
   3b000:	e5933008 	ldr	r3, [r3, #8]
   3b004:	e1530008 	cmp	r3, r8
   3b008:	1a00003c 	bne	3b100 <McBase::setupMachine(char const*, char const*)+0x248>
   3b00c:	e1a00006 	mov	r0, r6
   3b010:	e58d5000 	str	r5, [sp]
   3b014:	e59f3120 	ldr	r3, [pc, #288]	; 3b13c <McBase::setupMachine(char const*, char const*)+0x284>
   3b018:	e3a02004 	mov	r2, #4
   3b01c:	e59f1100 	ldr	r1, [pc, #256]	; 3b124 <McBase::setupMachine(char const*, char const*)+0x26c>
   3b020:	ebffac57 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b024:	e1a00007 	mov	r0, r7
   3b028:	e28dd070 	add	sp, sp, #112	; 0x70
   3b02c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b030:	ebffad16 	bl	26490 <CLogger::Get()>
   3b034:	e58d8000 	str	r8, [sp]
   3b038:	e59f3100 	ldr	r3, [pc, #256]	; 3b140 <McBase::setupMachine(char const*, char const*)+0x288>
   3b03c:	e3a02002 	mov	r2, #2
   3b040:	e59f10dc 	ldr	r1, [pc, #220]	; 3b124 <McBase::setupMachine(char const*, char const*)+0x26c>
   3b044:	ebffac4e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3b048:	e1a00007 	mov	r0, r7
   3b04c:	e28dd070 	add	sp, sp, #112	; 0x70
   3b050:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b054:	e1a00004 	mov	r0, r4
   3b058:	e12fff32 	blx	r2
   3b05c:	e5943000 	ldr	r3, [r4]
   3b060:	e59f90c4 	ldr	r9, [pc, #196]	; 3b12c <McBase::setupMachine(char const*, char const*)+0x274>
   3b064:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3b068:	e1530009 	cmp	r3, r9
   3b06c:	0affffbe 	beq	3af6c <McBase::setupMachine(char const*, char const*)+0xb4>
   3b070:	e1a00004 	mov	r0, r4
   3b074:	e12fff33 	blx	r3
   3b078:	eaffffbd 	b	3af74 <McBase::setupMachine(char const*, char const*)+0xbc>
   3b07c:	e1a00004 	mov	r0, r4
   3b080:	e12fff33 	blx	r3
   3b084:	eaffffa9 	b	3af30 <McBase::setupMachine(char const*, char const*)+0x78>
   3b088:	e1a00006 	mov	r0, r6
   3b08c:	ebffde30 	bl	32954 <BusAccess::clockGetMaxFreqHz()>
   3b090:	e1590000 	cmp	r9, r0
   3b094:	8affffce 	bhi	3afd4 <McBase::setupMachine(char const*, char const*)+0x11c>
   3b098:	e1a00006 	mov	r0, r6
   3b09c:	ebffdcb4 	bl	32374 <BusAccess::clockSetup()>
   3b0a0:	e1a01009 	mov	r1, r9
   3b0a4:	e1a00006 	mov	r0, r6
   3b0a8:	ebffdd2a 	bl	32558 <BusAccess::clockSetFreqHz(unsigned long)>
   3b0ac:	e1a00006 	mov	r0, r6
   3b0b0:	e3a01001 	mov	r1, #1
   3b0b4:	ebffddaf 	bl	32778 <BusAccess::clockEnable(bool)>
   3b0b8:	eaffffc8 	b	3afe0 <McBase::setupMachine(char const*, char const*)+0x128>
   3b0bc:	e3a0200a 	mov	r2, #10
   3b0c0:	e3a01000 	mov	r1, #0
   3b0c4:	e28d000c 	add	r0, sp, #12
   3b0c8:	ebffbb68 	bl	29e70 <strtoul>
   3b0cc:	e1a0a000 	mov	sl, r0
   3b0d0:	e1a00006 	mov	r0, r6
   3b0d4:	ebffde1c 	bl	3294c <BusAccess::clockGetMinFreqHz()>
   3b0d8:	e15a0000 	cmp	sl, r0
   3b0dc:	3affffb8 	bcc	3afc4 <McBase::setupMachine(char const*, char const*)+0x10c>
   3b0e0:	e1a00006 	mov	r0, r6
   3b0e4:	ebffde1a 	bl	32954 <BusAccess::clockGetMaxFreqHz()>
   3b0e8:	e15a0000 	cmp	sl, r0
   3b0ec:	91a0900a 	movls	r9, sl
   3b0f0:	eaffffb3 	b	3afc4 <McBase::setupMachine(char const*, char const*)+0x10c>
   3b0f4:	e1a00004 	mov	r0, r4
   3b0f8:	e12fff33 	blx	r3
   3b0fc:	eaffffa3 	b	3af90 <McBase::setupMachine(char const*, char const*)+0xd8>
   3b100:	e1a00004 	mov	r0, r4
   3b104:	e12fff33 	blx	r3
   3b108:	e1a05000 	mov	r5, r0
   3b10c:	eaffffbe 	b	3b00c <McBase::setupMachine(char const*, char const*)+0x154>
   3b110:	e1a00004 	mov	r0, r4
   3b114:	e12fff33 	blx	r3
   3b118:	eaffffb5 	b	3aff4 <McBase::setupMachine(char const*, char const*)+0x13c>
   3b11c:	0003ace0 	.word	0x0003ace0
   3b120:	00049094 	.word	0x00049094
   3b124:	00048fd0 	.word	0x00048fd0
   3b128:	0003b1f8 	.word	0x0003b1f8
   3b12c:	0003acfc 	.word	0x0003acfc
   3b130:	000490a4 	.word	0x000490a4
   3b134:	00048904 	.word	0x00048904
   3b138:	0003b1f4 	.word	0x0003b1f4
   3b13c:	000490a8 	.word	0x000490a8
   3b140:	00049070 	.word	0x00049070

0003b144 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)>:
   3b144:	e92d4070 	push	{r4, r5, r6, lr}
   3b148:	e1a06001 	mov	r6, r1
   3b14c:	e59f1094 	ldr	r1, [pc, #148]	; 3b1e8 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)+0xa4>
   3b150:	e3530000 	cmp	r3, #0
   3b154:	e1a05000 	mov	r5, r0
   3b158:	e8800042 	stm	r0, {r1, r6}
   3b15c:	0a000019 	beq	3b1c8 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)+0x84>
   3b160:	e1a0e002 	mov	lr, r2
   3b164:	e3a00000 	mov	r0, #0
   3b168:	e28540a8 	add	r4, r5, #168	; 0xa8
   3b16c:	e2800001 	add	r0, r0, #1
   3b170:	e3500009 	cmp	r0, #9
   3b174:	93a0c000 	movls	ip, #0
   3b178:	83a0c001 	movhi	ip, #1
   3b17c:	e1530000 	cmp	r3, r0
   3b180:	938cc001 	orrls	ip, ip, #1
   3b184:	e35c0000 	cmp	ip, #0
   3b188:	e5a4e004 	str	lr, [r4, #4]!
   3b18c:	e28ee0a4 	add	lr, lr, #164	; 0xa4
   3b190:	0afffff5 	beq	3b16c <McBase::McBase(McManager&, McVariantTable const*, unsigned long)+0x28>
   3b194:	e3a00000 	mov	r0, #0
   3b198:	e1a01002 	mov	r1, r2
   3b19c:	e58500dc 	str	r0, [r5, #220]	; 0xdc
   3b1a0:	e58500d8 	str	r0, [r5, #216]	; 0xd8
   3b1a4:	e58530d4 	str	r3, [r5, #212]	; 0xd4
   3b1a8:	e3a020a4 	mov	r2, #164	; 0xa4
   3b1ac:	e2850008 	add	r0, r5, #8
   3b1b0:	ebffbc06 	bl	2a1d0 <memcpy>
   3b1b4:	e1a00006 	mov	r0, r6
   3b1b8:	e1a01005 	mov	r1, r5
   3b1bc:	ebfff2e8 	bl	37d64 <McManager::add(McBase*)>
   3b1c0:	e1a00005 	mov	r0, r5
   3b1c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b1c8:	e58030d4 	str	r3, [r0, #212]	; 0xd4
   3b1cc:	e58030dc 	str	r3, [r0, #220]	; 0xdc
   3b1d0:	e58030d8 	str	r3, [r0, #216]	; 0xd8
   3b1d4:	e3a020a4 	mov	r2, #164	; 0xa4
   3b1d8:	e59f100c 	ldr	r1, [pc, #12]	; 3b1ec <McBase::McBase(McManager&, McVariantTable const*, unsigned long)+0xa8>
   3b1dc:	e2800008 	add	r0, r0, #8
   3b1e0:	ebffbbfa 	bl	2a1d0 <memcpy>
   3b1e4:	eafffff2 	b	3b1b4 <McBase::McBase(McManager&, McVariantTable const*, unsigned long)+0x70>
   3b1e8:	00048fe0 	.word	0x00048fe0
   3b1ec:	0004a0d0 	.word	0x0004a0d0

0003b1f0 <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3b1f0:	e12fff1e 	bx	lr

0003b1f4 <McBase::enableMachine()>:
   3b1f4:	e12fff1e 	bx	lr

0003b1f8 <McBase::disableMachine()>:
   3b1f8:	e12fff1e 	bx	lr

0003b1fc <TermAnsi::~TermAnsi()>:
   3b1fc:	e92d4010 	push	{r4, lr}
   3b200:	e1a04000 	mov	r4, r0
   3b204:	e59f300c 	ldr	r3, [pc, #12]	; 3b218 <TermAnsi::~TermAnsi()+0x1c>
   3b208:	e5803000 	str	r3, [r0]
   3b20c:	eb0007b4 	bl	3d0e4 <TermEmu::~TermEmu()>
   3b210:	e1a00004 	mov	r0, r4
   3b214:	e8bd8010 	pop	{r4, pc}
   3b218:	000490bc 	.word	0x000490bc

0003b21c <TermAnsi::~TermAnsi()>:
   3b21c:	e92d4010 	push	{r4, lr}
   3b220:	e1a04000 	mov	r4, r0
   3b224:	e59f3018 	ldr	r3, [pc, #24]	; 3b244 <TermAnsi::~TermAnsi()+0x28>
   3b228:	e5803000 	str	r3, [r0]
   3b22c:	eb0007ac 	bl	3d0e4 <TermEmu::~TermEmu()>
   3b230:	e1a00004 	mov	r0, r4
   3b234:	e59f100c 	ldr	r1, [pc, #12]	; 3b248 <TermAnsi::~TermAnsi()+0x2c>
   3b238:	ebffbdcb 	bl	2a96c <operator delete(void*, unsigned int)>
   3b23c:	e1a00004 	mov	r0, r4
   3b240:	e8bd8010 	pop	{r4, pc}
   3b244:	000490bc 	.word	0x000490bc
   3b248:	000008ac 	.word	0x000008ac

0003b24c <TermAnsi::TermAnsi()>:
   3b24c:	e92d4010 	push	{r4, lr}
   3b250:	e1a04000 	mov	r4, r0
   3b254:	eb0007e4 	bl	3d1ec <TermEmu::TermEmu()>
   3b258:	e1a03004 	mov	r3, r4
   3b25c:	e3a01020 	mov	r1, #32
   3b260:	e3a0000f 	mov	r0, #15
   3b264:	e3a02000 	mov	r2, #0
   3b268:	e59fe06c 	ldr	lr, [pc, #108]	; 3b2dc <TermAnsi::TermAnsi()+0x90>
   3b26c:	e284ce82 	add	ip, r4, #2080	; 0x820
   3b270:	e483e05c 	str	lr, [r3], #92	; 0x5c
   3b274:	e28cc00c 	add	ip, ip, #12
   3b278:	e5c31000 	strb	r1, [r3]
   3b27c:	e5c30001 	strb	r0, [r3, #1]
   3b280:	e5c32002 	strb	r2, [r3, #2]
   3b284:	e5c32003 	strb	r2, [r3, #3]
   3b288:	e2833004 	add	r3, r3, #4
   3b28c:	e153000c 	cmp	r3, ip
   3b290:	1afffff8 	bne	3b278 <TermAnsi::TermAnsi()+0x2c>
   3b294:	e3a0305f 	mov	r3, #95	; 0x5f
   3b298:	e5c40891 	strb	r0, [r4, #2193]	; 0x891
   3b29c:	e5c40895 	strb	r0, [r4, #2197]	; 0x895
   3b2a0:	e5c41890 	strb	r1, [r4, #2192]	; 0x890
   3b2a4:	e5c42892 	strb	r2, [r4, #2194]	; 0x892
   3b2a8:	e5c42893 	strb	r2, [r4, #2195]	; 0x893
   3b2ac:	e5c41894 	strb	r1, [r4, #2196]	; 0x894
   3b2b0:	e5c42896 	strb	r2, [r4, #2198]	; 0x896
   3b2b4:	e5c42897 	strb	r2, [r4, #2199]	; 0x897
   3b2b8:	e5842898 	str	r2, [r4, #2200]	; 0x898
   3b2bc:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   3b2c0:	e5c428a0 	strb	r2, [r4, #2208]	; 0x8a0
   3b2c4:	e5c428a1 	strb	r2, [r4, #2209]	; 0x8a1
   3b2c8:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   3b2cc:	e58418a8 	str	r1, [r4, #2216]	; 0x8a8
   3b2d0:	e58438a4 	str	r3, [r4, #2212]	; 0x8a4
   3b2d4:	e1a00004 	mov	r0, r4
   3b2d8:	e8bd8010 	pop	{r4, pc}
   3b2dc:	000490bc 	.word	0x000490bc

0003b2e0 <TermAnsi::fixcursor()>:
   3b2e0:	e590c010 	ldr	ip, [r0, #16]
   3b2e4:	e5902018 	ldr	r2, [r0, #24]
   3b2e8:	e590100c 	ldr	r1, [r0, #12]
   3b2ec:	e5903014 	ldr	r3, [r0, #20]
   3b2f0:	e24cc001 	sub	ip, ip, #1
   3b2f4:	e152000c 	cmp	r2, ip
   3b2f8:	e2411001 	sub	r1, r1, #1
   3b2fc:	21a0200c 	movcs	r2, ip
   3b300:	e1530001 	cmp	r3, r1
   3b304:	21a03001 	movcs	r3, r1
   3b308:	e5802018 	str	r2, [r0, #24]
   3b30c:	e5803014 	str	r3, [r0, #20]
   3b310:	e12fff1e 	bx	lr

0003b314 <TermAnsi::consumearg()>:
   3b314:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3b318:	e3530007 	cmp	r3, #7
   3b31c:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   3b320:	92831001 	addls	r1, r3, #1
   3b324:	9283300c 	addls	r3, r3, #12
   3b328:	95801050 	strls	r1, [r0, #80]	; 0x50
   3b32c:	97802103 	strls	r2, [r0, r3, lsl #2]
   3b330:	e3a03000 	mov	r3, #0
   3b334:	e5803054 	str	r3, [r0, #84]	; 0x54
   3b338:	e12fff1e 	bx	lr

0003b33c <TermAnsi::resetparser()>:
   3b33c:	e92d4010 	push	{r4, lr}
   3b340:	e3a02020 	mov	r2, #32
   3b344:	e1a04000 	mov	r4, r0
   3b348:	e3a01000 	mov	r1, #0
   3b34c:	e2800030 	add	r0, r0, #48	; 0x30
   3b350:	ebffb927 	bl	297f4 <memset>
   3b354:	e3a03000 	mov	r3, #0
   3b358:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3b35c:	e5843050 	str	r3, [r4, #80]	; 0x50
   3b360:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b364:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3b368:	e8bd8010 	pop	{r4, pc}

0003b36c <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   3b36c:	e3a0c001 	mov	ip, #1
   3b370:	e1510002 	cmp	r1, r2
   3b374:	e5c0c01c 	strb	ip, [r0, #28]
   3b378:	212fff1e 	bxcs	lr
   3b37c:	e2813e82 	add	r3, r1, #2080	; 0x820
   3b380:	e2822e82 	add	r2, r2, #2080	; 0x820
   3b384:	e283300b 	add	r3, r3, #11
   3b388:	e282200b 	add	r2, r2, #11
   3b38c:	e0803003 	add	r3, r0, r3
   3b390:	e0802002 	add	r2, r0, r2
   3b394:	e5e3c001 	strb	ip, [r3, #1]!
   3b398:	e1530002 	cmp	r3, r2
   3b39c:	1afffffc 	bne	3b394 <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   3b3a0:	e12fff1e 	bx	lr

0003b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   3b3a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3b3a8:	e3a0e001 	mov	lr, #1
   3b3ac:	e5c0e01c 	strb	lr, [r0, #28]
   3b3b0:	e3a0e001 	mov	lr, #1
   3b3b4:	e590c010 	ldr	ip, [r0, #16]
   3b3b8:	e15c0001 	cmp	ip, r1
   3b3bc:	924c1001 	subls	r1, ip, #1
   3b3c0:	e080c001 	add	ip, r0, r1
   3b3c4:	e1520003 	cmp	r2, r3
   3b3c8:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   3b3cc:	28bd80f0 	popcs	{r4, r5, r6, r7, pc}
   3b3d0:	e590c00c 	ldr	ip, [r0, #12]
   3b3d4:	e152000c 	cmp	r2, ip
   3b3d8:	33a04000 	movcc	r4, #0
   3b3dc:	33a0600f 	movcc	r6, #15
   3b3e0:	33a05020 	movcc	r5, #32
   3b3e4:	32807028 	addcc	r7, r0, #40	; 0x28
   3b3e8:	3a000003 	bcc	3b3fc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x58>
   3b3ec:	ea000011 	b	3b438 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x94>
   3b3f0:	e590c00c 	ldr	ip, [r0, #12]
   3b3f4:	e15c0002 	cmp	ip, r2
   3b3f8:	9a00000d 	bls	3b434 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x90>
   3b3fc:	e02e219c 	mla	lr, ip, r1, r2
   3b400:	e590c008 	ldr	ip, [r0, #8]
   3b404:	e2822001 	add	r2, r2, #1
   3b408:	e15e000c 	cmp	lr, ip
   3b40c:	21a0c007 	movcs	ip, r7
   3b410:	3590c004 	ldrcc	ip, [r0, #4]
   3b414:	308cc10e 	addcc	ip, ip, lr, lsl #2
   3b418:	e1530002 	cmp	r3, r2
   3b41c:	e5cc4003 	strb	r4, [ip, #3]
   3b420:	e5cc6001 	strb	r6, [ip, #1]
   3b424:	e5cc4002 	strb	r4, [ip, #2]
   3b428:	e5cc5000 	strb	r5, [ip]
   3b42c:	1affffef 	bne	3b3f0 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x4c>
   3b430:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3b434:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3b438:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003b43c <TermAnsi::clearlines(unsigned int, unsigned int)>:
   3b43c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3b440:	e0816002 	add	r6, r1, r2
   3b444:	e1510006 	cmp	r1, r6
   3b448:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   3b44c:	e5903010 	ldr	r3, [r0, #16]
   3b450:	e1a04001 	mov	r4, r1
   3b454:	e1510003 	cmp	r1, r3
   3b458:	e1a05000 	mov	r5, r0
   3b45c:	33a07000 	movcc	r7, #0
   3b460:	3a000003 	bcc	3b474 <TermAnsi::clearlines(unsigned int, unsigned int)+0x38>
   3b464:	ea00000c 	b	3b49c <TermAnsi::clearlines(unsigned int, unsigned int)+0x60>
   3b468:	e5953010 	ldr	r3, [r5, #16]
   3b46c:	e1530004 	cmp	r3, r4
   3b470:	9a000008 	bls	3b498 <TermAnsi::clearlines(unsigned int, unsigned int)+0x5c>
   3b474:	e1a01004 	mov	r1, r4
   3b478:	e595300c 	ldr	r3, [r5, #12]
   3b47c:	e1a02007 	mov	r2, r7
   3b480:	e1a00005 	mov	r0, r5
   3b484:	e2844001 	add	r4, r4, #1
   3b488:	ebffffc5 	bl	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b48c:	e1540006 	cmp	r4, r6
   3b490:	1afffff4 	bne	3b468 <TermAnsi::clearlines(unsigned int, unsigned int)+0x2c>
   3b494:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3b498:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3b49c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003b4a0 <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   3b4a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b4a4:	e1e07001 	mvn	r7, r1
   3b4a8:	e590c010 	ldr	ip, [r0, #16]
   3b4ac:	e5903004 	ldr	r3, [r0, #4]
   3b4b0:	e087700c 	add	r7, r7, ip
   3b4b4:	e1570002 	cmp	r7, r2
   3b4b8:	21a07002 	movcs	r7, r2
   3b4bc:	e3530000 	cmp	r3, #0
   3b4c0:	13570000 	cmpne	r7, #0
   3b4c4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b4c8:	e590600c 	ldr	r6, [r0, #12]
   3b4cc:	e1a05000 	mov	r5, r0
   3b4d0:	e0060796 	mul	r6, r6, r7
   3b4d4:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3b4d8:	83e03000 	mvnhi	r3, #0
   3b4dc:	91a03106 	lslls	r3, r6, #2
   3b4e0:	e1a00003 	mov	r0, r3
   3b4e4:	e1a04001 	mov	r4, r1
   3b4e8:	ebffbd12 	bl	2a938 <operator new[](unsigned int)>
   3b4ec:	e2562001 	subs	r2, r6, #1
   3b4f0:	e1a08000 	mov	r8, r0
   3b4f4:	51a03000 	movpl	r3, r0
   3b4f8:	53a0c020 	movpl	ip, #32
   3b4fc:	53a0000f 	movpl	r0, #15
   3b500:	53a01000 	movpl	r1, #0
   3b504:	4a000007 	bmi	3b528 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x88>
   3b508:	e2422001 	sub	r2, r2, #1
   3b50c:	e3720001 	cmn	r2, #1
   3b510:	e5c3c000 	strb	ip, [r3]
   3b514:	e5c30001 	strb	r0, [r3, #1]
   3b518:	e5c31002 	strb	r1, [r3, #2]
   3b51c:	e5c31003 	strb	r1, [r3, #3]
   3b520:	e2833004 	add	r3, r3, #4
   3b524:	1afffff7 	bne	3b508 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x68>
   3b528:	e595300c 	ldr	r3, [r5, #12]
   3b52c:	e5951004 	ldr	r1, [r5, #4]
   3b530:	e1a06103 	lsl	r6, r3, #2
   3b534:	e0060697 	mul	r6, r7, r6
   3b538:	e1a09104 	lsl	r9, r4, #2
   3b53c:	e0211399 	mla	r1, r9, r3, r1
   3b540:	e1a02006 	mov	r2, r6
   3b544:	e1a00008 	mov	r0, r8
   3b548:	ebffbb20 	bl	2a1d0 <memcpy>
   3b54c:	e5952010 	ldr	r2, [r5, #16]
   3b550:	e595000c 	ldr	r0, [r5, #12]
   3b554:	e5953004 	ldr	r3, [r5, #4]
   3b558:	e0422007 	sub	r2, r2, r7
   3b55c:	e084c007 	add	ip, r4, r7
   3b560:	e1a01100 	lsl	r1, r0, #2
   3b564:	e0422004 	sub	r2, r2, r4
   3b568:	e0020291 	mul	r2, r1, r2
   3b56c:	e0203099 	mla	r0, r9, r0, r3
   3b570:	e0213c91 	mla	r1, r1, ip, r3
   3b574:	ebffb8cb 	bl	298a8 <memmove>
   3b578:	e5953010 	ldr	r3, [r5, #16]
   3b57c:	e595100c 	ldr	r1, [r5, #12]
   3b580:	e5950004 	ldr	r0, [r5, #4]
   3b584:	e0433007 	sub	r3, r3, r7
   3b588:	e1a01101 	lsl	r1, r1, #2
   3b58c:	e0200391 	mla	r0, r1, r3, r0
   3b590:	e1a02006 	mov	r2, r6
   3b594:	e1a01008 	mov	r1, r8
   3b598:	ebffbb0c 	bl	2a1d0 <memcpy>
   3b59c:	e1a00008 	mov	r0, r8
   3b5a0:	ebffbceb 	bl	2a954 <operator delete[](void*)>
   3b5a4:	e5951010 	ldr	r1, [r5, #16]
   3b5a8:	e1a02007 	mov	r2, r7
   3b5ac:	e0411007 	sub	r1, r1, r7
   3b5b0:	e1a00005 	mov	r0, r5
   3b5b4:	ebffffa0 	bl	3b43c <TermAnsi::clearlines(unsigned int, unsigned int)>
   3b5b8:	e3a01001 	mov	r1, #1
   3b5bc:	e5952010 	ldr	r2, [r5, #16]
   3b5c0:	e5c5101c 	strb	r1, [r5, #28]
   3b5c4:	e1540002 	cmp	r4, r2
   3b5c8:	2a000009 	bcs	3b5f4 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x154>
   3b5cc:	e2843e82 	add	r3, r4, #2080	; 0x820
   3b5d0:	e2822e82 	add	r2, r2, #2080	; 0x820
   3b5d4:	e283300b 	add	r3, r3, #11
   3b5d8:	e282200b 	add	r2, r2, #11
   3b5dc:	e0853003 	add	r3, r5, r3
   3b5e0:	e0852002 	add	r2, r5, r2
   3b5e4:	e5e31001 	strb	r1, [r3, #1]!
   3b5e8:	e1520003 	cmp	r2, r3
   3b5ec:	1afffffc 	bne	3b5e4 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x144>
   3b5f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b5f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003b5f8 <TermAnsi::writeCharAtCurs(int)>:
   3b5f8:	e92d4010 	push	{r4, lr}
   3b5fc:	e1a04000 	mov	r4, r0
   3b600:	e5903018 	ldr	r3, [r0, #24]
   3b604:	e590c00c 	ldr	ip, [r0, #12]
   3b608:	e5902014 	ldr	r2, [r0, #20]
   3b60c:	e5900008 	ldr	r0, [r0, #8]
   3b610:	e022239c 	mla	r2, ip, r3, r2
   3b614:	e1520000 	cmp	r2, r0
   3b618:	35943004 	ldrcc	r3, [r4, #4]
   3b61c:	22843028 	addcs	r3, r4, #40	; 0x28
   3b620:	30833102 	addcc	r3, r3, r2, lsl #2
   3b624:	e5c31000 	strb	r1, [r3]
   3b628:	e5d42892 	ldrb	r2, [r4, #2194]	; 0x892
   3b62c:	e3a00001 	mov	r0, #1
   3b630:	e5c32002 	strb	r2, [r3, #2]
   3b634:	e5d42891 	ldrb	r2, [r4, #2193]	; 0x891
   3b638:	e5c32001 	strb	r2, [r3, #1]
   3b63c:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   3b640:	e5c32003 	strb	r2, [r3, #3]
   3b644:	e594300c 	ldr	r3, [r4, #12]
   3b648:	e5942014 	ldr	r2, [r4, #20]
   3b64c:	e2433001 	sub	r3, r3, #1
   3b650:	e1520003 	cmp	r2, r3
   3b654:	23a02000 	movcs	r2, #0
   3b658:	e5943018 	ldr	r3, [r4, #24]
   3b65c:	30822000 	addcc	r2, r2, r0
   3b660:	e5842014 	str	r2, [r4, #20]
   3b664:	e5942010 	ldr	r2, [r4, #16]
   3b668:	22833001 	addcs	r3, r3, #1
   3b66c:	25843018 	strcs	r3, [r4, #24]
   3b670:	e1520003 	cmp	r2, r3
   3b674:	e5c4001c 	strb	r0, [r4, #28]
   3b678:	8a000005 	bhi	3b694 <TermAnsi::writeCharAtCurs(int)+0x9c>
   3b67c:	e2422001 	sub	r2, r2, #1
   3b680:	e5842018 	str	r2, [r4, #24]
   3b684:	e3a01000 	mov	r1, #0
   3b688:	e3a02001 	mov	r2, #1
   3b68c:	e1a00004 	mov	r0, r4
   3b690:	ebffff82 	bl	3b4a0 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b694:	e3a03001 	mov	r3, #1
   3b698:	e5c4301c 	strb	r3, [r4, #28]
   3b69c:	e8bd8010 	pop	{r4, pc}

0003b6a0 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   3b6a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b6a4:	e1e07001 	mvn	r7, r1
   3b6a8:	e590c010 	ldr	ip, [r0, #16]
   3b6ac:	e5903004 	ldr	r3, [r0, #4]
   3b6b0:	e087700c 	add	r7, r7, ip
   3b6b4:	e1570002 	cmp	r7, r2
   3b6b8:	21a07002 	movcs	r7, r2
   3b6bc:	e3530000 	cmp	r3, #0
   3b6c0:	13570000 	cmpne	r7, #0
   3b6c4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b6c8:	e590600c 	ldr	r6, [r0, #12]
   3b6cc:	e1a05000 	mov	r5, r0
   3b6d0:	e0060796 	mul	r6, r6, r7
   3b6d4:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3b6d8:	83e03000 	mvnhi	r3, #0
   3b6dc:	91a03106 	lslls	r3, r6, #2
   3b6e0:	e1a00003 	mov	r0, r3
   3b6e4:	e1a04001 	mov	r4, r1
   3b6e8:	ebffbc92 	bl	2a938 <operator new[](unsigned int)>
   3b6ec:	e2562001 	subs	r2, r6, #1
   3b6f0:	e1a08000 	mov	r8, r0
   3b6f4:	51a03000 	movpl	r3, r0
   3b6f8:	53a0c020 	movpl	ip, #32
   3b6fc:	53a0000f 	movpl	r0, #15
   3b700:	53a01000 	movpl	r1, #0
   3b704:	4a000007 	bmi	3b728 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x88>
   3b708:	e2422001 	sub	r2, r2, #1
   3b70c:	e3720001 	cmn	r2, #1
   3b710:	e5c3c000 	strb	ip, [r3]
   3b714:	e5c30001 	strb	r0, [r3, #1]
   3b718:	e5c31002 	strb	r1, [r3, #2]
   3b71c:	e5c31003 	strb	r1, [r3, #3]
   3b720:	e2833004 	add	r3, r3, #4
   3b724:	1afffff7 	bne	3b708 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x68>
   3b728:	e595300c 	ldr	r3, [r5, #12]
   3b72c:	e5952010 	ldr	r2, [r5, #16]
   3b730:	e1a03103 	lsl	r3, r3, #2
   3b734:	e0090793 	mul	r9, r3, r7
   3b738:	e5951004 	ldr	r1, [r5, #4]
   3b73c:	e0422007 	sub	r2, r2, r7
   3b740:	e0211293 	mla	r1, r3, r2, r1
   3b744:	e1a00008 	mov	r0, r8
   3b748:	e1a02009 	mov	r2, r9
   3b74c:	ebffba9f 	bl	2a1d0 <memcpy>
   3b750:	e5952010 	ldr	r2, [r5, #16]
   3b754:	e595100c 	ldr	r1, [r5, #12]
   3b758:	e5953004 	ldr	r3, [r5, #4]
   3b75c:	e0422007 	sub	r2, r2, r7
   3b760:	e084c007 	add	ip, r4, r7
   3b764:	e1a00101 	lsl	r0, r1, #2
   3b768:	e1a06104 	lsl	r6, r4, #2
   3b76c:	e0422004 	sub	r2, r2, r4
   3b770:	e0020290 	mul	r2, r0, r2
   3b774:	e0213691 	mla	r1, r1, r6, r3
   3b778:	e0203c90 	mla	r0, r0, ip, r3
   3b77c:	ebffb849 	bl	298a8 <memmove>
   3b780:	e5953004 	ldr	r3, [r5, #4]
   3b784:	e595000c 	ldr	r0, [r5, #12]
   3b788:	e1a02009 	mov	r2, r9
   3b78c:	e0203690 	mla	r0, r0, r6, r3
   3b790:	e1a01008 	mov	r1, r8
   3b794:	ebffba8d 	bl	2a1d0 <memcpy>
   3b798:	e1a00008 	mov	r0, r8
   3b79c:	ebffbc6c 	bl	2a954 <operator delete[](void*)>
   3b7a0:	e1a02007 	mov	r2, r7
   3b7a4:	e1a01004 	mov	r1, r4
   3b7a8:	e1a00005 	mov	r0, r5
   3b7ac:	ebffff22 	bl	3b43c <TermAnsi::clearlines(unsigned int, unsigned int)>
   3b7b0:	e3a01001 	mov	r1, #1
   3b7b4:	e5952010 	ldr	r2, [r5, #16]
   3b7b8:	e5c5101c 	strb	r1, [r5, #28]
   3b7bc:	e1540002 	cmp	r4, r2
   3b7c0:	2a000009 	bcs	3b7ec <TermAnsi::scrollDown(unsigned int, unsigned int)+0x14c>
   3b7c4:	e2843e82 	add	r3, r4, #2080	; 0x820
   3b7c8:	e2822e82 	add	r2, r2, #2080	; 0x820
   3b7cc:	e283300b 	add	r3, r3, #11
   3b7d0:	e282200b 	add	r2, r2, #11
   3b7d4:	e0853003 	add	r3, r5, r3
   3b7d8:	e0852002 	add	r2, r5, r2
   3b7dc:	e5e31001 	strb	r1, [r3, #1]!
   3b7e0:	e1520003 	cmp	r2, r3
   3b7e4:	1afffffc 	bne	3b7dc <TermAnsi::scrollDown(unsigned int, unsigned int)+0x13c>
   3b7e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b7ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003b7f0 <TermAnsi::ed()>:
   3b7f0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3b7f4:	e92d4070 	push	{r4, r5, r6, lr}
   3b7f8:	e3530001 	cmp	r3, #1
   3b7fc:	e1a04000 	mov	r4, r0
   3b800:	e5906010 	ldr	r6, [r0, #16]
   3b804:	0a000010 	beq	3b84c <TermAnsi::ed()+0x5c>
   3b808:	3a000008 	bcc	3b830 <TermAnsi::ed()+0x40>
   3b80c:	e3530002 	cmp	r3, #2
   3b810:	1a000005 	bne	3b82c <TermAnsi::ed()+0x3c>
   3b814:	e3a05000 	mov	r5, #0
   3b818:	e0462005 	sub	r2, r6, r5
   3b81c:	e1a01005 	mov	r1, r5
   3b820:	e1a00004 	mov	r0, r4
   3b824:	e8bd4070 	pop	{r4, r5, r6, lr}
   3b828:	eaffff03 	b	3b43c <TermAnsi::clearlines(unsigned int, unsigned int)>
   3b82c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b830:	e5905018 	ldr	r5, [r0, #24]
   3b834:	e590300c 	ldr	r3, [r0, #12]
   3b838:	e1a01005 	mov	r1, r5
   3b83c:	e5902014 	ldr	r2, [r0, #20]
   3b840:	e2855001 	add	r5, r5, #1
   3b844:	ebfffed6 	bl	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b848:	eafffff2 	b	3b818 <TermAnsi::ed()+0x28>
   3b84c:	e3a02000 	mov	r2, #0
   3b850:	e5906018 	ldr	r6, [r0, #24]
   3b854:	e5903014 	ldr	r3, [r0, #20]
   3b858:	e1a01006 	mov	r1, r6
   3b85c:	e1a05002 	mov	r5, r2
   3b860:	e2466001 	sub	r6, r6, #1
   3b864:	ebfffece 	bl	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b868:	eaffffea 	b	3b818 <TermAnsi::ed()+0x28>

0003b86c <TermAnsi::el()>:
   3b86c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3b870:	e3530001 	cmp	r3, #1
   3b874:	0a00000b 	beq	3b8a8 <TermAnsi::el()+0x3c>
   3b878:	3a000006 	bcc	3b898 <TermAnsi::el()+0x2c>
   3b87c:	e3530002 	cmp	r3, #2
   3b880:	1a000003 	bne	3b894 <TermAnsi::el()+0x28>
   3b884:	e590300c 	ldr	r3, [r0, #12]
   3b888:	e5901018 	ldr	r1, [r0, #24]
   3b88c:	e3a02000 	mov	r2, #0
   3b890:	eafffec3 	b	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b894:	e12fff1e 	bx	lr
   3b898:	e590300c 	ldr	r3, [r0, #12]
   3b89c:	e5902014 	ldr	r2, [r0, #20]
   3b8a0:	e5901018 	ldr	r1, [r0, #24]
   3b8a4:	eafffebe 	b	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b8a8:	e590200c 	ldr	r2, [r0, #12]
   3b8ac:	e5903014 	ldr	r3, [r0, #20]
   3b8b0:	e2422001 	sub	r2, r2, #1
   3b8b4:	e2833001 	add	r3, r3, #1
   3b8b8:	e1520003 	cmp	r2, r3
   3b8bc:	31a03002 	movcc	r3, r2
   3b8c0:	e5901018 	ldr	r1, [r0, #24]
   3b8c4:	e3a02000 	mov	r2, #0
   3b8c8:	eafffeb5 	b	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003b8cc <TermAnsi::dch()>:
   3b8cc:	e92d4070 	push	{r4, r5, r6, lr}
   3b8d0:	e590e004 	ldr	lr, [r0, #4]
   3b8d4:	e35e0000 	cmp	lr, #0
   3b8d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   3b8dc:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   3b8e0:	e1a04000 	mov	r4, r0
   3b8e4:	e35c0000 	cmp	ip, #0
   3b8e8:	03a0c001 	moveq	ip, #1
   3b8ec:	e590300c 	ldr	r3, [r0, #12]
   3b8f0:	e5900014 	ldr	r0, [r0, #20]
   3b8f4:	e1a06103 	lsl	r6, r3, #2
   3b8f8:	e0431000 	sub	r1, r3, r0
   3b8fc:	e15c0001 	cmp	ip, r1
   3b900:	31a0500c 	movcc	r5, ip
   3b904:	21a05001 	movcs	r5, r1
   3b908:	e594c018 	ldr	ip, [r4, #24]
   3b90c:	e0412005 	sub	r2, r1, r5
   3b910:	e020039c 	mla	r0, ip, r3, r0
   3b914:	e0801005 	add	r1, r0, r5
   3b918:	e0020296 	mul	r2, r6, r2
   3b91c:	e08e1101 	add	r1, lr, r1, lsl #2
   3b920:	e08e0100 	add	r0, lr, r0, lsl #2
   3b924:	ebffb7df 	bl	298a8 <memmove>
   3b928:	e594200c 	ldr	r2, [r4, #12]
   3b92c:	e5941014 	ldr	r1, [r4, #20]
   3b930:	e1a03002 	mov	r3, r2
   3b934:	e0422001 	sub	r2, r2, r1
   3b938:	e0422005 	sub	r2, r2, r5
   3b93c:	e5941018 	ldr	r1, [r4, #24]
   3b940:	e1a00004 	mov	r0, r4
   3b944:	e8bd4070 	pop	{r4, r5, r6, lr}
   3b948:	eafffe95 	b	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003b94c <TermAnsi::ich()>:
   3b94c:	e92d4070 	push	{r4, r5, r6, lr}
   3b950:	e590e004 	ldr	lr, [r0, #4]
   3b954:	e35e0000 	cmp	lr, #0
   3b958:	08bd8070 	popeq	{r4, r5, r6, pc}
   3b95c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3b960:	e590200c 	ldr	r2, [r0, #12]
   3b964:	e3530000 	cmp	r3, #0
   3b968:	03a03001 	moveq	r3, #1
   3b96c:	e5901014 	ldr	r1, [r0, #20]
   3b970:	e1a04000 	mov	r4, r0
   3b974:	e590c018 	ldr	ip, [r0, #24]
   3b978:	e0420001 	sub	r0, r2, r1
   3b97c:	e2405001 	sub	r5, r0, #1
   3b980:	e1550003 	cmp	r5, r3
   3b984:	21a05003 	movcs	r5, r3
   3b988:	e2400107 	sub	r0, r0, #-1073741823	; 0xc0000001
   3b98c:	e0403005 	sub	r3, r0, r5
   3b990:	e1a03103 	lsl	r3, r3, #2
   3b994:	e1a00100 	lsl	r0, r0, #2
   3b998:	e1530000 	cmp	r3, r0
   3b99c:	21a03000 	movcs	r3, r0
   3b9a0:	e021129c 	mla	r1, ip, r2, r1
   3b9a4:	e0810005 	add	r0, r1, r5
   3b9a8:	e0020392 	mul	r2, r2, r3
   3b9ac:	e08e1101 	add	r1, lr, r1, lsl #2
   3b9b0:	e08e0100 	add	r0, lr, r0, lsl #2
   3b9b4:	ebffb7bb 	bl	298a8 <memmove>
   3b9b8:	e1a03005 	mov	r3, r5
   3b9bc:	e5942014 	ldr	r2, [r4, #20]
   3b9c0:	e5941018 	ldr	r1, [r4, #24]
   3b9c4:	e1a00004 	mov	r0, r4
   3b9c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   3b9cc:	eafffe74 	b	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003b9d0 <TermAnsi::rep()>:
   3b9d0:	e5902014 	ldr	r2, [r0, #20]
   3b9d4:	e3520000 	cmp	r2, #0
   3b9d8:	012fff1e 	bxeq	lr
   3b9dc:	e92d4070 	push	{r4, r5, r6, lr}
   3b9e0:	e1a05000 	mov	r5, r0
   3b9e4:	e3a04000 	mov	r4, #0
   3b9e8:	e5903018 	ldr	r3, [r0, #24]
   3b9ec:	e590000c 	ldr	r0, [r0, #12]
   3b9f0:	e5951004 	ldr	r1, [r5, #4]
   3b9f4:	e0232390 	mla	r3, r0, r3, r2
   3b9f8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   3b9fc:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   3ba00:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   3ba04:	e3530000 	cmp	r3, #0
   3ba08:	03a03001 	moveq	r3, #1
   3ba0c:	e1540003 	cmp	r4, r3
   3ba10:	28bd8070 	popcs	{r4, r5, r6, pc}
   3ba14:	e1a01006 	mov	r1, r6
   3ba18:	e1a00005 	mov	r0, r5
   3ba1c:	e2844001 	add	r4, r4, #1
   3ba20:	ebfffef4 	bl	3b5f8 <TermAnsi::writeCharAtCurs(int)>
   3ba24:	eafffff5 	b	3ba00 <TermAnsi::rep()+0x30>

0003ba28 <TermAnsi::sgr()>:
   3ba28:	e590c050 	ldr	ip, [r0, #80]	; 0x50
   3ba2c:	e35c0000 	cmp	ip, #0
   3ba30:	0a00004d 	beq	3bb6c <TermAnsi::sgr()+0x144>
   3ba34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ba38:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   3ba3c:	e24e301e 	sub	r3, lr, #30
   3ba40:	e3530012 	cmp	r3, #18
   3ba44:	9a00004b 	bls	3bb78 <TermAnsi::sgr()+0x150>
   3ba48:	e35e0013 	cmp	lr, #19
   3ba4c:	93a0a020 	movls	sl, #32
   3ba50:	83a0a000 	movhi	sl, #0
   3ba54:	93a09010 	movls	r9, #16
   3ba58:	83a09000 	movhi	r9, #0
   3ba5c:	93a08008 	movls	r8, #8
   3ba60:	83a08000 	movhi	r8, #0
   3ba64:	93a07004 	movls	r7, #4
   3ba68:	83a07000 	movhi	r7, #0
   3ba6c:	93a06002 	movls	r6, #2
   3ba70:	83a06000 	movhi	r6, #0
   3ba74:	e1a0300e 	mov	r3, lr
   3ba78:	e3a0500f 	mov	r5, #15
   3ba7c:	e3a04000 	mov	r4, #0
   3ba80:	e28cc00c 	add	ip, ip, #12
   3ba84:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3ba88:	e080c10c 	add	ip, r0, ip, lsl #2
   3ba8c:	e2802034 	add	r2, r0, #52	; 0x34
   3ba90:	e353001c 	cmp	r3, #28
   3ba94:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3ba98:	ea00001d 	b	3bb14 <TermAnsi::sgr()+0xec>
   3ba9c:	0003bb4c 	.word	0x0003bb4c
   3baa0:	0003bb40 	.word	0x0003bb40
   3baa4:	0003bb64 	.word	0x0003bb64
   3baa8:	0003bb14 	.word	0x0003bb14
   3baac:	0003bb5c 	.word	0x0003bb5c
   3bab0:	0003bb38 	.word	0x0003bb38
   3bab4:	0003bb14 	.word	0x0003bb14
   3bab8:	0003bb24 	.word	0x0003bb24
   3babc:	0003bb10 	.word	0x0003bb10
   3bac0:	0003bb14 	.word	0x0003bb14
   3bac4:	0003bb14 	.word	0x0003bb14
   3bac8:	0003bb14 	.word	0x0003bb14
   3bacc:	0003bb14 	.word	0x0003bb14
   3bad0:	0003bb14 	.word	0x0003bb14
   3bad4:	0003bb14 	.word	0x0003bb14
   3bad8:	0003bb14 	.word	0x0003bb14
   3badc:	0003bb14 	.word	0x0003bb14
   3bae0:	0003bb14 	.word	0x0003bb14
   3bae4:	0003bb14 	.word	0x0003bb14
   3bae8:	0003bb14 	.word	0x0003bb14
   3baec:	0003bb14 	.word	0x0003bb14
   3baf0:	0003bb14 	.word	0x0003bb14
   3baf4:	0003bb40 	.word	0x0003bb40
   3baf8:	0003bb64 	.word	0x0003bb64
   3bafc:	0003bb5c 	.word	0x0003bb5c
   3bb00:	0003bb38 	.word	0x0003bb38
   3bb04:	0003bb14 	.word	0x0003bb14
   3bb08:	0003bb24 	.word	0x0003bb24
   3bb0c:	0003bb10 	.word	0x0003bb10
   3bb10:	e18a1001 	orr	r1, sl, r1
   3bb14:	e152000c 	cmp	r2, ip
   3bb18:	0a000004 	beq	3bb30 <TermAnsi::sgr()+0x108>
   3bb1c:	e4923004 	ldr	r3, [r2], #4
   3bb20:	eaffffda 	b	3ba90 <TermAnsi::sgr()+0x68>
   3bb24:	e152000c 	cmp	r2, ip
   3bb28:	e1891001 	orr	r1, r9, r1
   3bb2c:	1afffffa 	bne	3bb1c <TermAnsi::sgr()+0xf4>
   3bb30:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3bb34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bb38:	e1881001 	orr	r1, r8, r1
   3bb3c:	eafffff4 	b	3bb14 <TermAnsi::sgr()+0xec>
   3bb40:	e35e0013 	cmp	lr, #19
   3bb44:	93811001 	orrls	r1, r1, #1
   3bb48:	eafffff1 	b	3bb14 <TermAnsi::sgr()+0xec>
   3bb4c:	e5c05891 	strb	r5, [r0, #2193]	; 0x891
   3bb50:	e5c04892 	strb	r4, [r0, #2194]	; 0x892
   3bb54:	e3a01000 	mov	r1, #0
   3bb58:	eaffffed 	b	3bb14 <TermAnsi::sgr()+0xec>
   3bb5c:	e1871001 	orr	r1, r7, r1
   3bb60:	eaffffeb 	b	3bb14 <TermAnsi::sgr()+0xec>
   3bb64:	e1861001 	orr	r1, r6, r1
   3bb68:	eaffffe9 	b	3bb14 <TermAnsi::sgr()+0xec>
   3bb6c:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3bb70:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3bb74:	e12fff1e 	bx	lr
   3bb78:	e35c0001 	cmp	ip, #1
   3bb7c:	0a00000d 	beq	3bbb8 <TermAnsi::sgr()+0x190>
   3bb80:	e35c0002 	cmp	ip, #2
   3bb84:	0a000016 	beq	3bbe4 <TermAnsi::sgr()+0x1bc>
   3bb88:	e35c0003 	cmp	ip, #3
   3bb8c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bb90:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3bb94:	e3530005 	cmp	r3, #5
   3bb98:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bb9c:	e2803e89 	add	r3, r0, #2192	; 0x890
   3bba0:	e35e0027 	cmp	lr, #39	; 0x27
   3bba4:	e5902038 	ldr	r2, [r0, #56]	; 0x38
   3bba8:	92833001 	addls	r3, r3, #1
   3bbac:	82833002 	addhi	r3, r3, #2
   3bbb0:	e5c32000 	strb	r2, [r3]
   3bbb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bbb8:	e59f2060 	ldr	r2, [pc, #96]	; 3bc20 <TermAnsi::sgr()+0x1f8>
   3bbbc:	e2801e89 	add	r1, r0, #2192	; 0x890
   3bbc0:	e0820392 	umull	r0, r2, r2, r3
   3bbc4:	e1a021a2 	lsr	r2, r2, #3
   3bbc8:	e35e0027 	cmp	lr, #39	; 0x27
   3bbcc:	e0822102 	add	r2, r2, r2, lsl #2
   3bbd0:	92811001 	addls	r1, r1, #1
   3bbd4:	82811002 	addhi	r1, r1, #2
   3bbd8:	e0433082 	sub	r3, r3, r2, lsl #1
   3bbdc:	e5c13000 	strb	r3, [r1]
   3bbe0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bbe4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3bbe8:	e3520001 	cmp	r2, #1
   3bbec:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bbf0:	e59f2028 	ldr	r2, [pc, #40]	; 3bc20 <TermAnsi::sgr()+0x1f8>
   3bbf4:	e2801e89 	add	r1, r0, #2192	; 0x890
   3bbf8:	e0820392 	umull	r0, r2, r2, r3
   3bbfc:	e1a021a2 	lsr	r2, r2, #3
   3bc00:	e0822102 	add	r2, r2, r2, lsl #2
   3bc04:	e35e0027 	cmp	lr, #39	; 0x27
   3bc08:	e0433082 	sub	r3, r3, r2, lsl #1
   3bc0c:	92811001 	addls	r1, r1, #1
   3bc10:	82811002 	addhi	r1, r1, #2
   3bc14:	e2833008 	add	r3, r3, #8
   3bc18:	e5c13000 	strb	r3, [r1]
   3bc1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bc20:	cccccccd 	.word	0xcccccccd

0003bc24 <TermAnsi::handleAnsiChar(unsigned char)>:
   3bc24:	e3a03000 	mov	r3, #0
   3bc28:	e92d4070 	push	{r4, r5, r6, lr}
   3bc2c:	e5d0602c 	ldrb	r6, [r0, #44]	; 0x2c
   3bc30:	e24dd008 	sub	sp, sp, #8
   3bc34:	e1560003 	cmp	r6, r3
   3bc38:	e1cd30b4 	strh	r3, [sp, #4]
   3bc3c:	e1a04000 	mov	r4, r0
   3bc40:	e1a05001 	mov	r5, r1
   3bc44:	e5cd1004 	strb	r1, [sp, #4]
   3bc48:	0a00001d 	beq	3bcc4 <TermAnsi::handleAnsiChar(unsigned char)+0xa0>
   3bc4c:	e3560001 	cmp	r6, #1
   3bc50:	0a000040 	beq	3bd58 <TermAnsi::handleAnsiChar(unsigned char)+0x134>
   3bc54:	e3560002 	cmp	r6, #2
   3bc58:	0a0004a9 	beq	3cf04 <TermAnsi::handleAnsiChar(unsigned char)+0x12e0>
   3bc5c:	e3560002 	cmp	r6, #2
   3bc60:	0a00042c 	beq	3cd18 <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3bc64:	e3560002 	cmp	r6, #2
   3bc68:	0a00035e 	beq	3c9e8 <TermAnsi::handleAnsiChar(unsigned char)+0xdc4>
   3bc6c:	e3560002 	cmp	r6, #2
   3bc70:	0a0002ed 	beq	3c82c <TermAnsi::handleAnsiChar(unsigned char)+0xc08>
   3bc74:	e3560002 	cmp	r6, #2
   3bc78:	0a000280 	beq	3c680 <TermAnsi::handleAnsiChar(unsigned char)+0xa5c>
   3bc7c:	e3560002 	cmp	r6, #2
   3bc80:	0a00020a 	beq	3c4b0 <TermAnsi::handleAnsiChar(unsigned char)+0x88c>
   3bc84:	e3560002 	cmp	r6, #2
   3bc88:	0a0001bc 	beq	3c380 <TermAnsi::handleAnsiChar(unsigned char)+0x75c>
   3bc8c:	e3560002 	cmp	r6, #2
   3bc90:	0a00019b 	beq	3c304 <TermAnsi::handleAnsiChar(unsigned char)+0x6e0>
   3bc94:	e3560002 	cmp	r6, #2
   3bc98:	0a0000e9 	beq	3c044 <TermAnsi::handleAnsiChar(unsigned char)+0x420>
   3bc9c:	e3a02020 	mov	r2, #32
   3bca0:	e3a01000 	mov	r1, #0
   3bca4:	e2840030 	add	r0, r4, #48	; 0x30
   3bca8:	ebffb6d1 	bl	297f4 <memset>
   3bcac:	e3a00000 	mov	r0, #0
   3bcb0:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3bcb4:	e5840050 	str	r0, [r4, #80]	; 0x50
   3bcb8:	e5840054 	str	r0, [r4, #84]	; 0x54
   3bcbc:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3bcc0:	ea000022 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3bcc4:	e59f0f9c 	ldr	r0, [pc, #3996]	; 3cc68 <TermAnsi::handleAnsiChar(unsigned char)+0x1044>
   3bcc8:	ebffb808 	bl	29cf0 <strchr>
   3bccc:	e3500000 	cmp	r0, #0
   3bcd0:	0a000028 	beq	3bd78 <TermAnsi::handleAnsiChar(unsigned char)+0x154>
   3bcd4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bcd8:	e3530007 	cmp	r3, #7
   3bcdc:	8a000004 	bhi	3bcf4 <TermAnsi::handleAnsiChar(unsigned char)+0xd0>
   3bce0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bce4:	e2831001 	add	r1, r3, #1
   3bce8:	e283300c 	add	r3, r3, #12
   3bcec:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bcf0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bcf4:	e5940010 	ldr	r0, [r4, #16]
   3bcf8:	e5942018 	ldr	r2, [r4, #24]
   3bcfc:	e594100c 	ldr	r1, [r4, #12]
   3bd00:	e5943014 	ldr	r3, [r4, #20]
   3bd04:	e2400001 	sub	r0, r0, #1
   3bd08:	e1520000 	cmp	r2, r0
   3bd0c:	e2411001 	sub	r1, r1, #1
   3bd10:	21a02000 	movcs	r2, r0
   3bd14:	e1530001 	cmp	r3, r1
   3bd18:	e3a05000 	mov	r5, #0
   3bd1c:	21a03001 	movcs	r3, r1
   3bd20:	e5842018 	str	r2, [r4, #24]
   3bd24:	e5843014 	str	r3, [r4, #20]
   3bd28:	e5845054 	str	r5, [r4, #84]	; 0x54
   3bd2c:	e1a01005 	mov	r1, r5
   3bd30:	e3a02020 	mov	r2, #32
   3bd34:	e2840030 	add	r0, r4, #48	; 0x30
   3bd38:	ebffb6ad 	bl	297f4 <memset>
   3bd3c:	e3a00001 	mov	r0, #1
   3bd40:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3bd44:	e5845050 	str	r5, [r4, #80]	; 0x50
   3bd48:	e5845054 	str	r5, [r4, #84]	; 0x54
   3bd4c:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3bd50:	e28dd008 	add	sp, sp, #8
   3bd54:	e8bd8070 	pop	{r4, r5, r6, pc}
   3bd58:	e1a01005 	mov	r1, r5
   3bd5c:	e59f0fa4 	ldr	r0, [pc, #4004]	; 3cd08 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3bd60:	ebffb7e2 	bl	29cf0 <strchr>
   3bd64:	e3500000 	cmp	r0, #0
   3bd68:	0a0000f0 	beq	3c130 <TermAnsi::handleAnsiChar(unsigned char)+0x50c>
   3bd6c:	e3a00001 	mov	r0, #1
   3bd70:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3bd74:	eafffff5 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3bd78:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3bd7c:	e3560000 	cmp	r6, #0
   3bd80:	1a0000a6 	bne	3c020 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3bd84:	e1a01005 	mov	r1, r5
   3bd88:	e59f0edc 	ldr	r0, [pc, #3804]	; 3cc6c <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   3bd8c:	ebffb7d7 	bl	29cf0 <strchr>
   3bd90:	e3500000 	cmp	r0, #0
   3bd94:	0a000026 	beq	3be34 <TermAnsi::handleAnsiChar(unsigned char)+0x210>
   3bd98:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bd9c:	e3530007 	cmp	r3, #7
   3bda0:	8a000004 	bhi	3bdb8 <TermAnsi::handleAnsiChar(unsigned char)+0x194>
   3bda4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bda8:	e2831001 	add	r1, r3, #1
   3bdac:	e283300c 	add	r3, r3, #12
   3bdb0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bdb4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bdb8:	e3a02000 	mov	r2, #0
   3bdbc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bdc0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bdc4:	e1530002 	cmp	r3, r2
   3bdc8:	e5940014 	ldr	r0, [r4, #20]
   3bdcc:	1a000001 	bne	3bdd8 <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3bdd0:	e3500000 	cmp	r0, #0
   3bdd4:	12400001 	subne	r0, r0, #1
   3bdd8:	e5941010 	ldr	r1, [r4, #16]
   3bddc:	e5942018 	ldr	r2, [r4, #24]
   3bde0:	e594300c 	ldr	r3, [r4, #12]
   3bde4:	e2411001 	sub	r1, r1, #1
   3bde8:	e1520001 	cmp	r2, r1
   3bdec:	e2433001 	sub	r3, r3, #1
   3bdf0:	21a02001 	movcs	r2, r1
   3bdf4:	e1530000 	cmp	r3, r0
   3bdf8:	21a03000 	movcs	r3, r0
   3bdfc:	e5842018 	str	r2, [r4, #24]
   3be00:	e5843014 	str	r3, [r4, #20]
   3be04:	e3a02020 	mov	r2, #32
   3be08:	e3a01000 	mov	r1, #0
   3be0c:	e2840030 	add	r0, r4, #48	; 0x30
   3be10:	ebffb677 	bl	297f4 <memset>
   3be14:	e3a03000 	mov	r3, #0
   3be18:	e3a00001 	mov	r0, #1
   3be1c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3be20:	e5843050 	str	r3, [r4, #80]	; 0x50
   3be24:	e5843054 	str	r3, [r4, #84]	; 0x54
   3be28:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3be2c:	e28dd008 	add	sp, sp, #8
   3be30:	e8bd8070 	pop	{r4, r5, r6, pc}
   3be34:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3be38:	e3560000 	cmp	r6, #0
   3be3c:	1affff82 	bne	3bc4c <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3be40:	e1a01005 	mov	r1, r5
   3be44:	e59f0e24 	ldr	r0, [pc, #3620]	; 3cc70 <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   3be48:	ebffb7a8 	bl	29cf0 <strchr>
   3be4c:	e3500000 	cmp	r0, #0
   3be50:	0a000024 	beq	3bee8 <TermAnsi::handleAnsiChar(unsigned char)+0x2c4>
   3be54:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3be58:	e3530007 	cmp	r3, #7
   3be5c:	8a000004 	bhi	3be74 <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   3be60:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3be64:	e2831001 	add	r1, r3, #1
   3be68:	e283300c 	add	r3, r3, #12
   3be6c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3be70:	e7842103 	str	r2, [r4, r3, lsl #2]
   3be74:	e3a02000 	mov	r2, #0
   3be78:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3be7c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3be80:	e1530002 	cmp	r3, r2
   3be84:	1a000013 	bne	3bed8 <TermAnsi::handleAnsiChar(unsigned char)+0x2b4>
   3be88:	e5943014 	ldr	r3, [r4, #20]
   3be8c:	e594100c 	ldr	r1, [r4, #12]
   3be90:	e0842103 	add	r2, r4, r3, lsl #2
   3be94:	e2411001 	sub	r1, r1, #1
   3be98:	e2833001 	add	r3, r3, #1
   3be9c:	e1510003 	cmp	r1, r3
   3bea0:	e2822004 	add	r2, r2, #4
   3bea4:	8a000007 	bhi	3bec8 <TermAnsi::handleAnsiChar(unsigned char)+0x2a4>
   3bea8:	e5940010 	ldr	r0, [r4, #16]
   3beac:	e5942018 	ldr	r2, [r4, #24]
   3beb0:	e2400001 	sub	r0, r0, #1
   3beb4:	e1520000 	cmp	r2, r0
   3beb8:	21a02000 	movcs	r2, r0
   3bebc:	e1530001 	cmp	r3, r1
   3bec0:	21a03001 	movcs	r3, r1
   3bec4:	eaffffcc 	b	3bdfc <TermAnsi::handleAnsiChar(unsigned char)+0x1d8>
   3bec8:	e5d2005c 	ldrb	r0, [r2, #92]	; 0x5c
   3becc:	e350002a 	cmp	r0, #42	; 0x2a
   3bed0:	1afffff0 	bne	3be98 <TermAnsi::handleAnsiChar(unsigned char)+0x274>
   3bed4:	eafffff3 	b	3bea8 <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3bed8:	e594100c 	ldr	r1, [r4, #12]
   3bedc:	e5943014 	ldr	r3, [r4, #20]
   3bee0:	e2411001 	sub	r1, r1, #1
   3bee4:	eaffffef 	b	3bea8 <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3bee8:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3beec:	e3560000 	cmp	r6, #0
   3bef0:	1affff55 	bne	3bc4c <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3bef4:	e1a01005 	mov	r1, r5
   3bef8:	e59f0d74 	ldr	r0, [pc, #3444]	; 3cc74 <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   3befc:	ebffb77b 	bl	29cf0 <strchr>
   3bf00:	e3500000 	cmp	r0, #0
   3bf04:	0a000023 	beq	3bf98 <TermAnsi::handleAnsiChar(unsigned char)+0x374>
   3bf08:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bf0c:	e3530007 	cmp	r3, #7
   3bf10:	8a000004 	bhi	3bf28 <TermAnsi::handleAnsiChar(unsigned char)+0x304>
   3bf14:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bf18:	e2831001 	add	r1, r3, #1
   3bf1c:	e283300c 	add	r3, r3, #12
   3bf20:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bf24:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bf28:	e3a03000 	mov	r3, #0
   3bf2c:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3bf30:	e5843054 	str	r3, [r4, #84]	; 0x54
   3bf34:	e1510003 	cmp	r1, r3
   3bf38:	1a000012 	bne	3bf88 <TermAnsi::handleAnsiChar(unsigned char)+0x364>
   3bf3c:	e5943010 	ldr	r3, [r4, #16]
   3bf40:	e5942018 	ldr	r2, [r4, #24]
   3bf44:	e2430001 	sub	r0, r3, #1
   3bf48:	e1520000 	cmp	r2, r0
   3bf4c:	32823001 	addcc	r3, r2, #1
   3bf50:	2a000009 	bcs	3bf7c <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   3bf54:	e594100c 	ldr	r1, [r4, #12]
   3bf58:	e5942014 	ldr	r2, [r4, #20]
   3bf5c:	e1530000 	cmp	r3, r0
   3bf60:	e2411001 	sub	r1, r1, #1
   3bf64:	21a03000 	movcs	r3, r0
   3bf68:	e1520001 	cmp	r2, r1
   3bf6c:	21a02001 	movcs	r2, r1
   3bf70:	e5843018 	str	r3, [r4, #24]
   3bf74:	e5842014 	str	r2, [r4, #20]
   3bf78:	eaffffa1 	b	3be04 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3bf7c:	e3a02001 	mov	r2, #1
   3bf80:	e1a00004 	mov	r0, r4
   3bf84:	ebfffd45 	bl	3b4a0 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3bf88:	e5940010 	ldr	r0, [r4, #16]
   3bf8c:	e5943018 	ldr	r3, [r4, #24]
   3bf90:	e2400001 	sub	r0, r0, #1
   3bf94:	eaffffee 	b	3bf54 <TermAnsi::handleAnsiChar(unsigned char)+0x330>
   3bf98:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3bf9c:	e3560000 	cmp	r6, #0
   3bfa0:	1affff29 	bne	3bc4c <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3bfa4:	e1a01005 	mov	r1, r5
   3bfa8:	e59f0cc8 	ldr	r0, [pc, #3272]	; 3cc78 <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   3bfac:	ebffb74f 	bl	29cf0 <strchr>
   3bfb0:	e3500000 	cmp	r0, #0
   3bfb4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bfb8:	0a000018 	beq	3c020 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3bfbc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bfc0:	e3530007 	cmp	r3, #7
   3bfc4:	8a000004 	bhi	3bfdc <TermAnsi::handleAnsiChar(unsigned char)+0x3b8>
   3bfc8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bfcc:	e2831001 	add	r1, r3, #1
   3bfd0:	e283300c 	add	r3, r3, #12
   3bfd4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bfd8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bfdc:	e3a02000 	mov	r2, #0
   3bfe0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bfe4:	e5940010 	ldr	r0, [r4, #16]
   3bfe8:	e5941018 	ldr	r1, [r4, #24]
   3bfec:	e1530002 	cmp	r3, r2
   3bff0:	e2400001 	sub	r0, r0, #1
   3bff4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bff8:	01a02003 	moveq	r2, r3
   3bffc:	15942014 	ldrne	r2, [r4, #20]
   3c000:	e1510000 	cmp	r1, r0
   3c004:	21a01000 	movcs	r1, r0
   3c008:	e594300c 	ldr	r3, [r4, #12]
   3c00c:	e5841018 	str	r1, [r4, #24]
   3c010:	e2433001 	sub	r3, r3, #1
   3c014:	e1530002 	cmp	r3, r2
   3c018:	21a03002 	movcs	r3, r2
   3c01c:	eaffff77 	b	3be00 <TermAnsi::handleAnsiChar(unsigned char)+0x1dc>
   3c020:	e3560000 	cmp	r6, #0
   3c024:	1affff08 	bne	3bc4c <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3c028:	e1a01005 	mov	r1, r5
   3c02c:	e59f0cd4 	ldr	r0, [pc, #3284]	; 3cd08 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3c030:	ebffb72e 	bl	29cf0 <strchr>
   3c034:	e3500000 	cmp	r0, #0
   3c038:	1affff4b 	bne	3bd6c <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3c03c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c040:	eaffff01 	b	3bc4c <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3c044:	e1a01005 	mov	r1, r5
   3c048:	e59f0c2c 	ldr	r0, [pc, #3116]	; 3cc7c <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3c04c:	ebffb727 	bl	29cf0 <strchr>
   3c050:	e3500000 	cmp	r0, #0
   3c054:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c058:	0a00001d 	beq	3c0d4 <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3c05c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c060:	e3530007 	cmp	r3, #7
   3c064:	8a000004 	bhi	3c07c <TermAnsi::handleAnsiChar(unsigned char)+0x458>
   3c068:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c06c:	e2831001 	add	r1, r3, #1
   3c070:	e283300c 	add	r3, r3, #12
   3c074:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c078:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c07c:	e3a02000 	mov	r2, #0
   3c080:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c084:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c088:	e1530002 	cmp	r3, r2
   3c08c:	1a000008 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c090:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   3c094:	e284ce89 	add	ip, r4, #2192	; 0x890
   3c098:	e28cc008 	add	ip, ip, #8
   3c09c:	e284e014 	add	lr, r4, #20
   3c0a0:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   3c0a4:	e5845890 	str	r5, [r4, #2192]	; 0x890
   3c0a8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   3c0ac:	e59c3000 	ldr	r3, [ip]
   3c0b0:	e58e3000 	str	r3, [lr]
   3c0b4:	e5940010 	ldr	r0, [r4, #16]
   3c0b8:	e5942018 	ldr	r2, [r4, #24]
   3c0bc:	e594100c 	ldr	r1, [r4, #12]
   3c0c0:	e2400001 	sub	r0, r0, #1
   3c0c4:	e5943014 	ldr	r3, [r4, #20]
   3c0c8:	e1520000 	cmp	r2, r0
   3c0cc:	e2411001 	sub	r1, r1, #1
   3c0d0:	eaffff78 	b	3beb8 <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3c0d4:	e3560002 	cmp	r6, #2
   3c0d8:	1afffeef 	bne	3bc9c <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3c0dc:	e1a01005 	mov	r1, r5
   3c0e0:	e59f0b98 	ldr	r0, [pc, #2968]	; 3cc80 <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   3c0e4:	ebffb701 	bl	29cf0 <strchr>
   3c0e8:	e3500000 	cmp	r0, #0
   3c0ec:	0afffeea 	beq	3bc9c <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3c0f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c0f4:	e3530007 	cmp	r3, #7
   3c0f8:	8a000004 	bhi	3c110 <TermAnsi::handleAnsiChar(unsigned char)+0x4ec>
   3c0fc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c100:	e2831001 	add	r1, r3, #1
   3c104:	e283300c 	add	r3, r3, #12
   3c108:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c10c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c110:	e3a02000 	mov	r2, #0
   3c114:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c118:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c11c:	e1530002 	cmp	r3, r2
   3c120:	1affffe3 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c124:	e1a00004 	mov	r0, r4
   3c128:	ebfffe07 	bl	3b94c <TermAnsi::ich()>
   3c12c:	eaffffe0 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c130:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c134:	e3560001 	cmp	r6, #1
   3c138:	1a00004b 	bne	3c26c <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3c13c:	e1a01005 	mov	r1, r5
   3c140:	e59f0b3c 	ldr	r0, [pc, #2876]	; 3cc84 <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   3c144:	ebffb6e9 	bl	29cf0 <strchr>
   3c148:	e3500000 	cmp	r0, #0
   3c14c:	0a000011 	beq	3c198 <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   3c150:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c154:	e3530007 	cmp	r3, #7
   3c158:	8a000004 	bhi	3c170 <TermAnsi::handleAnsiChar(unsigned char)+0x54c>
   3c15c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c160:	e2831001 	add	r1, r3, #1
   3c164:	e283300c 	add	r3, r3, #12
   3c168:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c16c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c170:	e3a02000 	mov	r2, #0
   3c174:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c178:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c17c:	e1530002 	cmp	r3, r2
   3c180:	03a0202a 	moveq	r2, #42	; 0x2a
   3c184:	05940014 	ldreq	r0, [r4, #20]
   3c188:	15940014 	ldrne	r0, [r4, #20]
   3c18c:	00843100 	addeq	r3, r4, r0, lsl #2
   3c190:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   3c194:	eaffff0f 	b	3bdd8 <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3c198:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c19c:	e3560001 	cmp	r6, #1
   3c1a0:	1afffeab 	bne	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c1a4:	e1a01005 	mov	r1, r5
   3c1a8:	e59f0ad8 	ldr	r0, [pc, #2776]	; 3cc88 <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   3c1ac:	ebffb6cf 	bl	29cf0 <strchr>
   3c1b0:	e3500000 	cmp	r0, #0
   3c1b4:	0a000016 	beq	3c214 <TermAnsi::handleAnsiChar(unsigned char)+0x5f0>
   3c1b8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c1bc:	e3530007 	cmp	r3, #7
   3c1c0:	8a000004 	bhi	3c1d8 <TermAnsi::handleAnsiChar(unsigned char)+0x5b4>
   3c1c4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c1c8:	e2831001 	add	r1, r3, #1
   3c1cc:	e283300c 	add	r3, r3, #12
   3c1d0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c1d4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c1d8:	e3a02000 	mov	r2, #0
   3c1dc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c1e0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c1e4:	e1530002 	cmp	r3, r2
   3c1e8:	1affffb1 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c1ec:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   3c1f0:	e284ce89 	add	ip, r4, #2192	; 0x890
   3c1f4:	e28cc008 	add	ip, ip, #8
   3c1f8:	e284e014 	add	lr, r4, #20
   3c1fc:	e5843894 	str	r3, [r4, #2196]	; 0x894
   3c200:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3c204:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3c208:	e59e3000 	ldr	r3, [lr]
   3c20c:	e58c3000 	str	r3, [ip]
   3c210:	eaffffa7 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c214:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c218:	e3560001 	cmp	r6, #1
   3c21c:	1afffe8c 	bne	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c220:	e1a01005 	mov	r1, r5
   3c224:	e59f0a60 	ldr	r0, [pc, #2656]	; 3cc8c <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   3c228:	ebffb6b0 	bl	29cf0 <strchr>
   3c22c:	e3500000 	cmp	r0, #0
   3c230:	1affff89 	bne	3c05c <TermAnsi::handleAnsiChar(unsigned char)+0x438>
   3c234:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c238:	e3560001 	cmp	r6, #1
   3c23c:	1afffe84 	bne	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c240:	e1a01005 	mov	r1, r5
   3c244:	e59f0a44 	ldr	r0, [pc, #2628]	; 3cc90 <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   3c248:	ebffb6a8 	bl	29cf0 <strchr>
   3c24c:	e3500000 	cmp	r0, #0
   3c250:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c254:	0a000004 	beq	3c26c <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3c258:	e3a00001 	mov	r0, #1
   3c25c:	e3a03002 	mov	r3, #2
   3c260:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3c264:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3c268:	eafffeb8 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3c26c:	e3560001 	cmp	r6, #1
   3c270:	1afffe77 	bne	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c274:	e1a01005 	mov	r1, r5
   3c278:	e59f0a14 	ldr	r0, [pc, #2580]	; 3cc94 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3c27c:	ebffb69b 	bl	29cf0 <strchr>
   3c280:	e3500000 	cmp	r0, #0
   3c284:	0a000011 	beq	3c2d0 <TermAnsi::handleAnsiChar(unsigned char)+0x6ac>
   3c288:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c28c:	e3530007 	cmp	r3, #7
   3c290:	8a000004 	bhi	3c2a8 <TermAnsi::handleAnsiChar(unsigned char)+0x684>
   3c294:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c298:	e2831001 	add	r1, r3, #1
   3c29c:	e283300c 	add	r3, r3, #12
   3c2a0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c2a4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c2a8:	e3a02000 	mov	r2, #0
   3c2ac:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c2b0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c2b4:	e1530002 	cmp	r3, r2
   3c2b8:	1affff7d 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c2bc:	e5943000 	ldr	r3, [r4]
   3c2c0:	e1a00004 	mov	r0, r4
   3c2c4:	e5933010 	ldr	r3, [r3, #16]
   3c2c8:	e12fff33 	blx	r3
   3c2cc:	eaffff78 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c2d0:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3c2d4:	e3560001 	cmp	r6, #1
   3c2d8:	1afffe5d 	bne	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c2dc:	e1a01005 	mov	r1, r5
   3c2e0:	e59f09b0 	ldr	r0, [pc, #2480]	; 3cc98 <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   3c2e4:	ebffb681 	bl	29cf0 <strchr>
   3c2e8:	e3500000 	cmp	r0, #0
   3c2ec:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c2f0:	0afffe57 	beq	3bc54 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3c2f4:	e3a03002 	mov	r3, #2
   3c2f8:	e1a00006 	mov	r0, r6
   3c2fc:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3c300:	eafffe92 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3c304:	e1a01005 	mov	r1, r5
   3c308:	e59f098c 	ldr	r0, [pc, #2444]	; 3cc9c <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   3c30c:	ebffb677 	bl	29cf0 <strchr>
   3c310:	e3500000 	cmp	r0, #0
   3c314:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c318:	1afffe6d 	bne	3bcd4 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3c31c:	e3560002 	cmp	r6, #2
   3c320:	1affff6b 	bne	3c0d4 <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3c324:	e1a01005 	mov	r1, r5
   3c328:	e59f0970 	ldr	r0, [pc, #2416]	; 3cca0 <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   3c32c:	ebffb66f 	bl	29cf0 <strchr>
   3c330:	e3500000 	cmp	r0, #0
   3c334:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c338:	1afffe65 	bne	3bcd4 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3c33c:	e3560002 	cmp	r6, #2
   3c340:	1afffe55 	bne	3bc9c <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3c344:	e1a01005 	mov	r1, r5
   3c348:	e59f0954 	ldr	r0, [pc, #2388]	; 3cca4 <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   3c34c:	ebffb667 	bl	29cf0 <strchr>
   3c350:	e3500000 	cmp	r0, #0
   3c354:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c358:	1afffe5d 	bne	3bcd4 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3c35c:	e3560002 	cmp	r6, #2
   3c360:	1afffe4d 	bne	3bc9c <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3c364:	e1a01005 	mov	r1, r5
   3c368:	e59f0938 	ldr	r0, [pc, #2360]	; 3cca8 <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   3c36c:	ebffb65f 	bl	29cf0 <strchr>
   3c370:	e3500000 	cmp	r0, #0
   3c374:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c378:	1affff8e 	bne	3c1b8 <TermAnsi::handleAnsiChar(unsigned char)+0x594>
   3c37c:	eafffe44 	b	3bc94 <TermAnsi::handleAnsiChar(unsigned char)+0x70>
   3c380:	e1a01005 	mov	r1, r5
   3c384:	e59f0908 	ldr	r0, [pc, #2312]	; 3cc94 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3c388:	ebffb658 	bl	29cf0 <strchr>
   3c38c:	e3500000 	cmp	r0, #0
   3c390:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c394:	1afffe4e 	bne	3bcd4 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3c398:	e3560002 	cmp	r6, #2
   3c39c:	1affffde 	bne	3c31c <TermAnsi::handleAnsiChar(unsigned char)+0x6f8>
   3c3a0:	e1a01005 	mov	r1, r5
   3c3a4:	e59f0900 	ldr	r0, [pc, #2304]	; 3ccac <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   3c3a8:	ebffb650 	bl	29cf0 <strchr>
   3c3ac:	e3500000 	cmp	r0, #0
   3c3b0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c3b4:	0a00001c 	beq	3c42c <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3c3b8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c3bc:	e3530007 	cmp	r3, #7
   3c3c0:	8a000004 	bhi	3c3d8 <TermAnsi::handleAnsiChar(unsigned char)+0x7b4>
   3c3c4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c3c8:	e2831001 	add	r1, r3, #1
   3c3cc:	e283300c 	add	r3, r3, #12
   3c3d0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c3d4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c3d8:	e3a03000 	mov	r3, #0
   3c3dc:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3c3e0:	e5843054 	str	r3, [r4, #84]	; 0x54
   3c3e4:	e1520003 	cmp	r2, r3
   3c3e8:	1affff31 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c3ec:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3c3f0:	e3530003 	cmp	r3, #3
   3c3f4:	1affff2e 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c3f8:	e1a03004 	mov	r3, r4
   3c3fc:	e3a0c020 	mov	ip, #32
   3c400:	e3a0000f 	mov	r0, #15
   3c404:	e594100c 	ldr	r1, [r4, #12]
   3c408:	e0841101 	add	r1, r4, r1, lsl #2
   3c40c:	e1530001 	cmp	r3, r1
   3c410:	0affff27 	beq	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c414:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   3c418:	e5c3005d 	strb	r0, [r3, #93]	; 0x5d
   3c41c:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   3c420:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   3c424:	e2833004 	add	r3, r3, #4
   3c428:	eafffff7 	b	3c40c <TermAnsi::handleAnsiChar(unsigned char)+0x7e8>
   3c42c:	e3560002 	cmp	r6, #2
   3c430:	1affffc1 	bne	3c33c <TermAnsi::handleAnsiChar(unsigned char)+0x718>
   3c434:	e1a01005 	mov	r1, r5
   3c438:	e59f0870 	ldr	r0, [pc, #2160]	; 3ccb0 <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   3c43c:	ebffb62b 	bl	29cf0 <strchr>
   3c440:	e3500000 	cmp	r0, #0
   3c444:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c448:	0a00000f 	beq	3c48c <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3c44c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c450:	e3530007 	cmp	r3, #7
   3c454:	8a000004 	bhi	3c46c <TermAnsi::handleAnsiChar(unsigned char)+0x848>
   3c458:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c45c:	e2831001 	add	r1, r3, #1
   3c460:	e283300c 	add	r3, r3, #12
   3c464:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c468:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c46c:	e3a02000 	mov	r2, #0
   3c470:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c474:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c478:	e1530002 	cmp	r3, r2
   3c47c:	1affff0c 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c480:	e1a00004 	mov	r0, r4
   3c484:	ebfffd67 	bl	3ba28 <TermAnsi::sgr()>
   3c488:	eaffff09 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c48c:	e3560002 	cmp	r6, #2
   3c490:	1affffb1 	bne	3c35c <TermAnsi::handleAnsiChar(unsigned char)+0x738>
   3c494:	e1a01005 	mov	r1, r5
   3c498:	e59f0814 	ldr	r0, [pc, #2068]	; 3ccb4 <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   3c49c:	ebffb613 	bl	29cf0 <strchr>
   3c4a0:	e3500000 	cmp	r0, #0
   3c4a4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c4a8:	1afffe09 	bne	3bcd4 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3c4ac:	eafffdf6 	b	3bc8c <TermAnsi::handleAnsiChar(unsigned char)+0x68>
   3c4b0:	e1a01005 	mov	r1, r5
   3c4b4:	e59f07fc 	ldr	r0, [pc, #2044]	; 3ccb8 <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   3c4b8:	ebffb60c 	bl	29cf0 <strchr>
   3c4bc:	e3500000 	cmp	r0, #0
   3c4c0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c4c4:	0a000012 	beq	3c514 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3c4c8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c4cc:	e3530007 	cmp	r3, #7
   3c4d0:	8a000004 	bhi	3c4e8 <TermAnsi::handleAnsiChar(unsigned char)+0x8c4>
   3c4d4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c4d8:	e2831001 	add	r1, r3, #1
   3c4dc:	e283300c 	add	r3, r3, #12
   3c4e0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c4e4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c4e8:	e3a03000 	mov	r3, #0
   3c4ec:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3c4f0:	e5843054 	str	r3, [r4, #84]	; 0x54
   3c4f4:	e1510003 	cmp	r1, r3
   3c4f8:	1afffeed 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c4fc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3c500:	e1a00004 	mov	r0, r4
   3c504:	e1520003 	cmp	r2, r3
   3c508:	03a02001 	moveq	r2, #1
   3c50c:	ebfffc63 	bl	3b6a0 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3c510:	eafffee7 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c514:	e3560002 	cmp	r6, #2
   3c518:	1affff9e 	bne	3c398 <TermAnsi::handleAnsiChar(unsigned char)+0x774>
   3c51c:	e1a01005 	mov	r1, r5
   3c520:	e59f0794 	ldr	r0, [pc, #1940]	; 3ccbc <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   3c524:	ebffb5f1 	bl	29cf0 <strchr>
   3c528:	e3500000 	cmp	r0, #0
   3c52c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c530:	0a000014 	beq	3c588 <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3c534:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c538:	e3530007 	cmp	r3, #7
   3c53c:	8a000004 	bhi	3c554 <TermAnsi::handleAnsiChar(unsigned char)+0x930>
   3c540:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c544:	e2831001 	add	r1, r3, #1
   3c548:	e283300c 	add	r3, r3, #12
   3c54c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c550:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c554:	e3a02000 	mov	r2, #0
   3c558:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c55c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c560:	e1530002 	cmp	r3, r2
   3c564:	1afffed2 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c568:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3c56c:	e5942014 	ldr	r2, [r4, #20]
   3c570:	e3530000 	cmp	r3, #0
   3c574:	03a03001 	moveq	r3, #1
   3c578:	e5941018 	ldr	r1, [r4, #24]
   3c57c:	e1a00004 	mov	r0, r4
   3c580:	ebfffb87 	bl	3b3a4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3c584:	eafffeca 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c588:	e3560002 	cmp	r6, #2
   3c58c:	1affffa6 	bne	3c42c <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3c590:	e1a01005 	mov	r1, r5
   3c594:	e59f0724 	ldr	r0, [pc, #1828]	; 3ccc0 <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3c598:	ebffb5d4 	bl	29cf0 <strchr>
   3c59c:	e3500000 	cmp	r0, #0
   3c5a0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c5a4:	0a00001d 	beq	3c620 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3c5a8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c5ac:	e3530007 	cmp	r3, #7
   3c5b0:	8a000004 	bhi	3c5c8 <TermAnsi::handleAnsiChar(unsigned char)+0x9a4>
   3c5b4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c5b8:	e2831001 	add	r1, r3, #1
   3c5bc:	e283300c 	add	r3, r3, #12
   3c5c0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c5c4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c5c8:	e3a02000 	mov	r2, #0
   3c5cc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c5d0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c5d4:	e1530002 	cmp	r3, r2
   3c5d8:	1a000091 	bne	3c824 <TermAnsi::handleAnsiChar(unsigned char)+0xc00>
   3c5dc:	e5943014 	ldr	r3, [r4, #20]
   3c5e0:	e3530000 	cmp	r3, #0
   3c5e4:	e2432001 	sub	r2, r3, #1
   3c5e8:	e0841103 	add	r1, r4, r3, lsl #2
   3c5ec:	0a000004 	beq	3c604 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3c5f0:	e5842014 	str	r2, [r4, #20]
   3c5f4:	e5d13058 	ldrb	r3, [r1, #88]	; 0x58
   3c5f8:	e353002a 	cmp	r3, #42	; 0x2a
   3c5fc:	1afffff6 	bne	3c5dc <TermAnsi::handleAnsiChar(unsigned char)+0x9b8>
   3c600:	e1a03002 	mov	r3, r2
   3c604:	e5940010 	ldr	r0, [r4, #16]
   3c608:	e5942018 	ldr	r2, [r4, #24]
   3c60c:	e594100c 	ldr	r1, [r4, #12]
   3c610:	e2400001 	sub	r0, r0, #1
   3c614:	e1520000 	cmp	r2, r0
   3c618:	e2411001 	sub	r1, r1, #1
   3c61c:	eafffe25 	b	3beb8 <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3c620:	e3560002 	cmp	r6, #2
   3c624:	1affff98 	bne	3c48c <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3c628:	e1a01005 	mov	r1, r5
   3c62c:	e59f0690 	ldr	r0, [pc, #1680]	; 3ccc4 <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   3c630:	ebffb5ae 	bl	29cf0 <strchr>
   3c634:	e3500000 	cmp	r0, #0
   3c638:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c63c:	0afffd90 	beq	3bc84 <TermAnsi::handleAnsiChar(unsigned char)+0x60>
   3c640:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c644:	e3530007 	cmp	r3, #7
   3c648:	8a000004 	bhi	3c660 <TermAnsi::handleAnsiChar(unsigned char)+0xa3c>
   3c64c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c650:	e2831001 	add	r1, r3, #1
   3c654:	e283300c 	add	r3, r3, #12
   3c658:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c65c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c660:	e3a02000 	mov	r2, #0
   3c664:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c668:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c66c:	e1530002 	cmp	r3, r2
   3c670:	1afffe8f 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c674:	e1a00004 	mov	r0, r4
   3c678:	ebfffcd4 	bl	3b9d0 <TermAnsi::rep()>
   3c67c:	eafffe8c 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c680:	e1a01005 	mov	r1, r5
   3c684:	e59f063c 	ldr	r0, [pc, #1596]	; 3ccc8 <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   3c688:	ebffb598 	bl	29cf0 <strchr>
   3c68c:	e3500000 	cmp	r0, #0
   3c690:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c694:	0a000013 	beq	3c6e8 <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3c698:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c69c:	e3530007 	cmp	r3, #7
   3c6a0:	8a000004 	bhi	3c6b8 <TermAnsi::handleAnsiChar(unsigned char)+0xa94>
   3c6a4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c6a8:	e2831001 	add	r1, r3, #1
   3c6ac:	e283300c 	add	r3, r3, #12
   3c6b0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c6b4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c6b8:	e3a02000 	mov	r2, #0
   3c6bc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c6c0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c6c4:	e1530002 	cmp	r3, r2
   3c6c8:	1afffe79 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c6cc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3c6d0:	e5941018 	ldr	r1, [r4, #24]
   3c6d4:	e3520000 	cmp	r2, #0
   3c6d8:	03a02001 	moveq	r2, #1
   3c6dc:	e1a00004 	mov	r0, r4
   3c6e0:	ebfffbee 	bl	3b6a0 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3c6e4:	eafffe72 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c6e8:	e3560002 	cmp	r6, #2
   3c6ec:	1affff88 	bne	3c514 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3c6f0:	e1a01005 	mov	r1, r5
   3c6f4:	e59f05d0 	ldr	r0, [pc, #1488]	; 3cccc <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   3c6f8:	ebffb57c 	bl	29cf0 <strchr>
   3c6fc:	e3500000 	cmp	r0, #0
   3c700:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c704:	0a000013 	beq	3c758 <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3c708:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c70c:	e3530007 	cmp	r3, #7
   3c710:	8a000004 	bhi	3c728 <TermAnsi::handleAnsiChar(unsigned char)+0xb04>
   3c714:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c718:	e2831001 	add	r1, r3, #1
   3c71c:	e283300c 	add	r3, r3, #12
   3c720:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c724:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c728:	e3a02000 	mov	r2, #0
   3c72c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c730:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c734:	e1530002 	cmp	r3, r2
   3c738:	1afffe5d 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c73c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3c740:	e5941018 	ldr	r1, [r4, #24]
   3c744:	e3520000 	cmp	r2, #0
   3c748:	03a02001 	moveq	r2, #1
   3c74c:	e1a00004 	mov	r0, r4
   3c750:	ebfffb52 	bl	3b4a0 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3c754:	eafffe56 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c758:	e3560002 	cmp	r6, #2
   3c75c:	1affff89 	bne	3c588 <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3c760:	e1a01005 	mov	r1, r5
   3c764:	e59f0564 	ldr	r0, [pc, #1380]	; 3ccd0 <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   3c768:	ebffb560 	bl	29cf0 <strchr>
   3c76c:	e3500000 	cmp	r0, #0
   3c770:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c774:	0a00000f 	beq	3c7b8 <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3c778:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c77c:	e3530007 	cmp	r3, #7
   3c780:	8a000004 	bhi	3c798 <TermAnsi::handleAnsiChar(unsigned char)+0xb74>
   3c784:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c788:	e2831001 	add	r1, r3, #1
   3c78c:	e283300c 	add	r3, r3, #12
   3c790:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c794:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c798:	e3a02000 	mov	r2, #0
   3c79c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c7a0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c7a4:	e1530002 	cmp	r3, r2
   3c7a8:	1afffe41 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c7ac:	e1a00004 	mov	r0, r4
   3c7b0:	ebfffc45 	bl	3b8cc <TermAnsi::dch()>
   3c7b4:	eafffe3e 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c7b8:	e3560002 	cmp	r6, #2
   3c7bc:	1affff97 	bne	3c620 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3c7c0:	e1a01005 	mov	r1, r5
   3c7c4:	e59f0508 	ldr	r0, [pc, #1288]	; 3ccd4 <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   3c7c8:	ebffb548 	bl	29cf0 <strchr>
   3c7cc:	e3500000 	cmp	r0, #0
   3c7d0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c7d4:	0afffd28 	beq	3bc7c <TermAnsi::handleAnsiChar(unsigned char)+0x58>
   3c7d8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c7dc:	e3530007 	cmp	r3, #7
   3c7e0:	8a000004 	bhi	3c7f8 <TermAnsi::handleAnsiChar(unsigned char)+0xbd4>
   3c7e4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c7e8:	e2831001 	add	r1, r3, #1
   3c7ec:	e283300c 	add	r3, r3, #12
   3c7f0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c7f4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c7f8:	e3a03000 	mov	r3, #0
   3c7fc:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3c800:	e5843054 	str	r3, [r4, #84]	; 0x54
   3c804:	e1510003 	cmp	r1, r3
   3c808:	1afffe29 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c80c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3c810:	e1a00004 	mov	r0, r4
   3c814:	e1520003 	cmp	r2, r3
   3c818:	03a02001 	moveq	r2, #1
   3c81c:	ebfffb1f 	bl	3b4a0 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3c820:	eafffe23 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c824:	e5943014 	ldr	r3, [r4, #20]
   3c828:	eaffff75 	b	3c604 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3c82c:	e1a01005 	mov	r1, r5
   3c830:	e59f04a0 	ldr	r0, [pc, #1184]	; 3ccd8 <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3c834:	ebffb52d 	bl	29cf0 <strchr>
   3c838:	e3500000 	cmp	r0, #0
   3c83c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c840:	0a000016 	beq	3c8a0 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3c844:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c848:	e3530007 	cmp	r3, #7
   3c84c:	8a000004 	bhi	3c864 <TermAnsi::handleAnsiChar(unsigned char)+0xc40>
   3c850:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c854:	e2831001 	add	r1, r3, #1
   3c858:	e283300c 	add	r3, r3, #12
   3c85c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c860:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c864:	e3a02000 	mov	r2, #0
   3c868:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c86c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c870:	e1530002 	cmp	r3, r2
   3c874:	1afffe0e 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c878:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3c87c:	e1530002 	cmp	r3, r2
   3c880:	01a02003 	moveq	r2, r3
   3c884:	12432001 	subne	r2, r3, #1
   3c888:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3c88c:	e5842018 	str	r2, [r4, #24]
   3c890:	e3530000 	cmp	r3, #0
   3c894:	12433001 	subne	r3, r3, #1
   3c898:	e5843014 	str	r3, [r4, #20]
   3c89c:	eafffe04 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c8a0:	e3560002 	cmp	r6, #2
   3c8a4:	1affff8f 	bne	3c6e8 <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3c8a8:	e1a01005 	mov	r1, r5
   3c8ac:	e59f0428 	ldr	r0, [pc, #1064]	; 3ccdc <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   3c8b0:	ebffb50e 	bl	29cf0 <strchr>
   3c8b4:	e3500000 	cmp	r0, #0
   3c8b8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c8bc:	0a000019 	beq	3c928 <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3c8c0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c8c4:	e3530007 	cmp	r3, #7
   3c8c8:	8a000004 	bhi	3c8e0 <TermAnsi::handleAnsiChar(unsigned char)+0xcbc>
   3c8cc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c8d0:	e2831001 	add	r1, r3, #1
   3c8d4:	e283300c 	add	r3, r3, #12
   3c8d8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c8dc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c8e0:	e3a02000 	mov	r2, #0
   3c8e4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c8e8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c8ec:	e1530002 	cmp	r3, r2
   3c8f0:	e594300c 	ldr	r3, [r4, #12]
   3c8f4:	1a0000a1 	bne	3cb80 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3c8f8:	e5942014 	ldr	r2, [r4, #20]
   3c8fc:	e2430001 	sub	r0, r3, #1
   3c900:	e2822001 	add	r2, r2, #1
   3c904:	e2821001 	add	r1, r2, #1
   3c908:	e1500002 	cmp	r0, r2
   3c90c:	e084c101 	add	ip, r4, r1, lsl #2
   3c910:	9a000179 	bls	3cefc <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3c914:	e5dcc058 	ldrb	ip, [ip, #88]	; 0x58
   3c918:	e35c002a 	cmp	ip, #42	; 0x2a
   3c91c:	0a000176 	beq	3cefc <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3c920:	e1a02001 	mov	r2, r1
   3c924:	eafffff6 	b	3c904 <TermAnsi::handleAnsiChar(unsigned char)+0xce0>
   3c928:	e3560002 	cmp	r6, #2
   3c92c:	1affff89 	bne	3c758 <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3c930:	e1a01005 	mov	r1, r5
   3c934:	e59f03a4 	ldr	r0, [pc, #932]	; 3cce0 <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3c938:	ebffb4ec 	bl	29cf0 <strchr>
   3c93c:	e3500000 	cmp	r0, #0
   3c940:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c944:	0a00000f 	beq	3c988 <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3c948:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c94c:	e3530007 	cmp	r3, #7
   3c950:	8a000004 	bhi	3c968 <TermAnsi::handleAnsiChar(unsigned char)+0xd44>
   3c954:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c958:	e2831001 	add	r1, r3, #1
   3c95c:	e283300c 	add	r3, r3, #12
   3c960:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c964:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c968:	e3a02000 	mov	r2, #0
   3c96c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c970:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c974:	e1530002 	cmp	r3, r2
   3c978:	1afffdcd 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c97c:	e1a00004 	mov	r0, r4
   3c980:	ebfffb9a 	bl	3b7f0 <TermAnsi::ed()>
   3c984:	eafffdca 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c988:	e3560002 	cmp	r6, #2
   3c98c:	1affff89 	bne	3c7b8 <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3c990:	e1a01005 	mov	r1, r5
   3c994:	e59f0348 	ldr	r0, [pc, #840]	; 3cce4 <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   3c998:	ebffb4d4 	bl	29cf0 <strchr>
   3c99c:	e3500000 	cmp	r0, #0
   3c9a0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c9a4:	0afffcb2 	beq	3bc74 <TermAnsi::handleAnsiChar(unsigned char)+0x50>
   3c9a8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3c9ac:	e3530007 	cmp	r3, #7
   3c9b0:	8a000004 	bhi	3c9c8 <TermAnsi::handleAnsiChar(unsigned char)+0xda4>
   3c9b4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3c9b8:	e2831001 	add	r1, r3, #1
   3c9bc:	e283300c 	add	r3, r3, #12
   3c9c0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3c9c4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3c9c8:	e3a02000 	mov	r2, #0
   3c9cc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3c9d0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3c9d4:	e1530002 	cmp	r3, r2
   3c9d8:	1afffdb5 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c9dc:	e1a00004 	mov	r0, r4
   3c9e0:	ebfffba1 	bl	3b86c <TermAnsi::el()>
   3c9e4:	eafffdb2 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3c9e8:	e1a01005 	mov	r1, r5
   3c9ec:	e59f02f4 	ldr	r0, [pc, #756]	; 3cce8 <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   3c9f0:	ebffb4be 	bl	29cf0 <strchr>
   3c9f4:	e3500000 	cmp	r0, #0
   3c9f8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3c9fc:	0a000023 	beq	3ca90 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3ca00:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ca04:	e3530007 	cmp	r3, #7
   3ca08:	8a000004 	bhi	3ca20 <TermAnsi::handleAnsiChar(unsigned char)+0xdfc>
   3ca0c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ca10:	e2831001 	add	r1, r3, #1
   3ca14:	e283300c 	add	r3, r3, #12
   3ca18:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ca1c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ca20:	e3a03000 	mov	r3, #0
   3ca24:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3ca28:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ca2c:	e1510003 	cmp	r1, r3
   3ca30:	1a00008a 	bne	3cc60 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3ca34:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3ca38:	e5940018 	ldr	r0, [r4, #24]
   3ca3c:	e3520000 	cmp	r2, #0
   3ca40:	03a02001 	moveq	r2, #1
   3ca44:	e5943010 	ldr	r3, [r4, #16]
   3ca48:	e0822000 	add	r2, r2, r0
   3ca4c:	e2430001 	sub	r0, r3, #1
   3ca50:	e1520000 	cmp	r2, r0
   3ca54:	21a02000 	movcs	r2, r0
   3ca58:	e5841014 	str	r1, [r4, #20]
   3ca5c:	e5842018 	str	r2, [r4, #24]
   3ca60:	e5941018 	ldr	r1, [r4, #24]
   3ca64:	e594000c 	ldr	r0, [r4, #12]
   3ca68:	e5942014 	ldr	r2, [r4, #20]
   3ca6c:	e2433001 	sub	r3, r3, #1
   3ca70:	e1510003 	cmp	r1, r3
   3ca74:	e2400001 	sub	r0, r0, #1
   3ca78:	21a01003 	movcs	r1, r3
   3ca7c:	e1520000 	cmp	r2, r0
   3ca80:	21a02000 	movcs	r2, r0
   3ca84:	e5841018 	str	r1, [r4, #24]
   3ca88:	e5842014 	str	r2, [r4, #20]
   3ca8c:	eafffcdc 	b	3be04 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3ca90:	e3560002 	cmp	r6, #2
   3ca94:	1affff81 	bne	3c8a0 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3ca98:	e1a01005 	mov	r1, r5
   3ca9c:	e59f0248 	ldr	r0, [pc, #584]	; 3ccec <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   3caa0:	ebffb492 	bl	29cf0 <strchr>
   3caa4:	e3500000 	cmp	r0, #0
   3caa8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3caac:	0a000016 	beq	3cb0c <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3cab0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cab4:	e3530007 	cmp	r3, #7
   3cab8:	8a000004 	bhi	3cad0 <TermAnsi::handleAnsiChar(unsigned char)+0xeac>
   3cabc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cac0:	e2831001 	add	r1, r3, #1
   3cac4:	e283300c 	add	r3, r3, #12
   3cac8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cacc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cad0:	e3a02000 	mov	r2, #0
   3cad4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cad8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cadc:	e1530002 	cmp	r3, r2
   3cae0:	1afffd73 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3cae4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3cae8:	e5941018 	ldr	r1, [r4, #24]
   3caec:	e3520000 	cmp	r2, #0
   3caf0:	03a02001 	moveq	r2, #1
   3caf4:	e1520001 	cmp	r2, r1
   3caf8:	e5843014 	str	r3, [r4, #20]
   3cafc:	0a000000 	beq	3cb04 <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3cb00:	e0413002 	sub	r3, r1, r2
   3cb04:	e5843018 	str	r3, [r4, #24]
   3cb08:	eafffd69 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3cb0c:	e3560002 	cmp	r6, #2
   3cb10:	1affff84 	bne	3c928 <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3cb14:	e1a01005 	mov	r1, r5
   3cb18:	e59f01d0 	ldr	r0, [pc, #464]	; 3ccf0 <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   3cb1c:	ebffb473 	bl	29cf0 <strchr>
   3cb20:	e3500000 	cmp	r0, #0
   3cb24:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3cb28:	0a000022 	beq	3cbb8 <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3cb2c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cb30:	e3530007 	cmp	r3, #7
   3cb34:	8a000004 	bhi	3cb4c <TermAnsi::handleAnsiChar(unsigned char)+0xf28>
   3cb38:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cb3c:	e2831001 	add	r1, r3, #1
   3cb40:	e283300c 	add	r3, r3, #12
   3cb44:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cb48:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cb4c:	e3a02000 	mov	r2, #0
   3cb50:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cb54:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cb58:	e1530002 	cmp	r3, r2
   3cb5c:	1a000013 	bne	3cbb0 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3cb60:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3cb64:	e594300c 	ldr	r3, [r4, #12]
   3cb68:	e3520000 	cmp	r2, #0
   3cb6c:	12422001 	subne	r2, r2, #1
   3cb70:	e2431001 	sub	r1, r3, #1
   3cb74:	e1520001 	cmp	r2, r1
   3cb78:	21a02001 	movcs	r2, r1
   3cb7c:	e5842014 	str	r2, [r4, #20]
   3cb80:	e5940010 	ldr	r0, [r4, #16]
   3cb84:	e5941018 	ldr	r1, [r4, #24]
   3cb88:	e5942014 	ldr	r2, [r4, #20]
   3cb8c:	e2400001 	sub	r0, r0, #1
   3cb90:	e2433001 	sub	r3, r3, #1
   3cb94:	e1510000 	cmp	r1, r0
   3cb98:	21a01000 	movcs	r1, r0
   3cb9c:	e1520003 	cmp	r2, r3
   3cba0:	21a02003 	movcs	r2, r3
   3cba4:	e5841018 	str	r1, [r4, #24]
   3cba8:	e5842014 	str	r2, [r4, #20]
   3cbac:	eafffc94 	b	3be04 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3cbb0:	e594300c 	ldr	r3, [r4, #12]
   3cbb4:	eafffff1 	b	3cb80 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3cbb8:	e3560002 	cmp	r6, #2
   3cbbc:	1affff71 	bne	3c988 <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3cbc0:	e1a01005 	mov	r1, r5
   3cbc4:	e59f0128 	ldr	r0, [pc, #296]	; 3ccf4 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3cbc8:	ebffb448 	bl	29cf0 <strchr>
   3cbcc:	e3500000 	cmp	r0, #0
   3cbd0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3cbd4:	0afffc24 	beq	3bc6c <TermAnsi::handleAnsiChar(unsigned char)+0x48>
   3cbd8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cbdc:	e3530007 	cmp	r3, #7
   3cbe0:	8a000004 	bhi	3cbf8 <TermAnsi::handleAnsiChar(unsigned char)+0xfd4>
   3cbe4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cbe8:	e2831001 	add	r1, r3, #1
   3cbec:	e283300c 	add	r3, r3, #12
   3cbf0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cbf4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cbf8:	e3a02000 	mov	r2, #0
   3cbfc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cc00:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cc04:	e1530002 	cmp	r3, r2
   3cc08:	15943010 	ldrne	r3, [r4, #16]
   3cc0c:	1a000007 	bne	3cc30 <TermAnsi::handleAnsiChar(unsigned char)+0x100c>
   3cc10:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3cc14:	e5943010 	ldr	r3, [r4, #16]
   3cc18:	e3520000 	cmp	r2, #0
   3cc1c:	12422001 	subne	r2, r2, #1
   3cc20:	e2431001 	sub	r1, r3, #1
   3cc24:	e1520001 	cmp	r2, r1
   3cc28:	21a02001 	movcs	r2, r1
   3cc2c:	e5842018 	str	r2, [r4, #24]
   3cc30:	e5941018 	ldr	r1, [r4, #24]
   3cc34:	e594000c 	ldr	r0, [r4, #12]
   3cc38:	e2433001 	sub	r3, r3, #1
   3cc3c:	e5942014 	ldr	r2, [r4, #20]
   3cc40:	e1510003 	cmp	r1, r3
   3cc44:	e2400001 	sub	r0, r0, #1
   3cc48:	31a03001 	movcc	r3, r1
   3cc4c:	e1520000 	cmp	r2, r0
   3cc50:	21a02000 	movcs	r2, r0
   3cc54:	e5843018 	str	r3, [r4, #24]
   3cc58:	e5842014 	str	r2, [r4, #20]
   3cc5c:	eafffc68 	b	3be04 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3cc60:	e5943010 	ldr	r3, [r4, #16]
   3cc64:	eaffff7d 	b	3ca60 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3cc68:	000490f0 	.word	0x000490f0
   3cc6c:	000490f4 	.word	0x000490f4
   3cc70:	00044a9c 	.word	0x00044a9c
   3cc74:	00049234 	.word	0x00049234
   3cc78:	000490f8 	.word	0x000490f8
   3cc7c:	00045a94 	.word	0x00045a94
   3cc80:	00049144 	.word	0x00049144
   3cc84:	00042e60 	.word	0x00042e60
   3cc88:	00044b44 	.word	0x00044b44
   3cc8c:	00044b48 	.word	0x00044b48
   3cc90:	000490fc 	.word	0x000490fc
   3cc94:	00049104 	.word	0x00049104
   3cc98:	00048234 	.word	0x00048234
   3cc9c:	00046c14 	.word	0x00046c14
   3cca0:	000410b8 	.word	0x000410b8
   3cca4:	000419b4 	.word	0x000419b4
   3cca8:	000457b0 	.word	0x000457b0
   3ccac:	00046088 	.word	0x00046088
   3ccb0:	00049140 	.word	0x00049140
   3ccb4:	00041208 	.word	0x00041208
   3ccb8:	00040ccc 	.word	0x00040ccc
   3ccbc:	00042c44 	.word	0x00042c44
   3ccc0:	00049138 	.word	0x00049138
   3ccc4:	0004913c 	.word	0x0004913c
   3ccc8:	000473c0 	.word	0x000473c0
   3cccc:	00049134 	.word	0x00049134
   3ccd0:	00042e28 	.word	0x00042e28
   3ccd4:	00040c24 	.word	0x00040c24
   3ccd8:	00049128 	.word	0x00049128
   3ccdc:	0004912c 	.word	0x0004912c
   3cce0:	00049130 	.word	0x00049130
   3cce4:	00046024 	.word	0x00046024
   3cce8:	00041524 	.word	0x00041524
   3ccec:	00049120 	.word	0x00049120
   3ccf0:	00049124 	.word	0x00049124
   3ccf4:	0004819c 	.word	0x0004819c
   3ccf8:	0004928c 	.word	0x0004928c
   3ccfc:	0004911c 	.word	0x0004911c
   3cd00:	00046720 	.word	0x00046720
   3cd04:	000483a4 	.word	0x000483a4
   3cd08:	00044a94 	.word	0x00044a94
   3cd0c:	00049108 	.word	0x00049108
   3cd10:	0004910c 	.word	0x0004910c
   3cd14:	00049110 	.word	0x00049110
   3cd18:	e1a01005 	mov	r1, r5
   3cd1c:	e51f002c 	ldr	r0, [pc, #-44]	; 3ccf8 <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   3cd20:	ebffb3f2 	bl	29cf0 <strchr>
   3cd24:	e3500000 	cmp	r0, #0
   3cd28:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3cd2c:	0a000013 	beq	3cd80 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3cd30:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cd34:	e3530007 	cmp	r3, #7
   3cd38:	8a000004 	bhi	3cd50 <TermAnsi::handleAnsiChar(unsigned char)+0x112c>
   3cd3c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cd40:	e2831001 	add	r1, r3, #1
   3cd44:	e283300c 	add	r3, r3, #12
   3cd48:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cd4c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cd50:	e3a02000 	mov	r2, #0
   3cd54:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cd58:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cd5c:	e1530002 	cmp	r3, r2
   3cd60:	1afffcd3 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3cd64:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3cd68:	e5941018 	ldr	r1, [r4, #24]
   3cd6c:	e3520000 	cmp	r2, #0
   3cd70:	03a02001 	moveq	r2, #1
   3cd74:	e1520001 	cmp	r2, r1
   3cd78:	8affff61 	bhi	3cb04 <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3cd7c:	eaffff5f 	b	3cb00 <TermAnsi::handleAnsiChar(unsigned char)+0xedc>
   3cd80:	e3560002 	cmp	r6, #2
   3cd84:	1affff41 	bne	3ca90 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3cd88:	e1a01005 	mov	r1, r5
   3cd8c:	e51f0098 	ldr	r0, [pc, #-152]	; 3ccfc <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   3cd90:	ebffb3d6 	bl	29cf0 <strchr>
   3cd94:	e3500000 	cmp	r0, #0
   3cd98:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3cd9c:	0a000017 	beq	3ce00 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3cda0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cda4:	e3530007 	cmp	r3, #7
   3cda8:	8a000004 	bhi	3cdc0 <TermAnsi::handleAnsiChar(unsigned char)+0x119c>
   3cdac:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cdb0:	e2831001 	add	r1, r3, #1
   3cdb4:	e283300c 	add	r3, r3, #12
   3cdb8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cdbc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cdc0:	e3a02000 	mov	r2, #0
   3cdc4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cdc8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cdcc:	e1530002 	cmp	r3, r2
   3cdd0:	1affffa2 	bne	3cc60 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3cdd4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3cdd8:	e5941018 	ldr	r1, [r4, #24]
   3cddc:	e3520000 	cmp	r2, #0
   3cde0:	03a02001 	moveq	r2, #1
   3cde4:	e5943010 	ldr	r3, [r4, #16]
   3cde8:	e0822001 	add	r2, r2, r1
   3cdec:	e2431001 	sub	r1, r3, #1
   3cdf0:	e1520001 	cmp	r2, r1
   3cdf4:	21a02001 	movcs	r2, r1
   3cdf8:	e5842018 	str	r2, [r4, #24]
   3cdfc:	eaffff17 	b	3ca60 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3ce00:	e3560002 	cmp	r6, #2
   3ce04:	1affff40 	bne	3cb0c <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3ce08:	e1a01005 	mov	r1, r5
   3ce0c:	e51f0114 	ldr	r0, [pc, #-276]	; 3cd00 <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   3ce10:	ebffb3b6 	bl	29cf0 <strchr>
   3ce14:	e3500000 	cmp	r0, #0
   3ce18:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ce1c:	0a000017 	beq	3ce80 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3ce20:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ce24:	e3530007 	cmp	r3, #7
   3ce28:	8a000004 	bhi	3ce40 <TermAnsi::handleAnsiChar(unsigned char)+0x121c>
   3ce2c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ce30:	e2831001 	add	r1, r3, #1
   3ce34:	e283300c 	add	r3, r3, #12
   3ce38:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ce3c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ce40:	e3a02000 	mov	r2, #0
   3ce44:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ce48:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ce4c:	e1530002 	cmp	r3, r2
   3ce50:	1affff56 	bne	3cbb0 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3ce54:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3ce58:	e5941014 	ldr	r1, [r4, #20]
   3ce5c:	e3520000 	cmp	r2, #0
   3ce60:	03a02001 	moveq	r2, #1
   3ce64:	e594300c 	ldr	r3, [r4, #12]
   3ce68:	e0822001 	add	r2, r2, r1
   3ce6c:	e2431001 	sub	r1, r3, #1
   3ce70:	e1520001 	cmp	r2, r1
   3ce74:	21a02001 	movcs	r2, r1
   3ce78:	e5842014 	str	r2, [r4, #20]
   3ce7c:	eaffff3f 	b	3cb80 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3ce80:	e3560002 	cmp	r6, #2
   3ce84:	1affff4b 	bne	3cbb8 <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3ce88:	e1a01005 	mov	r1, r5
   3ce8c:	e51f0190 	ldr	r0, [pc, #-400]	; 3cd04 <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   3ce90:	ebffb396 	bl	29cf0 <strchr>
   3ce94:	e3500000 	cmp	r0, #0
   3ce98:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ce9c:	0afffb70 	beq	3bc64 <TermAnsi::handleAnsiChar(unsigned char)+0x40>
   3cea0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cea4:	e3530007 	cmp	r3, #7
   3cea8:	8a000004 	bhi	3cec0 <TermAnsi::handleAnsiChar(unsigned char)+0x129c>
   3ceac:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ceb0:	e2831001 	add	r1, r3, #1
   3ceb4:	e283300c 	add	r3, r3, #12
   3ceb8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cebc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cec0:	e3a02000 	mov	r2, #0
   3cec4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3cec8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3cecc:	e1530002 	cmp	r3, r2
   3ced0:	1afffc77 	bne	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3ced4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3ced8:	e5941014 	ldr	r1, [r4, #20]
   3cedc:	e3520000 	cmp	r2, #0
   3cee0:	03a02001 	moveq	r2, #1
   3cee4:	e1520001 	cmp	r2, r1
   3cee8:	90413002 	subls	r3, r1, r2
   3ceec:	e1530001 	cmp	r3, r1
   3cef0:	21a03001 	movcs	r3, r1
   3cef4:	e5843014 	str	r3, [r4, #20]
   3cef8:	eafffc6d 	b	3c0b4 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3cefc:	e5842014 	str	r2, [r4, #20]
   3cf00:	eaffff1e 	b	3cb80 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3cf04:	e1a01005 	mov	r1, r5
   3cf08:	e51f0208 	ldr	r0, [pc, #-520]	; 3cd08 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3cf0c:	ebffb377 	bl	29cf0 <strchr>
   3cf10:	e3500000 	cmp	r0, #0
   3cf14:	1afffb94 	bne	3bd6c <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3cf18:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3cf1c:	e3560002 	cmp	r6, #2
   3cf20:	1affff96 	bne	3cd80 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3cf24:	e1a01005 	mov	r1, r5
   3cf28:	e51f0224 	ldr	r0, [pc, #-548]	; 3cd0c <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3cf2c:	ebffb36f 	bl	29cf0 <strchr>
   3cf30:	e3500000 	cmp	r0, #0
   3cf34:	0a00000b 	beq	3cf68 <TermAnsi::handleAnsiChar(unsigned char)+0x1344>
   3cf38:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3cf3c:	e3530007 	cmp	r3, #7
   3cf40:	8a000004 	bhi	3cf58 <TermAnsi::handleAnsiChar(unsigned char)+0x1334>
   3cf44:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3cf48:	e2831001 	add	r1, r3, #1
   3cf4c:	e283300c 	add	r3, r3, #12
   3cf50:	e5841050 	str	r1, [r4, #80]	; 0x50
   3cf54:	e7842103 	str	r2, [r4, r3, lsl #2]
   3cf58:	e3a03000 	mov	r3, #0
   3cf5c:	e3a00001 	mov	r0, #1
   3cf60:	e5843054 	str	r3, [r4, #84]	; 0x54
   3cf64:	eafffb79 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3cf68:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3cf6c:	e3560002 	cmp	r6, #2
   3cf70:	1affffa2 	bne	3ce00 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3cf74:	e1a01005 	mov	r1, r5
   3cf78:	e51f0270 	ldr	r0, [pc, #-624]	; 3cd10 <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3cf7c:	ebffb35b 	bl	29cf0 <strchr>
   3cf80:	e3500000 	cmp	r0, #0
   3cf84:	0a000001 	beq	3cf90 <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   3cf88:	e3a00001 	mov	r0, #1
   3cf8c:	eafffb6f 	b	3bd50 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3cf90:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3cf94:	e3560002 	cmp	r6, #2
   3cf98:	1affffb8 	bne	3ce80 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3cf9c:	e1a01005 	mov	r1, r5
   3cfa0:	e51f0294 	ldr	r0, [pc, #-660]	; 3cd14 <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3cfa4:	ebffb351 	bl	29cf0 <strchr>
   3cfa8:	e3500000 	cmp	r0, #0
   3cfac:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3cfb0:	0afffb29 	beq	3bc5c <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3cfb4:	e3a0500a 	mov	r5, #10
   3cfb8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3cfbc:	e28d0004 	add	r0, sp, #4
   3cfc0:	e0050395 	mul	r5, r5, r3
   3cfc4:	ebffb47d 	bl	2a1c0 <atoi>
   3cfc8:	e0800005 	add	r0, r0, r5
   3cfcc:	e5840054 	str	r0, [r4, #84]	; 0x54
   3cfd0:	eaffffec 	b	3cf88 <TermAnsi::handleAnsiChar(unsigned char)+0x1364>

0003cfd4 <TermAnsi::putChar(unsigned long)>:
   3cfd4:	e92d4070 	push	{r4, r5, r6, lr}
   3cfd8:	e1a04001 	mov	r4, r1
   3cfdc:	e6ef1071 	uxtb	r1, r1
   3cfe0:	e1a05000 	mov	r5, r0
   3cfe4:	ebfffb0e 	bl	3bc24 <TermAnsi::handleAnsiChar(unsigned char)>
   3cfe8:	e3500000 	cmp	r0, #0
   3cfec:	18bd8070 	popne	{r4, r5, r6, pc}
   3cff0:	e1a01004 	mov	r1, r4
   3cff4:	e1a00005 	mov	r0, r5
   3cff8:	ebfff97e 	bl	3b5f8 <TermAnsi::writeCharAtCurs(int)>
   3cffc:	e3a03001 	mov	r3, #1
   3d000:	e5c5301c 	strb	r3, [r5, #28]
   3d004:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d008 <TermAnsi::dsr()>:
   3d008:	e12fff1e 	bx	lr

0003d00c <TermAnsi::init(unsigned long, unsigned long)>:
   3d00c:	e92d4010 	push	{r4, lr}
   3d010:	e1a04000 	mov	r4, r0
   3d014:	eb00004b 	bl	3d148 <TermEmu::init(unsigned long, unsigned long)>
   3d018:	e5943000 	ldr	r3, [r4]
   3d01c:	e1a00004 	mov	r0, r4
   3d020:	e8bd4010 	pop	{r4, lr}
   3d024:	e5933010 	ldr	r3, [r3, #16]
   3d028:	e12fff13 	bx	r3

0003d02c <TermAnsi::reset()>:
   3d02c:	e92d4070 	push	{r4, r5, r6, lr}
   3d030:	e1a04000 	mov	r4, r0
   3d034:	eb000029 	bl	3d0e0 <TermEmu::reset()>
   3d038:	e3a00000 	mov	r0, #0
   3d03c:	e3a01001 	mov	r1, #1
   3d040:	e2843e82 	add	r3, r4, #2080	; 0x820
   3d044:	e2842d22 	add	r2, r4, #2176	; 0x880
   3d048:	e283300b 	add	r3, r3, #11
   3d04c:	e282200f 	add	r2, r2, #15
   3d050:	e5c4001d 	strb	r0, [r4, #29]
   3d054:	e5840050 	str	r0, [r4, #80]	; 0x50
   3d058:	e5840054 	str	r0, [r4, #84]	; 0x54
   3d05c:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3d060:	e5e31001 	strb	r1, [r3, #1]!
   3d064:	e1530002 	cmp	r3, r2
   3d068:	1afffffc 	bne	3d060 <TermAnsi::reset()+0x34>
   3d06c:	e3a05000 	mov	r5, #0
   3d070:	e3a0300f 	mov	r3, #15
   3d074:	e3a02020 	mov	r2, #32
   3d078:	e5c45892 	strb	r5, [r4, #2194]	; 0x892
   3d07c:	e5c45893 	strb	r5, [r4, #2195]	; 0x893
   3d080:	e1a01005 	mov	r1, r5
   3d084:	e5c43891 	strb	r3, [r4, #2193]	; 0x891
   3d088:	e5c42890 	strb	r2, [r4, #2192]	; 0x890
   3d08c:	e2840030 	add	r0, r4, #48	; 0x30
   3d090:	ebffb1d7 	bl	297f4 <memset>
   3d094:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3d098:	e5845050 	str	r5, [r4, #80]	; 0x50
   3d09c:	e5845054 	str	r5, [r4, #84]	; 0x54
   3d0a0:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3d0a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d0a8 <TermEmu::sendData(int)>:
   3d0a8:	e92d4010 	push	{r4, lr}
   3d0ac:	e1a04001 	mov	r4, r1
   3d0b0:	e24dd008 	sub	sp, sp, #8
   3d0b4:	ebffa4f5 	bl	26490 <CLogger::Get()>
   3d0b8:	e58d4000 	str	r4, [sp]
   3d0bc:	e59f3010 	ldr	r3, [pc, #16]	; 3d0d4 <TermEmu::sendData(int)+0x2c>
   3d0c0:	e3a02004 	mov	r2, #4
   3d0c4:	e59f100c 	ldr	r1, [pc, #12]	; 3d0d8 <TermEmu::sendData(int)+0x30>
   3d0c8:	ebffa42d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d0cc:	e28dd008 	add	sp, sp, #8
   3d0d0:	e8bd8010 	pop	{r4, pc}
   3d0d4:	000490d8 	.word	0x000490d8
   3d0d8:	000490e8 	.word	0x000490e8

0003d0dc <TermEmu::putChar(unsigned long)>:
   3d0dc:	e12fff1e 	bx	lr

0003d0e0 <TermEmu::reset()>:
   3d0e0:	e12fff1e 	bx	lr

0003d0e4 <TermEmu::~TermEmu()>:
   3d0e4:	e92d4010 	push	{r4, lr}
   3d0e8:	e1a04000 	mov	r4, r0
   3d0ec:	e5900004 	ldr	r0, [r0, #4]
   3d0f0:	e59f3014 	ldr	r3, [pc, #20]	; 3d10c <TermEmu::~TermEmu()+0x28>
   3d0f4:	e3500000 	cmp	r0, #0
   3d0f8:	e5843000 	str	r3, [r4]
   3d0fc:	0a000000 	beq	3d104 <TermEmu::~TermEmu()+0x20>
   3d100:	ebffb613 	bl	2a954 <operator delete[](void*)>
   3d104:	e1a00004 	mov	r0, r4
   3d108:	e8bd8010 	pop	{r4, pc}
   3d10c:	00049150 	.word	0x00049150

0003d110 <TermEmu::~TermEmu()>:
   3d110:	e92d4010 	push	{r4, lr}
   3d114:	e1a04000 	mov	r4, r0
   3d118:	e5900004 	ldr	r0, [r0, #4]
   3d11c:	e59f3020 	ldr	r3, [pc, #32]	; 3d144 <TermEmu::~TermEmu()+0x34>
   3d120:	e3500000 	cmp	r0, #0
   3d124:	e5843000 	str	r3, [r4]
   3d128:	0a000000 	beq	3d130 <TermEmu::~TermEmu()+0x20>
   3d12c:	ebffb608 	bl	2a954 <operator delete[](void*)>
   3d130:	e1a00004 	mov	r0, r4
   3d134:	e3a0102c 	mov	r1, #44	; 0x2c
   3d138:	ebffb60b 	bl	2a96c <operator delete(void*, unsigned int)>
   3d13c:	e1a00004 	mov	r0, r4
   3d140:	e8bd8010 	pop	{r4, pc}
   3d144:	00049150 	.word	0x00049150

0003d148 <TermEmu::init(unsigned long, unsigned long)>:
   3d148:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d14c:	e1a04000 	mov	r4, r0
   3d150:	e5900004 	ldr	r0, [r0, #4]
   3d154:	e1a07001 	mov	r7, r1
   3d158:	e3500000 	cmp	r0, #0
   3d15c:	e1a08002 	mov	r8, r2
   3d160:	0a000000 	beq	3d168 <TermEmu::init(unsigned long, unsigned long)+0x20>
   3d164:	ebffb5fa 	bl	2a954 <operator delete[](void*)>
   3d168:	e0090798 	mul	r9, r8, r7
   3d16c:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   3d170:	91a00109 	lslls	r0, r9, #2
   3d174:	83e00000 	mvnhi	r0, #0
   3d178:	ebffb5ee 	bl	2a938 <operator new[](unsigned int)>
   3d17c:	e259c001 	subs	ip, r9, #1
   3d180:	51a03000 	movpl	r3, r0
   3d184:	53a06020 	movpl	r6, #32
   3d188:	53a0500f 	movpl	r5, #15
   3d18c:	53a0e000 	movpl	lr, #0
   3d190:	4a000007 	bmi	3d1b4 <TermEmu::init(unsigned long, unsigned long)+0x6c>
   3d194:	e24cc001 	sub	ip, ip, #1
   3d198:	e37c0001 	cmn	ip, #1
   3d19c:	e5c36000 	strb	r6, [r3]
   3d1a0:	e5c35001 	strb	r5, [r3, #1]
   3d1a4:	e5c3e002 	strb	lr, [r3, #2]
   3d1a8:	e5c3e003 	strb	lr, [r3, #3]
   3d1ac:	e2833004 	add	r3, r3, #4
   3d1b0:	1afffff7 	bne	3d194 <TermEmu::init(unsigned long, unsigned long)+0x4c>
   3d1b4:	e3a03000 	mov	r3, #0
   3d1b8:	e3a0105f 	mov	r1, #95	; 0x5f
   3d1bc:	e3a02020 	mov	r2, #32
   3d1c0:	e9840201 	stmib	r4, {r0, r9}
   3d1c4:	e584700c 	str	r7, [r4, #12]
   3d1c8:	e5848010 	str	r8, [r4, #16]
   3d1cc:	e5843014 	str	r3, [r4, #20]
   3d1d0:	e5843018 	str	r3, [r4, #24]
   3d1d4:	e5c4301c 	strb	r3, [r4, #28]
   3d1d8:	e5c4301d 	strb	r3, [r4, #29]
   3d1dc:	e5c4301e 	strb	r3, [r4, #30]
   3d1e0:	e5841020 	str	r1, [r4, #32]
   3d1e4:	e5842024 	str	r2, [r4, #36]	; 0x24
   3d1e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d1ec <TermEmu::TermEmu()>:
   3d1ec:	e3a02000 	mov	r2, #0
   3d1f0:	e92d4070 	push	{r4, r5, r6, lr}
   3d1f4:	e3a01020 	mov	r1, #32
   3d1f8:	e3a0605f 	mov	r6, #95	; 0x5f
   3d1fc:	e3a0400f 	mov	r4, #15
   3d200:	e3a0e050 	mov	lr, #80	; 0x50
   3d204:	e3a0c019 	mov	ip, #25
   3d208:	e59f5040 	ldr	r5, [pc, #64]	; 3d250 <TermEmu::TermEmu()+0x64>
   3d20c:	e5806020 	str	r6, [r0, #32]
   3d210:	e5805000 	str	r5, [r0]
   3d214:	e5c04029 	strb	r4, [r0, #41]	; 0x29
   3d218:	e580e00c 	str	lr, [r0, #12]
   3d21c:	e580c010 	str	ip, [r0, #16]
   3d220:	e5802014 	str	r2, [r0, #20]
   3d224:	e5802018 	str	r2, [r0, #24]
   3d228:	e5c0201c 	strb	r2, [r0, #28]
   3d22c:	e5c0201d 	strb	r2, [r0, #29]
   3d230:	e5c0201e 	strb	r2, [r0, #30]
   3d234:	e5c0202a 	strb	r2, [r0, #42]	; 0x2a
   3d238:	e5c0202b 	strb	r2, [r0, #43]	; 0x2b
   3d23c:	e5802004 	str	r2, [r0, #4]
   3d240:	e5802008 	str	r2, [r0, #8]
   3d244:	e5801024 	str	r1, [r0, #36]	; 0x24
   3d248:	e5c01028 	strb	r1, [r0, #40]	; 0x28
   3d24c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d250:	00049150 	.word	0x00049150

0003d254 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   3d254:	e12fff1e 	bx	lr

0003d258 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3d258:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d25c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   3d260:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
   3d264:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   3d268:	e2458002 	sub	r8, r5, #2
   3d26c:	e3580000 	cmp	r8, #0
   3d270:	da00002b 	ble	3d324 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xcc>
   3d274:	e58d200c 	str	r2, [sp, #12]
   3d278:	e1a0b003 	mov	fp, r3
   3d27c:	e3a02000 	mov	r2, #0
   3d280:	e59fa250 	ldr	sl, [pc, #592]	; 3d4d8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3d284:	e58d1008 	str	r1, [sp, #8]
   3d288:	e2455001 	sub	r5, r5, #1
   3d28c:	e1a03007 	mov	r3, r7
   3d290:	e7f39002 	ldrb	r9, [r3, r2]!
   3d294:	e2826002 	add	r6, r2, #2
   3d298:	e5d34001 	ldrb	r4, [r3, #1]
   3d29c:	e2493001 	sub	r3, r9, #1
   3d2a0:	e1540005 	cmp	r4, r5
   3d2a4:	a1a04005 	movge	r4, r5
   3d2a8:	e3540000 	cmp	r4, #0
   3d2ac:	03a04c01 	moveq	r4, #256	; 0x100
   3d2b0:	e3530004 	cmp	r3, #4
   3d2b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3d2b8:	ea00003b 	b	3d3ac <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x154>
   3d2bc:	0003d354 	.word	0x0003d354
   3d2c0:	0003d32c 	.word	0x0003d32c
   3d2c4:	0003d310 	.word	0x0003d310
   3d2c8:	0003d2f8 	.word	0x0003d2f8
   3d2cc:	0003d2d0 	.word	0x0003d2d0
   3d2d0:	ebffa46e 	bl	26490 <CLogger::Get()>
   3d2d4:	e59f3200 	ldr	r3, [pc, #512]	; 3d4dc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x284>
   3d2d8:	e3a02004 	mov	r2, #4
   3d2dc:	e1a0100a 	mov	r1, sl
   3d2e0:	ebffa3a7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d2e4:	e0862004 	add	r2, r6, r4
   3d2e8:	e1580002 	cmp	r8, r2
   3d2ec:	caffffe6 	bgt	3d28c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x34>
   3d2f0:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3d2f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d2f8:	ebffa464 	bl	26490 <CLogger::Get()>
   3d2fc:	e59f31dc 	ldr	r3, [pc, #476]	; 3d4e0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   3d300:	e3a02004 	mov	r2, #4
   3d304:	e1a0100a 	mov	r1, sl
   3d308:	ebffa39d 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d30c:	eafffff4 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d310:	ebffa45e 	bl	26490 <CLogger::Get()>
   3d314:	e59f31c8 	ldr	r3, [pc, #456]	; 3d4e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x28c>
   3d318:	e3a02004 	mov	r2, #4
   3d31c:	e59f11b4 	ldr	r1, [pc, #436]	; 3d4d8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3d320:	ebffa397 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d324:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3d328:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d32c:	e3540001 	cmp	r4, #1
   3d330:	0a000048 	beq	3d458 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x200>
   3d334:	e3540002 	cmp	r4, #2
   3d338:	0a000022 	beq	3d3c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x170>
   3d33c:	ebffa453 	bl	26490 <CLogger::Get()>
   3d340:	e59f31a0 	ldr	r3, [pc, #416]	; 3d4e8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x290>
   3d344:	e3a02004 	mov	r2, #4
   3d348:	e1a0100a 	mov	r1, sl
   3d34c:	ebffa38c 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d350:	eaffffe3 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d354:	e0873006 	add	r3, r7, r6
   3d358:	e7d79006 	ldrb	r9, [r7, r6]
   3d35c:	e5d33001 	ldrb	r3, [r3, #1]
   3d360:	e3540002 	cmp	r4, #2
   3d364:	d28440fe 	addle	r4, r4, #254	; 0xfe
   3d368:	c2444002 	subgt	r4, r4, #2
   3d36c:	e0899403 	add	r9, r9, r3, lsl #8
   3d370:	e2826004 	add	r6, r2, #4
   3d374:	e1a0300b 	mov	r3, fp
   3d378:	e1a02004 	mov	r2, r4
   3d37c:	e0871006 	add	r1, r7, r6
   3d380:	e1a00009 	mov	r0, r9
   3d384:	e59dc008 	ldr	ip, [sp, #8]
   3d388:	e12fff3c 	blx	ip
   3d38c:	ebffa43f 	bl	26490 <CLogger::Get()>
   3d390:	e58d4004 	str	r4, [sp, #4]
   3d394:	e58d9000 	str	r9, [sp]
   3d398:	e59f314c 	ldr	r3, [pc, #332]	; 3d4ec <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x294>
   3d39c:	e3a02004 	mov	r2, #4
   3d3a0:	e1a0100a 	mov	r1, sl
   3d3a4:	ebffa376 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d3a8:	eaffffcd 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d3ac:	ebffa437 	bl	26490 <CLogger::Get()>
   3d3b0:	e58d9000 	str	r9, [sp]
   3d3b4:	e59f3134 	ldr	r3, [pc, #308]	; 3d4f0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x298>
   3d3b8:	e3a02004 	mov	r2, #4
   3d3bc:	e1a0100a 	mov	r1, sl
   3d3c0:	ebffa36f 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d3c4:	eaffffc6 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d3c8:	e3a03000 	mov	r3, #0
   3d3cc:	e0871006 	add	r1, r7, r6
   3d3d0:	e5d1c001 	ldrb	ip, [r1, #1]
   3d3d4:	e7d71006 	ldrb	r1, [r7, r6]
   3d3d8:	e28d0058 	add	r0, sp, #88	; 0x58
   3d3dc:	e081140c 	add	r1, r1, ip, lsl #8
   3d3e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3d3e4:	e5201048 	str	r1, [r0, #-72]!	; 0xffffffb8
   3d3e8:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3d3ec:	e1a0100b 	mov	r1, fp
   3d3f0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3d3f4:	e58d3020 	str	r3, [sp, #32]
   3d3f8:	e58d301c 	str	r3, [sp, #28]
   3d3fc:	e58d3018 	str	r3, [sp, #24]
   3d400:	e58d3014 	str	r3, [sp, #20]
   3d404:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3d408:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3d40c:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3d410:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3d414:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3d418:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3d41c:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3d420:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3d424:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3d428:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3d42c:	e59d300c 	ldr	r3, [sp, #12]
   3d430:	e2826004 	add	r6, r2, #4
   3d434:	e12fff33 	blx	r3
   3d438:	ebffa414 	bl	26490 <CLogger::Get()>
   3d43c:	e59d2010 	ldr	r2, [sp, #16]
   3d440:	e59f30ac 	ldr	r3, [pc, #172]	; 3d4f4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3d444:	e58d2000 	str	r2, [sp]
   3d448:	e1a0100a 	mov	r1, sl
   3d44c:	e3a02004 	mov	r2, #4
   3d450:	ebffa34b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d454:	eaffffa2 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d458:	e3a03000 	mov	r3, #0
   3d45c:	e7d72006 	ldrb	r2, [r7, r6]
   3d460:	e28d0058 	add	r0, sp, #88	; 0x58
   3d464:	e1a0100b 	mov	r1, fp
   3d468:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   3d46c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3d470:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3d474:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3d478:	e58d3020 	str	r3, [sp, #32]
   3d47c:	e58d301c 	str	r3, [sp, #28]
   3d480:	e58d3018 	str	r3, [sp, #24]
   3d484:	e58d3014 	str	r3, [sp, #20]
   3d488:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3d48c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3d490:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3d494:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3d498:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3d49c:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3d4a0:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3d4a4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3d4a8:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3d4ac:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3d4b0:	e59d300c 	ldr	r3, [sp, #12]
   3d4b4:	e12fff33 	blx	r3
   3d4b8:	ebffa3f4 	bl	26490 <CLogger::Get()>
   3d4bc:	e59d2010 	ldr	r2, [sp, #16]
   3d4c0:	e59f3030 	ldr	r3, [pc, #48]	; 3d4f8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3d4c4:	e58d2000 	str	r2, [sp]
   3d4c8:	e1a0100a 	mov	r1, sl
   3d4cc:	e3a02004 	mov	r2, #4
   3d4d0:	ebffa32b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d4d4:	eaffff82 	b	3d2e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3d4d8:	0004918c 	.word	0x0004918c
   3d4dc:	000491f4 	.word	0x000491f4
   3d4e0:	000491dc 	.word	0x000491dc
   3d4e4:	000491cc 	.word	0x000491cc
   3d4e8:	000491b8 	.word	0x000491b8
   3d4ec:	0004916c 	.word	0x0004916c
   3d4f0:	000491fc 	.word	0x000491fc
   3d4f4:	000491a8 	.word	0x000491a8
   3d4f8:	00049198 	.word	0x00049198

0003d4fc <McZXSpectrumSNAFormat::McZXSpectrumSNAFormat()>:
   3d4fc:	e12fff1e 	bx	lr

0003d500 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3d500:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3d504:	e24dd064 	sub	sp, sp, #100	; 0x64
   3d508:	e59dc084 	ldr	ip, [sp, #132]	; 0x84
   3d50c:	e59f01b8 	ldr	r0, [pc, #440]	; 3d6cc <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1cc>
   3d510:	e59d4080 	ldr	r4, [sp, #128]	; 0x80
   3d514:	e15c0000 	cmp	ip, r0
   3d518:	da000062 	ble	3d6a8 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a8>
   3d51c:	e3a07000 	mov	r7, #0
   3d520:	e5d4e016 	ldrb	lr, [r4, #22]
   3d524:	e1a05001 	mov	r5, r1
   3d528:	e5d41015 	ldrb	r1, [r4, #21]
   3d52c:	e5d4c008 	ldrb	ip, [r4, #8]
   3d530:	e5d4800e 	ldrb	r8, [r4, #14]
   3d534:	e1a06003 	mov	r6, r3
   3d538:	e181140e 	orr	r1, r1, lr, lsl #8
   3d53c:	e5d43007 	ldrb	r3, [r4, #7]
   3d540:	e5d4e00d 	ldrb	lr, [r4, #13]
   3d544:	e183340c 	orr	r3, r3, ip, lsl #8
   3d548:	e18ee408 	orr	lr, lr, r8, lsl #8
   3d54c:	e5d4c005 	ldrb	ip, [r4, #5]
   3d550:	e5d48006 	ldrb	r8, [r4, #6]
   3d554:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   3d558:	e5d4100b 	ldrb	r1, [r4, #11]
   3d55c:	e18cc408 	orr	ip, ip, r8, lsl #8
   3d560:	e5d4800c 	ldrb	r8, [r4, #12]
   3d564:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3d568:	e5d43003 	ldrb	r3, [r4, #3]
   3d56c:	e1811408 	orr	r1, r1, r8, lsl #8
   3d570:	e5d48004 	ldrb	r8, [r4, #4]
   3d574:	e58de028 	str	lr, [sp, #40]	; 0x28
   3d578:	e5d4e009 	ldrb	lr, [r4, #9]
   3d57c:	e1833408 	orr	r3, r3, r8, lsl #8
   3d580:	e5d4800a 	ldrb	r8, [r4, #10]
   3d584:	e58dc040 	str	ip, [sp, #64]	; 0x40
   3d588:	e18ee408 	orr	lr, lr, r8, lsl #8
   3d58c:	e5d4c001 	ldrb	ip, [r4, #1]
   3d590:	e5d48002 	ldrb	r8, [r4, #2]
   3d594:	e58d1024 	str	r1, [sp, #36]	; 0x24
   3d598:	e5d41011 	ldrb	r1, [r4, #17]
   3d59c:	e18cc408 	orr	ip, ip, r8, lsl #8
   3d5a0:	e5d48012 	ldrb	r8, [r4, #18]
   3d5a4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3d5a8:	e5d4300f 	ldrb	r3, [r4, #15]
   3d5ac:	e1811408 	orr	r1, r1, r8, lsl #8
   3d5b0:	e5d48010 	ldrb	r8, [r4, #16]
   3d5b4:	e58de020 	str	lr, [sp, #32]
   3d5b8:	e1833408 	orr	r3, r3, r8, lsl #8
   3d5bc:	e58dc038 	str	ip, [sp, #56]	; 0x38
   3d5c0:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3d5c4:	e58d1030 	str	r1, [sp, #48]	; 0x30
   3d5c8:	e58d7048 	str	r7, [sp, #72]	; 0x48
   3d5cc:	e58d705c 	str	r7, [sp, #92]	; 0x5c
   3d5d0:	e5d41017 	ldrb	r1, [r4, #23]
   3d5d4:	e5d43018 	ldrb	r3, [r4, #24]
   3d5d8:	e28d0060 	add	r0, sp, #96	; 0x60
   3d5dc:	e1811403 	orr	r1, r1, r3, lsl #8
   3d5e0:	e241c901 	sub	ip, r1, #16384	; 0x4000
   3d5e4:	e28c3001 	add	r3, ip, #1
   3d5e8:	e0843003 	add	r3, r4, r3
   3d5ec:	e084c00c 	add	ip, r4, ip
   3d5f0:	e5dce01b 	ldrb	lr, [ip, #27]
   3d5f4:	e5d3801b 	ldrb	r8, [r3, #27]
   3d5f8:	e5d49000 	ldrb	r9, [r4]
   3d5fc:	e08ee408 	add	lr, lr, r8, lsl #8
   3d600:	e6ffe07e 	uxth	lr, lr
   3d604:	e520e048 	str	lr, [r0, #-72]!	; 0xffffffb8
   3d608:	e5d4e013 	ldrb	lr, [r4, #19]
   3d60c:	e5d48019 	ldrb	r8, [r4, #25]
   3d610:	e1a0e12e 	lsr	lr, lr, #2
   3d614:	e20ee001 	and	lr, lr, #1
   3d618:	e58de058 	str	lr, [sp, #88]	; 0x58
   3d61c:	e2811002 	add	r1, r1, #2
   3d620:	e5d4e014 	ldrb	lr, [r4, #20]
   3d624:	e58d101c 	str	r1, [sp, #28]
   3d628:	e5cc701b 	strb	r7, [ip, #27]
   3d62c:	e1a01006 	mov	r1, r6
   3d630:	e5c3701b 	strb	r7, [r3, #27]
   3d634:	e2088003 	and	r8, r8, #3
   3d638:	e58de050 	str	lr, [sp, #80]	; 0x50
   3d63c:	e58d8054 	str	r8, [sp, #84]	; 0x54
   3d640:	e58d904c 	str	r9, [sp, #76]	; 0x4c
   3d644:	e12fff32 	blx	r2
   3d648:	e1a03006 	mov	r3, r6
   3d64c:	e284101b 	add	r1, r4, #27
   3d650:	e3a02903 	mov	r2, #49152	; 0xc000
   3d654:	e3a00901 	mov	r0, #16384	; 0x4000
   3d658:	e12fff35 	blx	r5
   3d65c:	ebffa38b 	bl	26490 <CLogger::Get()>
   3d660:	e59f3068 	ldr	r3, [pc, #104]	; 3d6d0 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d0>
   3d664:	e59d201c 	ldr	r2, [sp, #28]
   3d668:	e5931000 	ldr	r1, [r3]
   3d66c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   3d670:	e59d3018 	ldr	r3, [sp, #24]
   3d674:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   3d678:	e59de020 	ldr	lr, [sp, #32]
   3d67c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   3d680:	e58d3000 	str	r3, [sp]
   3d684:	e98d5004 	stmib	sp, {r2, ip, lr}
   3d688:	e58d5014 	str	r5, [sp, #20]
   3d68c:	e58d4010 	str	r4, [sp, #16]
   3d690:	e59f303c 	ldr	r3, [pc, #60]	; 3d6d4 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d4>
   3d694:	e3a02004 	mov	r2, #4
   3d698:	ebffa2b9 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d69c:	e3a00001 	mov	r0, #1
   3d6a0:	e28dd064 	add	sp, sp, #100	; 0x64
   3d6a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3d6a8:	ebffa378 	bl	26490 <CLogger::Get()>
   3d6ac:	e59f201c 	ldr	r2, [pc, #28]	; 3d6d0 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d0>
   3d6b0:	e59f3020 	ldr	r3, [pc, #32]	; 3d6d8 <McZXSpectrumSNAFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1d8>
   3d6b4:	e5921000 	ldr	r1, [r2]
   3d6b8:	e3a02004 	mov	r2, #4
   3d6bc:	ebffa2b0 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d6c0:	e3a00000 	mov	r0, #0
   3d6c4:	e28dd064 	add	sp, sp, #100	; 0x64
   3d6c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3d6cc:	0000c01a 	.word	0x0000c01a
   3d6d0:	0004e7c4 	.word	0x0004e7c4
   3d6d4:	00049238 	.word	0x00049238
   3d6d8:	00049214 	.word	0x00049214

0003d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>:
   3d6dc:	e0803001 	add	r3, r0, r1
   3d6e0:	e5d32001 	ldrb	r2, [r3, #1]
   3d6e4:	e7d00001 	ldrb	r0, [r0, r1]
   3d6e8:	e0800402 	add	r0, r0, r2, lsl #8
   3d6ec:	e12fff1e 	bx	lr

0003d6f0 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()>:
   3d6f0:	e3a02000 	mov	r2, #0
   3d6f4:	e59f1018 	ldr	r1, [pc, #24]	; 3d714 <McZXSpectrumTZXFormat::McZXSpectrumTZXFormat()+0x24>
   3d6f8:	e5802000 	str	r2, [r0]
   3d6fc:	e5801014 	str	r1, [r0, #20]
   3d700:	e5802004 	str	r2, [r0, #4]
   3d704:	e5802008 	str	r2, [r0, #8]
   3d708:	e580200c 	str	r2, [r0, #12]
   3d70c:	e5802010 	str	r2, [r0, #16]
   3d710:	e12fff1e 	bx	lr
   3d714:	00005ccb 	.word	0x00005ccb

0003d718 <McZXSpectrumTZXFormat::getString(unsigned char const*, int, int, int, char*)>:
   3d718:	e92d4070 	push	{r4, r5, r6, lr}
   3d71c:	e59d4010 	ldr	r4, [sp, #16]
   3d720:	e0422003 	sub	r2, r2, r3
   3d724:	e1520004 	cmp	r2, r4
   3d728:	b1a04002 	movlt	r4, r2
   3d72c:	e59d5014 	ldr	r5, [sp, #20]
   3d730:	e0811003 	add	r1, r1, r3
   3d734:	e2842001 	add	r2, r4, #1
   3d738:	e1a00005 	mov	r0, r5
   3d73c:	ebffc065 	bl	2d8d8 <strlcpy>
   3d740:	e3a03000 	mov	r3, #0
   3d744:	e7c53004 	strb	r3, [r5, r4]
   3d748:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d74c <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int)>:
   3d74c:	e2830001 	add	r0, r3, #1
   3d750:	e1500002 	cmp	r0, r2
   3d754:	e1a00001 	mov	r0, r1
   3d758:	aa000001 	bge	3d764 <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int)+0x18>
   3d75c:	e1a01003 	mov	r1, r3
   3d760:	eaffffdd 	b	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3d764:	e3a00000 	mov	r0, #0
   3d768:	e12fff1e 	bx	lr

0003d76c <McZXSpectrumTZXFormat::getByte(unsigned char const*, int, int)>:
   3d76c:	e1530002 	cmp	r3, r2
   3d770:	b7d10003 	ldrblt	r0, [r1, r3]
   3d774:	a3a00000 	movge	r0, #0
   3d778:	e12fff1e 	bx	lr

0003d77c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)>:
   3d77c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d780:	e24dd028 	sub	sp, sp, #40	; 0x28
   3d784:	e59d7048 	ldr	r7, [sp, #72]	; 0x48
   3d788:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   3d78c:	e1a06000 	mov	r6, r0
   3d790:	e7d75004 	ldrb	r5, [r7, r4]
   3d794:	e59d8050 	ldr	r8, [sp, #80]	; 0x50
   3d798:	e3550000 	cmp	r5, #0
   3d79c:	1a000014 	bne	3d7f4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x78>
   3d7a0:	e2843001 	add	r3, r4, #1
   3d7a4:	e1530008 	cmp	r3, r8
   3d7a8:	aa000021 	bge	3d834 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xb8>
   3d7ac:	e7d73003 	ldrb	r3, [r7, r3]
   3d7b0:	e3530000 	cmp	r3, #0
   3d7b4:	e5803000 	str	r3, [r0]
   3d7b8:	0a00001e 	beq	3d838 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xbc>
   3d7bc:	e3530001 	cmp	r3, #1
   3d7c0:	0a00008f 	beq	3da04 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x288>
   3d7c4:	e3530002 	cmp	r3, #2
   3d7c8:	0a0000b6 	beq	3daa8 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x32c>
   3d7cc:	e3530003 	cmp	r3, #3
   3d7d0:	0a00004b 	beq	3d904 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x188>
   3d7d4:	ebffa32d 	bl	26490 <CLogger::Get()>
   3d7d8:	e5962000 	ldr	r2, [r6]
   3d7dc:	e59f3368 	ldr	r3, [pc, #872]	; 3db4c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d0>
   3d7e0:	e58d2000 	str	r2, [sp]
   3d7e4:	e59f1364 	ldr	r1, [pc, #868]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d7e8:	e3a02004 	mov	r2, #4
   3d7ec:	ebffa264 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d7f0:	ea000007 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3d7f4:	e35500ff 	cmp	r5, #255	; 0xff
   3d7f8:	0a00006d 	beq	3d9b4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x238>
   3d7fc:	ebffa323 	bl	26490 <CLogger::Get()>
   3d800:	e58d5000 	str	r5, [sp]
   3d804:	e59f3348 	ldr	r3, [pc, #840]	; 3db54 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d8>
   3d808:	e3a02004 	mov	r2, #4
   3d80c:	e59f133c 	ldr	r1, [pc, #828]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d810:	ebffa25b 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d814:	ebffa31d 	bl	26490 <CLogger::Get()>
   3d818:	e59f3338 	ldr	r3, [pc, #824]	; 3db58 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3dc>
   3d81c:	e3a02004 	mov	r2, #4
   3d820:	e59f1328 	ldr	r1, [pc, #808]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d824:	ebffa256 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d828:	e3a00001 	mov	r0, #1
   3d82c:	e28dd028 	add	sp, sp, #40	; 0x28
   3d830:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d834:	e5805000 	str	r5, [r0]
   3d838:	e2841002 	add	r1, r4, #2
   3d83c:	e0485001 	sub	r5, r8, r1
   3d840:	e355000a 	cmp	r5, #10
   3d844:	a3a0500a 	movge	r5, #10
   3d848:	e28d901c 	add	r9, sp, #28
   3d84c:	e2852001 	add	r2, r5, #1
   3d850:	e0871001 	add	r1, r7, r1
   3d854:	e1a00009 	mov	r0, r9
   3d858:	ebffc01e 	bl	2d8d8 <strlcpy>
   3d85c:	e3a00000 	mov	r0, #0
   3d860:	e284300d 	add	r3, r4, #13
   3d864:	e28d2028 	add	r2, sp, #40	; 0x28
   3d868:	e0825005 	add	r5, r2, r5
   3d86c:	e1580003 	cmp	r8, r3
   3d870:	e545000c 	strb	r0, [r5, #-12]
   3d874:	ca00005e 	bgt	3d9f4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x278>
   3d878:	e284300f 	add	r3, r4, #15
   3d87c:	e1580003 	cmp	r8, r3
   3d880:	e5860004 	str	r0, [r6, #4]
   3d884:	d3a00000 	movle	r0, #0
   3d888:	da000002 	ble	3d898 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x11c>
   3d88c:	e284100e 	add	r1, r4, #14
   3d890:	e1a00007 	mov	r0, r7
   3d894:	ebffff90 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3d898:	e2843011 	add	r3, r4, #17
   3d89c:	e1580003 	cmp	r8, r3
   3d8a0:	e5860008 	str	r0, [r6, #8]
   3d8a4:	d3a00000 	movle	r0, #0
   3d8a8:	da000002 	ble	3d8b8 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x13c>
   3d8ac:	e2841010 	add	r1, r4, #16
   3d8b0:	e1a00007 	mov	r0, r7
   3d8b4:	ebffff88 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3d8b8:	e2844012 	add	r4, r4, #18
   3d8bc:	e1580004 	cmp	r8, r4
   3d8c0:	d3a04000 	movle	r4, #0
   3d8c4:	e586000c 	str	r0, [r6, #12]
   3d8c8:	c7d74004 	ldrbgt	r4, [r7, r4]
   3d8cc:	ebffa2ef 	bl	26490 <CLogger::Get()>
   3d8d0:	e596100c 	ldr	r1, [r6, #12]
   3d8d4:	e5962008 	ldr	r2, [r6, #8]
   3d8d8:	e5963004 	ldr	r3, [r6, #4]
   3d8dc:	e58d100c 	str	r1, [sp, #12]
   3d8e0:	e58d2008 	str	r2, [sp, #8]
   3d8e4:	e58d3004 	str	r3, [sp, #4]
   3d8e8:	e58d4010 	str	r4, [sp, #16]
   3d8ec:	e58d9000 	str	r9, [sp]
   3d8f0:	e59f3264 	ldr	r3, [pc, #612]	; 3db5c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3e0>
   3d8f4:	e3a02004 	mov	r2, #4
   3d8f8:	e59f1250 	ldr	r1, [pc, #592]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d8fc:	ebffa220 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d900:	eaffffc3 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3d904:	e2841002 	add	r1, r4, #2
   3d908:	e048a001 	sub	sl, r8, r1
   3d90c:	e35a000a 	cmp	sl, #10
   3d910:	a3a0a00a 	movge	sl, #10
   3d914:	e28d901c 	add	r9, sp, #28
   3d918:	e28a2001 	add	r2, sl, #1
   3d91c:	e0871001 	add	r1, r7, r1
   3d920:	e1a00009 	mov	r0, r9
   3d924:	ebffbfeb 	bl	2d8d8 <strlcpy>
   3d928:	e284300d 	add	r3, r4, #13
   3d92c:	e28d2028 	add	r2, sp, #40	; 0x28
   3d930:	e082a00a 	add	sl, r2, sl
   3d934:	e1580003 	cmp	r8, r3
   3d938:	e54a500c 	strb	r5, [sl, #-12]
   3d93c:	d1a00005 	movle	r0, r5
   3d940:	da000002 	ble	3d950 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x1d4>
   3d944:	e284100c 	add	r1, r4, #12
   3d948:	e1a00007 	mov	r0, r7
   3d94c:	ebffff62 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3d950:	e284300f 	add	r3, r4, #15
   3d954:	e1580003 	cmp	r8, r3
   3d958:	e5860004 	str	r0, [r6, #4]
   3d95c:	d3a00000 	movle	r0, #0
   3d960:	da000002 	ble	3d970 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x1f4>
   3d964:	e284100e 	add	r1, r4, #14
   3d968:	e1a00007 	mov	r0, r7
   3d96c:	ebffff5a 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3d970:	e2844011 	add	r4, r4, #17
   3d974:	e1580004 	cmp	r8, r4
   3d978:	d3a04000 	movle	r4, #0
   3d97c:	e5860014 	str	r0, [r6, #20]
   3d980:	c7d74004 	ldrbgt	r4, [r7, r4]
   3d984:	ebffa2c1 	bl	26490 <CLogger::Get()>
   3d988:	e5962014 	ldr	r2, [r6, #20]
   3d98c:	e5963004 	ldr	r3, [r6, #4]
   3d990:	e59f11b8 	ldr	r1, [pc, #440]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d994:	e58d2008 	str	r2, [sp, #8]
   3d998:	e58d3004 	str	r3, [sp, #4]
   3d99c:	e58d400c 	str	r4, [sp, #12]
   3d9a0:	e58d9000 	str	r9, [sp]
   3d9a4:	e59f31b4 	ldr	r3, [pc, #436]	; 3db60 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3e4>
   3d9a8:	e3a02004 	mov	r2, #4
   3d9ac:	ebffa1f4 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d9b0:	eaffff97 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3d9b4:	e1a0a003 	mov	sl, r3
   3d9b8:	e1a09001 	mov	r9, r1
   3d9bc:	ebffa2b3 	bl	26490 <CLogger::Get()>
   3d9c0:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   3d9c4:	e3a02004 	mov	r2, #4
   3d9c8:	e58d3000 	str	r3, [sp]
   3d9cc:	e59f117c 	ldr	r1, [pc, #380]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3d9d0:	e59f318c 	ldr	r3, [pc, #396]	; 3db64 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3e8>
   3d9d4:	ebffa1ea 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3d9d8:	e2841001 	add	r1, r4, #1
   3d9dc:	e0871001 	add	r1, r7, r1
   3d9e0:	e1a0300a 	mov	r3, sl
   3d9e4:	e5960014 	ldr	r0, [r6, #20]
   3d9e8:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
   3d9ec:	e12fff39 	blx	r9
   3d9f0:	eaffff87 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3d9f4:	e284100c 	add	r1, r4, #12
   3d9f8:	e1a00007 	mov	r0, r7
   3d9fc:	ebffff36 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3da00:	eaffff9c 	b	3d878 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0xfc>
   3da04:	e2841002 	add	r1, r4, #2
   3da08:	e048a001 	sub	sl, r8, r1
   3da0c:	e35a000a 	cmp	sl, #10
   3da10:	a3a0a00a 	movge	sl, #10
   3da14:	e28d901c 	add	r9, sp, #28
   3da18:	e28a2001 	add	r2, sl, #1
   3da1c:	e0871001 	add	r1, r7, r1
   3da20:	e1a00009 	mov	r0, r9
   3da24:	ebffbfab 	bl	2d8d8 <strlcpy>
   3da28:	e284300d 	add	r3, r4, #13
   3da2c:	e28d2028 	add	r2, sp, #40	; 0x28
   3da30:	e082a00a 	add	sl, r2, sl
   3da34:	e1580003 	cmp	r8, r3
   3da38:	e54a500c 	strb	r5, [sl, #-12]
   3da3c:	d1a00005 	movle	r0, r5
   3da40:	da000002 	ble	3da50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x2d4>
   3da44:	e284100c 	add	r1, r4, #12
   3da48:	e1a00007 	mov	r0, r7
   3da4c:	ebffff22 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3da50:	e284300f 	add	r3, r4, #15
   3da54:	e1580003 	cmp	r8, r3
   3da58:	d3a03000 	movle	r3, #0
   3da5c:	e2844011 	add	r4, r4, #17
   3da60:	e5860004 	str	r0, [r6, #4]
   3da64:	c7d73003 	ldrbgt	r3, [r7, r3]
   3da68:	e1580004 	cmp	r8, r4
   3da6c:	d3a04000 	movle	r4, #0
   3da70:	e5863010 	str	r3, [r6, #16]
   3da74:	c7d74004 	ldrbgt	r4, [r7, r4]
   3da78:	ebffa284 	bl	26490 <CLogger::Get()>
   3da7c:	e5962010 	ldr	r2, [r6, #16]
   3da80:	e5963004 	ldr	r3, [r6, #4]
   3da84:	e59f10c4 	ldr	r1, [pc, #196]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3da88:	e58d2008 	str	r2, [sp, #8]
   3da8c:	e58d3004 	str	r3, [sp, #4]
   3da90:	e58d400c 	str	r4, [sp, #12]
   3da94:	e58d9000 	str	r9, [sp]
   3da98:	e59f30c8 	ldr	r3, [pc, #200]	; 3db68 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3ec>
   3da9c:	e3a02004 	mov	r2, #4
   3daa0:	ebffa1b7 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3daa4:	eaffff5a 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3daa8:	e2841002 	add	r1, r4, #2
   3daac:	e048a001 	sub	sl, r8, r1
   3dab0:	e35a000a 	cmp	sl, #10
   3dab4:	a3a0a00a 	movge	sl, #10
   3dab8:	e28d901c 	add	r9, sp, #28
   3dabc:	e28a2001 	add	r2, sl, #1
   3dac0:	e0871001 	add	r1, r7, r1
   3dac4:	e1a00009 	mov	r0, r9
   3dac8:	ebffbf82 	bl	2d8d8 <strlcpy>
   3dacc:	e284300d 	add	r3, r4, #13
   3dad0:	e28d2028 	add	r2, sp, #40	; 0x28
   3dad4:	e082a00a 	add	sl, r2, sl
   3dad8:	e1580003 	cmp	r8, r3
   3dadc:	e54a500c 	strb	r5, [sl, #-12]
   3dae0:	d1a00005 	movle	r0, r5
   3dae4:	da000002 	ble	3daf4 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x378>
   3dae8:	e284100c 	add	r1, r4, #12
   3daec:	e1a00007 	mov	r0, r7
   3daf0:	ebfffef9 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3daf4:	e284300f 	add	r3, r4, #15
   3daf8:	e1580003 	cmp	r8, r3
   3dafc:	d3a03000 	movle	r3, #0
   3db00:	e2844011 	add	r4, r4, #17
   3db04:	e5860004 	str	r0, [r6, #4]
   3db08:	c7d73003 	ldrbgt	r3, [r7, r3]
   3db0c:	e1580004 	cmp	r8, r4
   3db10:	d3a04000 	movle	r4, #0
   3db14:	e5863010 	str	r3, [r6, #16]
   3db18:	c7d74004 	ldrbgt	r4, [r7, r4]
   3db1c:	ebffa25b 	bl	26490 <CLogger::Get()>
   3db20:	e5962010 	ldr	r2, [r6, #16]
   3db24:	e5963004 	ldr	r3, [r6, #4]
   3db28:	e59f1020 	ldr	r1, [pc, #32]	; 3db50 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3d4>
   3db2c:	e58d2008 	str	r2, [sp, #8]
   3db30:	e58d3004 	str	r3, [sp, #4]
   3db34:	e58d400c 	str	r4, [sp, #12]
   3db38:	e58d9000 	str	r9, [sp]
   3db3c:	e59f3028 	ldr	r3, [pc, #40]	; 3db6c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x3f0>
   3db40:	e3a02004 	mov	r2, #4
   3db44:	ebffa18e 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3db48:	eaffff31 	b	3d814 <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)+0x98>
   3db4c:	00049394 	.word	0x00049394
   3db50:	000492dc 	.word	0x000492dc
   3db54:	000493bc 	.word	0x000493bc
   3db58:	00049234 	.word	0x00049234
   3db5c:	00049290 	.word	0x00049290
   3db60:	0004935c 	.word	0x0004935c
   3db64:	000493a8 	.word	0x000493a8
   3db68:	000492e8 	.word	0x000492e8
   3db6c:	00049320 	.word	0x00049320

0003db70 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3db70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3db74:	e24ddf4d 	sub	sp, sp, #308	; 0x134
   3db78:	e59d7158 	ldr	r7, [sp, #344]	; 0x158
   3db7c:	e58d0014 	str	r0, [sp, #20]
   3db80:	e58d1018 	str	r1, [sp, #24]
   3db84:	e58d201c 	str	r2, [sp, #28]
   3db88:	e1a00007 	mov	r0, r7
   3db8c:	e3a02007 	mov	r2, #7
   3db90:	e59f1174 	ldr	r1, [pc, #372]	; 3dd0c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x19c>
   3db94:	e58d3020 	str	r3, [sp, #32]
   3db98:	e59d515c 	ldr	r5, [sp, #348]	; 0x15c
   3db9c:	ebffafbf 	bl	29aa0 <strncmp>
   3dba0:	e2503000 	subs	r3, r0, #0
   3dba4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3dba8:	1a00004f 	bne	3dcec <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x17c>
   3dbac:	e3a0400a 	mov	r4, #10
   3dbb0:	e3a09004 	mov	r9, #4
   3dbb4:	e1550004 	cmp	r5, r4
   3dbb8:	da000022 	ble	3dc48 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd8>
   3dbbc:	e0873004 	add	r3, r7, r4
   3dbc0:	e4d32001 	ldrb	r2, [r3], #1
   3dbc4:	e2846001 	add	r6, r4, #1
   3dbc8:	e3520010 	cmp	r2, #16
   3dbcc:	0a000020 	beq	3dc54 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xe4>
   3dbd0:	e3520030 	cmp	r2, #48	; 0x30
   3dbd4:	1a00003d 	bne	3dcd0 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x160>
   3dbd8:	e1550006 	cmp	r5, r6
   3dbdc:	c7d7b006 	ldrbgt	fp, [r7, r6]
   3dbe0:	d59db024 	ldrle	fp, [sp, #36]	; 0x24
   3dbe4:	e2841002 	add	r1, r4, #2
   3dbe8:	e0458001 	sub	r8, r5, r1
   3dbec:	c28ba001 	addgt	sl, fp, #1
   3dbf0:	d3a0a001 	movle	sl, #1
   3dbf4:	e158000b 	cmp	r8, fp
   3dbf8:	a1a0800b 	movge	r8, fp
   3dbfc:	e0871001 	add	r1, r7, r1
   3dc00:	e2882001 	add	r2, r8, #1
   3dc04:	e28d002c 	add	r0, sp, #44	; 0x2c
   3dc08:	ebffbf32 	bl	2d8d8 <strlcpy>
   3dc0c:	e28d3e13 	add	r3, sp, #304	; 0x130
   3dc10:	e0838008 	add	r8, r3, r8
   3dc14:	e3a03000 	mov	r3, #0
   3dc18:	e5483104 	strb	r3, [r8, #-260]	; 0xfffffefc
   3dc1c:	ebffa21b 	bl	26490 <CLogger::Get()>
   3dc20:	e28d302c 	add	r3, sp, #44	; 0x2c
   3dc24:	e58d3004 	str	r3, [sp, #4]
   3dc28:	e58db000 	str	fp, [sp]
   3dc2c:	e59f30dc 	ldr	r3, [pc, #220]	; 3dd10 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a0>
   3dc30:	e1a02009 	mov	r2, r9
   3dc34:	e59f10d8 	ldr	r1, [pc, #216]	; 3dd14 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a4>
   3dc38:	e086400a 	add	r4, r6, sl
   3dc3c:	ebffa150 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3dc40:	e1550004 	cmp	r5, r4
   3dc44:	caffffdc 	bgt	3dbbc <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x4c>
   3dc48:	e3a00001 	mov	r0, #1
   3dc4c:	e28ddf4d 	add	sp, sp, #308	; 0x134
   3dc50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dc54:	e2843002 	add	r3, r4, #2
   3dc58:	e1550003 	cmp	r5, r3
   3dc5c:	d3a0b000 	movle	fp, #0
   3dc60:	da000003 	ble	3dc74 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x104>
   3dc64:	e1a01006 	mov	r1, r6
   3dc68:	e1a00007 	mov	r0, r7
   3dc6c:	ebfffe9a 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3dc70:	e1a0b000 	mov	fp, r0
   3dc74:	e2843004 	add	r3, r4, #4
   3dc78:	e1550003 	cmp	r5, r3
   3dc7c:	da000017 	ble	3dce0 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x170>
   3dc80:	e2841003 	add	r1, r4, #3
   3dc84:	e1a00007 	mov	r0, r7
   3dc88:	ebfffe93 	bl	3d6dc <McZXSpectrumTZXFormat::getWord16(unsigned char const*, int, int) [clone .part.0]>
   3dc8c:	e1a08000 	mov	r8, r0
   3dc90:	e280a004 	add	sl, r0, #4
   3dc94:	ebffa1fd 	bl	26490 <CLogger::Get()>
   3dc98:	e2844005 	add	r4, r4, #5
   3dc9c:	e1a02009 	mov	r2, r9
   3dca0:	e58d8004 	str	r8, [sp, #4]
   3dca4:	e58db000 	str	fp, [sp]
   3dca8:	e59f3068 	ldr	r3, [pc, #104]	; 3dd18 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a8>
   3dcac:	e59f1060 	ldr	r1, [pc, #96]	; 3dd14 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a4>
   3dcb0:	ebffa133 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3dcb4:	e98d0130 	stmib	sp, {r4, r5, r8}
   3dcb8:	e58d7000 	str	r7, [sp]
   3dcbc:	e28d0014 	add	r0, sp, #20
   3dcc0:	e890000f 	ldm	r0, {r0, r1, r2, r3}
   3dcc4:	e086400a 	add	r4, r6, sl
   3dcc8:	ebfffeab 	bl	3d77c <McZXSpectrumTZXFormat::decodeTapBlock(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int, int, int)>
   3dccc:	eaffffb8 	b	3dbb4 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x44>
   3dcd0:	e1550006 	cmp	r5, r6
   3dcd4:	e1a04006 	mov	r4, r6
   3dcd8:	1affffb8 	bne	3dbc0 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x50>
   3dcdc:	eaffffd9 	b	3dc48 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xd8>
   3dce0:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
   3dce4:	e1a0a009 	mov	sl, r9
   3dce8:	eaffffe9 	b	3dc94 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x124>
   3dcec:	ebffa1e7 	bl	26490 <CLogger::Get()>
   3dcf0:	e59f3024 	ldr	r3, [pc, #36]	; 3dd1c <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1ac>
   3dcf4:	e3a02004 	mov	r2, #4
   3dcf8:	e59f1014 	ldr	r1, [pc, #20]	; 3dd14 <McZXSpectrumTZXFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x1a4>
   3dcfc:	ebffa120 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3dd00:	e3a00000 	mov	r0, #0
   3dd04:	e28ddf4d 	add	sp, sp, #308	; 0x134
   3dd08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dd0c:	000493d4 	.word	0x000493d4
   3dd10:	00049414 	.word	0x00049414
   3dd14:	000492dc 	.word	0x000492dc
   3dd18:	000493ec 	.word	0x000493ec
   3dd1c:	000493dc 	.word	0x000493dc

0003dd20 <McZXSpectrumZ80Format::McZXSpectrumZ80Format()>:
   3dd20:	e12fff1e 	bx	lr

0003dd24 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>:
   3dd24:	e92d4030 	push	{r4, r5, lr}
   3dd28:	e1a0e002 	mov	lr, r2
   3dd2c:	e5dd400c 	ldrb	r4, [sp, #12]
   3dd30:	ea000002 	b	3dd40 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x1c>
   3dd34:	e5c2c000 	strb	ip, [r2]
   3dd38:	e2811001 	add	r1, r1, #1
   3dd3c:	e2822001 	add	r2, r2, #1
   3dd40:	e042000e 	sub	r0, r2, lr
   3dd44:	e1500003 	cmp	r0, r3
   3dd48:	a8bd8030 	popge	{r4, r5, pc}
   3dd4c:	e3540000 	cmp	r4, #0
   3dd50:	e5d1c000 	ldrb	ip, [r1]
   3dd54:	0afffff6 	beq	3dd34 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x10>
   3dd58:	e35c00ed 	cmp	ip, #237	; 0xed
   3dd5c:	1afffff4 	bne	3dd34 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x10>
   3dd60:	e5d15001 	ldrb	r5, [r1, #1]
   3dd64:	e35500ed 	cmp	r5, #237	; 0xed
   3dd68:	1afffff1 	bne	3dd34 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x10>
   3dd6c:	e5d1c002 	ldrb	ip, [r1, #2]
   3dd70:	e35c0000 	cmp	ip, #0
   3dd74:	08bd8030 	popeq	{r4, r5, pc}
   3dd78:	e5d15003 	ldrb	r5, [r1, #3]
   3dd7c:	e082000c 	add	r0, r2, ip
   3dd80:	e2811004 	add	r1, r1, #4
   3dd84:	e4c25001 	strb	r5, [r2], #1
   3dd88:	e1520000 	cmp	r2, r0
   3dd8c:	1afffffc 	bne	3dd84 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x60>
   3dd90:	eaffffea 	b	3dd40 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)+0x1c>

0003dd94 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3dd94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd98:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   3dd9c:	e59d8094 	ldr	r8, [sp, #148]	; 0x94
   3dda0:	e58d0010 	str	r0, [sp, #16]
   3dda4:	e3580031 	cmp	r8, #49	; 0x31
   3dda8:	e58d1014 	str	r1, [sp, #20]
   3ddac:	e58d2018 	str	r2, [sp, #24]
   3ddb0:	e59d6090 	ldr	r6, [sp, #144]	; 0x90
   3ddb4:	da000098 	ble	3e01c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   3ddb8:	e1a0a003 	mov	sl, r3
   3ddbc:	e5d6300c 	ldrb	r3, [r6, #12]
   3ddc0:	e5d62007 	ldrb	r2, [r6, #7]
   3ddc4:	e35300ff 	cmp	r3, #255	; 0xff
   3ddc8:	03a03001 	moveq	r3, #1
   3ddcc:	05c6300c 	strbeq	r3, [r6, #12]
   3ddd0:	e5d63006 	ldrb	r3, [r6, #6]
   3ddd4:	e1933402 	orrs	r3, r3, r2, lsl #8
   3ddd8:	1a00007d 	bne	3dfd4 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x240>
   3dddc:	e1a0b006 	mov	fp, r6
   3dde0:	e5d6301f 	ldrb	r3, [r6, #31]
   3dde4:	e5fb501e 	ldrb	r5, [fp, #30]!
   3dde8:	e59f924c 	ldr	r9, [pc, #588]	; 3e03c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   3ddec:	e0855403 	add	r5, r5, r3, lsl #8
   3ddf0:	e3550017 	cmp	r5, #23
   3ddf4:	d3a03002 	movle	r3, #2
   3ddf8:	c3a03003 	movgt	r3, #3
   3ddfc:	e2855002 	add	r5, r5, #2
   3de00:	e58d301c 	str	r3, [sp, #28]
   3de04:	e0862005 	add	r2, r6, r5
   3de08:	e5d23020 	ldrb	r3, [r2, #32]
   3de0c:	e5d2101f 	ldrb	r1, [r2, #31]
   3de10:	e2433004 	sub	r3, r3, #4
   3de14:	e6ef3073 	uxtb	r3, r3
   3de18:	e5d2401e 	ldrb	r4, [r2, #30]
   3de1c:	e3530004 	cmp	r3, #4
   3de20:	e0844401 	add	r4, r4, r1, lsl #8
   3de24:	8a00001b 	bhi	3de98 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x104>
   3de28:	e59f2210 	ldr	r2, [pc, #528]	; 3e040 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2ac>
   3de2c:	e2851003 	add	r1, r5, #3
   3de30:	e7927103 	ldr	r7, [r2, r3, lsl #2]
   3de34:	e08b1001 	add	r1, fp, r1
   3de38:	e3770001 	cmn	r7, #1
   3de3c:	0a000015 	beq	3de98 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x104>
   3de40:	e3a03001 	mov	r3, #1
   3de44:	e1a02009 	mov	r2, r9
   3de48:	e58d3000 	str	r3, [sp]
   3de4c:	e59d0010 	ldr	r0, [sp, #16]
   3de50:	e3a03901 	mov	r3, #16384	; 0x4000
   3de54:	ebffffb2 	bl	3dd24 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>
   3de58:	e3500901 	cmp	r0, #16384	; 0x4000
   3de5c:	e58d000c 	str	r0, [sp, #12]
   3de60:	0a000006 	beq	3de80 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xec>
   3de64:	ebffa189 	bl	26490 <CLogger::Get()>
   3de68:	e59d300c 	ldr	r3, [sp, #12]
   3de6c:	e3a02004 	mov	r2, #4
   3de70:	e58d3000 	str	r3, [sp]
   3de74:	e59f11c8 	ldr	r1, [pc, #456]	; 3e044 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b0>
   3de78:	e59f31c8 	ldr	r3, [pc, #456]	; 3e048 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b4>
   3de7c:	ebffa0c0 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3de80:	e1a00007 	mov	r0, r7
   3de84:	e1a0300a 	mov	r3, sl
   3de88:	e3a02901 	mov	r2, #16384	; 0x4000
   3de8c:	e1a01009 	mov	r1, r9
   3de90:	e59dc014 	ldr	ip, [sp, #20]
   3de94:	e12fff3c 	blx	ip
   3de98:	e2844003 	add	r4, r4, #3
   3de9c:	e0855004 	add	r5, r5, r4
   3dea0:	e285301e 	add	r3, r5, #30
   3dea4:	e1580003 	cmp	r8, r3
   3dea8:	caffffd5 	bgt	3de04 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x70>
   3deac:	e3a00000 	mov	r0, #0
   3deb0:	e5d62000 	ldrb	r2, [r6]
   3deb4:	e5d6c015 	ldrb	ip, [r6, #21]
   3deb8:	e5d63001 	ldrb	r3, [r6, #1]
   3debc:	e5d61016 	ldrb	r1, [r6, #22]
   3dec0:	e0833402 	add	r3, r3, r2, lsl #8
   3dec4:	e081140c 	add	r1, r1, ip, lsl #8
   3dec8:	e5d62002 	ldrb	r2, [r6, #2]
   3decc:	e5d6c003 	ldrb	ip, [r6, #3]
   3ded0:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3ded4:	e5d6300f 	ldrb	r3, [r6, #15]
   3ded8:	e182240c 	orr	r2, r2, ip, lsl #8
   3dedc:	e5d6c010 	ldrb	ip, [r6, #16]
   3dee0:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   3dee4:	e5d6100d 	ldrb	r1, [r6, #13]
   3dee8:	e183340c 	orr	r3, r3, ip, lsl #8
   3deec:	e5d6c00e 	ldrb	ip, [r6, #14]
   3def0:	e58d2030 	str	r2, [sp, #48]	; 0x30
   3def4:	e5d62011 	ldrb	r2, [r6, #17]
   3def8:	e181140c 	orr	r1, r1, ip, lsl #8
   3defc:	e5d6c012 	ldrb	ip, [r6, #18]
   3df00:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3df04:	e5d63004 	ldrb	r3, [r6, #4]
   3df08:	e182240c 	orr	r2, r2, ip, lsl #8
   3df0c:	e5d6c005 	ldrb	ip, [r6, #5]
   3df10:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   3df14:	e5d61013 	ldrb	r1, [r6, #19]
   3df18:	e183340c 	orr	r3, r3, ip, lsl #8
   3df1c:	e5d6c014 	ldrb	ip, [r6, #20]
   3df20:	e58d2044 	str	r2, [sp, #68]	; 0x44
   3df24:	e5d62019 	ldrb	r2, [r6, #25]
   3df28:	e181140c 	orr	r1, r1, ip, lsl #8
   3df2c:	e5d6c01a 	ldrb	ip, [r6, #26]
   3df30:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3df34:	e5d63017 	ldrb	r3, [r6, #23]
   3df38:	e182240c 	orr	r2, r2, ip, lsl #8
   3df3c:	e5d6c018 	ldrb	ip, [r6, #24]
   3df40:	e58d1040 	str	r1, [sp, #64]	; 0x40
   3df44:	e183340c 	orr	r3, r3, ip, lsl #8
   3df48:	e58d2038 	str	r2, [sp, #56]	; 0x38
   3df4c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3df50:	e58d0050 	str	r0, [sp, #80]	; 0x50
   3df54:	e58d0064 	str	r0, [sp, #100]	; 0x64
   3df58:	e5d60008 	ldrb	r0, [r6, #8]
   3df5c:	e5d63009 	ldrb	r3, [r6, #9]
   3df60:	e59d201c 	ldr	r2, [sp, #28]
   3df64:	e1800403 	orr	r0, r0, r3, lsl #8
   3df68:	e3520001 	cmp	r2, #1
   3df6c:	e5d6301d 	ldrb	r3, [r6, #29]
   3df70:	e5d6200b 	ldrb	r2, [r6, #11]
   3df74:	e2033003 	and	r3, r3, #3
   3df78:	e202207f 	and	r2, r2, #127	; 0x7f
   3df7c:	e5d6c007 	ldrb	ip, [r6, #7]
   3df80:	e5d61006 	ldrb	r1, [r6, #6]
   3df84:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   3df88:	e58d2058 	str	r2, [sp, #88]	; 0x58
   3df8c:	15d63020 	ldrbne	r3, [r6, #32]
   3df90:	15d62021 	ldrbne	r2, [r6, #33]	; 0x21
   3df94:	e58d0024 	str	r0, [sp, #36]	; 0x24
   3df98:	e5d6001b 	ldrb	r0, [r6, #27]
   3df9c:	10833402 	addne	r3, r3, r2, lsl #8
   3dfa0:	e181140c 	orr	r1, r1, ip, lsl #8
   3dfa4:	e5d6c00a 	ldrb	ip, [r6, #10]
   3dfa8:	e58d1020 	str	r1, [sp, #32]
   3dfac:	e58d0060 	str	r0, [sp, #96]	; 0x60
   3dfb0:	158d3020 	strne	r3, [sp, #32]
   3dfb4:	e28d0020 	add	r0, sp, #32
   3dfb8:	e1a0100a 	mov	r1, sl
   3dfbc:	e59d3018 	ldr	r3, [sp, #24]
   3dfc0:	e58dc054 	str	ip, [sp, #84]	; 0x54
   3dfc4:	e12fff33 	blx	r3
   3dfc8:	e3a00001 	mov	r0, #1
   3dfcc:	e28dd06c 	add	sp, sp, #108	; 0x6c
   3dfd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dfd4:	e5d6300c 	ldrb	r3, [r6, #12]
   3dfd8:	e59f205c 	ldr	r2, [pc, #92]	; 3e03c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   3dfdc:	e1a032a3 	lsr	r3, r3, #5
   3dfe0:	e2033001 	and	r3, r3, #1
   3dfe4:	e58d3000 	str	r3, [sp]
   3dfe8:	e286101e 	add	r1, r6, #30
   3dfec:	e3a03903 	mov	r3, #49152	; 0xc000
   3dff0:	e59d0010 	ldr	r0, [sp, #16]
   3dff4:	ebffff4a 	bl	3dd24 <McZXSpectrumZ80Format::decompress(unsigned char*, unsigned char*, int, bool)>
   3dff8:	e1a0300a 	mov	r3, sl
   3dffc:	e3a02903 	mov	r2, #49152	; 0xc000
   3e000:	e59f1034 	ldr	r1, [pc, #52]	; 3e03c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a8>
   3e004:	e3a00901 	mov	r0, #16384	; 0x4000
   3e008:	e59dc014 	ldr	ip, [sp, #20]
   3e00c:	e12fff3c 	blx	ip
   3e010:	e3a03001 	mov	r3, #1
   3e014:	e58d301c 	str	r3, [sp, #28]
   3e018:	eaffffa3 	b	3deac <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x118>
   3e01c:	ebffa11b 	bl	26490 <CLogger::Get()>
   3e020:	e59f3024 	ldr	r3, [pc, #36]	; 3e04c <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b8>
   3e024:	e3a02004 	mov	r2, #4
   3e028:	e59f1014 	ldr	r1, [pc, #20]	; 3e044 <McZXSpectrumZ80Format::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2b0>
   3e02c:	ebffa054 	bl	26184 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3e030:	e3a00000 	mov	r0, #0
   3e034:	e28dd06c 	add	sp, sp, #108	; 0x6c
   3e038:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e03c:	00053030 	.word	0x00053030
   3e040:	00049434 	.word	0x00049434
   3e044:	00049448 	.word	0x00049448
   3e048:	0004945c 	.word	0x0004945c
   3e04c:	00049214 	.word	0x00049214

0003e050 <Display::~Display()>:
   3e050:	e92d4010 	push	{r4, lr}
   3e054:	e1a04000 	mov	r4, r0
   3e058:	e59f301c 	ldr	r3, [pc, #28]	; 3e07c <Display::~Display()+0x2c>
   3e05c:	e4803004 	str	r3, [r0], #4
   3e060:	eb0002c1 	bl	3eb6c <DisplayFX::~DisplayFX()>
   3e064:	e59f3014 	ldr	r3, [pc, #20]	; 3e080 <Display::~Display()+0x30>
   3e068:	e1a00004 	mov	r0, r4
   3e06c:	e5843000 	str	r3, [r4]
   3e070:	ebff99f6 	bl	24850 <CDevice::~CDevice()>
   3e074:	e1a00004 	mov	r0, r4
   3e078:	e8bd8010 	pop	{r4, pc}
   3e07c:	000494c0 	.word	0x000494c0
   3e080:	00049484 	.word	0x00049484

0003e084 <Display::~Display()>:
   3e084:	e92d4010 	push	{r4, lr}
   3e088:	e1a04000 	mov	r4, r0
   3e08c:	e59f3028 	ldr	r3, [pc, #40]	; 3e0bc <Display::~Display()+0x38>
   3e090:	e4803004 	str	r3, [r0], #4
   3e094:	eb0002b4 	bl	3eb6c <DisplayFX::~DisplayFX()>
   3e098:	e59f3020 	ldr	r3, [pc, #32]	; 3e0c0 <Display::~Display()+0x3c>
   3e09c:	e1a00004 	mov	r0, r4
   3e0a0:	e5843000 	str	r3, [r4]
   3e0a4:	ebff99e9 	bl	24850 <CDevice::~CDevice()>
   3e0a8:	e1a00004 	mov	r0, r4
   3e0ac:	e3a01efa 	mov	r1, #4000	; 0xfa0
   3e0b0:	ebffb22d 	bl	2a96c <operator delete(void*, unsigned int)>
   3e0b4:	e1a00004 	mov	r0, r4
   3e0b8:	e8bd8010 	pop	{r4, pc}
   3e0bc:	000494c0 	.word	0x000494c0
   3e0c0:	00049484 	.word	0x00049484

0003e0c4 <Display::foreground(DISPLAY_FX_COLOUR)>:
   3e0c4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e0c8:	e3530000 	cmp	r3, #0
   3e0cc:	012fff1e 	bxeq	lr
   3e0d0:	e1a02001 	mov	r2, r1
   3e0d4:	e2800004 	add	r0, r0, #4
   3e0d8:	e3a01000 	mov	r1, #0
   3e0dc:	ea0003c6 	b	3effc <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003e0e0 <Display::background(DISPLAY_FX_COLOUR)>:
   3e0e0:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e0e4:	e3530000 	cmp	r3, #0
   3e0e8:	012fff1e 	bxeq	lr
   3e0ec:	e1a02001 	mov	r2, r1
   3e0f0:	e2800004 	add	r0, r0, #4
   3e0f4:	e3a01000 	mov	r1, #0
   3e0f8:	ea0003c4 	b	3f010 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003e0fc <Display::write(int, int, char const*)>:
   3e0fc:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e100:	e35c0000 	cmp	ip, #0
   3e104:	012fff1e 	bxeq	lr
   3e108:	e1a0c003 	mov	ip, r3
   3e10c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e110:	e24dd00c 	sub	sp, sp, #12
   3e114:	e1a03002 	mov	r3, r2
   3e118:	e58dc000 	str	ip, [sp]
   3e11c:	e1a02001 	mov	r2, r1
   3e120:	e2800004 	add	r0, r0, #4
   3e124:	e3a01000 	mov	r1, #0
   3e128:	eb00038f 	bl	3ef6c <DisplayFX::windowPut(int, int, int, char const*)>
   3e12c:	e28dd00c 	add	sp, sp, #12
   3e130:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003e134 <Display::write(int, int, int)>:
   3e134:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e138:	e35c0000 	cmp	ip, #0
   3e13c:	012fff1e 	bxeq	lr
   3e140:	e1a0c003 	mov	ip, r3
   3e144:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e148:	e24dd00c 	sub	sp, sp, #12
   3e14c:	e1a03002 	mov	r3, r2
   3e150:	e58dc000 	str	ip, [sp]
   3e154:	e1a02001 	mov	r2, r1
   3e158:	e2800004 	add	r0, r0, #4
   3e15c:	e3a01000 	mov	r1, #0
   3e160:	eb00030c 	bl	3ed98 <DisplayFX::windowPut(int, int, int, int)>
   3e164:	e28dd00c 	add	sp, sp, #12
   3e168:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003e16c <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3e16c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e170:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e174:	e24dd00c 	sub	sp, sp, #12
   3e178:	e35c0000 	cmp	ip, #0
   3e17c:	e1dde1d0 	ldrsb	lr, [sp, #16]
   3e180:	0a000006 	beq	3e1a0 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)+0x34>
   3e184:	e1a0c003 	mov	ip, r3
   3e188:	e2800004 	add	r0, r0, #4
   3e18c:	e1a03002 	mov	r3, r2
   3e190:	e88d5000 	stm	sp, {ip, lr}
   3e194:	e1a02001 	mov	r2, r1
   3e198:	e3a01000 	mov	r1, #0
   3e19c:	eb0003a0 	bl	3f024 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>
   3e1a0:	e28dd00c 	add	sp, sp, #12
   3e1a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003e1a8 <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3e1a8:	e1a02001 	mov	r2, r1
   3e1ac:	e2800004 	add	r0, r0, #4
   3e1b0:	e3a01000 	mov	r1, #0
   3e1b4:	ea0003e8 	b	3f15c <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>

0003e1b8 <Display::Write(void const*, unsigned int)>:
   3e1b8:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e1bc:	e92d4010 	push	{r4, lr}
   3e1c0:	e3530000 	cmp	r3, #0
   3e1c4:	e1a04002 	mov	r4, r2
   3e1c8:	0a000001 	beq	3e1d4 <Display::Write(void const*, unsigned int)+0x1c>
   3e1cc:	e2800004 	add	r0, r0, #4
   3e1d0:	eb0004f0 	bl	3f598 <DisplayFX::consolePut(char const*, unsigned int)>
   3e1d4:	e1a00004 	mov	r0, r4
   3e1d8:	e8bd8010 	pop	{r4, pc}

0003e1dc <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3e1dc:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e1e0:	e35c0000 	cmp	ip, #0
   3e1e4:	012fff1e 	bxeq	lr
   3e1e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3e1ec:	e1a07003 	mov	r7, r3
   3e1f0:	e1a06002 	mov	r6, r2
   3e1f4:	e3a03fe1 	mov	r3, #900	; 0x384
   3e1f8:	e3a02000 	mov	r2, #0
   3e1fc:	e24dd034 	sub	sp, sp, #52	; 0x34
   3e200:	e2804004 	add	r4, r0, #4
   3e204:	e1a05001 	mov	r5, r1
   3e208:	e1a00004 	mov	r0, r4
   3e20c:	e58d3000 	str	r3, [sp]
   3e210:	e1a01002 	mov	r1, r2
   3e214:	e3a03e41 	mov	r3, #1040	; 0x410
   3e218:	eb0002c5 	bl	3ed34 <DisplayFX::screenRectClear(int, int, int, int)>
   3e21c:	e3a03000 	mov	r3, #0
   3e220:	e3a02008 	mov	r2, #8
   3e224:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3e228:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3e22c:	e58d1020 	str	r1, [sp, #32]
   3e230:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3e234:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3e238:	e58d101c 	str	r1, [sp, #28]
   3e23c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3e240:	e1a00004 	mov	r0, r4
   3e244:	e58d1018 	str	r1, [sp, #24]
   3e248:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3e24c:	e88d00e0 	stm	sp, {r5, r6, r7}
   3e250:	e58d1014 	str	r1, [sp, #20]
   3e254:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3e258:	e1a02003 	mov	r2, r3
   3e25c:	e58d1010 	str	r1, [sp, #16]
   3e260:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3e264:	e58d100c 	str	r1, [sp, #12]
   3e268:	e1a01003 	mov	r1, r3
   3e26c:	eb0003d0 	bl	3f1b4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3e270:	e28dd034 	add	sp, sp, #52	; 0x34
   3e274:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003e278 <Display::Display()>:
   3e278:	e92d4010 	push	{r4, lr}
   3e27c:	e1a04000 	mov	r4, r0
   3e280:	ebff9980 	bl	24888 <CDevice::CDevice()>
   3e284:	e1a00004 	mov	r0, r4
   3e288:	e59f3014 	ldr	r3, [pc, #20]	; 3e2a4 <Display::Display()+0x2c>
   3e28c:	e4803004 	str	r3, [r0], #4
   3e290:	eb000212 	bl	3eae0 <DisplayFX::DisplayFX()>
   3e294:	e3a03000 	mov	r3, #0
   3e298:	e1a00004 	mov	r0, r4
   3e29c:	e5c43b50 	strb	r3, [r4, #2896]	; 0xb50
   3e2a0:	e8bd8010 	pop	{r4, pc}
   3e2a4:	000494c0 	.word	0x000494c0

0003e2a8 <Display::init()>:
   3e2a8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3e2ac:	e2809004 	add	r9, r0, #4
   3e2b0:	e24dd034 	sub	sp, sp, #52	; 0x34
   3e2b4:	e1a07000 	mov	r7, r0
   3e2b8:	e3a02fe1 	mov	r2, #900	; 0x384
   3e2bc:	e3a01d19 	mov	r1, #1600	; 0x640
   3e2c0:	e1a00009 	mov	r0, r9
   3e2c4:	eb000234 	bl	3eb9c <DisplayFX::init(int, int)>
   3e2c8:	e3e05000 	mvn	r5, #0
   3e2cc:	e3a04000 	mov	r4, #0
   3e2d0:	e3a06001 	mov	r6, #1
   3e2d4:	e3a08008 	mov	r8, #8
   3e2d8:	e3a0efdd 	mov	lr, #884	; 0x374
   3e2dc:	e3a0cb01 	mov	ip, #1024	; 0x400
   3e2e0:	e1a00009 	mov	r0, r9
   3e2e4:	e88d5000 	stm	sp, {ip, lr}
   3e2e8:	e1a03004 	mov	r3, r4
   3e2ec:	e1a02004 	mov	r2, r4
   3e2f0:	e1a01004 	mov	r1, r4
   3e2f4:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3e2f8:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3e2fc:	e58d800c 	str	r8, [sp, #12]
   3e300:	e58d8008 	str	r8, [sp, #8]
   3e304:	e58d5020 	str	r5, [sp, #32]
   3e308:	e58d501c 	str	r5, [sp, #28]
   3e30c:	e58d4018 	str	r4, [sp, #24]
   3e310:	e58d6014 	str	r6, [sp, #20]
   3e314:	e58d6010 	str	r6, [sp, #16]
   3e318:	eb0003a5 	bl	3f1b4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3e31c:	e1a00009 	mov	r0, r9
   3e320:	e1a03004 	mov	r3, r4
   3e324:	e1a01006 	mov	r1, r6
   3e328:	e59f20b0 	ldr	r2, [pc, #176]	; 3e3e0 <Display::init()+0x138>
   3e32c:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3e330:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3e334:	e58d5020 	str	r5, [sp, #32]
   3e338:	e58d501c 	str	r5, [sp, #28]
   3e33c:	e58d4018 	str	r4, [sp, #24]
   3e340:	e58d6014 	str	r6, [sp, #20]
   3e344:	e58d6010 	str	r6, [sp, #16]
   3e348:	e58d500c 	str	r5, [sp, #12]
   3e34c:	e58d5008 	str	r5, [sp, #8]
   3e350:	e58d5004 	str	r5, [sp, #4]
   3e354:	e58d5000 	str	r5, [sp]
   3e358:	eb000395 	bl	3f1b4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3e35c:	e59f3080 	ldr	r3, [pc, #128]	; 3e3e4 <Display::init()+0x13c>
   3e360:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3e364:	e5933004 	ldr	r3, [r3, #4]
   3e368:	e59f2070 	ldr	r2, [pc, #112]	; 3e3e0 <Display::init()+0x138>
   3e36c:	e1a03183 	lsl	r3, r3, #3
   3e370:	e1a00009 	mov	r0, r9
   3e374:	e3a01002 	mov	r1, #2
   3e378:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3e37c:	e58d5020 	str	r5, [sp, #32]
   3e380:	e58d501c 	str	r5, [sp, #28]
   3e384:	e58d4018 	str	r4, [sp, #24]
   3e388:	e58d6014 	str	r6, [sp, #20]
   3e38c:	e58d6010 	str	r6, [sp, #16]
   3e390:	e58d500c 	str	r5, [sp, #12]
   3e394:	e58d5008 	str	r5, [sp, #8]
   3e398:	e58d5004 	str	r5, [sp, #4]
   3e39c:	e58d5000 	str	r5, [sp]
   3e3a0:	eb000383 	bl	3f1b4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3e3a4:	e1a00009 	mov	r0, r9
   3e3a8:	e3a01002 	mov	r1, #2
   3e3ac:	eb0003e3 	bl	3f340 <DisplayFX::consoleSetWindow(int)>
   3e3b0:	e1a03004 	mov	r3, r4
   3e3b4:	e1a00007 	mov	r0, r7
   3e3b8:	e2872d11 	add	r2, r7, #1088	; 0x440
   3e3bc:	e282200c 	add	r2, r2, #12
   3e3c0:	e5c03b51 	strb	r3, [r0, #2897]	; 0xb51
   3e3c4:	e2800064 	add	r0, r0, #100	; 0x64
   3e3c8:	e1500002 	cmp	r0, r2
   3e3cc:	1afffffb 	bne	3e3c0 <Display::init()+0x118>
   3e3d0:	e3a00001 	mov	r0, #1
   3e3d4:	e5c70b50 	strb	r0, [r7, #2896]	; 0xb50
   3e3d8:	e28dd034 	add	sp, sp, #52	; 0x34
   3e3dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e3e0:	0000041a 	.word	0x0000041a
   3e3e4:	0004d39c 	.word	0x0004d39c

0003e3e8 <Display::statusPut(int, int, char const*)>:
   3e3e8:	e351000a 	cmp	r1, #10
   3e3ec:	c12fff1e 	bxgt	lr
   3e3f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3e3f4:	e3a04064 	mov	r4, #100	; 0x64
   3e3f8:	e0240194 	mla	r4, r4, r1, r0
   3e3fc:	e2844eb5 	add	r4, r4, #2896	; 0xb50
   3e400:	e2844001 	add	r4, r4, #1
   3e404:	e24dd008 	sub	sp, sp, #8
   3e408:	e1a08000 	mov	r8, r0
   3e40c:	e1a05001 	mov	r5, r1
   3e410:	e1a00004 	mov	r0, r4
   3e414:	e1a01003 	mov	r1, r3
   3e418:	e1a06003 	mov	r6, r3
   3e41c:	e1a07002 	mov	r7, r2
   3e420:	ebffad4f 	bl	29964 <strcmp>
   3e424:	e3500000 	cmp	r0, #0
   3e428:	1a000001 	bne	3e434 <Display::statusPut(int, int, char const*)+0x4c>
   3e42c:	e28dd008 	add	sp, sp, #8
   3e430:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3e434:	e3a02063 	mov	r2, #99	; 0x63
   3e438:	e1a00004 	mov	r0, r4
   3e43c:	e1a01006 	mov	r1, r6
   3e440:	ebffae06 	bl	29c60 <strncpy>
   3e444:	e3570001 	cmp	r7, #1
   3e448:	03a02009 	moveq	r2, #9
   3e44c:	0a000002 	beq	3e45c <Display::statusPut(int, int, char const*)+0x74>
   3e450:	e3570000 	cmp	r7, #0
   3e454:	13a0200a 	movne	r2, #10
   3e458:	03a0200b 	moveq	r2, #11
   3e45c:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3e460:	e3530000 	cmp	r3, #0
   3e464:	0afffff0 	beq	3e42c <Display::statusPut(int, int, char const*)+0x44>
   3e468:	e59f1060 	ldr	r1, [pc, #96]	; 3e4d0 <Display::statusPut(int, int, char const*)+0xe8>
   3e46c:	e2884004 	add	r4, r8, #4
   3e470:	e0815185 	add	r5, r1, r5, lsl #3
   3e474:	e1a00004 	mov	r0, r4
   3e478:	e3a01001 	mov	r1, #1
   3e47c:	e595703c 	ldr	r7, [r5, #60]	; 0x3c
   3e480:	e5955040 	ldr	r5, [r5, #64]	; 0x40
   3e484:	eb0002dc 	bl	3effc <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3e488:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3e48c:	e3530000 	cmp	r3, #0
   3e490:	0affffe5 	beq	3e42c <Display::statusPut(int, int, char const*)+0x44>
   3e494:	e1a03005 	mov	r3, r5
   3e498:	e58d6000 	str	r6, [sp]
   3e49c:	e1a02007 	mov	r2, r7
   3e4a0:	e3a01001 	mov	r1, #1
   3e4a4:	e1a00004 	mov	r0, r4
   3e4a8:	eb0002af 	bl	3ef6c <DisplayFX::windowPut(int, int, int, char const*)>
   3e4ac:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3e4b0:	e3530000 	cmp	r3, #0
   3e4b4:	0affffdc 	beq	3e42c <Display::statusPut(int, int, char const*)+0x44>
   3e4b8:	e1a00004 	mov	r0, r4
   3e4bc:	e3a0200f 	mov	r2, #15
   3e4c0:	e3a01001 	mov	r1, #1
   3e4c4:	e28dd008 	add	sp, sp, #8
   3e4c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3e4cc:	ea0002ca 	b	3effc <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3e4d0:	000494b8 	.word	0x000494b8

0003e4d4 <Display::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3e4d4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e4d8:	e3530000 	cmp	r3, #0
   3e4dc:	012fff1e 	bxeq	lr
   3e4e0:	e2800004 	add	r0, r0, #4
   3e4e4:	ea0002c4 	b	3effc <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003e4e8 <Display::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3e4e8:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e4ec:	e3530000 	cmp	r3, #0
   3e4f0:	012fff1e 	bxeq	lr
   3e4f4:	e2800004 	add	r0, r0, #4
   3e4f8:	ea0002c4 	b	3f010 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003e4fc <Display::windowWrite(int, int, int, char const*)>:
   3e4fc:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e500:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e504:	e35c0000 	cmp	ip, #0
   3e508:	e59de004 	ldr	lr, [sp, #4]
   3e50c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3e510:	e2800004 	add	r0, r0, #4
   3e514:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3e518:	ea000293 	b	3ef6c <DisplayFX::windowPut(int, int, int, char const*)>

0003e51c <Display::windowWrite(int, int, int, int)>:
   3e51c:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e520:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e524:	e35c0000 	cmp	ip, #0
   3e528:	e59de004 	ldr	lr, [sp, #4]
   3e52c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3e530:	e2800004 	add	r0, r0, #4
   3e534:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3e538:	ea000216 	b	3ed98 <DisplayFX::windowPut(int, int, int, int)>

0003e53c <Display::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3e53c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e540:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e544:	e59de004 	ldr	lr, [sp, #4]
   3e548:	e35c0000 	cmp	ip, #0
   3e54c:	e1ddc0d8 	ldrsb	ip, [sp, #8]
   3e550:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3e554:	e58dc008 	str	ip, [sp, #8]
   3e558:	e2800004 	add	r0, r0, #4
   3e55c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3e560:	ea0002af 	b	3f024 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>

0003e564 <Display::consolePut(char const*)>:
   3e564:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e568:	e3530000 	cmp	r3, #0
   3e56c:	012fff1e 	bxeq	lr
   3e570:	e2800004 	add	r0, r0, #4
   3e574:	ea0003fb 	b	3f568 <DisplayFX::consolePut(char const*)>

0003e578 <Display::consolePut(int)>:
   3e578:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e57c:	e3530000 	cmp	r3, #0
   3e580:	012fff1e 	bxeq	lr
   3e584:	e2800004 	add	r0, r0, #4
   3e588:	ea00039a 	b	3f3f8 <DisplayFX::consolePut(int)>

0003e58c <Display::consolePut(char const*, unsigned int)>:
   3e58c:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e590:	e3530000 	cmp	r3, #0
   3e594:	012fff1e 	bxeq	lr
   3e598:	e2800004 	add	r0, r0, #4
   3e59c:	ea0003fd 	b	3f598 <DisplayFX::consolePut(char const*, unsigned int)>

0003e5a0 <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3e5a0:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e5a4:	e3530000 	cmp	r3, #0
   3e5a8:	012fff1e 	bxeq	lr
   3e5ac:	e2800004 	add	r0, r0, #4
   3e5b0:	ea000351 	b	3f2fc <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003e5b4 <Display::consoleGetWidth()>:
   3e5b4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3e5b8:	e3530000 	cmp	r3, #0
   3e5bc:	1a000001 	bne	3e5c8 <Display::consoleGetWidth()+0x14>
   3e5c0:	e1a00003 	mov	r0, r3
   3e5c4:	e12fff1e 	bx	lr
   3e5c8:	e2800004 	add	r0, r0, #4
   3e5cc:	ea00034f 	b	3f310 <DisplayFX::consoleGetWidth()>

0003e5d0 <Display::logDebug(char const*, char const*, char const*)>:
   3e5d0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3e5d4:	e35c0000 	cmp	ip, #0
   3e5d8:	012fff1e 	bxeq	lr
   3e5dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3e5e0:	e1a04000 	mov	r4, r0
   3e5e4:	e2805004 	add	r5, r0, #4
   3e5e8:	e1a00005 	mov	r0, r5
   3e5ec:	e1a07003 	mov	r7, r3
   3e5f0:	e1a06002 	mov	r6, r2
   3e5f4:	eb0003db 	bl	3f568 <DisplayFX::consolePut(char const*)>
   3e5f8:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3e5fc:	e3530000 	cmp	r3, #0
   3e600:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3e604:	e59f1068 	ldr	r1, [pc, #104]	; 3e674 <Display::logDebug(char const*, char const*, char const*)+0xa4>
   3e608:	e1a00005 	mov	r0, r5
   3e60c:	eb0003d5 	bl	3f568 <DisplayFX::consolePut(char const*)>
   3e610:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3e614:	e3530000 	cmp	r3, #0
   3e618:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3e61c:	e1a01006 	mov	r1, r6
   3e620:	e1a00005 	mov	r0, r5
   3e624:	eb0003cf 	bl	3f568 <DisplayFX::consolePut(char const*)>
   3e628:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3e62c:	e3530000 	cmp	r3, #0
   3e630:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3e634:	e59f103c 	ldr	r1, [pc, #60]	; 3e678 <Display::logDebug(char const*, char const*, char const*)+0xa8>
   3e638:	e1a00005 	mov	r0, r5
   3e63c:	eb0003c9 	bl	3f568 <DisplayFX::consolePut(char const*)>
   3e640:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3e644:	e3530000 	cmp	r3, #0
   3e648:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3e64c:	e1a01007 	mov	r1, r7
   3e650:	e1a00005 	mov	r0, r5
   3e654:	eb0003c3 	bl	3f568 <DisplayFX::consolePut(char const*)>
   3e658:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3e65c:	e3530000 	cmp	r3, #0
   3e660:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3e664:	e1a00005 	mov	r0, r5
   3e668:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3e66c:	e59f1008 	ldr	r1, [pc, #8]	; 3e67c <Display::logDebug(char const*, char const*, char const*)+0xac>
   3e670:	ea0003bc 	b	3f568 <DisplayFX::consolePut(char const*)>
   3e674:	0004954c 	.word	0x0004954c
   3e678:	00049550 	.word	0x00049550
   3e67c:	00049234 	.word	0x00049234

0003e680 <DisplayBase::write(int, int, char const*)>:
   3e680:	e12fff1e 	bx	lr

0003e684 <DisplayBase::~DisplayBase()>:
   3e684:	e92d4010 	push	{r4, lr}
   3e688:	e1a04000 	mov	r4, r0
   3e68c:	e59f300c 	ldr	r3, [pc, #12]	; 3e6a0 <DisplayBase::~DisplayBase()+0x1c>
   3e690:	e5803000 	str	r3, [r0]
   3e694:	ebff986d 	bl	24850 <CDevice::~CDevice()>
   3e698:	e1a00004 	mov	r0, r4
   3e69c:	e8bd8010 	pop	{r4, pc}
   3e6a0:	00049484 	.word	0x00049484

0003e6a4 <DisplayBase::~DisplayBase()>:
   3e6a4:	e92d4010 	push	{r4, lr}
   3e6a8:	e1a04000 	mov	r4, r0
   3e6ac:	e59f3018 	ldr	r3, [pc, #24]	; 3e6cc <DisplayBase::~DisplayBase()+0x28>
   3e6b0:	e5803000 	str	r3, [r0]
   3e6b4:	ebff9865 	bl	24850 <CDevice::~CDevice()>
   3e6b8:	e1a00004 	mov	r0, r4
   3e6bc:	e3a01004 	mov	r1, #4
   3e6c0:	ebffb0a9 	bl	2a96c <operator delete(void*, unsigned int)>
   3e6c4:	e1a00004 	mov	r0, r4
   3e6c8:	e8bd8010 	pop	{r4, pc}
   3e6cc:	00049484 	.word	0x00049484

0003e6d0 <DisplayFX::windowScroll(int, int) [clone .part.3]>:
   3e6d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e6d4:	e3520000 	cmp	r2, #0
   3e6d8:	e0224fc2 	eor	r4, r2, r2, asr #31
   3e6dc:	e0444fc2 	sub	r4, r4, r2, asr #31
   3e6e0:	e1a08000 	mov	r8, r0
   3e6e4:	e1a09001 	mov	r9, r1
   3e6e8:	da00002e 	ble	3e7a8 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xd8>
   3e6ec:	e3a05f8f 	mov	r5, #572	; 0x23c
   3e6f0:	e0250195 	mla	r5, r5, r1, r0
   3e6f4:	e5956014 	ldr	r6, [r5, #20]
   3e6f8:	e595701c 	ldr	r7, [r5, #28]
   3e6fc:	e3560000 	cmp	r6, #0
   3e700:	e5950008 	ldr	r0, [r5, #8]
   3e704:	d3a07000 	movle	r7, #0
   3e708:	da000003 	ble	3e71c <DisplayFX::windowScroll(int, int) [clone .part.3]+0x4c>
   3e70c:	e1a01006 	mov	r1, r6
   3e710:	eb0004e7 	bl	3fab4 <__aeabi_idiv>
   3e714:	e0000096 	mul	r0, r6, r0
   3e718:	e0070097 	mul	r7, r7, r0
   3e71c:	e5951018 	ldr	r1, [r5, #24]
   3e720:	e3510000 	cmp	r1, #0
   3e724:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e728:	e3a0af8f 	mov	sl, #572	; 0x23c
   3e72c:	e5950010 	ldr	r0, [r5, #16]
   3e730:	eb0004df 	bl	3fab4 <__aeabi_idiv>
   3e734:	e02a899a 	mla	sl, sl, r9, r8
   3e738:	e59a3018 	ldr	r3, [sl, #24]
   3e73c:	e59a2020 	ldr	r2, [sl, #32]
   3e740:	e0000093 	mul	r0, r3, r0
   3e744:	e0060092 	mul	r6, r2, r0
   3e748:	e3560000 	cmp	r6, #0
   3e74c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e750:	e3a05000 	mov	r5, #0
   3e754:	e0040493 	mul	r4, r3, r4
   3e758:	e59a900c 	ldr	r9, [sl, #12]
   3e75c:	e59a3004 	ldr	r3, [sl, #4]
   3e760:	e0249492 	mla	r4, r2, r4, r9
   3e764:	e5982b38 	ldr	r2, [r8, #2872]	; 0xb38
   3e768:	e0243492 	mla	r4, r2, r4, r3
   3e76c:	e0233992 	mla	r3, r2, r9, r3
   3e770:	e5989b40 	ldr	r9, [r8, #2880]	; 0xb40
   3e774:	e0894004 	add	r4, r9, r4
   3e778:	e0899003 	add	r9, r9, r3
   3e77c:	e1a01004 	mov	r1, r4
   3e780:	e1a00009 	mov	r0, r9
   3e784:	e1a02007 	mov	r2, r7
   3e788:	ebffae90 	bl	2a1d0 <memcpy>
   3e78c:	e2855001 	add	r5, r5, #1
   3e790:	e5983b38 	ldr	r3, [r8, #2872]	; 0xb38
   3e794:	e1560005 	cmp	r6, r5
   3e798:	e0899003 	add	r9, r9, r3
   3e79c:	e0844003 	add	r4, r4, r3
   3e7a0:	1afffff5 	bne	3e77c <DisplayFX::windowScroll(int, int) [clone .part.3]+0xac>
   3e7a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e7a8:	e3a03f8f 	mov	r3, #572	; 0x23c
   3e7ac:	e0230193 	mla	r3, r3, r1, r0
   3e7b0:	e5931018 	ldr	r1, [r3, #24]
   3e7b4:	e5930010 	ldr	r0, [r3, #16]
   3e7b8:	e3510000 	cmp	r1, #0
   3e7bc:	d3a00000 	movle	r0, #0
   3e7c0:	da000000 	ble	3e7c8 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xf8>
   3e7c4:	eb0004ba 	bl	3fab4 <__aeabi_idiv>
   3e7c8:	e3a01f8f 	mov	r1, #572	; 0x23c
   3e7cc:	e0218991 	mla	r1, r1, r9, r8
   3e7d0:	e591c018 	ldr	ip, [r1, #24]
   3e7d4:	e0403004 	sub	r3, r0, r4
   3e7d8:	e003039c 	mul	r3, ip, r3
   3e7dc:	e591e00c 	ldr	lr, [r1, #12]
   3e7e0:	e5915020 	ldr	r5, [r1, #32]
   3e7e4:	e5912004 	ldr	r2, [r1, #4]
   3e7e8:	e023e395 	mla	r3, r5, r3, lr
   3e7ec:	e0010c90 	mul	r1, r0, ip
   3e7f0:	e598cb38 	ldr	ip, [r8, #2872]	; 0xb38
   3e7f4:	e2424001 	sub	r4, r2, #1
   3e7f8:	e0202e9c 	mla	r0, ip, lr, r2
   3e7fc:	e023439c 	mla	r3, ip, r3, r4
   3e800:	e5982b40 	ldr	r2, [r8, #2880]	; 0xb40
   3e804:	e021e195 	mla	r1, r5, r1, lr
   3e808:	e0823003 	add	r3, r2, r3
   3e80c:	e0820000 	add	r0, r2, r0
   3e810:	e1530000 	cmp	r3, r0
   3e814:	e021419c 	mla	r1, ip, r1, r4
   3e818:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e81c:	e2811001 	add	r1, r1, #1
   3e820:	e0822001 	add	r2, r2, r1
   3e824:	e4531001 	ldrb	r1, [r3], #-1
   3e828:	e1500003 	cmp	r0, r3
   3e82c:	e5621001 	strb	r1, [r2, #-1]!
   3e830:	1afffffb 	bne	3e824 <DisplayFX::windowScroll(int, int) [clone .part.3]+0x154>
   3e834:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003e838 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>:
   3e838:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e83c:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   3e840:	e292c001 	adds	ip, r2, #1
   3e844:	13a0c001 	movne	ip, #1
   3e848:	e3770001 	cmn	r7, #1
   3e84c:	13a0c000 	movne	ip, #0
   3e850:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   3e854:	e59fe280 	ldr	lr, [pc, #640]	; 3eadc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x2a4>
   3e858:	e3540000 	cmp	r4, #0
   3e85c:	01a0400e 	moveq	r4, lr
   3e860:	e35c0000 	cmp	ip, #0
   3e864:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   3e868:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
   3e86c:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
   3e870:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
   3e874:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
   3e878:	e59de048 	ldr	lr, [sp, #72]	; 0x48
   3e87c:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   3e880:	0a000089 	beq	3eaac <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x274>
   3e884:	e3a0bf8f 	mov	fp, #572	; 0x23c
   3e888:	e5907b30 	ldr	r7, [r0, #2864]	; 0xb30
   3e88c:	e02b019b 	mla	fp, fp, r1, r0
   3e890:	e0477002 	sub	r7, r7, r2
   3e894:	e047708e 	sub	r7, r7, lr, lsl #1
   3e898:	e58b7008 	str	r7, [fp, #8]
   3e89c:	e3a07f8f 	mov	r7, #572	; 0x23c
   3e8a0:	e3750001 	cmn	r5, #1
   3e8a4:	05905b34 	ldreq	r5, [r0, #2868]	; 0xb34
   3e8a8:	00270197 	mlaeq	r7, r7, r1, r0
   3e8ac:	10050596 	mulne	r5, r6, r5
   3e8b0:	10270197 	mlane	r7, r7, r1, r0
   3e8b4:	00455003 	subeq	r5, r5, r3
   3e8b8:	0045508e 	subeq	r5, r5, lr, lsl #1
   3e8bc:	e5875010 	str	r5, [r7, #16]
   3e8c0:	e3a05f8f 	mov	r5, #572	; 0x23c
   3e8c4:	e3720001 	cmn	r2, #1
   3e8c8:	00250195 	mlaeq	r5, r5, r1, r0
   3e8cc:	05902b30 	ldreq	r2, [r0, #2864]	; 0xb30
   3e8d0:	05957008 	ldreq	r7, [r5, #8]
   3e8d4:	1022e298 	mlane	r2, r8, r2, lr
   3e8d8:	10250195 	mlane	r5, r5, r1, r0
   3e8dc:	00422007 	subeq	r2, r2, r7
   3e8e0:	00822fa2 	addeq	r2, r2, r2, lsr #31
   3e8e4:	01a020c2 	asreq	r2, r2, #1
   3e8e8:	e5852004 	str	r2, [r5, #4]
   3e8ec:	e3a02f8f 	mov	r2, #572	; 0x23c
   3e8f0:	e023e396 	mla	r3, r6, r3, lr
   3e8f4:	e0220192 	mla	r2, r2, r1, r0
   3e8f8:	e37a0001 	cmn	sl, #1
   3e8fc:	e582300c 	str	r3, [r2, #12]
   3e900:	05943000 	ldreq	r3, [r4]
   3e904:	e3a05f8f 	mov	r5, #572	; 0x23c
   3e908:	05823014 	streq	r3, [r2, #20]
   3e90c:	e3a03f8f 	mov	r3, #572	; 0x23c
   3e910:	e0230193 	mla	r3, r3, r1, r0
   3e914:	1582a014 	strne	sl, [r2, #20]
   3e918:	e3790001 	cmn	r9, #1
   3e91c:	05942004 	ldreq	r2, [r4, #4]
   3e920:	15839018 	strne	r9, [r3, #24]
   3e924:	05832018 	streq	r2, [r3, #24]
   3e928:	e37c0001 	cmn	ip, #1
   3e92c:	135e0000 	cmpne	lr, #0
   3e930:	e0250195 	mla	r5, r5, r1, r0
   3e934:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   3e938:	e585801c 	str	r8, [r5, #28]
   3e93c:	e5853028 	str	r3, [r5, #40]	; 0x28
   3e940:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   3e944:	e5856020 	str	r6, [r5, #32]
   3e948:	e585402c 	str	r4, [r5, #44]	; 0x2c
   3e94c:	e5853024 	str	r3, [r5, #36]	; 0x24
   3e950:	da000050 	ble	3ea98 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x260>
   3e954:	e3a06000 	mov	r6, #0
   3e958:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3e95c:	e6efc07c 	uxtb	ip, ip
   3e960:	e1a0708e 	lsl	r7, lr, #1
   3e964:	e595900c 	ldr	r9, [r5, #12]
   3e968:	e5954004 	ldr	r4, [r5, #4]
   3e96c:	e049900e 	sub	r9, r9, lr
   3e970:	e0892006 	add	r2, r9, r6
   3e974:	e044400e 	sub	r4, r4, lr
   3e978:	e0224293 	mla	r2, r3, r2, r4
   3e97c:	e595a008 	ldr	sl, [r5, #8]
   3e980:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3e984:	e087a00a 	add	sl, r7, sl
   3e988:	e35a0000 	cmp	sl, #0
   3e98c:	e0882002 	add	r2, r8, r2
   3e990:	da00004f 	ble	3ead4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x29c>
   3e994:	e082300a 	add	r3, r2, sl
   3e998:	e4c2c001 	strb	ip, [r2], #1
   3e99c:	e1520003 	cmp	r2, r3
   3e9a0:	1afffffc 	bne	3e998 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x160>
   3e9a4:	e595900c 	ldr	r9, [r5, #12]
   3e9a8:	e595a010 	ldr	sl, [r5, #16]
   3e9ac:	e5954004 	ldr	r4, [r5, #4]
   3e9b0:	e08a2009 	add	r2, sl, r9
   3e9b4:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3e9b8:	e0822006 	add	r2, r2, r6
   3e9bc:	e044400e 	sub	r4, r4, lr
   3e9c0:	e0224293 	mla	r2, r3, r2, r4
   3e9c4:	e595b008 	ldr	fp, [r5, #8]
   3e9c8:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3e9cc:	e087b00b 	add	fp, r7, fp
   3e9d0:	e35b0000 	cmp	fp, #0
   3e9d4:	e0882002 	add	r2, r8, r2
   3e9d8:	da000009 	ble	3ea04 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1cc>
   3e9dc:	e082300b 	add	r3, r2, fp
   3e9e0:	e4c2c001 	strb	ip, [r2], #1
   3e9e4:	e1520003 	cmp	r2, r3
   3e9e8:	1afffffc 	bne	3e9e0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1a8>
   3e9ec:	e5954004 	ldr	r4, [r5, #4]
   3e9f0:	e595900c 	ldr	r9, [r5, #12]
   3e9f4:	e595a010 	ldr	sl, [r5, #16]
   3e9f8:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3e9fc:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ea00:	e044400e 	sub	r4, r4, lr
   3ea04:	e049900e 	sub	r9, r9, lr
   3ea08:	e0862004 	add	r2, r6, r4
   3ea0c:	e0222993 	mla	r2, r3, r9, r2
   3ea10:	e087a00a 	add	sl, r7, sl
   3ea14:	e35a0000 	cmp	sl, #0
   3ea18:	e0882002 	add	r2, r8, r2
   3ea1c:	da00001a 	ble	3ea8c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3ea20:	e3a04000 	mov	r4, #0
   3ea24:	e5c2c000 	strb	ip, [r2]
   3ea28:	e2844001 	add	r4, r4, #1
   3ea2c:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ea30:	e15a0004 	cmp	sl, r4
   3ea34:	e0822003 	add	r2, r2, r3
   3ea38:	1afffff9 	bne	3ea24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1ec>
   3ea3c:	e5958004 	ldr	r8, [r5, #4]
   3ea40:	e5954008 	ldr	r4, [r5, #8]
   3ea44:	e595200c 	ldr	r2, [r5, #12]
   3ea48:	e0844008 	add	r4, r4, r8
   3ea4c:	e042200e 	sub	r2, r2, lr
   3ea50:	e0844006 	add	r4, r4, r6
   3ea54:	e0244293 	mla	r4, r3, r2, r4
   3ea58:	e5958010 	ldr	r8, [r5, #16]
   3ea5c:	e5902b40 	ldr	r2, [r0, #2880]	; 0xb40
   3ea60:	e0878008 	add	r8, r7, r8
   3ea64:	e3580000 	cmp	r8, #0
   3ea68:	e0822004 	add	r2, r2, r4
   3ea6c:	c3a04000 	movgt	r4, #0
   3ea70:	da000005 	ble	3ea8c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3ea74:	e5c2c000 	strb	ip, [r2]
   3ea78:	e2844001 	add	r4, r4, #1
   3ea7c:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ea80:	e1540008 	cmp	r4, r8
   3ea84:	e0822003 	add	r2, r2, r3
   3ea88:	1afffff9 	bne	3ea74 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x23c>
   3ea8c:	e2866001 	add	r6, r6, #1
   3ea90:	e15e0006 	cmp	lr, r6
   3ea94:	caffffb2 	bgt	3e964 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x12c>
   3ea98:	e3a03f8f 	mov	r3, #572	; 0x23c
   3ea9c:	e3a02001 	mov	r2, #1
   3eaa0:	e0010193 	mul	r1, r3, r1
   3eaa4:	e7c02001 	strb	r2, [r0, r1]
   3eaa8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eaac:	e3770001 	cmn	r7, #1
   3eab0:	03a07f8f 	moveq	r7, #572	; 0x23c
   3eab4:	13a0bf8f 	movne	fp, #572	; 0x23c
   3eab8:	00270197 	mlaeq	r7, r7, r1, r0
   3eabc:	10070798 	mulne	r7, r8, r7
   3eac0:	102b019b 	mlane	fp, fp, r1, r0
   3eac4:	0590bb30 	ldreq	fp, [r0, #2864]	; 0xb30
   3eac8:	158b7008 	strne	r7, [fp, #8]
   3eacc:	0587b008 	streq	fp, [r7, #8]
   3ead0:	eaffff71 	b	3e89c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x64>
   3ead4:	e595a010 	ldr	sl, [r5, #16]
   3ead8:	eaffffca 	b	3ea08 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1d0>
   3eadc:	0004d39c 	.word	0x0004d39c

0003eae0 <DisplayFX::DisplayFX()>:
   3eae0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3eae4:	e3a02000 	mov	r2, #0
   3eae8:	e1a03000 	mov	r3, r0
   3eaec:	e3a01001 	mov	r1, #1
   3eaf0:	e3a0e00f 	mov	lr, #15
   3eaf4:	e280ceb2 	add	ip, r0, #2848	; 0xb20
   3eaf8:	e28cc00c 	add	ip, ip, #12
   3eafc:	e5c32000 	strb	r2, [r3]
   3eb00:	e583200c 	str	r2, [r3, #12]
   3eb04:	e5832004 	str	r2, [r3, #4]
   3eb08:	e5832010 	str	r2, [r3, #16]
   3eb0c:	e5832008 	str	r2, [r3, #8]
   3eb10:	e5832018 	str	r2, [r3, #24]
   3eb14:	e5832014 	str	r2, [r3, #20]
   3eb18:	e5831020 	str	r1, [r3, #32]
   3eb1c:	e583101c 	str	r1, [r3, #28]
   3eb20:	e5832024 	str	r2, [r3, #36]	; 0x24
   3eb24:	e583e028 	str	lr, [r3, #40]	; 0x28
   3eb28:	e583202c 	str	r2, [r3, #44]	; 0x2c
   3eb2c:	e5832030 	str	r2, [r3, #48]	; 0x30
   3eb30:	e5832034 	str	r2, [r3, #52]	; 0x34
   3eb34:	e5c32038 	strb	r2, [r3, #56]	; 0x38
   3eb38:	e2833f8f 	add	r3, r3, #572	; 0x23c
   3eb3c:	e153000c 	cmp	r3, ip
   3eb40:	1affffed 	bne	3eafc <DisplayFX::DisplayFX()+0x1c>
   3eb44:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
   3eb48:	e5802b30 	str	r2, [r0, #2864]	; 0xb30
   3eb4c:	e5802b34 	str	r2, [r0, #2868]	; 0xb34
   3eb50:	e5802b38 	str	r2, [r0, #2872]	; 0xb38
   3eb54:	e5802b3c 	str	r2, [r0, #2876]	; 0xb3c
   3eb58:	e5802b40 	str	r2, [r0, #2880]	; 0xb40
   3eb5c:	e5802b48 	str	r2, [r0, #2888]	; 0xb48
   3eb60:	e5c02b44 	strb	r2, [r0, #2884]	; 0xb44
   3eb64:	e5c0eb45 	strb	lr, [r0, #2885]	; 0xb45
   3eb68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003eb6c <DisplayFX::~DisplayFX()>:
   3eb6c:	e92d4070 	push	{r4, r5, r6, lr}
   3eb70:	e5904b2c 	ldr	r4, [r0, #2860]	; 0xb2c
   3eb74:	e1a05000 	mov	r5, r0
   3eb78:	e3540000 	cmp	r4, #0
   3eb7c:	0a000004 	beq	3eb94 <DisplayFX::~DisplayFX()+0x28>
   3eb80:	e1a00004 	mov	r0, r4
   3eb84:	eb000511 	bl	3ffd0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3eb88:	e1a00004 	mov	r0, r4
   3eb8c:	e3a01094 	mov	r1, #148	; 0x94
   3eb90:	ebffaf75 	bl	2a96c <operator delete(void*, unsigned int)>
   3eb94:	e1a00005 	mov	r0, r5
   3eb98:	e8bd8070 	pop	{r4, r5, r6, pc}

0003eb9c <DisplayFX::init(int, int)>:
   3eb9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3eba0:	e1a05000 	mov	r5, r0
   3eba4:	e24dd034 	sub	sp, sp, #52	; 0x34
   3eba8:	e3a00094 	mov	r0, #148	; 0x94
   3ebac:	e1a07001 	mov	r7, r1
   3ebb0:	e1a08002 	mov	r8, r2
   3ebb4:	ebffaf5e 	bl	2a934 <operator new(unsigned int)>
   3ebb8:	e3a04000 	mov	r4, #0
   3ebbc:	e1a06000 	mov	r6, r0
   3ebc0:	e1a02008 	mov	r2, r8
   3ebc4:	e1a01007 	mov	r1, r7
   3ebc8:	e58d4004 	str	r4, [sp, #4]
   3ebcc:	e58d4000 	str	r4, [sp]
   3ebd0:	e3a03008 	mov	r3, #8
   3ebd4:	eb0004ae 	bl	3fe94 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3ebd8:	e59f9128 	ldr	r9, [pc, #296]	; 3ed08 <DisplayFX::init(int, int)+0x16c>
   3ebdc:	e1a02004 	mov	r2, r4
   3ebe0:	e1a00006 	mov	r0, r6
   3ebe4:	e5856b2c 	str	r6, [r5, #2860]	; 0xb2c
   3ebe8:	ea000000 	b	3ebf0 <DisplayFX::init(int, int)+0x54>
   3ebec:	e5b92004 	ldr	r2, [r9, #4]!
   3ebf0:	e6ef1074 	uxtb	r1, r4
   3ebf4:	e2844001 	add	r4, r4, #1
   3ebf8:	eb000511 	bl	40044 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3ebfc:	e3540c01 	cmp	r4, #256	; 0x100
   3ec00:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec04:	1afffff8 	bne	3ebec <DisplayFX::init(int, int)+0x50>
   3ec08:	e3500000 	cmp	r0, #0
   3ec0c:	0a000002 	beq	3ec1c <DisplayFX::init(int, int)+0x80>
   3ec10:	eb000519 	bl	4007c <CBcmFrameBuffer::Initialize()>
   3ec14:	e2504000 	subs	r4, r0, #0
   3ec18:	1a000003 	bne	3ec2c <DisplayFX::init(int, int)+0x90>
   3ec1c:	e3a04000 	mov	r4, #0
   3ec20:	e1a00004 	mov	r0, r4
   3ec24:	e28dd034 	add	sp, sp, #52	; 0x34
   3ec28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ec2c:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec30:	eb00054c 	bl	40168 <CBcmFrameBuffer::GetDepth() const>
   3ec34:	e3500008 	cmp	r0, #8
   3ec38:	1afffff7 	bne	3ec1c <DisplayFX::init(int, int)+0x80>
   3ec3c:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec40:	eb00054a 	bl	40170 <CBcmFrameBuffer::GetBuffer() const>
   3ec44:	e5850b40 	str	r0, [r5, #2880]	; 0xb40
   3ec48:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec4c:	eb000549 	bl	40178 <CBcmFrameBuffer::GetSize() const>
   3ec50:	e5850b3c 	str	r0, [r5, #2876]	; 0xb3c
   3ec54:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec58:	eb000540 	bl	40160 <CBcmFrameBuffer::GetPitch() const>
   3ec5c:	e5850b38 	str	r0, [r5, #2872]	; 0xb38
   3ec60:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec64:	eb000535 	bl	40140 <CBcmFrameBuffer::GetWidth() const>
   3ec68:	e5850b30 	str	r0, [r5, #2864]	; 0xb30
   3ec6c:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3ec70:	eb000534 	bl	40148 <CBcmFrameBuffer::GetHeight() const>
   3ec74:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3ec78:	e5850b34 	str	r0, [r5, #2868]	; 0xb34
   3ec7c:	e3130003 	tst	r3, #3
   3ec80:	1affffe5 	bne	3ec1c <DisplayFX::init(int, int)+0x80>
   3ec84:	e5953b40 	ldr	r3, [r5, #2880]	; 0xb40
   3ec88:	e5952b3c 	ldr	r2, [r5, #2876]	; 0xb3c
   3ec8c:	e0832002 	add	r2, r3, r2
   3ec90:	e1530002 	cmp	r3, r2
   3ec94:	2a000003 	bcs	3eca8 <DisplayFX::init(int, int)+0x10c>
   3ec98:	e5d51b44 	ldrb	r1, [r5, #2884]	; 0xb44
   3ec9c:	e4c31001 	strb	r1, [r3], #1
   3eca0:	e1520003 	cmp	r2, r3
   3eca4:	1afffffb 	bne	3ec98 <DisplayFX::init(int, int)+0xfc>
   3eca8:	e3a06000 	mov	r6, #0
   3ecac:	e3e00000 	mvn	r0, #0
   3ecb0:	e3a0c002 	mov	ip, #2
   3ecb4:	e58d0020 	str	r0, [sp, #32]
   3ecb8:	e58d001c 	str	r0, [sp, #28]
   3ecbc:	e58d000c 	str	r0, [sp, #12]
   3ecc0:	e58d0008 	str	r0, [sp, #8]
   3ecc4:	e88d0180 	stm	sp, {r7, r8}
   3ecc8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   3eccc:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3ecd0:	e58d6018 	str	r6, [sp, #24]
   3ecd4:	e1a03006 	mov	r3, r6
   3ecd8:	e1a02006 	mov	r2, r6
   3ecdc:	e1a01006 	mov	r1, r6
   3ece0:	e58dc014 	str	ip, [sp, #20]
   3ece4:	e58dc010 	str	ip, [sp, #16]
   3ece8:	e1a00005 	mov	r0, r5
   3ecec:	ebfffed1 	bl	3e838 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3ecf0:	e5c56000 	strb	r6, [r5]
   3ecf4:	e5c5623c 	strb	r6, [r5, #572]	; 0x23c
   3ecf8:	e5c56478 	strb	r6, [r5, #1144]	; 0x478
   3ecfc:	e5c566b4 	strb	r6, [r5, #1716]	; 0x6b4
   3ed00:	e5c568f0 	strb	r6, [r5, #2288]	; 0x8f0
   3ed04:	eaffffc5 	b	3ec20 <DisplayFX::init(int, int)+0x84>
   3ed08:	00049554 	.word	0x00049554

0003ed0c <DisplayFX::screenClear()>:
   3ed0c:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3ed10:	e5901b3c 	ldr	r1, [r0, #2876]	; 0xb3c
   3ed14:	e0831001 	add	r1, r3, r1
   3ed18:	e1530001 	cmp	r3, r1
   3ed1c:	212fff1e 	bxcs	lr
   3ed20:	e5d02b44 	ldrb	r2, [r0, #2884]	; 0xb44
   3ed24:	e4c32001 	strb	r2, [r3], #1
   3ed28:	e1510003 	cmp	r1, r3
   3ed2c:	1afffffb 	bne	3ed20 <DisplayFX::screenClear()+0x14>
   3ed30:	e12fff1e 	bx	lr

0003ed34 <DisplayFX::screenRectClear(int, int, int, int)>:
   3ed34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ed38:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3ed3c:	e59d8020 	ldr	r8, [sp, #32]
   3ed40:	e0221294 	mla	r2, r4, r2, r1
   3ed44:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3ed48:	e3580000 	cmp	r8, #0
   3ed4c:	e0844002 	add	r4, r4, r2
   3ed50:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ed54:	e1a07003 	mov	r7, r3
   3ed58:	e1a06000 	mov	r6, r0
   3ed5c:	e3a05000 	mov	r5, #0
   3ed60:	e2809d2d 	add	r9, r0, #2880	; 0xb40
   3ed64:	e2899004 	add	r9, r9, #4
   3ed68:	e1a02007 	mov	r2, r7
   3ed6c:	e1a00004 	mov	r0, r4
   3ed70:	e1d910d0 	ldrsb	r1, [r9]
   3ed74:	ebffaa9e 	bl	297f4 <memset>
   3ed78:	e2855001 	add	r5, r5, #1
   3ed7c:	e5962b38 	ldr	r2, [r6, #2872]	; 0xb38
   3ed80:	e1580005 	cmp	r8, r5
   3ed84:	e0844002 	add	r4, r4, r2
   3ed88:	1afffff6 	bne	3ed68 <DisplayFX::screenRectClear(int, int, int, int)+0x34>
   3ed8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003ed90 <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3ed90:	e5c01b44 	strb	r1, [r0, #2884]	; 0xb44
   3ed94:	e12fff1e 	bx	lr

0003ed98 <DisplayFX::windowPut(int, int, int, int)>:
   3ed98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ed9c:	e3510004 	cmp	r1, #4
   3eda0:	e24dd014 	sub	sp, sp, #20
   3eda4:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   3eda8:	8a00006d 	bhi	3ef64 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3edac:	e3a09f8f 	mov	r9, #572	; 0x23c
   3edb0:	e0090199 	mul	r9, r9, r1
   3edb4:	e7d0c009 	ldrb	ip, [r0, r9]
   3edb8:	e0809009 	add	r9, r0, r9
   3edbc:	e35c0000 	cmp	ip, #0
   3edc0:	0a000067 	beq	3ef64 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3edc4:	e1a05001 	mov	r5, r1
   3edc8:	e5991014 	ldr	r1, [r9, #20]
   3edcc:	e1a07000 	mov	r7, r0
   3edd0:	e3510000 	cmp	r1, #0
   3edd4:	e5990008 	ldr	r0, [r9, #8]
   3edd8:	e1a06003 	mov	r6, r3
   3eddc:	e1a0a002 	mov	sl, r2
   3ede0:	d3a00000 	movle	r0, #0
   3ede4:	da000000 	ble	3edec <DisplayFX::windowPut(int, int, int, int)+0x54>
   3ede8:	eb000331 	bl	3fab4 <__aeabi_idiv>
   3edec:	e15a0000 	cmp	sl, r0
   3edf0:	aa00005b 	bge	3ef64 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3edf4:	e5991018 	ldr	r1, [r9, #24]
   3edf8:	e5990010 	ldr	r0, [r9, #16]
   3edfc:	e3510000 	cmp	r1, #0
   3ee00:	d3a00000 	movle	r0, #0
   3ee04:	da000000 	ble	3ee0c <DisplayFX::windowPut(int, int, int, int)+0x74>
   3ee08:	eb000329 	bl	3fab4 <__aeabi_idiv>
   3ee0c:	e1560000 	cmp	r6, r0
   3ee10:	aa000053 	bge	3ef64 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3ee14:	e3a02f8f 	mov	r2, #572	; 0x23c
   3ee18:	e0227592 	mla	r2, r2, r5, r7
   3ee1c:	e5928014 	ldr	r8, [r2, #20]
   3ee20:	e5923018 	ldr	r3, [r2, #24]
   3ee24:	e0010a98 	mul	r1, r8, sl
   3ee28:	e5990004 	ldr	r0, [r9, #4]
   3ee2c:	e58d3004 	str	r3, [sp, #4]
   3ee30:	e0030693 	mul	r3, r3, r6
   3ee34:	e592601c 	ldr	r6, [r2, #28]
   3ee38:	e592e028 	ldr	lr, [r2, #40]	; 0x28
   3ee3c:	e0210196 	mla	r1, r6, r1, r0
   3ee40:	e592002c 	ldr	r0, [r2, #44]	; 0x2c
   3ee44:	e592c020 	ldr	ip, [r2, #32]
   3ee48:	e592900c 	ldr	r9, [r2, #12]
   3ee4c:	e590b00c 	ldr	fp, [r0, #12]
   3ee50:	e5902010 	ldr	r2, [r0, #16]
   3ee54:	e37e0001 	cmn	lr, #1
   3ee58:	e02b249b 	mla	fp, fp, r4, r2
   3ee5c:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3ee60:	01d2e0d5 	ldrsbeq	lr, [r2, #5]
   3ee64:	e3a02f8f 	mov	r2, #572	; 0x23c
   3ee68:	e0227592 	mla	r2, r2, r5, r7
   3ee6c:	e029939c 	mla	r9, ip, r3, r9
   3ee70:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   3ee74:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3ee78:	e3740001 	cmn	r4, #1
   3ee7c:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3ee80:	e0211993 	mla	r1, r3, r9, r1
   3ee84:	01d240d4 	ldrsbeq	r4, [r2, #4]
   3ee88:	e59d2004 	ldr	r2, [sp, #4]
   3ee8c:	e5979b40 	ldr	r9, [r7, #2880]	; 0xb40
   3ee90:	e3520000 	cmp	r2, #0
   3ee94:	e58dc000 	str	ip, [sp]
   3ee98:	e0899001 	add	r9, r9, r1
   3ee9c:	da000030 	ble	3ef64 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3eea0:	e3a02f8f 	mov	r2, #572	; 0x23c
   3eea4:	e3a01000 	mov	r1, #0
   3eea8:	e0227592 	mla	r2, r2, r5, r7
   3eeac:	e58d1008 	str	r1, [sp, #8]
   3eeb0:	e58d200c 	str	r2, [sp, #12]
   3eeb4:	e6ef4074 	uxtb	r4, r4
   3eeb8:	e6efe07e 	uxtb	lr, lr
   3eebc:	e59d2000 	ldr	r2, [sp]
   3eec0:	e3520000 	cmp	r2, #0
   3eec4:	da00001c 	ble	3ef3c <DisplayFX::windowPut(int, int, int, int)+0x1a4>
   3eec8:	e3a0a000 	mov	sl, #0
   3eecc:	e3580000 	cmp	r8, #0
   3eed0:	c1a0000b 	movgt	r0, fp
   3eed4:	c1a03009 	movgt	r3, r9
   3eed8:	c3a01080 	movgt	r1, #128	; 0x80
   3eedc:	c3a05000 	movgt	r5, #0
   3eee0:	da000010 	ble	3ef28 <DisplayFX::windowPut(int, int, int, int)+0x190>
   3eee4:	e3560000 	cmp	r6, #0
   3eee8:	da000007 	ble	3ef0c <DisplayFX::windowPut(int, int, int, int)+0x174>
   3eeec:	e083c006 	add	ip, r3, r6
   3eef0:	e5d02000 	ldrb	r2, [r0]
   3eef4:	e1120001 	tst	r2, r1
   3eef8:	11a0200e 	movne	r2, lr
   3eefc:	01a02004 	moveq	r2, r4
   3ef00:	e4c32001 	strb	r2, [r3], #1
   3ef04:	e153000c 	cmp	r3, ip
   3ef08:	1afffff8 	bne	3eef0 <DisplayFX::windowPut(int, int, int, int)+0x158>
   3ef0c:	e1b010c1 	asrs	r1, r1, #1
   3ef10:	e2855001 	add	r5, r5, #1
   3ef14:	03a01080 	moveq	r1, #128	; 0x80
   3ef18:	02800001 	addeq	r0, r0, #1
   3ef1c:	e1580005 	cmp	r8, r5
   3ef20:	1affffef 	bne	3eee4 <DisplayFX::windowPut(int, int, int, int)+0x14c>
   3ef24:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3ef28:	e59d2000 	ldr	r2, [sp]
   3ef2c:	e28aa001 	add	sl, sl, #1
   3ef30:	e152000a 	cmp	r2, sl
   3ef34:	e0899003 	add	r9, r9, r3
   3ef38:	1affffe3 	bne	3eecc <DisplayFX::windowPut(int, int, int, int)+0x134>
   3ef3c:	e59d200c 	ldr	r2, [sp, #12]
   3ef40:	e59d1008 	ldr	r1, [sp, #8]
   3ef44:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   3ef48:	e59d0004 	ldr	r0, [sp, #4]
   3ef4c:	e2811001 	add	r1, r1, #1
   3ef50:	e5922008 	ldr	r2, [r2, #8]
   3ef54:	e1500001 	cmp	r0, r1
   3ef58:	e58d1008 	str	r1, [sp, #8]
   3ef5c:	e08bb002 	add	fp, fp, r2
   3ef60:	1affffd5 	bne	3eebc <DisplayFX::windowPut(int, int, int, int)+0x124>
   3ef64:	e28dd014 	add	sp, sp, #20
   3ef68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003ef6c <DisplayFX::windowPut(int, int, int, char const*)>:
   3ef6c:	e3510004 	cmp	r1, #4
   3ef70:	812fff1e 	bxhi	lr
   3ef74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ef78:	e24dd00c 	sub	sp, sp, #12
   3ef7c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3ef80:	e1dc50d0 	ldrsb	r5, [ip]
   3ef84:	e3550000 	cmp	r5, #0
   3ef88:	0a000019 	beq	3eff4 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3ef8c:	e3a06f8f 	mov	r6, #572	; 0x23c
   3ef90:	e1a0a003 	mov	sl, r3
   3ef94:	e1a09000 	mov	r9, r0
   3ef98:	e1a07001 	mov	r7, r1
   3ef9c:	e1a0400c 	mov	r4, ip
   3efa0:	e0260196 	mla	r6, r6, r1, r0
   3efa4:	e042800c 	sub	r8, r2, ip
   3efa8:	ea000008 	b	3efd0 <DisplayFX::windowPut(int, int, int, char const*)+0x64>
   3efac:	e58d5000 	str	r5, [sp]
   3efb0:	e1a0200b 	mov	r2, fp
   3efb4:	e1a0300a 	mov	r3, sl
   3efb8:	e1a01007 	mov	r1, r7
   3efbc:	e1a00009 	mov	r0, r9
   3efc0:	ebffff74 	bl	3ed98 <DisplayFX::windowPut(int, int, int, int)>
   3efc4:	e1f450d1 	ldrsb	r5, [r4, #1]!
   3efc8:	e3550000 	cmp	r5, #0
   3efcc:	0a000008 	beq	3eff4 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3efd0:	e5961014 	ldr	r1, [r6, #20]
   3efd4:	e5960008 	ldr	r0, [r6, #8]
   3efd8:	e3510000 	cmp	r1, #0
   3efdc:	e084b008 	add	fp, r4, r8
   3efe0:	d3a00000 	movle	r0, #0
   3efe4:	da000000 	ble	3efec <DisplayFX::windowPut(int, int, int, char const*)+0x80>
   3efe8:	eb0002b1 	bl	3fab4 <__aeabi_idiv>
   3efec:	e15b0000 	cmp	fp, r0
   3eff0:	baffffed 	blt	3efac <DisplayFX::windowPut(int, int, int, char const*)+0x40>
   3eff4:	e28dd00c 	add	sp, sp, #12
   3eff8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003effc <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3effc:	e3510004 	cmp	r1, #4
   3f000:	93a03f8f 	movls	r3, #572	; 0x23c
   3f004:	90210193 	mlals	r1, r3, r1, r0
   3f008:	95812028 	strls	r2, [r1, #40]	; 0x28
   3f00c:	e12fff1e 	bx	lr

0003f010 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3f010:	e3510004 	cmp	r1, #4
   3f014:	93a03f8f 	movls	r3, #572	; 0x23c
   3f018:	90210193 	mlals	r1, r3, r1, r0
   3f01c:	95812024 	strls	r2, [r1, #36]	; 0x24
   3f020:	e12fff1e 	bx	lr

0003f024 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3f024:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3f028:	e3a05f8f 	mov	r5, #572	; 0x23c
   3f02c:	e0250195 	mla	r5, r5, r1, r0
   3f030:	e595400c 	ldr	r4, [r5, #12]
   3f034:	e595c01c 	ldr	ip, [r5, #28]
   3f038:	e595e020 	ldr	lr, [r5, #32]
   3f03c:	e5956004 	ldr	r6, [r5, #4]
   3f040:	e023439e 	mla	r3, lr, r3, r4
   3f044:	e026629c 	mla	r6, ip, r2, r6
   3f048:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3f04c:	e5955028 	ldr	r5, [r5, #40]	; 0x28
   3f050:	e0236394 	mla	r3, r4, r3, r6
   3f054:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3f058:	e3750001 	cmn	r5, #1
   3f05c:	e0866003 	add	r6, r6, r3
   3f060:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3f064:	01d350d5 	ldrsbeq	r5, [r3, #5]
   3f068:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f06c:	e1dd21d8 	ldrsb	r2, [sp, #24]
   3f070:	e0230193 	mla	r3, r3, r1, r0
   3f074:	e3720001 	cmn	r2, #1
   3f078:	11a05002 	movne	r5, r2
   3f07c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3f080:	e59d7014 	ldr	r7, [sp, #20]
   3f084:	e3730001 	cmn	r3, #1
   3f088:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3f08c:	01d330d4 	ldrsbeq	r3, [r3, #4]
   3f090:	e3570000 	cmp	r7, #0
   3f094:	16ef5075 	uxtbne	r5, r5
   3f098:	06ef5073 	uxtbeq	r5, r3
   3f09c:	e21c7003 	ands	r7, ip, #3
   3f0a0:	0a000014 	beq	3f0f8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xd4>
   3f0a4:	e35e0000 	cmp	lr, #0
   3f0a8:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3f0ac:	e3a0ef8f 	mov	lr, #572	; 0x23c
   3f0b0:	e3a07000 	mov	r7, #0
   3f0b4:	e02e019e 	mla	lr, lr, r1, r0
   3f0b8:	e35c0000 	cmp	ip, #0
   3f0bc:	e02c6497 	mla	ip, r7, r4, r6
   3f0c0:	c1a0300c 	movgt	r3, ip
   3f0c4:	da000004 	ble	3f0dc <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xb8>
   3f0c8:	e4c35001 	strb	r5, [r3], #1
   3f0cc:	e59e101c 	ldr	r1, [lr, #28]
   3f0d0:	e043200c 	sub	r2, r3, ip
   3f0d4:	e1510002 	cmp	r1, r2
   3f0d8:	cafffffa 	bgt	3f0c8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xa4>
   3f0dc:	e59e3020 	ldr	r3, [lr, #32]
   3f0e0:	e2877001 	add	r7, r7, #1
   3f0e4:	e1530007 	cmp	r3, r7
   3f0e8:	da00001a 	ble	3f158 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x134>
   3f0ec:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3f0f0:	e59ec01c 	ldr	ip, [lr, #28]
   3f0f4:	eaffffef 	b	3f0b8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x94>
   3f0f8:	e1a03805 	lsl	r3, r5, #16
   3f0fc:	e0833c05 	add	r3, r3, r5, lsl #24
   3f100:	e0833405 	add	r3, r3, r5, lsl #8
   3f104:	e35e0000 	cmp	lr, #0
   3f108:	e0835005 	add	r5, r3, r5
   3f10c:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3f110:	e28c1003 	add	r1, ip, #3
   3f114:	e35c0000 	cmp	ip, #0
   3f118:	b1a0c001 	movlt	ip, r1
   3f11c:	e1a00007 	mov	r0, r7
   3f120:	e1a0114c 	asr	r1, ip, #2
   3f124:	e3510000 	cmp	r1, #0
   3f128:	e1a02006 	mov	r2, r6
   3f12c:	c1a03007 	movgt	r3, r7
   3f130:	da000003 	ble	3f144 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x120>
   3f134:	e2833001 	add	r3, r3, #1
   3f138:	e1530001 	cmp	r3, r1
   3f13c:	e4825004 	str	r5, [r2], #4
   3f140:	1afffffb 	bne	3f134 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x110>
   3f144:	e2800001 	add	r0, r0, #1
   3f148:	e150000e 	cmp	r0, lr
   3f14c:	e0866004 	add	r6, r6, r4
   3f150:	1afffff3 	bne	3f124 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x100>
   3f154:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3f158:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003f15c <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>:
   3f15c:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f160:	e92d4030 	push	{r4, r5, lr}
   3f164:	e3a04001 	mov	r4, #1
   3f168:	e0210193 	mla	r1, r3, r1, r0
   3f16c:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3f170:	e5915004 	ldr	r5, [r1, #4]
   3f174:	e591300c 	ldr	r3, [r1, #12]
   3f178:	e590eb40 	ldr	lr, [r0, #2880]	; 0xb40
   3f17c:	e0235c93 	mla	r3, r3, ip, r5
   3f180:	e5900b30 	ldr	r0, [r0, #2864]	; 0xb30
   3f184:	e5915008 	ldr	r5, [r1, #8]
   3f188:	e5911010 	ldr	r1, [r1, #16]
   3f18c:	e08e3003 	add	r3, lr, r3
   3f190:	e5823010 	str	r3, [r2, #16]
   3f194:	e582e000 	str	lr, [r2]
   3f198:	e5820004 	str	r0, [r2, #4]
   3f19c:	e5820008 	str	r0, [r2, #8]
   3f1a0:	e582c00c 	str	ip, [r2, #12]
   3f1a4:	e5825014 	str	r5, [r2, #20]
   3f1a8:	e5821018 	str	r1, [r2, #24]
   3f1ac:	e582401c 	str	r4, [r2, #28]
   3f1b0:	e8bd8030 	pop	{r4, r5, pc}

0003f1b4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3f1b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1b8:	e24dd00c 	sub	sp, sp, #12
   3f1bc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3f1c0:	e3510004 	cmp	r1, #4
   3f1c4:	e58dc004 	str	ip, [sp, #4]
   3f1c8:	e59de038 	ldr	lr, [sp, #56]	; 0x38
   3f1cc:	8a000002 	bhi	3f1dc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x28>
   3f1d0:	e28dd00c 	add	sp, sp, #12
   3f1d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1d8:	eafffd96 	b	3e838 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3f1dc:	e28dd00c 	add	sp, sp, #12
   3f1e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003f1e4 <DisplayFX::windowClear(int)>:
   3f1e4:	e3510004 	cmp	r1, #4
   3f1e8:	812fff1e 	bxhi	lr
   3f1ec:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f1f0:	e0010193 	mul	r1, r3, r1
   3f1f4:	e7d03001 	ldrb	r3, [r0, r1]
   3f1f8:	e0801001 	add	r1, r0, r1
   3f1fc:	e3530000 	cmp	r3, #0
   3f200:	012fff1e 	bxeq	lr
   3f204:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f208:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3f20c:	e591400c 	ldr	r4, [r1, #12]
   3f210:	e5913004 	ldr	r3, [r1, #4]
   3f214:	e5917010 	ldr	r7, [r1, #16]
   3f218:	e0233492 	mla	r3, r2, r4, r3
   3f21c:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3f220:	e3570000 	cmp	r7, #0
   3f224:	e0844003 	add	r4, r4, r3
   3f228:	e5919008 	ldr	r9, [r1, #8]
   3f22c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f230:	e1a06000 	mov	r6, r0
   3f234:	e3a05000 	mov	r5, #0
   3f238:	e2808d2d 	add	r8, r0, #2880	; 0xb40
   3f23c:	e2888004 	add	r8, r8, #4
   3f240:	e1a00004 	mov	r0, r4
   3f244:	e1a02009 	mov	r2, r9
   3f248:	e1d810d0 	ldrsb	r1, [r8]
   3f24c:	ebffa968 	bl	297f4 <memset>
   3f250:	e2855001 	add	r5, r5, #1
   3f254:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3f258:	e1570005 	cmp	r7, r5
   3f25c:	e0844003 	add	r4, r4, r3
   3f260:	1afffff6 	bne	3f240 <DisplayFX::windowClear(int)+0x5c>
   3f264:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003f268 <DisplayFX::windowGetPFB(int, int, int)>:
   3f268:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3f26c:	e021019c 	mla	r1, ip, r1, r0
   3f270:	e92d4030 	push	{r4, r5, lr}
   3f274:	e591c018 	ldr	ip, [r1, #24]
   3f278:	e591e014 	ldr	lr, [r1, #20]
   3f27c:	e003039c 	mul	r3, ip, r3
   3f280:	e002029e 	mul	r2, lr, r2
   3f284:	e591c00c 	ldr	ip, [r1, #12]
   3f288:	e5915020 	ldr	r5, [r1, #32]
   3f28c:	e591401c 	ldr	r4, [r1, #28]
   3f290:	e591e004 	ldr	lr, [r1, #4]
   3f294:	e023c395 	mla	r3, r5, r3, ip
   3f298:	e022e294 	mla	r2, r4, r2, lr
   3f29c:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3f2a0:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3f2a4:	e023239c 	mla	r3, ip, r3, r2
   3f2a8:	e0800003 	add	r0, r0, r3
   3f2ac:	e8bd8030 	pop	{r4, r5, pc}

0003f2b0 <DisplayFX::screenGetPFBXY(int, int)>:
   3f2b0:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3f2b4:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3f2b8:	e0221293 	mla	r2, r3, r2, r1
   3f2bc:	e0800002 	add	r0, r0, r2
   3f2c0:	e12fff1e 	bx	lr

0003f2c4 <DisplayFX::windowGetPFBXY(int, int, int)>:
   3f2c4:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3f2c8:	e021019c 	mla	r1, ip, r1, r0
   3f2cc:	e92d4010 	push	{r4, lr}
   3f2d0:	e591c020 	ldr	ip, [r1, #32]
   3f2d4:	e591400c 	ldr	r4, [r1, #12]
   3f2d8:	e591e01c 	ldr	lr, [r1, #28]
   3f2dc:	e5911004 	ldr	r1, [r1, #4]
   3f2e0:	e023439c 	mla	r3, ip, r3, r4
   3f2e4:	e022129e 	mla	r2, lr, r2, r1
   3f2e8:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3f2ec:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3f2f0:	e023239c 	mla	r3, ip, r3, r2
   3f2f4:	e0800003 	add	r0, r0, r3
   3f2f8:	e8bd8010 	pop	{r4, pc}

0003f2fc <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3f2fc:	e3a02f8f 	mov	r2, #572	; 0x23c
   3f300:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3f304:	e0200392 	mla	r0, r2, r3, r0
   3f308:	e5801028 	str	r1, [r0, #40]	; 0x28
   3f30c:	e12fff1e 	bx	lr

0003f310 <DisplayFX::consoleGetWidth()>:
   3f310:	e3a02f8f 	mov	r2, #572	; 0x23c
   3f314:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3f318:	e0200392 	mla	r0, r2, r3, r0
   3f31c:	e5901014 	ldr	r1, [r0, #20]
   3f320:	e5900008 	ldr	r0, [r0, #8]
   3f324:	e3510000 	cmp	r1, #0
   3f328:	da000002 	ble	3f338 <DisplayFX::consoleGetWidth()+0x28>
   3f32c:	e92d4010 	push	{r4, lr}
   3f330:	eb0001df 	bl	3fab4 <__aeabi_idiv>
   3f334:	e8bd8010 	pop	{r4, pc}
   3f338:	e3a00000 	mov	r0, #0
   3f33c:	e12fff1e 	bx	lr

0003f340 <DisplayFX::consoleSetWindow(int)>:
   3f340:	e3510004 	cmp	r1, #4
   3f344:	95801b48 	strls	r1, [r0, #2888]	; 0xb48
   3f348:	e12fff1e 	bx	lr

0003f34c <DisplayFX::cursorCheck()>:
   3f34c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3f350:	e3a04f8f 	mov	r4, #572	; 0x23c
   3f354:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3f358:	e1a05000 	mov	r5, r0
   3f35c:	e0240694 	mla	r4, r4, r6, r0
   3f360:	e5941014 	ldr	r1, [r4, #20]
   3f364:	e5940008 	ldr	r0, [r4, #8]
   3f368:	e3510000 	cmp	r1, #0
   3f36c:	e5947034 	ldr	r7, [r4, #52]	; 0x34
   3f370:	d3a00000 	movle	r0, #0
   3f374:	da000000 	ble	3f37c <DisplayFX::cursorCheck()+0x30>
   3f378:	eb0001cd 	bl	3fab4 <__aeabi_idiv>
   3f37c:	e1570000 	cmp	r7, r0
   3f380:	ba000006 	blt	3f3a0 <DisplayFX::cursorCheck()+0x54>
   3f384:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f388:	e3a01000 	mov	r1, #0
   3f38c:	e0235693 	mla	r3, r3, r6, r5
   3f390:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   3f394:	e5831034 	str	r1, [r3, #52]	; 0x34
   3f398:	e2822001 	add	r2, r2, #1
   3f39c:	e5832030 	str	r2, [r3, #48]	; 0x30
   3f3a0:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f3a4:	e0235693 	mla	r3, r3, r6, r5
   3f3a8:	e5941018 	ldr	r1, [r4, #24]
   3f3ac:	e5940010 	ldr	r0, [r4, #16]
   3f3b0:	e3510000 	cmp	r1, #0
   3f3b4:	e5937030 	ldr	r7, [r3, #48]	; 0x30
   3f3b8:	d3a00000 	movle	r0, #0
   3f3bc:	da000000 	ble	3f3c4 <DisplayFX::cursorCheck()+0x78>
   3f3c0:	eb0001bb 	bl	3fab4 <__aeabi_idiv>
   3f3c4:	e1570000 	cmp	r7, r0
   3f3c8:	b8bd81f0 	poplt	{r4, r5, r6, r7, r8, pc}
   3f3cc:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f3d0:	e0235693 	mla	r3, r3, r6, r5
   3f3d4:	e2477001 	sub	r7, r7, #1
   3f3d8:	e3560004 	cmp	r6, #4
   3f3dc:	e5837030 	str	r7, [r3, #48]	; 0x30
   3f3e0:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3f3e4:	e1a01006 	mov	r1, r6
   3f3e8:	e1a00005 	mov	r0, r5
   3f3ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3f3f0:	e3a02001 	mov	r2, #1
   3f3f4:	eafffcb5 	b	3e6d0 <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003f3f8 <DisplayFX::consolePut(int)>:
   3f3f8:	e92d4070 	push	{r4, r5, r6, lr}
   3f3fc:	e2413008 	sub	r3, r1, #8
   3f400:	e24dd008 	sub	sp, sp, #8
   3f404:	e1a04000 	mov	r4, r0
   3f408:	e3530005 	cmp	r3, #5
   3f40c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3f410:	ea000043 	b	3f524 <DisplayFX::consolePut(int)+0x12c>
   3f414:	0003f4e8 	.word	0x0003f4e8
   3f418:	0003f474 	.word	0x0003f474
   3f41c:	0003f448 	.word	0x0003f448
   3f420:	0003f524 	.word	0x0003f524
   3f424:	0003f524 	.word	0x0003f524
   3f428:	0003f42c 	.word	0x0003f42c
   3f42c:	e3a01f8f 	mov	r1, #572	; 0x23c
   3f430:	e3a02000 	mov	r2, #0
   3f434:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3f438:	e0240391 	mla	r4, r1, r3, r0
   3f43c:	e5842034 	str	r2, [r4, #52]	; 0x34
   3f440:	e28dd008 	add	sp, sp, #8
   3f444:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f448:	e3a01f8f 	mov	r1, #572	; 0x23c
   3f44c:	e3a02000 	mov	r2, #0
   3f450:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3f454:	e0240391 	mla	r4, r1, r3, r0
   3f458:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3f45c:	e5842034 	str	r2, [r4, #52]	; 0x34
   3f460:	e2833001 	add	r3, r3, #1
   3f464:	e5843030 	str	r3, [r4, #48]	; 0x30
   3f468:	e28dd008 	add	sp, sp, #8
   3f46c:	e8bd4070 	pop	{r4, r5, r6, lr}
   3f470:	eaffffb5 	b	3f34c <DisplayFX::cursorCheck()>
   3f474:	e3a02f8f 	mov	r2, #572	; 0x23c
   3f478:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3f47c:	e0220692 	mla	r2, r2, r6, r0
   3f480:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   3f484:	e5921014 	ldr	r1, [r2, #20]
   3f488:	e283c001 	add	ip, r3, #1
   3f48c:	e1a05fcc 	asr	r5, ip, #31
   3f490:	e1a00ea5 	lsr	r0, r5, #29
   3f494:	e08c5000 	add	r5, ip, r0
   3f498:	e2055007 	and	r5, r5, #7
   3f49c:	e0455000 	sub	r5, r5, r0
   3f4a0:	e2833009 	add	r3, r3, #9
   3f4a4:	e3510000 	cmp	r1, #0
   3f4a8:	e5920008 	ldr	r0, [r2, #8]
   3f4ac:	e582c034 	str	ip, [r2, #52]	; 0x34
   3f4b0:	e0435005 	sub	r5, r3, r5
   3f4b4:	d3e00000 	mvnle	r0, #0
   3f4b8:	da000001 	ble	3f4c4 <DisplayFX::consolePut(int)+0xcc>
   3f4bc:	eb00017c 	bl	3fab4 <__aeabi_idiv>
   3f4c0:	e2400001 	sub	r0, r0, #1
   3f4c4:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f4c8:	e1550000 	cmp	r5, r0
   3f4cc:	a1a05000 	movge	r5, r0
   3f4d0:	e1a00004 	mov	r0, r4
   3f4d4:	e0264693 	mla	r6, r3, r6, r4
   3f4d8:	e5865034 	str	r5, [r6, #52]	; 0x34
   3f4dc:	e28dd008 	add	sp, sp, #8
   3f4e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   3f4e4:	eaffff98 	b	3f34c <DisplayFX::cursorCheck()>
   3f4e8:	e3a00f8f 	mov	r0, #572	; 0x23c
   3f4ec:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3f4f0:	e0204190 	mla	r0, r0, r1, r4
   3f4f4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3f4f8:	e3520000 	cmp	r2, #0
   3f4fc:	daffffcf 	ble	3f440 <DisplayFX::consolePut(int)+0x48>
   3f500:	e3a0c020 	mov	ip, #32
   3f504:	e2422001 	sub	r2, r2, #1
   3f508:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3f50c:	e5802034 	str	r2, [r0, #52]	; 0x34
   3f510:	e1a00004 	mov	r0, r4
   3f514:	e58dc000 	str	ip, [sp]
   3f518:	ebfffe1e 	bl	3ed98 <DisplayFX::windowPut(int, int, int, int)>
   3f51c:	e28dd008 	add	sp, sp, #8
   3f520:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f524:	e3a05f8f 	mov	r5, #572	; 0x23c
   3f528:	e1a0c001 	mov	ip, r1
   3f52c:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3f530:	e0220195 	mla	r2, r5, r1, r0
   3f534:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3f538:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3f53c:	e58dc000 	str	ip, [sp]
   3f540:	ebfffe14 	bl	3ed98 <DisplayFX::windowPut(int, int, int, int)>
   3f544:	e1a00004 	mov	r0, r4
   3f548:	e5943b48 	ldr	r3, [r4, #2888]	; 0xb48
   3f54c:	e0244395 	mla	r4, r5, r3, r4
   3f550:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3f554:	e2833001 	add	r3, r3, #1
   3f558:	e5843034 	str	r3, [r4, #52]	; 0x34
   3f55c:	e28dd008 	add	sp, sp, #8
   3f560:	e8bd4070 	pop	{r4, r5, r6, lr}
   3f564:	eaffff78 	b	3f34c <DisplayFX::cursorCheck()>

0003f568 <DisplayFX::consolePut(char const*)>:
   3f568:	e92d4070 	push	{r4, r5, r6, lr}
   3f56c:	e1a04001 	mov	r4, r1
   3f570:	e1d110d0 	ldrsb	r1, [r1]
   3f574:	e3510000 	cmp	r1, #0
   3f578:	08bd8070 	popeq	{r4, r5, r6, pc}
   3f57c:	e1a05000 	mov	r5, r0
   3f580:	e1a00005 	mov	r0, r5
   3f584:	ebffff9b 	bl	3f3f8 <DisplayFX::consolePut(int)>
   3f588:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3f58c:	e3510000 	cmp	r1, #0
   3f590:	1afffffa 	bne	3f580 <DisplayFX::consolePut(char const*)+0x18>
   3f594:	e8bd8070 	pop	{r4, r5, r6, pc}

0003f598 <DisplayFX::consolePut(char const*, unsigned int)>:
   3f598:	e92d4070 	push	{r4, r5, r6, lr}
   3f59c:	e2525000 	subs	r5, r2, #0
   3f5a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   3f5a4:	e1a06000 	mov	r6, r0
   3f5a8:	e1a04001 	mov	r4, r1
   3f5ac:	e0815005 	add	r5, r1, r5
   3f5b0:	e0d410d1 	ldrsb	r1, [r4], #1
   3f5b4:	e1a00006 	mov	r0, r6
   3f5b8:	ebffff8e 	bl	3f3f8 <DisplayFX::consolePut(int)>
   3f5bc:	e1540005 	cmp	r4, r5
   3f5c0:	1afffffa 	bne	3f5b0 <DisplayFX::consolePut(char const*, unsigned int)+0x18>
   3f5c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0003f5c8 <DisplayFX::windowScroll(int, int)>:
   3f5c8:	e16f3f12 	clz	r3, r2
   3f5cc:	e1a032a3 	lsr	r3, r3, #5
   3f5d0:	e3510004 	cmp	r1, #4
   3f5d4:	83833001 	orrhi	r3, r3, #1
   3f5d8:	e3530000 	cmp	r3, #0
   3f5dc:	112fff1e 	bxne	lr
   3f5e0:	eafffc3a 	b	3e6d0 <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003f5e4 <DisplayFX::drawHorizontal(int, int, int, int)>:
   3f5e4:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3f5e8:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3f5ec:	e022129c 	mla	r2, ip, r2, r1
   3f5f0:	e3530000 	cmp	r3, #0
   3f5f4:	e0802002 	add	r2, r0, r2
   3f5f8:	d12fff1e 	bxle	lr
   3f5fc:	e5dd1000 	ldrb	r1, [sp]
   3f600:	e0823003 	add	r3, r2, r3
   3f604:	e4c21001 	strb	r1, [r2], #1
   3f608:	e1530002 	cmp	r3, r2
   3f60c:	1afffffc 	bne	3f604 <DisplayFX::drawHorizontal(int, int, int, int)+0x20>
   3f610:	e12fff1e 	bx	lr

0003f614 <DisplayFX::drawVertical(int, int, int, int)>:
   3f614:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3f618:	e590eb38 	ldr	lr, [r0, #2872]	; 0xb38
   3f61c:	e590cb40 	ldr	ip, [r0, #2880]	; 0xb40
   3f620:	e022129e 	mla	r2, lr, r2, r1
   3f624:	e3530000 	cmp	r3, #0
   3f628:	e08c2002 	add	r2, ip, r2
   3f62c:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
   3f630:	e3a01000 	mov	r1, #0
   3f634:	e5dde004 	ldrb	lr, [sp, #4]
   3f638:	e5c2e000 	strb	lr, [r2]
   3f63c:	e2811001 	add	r1, r1, #1
   3f640:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3f644:	e1530001 	cmp	r3, r1
   3f648:	e082200c 	add	r2, r2, ip
   3f64c:	1afffff9 	bne	3f638 <DisplayFX::drawVertical(int, int, int, int)+0x24>
   3f650:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003f654 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>:
   3f654:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f658:	e3510004 	cmp	r1, #4
   3f65c:	e59d4020 	ldr	r4, [sp, #32]
   3f660:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f664:	e3a0af8f 	mov	sl, #572	; 0x23c
   3f668:	e00a019a 	mul	sl, sl, r1
   3f66c:	e080800a 	add	r8, r0, sl
   3f670:	e1a06001 	mov	r6, r1
   3f674:	e5981014 	ldr	r1, [r8, #20]
   3f678:	e1a05000 	mov	r5, r0
   3f67c:	e3510000 	cmp	r1, #0
   3f680:	e5980008 	ldr	r0, [r8, #8]
   3f684:	e1a07003 	mov	r7, r3
   3f688:	e1a09002 	mov	r9, r2
   3f68c:	d3a00000 	movle	r0, #0
   3f690:	da000000 	ble	3f698 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x44>
   3f694:	eb000106 	bl	3fab4 <__aeabi_idiv>
   3f698:	e1590000 	cmp	r9, r0
   3f69c:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f6a0:	e5981018 	ldr	r1, [r8, #24]
   3f6a4:	e5980010 	ldr	r0, [r8, #16]
   3f6a8:	e3510000 	cmp	r1, #0
   3f6ac:	d3a00000 	movle	r0, #0
   3f6b0:	da000000 	ble	3f6b8 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x64>
   3f6b4:	eb0000fe 	bl	3fab4 <__aeabi_idiv>
   3f6b8:	e1570000 	cmp	r7, r0
   3f6bc:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f6c0:	e7d5300a 	ldrb	r3, [r5, sl]
   3f6c4:	e3530000 	cmp	r3, #0
   3f6c8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f6cc:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3f6d0:	e02c569c 	mla	ip, ip, r6, r5
   3f6d4:	e59c1014 	ldr	r1, [ip, #20]
   3f6d8:	e59c3018 	ldr	r3, [ip, #24]
   3f6dc:	e0010991 	mul	r1, r1, r9
   3f6e0:	e0020793 	mul	r2, r3, r7
   3f6e4:	e598e004 	ldr	lr, [r8, #4]
   3f6e8:	e59c601c 	ldr	r6, [ip, #28]
   3f6ec:	e59c0020 	ldr	r0, [ip, #32]
   3f6f0:	e021e196 	mla	r1, r6, r1, lr
   3f6f4:	e59ce00c 	ldr	lr, [ip, #12]
   3f6f8:	e3530000 	cmp	r3, #0
   3f6fc:	e022e290 	mla	r2, r0, r2, lr
   3f700:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3f704:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3f708:	e0221293 	mla	r2, r3, r2, r1
   3f70c:	e0866002 	add	r6, r6, r2
   3f710:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f714:	e3a08000 	mov	r8, #0
   3f718:	e3500000 	cmp	r0, #0
   3f71c:	da00001a 	ble	3f78c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x138>
   3f720:	e3a07000 	mov	r7, #0
   3f724:	e59c2014 	ldr	r2, [ip, #20]
   3f728:	e3520000 	cmp	r2, #0
   3f72c:	da000011 	ble	3f778 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x124>
   3f730:	e1a02006 	mov	r2, r6
   3f734:	e3a0e000 	mov	lr, #0
   3f738:	e59c301c 	ldr	r3, [ip, #28]
   3f73c:	e3530000 	cmp	r3, #0
   3f740:	da000007 	ble	3f764 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x110>
   3f744:	e1a03004 	mov	r3, r4
   3f748:	e4d21001 	ldrb	r1, [r2], #1
   3f74c:	e4c31001 	strb	r1, [r3], #1
   3f750:	e59c001c 	ldr	r0, [ip, #28]
   3f754:	e0431004 	sub	r1, r3, r4
   3f758:	e1500001 	cmp	r0, r1
   3f75c:	cafffff9 	bgt	3f748 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xf4>
   3f760:	e1a04003 	mov	r4, r3
   3f764:	e59c3014 	ldr	r3, [ip, #20]
   3f768:	e28ee001 	add	lr, lr, #1
   3f76c:	e153000e 	cmp	r3, lr
   3f770:	cafffff0 	bgt	3f738 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xe4>
   3f774:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3f778:	e59c2020 	ldr	r2, [ip, #32]
   3f77c:	e2877001 	add	r7, r7, #1
   3f780:	e1520007 	cmp	r2, r7
   3f784:	e0866003 	add	r6, r6, r3
   3f788:	caffffe5 	bgt	3f724 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xd0>
   3f78c:	e59c2018 	ldr	r2, [ip, #24]
   3f790:	e2888001 	add	r8, r8, #1
   3f794:	e1520008 	cmp	r2, r8
   3f798:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f79c:	e59c0020 	ldr	r0, [ip, #32]
   3f7a0:	eaffffdc 	b	3f718 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xc4>

0003f7a4 <DisplayFX::cursorRestore()>:
   3f7a4:	e3a03f8f 	mov	r3, #572	; 0x23c
   3f7a8:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3f7ac:	e92d4010 	push	{r4, lr}
   3f7b0:	e0030193 	mul	r3, r3, r1
   3f7b4:	e7d02003 	ldrb	r2, [r0, r3]
   3f7b8:	e24dd008 	sub	sp, sp, #8
   3f7bc:	e3520000 	cmp	r2, #0
   3f7c0:	e0804003 	add	r4, r0, r3
   3f7c4:	0a000005 	beq	3f7e0 <DisplayFX::cursorRestore()+0x3c>
   3f7c8:	e283c039 	add	ip, r3, #57	; 0x39
   3f7cc:	e080c00c 	add	ip, r0, ip
   3f7d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3f7d4:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   3f7d8:	e58dc000 	str	ip, [sp]
   3f7dc:	ebffff9c 	bl	3f654 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>
   3f7e0:	e28dd008 	add	sp, sp, #8
   3f7e4:	e8bd8010 	pop	{r4, pc}

0003f7e8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>:
   3f7e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f7ec:	e3510004 	cmp	r1, #4
   3f7f0:	e59d4020 	ldr	r4, [sp, #32]
   3f7f4:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f7f8:	e3a0af8f 	mov	sl, #572	; 0x23c
   3f7fc:	e00a019a 	mul	sl, sl, r1
   3f800:	e080800a 	add	r8, r0, sl
   3f804:	e1a06001 	mov	r6, r1
   3f808:	e5981014 	ldr	r1, [r8, #20]
   3f80c:	e1a05000 	mov	r5, r0
   3f810:	e3510000 	cmp	r1, #0
   3f814:	e5980008 	ldr	r0, [r8, #8]
   3f818:	e1a07003 	mov	r7, r3
   3f81c:	e1a09002 	mov	r9, r2
   3f820:	d3a00000 	movle	r0, #0
   3f824:	da000000 	ble	3f82c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x44>
   3f828:	eb0000a1 	bl	3fab4 <__aeabi_idiv>
   3f82c:	e1590000 	cmp	r9, r0
   3f830:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f834:	e5981018 	ldr	r1, [r8, #24]
   3f838:	e5980010 	ldr	r0, [r8, #16]
   3f83c:	e3510000 	cmp	r1, #0
   3f840:	d3a00000 	movle	r0, #0
   3f844:	da000000 	ble	3f84c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x64>
   3f848:	eb000099 	bl	3fab4 <__aeabi_idiv>
   3f84c:	e1570000 	cmp	r7, r0
   3f850:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f854:	e7d5300a 	ldrb	r3, [r5, sl]
   3f858:	e3530000 	cmp	r3, #0
   3f85c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f860:	e3a00f8f 	mov	r0, #572	; 0x23c
   3f864:	e0205690 	mla	r0, r0, r6, r5
   3f868:	e5901014 	ldr	r1, [r0, #20]
   3f86c:	e5903018 	ldr	r3, [r0, #24]
   3f870:	e0010991 	mul	r1, r1, r9
   3f874:	e0020793 	mul	r2, r3, r7
   3f878:	e598e004 	ldr	lr, [r8, #4]
   3f87c:	e590601c 	ldr	r6, [r0, #28]
   3f880:	e590c020 	ldr	ip, [r0, #32]
   3f884:	e021e196 	mla	r1, r6, r1, lr
   3f888:	e590e00c 	ldr	lr, [r0, #12]
   3f88c:	e3530000 	cmp	r3, #0
   3f890:	e022e29c 	mla	r2, ip, r2, lr
   3f894:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3f898:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3f89c:	e0221293 	mla	r2, r3, r2, r1
   3f8a0:	e0866002 	add	r6, r6, r2
   3f8a4:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f8a8:	e3a08000 	mov	r8, #0
   3f8ac:	e35c0000 	cmp	ip, #0
   3f8b0:	da00001a 	ble	3f920 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x138>
   3f8b4:	e3a07000 	mov	r7, #0
   3f8b8:	e5902014 	ldr	r2, [r0, #20]
   3f8bc:	e3520000 	cmp	r2, #0
   3f8c0:	da000011 	ble	3f90c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x124>
   3f8c4:	e1a0c006 	mov	ip, r6
   3f8c8:	e3a0e000 	mov	lr, #0
   3f8cc:	e590301c 	ldr	r3, [r0, #28]
   3f8d0:	e3530000 	cmp	r3, #0
   3f8d4:	da000007 	ble	3f8f8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x110>
   3f8d8:	e1a0300c 	mov	r3, ip
   3f8dc:	e4d42001 	ldrb	r2, [r4], #1
   3f8e0:	e4c32001 	strb	r2, [r3], #1
   3f8e4:	e590101c 	ldr	r1, [r0, #28]
   3f8e8:	e043200c 	sub	r2, r3, ip
   3f8ec:	e1510002 	cmp	r1, r2
   3f8f0:	cafffff9 	bgt	3f8dc <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xf4>
   3f8f4:	e1a0c003 	mov	ip, r3
   3f8f8:	e5903014 	ldr	r3, [r0, #20]
   3f8fc:	e28ee001 	add	lr, lr, #1
   3f900:	e153000e 	cmp	r3, lr
   3f904:	cafffff0 	bgt	3f8cc <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xe4>
   3f908:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3f90c:	e5902020 	ldr	r2, [r0, #32]
   3f910:	e2877001 	add	r7, r7, #1
   3f914:	e1520007 	cmp	r2, r7
   3f918:	e0866003 	add	r6, r6, r3
   3f91c:	caffffe5 	bgt	3f8b8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xd0>
   3f920:	e5902018 	ldr	r2, [r0, #24]
   3f924:	e2888001 	add	r8, r8, #1
   3f928:	e1520008 	cmp	r2, r8
   3f92c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f930:	e590c020 	ldr	ip, [r0, #32]
   3f934:	eaffffdc 	b	3f8ac <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xc4>

0003f938 <DisplayFX::cursorRender()>:
   3f938:	e92d4030 	push	{r4, r5, lr}
   3f93c:	e3a05f8f 	mov	r5, #572	; 0x23c
   3f940:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3f944:	e24dd00c 	sub	sp, sp, #12
   3f948:	e0030195 	mul	r3, r5, r1
   3f94c:	e7d0c003 	ldrb	ip, [r0, r3]
   3f950:	e080e003 	add	lr, r0, r3
   3f954:	e35c0000 	cmp	ip, #0
   3f958:	0a00000e 	beq	3f998 <DisplayFX::cursorRender()+0x60>
   3f95c:	e1a04000 	mov	r4, r0
   3f960:	e283c039 	add	ip, r3, #57	; 0x39
   3f964:	e080c00c 	add	ip, r0, ip
   3f968:	e59e3030 	ldr	r3, [lr, #48]	; 0x30
   3f96c:	e59e2034 	ldr	r2, [lr, #52]	; 0x34
   3f970:	e58dc000 	str	ip, [sp]
   3f974:	ebffff9b 	bl	3f7e8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>
   3f978:	e3a0c05f 	mov	ip, #95	; 0x5f
   3f97c:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3f980:	e1a00004 	mov	r0, r4
   3f984:	e0224195 	mla	r2, r5, r1, r4
   3f988:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3f98c:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3f990:	e58dc000 	str	ip, [sp]
   3f994:	ebfffcff 	bl	3ed98 <DisplayFX::windowPut(int, int, int, int)>
   3f998:	e28dd00c 	add	sp, sp, #12
   3f99c:	e8bd8030 	pop	{r4, r5, pc}

0003f9a0 <__aeabi_uidiv>:
   3f9a0:	e2512001 	subs	r2, r1, #1
   3f9a4:	012fff1e 	bxeq	lr
   3f9a8:	3a000036 	bcc	3fa88 <__aeabi_uidiv+0xe8>
   3f9ac:	e1500001 	cmp	r0, r1
   3f9b0:	9a000022 	bls	3fa40 <__aeabi_uidiv+0xa0>
   3f9b4:	e1110002 	tst	r1, r2
   3f9b8:	0a000023 	beq	3fa4c <__aeabi_uidiv+0xac>
   3f9bc:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3f9c0:	01a01181 	lsleq	r1, r1, #3
   3f9c4:	03a03008 	moveq	r3, #8
   3f9c8:	13a03001 	movne	r3, #1
   3f9cc:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3f9d0:	31510000 	cmpcc	r1, r0
   3f9d4:	31a01201 	lslcc	r1, r1, #4
   3f9d8:	31a03203 	lslcc	r3, r3, #4
   3f9dc:	3afffffa 	bcc	3f9cc <__aeabi_uidiv+0x2c>
   3f9e0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3f9e4:	31510000 	cmpcc	r1, r0
   3f9e8:	31a01081 	lslcc	r1, r1, #1
   3f9ec:	31a03083 	lslcc	r3, r3, #1
   3f9f0:	3afffffa 	bcc	3f9e0 <__aeabi_uidiv+0x40>
   3f9f4:	e3a02000 	mov	r2, #0
   3f9f8:	e1500001 	cmp	r0, r1
   3f9fc:	20400001 	subcs	r0, r0, r1
   3fa00:	21822003 	orrcs	r2, r2, r3
   3fa04:	e15000a1 	cmp	r0, r1, lsr #1
   3fa08:	204000a1 	subcs	r0, r0, r1, lsr #1
   3fa0c:	218220a3 	orrcs	r2, r2, r3, lsr #1
   3fa10:	e1500121 	cmp	r0, r1, lsr #2
   3fa14:	20400121 	subcs	r0, r0, r1, lsr #2
   3fa18:	21822123 	orrcs	r2, r2, r3, lsr #2
   3fa1c:	e15001a1 	cmp	r0, r1, lsr #3
   3fa20:	204001a1 	subcs	r0, r0, r1, lsr #3
   3fa24:	218221a3 	orrcs	r2, r2, r3, lsr #3
   3fa28:	e3500000 	cmp	r0, #0
   3fa2c:	11b03223 	lsrsne	r3, r3, #4
   3fa30:	11a01221 	lsrne	r1, r1, #4
   3fa34:	1affffef 	bne	3f9f8 <__aeabi_uidiv+0x58>
   3fa38:	e1a00002 	mov	r0, r2
   3fa3c:	e12fff1e 	bx	lr
   3fa40:	03a00001 	moveq	r0, #1
   3fa44:	13a00000 	movne	r0, #0
   3fa48:	e12fff1e 	bx	lr
   3fa4c:	e3510801 	cmp	r1, #65536	; 0x10000
   3fa50:	21a01821 	lsrcs	r1, r1, #16
   3fa54:	23a02010 	movcs	r2, #16
   3fa58:	33a02000 	movcc	r2, #0
   3fa5c:	e3510c01 	cmp	r1, #256	; 0x100
   3fa60:	21a01421 	lsrcs	r1, r1, #8
   3fa64:	22822008 	addcs	r2, r2, #8
   3fa68:	e3510010 	cmp	r1, #16
   3fa6c:	21a01221 	lsrcs	r1, r1, #4
   3fa70:	22822004 	addcs	r2, r2, #4
   3fa74:	e3510004 	cmp	r1, #4
   3fa78:	82822003 	addhi	r2, r2, #3
   3fa7c:	908220a1 	addls	r2, r2, r1, lsr #1
   3fa80:	e1a00230 	lsr	r0, r0, r2
   3fa84:	e12fff1e 	bx	lr
   3fa88:	e3500000 	cmp	r0, #0
   3fa8c:	13e00000 	mvnne	r0, #0
   3fa90:	ea000059 	b	3fbfc <__aeabi_idiv0>

0003fa94 <__aeabi_uidivmod>:
   3fa94:	e3510000 	cmp	r1, #0
   3fa98:	0afffffa 	beq	3fa88 <__aeabi_uidiv+0xe8>
   3fa9c:	e92d4003 	push	{r0, r1, lr}
   3faa0:	ebffffbe 	bl	3f9a0 <__aeabi_uidiv>
   3faa4:	e8bd4006 	pop	{r1, r2, lr}
   3faa8:	e0030092 	mul	r3, r2, r0
   3faac:	e0411003 	sub	r1, r1, r3
   3fab0:	e12fff1e 	bx	lr

0003fab4 <__aeabi_idiv>:
   3fab4:	e3510000 	cmp	r1, #0
   3fab8:	0a000043 	beq	3fbcc <.divsi3_skip_div0_test+0x110>

0003fabc <.divsi3_skip_div0_test>:
   3fabc:	e020c001 	eor	ip, r0, r1
   3fac0:	42611000 	rsbmi	r1, r1, #0
   3fac4:	e2512001 	subs	r2, r1, #1
   3fac8:	0a000027 	beq	3fb6c <.divsi3_skip_div0_test+0xb0>
   3facc:	e1b03000 	movs	r3, r0
   3fad0:	42603000 	rsbmi	r3, r0, #0
   3fad4:	e1530001 	cmp	r3, r1
   3fad8:	9a000026 	bls	3fb78 <.divsi3_skip_div0_test+0xbc>
   3fadc:	e1110002 	tst	r1, r2
   3fae0:	0a000028 	beq	3fb88 <.divsi3_skip_div0_test+0xcc>
   3fae4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3fae8:	01a01181 	lsleq	r1, r1, #3
   3faec:	03a02008 	moveq	r2, #8
   3faf0:	13a02001 	movne	r2, #1
   3faf4:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3faf8:	31510003 	cmpcc	r1, r3
   3fafc:	31a01201 	lslcc	r1, r1, #4
   3fb00:	31a02202 	lslcc	r2, r2, #4
   3fb04:	3afffffa 	bcc	3faf4 <.divsi3_skip_div0_test+0x38>
   3fb08:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3fb0c:	31510003 	cmpcc	r1, r3
   3fb10:	31a01081 	lslcc	r1, r1, #1
   3fb14:	31a02082 	lslcc	r2, r2, #1
   3fb18:	3afffffa 	bcc	3fb08 <.divsi3_skip_div0_test+0x4c>
   3fb1c:	e3a00000 	mov	r0, #0
   3fb20:	e1530001 	cmp	r3, r1
   3fb24:	20433001 	subcs	r3, r3, r1
   3fb28:	21800002 	orrcs	r0, r0, r2
   3fb2c:	e15300a1 	cmp	r3, r1, lsr #1
   3fb30:	204330a1 	subcs	r3, r3, r1, lsr #1
   3fb34:	218000a2 	orrcs	r0, r0, r2, lsr #1
   3fb38:	e1530121 	cmp	r3, r1, lsr #2
   3fb3c:	20433121 	subcs	r3, r3, r1, lsr #2
   3fb40:	21800122 	orrcs	r0, r0, r2, lsr #2
   3fb44:	e15301a1 	cmp	r3, r1, lsr #3
   3fb48:	204331a1 	subcs	r3, r3, r1, lsr #3
   3fb4c:	218001a2 	orrcs	r0, r0, r2, lsr #3
   3fb50:	e3530000 	cmp	r3, #0
   3fb54:	11b02222 	lsrsne	r2, r2, #4
   3fb58:	11a01221 	lsrne	r1, r1, #4
   3fb5c:	1affffef 	bne	3fb20 <.divsi3_skip_div0_test+0x64>
   3fb60:	e35c0000 	cmp	ip, #0
   3fb64:	42600000 	rsbmi	r0, r0, #0
   3fb68:	e12fff1e 	bx	lr
   3fb6c:	e13c0000 	teq	ip, r0
   3fb70:	42600000 	rsbmi	r0, r0, #0
   3fb74:	e12fff1e 	bx	lr
   3fb78:	33a00000 	movcc	r0, #0
   3fb7c:	01a00fcc 	asreq	r0, ip, #31
   3fb80:	03800001 	orreq	r0, r0, #1
   3fb84:	e12fff1e 	bx	lr
   3fb88:	e3510801 	cmp	r1, #65536	; 0x10000
   3fb8c:	21a01821 	lsrcs	r1, r1, #16
   3fb90:	23a02010 	movcs	r2, #16
   3fb94:	33a02000 	movcc	r2, #0
   3fb98:	e3510c01 	cmp	r1, #256	; 0x100
   3fb9c:	21a01421 	lsrcs	r1, r1, #8
   3fba0:	22822008 	addcs	r2, r2, #8
   3fba4:	e3510010 	cmp	r1, #16
   3fba8:	21a01221 	lsrcs	r1, r1, #4
   3fbac:	22822004 	addcs	r2, r2, #4
   3fbb0:	e3510004 	cmp	r1, #4
   3fbb4:	82822003 	addhi	r2, r2, #3
   3fbb8:	908220a1 	addls	r2, r2, r1, lsr #1
   3fbbc:	e35c0000 	cmp	ip, #0
   3fbc0:	e1a00233 	lsr	r0, r3, r2
   3fbc4:	42600000 	rsbmi	r0, r0, #0
   3fbc8:	e12fff1e 	bx	lr
   3fbcc:	e3500000 	cmp	r0, #0
   3fbd0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3fbd4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3fbd8:	ea000007 	b	3fbfc <__aeabi_idiv0>

0003fbdc <__aeabi_idivmod>:
   3fbdc:	e3510000 	cmp	r1, #0
   3fbe0:	0afffff9 	beq	3fbcc <.divsi3_skip_div0_test+0x110>
   3fbe4:	e92d4003 	push	{r0, r1, lr}
   3fbe8:	ebffffb3 	bl	3fabc <.divsi3_skip_div0_test>
   3fbec:	e8bd4006 	pop	{r1, r2, lr}
   3fbf0:	e0030092 	mul	r3, r2, r0
   3fbf4:	e0411003 	sub	r1, r1, r3
   3fbf8:	e12fff1e 	bx	lr

0003fbfc <__aeabi_idiv0>:
   3fbfc:	e12fff1e 	bx	lr

0003fc00 <__aeabi_uldivmod>:
   3fc00:	e3530000 	cmp	r3, #0
   3fc04:	03520000 	cmpeq	r2, #0
   3fc08:	1a000004 	bne	3fc20 <__aeabi_uldivmod+0x20>
   3fc0c:	e3510000 	cmp	r1, #0
   3fc10:	03500000 	cmpeq	r0, #0
   3fc14:	13e01000 	mvnne	r1, #0
   3fc18:	13e00000 	mvnne	r0, #0
   3fc1c:	eafffff6 	b	3fbfc <__aeabi_idiv0>
   3fc20:	e24dd008 	sub	sp, sp, #8
   3fc24:	e92d6000 	push	{sp, lr}
   3fc28:	eb000003 	bl	3fc3c <__udivmoddi4>
   3fc2c:	e59de004 	ldr	lr, [sp, #4]
   3fc30:	e28dd008 	add	sp, sp, #8
   3fc34:	e8bd000c 	pop	{r2, r3}
   3fc38:	e12fff1e 	bx	lr

0003fc3c <__udivmoddi4>:
   3fc3c:	e1510003 	cmp	r1, r3
   3fc40:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fc44:	01500002 	cmpeq	r0, r2
   3fc48:	e1a04000 	mov	r4, r0
   3fc4c:	e1a05001 	mov	r5, r1
   3fc50:	e59da028 	ldr	sl, [sp, #40]	; 0x28
   3fc54:	33a00000 	movcc	r0, #0
   3fc58:	33a01000 	movcc	r1, #0
   3fc5c:	3a00003d 	bcc	3fd58 <__udivmoddi4+0x11c>
   3fc60:	e1a00002 	mov	r0, r2
   3fc64:	e1a01003 	mov	r1, r3
   3fc68:	e1a08002 	mov	r8, r2
   3fc6c:	e1a09003 	mov	r9, r3
   3fc70:	eb00003c 	bl	3fd68 <__clzdi2>
   3fc74:	e1a01005 	mov	r1, r5
   3fc78:	e1a0b000 	mov	fp, r0
   3fc7c:	e1a00004 	mov	r0, r4
   3fc80:	eb000038 	bl	3fd68 <__clzdi2>
   3fc84:	e04bb000 	sub	fp, fp, r0
   3fc88:	e24b2020 	sub	r2, fp, #32
   3fc8c:	e1a07b19 	lsl	r7, r9, fp
   3fc90:	e1877218 	orr	r7, r7, r8, lsl r2
   3fc94:	e26bc020 	rsb	ip, fp, #32
   3fc98:	e1877c38 	orr	r7, r7, r8, lsr ip
   3fc9c:	e1550007 	cmp	r5, r7
   3fca0:	e1a06b18 	lsl	r6, r8, fp
   3fca4:	01540006 	cmpeq	r4, r6
   3fca8:	33a00000 	movcc	r0, #0
   3fcac:	33a01000 	movcc	r1, #0
   3fcb0:	3a000005 	bcc	3fccc <__udivmoddi4+0x90>
   3fcb4:	e3a0e001 	mov	lr, #1
   3fcb8:	e0544006 	subs	r4, r4, r6
   3fcbc:	e1a0121e 	lsl	r1, lr, r2
   3fcc0:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3fcc4:	e0c55007 	sbc	r5, r5, r7
   3fcc8:	e1a00b1e 	lsl	r0, lr, fp
   3fccc:	e35b0000 	cmp	fp, #0
   3fcd0:	0a000020 	beq	3fd58 <__udivmoddi4+0x11c>
   3fcd4:	e1b070a7 	lsrs	r7, r7, #1
   3fcd8:	e1a06066 	rrx	r6, r6
   3fcdc:	e1a0e00b 	mov	lr, fp
   3fce0:	ea000007 	b	3fd04 <__udivmoddi4+0xc8>
   3fce4:	e0544006 	subs	r4, r4, r6
   3fce8:	e0c55007 	sbc	r5, r5, r7
   3fcec:	e0944004 	adds	r4, r4, r4
   3fcf0:	e0a55005 	adc	r5, r5, r5
   3fcf4:	e2944001 	adds	r4, r4, #1
   3fcf8:	e2a55000 	adc	r5, r5, #0
   3fcfc:	e25ee001 	subs	lr, lr, #1
   3fd00:	0a000006 	beq	3fd20 <__udivmoddi4+0xe4>
   3fd04:	e1550007 	cmp	r5, r7
   3fd08:	01540006 	cmpeq	r4, r6
   3fd0c:	2afffff4 	bcs	3fce4 <__udivmoddi4+0xa8>
   3fd10:	e0944004 	adds	r4, r4, r4
   3fd14:	e0a55005 	adc	r5, r5, r5
   3fd18:	e25ee001 	subs	lr, lr, #1
   3fd1c:	1afffff8 	bne	3fd04 <__udivmoddi4+0xc8>
   3fd20:	e1a0eb34 	lsr	lr, r4, fp
   3fd24:	e18eec15 	orr	lr, lr, r5, lsl ip
   3fd28:	e18ee235 	orr	lr, lr, r5, lsr r2
   3fd2c:	e0906004 	adds	r6, r0, r4
   3fd30:	e1a0400e 	mov	r4, lr
   3fd34:	e0a17005 	adc	r7, r1, r5
   3fd38:	e1a01b35 	lsr	r1, r5, fp
   3fd3c:	e1a05001 	mov	r5, r1
   3fd40:	e1a01b11 	lsl	r1, r1, fp
   3fd44:	e181121e 	orr	r1, r1, lr, lsl r2
   3fd48:	e1a00b1e 	lsl	r0, lr, fp
   3fd4c:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3fd50:	e0560000 	subs	r0, r6, r0
   3fd54:	e0c71001 	sbc	r1, r7, r1
   3fd58:	e35a0000 	cmp	sl, #0
   3fd5c:	188a0030 	stmne	sl, {r4, r5}
   3fd60:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd64:	e12fff1e 	bx	lr

0003fd68 <__clzdi2>:
   3fd68:	e92d4010 	push	{r4, lr}
   3fd6c:	e3510000 	cmp	r1, #0
   3fd70:	1a000002 	bne	3fd80 <__clzdi2+0x18>
   3fd74:	eb000005 	bl	3fd90 <__clzsi2>
   3fd78:	e2800020 	add	r0, r0, #32
   3fd7c:	ea000001 	b	3fd88 <__clzdi2+0x20>
   3fd80:	e1a00001 	mov	r0, r1
   3fd84:	eb000001 	bl	3fd90 <__clzsi2>
   3fd88:	e8bd4010 	pop	{r4, lr}
   3fd8c:	e12fff1e 	bx	lr

0003fd90 <__clzsi2>:
   3fd90:	e3a0101c 	mov	r1, #28
   3fd94:	e3500801 	cmp	r0, #65536	; 0x10000
   3fd98:	21a00820 	lsrcs	r0, r0, #16
   3fd9c:	22411010 	subcs	r1, r1, #16
   3fda0:	e3500c01 	cmp	r0, #256	; 0x100
   3fda4:	21a00420 	lsrcs	r0, r0, #8
   3fda8:	22411008 	subcs	r1, r1, #8
   3fdac:	e3500010 	cmp	r0, #16
   3fdb0:	21a00220 	lsrcs	r0, r0, #4
   3fdb4:	22411004 	subcs	r1, r1, #4
   3fdb8:	e28f2008 	add	r2, pc, #8
   3fdbc:	e7d20000 	ldrb	r0, [r2, r0]
   3fdc0:	e0800001 	add	r0, r0, r1
   3fdc4:	e12fff1e 	bx	lr
   3fdc8:	02020304 	.word	0x02020304
   3fdcc:	01010101 	.word	0x01010101
	...

0003fdd8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3fdd8:	e3a01000 	mov	r1, #0
   3fddc:	e3a02001 	mov	r2, #1
   3fde0:	e92d4030 	push	{r4, r5, lr}
   3fde4:	e1a04000 	mov	r4, r0
   3fde8:	e5903020 	ldr	r3, [r0, #32]
   3fdec:	e24dd014 	sub	sp, sp, #20
   3fdf0:	e5c32011 	strb	r2, [r3, #17]
   3fdf4:	e5c3100c 	strb	r1, [r3, #12]
   3fdf8:	e5c3100d 	strb	r1, [r3, #13]
   3fdfc:	e5c3100e 	strb	r1, [r3, #14]
   3fe00:	e5c3100f 	strb	r1, [r3, #15]
   3fe04:	e5c31010 	strb	r1, [r3, #16]
   3fe08:	e5c31012 	strb	r1, [r3, #18]
   3fe0c:	e5c31013 	strb	r1, [r3, #19]
   3fe10:	e28d0008 	add	r0, sp, #8
   3fe14:	ebff90cb 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3fe18:	e59f306c 	ldr	r3, [pc, #108]	; 3fe8c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3fe1c:	e5942020 	ldr	r2, [r4, #32]
   3fe20:	e28d0008 	add	r0, sp, #8
   3fe24:	e58d3000 	str	r3, [sp]
   3fe28:	e59f1060 	ldr	r1, [pc, #96]	; 3fe90 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3fe2c:	e283300c 	add	r3, r3, #12
   3fe30:	ebff90d0 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3fe34:	e2505000 	subs	r5, r0, #0
   3fe38:	0a000008 	beq	3fe60 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3fe3c:	e5942020 	ldr	r2, [r4, #32]
   3fe40:	e5d2300c 	ldrb	r3, [r2, #12]
   3fe44:	e5d2000d 	ldrb	r0, [r2, #13]
   3fe48:	e5d2100e 	ldrb	r1, [r2, #14]
   3fe4c:	e1833400 	orr	r3, r3, r0, lsl #8
   3fe50:	e5d2200f 	ldrb	r2, [r2, #15]
   3fe54:	e1833801 	orr	r3, r3, r1, lsl #16
   3fe58:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3fe5c:	0a000005 	beq	3fe78 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3fe60:	e3a05000 	mov	r5, #0
   3fe64:	e28d0008 	add	r0, sp, #8
   3fe68:	ebff90bd 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   3fe6c:	e1a00005 	mov	r0, r5
   3fe70:	e28dd014 	add	sp, sp, #20
   3fe74:	e8bd8030 	pop	{r4, r5, pc}
   3fe78:	e28d0008 	add	r0, sp, #8
   3fe7c:	ebff90b8 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   3fe80:	e1a00005 	mov	r0, r5
   3fe84:	e28dd014 	add	sp, sp, #20
   3fe88:	e8bd8030 	pop	{r4, r5, pc}
   3fe8c:	00000408 	.word	0x00000408
   3fe90:	0004800b 	.word	0x0004800b

0003fe94 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3fe94:	e92d4030 	push	{r4, r5, lr}
   3fe98:	e3510000 	cmp	r1, #0
   3fe9c:	13520000 	cmpne	r2, #0
   3fea0:	e1a04000 	mov	r4, r0
   3fea4:	e3a05000 	mov	r5, #0
   3fea8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3feac:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   3feb0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   3feb4:	e8840006 	stm	r4, {r1, r2}
   3feb8:	e5843010 	str	r3, [r4, #16]
   3febc:	e584c00c 	str	ip, [r4, #12]
   3fec0:	e5840008 	str	r0, [r4, #8]
   3fec4:	e5845014 	str	r5, [r4, #20]
   3fec8:	e5845018 	str	r5, [r4, #24]
   3fecc:	e584501c 	str	r5, [r4, #28]
   3fed0:	e5845020 	str	r5, [r4, #32]
   3fed4:	1a000011 	bne	3ff20 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   3fed8:	e1a01005 	mov	r1, r5
   3fedc:	e28d000c 	add	r0, sp, #12
   3fee0:	ebff9098 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3fee4:	e3a03014 	mov	r3, #20
   3fee8:	e58d5000 	str	r5, [sp]
   3feec:	e28d000c 	add	r0, sp, #12
   3fef0:	e08d2003 	add	r2, sp, r3
   3fef4:	e59f10c8 	ldr	r1, [pc, #200]	; 3ffc4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   3fef8:	ebff909e 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3fefc:	e1500005 	cmp	r0, r5
   3ff00:	1a000026 	bne	3ffa0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   3ff04:	e3a02d0a 	mov	r2, #640	; 0x280
   3ff08:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3ff0c:	e884000c 	stm	r4, {r2, r3}
   3ff10:	e28d000c 	add	r0, sp, #12
   3ff14:	ebff9092 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   3ff18:	e5940008 	ldr	r0, [r4, #8]
   3ff1c:	e5943010 	ldr	r3, [r4, #16]
   3ff20:	e3500000 	cmp	r0, #0
   3ff24:	0a000019 	beq	3ff90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3ff28:	e594200c 	ldr	r2, [r4, #12]
   3ff2c:	e3520000 	cmp	r2, #0
   3ff30:	0a000016 	beq	3ff90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3ff34:	e3530008 	cmp	r3, #8
   3ff38:	8a000006 	bhi	3ff58 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc4>
   3ff3c:	e59f0084 	ldr	r0, [pc, #132]	; 3ffc8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   3ff40:	ebffaa7c 	bl	2a938 <operator new[](unsigned int)>
   3ff44:	e3a02b01 	mov	r2, #1024	; 0x400
   3ff48:	e5840020 	str	r0, [r4, #32]
   3ff4c:	e3a01000 	mov	r1, #0
   3ff50:	e2800014 	add	r0, r0, #20
   3ff54:	ebffa626 	bl	297f4 <memset>
   3ff58:	e3a02070 	mov	r2, #112	; 0x70
   3ff5c:	e59f1068 	ldr	r1, [pc, #104]	; 3ffcc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   3ff60:	e2840024 	add	r0, r4, #36	; 0x24
   3ff64:	ebffa899 	bl	2a1d0 <memcpy>
   3ff68:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   3ff6c:	e5840034 	str	r0, [r4, #52]	; 0x34
   3ff70:	e1a00004 	mov	r0, r4
   3ff74:	e594c000 	ldr	ip, [r4]
   3ff78:	e5841044 	str	r1, [r4, #68]	; 0x44
   3ff7c:	e584c030 	str	ip, [r4, #48]	; 0x30
   3ff80:	e5842048 	str	r2, [r4, #72]	; 0x48
   3ff84:	e5843058 	str	r3, [r4, #88]	; 0x58
   3ff88:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3ff8c:	e8bd8030 	pop	{r4, r5, pc}
   3ff90:	e8940006 	ldm	r4, {r1, r2}
   3ff94:	e5841008 	str	r1, [r4, #8]
   3ff98:	e584200c 	str	r2, [r4, #12]
   3ff9c:	eaffffe4 	b	3ff34 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   3ffa0:	e59d2020 	ldr	r2, [sp, #32]
   3ffa4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3ffa8:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3ffac:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3ffb0:	e3510f96 	cmp	r1, #600	; 0x258
   3ffb4:	93500c05 	cmpls	r0, #1280	; 0x500
   3ffb8:	e884000c 	stm	r4, {r2, r3}
   3ffbc:	9affffd3 	bls	3ff10 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   3ffc0:	eaffffcf 	b	3ff04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
   3ffc4:	00040003 	.word	0x00040003
   3ffc8:	00000414 	.word	0x00000414
   3ffcc:	0004e7c8 	.word	0x0004e7c8

0003ffd0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3ffd0:	e92d4010 	push	{r4, lr}
   3ffd4:	e1a04000 	mov	r4, r0
   3ffd8:	e3a01014 	mov	r1, #20
   3ffdc:	e5900020 	ldr	r0, [r0, #32]
   3ffe0:	ebffaa61 	bl	2a96c <operator delete(void*, unsigned int)>
   3ffe4:	e1a00004 	mov	r0, r4
   3ffe8:	e8bd8010 	pop	{r4, pc}

0003ffec <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3ffec:	e5903010 	ldr	r3, [r0, #16]
   3fff0:	e3530008 	cmp	r3, #8
   3fff4:	812fff1e 	bxhi	lr
   3fff8:	e1a03982 	lsl	r3, r2, #19
   3fffc:	e1a0c5a2 	lsr	ip, r2, #11
   40000:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   40004:	e183318c 	orr	r3, r3, ip, lsl #3
   40008:	e1a02282 	lsl	r2, r2, #5
   4000c:	e5900020 	ldr	r0, [r0, #32]
   40010:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   40014:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   40018:	e1822003 	orr	r2, r2, r3
   4001c:	e2811004 	add	r1, r1, #4
   40020:	e0801101 	add	r1, r0, r1, lsl #2
   40024:	e1a0c422 	lsr	ip, r2, #8
   40028:	e1a00822 	lsr	r0, r2, #16
   4002c:	e1a03c22 	lsr	r3, r2, #24
   40030:	e5c12004 	strb	r2, [r1, #4]
   40034:	e5c1c005 	strb	ip, [r1, #5]
   40038:	e5c10006 	strb	r0, [r1, #6]
   4003c:	e5c13007 	strb	r3, [r1, #7]
   40040:	e12fff1e 	bx	lr

00040044 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   40044:	e5903010 	ldr	r3, [r0, #16]
   40048:	e3530008 	cmp	r3, #8
   4004c:	812fff1e 	bxhi	lr
   40050:	e5903020 	ldr	r3, [r0, #32]
   40054:	e2811004 	add	r1, r1, #4
   40058:	e0831101 	add	r1, r3, r1, lsl #2
   4005c:	e1a0c422 	lsr	ip, r2, #8
   40060:	e1a00822 	lsr	r0, r2, #16
   40064:	e1a03c22 	lsr	r3, r2, #24
   40068:	e5c12004 	strb	r2, [r1, #4]
   4006c:	e5c1c005 	strb	ip, [r1, #5]
   40070:	e5c10006 	strb	r0, [r1, #6]
   40074:	e5c13007 	strb	r3, [r1, #7]
   40078:	e12fff1e 	bx	lr

0004007c <CBcmFrameBuffer::Initialize()>:
   4007c:	e92d4030 	push	{r4, r5, lr}
   40080:	e1a04000 	mov	r4, r0
   40084:	e24dd00c 	sub	sp, sp, #12
   40088:	e3a01000 	mov	r1, #0
   4008c:	e1a0000d 	mov	r0, sp
   40090:	ebff902c 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   40094:	e2841024 	add	r1, r4, #36	; 0x24
   40098:	e1a0000d 	mov	r0, sp
   4009c:	e3a02070 	mov	r2, #112	; 0x70
   400a0:	ebff9071 	bl	2426c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   400a4:	e2505000 	subs	r5, r0, #0
   400a8:	0a00001f 	beq	4012c <CBcmFrameBuffer::Initialize()+0xb0>
   400ac:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   400b0:	e3530000 	cmp	r3, #0
   400b4:	0a00001b 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400b8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   400bc:	e3530000 	cmp	r3, #0
   400c0:	0a000018 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400c4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   400c8:	e3530000 	cmp	r3, #0
   400cc:	0a000015 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400d0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   400d4:	e3530000 	cmp	r3, #0
   400d8:	0a000012 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400dc:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   400e0:	e3530000 	cmp	r3, #0
   400e4:	0a00000f 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400e8:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   400ec:	e3530000 	cmp	r3, #0
   400f0:	0a00000c 	beq	40128 <CBcmFrameBuffer::Initialize()+0xac>
   400f4:	e5940010 	ldr	r0, [r4, #16]
   400f8:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   400fc:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   40100:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   40104:	e3500008 	cmp	r0, #8
   40108:	e5843014 	str	r3, [r4, #20]
   4010c:	e5841018 	str	r1, [r4, #24]
   40110:	e584201c 	str	r2, [r4, #28]
   40114:	8a000004 	bhi	4012c <CBcmFrameBuffer::Initialize()+0xb0>
   40118:	e1a00004 	mov	r0, r4
   4011c:	ebffff2d 	bl	3fdd8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   40120:	e1a05000 	mov	r5, r0
   40124:	ea000000 	b	4012c <CBcmFrameBuffer::Initialize()+0xb0>
   40128:	e1a05003 	mov	r5, r3
   4012c:	e1a0000d 	mov	r0, sp
   40130:	ebff900b 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   40134:	e1a00005 	mov	r0, r5
   40138:	e28dd00c 	add	sp, sp, #12
   4013c:	e8bd8030 	pop	{r4, r5, pc}

00040140 <CBcmFrameBuffer::GetWidth() const>:
   40140:	e5900000 	ldr	r0, [r0]
   40144:	e12fff1e 	bx	lr

00040148 <CBcmFrameBuffer::GetHeight() const>:
   40148:	e5900004 	ldr	r0, [r0, #4]
   4014c:	e12fff1e 	bx	lr

00040150 <CBcmFrameBuffer::GetVirtWidth() const>:
   40150:	e5900008 	ldr	r0, [r0, #8]
   40154:	e12fff1e 	bx	lr

00040158 <CBcmFrameBuffer::GetVirtHeight() const>:
   40158:	e590000c 	ldr	r0, [r0, #12]
   4015c:	e12fff1e 	bx	lr

00040160 <CBcmFrameBuffer::GetPitch() const>:
   40160:	e590001c 	ldr	r0, [r0, #28]
   40164:	e12fff1e 	bx	lr

00040168 <CBcmFrameBuffer::GetDepth() const>:
   40168:	e5900010 	ldr	r0, [r0, #16]
   4016c:	e12fff1e 	bx	lr

00040170 <CBcmFrameBuffer::GetBuffer() const>:
   40170:	e5900014 	ldr	r0, [r0, #20]
   40174:	e12fff1e 	bx	lr

00040178 <CBcmFrameBuffer::GetSize() const>:
   40178:	e5900018 	ldr	r0, [r0, #24]
   4017c:	e12fff1e 	bx	lr

00040180 <CBcmFrameBuffer::UpdatePalette()>:
   40180:	e5903010 	ldr	r3, [r0, #16]
   40184:	e3530008 	cmp	r3, #8
   40188:	9a000001 	bls	40194 <CBcmFrameBuffer::UpdatePalette()+0x14>
   4018c:	e3a00001 	mov	r0, #1
   40190:	e12fff1e 	bx	lr
   40194:	eaffff0f 	b	3fdd8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00040198 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   40198:	e92d4070 	push	{r4, r5, r6, lr}
   4019c:	e24dd028 	sub	sp, sp, #40	; 0x28
   401a0:	e1a05001 	mov	r5, r1
   401a4:	e28d000c 	add	r0, sp, #12
   401a8:	e3a01000 	mov	r1, #0
   401ac:	e1a06002 	mov	r6, r2
   401b0:	ebff8fe4 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   401b4:	e3a03008 	mov	r3, #8
   401b8:	e58d3000 	str	r3, [sp]
   401bc:	e3a03014 	mov	r3, #20
   401c0:	e28d000c 	add	r0, sp, #12
   401c4:	e08d2003 	add	r2, sp, r3
   401c8:	e59f1040 	ldr	r1, [pc, #64]	; 40210 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   401cc:	e58d5020 	str	r5, [sp, #32]
   401d0:	e58d6024 	str	r6, [sp, #36]	; 0x24
   401d4:	ebff8fe7 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   401d8:	e2504000 	subs	r4, r0, #0
   401dc:	0a000006 	beq	401fc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   401e0:	e59d3020 	ldr	r3, [sp, #32]
   401e4:	e1550003 	cmp	r5, r3
   401e8:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   401ec:	13a04000 	movne	r4, #0
   401f0:	00444006 	subeq	r4, r4, r6
   401f4:	016f4f14 	clzeq	r4, r4
   401f8:	01a042a4 	lsreq	r4, r4, #5
   401fc:	e28d000c 	add	r0, sp, #12
   40200:	ebff8fd7 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   40204:	e1a00004 	mov	r0, r4
   40208:	e28dd028 	add	sp, sp, #40	; 0x28
   4020c:	e8bd8070 	pop	{r4, r5, r6, pc}
   40210:	00048009 	.word	0x00048009

00040214 <CBcmFrameBuffer::WaitForVerticalSync()>:
   40214:	e92d4010 	push	{r4, lr}
   40218:	e24dd020 	sub	sp, sp, #32
   4021c:	e28d0008 	add	r0, sp, #8
   40220:	e3a01000 	mov	r1, #0
   40224:	ebff8fc7 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   40228:	e3a03000 	mov	r3, #0
   4022c:	e58d3000 	str	r3, [sp]
   40230:	e3a03010 	mov	r3, #16
   40234:	e59f1020 	ldr	r1, [pc, #32]	; 4025c <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   40238:	e08d2003 	add	r2, sp, r3
   4023c:	e28d0008 	add	r0, sp, #8
   40240:	ebff8fcc 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   40244:	e1a04000 	mov	r4, r0
   40248:	e28d0008 	add	r0, sp, #8
   4024c:	ebff8fc4 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   40250:	e1a00004 	mov	r0, r4
   40254:	e28dd020 	add	sp, sp, #32
   40258:	e8bd8010 	pop	{r4, pc}
   4025c:	0004800e 	.word	0x0004800e

00040260 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   40260:	e92d4010 	push	{r4, lr}
   40264:	e24dd020 	sub	sp, sp, #32
   40268:	e1a04001 	mov	r4, r1
   4026c:	e28d0008 	add	r0, sp, #8
   40270:	e3a01000 	mov	r1, #0
   40274:	ebff8fb3 	bl	24148 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   40278:	e3a03004 	mov	r3, #4
   4027c:	e58d3000 	str	r3, [sp]
   40280:	e3a03010 	mov	r3, #16
   40284:	e59f1024 	ldr	r1, [pc, #36]	; 402b0 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   40288:	e08d2003 	add	r2, sp, r3
   4028c:	e28d0008 	add	r0, sp, #8
   40290:	e58d401c 	str	r4, [sp, #28]
   40294:	ebff8fb7 	bl	24178 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   40298:	e1a04000 	mov	r4, r0
   4029c:	e28d0008 	add	r0, sp, #8
   402a0:	ebff8faf 	bl	24164 <CBcmPropertyTags::~CBcmPropertyTags()>
   402a4:	e1a00004 	mov	r0, r4
   402a8:	e28dd020 	add	sp, sp, #32
   402ac:	e8bd8010 	pop	{r4, pc}
   402b0:	0004800f 	.word	0x0004800f

000402b4 <convModeToVal>:
   402b4:	e2400001 	sub	r0, r0, #1
   402b8:	e6ef0070 	uxtb	r0, r0
   402bc:	e3500008 	cmp	r0, #8
   402c0:	959f3008 	ldrls	r3, [pc, #8]	; 402d0 <convModeToVal+0x1c>
   402c4:	97d30000 	ldrbls	r0, [r3, r0]
   402c8:	83a00000 	movhi	r0, #0
   402cc:	e12fff1e 	bx	lr
   402d0:	00049954 	.word	0x00049954

000402d4 <pinMode>:
   402d4:	e3e03009 	mvn	r3, #9
   402d8:	e3a0c007 	mov	ip, #7
   402dc:	e59f20e0 	ldr	r2, [pc, #224]	; 403c4 <pinMode+0xf0>
   402e0:	e92d4070 	push	{r4, r5, r6, lr}
   402e4:	e0824092 	umull	r4, r2, r2, r0
   402e8:	e1a021a2 	lsr	r2, r2, #3
   402ec:	e0230293 	mla	r3, r3, r2, r0
   402f0:	e59fe0d0 	ldr	lr, [pc, #208]	; 403c8 <pinMode+0xf4>
   402f4:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   402f8:	e0c4e39e 	smull	lr, r4, lr, r3
   402fc:	e1a0efc3 	asr	lr, r3, #31
   40300:	e06ee144 	rsb	lr, lr, r4, asr #2
   40304:	e08ee10e 	add	lr, lr, lr, lsl #2
   40308:	e2822702 	add	r2, r2, #524288	; 0x80000
   4030c:	e043308e 	sub	r3, r3, lr, lsl #1
   40310:	e2411001 	sub	r1, r1, #1
   40314:	e1a02102 	lsl	r2, r2, #2
   40318:	e6ef1071 	uxtb	r1, r1
   4031c:	e0833083 	add	r3, r3, r3, lsl #1
   40320:	e592e000 	ldr	lr, [r2]
   40324:	e6ef3073 	uxtb	r3, r3
   40328:	e3510008 	cmp	r1, #8
   4032c:	e1cec31c 	bic	ip, lr, ip, lsl r3
   40330:	8a000017 	bhi	40394 <pinMode+0xc0>
   40334:	e59fe090 	ldr	lr, [pc, #144]	; 403cc <pinMode+0xf8>
   40338:	e7de1001 	ldrb	r1, [lr, r1]
   4033c:	e201e00f 	and	lr, r1, #15
   40340:	e18cc31e 	orr	ip, ip, lr, lsl r3
   40344:	e31100f0 	tst	r1, #240	; 0xf0
   40348:	e582c000 	str	ip, [r2]
   4034c:	08bd8070 	popeq	{r4, r5, r6, pc}
   40350:	e1a04000 	mov	r4, r0
   40354:	e59f5074 	ldr	r5, [pc, #116]	; 403d0 <pinMode+0xfc>
   40358:	e1a01241 	asr	r1, r1, #4
   4035c:	e5851094 	str	r1, [r5, #148]	; 0x94
   40360:	e3a00096 	mov	r0, #150	; 0x96
   40364:	ebffaf1d 	bl	2bfe0 <DelayLoop>
   40368:	e354001f 	cmp	r4, #31
   4036c:	ca00000a 	bgt	4039c <pinMode+0xc8>
   40370:	e3a00001 	mov	r0, #1
   40374:	e1a00410 	lsl	r0, r0, r4
   40378:	e5850098 	str	r0, [r5, #152]	; 0x98
   4037c:	e3a00096 	mov	r0, #150	; 0x96
   40380:	ebffaf16 	bl	2bfe0 <DelayLoop>
   40384:	e3a03000 	mov	r3, #0
   40388:	e5853094 	str	r3, [r5, #148]	; 0x94
   4038c:	e5853098 	str	r3, [r5, #152]	; 0x98
   40390:	e8bd8070 	pop	{r4, r5, r6, pc}
   40394:	e582c000 	str	ip, [r2]
   40398:	e8bd8070 	pop	{r4, r5, r6, pc}
   4039c:	e3a03001 	mov	r3, #1
   403a0:	e2440020 	sub	r0, r4, #32
   403a4:	e1a00013 	lsl	r0, r3, r0
   403a8:	e585009c 	str	r0, [r5, #156]	; 0x9c
   403ac:	e3a00096 	mov	r0, #150	; 0x96
   403b0:	ebffaf0a 	bl	2bfe0 <DelayLoop>
   403b4:	e3a03000 	mov	r3, #0
   403b8:	e5853094 	str	r3, [r5, #148]	; 0x94
   403bc:	e585309c 	str	r3, [r5, #156]	; 0x9c
   403c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   403c4:	cccccccd 	.word	0xcccccccd
   403c8:	66666667 	.word	0x66666667
   403cc:	00049954 	.word	0x00049954
   403d0:	20200000 	.word	0x20200000

000403d4 <digitalWrite>:
   403d4:	e3510000 	cmp	r1, #0
   403d8:	e3a03001 	mov	r3, #1
   403dc:	0a000008 	beq	40404 <digitalWrite+0x30>
   403e0:	e350001f 	cmp	r0, #31
   403e4:	c2400020 	subgt	r0, r0, #32
   403e8:	d59f2038 	ldrle	r2, [pc, #56]	; 40428 <digitalWrite+0x54>
   403ec:	c59f2034 	ldrgt	r2, [pc, #52]	; 40428 <digitalWrite+0x54>
   403f0:	d1a00013 	lslle	r0, r3, r0
   403f4:	c1a00013 	lslgt	r0, r3, r0
   403f8:	d582001c 	strle	r0, [r2, #28]
   403fc:	c5820020 	strgt	r0, [r2, #32]
   40400:	e12fff1e 	bx	lr
   40404:	e350001f 	cmp	r0, #31
   40408:	c2400020 	subgt	r0, r0, #32
   4040c:	d59f2014 	ldrle	r2, [pc, #20]	; 40428 <digitalWrite+0x54>
   40410:	c59f2010 	ldrgt	r2, [pc, #16]	; 40428 <digitalWrite+0x54>
   40414:	d1a00013 	lslle	r0, r3, r0
   40418:	c1a00013 	lslgt	r0, r3, r0
   4041c:	d5820028 	strle	r0, [r2, #40]	; 0x28
   40420:	c582002c 	strgt	r0, [r2, #44]	; 0x2c
   40424:	e12fff1e 	bx	lr
   40428:	20200000 	.word	0x20200000

0004042c <digitalRead>:
   4042c:	e350001f 	cmp	r0, #31
   40430:	d59f301c 	ldrle	r3, [pc, #28]	; 40454 <digitalRead+0x28>
   40434:	c59f2018 	ldrgt	r2, [pc, #24]	; 40454 <digitalRead+0x28>
   40438:	c2403020 	subgt	r3, r0, #32
   4043c:	d5933034 	ldrle	r3, [r3, #52]	; 0x34
   40440:	c5920038 	ldrgt	r0, [r2, #56]	; 0x38
   40444:	d1a00033 	lsrle	r0, r3, r0
   40448:	c1a00330 	lsrgt	r0, r0, r3
   4044c:	e2000001 	and	r0, r0, #1
   40450:	e12fff1e 	bx	lr
   40454:	20200000 	.word	0x20200000

00040458 <lowlev_enable_irq>:
   40458:	e10f0000 	mrs	r0, CPSR
   4045c:	e3c00080 	bic	r0, r0, #128	; 0x80
   40460:	e121f000 	msr	CPSR_c, r0
   40464:	e12fff1e 	bx	lr

00040468 <lowlev_disable_irq>:
   40468:	f10c0080 	cpsid	i
   4046c:	e1a0f00e 	mov	pc, lr

00040470 <lowlev_enable_fiq>:
   40470:	e10f0000 	mrs	r0, CPSR
   40474:	e3c00040 	bic	r0, r0, #64	; 0x40
   40478:	e121f000 	msr	CPSR_c, r0
   4047c:	e12fff1e 	bx	lr

00040480 <lowlev_disable_fiq>:
   40480:	f10c0040 	cpsid	f
   40484:	e1a0f00e 	mov	pc, lr

00040488 <lowlev_cycleDelay>:
   40488:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   4048c:	e1a000c0 	asr	r0, r0, #1

00040490 <bloop>:
   40490:	e2500001 	subs	r0, r0, #1
   40494:	1afffffd 	bne	40490 <bloop>
   40498:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   4049c:	e12fff1e 	bx	lr

000404a0 <membarrier>:
   404a0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   404a4:	e3a03000 	mov	r3, #0
   404a8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   404ac:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   404b0:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   404b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   404b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   404bc:	e12fff1e 	bx	lr

000404c0 <disable_mmu_and_cache>:
   404c0:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   404c4:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   404c8:	e3c00004 	bic	r0, r0, #4
   404cc:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   404d0:	e92d040f 	push	{r0, r1, r2, r3, sl}
   404d4:	e3a03000 	mov	r3, #0
   404d8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   404dc:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   404e0:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   404e4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   404e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   404ec:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   404f0:	e3a00005 	mov	r0, #5
   404f4:	e1c33000 	bic	r3, r3, r0
   404f8:	e3a00003 	mov	r0, #3
   404fc:	e1c33580 	bic	r3, r3, r0, lsl #11
   40500:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   40504:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   40508:	e12fff1e 	bx	lr

0004050c <blinkCE0>:
   4050c:	e92d040f 	push	{r0, r1, r2, r3, sl}
   40510:	e59f0108 	ldr	r0, [pc, #264]	; 40620 <memcopyfast+0x5c>
   40514:	e3a01401 	mov	r1, #16777216	; 0x1000000
   40518:	e5801000 	str	r1, [r0]
   4051c:	e3a01c01 	mov	r1, #256	; 0x100
   40520:	e3a02c01 	mov	r2, #256	; 0x100
   40524:	e580101c 	str	r1, [r0, #28]
   40528:	e3a0a000 	mov	sl, #0

0004052c <delay>:
   4052c:	e28aa001 	add	sl, sl, #1
   40530:	e15a0002 	cmp	sl, r2
   40534:	1afffffc 	bne	4052c <delay>
   40538:	e5801028 	str	r1, [r0, #40]	; 0x28
   4053c:	e3a0a000 	mov	sl, #0

00040540 <delay2>:
   40540:	e28aa001 	add	sl, sl, #1
   40544:	e15a0002 	cmp	sl, r2
   40548:	1afffffc 	bne	40540 <delay2>
   4054c:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   40550:	e12fff1e 	bx	lr

00040554 <blinkLEDForever>:
   40554:	e59f00c4 	ldr	r0, [pc, #196]	; 40620 <memcopyfast+0x5c>
   40558:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   4055c:	e3a01602 	mov	r1, #2097152	; 0x200000
   40560:	e5801010 	str	r1, [r0, #16]
   40564:	e3a01902 	mov	r1, #32768	; 0x8000
   40568:	e5801020 	str	r1, [r0, #32]

0004056c <loopBlink>:
   4056c:	e5801020 	str	r1, [r0, #32]
   40570:	e3a0a000 	mov	sl, #0

00040574 <delay1a>:
   40574:	e28aa001 	add	sl, sl, #1
   40578:	e15a0002 	cmp	sl, r2
   4057c:	1afffffc 	bne	40574 <delay1a>
   40580:	e580102c 	str	r1, [r0, #44]	; 0x2c
   40584:	e3a0a000 	mov	sl, #0

00040588 <delay2a>:
   40588:	e28aa001 	add	sl, sl, #1
   4058c:	e15a0002 	cmp	sl, r2
   40590:	1afffffc 	bne	40588 <delay2a>
   40594:	eafffff4 	b	4056c <loopBlink>

00040598 <lowlev_blockCopyExecRelocatable>:
   40598:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0004059c <blockCopyExecRelocatableLoop>:
   4059c:	e4d13001 	ldrb	r3, [r1], #1
   405a0:	e4c03001 	strb	r3, [r0], #1
   405a4:	e2522001 	subs	r2, r2, #1
   405a8:	aafffffb 	bge	4059c <blockCopyExecRelocatableLoop>
   405ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   405b0:	e12fff10 	bx	r0

000405b4 <lowlev_blockCopyExecRelocatableLen>:
   405b4:	0000001c 	.word	0x0000001c

000405b8 <lowlev_goto>:
   405b8:	e12fff10 	bx	r0

000405bc <lowlev_store_abs8>:
   405bc:	e5c01000 	strb	r1, [r0]
   405c0:	e12fff1e 	bx	lr

000405c4 <memcopyfast>:
   405c4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   405c8:	e352007f 	cmp	r2, #127	; 0x7f
   405cc:	9a00000b 	bls	40600 <memcopyfast+0x3c>
   405d0:	e3110003 	tst	r1, #3
   405d4:	1a000009 	bne	40600 <memcopyfast+0x3c>
   405d8:	e3100003 	tst	r0, #3
   405dc:	1a000007 	bne	40600 <memcopyfast+0x3c>
   405e0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   405e4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   405e8:	e2422020 	sub	r2, r2, #32
   405ec:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   405f0:	f5d1f040 	pld	[r1, #64]	; 0x40
   405f4:	e352001f 	cmp	r2, #31
   405f8:	8afffff9 	bhi	405e4 <memcopyfast+0x20>
   405fc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   40600:	e3520000 	cmp	r2, #0
   40604:	0a000003 	beq	40618 <memcopyfast+0x54>
   40608:	e4d13001 	ldrb	r3, [r1], #1
   4060c:	e2522001 	subs	r2, r2, #1
   40610:	e4c03001 	strb	r3, [r0], #1
   40614:	1afffffb 	bne	40608 <memcopyfast+0x44>
   40618:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   4061c:	e12fff1e 	bx	lr
   40620:	20200000 	.word	0x20200000

00040624 <KeyConversion::getNumTypes()>:
   40624:	e3a00006 	mov	r0, #6
   40628:	e12fff1e 	bx	lr
